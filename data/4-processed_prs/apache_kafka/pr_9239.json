{"pr_number": 9239, "pr_title": "Adding reverse iterator usage for sliding windows processing (extending KIP-450)", "pr_createdAt": "2020-09-01T16:15:54Z", "pr_url": "https://github.com/apache/kafka/pull/9239", "timeline": [{"oid": "1b2b7583c481a7fbd3dedc35c838e3d98603e16d", "url": "https://github.com/apache/kafka/commit/1b2b7583c481a7fbd3dedc35c838e3d98603e16d", "message": "Initial classes for SlidingWindows, changes to processors", "committedDate": "2020-07-17T15:42:48Z", "type": "commit"}, {"oid": "3ee045a49a0c5e6478112af400e57c277b38f312", "url": "https://github.com/apache/kafka/commit/3ee045a49a0c5e6478112af400e57c277b38f312", "message": "updates to processor", "committedDate": "2020-07-17T18:31:10Z", "type": "commit"}, {"oid": "ff6ca4f62482d32f2f22a45647448727cfb67980", "url": "https://github.com/apache/kafka/commit/ff6ca4f62482d32f2f22a45647448727cfb67980", "message": "updated for grace period checks", "committedDate": "2020-07-17T20:19:34Z", "type": "commit"}, {"oid": "56a86f1718ba74e6ce4b808cb205ecf71a3d0b16", "url": "https://github.com/apache/kafka/commit/56a86f1718ba74e6ce4b808cb205ecf71a3d0b16", "message": "fixes for checkstyle", "committedDate": "2020-07-20T14:17:03Z", "type": "commit"}, {"oid": "0a3d6d490f0894ad128d4f981f9d7f87cf165f7d", "url": "https://github.com/apache/kafka/commit/0a3d6d490f0894ad128d4f981f9d7f87cf165f7d", "message": "fixes for checkstyle", "committedDate": "2020-07-20T14:20:42Z", "type": "commit"}, {"oid": "c6d358dfb62d09f4e8f406487b1f887c3db49267", "url": "https://github.com/apache/kafka/commit/c6d358dfb62d09f4e8f406487b1f887c3db49267", "message": "update algorithm, KIP changes, test", "committedDate": "2020-07-27T22:19:10Z", "type": "commit"}, {"oid": "0c1541ab543d2cfa0cb5e1e5288d39ec86187317", "url": "https://github.com/apache/kafka/commit/0c1541ab543d2cfa0cb5e1e5288d39ec86187317", "message": "Merge remote-tracking branch 'upstream/trunk' into slidingwindows", "committedDate": "2020-07-27T22:27:14Z", "type": "commit"}, {"oid": "7f1b886f9da1f0ee5d84806875f93088c7b3c4d8", "url": "https://github.com/apache/kafka/commit/7f1b886f9da1f0ee5d84806875f93088c7b3c4d8", "message": "updates for windowedBy and associated processors", "committedDate": "2020-07-28T16:36:31Z", "type": "commit"}, {"oid": "de89fe07b9ac515a0c430274200c39cadddbf64b", "url": "https://github.com/apache/kafka/commit/de89fe07b9ac515a0c430274200c39cadddbf64b", "message": "test fixes, updating algorithms", "committedDate": "2020-07-29T17:10:05Z", "type": "commit"}, {"oid": "35e637d6c0d932129d69b50072d2d1b412af7d10", "url": "https://github.com/apache/kafka/commit/35e637d6c0d932129d69b50072d2d1b412af7d10", "message": ":review updates", "committedDate": "2020-07-31T19:59:41Z", "type": "commit"}, {"oid": "dc2f65f711a54e995094a1885df1dc728c479b1b", "url": "https://github.com/apache/kafka/commit/dc2f65f711a54e995094a1885df1dc728c479b1b", "message": "review updates, test additions", "committedDate": "2020-08-05T00:09:33Z", "type": "commit"}, {"oid": "9cca939e7b54f60cbbf0fc8abdd0f94fbbe19f45", "url": "https://github.com/apache/kafka/commit/9cca939e7b54f60cbbf0fc8abdd0f94fbbe19f45", "message": "sophie's reviews", "committedDate": "2020-08-05T14:20:20Z", "type": "commit"}, {"oid": "e5a0d4b4a60f55d2ee7f412486ed8b567d493e25", "url": "https://github.com/apache/kafka/commit/e5a0d4b4a60f55d2ee7f412486ed8b567d493e25", "message": "cleaning up pr", "committedDate": "2020-08-05T15:37:05Z", "type": "commit"}, {"oid": "0afd88e97047c97e91e6d6273eb909e76eb782f4", "url": "https://github.com/apache/kafka/commit/0afd88e97047c97e91e6d6273eb909e76eb782f4", "message": "Merge branch 'trunk' of github.com:apache/kafka into slidingwindows", "committedDate": "2020-08-05T18:54:34Z", "type": "commit"}, {"oid": "24d91d8c33d3d3660f548623d6bcc7ef727d0862", "url": "https://github.com/apache/kafka/commit/24d91d8c33d3d3660f548623d6bcc7ef727d0862", "message": "updated tests", "committedDate": "2020-08-05T19:43:05Z", "type": "commit"}, {"oid": "65231139fb27f8e380d8bf6552a31c09f5fd28ff", "url": "https://github.com/apache/kafka/commit/65231139fb27f8e380d8bf6552a31c09f5fd28ff", "message": "grouped k stream and suppression tests", "committedDate": "2020-08-07T15:17:24Z", "type": "commit"}, {"oid": "34b3f5a2f6dee16a514698f39187eddcfab134bc", "url": "https://github.com/apache/kafka/commit/34b3f5a2f6dee16a514698f39187eddcfab134bc", "message": "removing reverse iterator, to be implemented later", "committedDate": "2020-08-07T20:41:17Z", "type": "commit"}, {"oid": "1071098d77ebda24f4a5791ca449efbb0cdabd48", "url": "https://github.com/apache/kafka/commit/1071098d77ebda24f4a5791ca449efbb0cdabd48", "message": "sophie's comments and testing updates", "committedDate": "2020-08-12T15:54:25Z", "type": "commit"}, {"oid": "824f8702114bff71944a2004cf8eadbd7144c785", "url": "https://github.com/apache/kafka/commit/824f8702114bff71944a2004cf8eadbd7144c785", "message": "trunk updates", "committedDate": "2020-08-17T14:38:32Z", "type": "commit"}, {"oid": "1163c2faa84d3bb05c178ce67ecb047a92b9a054", "url": "https://github.com/apache/kafka/commit/1163c2faa84d3bb05c178ce67ecb047a92b9a054", "message": "cogrouped builder updates", "committedDate": "2020-08-17T14:44:58Z", "type": "commit"}, {"oid": "296a6c3035f7eda71729d5cec7e16778383b7fad", "url": "https://github.com/apache/kafka/commit/296a6c3035f7eda71729d5cec7e16778383b7fad", "message": "test updates and clean up", "committedDate": "2020-08-19T18:12:59Z", "type": "commit"}, {"oid": "bb609a89ec7543943d03a1939e61f8208847ce8e", "url": "https://github.com/apache/kafka/commit/bb609a89ec7543943d03a1939e61f8208847ce8e", "message": "randomized and small test improvements", "committedDate": "2020-08-24T17:07:55Z", "type": "commit"}, {"oid": "64d4cbbdec80580a91c13a57e4d091efebf749d7", "url": "https://github.com/apache/kafka/commit/64d4cbbdec80580a91c13a57e4d091efebf749d7", "message": "testing clean up", "committedDate": "2020-08-26T16:30:45Z", "type": "commit"}, {"oid": "48328f651602f2078add6f780bb42199cd2c0316", "url": "https://github.com/apache/kafka/commit/48328f651602f2078add6f780bb42199cd2c0316", "message": "udpates wtih john's comments", "committedDate": "2020-08-28T15:04:32Z", "type": "commit"}, {"oid": "fdfb1cde038e3750bb6d8c3900558bacc18feabc", "url": "https://github.com/apache/kafka/commit/fdfb1cde038e3750bb6d8c3900558bacc18feabc", "message": "udpates wtih john's comments", "committedDate": "2020-08-28T15:42:10Z", "type": "commit"}, {"oid": "1ce06f9321e8c74eeb0c80daaf1acb0ca70f8bd8", "url": "https://github.com/apache/kafka/commit/1ce06f9321e8c74eeb0c80daaf1acb0ca70f8bd8", "message": "Merge branch 'slidingwindows' of github.com:lct45/kafka into slidingwindows", "committedDate": "2020-08-28T15:43:54Z", "type": "commit"}, {"oid": "dd8c4e431479ce88ce3e95a5fe3ba288e5741ce8", "url": "https://github.com/apache/kafka/commit/dd8c4e431479ce88ce3e95a5fe3ba288e5741ce8", "message": "fixes for early records", "committedDate": "2020-08-31T14:33:17Z", "type": "commit"}, {"oid": "8c7e736d6b0b7c9d40e946375065ac976428742b", "url": "https://github.com/apache/kafka/commit/8c7e736d6b0b7c9d40e946375065ac976428742b", "message": "working updates", "committedDate": "2020-08-31T14:33:17Z", "type": "commit"}, {"oid": "8e1d23504ad4c733718fe1f491e0c95bb28e732e", "url": "https://github.com/apache/kafka/commit/8e1d23504ad4c733718fe1f491e0c95bb28e732e", "message": "algorithm and test updates", "committedDate": "2020-08-31T14:33:17Z", "type": "commit"}, {"oid": "c061076d72e51ed0ab056a8dc808566398cbf0d2", "url": "https://github.com/apache/kafka/commit/c061076d72e51ed0ab056a8dc808566398cbf0d2", "message": "updates from sophie's comments", "committedDate": "2020-08-31T14:33:17Z", "type": "commit"}, {"oid": "b7663e7673f470ed74429440689904d92a7132d8", "url": "https://github.com/apache/kafka/commit/b7663e7673f470ed74429440689904d92a7132d8", "message": "PreviousRecord updates, method streamlining", "committedDate": "2020-08-31T15:17:44Z", "type": "commit"}, {"oid": "8f75a48dcda6b2eed7c7a07e50436c8bc31ae783", "url": "https://github.com/apache/kafka/commit/8f75a48dcda6b2eed7c7a07e50436c8bc31ae783", "message": "rebase with sliding windows pr", "committedDate": "2020-08-31T22:49:05Z", "type": "commit"}, {"oid": "527ddce5831408b31bac099c849874899289e8b7", "url": "https://github.com/apache/kafka/commit/527ddce5831408b31bac099c849874899289e8b7", "message": "reverse iterator for sliding windows", "committedDate": "2020-09-01T16:09:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxODEyMQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r481518121", "bodyText": "I'm not sure I understand the usage of backwardsIterator here. Do we ever set it to anything?\nI think you're overcomplicating this \ud83d\ude42  All you need to do is call windowStore.backwardsFetch(...) and if the underlying store doesn't support it, then it will throw UnsupportedOperationException. You don't need to use reflection/getMethod . Also, if we're ever in a position of catching SecurityException, something has probably gone wrong\nOriginally I was thinking we should do this in init so we don't have to figure out if it's a reverse store every time a new record gets processed. But I just realized that all of the SessionStore fetch methods require a key, so we have to do this in process (since we don't have a key to pass in during init, and null keys aren't allowed). We can at least just do it once in the first process, and then keep track of whether we should use forwards or reverse iteration in subsequent ones\n\nGiven the above (especially 3), there's no perfect solution, but one thing we can do is just keep a reverseIterationPossible boolean. If it's false we call processInOrder, if it's true we call processReverse. We also put a catch UnsupportedOperationException around the processReverse call, so if it does throw on the first invocation of process then we can call processInOrder and also set reverseIterationPossible to false so that we never call processReverse again. Does that make sense?", "author": "ableegoldman", "createdAt": "2020-09-02T01:02:03Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -118,24 +121,28 @@ public void process(final K key, final V value) {\n             }\n \n             final long timestamp = context().timestamp();\n-            //don't process records that don't fall within a full sliding window\n-            if (timestamp < windows.timeDifferenceMs()) {\n-                log.warn(\n-                    \"Skipping record due to early arrival. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n-                    value, context().topic(), context().partition(), context().offset()\n-                );\n-                droppedRecordsSensor.record();\n-                return;\n+            Method backwardsIterator = null;\n+\n+            try {\n+                windowStore.getClass().getMethod(\"backwardFetch\", new Class[] { Object.class, Object.class, Instant.class, Instant.class });\n+            } catch (NoSuchMethodException | SecurityException e)  { }\n+            if (backwardsIterator != null) {\n+                processReverse(key, value, timestamp);\n+            } else {\n+                processInOrder(key, value, timestamp);", "originalCommit": "527ddce5831408b31bac099c849874899289e8b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7978d7f411808bb2dea83998af847ba0566f1ef7", "url": "https://github.com/apache/kafka/commit/7978d7f411808bb2dea83998af847ba0566f1ef7", "message": "Reverse iterator implemenetation for sliding windows", "committedDate": "2020-09-02T15:18:13Z", "type": "commit"}, {"oid": "51f4a80bccc90f7365a8f8469939419a2a6c0d32", "url": "https://github.com/apache/kafka/commit/51f4a80bccc90f7365a8f8469939419a2a6c0d32", "message": "checkstyle fixes", "committedDate": "2020-09-02T16:45:30Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "51f4a80bccc90f7365a8f8469939419a2a6c0d32", "url": "https://github.com/apache/kafka/commit/51f4a80bccc90f7365a8f8469939419a2a6c0d32", "message": "checkstyle fixes", "committedDate": "2020-09-02T16:45:30Z", "type": "forcePushed"}, {"oid": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "url": "https://github.com/apache/kafka/commit/8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "message": "Fixes finding previous record for previous right window", "committedDate": "2020-09-02T17:41:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNzQ2Ng==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482427466", "bodyText": "We should log a debug message indicating which we decide to use", "author": "ableegoldman", "createdAt": "2020-09-02T20:35:02Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -118,24 +120,56 @@ public void process(final K key, final V value) {\n             }\n \n             final long timestamp = context().timestamp();\n-            //don't process records that don't fall within a full sliding window\n-            if (timestamp < windows.timeDifferenceMs()) {\n+            observedStreamTime = Math.max(observedStreamTime, timestamp);\n+            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+\n+            if (timestamp + 1 + windows.timeDifferenceMs() <= closeTime) {\n                 log.warn(\n-                    \"Skipping record due to early arrival. value=[{}] topic=[{}] partition=[{}] offset=[{}]\",\n-                    value, context().topic(), context().partition(), context().offset()\n+                    \"Skipping record for expired window. \" +\n+                        \"key=[{}] \" +\n+                        \"topic=[{}] \" +\n+                        \"partition=[{}] \" +\n+                        \"offset=[{}] \" +\n+                        \"timestamp=[{}] \" +\n+                        \"window=[{},{}] \" +\n+                        \"expiration=[{}] \" +\n+                        \"streamTime=[{}]\",\n+                    key,\n+                    context().topic(),\n+                    context().partition(),\n+                    context().offset(),\n+                    context().timestamp(),\n+                    timestamp - windows.timeDifferenceMs(), timestamp,\n+                    closeTime,\n+                    observedStreamTime\n                 );\n-                droppedRecordsSensor.record();\n+                lateRecordDropSensor.record();\n                 return;\n             }\n-            processInOrder(key, value, timestamp);\n-        }\n \n-        public void processInOrder(final K key, final V value, final long timestamp) {\n+            if (timestamp < windows.timeDifferenceMs()) {\n+                processEarly(key, value, timestamp, closeTime);\n+                return;\n+            }\n \n-            observedStreamTime = Math.max(observedStreamTime, timestamp);\n-            final long closeTime = observedStreamTime - windows.gracePeriodMs();\n+            if (reverseIteratorPossible == null) {\n+                try {\n+                    windowStore.backwardFetch(key, 0L, 0L);\n+                    reverseIteratorPossible = true;\n+                } catch (final UnsupportedOperationException e)  {\n+                    reverseIteratorPossible = false;", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyOTE5OA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482429198", "bodyText": "Also we can then use the log message to verify that the correct process method gets chosen", "author": "ableegoldman", "createdAt": "2020-09-02T20:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyNzQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzMjAzNQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482432035", "bodyText": "Is everything after this point the same for both processInOrder and processReverse? The only difference between the two is in the iterator loop, right? If so, we should try to reduce duplicate code and only invoke a difference in-order vs reverse method for the loop", "author": "ableegoldman", "createdAt": "2020-09-02T20:38:30Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {\n+                            foundRightWinAgg = true;\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                        leftWinAlreadyCreated = true;\n+                    } else if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n+                    } else {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            //create right window for previous record", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0Nzg1Mg==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r483147852", "bodyText": "Okay I tried to reduce duplicate code, it led to some methods with long variable lists because of not being able to pass by reference. Maybe I'm missing some way to make it cleaner so let me know if it can be improved", "author": "lct45", "createdAt": "2020-09-03T17:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzMjAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3Njc2OQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485276769", "bodyText": "Yeah, that's definitely a pretty long list of input parameters. I don't think that's necessarily a problem, but if you feel it's cleaner to just inline the window creation, then go for it.\nDuplicate code is not the end of the world. The only risk is that we might need to change the window creation logic and only do it in one place but not the other, but that's probably a low risk here. So just make a call \ud83d\ude42", "author": "ableegoldman", "createdAt": "2020-09-09T01:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzMjAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzNTM2Nw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482435367", "bodyText": "Instead of the extra foundRightWinAgg  boolean, can we just check if rightWinAgg is still equal to null?", "author": "ableegoldman", "createdAt": "2020-09-02T20:40:53Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzOTEwNA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482439104", "bodyText": "Instead of asserting that this will be true at most once in the comment, we should do so in the code by checking else if startTime == timestamp + 1 instead of just falling back to else. Tbh we should probably do the same for the processInOrder case and not make any assumptions (you can add an else case that throws IllegalStateException then, since every possible case should be covered by one of the above conditions)", "author": "ableegoldman", "createdAt": "2020-09-02T20:43:36Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {\n+                            foundRightWinAgg = true;\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                        leftWinAlreadyCreated = true;\n+                    } else if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n+                    } else {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0OTYyNQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482449625", "bodyText": "I think it's also easiest to follow if we keep the conditions in the order that we will actually see them. So this case would be the first one (everything else is in order I think)", "author": "ableegoldman", "createdAt": "2020-09-02T20:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzOTEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0ODI0Ng==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482448246", "bodyText": "Since this is the current record's left window, either this condition or true or we already had a record with the same timestamp as the current record. Just throwing out a suggestion, maybe we could keep a boolean that tracks whether we already have a record at the current timestamp and if so we can actaully skip everything after the loop", "author": "ableegoldman", "createdAt": "2020-09-02T20:50:18Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {\n+                            foundRightWinAgg = true;\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyOTcxNQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r483129715", "bodyText": "Do we need a boolean? Or could we just return? If there's a record at the current record's timestamp, all we need to do is update the windows it falls within, and as we go back in time the earliest window it'll fall within is it's left window, so if we find the left window and the left window was created by a record at the same timestamp, we can just return after updating that window, right?", "author": "lct45", "createdAt": "2020-09-03T17:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0ODI0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMDgwNg==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r483310806", "bodyText": "Hm, yeah, that makes sense to me. Nice! I guess if we wanted to do something similar for the forward and early case, we would have to store a boolean. Not sure if it's worth it or not, your call", "author": "ableegoldman", "createdAt": "2020-09-03T23:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0ODI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ1NDM4NA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482454384", "bodyText": "Math.max(rightWinAgg.timestamp(), timestamp) doesn't make sense for this case, since we're not actually putting the current record in the window (although technically it will still choose the correct timestamp, for that reason).\nBut I think this might just be out of date and need to be rebased after the changes in the early records PR?", "author": "ableegoldman", "createdAt": "2020-09-02T20:54:29Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {\n+                            foundRightWinAgg = true;\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                        leftWinAlreadyCreated = true;\n+                    } else if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n+                    } else {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            //create right window for previous record\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n+                }\n+            }\n+\n+            //create the left window of the current record if it's not created\n+            if (!leftWinAlreadyCreated) {\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            //create the right window for the current record, if need be\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                createPreviousRightWindow(previousRecordTimestamp + 1, timestamp, key, value, closeTime);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(rightWinAgg.value(), Math.max(rightWinAgg.timestamp(), timestamp));", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ1NTQyNw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482455427", "bodyText": "nit: name it createPreviousRecordRightWindow for consistency/clarity", "author": "ableegoldman", "createdAt": "2020-09-02T20:55:15Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {\n+                            foundRightWinAgg = true;\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                        leftWinAlreadyCreated = true;\n+                    } else if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n+                    } else {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            //create right window for previous record\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n+                }\n+            }\n+\n+            //create the left window of the current record if it's not created\n+            if (!leftWinAlreadyCreated) {\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            //create the right window for the current record, if need be\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                createPreviousRightWindow(previousRecordTimestamp + 1, timestamp, key, value, closeTime);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(rightWinAgg.value(), Math.max(rightWinAgg.timestamp(), timestamp));\n+            windowStore.put(\n+                key,\n+                valueAndTime,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());        }\n+\n+        private void createPreviousRightWindow(final long windowStart,", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ1ODkxMg==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482458912", "bodyText": "We might as well move the previousRecordTimestamp null check into leftWindowNotEmpty. Also you can probably remove the comment then since it's saying basically the same thing as if leftWindowNotEmpty", "author": "ableegoldman", "createdAt": "2020-09-02T20:57:55Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {\n+                            foundRightWinAgg = true;\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                        leftWinAlreadyCreated = true;\n+                    } else if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n+                    } else {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            //create right window for previous record\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n+                }\n+            }\n+\n+            //create the left window of the current record if it's not created\n+            if (!leftWinAlreadyCreated) {\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            //create the right window for the current record, if need be\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                createPreviousRightWindow(previousRecordTimestamp + 1, timestamp, key, value, closeTime);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(rightWinAgg.value(), Math.max(rightWinAgg.timestamp(), timestamp));\n+            windowStore.put(\n+                key,\n+                valueAndTime,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());        }\n+\n+        private void createPreviousRightWindow(final long windowStart,\n+                                               final long currentRecordTimestamp,\n+                                               final K key,\n+                                               final V value,\n+                                               final long closeTime) {\n+            final TimeWindow window = new TimeWindow(windowStart, windowStart + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), currentRecordTimestamp);\n+            putAndForward(window, valueAndTime, key, value, closeTime, currentRecordTimestamp);\n+        }\n+\n+        private void createCurrentRecordLeftWindow(final Long previousRecordTimestamp,\n+                                               final long timestamp,\n+                                               final ValueAndTimestamp<Agg> leftWinAgg,\n+                                               final K key,\n+                                               final V value,\n+                                               final long closeTime) {\n+            final ValueAndTimestamp<Agg> valueAndTime;\n+            // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+            if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ2OTMxOQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482469319", "bodyText": "Sorry but this method name continues to throw me off...the comment does a good job of reminding what the check actually does/means, but ideally the method name alone would do a reasonable job of that. What about previousRecordRightWindowMustBeCreated or previousRecordRightWindowDoesNotExistAndIsNotEmpty ? I know those are both super long, especially the 2nd option, but I personally think the 2nd option does the best job of providing the link between what the check actually does, and why we do it. It's better to be clear than concise (when you can't be both)", "author": "ableegoldman", "createdAt": "2020-09-02T21:05:49Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -180,41 +217,225 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n             }\n \n             //create right window for previous record\n-            if (latestLeftTypeWindow != null) {\n-                final long rightWinStart = latestLeftTypeWindow.end() + 1;\n-                if (!windowStartTimes.contains(rightWinStart)) {\n-                    final TimeWindow window = new TimeWindow(rightWinStart, rightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n-                    putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n                 }\n             }\n \n             //create left window for new record\n             if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                //there's a right window that the new record could create --> new record's left window is not empty\n-                if (latestLeftTypeWindow != null) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            // create right window for new record, if necessary\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        public void processReverse(final K key, final V value, final long timestamp, final long closeTime) {\n+\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                //if we've already seen the window with the closest start time to the record\n+                boolean foundRightWinAgg = false;\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (endTime > timestamp) {\n+                        if (!foundRightWinAgg) {\n+                            foundRightWinAgg = true;\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                        leftWinAlreadyCreated = true;\n+                    } else if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n+                    } else {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;\n+                    }\n+                }\n+            }\n+\n+            //create right window for previous record\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, timestamp)) {\n+                    createPreviousRightWindow(previousRightWinStart, timestamp, key, value, closeTime);\n+                }\n+            }\n+\n+            //create the left window of the current record if it's not created\n+            if (!leftWinAlreadyCreated) {\n+                createCurrentRecordLeftWindow(previousRecordTimestamp, timestamp, leftWinAgg, key, value, closeTime);\n+            }\n+            //create the right window for the current record, if need be\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    }\n                 }\n-                final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n-                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n             }\n-            //create right window for new record\n+\n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n             if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n-                final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n-                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(getValueOrNull(rightWinAgg), Math.max(rightWinAgg.timestamp(), timestamp));\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                createPreviousRightWindow(previousRecordTimestamp + 1, timestamp, key, value, closeTime);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n                 putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n             }\n+\n         }\n \n-        private boolean rightWindowIsNotEmpty(final ValueAndTimestamp<Agg> rightWinAgg, final long timestamp) {\n-            return rightWinAgg != null && rightWinAgg.timestamp() > timestamp;\n+        private void createCurrentRecordRightWindow(final long timestamp,\n+                                                    final ValueAndTimestamp<Agg> rightWinAgg,\n+                                                    final K key) {\n+            final TimeWindow window = new TimeWindow(timestamp + 1, timestamp + 1 + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(rightWinAgg.value(), Math.max(rightWinAgg.timestamp(), timestamp));\n+            windowStore.put(\n+                key,\n+                valueAndTime,\n+                window.start());\n+            tupleForwarder.maybeForward(\n+                new Windowed<>(key, window),\n+                rightWinAgg.value(),\n+                null,\n+                rightWinAgg.timestamp());        }\n+\n+        private void createPreviousRightWindow(final long windowStart,\n+                                               final long currentRecordTimestamp,\n+                                               final K key,\n+                                               final V value,\n+                                               final long closeTime) {\n+            final TimeWindow window = new TimeWindow(windowStart, windowStart + windows.timeDifferenceMs());\n+            final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), currentRecordTimestamp);\n+            putAndForward(window, valueAndTime, key, value, closeTime, currentRecordTimestamp);\n+        }\n+\n+        private void createCurrentRecordLeftWindow(final Long previousRecordTimestamp,\n+                                               final long timestamp,\n+                                               final ValueAndTimestamp<Agg> leftWinAgg,\n+                                               final K key,\n+                                               final V value,\n+                                               final long closeTime) {\n+            final ValueAndTimestamp<Agg> valueAndTime;\n+            // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n+            if (previousRecordTimestamp != null && leftWindowNotEmpty(previousRecordTimestamp, timestamp)) {\n+                valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), timestamp);\n+            } else {\n+                valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+            }\n+            final TimeWindow window = new TimeWindow(timestamp - windows.timeDifferenceMs(), timestamp);\n+            putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n         }\n \n-        private boolean isLeftWindow(final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> window) {\n-            return window.key.window().end() == window.value.timestamp();\n+        private boolean leftWindowNotEmpty(final long previousTimestamp, final long currentTimestamp) {\n+            return currentTimestamp - windows.timeDifferenceMs() <= previousTimestamp;\n+        }\n+\n+        // previous record's right window does not already exist and current record falls within previous record's right window\n+        private boolean rightWindowNecessaryAndPossible(final Set<Long> windowStartTimes,", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3Njk4NA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r482476984", "bodyText": "I think it would be valuable to have all the tests run with both the forward and reverse iterators. You can actually parametrize the test class itself so that it runs multiple times with different input: the syntax is kind of hard to explain (and understand) but you can look at EosBetaUpgradeIntegrationTest as an example. It's parametrized by a injectFailure boolean -- you can do the same thing with a forwardIteration boolean.\nThen you could force it to run in the forward direction by providing a custom WindowBytesStoreSupplier that supplies a custom WindowStore implementation where the appropriate fetch method throws UnsupportedOperationException. You should be able to just extend one of the existing built-in stores (eg RocksDBWindowStore or InMemoryWindowStore) that just overrides fetch. Let me know if you have any questions about how all this would work", "author": "ableegoldman", "createdAt": "2020-09-02T21:12:48Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -608,10 +615,13 @@ public void testAggregateRandomInput() {\n \n     private void verifyRandomTestResults(final Map<Long, ValueAndTimestamp<String>> actual) {", "originalCommit": "8ef2f3030006972660ea5d1d39b0ee1f9bf0b46f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MjEyOQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r483152129", "bodyText": "Yeah I think running on both is definitely good to have. Along that line, should benchmark run with both reverse and forward? It could indicate if reverse is actually more efficient or if they run about the same", "author": "lct45", "createdAt": "2020-09-03T17:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3Njk4NA=="}], "type": "inlineReview"}, {"oid": "241663e52cb27ff7b0a9d39aae56e297620e0fdd", "url": "https://github.com/apache/kafka/commit/241663e52cb27ff7b0a9d39aae56e297620e0fdd", "message": "Merge branch 'trunk' of github.com:apache/kafka into reverseiterator", "committedDate": "2020-09-03T13:45:45Z", "type": "commit"}, {"oid": "90cfc6948987fc64c7bd568bbfa8b4e87c405ee4", "url": "https://github.com/apache/kafka/commit/90cfc6948987fc64c7bd568bbfa8b4e87c405ee4", "message": "Sophie's updates and test fixes", "committedDate": "2020-09-03T17:56:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NTA2MA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485265060", "bodyText": "Why this change?", "author": "ableegoldman", "createdAt": "2020-09-09T00:20:49Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java", "diffHunk": "@@ -239,52 +241,81 @@ private void doCountSlidingWindows(final  MockProcessorSupplier<Windowed<String>\n             inputTopic.pipeInput(\"2\", \"B\", 1000L);\n             inputTopic.pipeInput(\"3\", \"C\", 600L);\n         }\n-        assertThat(supplier.theCapturedProcessor().processed(), equalTo(Arrays.asList(\n-                // processing A@500\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(0L, 500L)), 1L, 500L),\n-                // processing A@999\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(501L, 1001L)), 1L, 999L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(499L, 999L)), 2L, 999L),\n-                // processing A@600\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(499L, 999L)), 3L, 999L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(501L, 1001L)), 2L, 999L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(100L, 600L)), 2L, 600L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(601L, 1101L)), 1L, 999L),\n-                // processing B@500\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(0L, 500L)), 1L, 500L),\n-                // processing B@600\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(501L, 1001L)), 1L, 600L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(100L, 600L)), 2L, 600L),\n-                // processing B@700\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(501L, 1001L)), 2L, 700L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(601L, 1101L)), 1L, 700L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(200L, 700L)), 3L, 700L),\n-                // processing C@501\n-                new KeyValueTimestamp<>(new Windowed<>(\"3\", new TimeWindow(1L, 501L)), 1L, 501L),\n-                // processing first A@1000\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(501L, 1001L)), 3L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(601L, 1101L)), 2L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(1000L, 1500L)), 1L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(500L, 1000L)), 4L, 1000L),\n-                // processing second A@1000\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(500L, 1000L)), 5L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(501L, 1001L)), 4L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(601L, 1101L)), 3L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"1\", new TimeWindow(1000L, 1500L)), 2L, 1000L),\n-                // processing first B@1000\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(501L, 1001L)), 3L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(601L, 1101)), 2L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(701L, 1201L)), 1L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(500L, 1000L)), 4L, 1000L),\n-                // processing second B@1000\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(500L, 1000L)), 5L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(501L, 1001L)), 4L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(601L, 1101)), 3L, 1000L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"2\", new TimeWindow(701L, 1201L)), 2L, 1000L),\n-                // processing C@600\n-                new KeyValueTimestamp<>(new Windowed<>(\"3\", new TimeWindow(502L, 1002L)), 1L, 600L),\n-                new KeyValueTimestamp<>(new Windowed<>(\"3\", new TimeWindow(100L, 600L)), 2L, 600L)\n \n+        final Comparator<KeyValueTimestamp<Windowed<String>, Long>> comparator =", "originalCommit": "90cfc6948987fc64c7bd568bbfa8b4e87c405ee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYyMzc4Ng==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485623786", "bodyText": "Because we're outputting all the intermediate data, the order of the internal windows aren't the same when you use the reverse iterator versus the in-order iterator. This is mainly an issue for large tests, but when there are a lot of windows to update as a new record comes in, the reverse iterator looks at them from largest start time to smallest start time, and the in-order iterator looks at them from smallest start time to largest start time. I suppose we could alter the algorithm to output results differently, but getting a different order didn't seem too harmful for users. WDYT?", "author": "lct45", "createdAt": "2020-09-09T13:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NTA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczODk3NQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486738975", "bodyText": "FWIW, I agree. The result of this aggregation is a KTable, i.e., a changelog stream. The semantics of the changelog stream only state that each record represents the latest state for that record's key. Just like the caches are free to drop arbitrary intermediate updates and KIP-557 is free to drop arbitrary idempotent updates, a processor that forwards updates for multiple different keys should be free to do it in any order.\nIn fact, I might go so far as to suggest that a proper behavioral test would load all the results into a map so that the test isn't sensitive to meaningless changes like this. But I won't go quite that far because it seems good to to have the opportunity to ask questions like @ableegoldman's. Just to be sure nothing unexpected is happening when we change things later.\nI also think it's better for performance not to try and buffer the window results and emit them in \"forward\" order, since it might be an arbitrarily large number of updates for us to keep in memory.", "author": "vvcephei", "createdAt": "2020-09-11T02:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NTA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDY2MQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486750661", "bodyText": "Sorry, I realize I never replied to your reply. I definitely agree, no need to force a particular inter-key ordering. The only ordering that would change is the updates to windows of different start times, which was arbitrary to begin with. The ordering that does matter -- intra-key ordering, ie updates with the same key and window start time -- isn't affected. Final results still come last, which is the important thing", "author": "ableegoldman", "createdAt": "2020-09-11T03:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NTA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NjY1Mw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485266653", "bodyText": "This makes it sound like you want to assert that the output is not ordered, which I don't think is the point here?\nAlso, since you're only calling this from one place and are asserting a specific output that corresponds to a specific test, I would just inline this check in the test instead of moving it out to a new method", "author": "ableegoldman", "createdAt": "2020-09-09T00:26:24Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SlidingWindowedCogroupedKStreamImplTest.java", "diffHunk": "@@ -246,4 +238,31 @@ private void assertOutputKeyValueTimestamp(final TestOutputTopic<Windowed<String\n         final TestRecord<String, String> testRecord = new TestRecord<>(expectedKey, expectedValue, null, expectedTimestamp);\n         assertThat(nonWindowedRecord, equalTo(testRecord));\n     }\n+\n+    private void assertOutputKeyValueNotOrdered(final Set<TestRecord<String, String>> results) {", "originalCommit": "90cfc6948987fc64c7bd568bbfa8b4e87c405ee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYyMTQ5OQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485621499", "bodyText": "Yeah the name was a struggle, but I just put it all back into the main function so should be cleaner now", "author": "lct45", "createdAt": "2020-09-09T13:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NjY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzgzNw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485267837", "bodyText": "Is this change just sorting the output by window start time? Why do that vs. verifying that the output is in a specific order? In general the output order may not matter much but it does seem important to verify for suppress (I think \ud83e\udd37\u200d\u2640\ufe0f )", "author": "ableegoldman", "createdAt": "2020-09-09T00:30:43Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/SuppressScenarioTest.java", "diffHunk": "@@ -493,52 +494,59 @@ public void shouldSupportFinalResultsForSlidingWindows() {\n             inputTopic.pipeInput(\"k1\", \"v1\", 7L);\n             // final record to advance stream time and flush windows\n             inputTopic.pipeInput(\"k1\", \"v1\", 90L);\n+            final Comparator<TestRecord<String, Long>> comparator =", "originalCommit": "90cfc6948987fc64c7bd568bbfa8b4e87c405ee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYyMDU1NA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485620554", "bodyText": "Yeah it is just sorting the window by start time. With the reverse iterator looking at windows in a different order, the intermediate windows aren't updated in the same order as they are with in-order iterator. I don't think it should matter for suppress because the main list of output in this test is actually the raw output, it looks like the suppressed output didn't change after the ordering", "author": "lct45", "createdAt": "2020-09-09T13:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MjczOA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486742738", "bodyText": "It might matter for emit-on-full suppress buffers (if they actually get full), but even then, I think it's equally correct either way, so I don't think we need to be concerned.", "author": "vvcephei", "createdAt": "2020-09-11T02:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MzQ5Nw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486743497", "bodyText": "Ah, I belatedly realized what I think was @ableegoldman's concern. Suppress cares about the timestamps of the records, not the window start times. Since the timestamp of the windowed aggregation results are determined by the input record, not the window start times, all window agg updates that get forwarded happen \"at the same time\", right?\nIf that's true, then it doesn't matter the order we forward them in.", "author": "vvcephei", "createdAt": "2020-09-11T02:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MzE5NQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486753195", "bodyText": "Actually, I think the timestamp of the forwarded results is now the window's \"event time\", ie the maximum timestamp of a record in the window. But in retrospect I don't see any correctness issues here: for one thing, as I mentioned in the other comment, this only affects the relative ordering of updates with different windowed keys. And there's no ordering guarantees between keys. It also shouldn't even have any impact on advancing stream-time and potentially dropping some windows due to grace", "author": "ableegoldman", "createdAt": "2020-09-11T03:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3NDQwMA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r487174400", "bodyText": "Yeah, this sounds right. Either the current record's timestamp is less than the event time for some of the windows, in which case it doesn't advance the partition's stream time, or it is more advanced than the (prior) event time for all the windows, in which case it does advance the stream time, but all the updated windows' event times are equal to the current record's timestamp, which is also equal to the new stream time, which should also be ok for suppression.", "author": "vvcephei", "createdAt": "2020-09-11T17:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI2NzgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NDgxNw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485274817", "bodyText": "nit: rename to inputRecordTimestamp to be consistent with the naming in the early records PR", "author": "ableegoldman", "createdAt": "2020-09-09T00:57:01Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -161,60 +205,231 @@ public void processInOrder(final K key, final V value, final long timestamp) {\n                     windowStartTimes.add(next.key.window().start());\n                     final long startTime = next.key.window().start();\n                     final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n \n                     if (endTime < timestamp) {\n                         leftWinAgg = next.value;\n-                        if (isLeftWindow(next)) {\n-                            latestLeftTypeWindow = next.key.window();\n-                        }\n+                        // update to store the previous record\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n                     } else if (endTime == timestamp) {\n                         leftWinAlreadyCreated = true;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n                     } else if (endTime > timestamp && startTime <= timestamp) {\n                         rightWinAgg = next.value;\n                         putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp + 1) {\n+                        rightWinAlreadyCreated = true;\n+                    } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n+                    }\n+                }\n+            }\n+            createWindows(key, value, timestamp, closeTime, windowStartTimes, rightWinAgg, leftWinAgg, leftWinAlreadyCreated, rightWinAlreadyCreated, previousRecordTimestamp);\n+        }\n+\n+        public void processReverse(final K key,\n+                                   final V value,\n+                                   final long timestamp,\n+                                   final long closeTime,\n+                                   final Set<Long> windowStartTimes,\n+                                   ValueAndTimestamp<Agg> leftWinAgg,\n+                                   ValueAndTimestamp<Agg> rightWinAgg,\n+                                   boolean leftWinAlreadyCreated,\n+                                   boolean rightWinAlreadyCreated,\n+                                   Long previousRecordTimestamp) {\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+                    if (startTime == timestamp + 1) {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;\n+                    } else if (endTime > timestamp) {\n+                        if (rightWinAgg == null) {\n+                            rightWinAgg = next.value;\n+                        }\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (endTime == timestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        } else {\n+                            return;\n+                        }\n+                    } else if (endTime < timestamp) {\n+                        leftWinAgg = next.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n                     } else {\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n+                    }\n+                }\n+            }\n+            createWindows(key, value, timestamp, closeTime, windowStartTimes, rightWinAgg, leftWinAgg, leftWinAlreadyCreated, rightWinAlreadyCreated, previousRecordTimestamp);\n+        }\n+\n+        /**\n+         * Created to handle records that have a timestamp > 0 but < timeDifference. These records would create\n+         * windows with negative start times, which is not supported. Instead, they will fall within the [0, timeDifference]\n+         * window, and we will update their right windows as new records come in later\n+         */\n+        private void processEarly(final K key, final V value, final long timestamp, final long closeTime) {\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            //window from [0,timeDifference] that holds all early records\n+            KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> combinedWindow = null;\n+            boolean rightWinAlreadyCreated = false;\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.fetch(\n+                    key,\n+                    key,\n+                    Math.max(0, timestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    timestamp + 1)\n+            ) {\n+                KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> next;\n+                while (iterator.hasNext()) {\n+                    next = iterator.next();\n+                    windowStartTimes.add(next.key.window().start());\n+                    final long startTime = next.key.window().start();\n+                    final long windowMaxRecordTimestamp = next.value.timestamp();\n+\n+                    if (startTime == 0) {\n+                        combinedWindow = next;\n+                        if (windowMaxRecordTimestamp < timestamp) {\n+                            // If maxRecordTimestamp > timestamp, the current record is out-of-order, meaning that the\n+                            // previous record's right window would have been created already by other records. This\n+                            // will always be true for early records, as they all fall within [0, timeDifferenceMs].\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        }\n+\n+                    } else if (startTime <= timestamp) {\n+                        rightWinAgg = next.value;\n+                        putAndForward(next.key.window(), next.value, key, value, closeTime, timestamp);\n+                    } else if (startTime == timestamp + 1) {\n                         rightWinAlreadyCreated = true;\n                     }\n                 }\n             }\n \n+            // if there wasn't a right window agg found and we need a right window for our new record,\n+            // the current aggregate in the combined window will go in the new record's right window\n+            if (rightWinAgg == null && combinedWindow != null && combinedWindow.value.timestamp() > timestamp) {\n+                rightWinAgg = combinedWindow.value;\n+            }\n+\n+            //create right window for new record if needed\n+            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, timestamp)) {\n+                createCurrentRecordRightWindow(timestamp, rightWinAgg, key);\n+            }\n+\n+            //create the right window for the previous record if the previous record exists and the window hasn't already been created\n+            if (previousRecordTimestamp != null && !windowStartTimes.contains(previousRecordTimestamp + 1)) {\n+                createPreviousRecordRightWindow(previousRecordTimestamp + 1, timestamp, key, value, closeTime);\n+            }\n+\n+            if (combinedWindow == null) {\n+                final TimeWindow window = new TimeWindow(0, windows.timeDifferenceMs());\n+                final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), timestamp);\n+                putAndForward(window, valueAndTime, key, value, closeTime, timestamp);\n+\n+            } else {\n+                //update the combined window with the new aggregate\n+                putAndForward(combinedWindow.key.window(), combinedWindow.value, key, value, closeTime, timestamp);\n+            }\n+\n+        }\n+\n+        private void createWindows(final K key,\n+                                   final V value,\n+                                   final long timestamp,", "originalCommit": "90cfc6948987fc64c7bd568bbfa8b4e87c405ee4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd6243123fa83a3849afa94f8adff67b3556f8f1", "url": "https://github.com/apache/kafka/commit/bd6243123fa83a3849afa94f8adff67b3556f8f1", "message": "clean-up and early-records updates", "committedDate": "2020-09-09T13:57:05Z", "type": "commit"}, {"oid": "b32e0304ad2d0ed18bff97fff7d5830a360ca3f1", "url": "https://github.com/apache/kafka/commit/b32e0304ad2d0ed18bff97fff7d5830a360ca3f1", "message": "Rebasing after early-records", "committedDate": "2020-09-09T19:50:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNzExNA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485927114", "bodyText": "Why create all of these here and then pass the uninitialized values into processInOrder/processReverse? If we only need them within the processX methods, let's just keep them there", "author": "ableegoldman", "createdAt": "2020-09-09T21:17:16Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -150,23 +152,46 @@ public void process(final K key, final V value) {\n                 return;\n             }\n \n-            processInOrder(key, value, inputRecordTimestamp, closeTime);\n-        }\n-\n-        public void processInOrder(final K key, final V value, final long inputRecordTimestamp, final long closeTime) {\n+            if (reverseIteratorPossible == null) {\n+                try {\n+                    windowStore.backwardFetch(key, 0L, 0L);\n+                    reverseIteratorPossible = true;\n+                    log.debug(\"Sliding Windows aggregate using a reverse iterator\");\n+                } catch (final UnsupportedOperationException e)  {\n+                    reverseIteratorPossible = false;\n+                    log.debug(\"Sliding Windows aggregate using a forward iterator\");\n+                }\n+            }\n \n             final Set<Long> windowStartTimes = new HashSet<>();\n \n             // aggregate that will go in the current record\u2019s left/right window (if needed)\n-            ValueAndTimestamp<Agg> leftWinAgg = null;\n-            ValueAndTimestamp<Agg> rightWinAgg = null;\n+            final ValueAndTimestamp<Agg> leftWinAgg = null;\n+            final ValueAndTimestamp<Agg> rightWinAgg = null;\n \n             //if current record's left/right windows already exist\n-            boolean leftWinAlreadyCreated = false;\n-            boolean rightWinAlreadyCreated = false;\n+            final boolean leftWinAlreadyCreated = false;\n+            final boolean rightWinAlreadyCreated = false;\n \n-            Long previousRecordTimestamp = null;\n+            final Long previousRecordTimestamp = null;", "originalCommit": "b32e0304ad2d0ed18bff97fff7d5830a360ca3f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNzM1Mg==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485927352", "bodyText": "This comment doesn't really add much", "author": "ableegoldman", "createdAt": "2020-09-09T21:17:46Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -184,6 +209,7 @@ public void processInOrder(final K key, final V value, final long inputRecordTim\n \n                     if (endTime < inputRecordTimestamp) {\n                         leftWinAgg = windowBeingProcessed.value;\n+                        // update to store the previous record", "originalCommit": "b32e0304ad2d0ed18bff97fff7d5830a360ca3f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNzkyNg==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485927926", "bodyText": "Was this a rebasing accident? Seems like using startTime is correct", "author": "ableegoldman", "createdAt": "2020-09-09T21:18:56Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -194,7 +220,7 @@ public void processInOrder(final K key, final V value, final long inputRecordTim\n                     } else if (endTime > inputRecordTimestamp && startTime <= inputRecordTimestamp) {\n                         rightWinAgg = windowBeingProcessed.value;\n                         updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n-                    } else if (startTime == inputRecordTimestamp + 1) {", "originalCommit": "b32e0304ad2d0ed18bff97fff7d5830a360ca3f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyODUzNg==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485928536", "bodyText": "super nit: put a line break before the right window creation block below", "author": "ableegoldman", "createdAt": "2020-09-09T21:20:12Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -327,6 +382,41 @@ private void processEarly(final K key, final V value, final long inputRecordTime\n \n         }\n \n+        private void createWindows(final K key,\n+                                   final V value,\n+                                   final long inputRecordTimestamp,\n+                                   final long closeTime,\n+                                   final Set<Long> windowStartTimes,\n+                                   final ValueAndTimestamp<Agg> rightWinAgg,\n+                                   final ValueAndTimestamp<Agg> leftWinAgg,\n+                                   final boolean leftWinAlreadyCreated,\n+                                   final boolean rightWinAlreadyCreated,\n+                                   final Long previousRecordTimestamp) {\n+            //create right window for previous record\n+            if (previousRecordTimestamp != null) {\n+                final long previousRightWinStart = previousRecordTimestamp + 1;\n+                if (previousRecordRightWindowDoesNotExistAndIsNotEmpty(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n+                    createPreviousRecordRightWindow(previousRightWinStart, inputRecordTimestamp, key, value, closeTime);\n+                }\n+            }\n+\n+            //create left window for new record\n+            if (!leftWinAlreadyCreated) {\n+                final ValueAndTimestamp<Agg> valueAndTime;\n+                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n+                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n+                } else {\n+                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+                }\n+                final TimeWindow window = new TimeWindow(inputRecordTimestamp - windows.timeDifferenceMs(), inputRecordTimestamp);\n+                updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n+            }", "originalCommit": "b32e0304ad2d0ed18bff97fff7d5830a360ca3f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMDA1NA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r485930054", "bodyText": "I think some things got accidentally changed/reverted during the rebase, eg this paragraph and the comment on line 250 at least", "author": "ableegoldman", "createdAt": "2020-09-09T21:23:36Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -205,38 +231,69 @@ public void processInOrder(final K key, final V value, final long inputRecordTim\n                     }\n                 }\n             }\n+            createWindows(key, value, inputRecordTimestamp, closeTime, windowStartTimes, rightWinAgg, leftWinAgg, leftWinAlreadyCreated, rightWinAlreadyCreated, previousRecordTimestamp);\n+        }\n \n-            //create right window for previous record\n-            if (previousRecordTimestamp != null) {\n-                final long previousRightWinStart = previousRecordTimestamp + 1;\n-                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n-                    final TimeWindow window = new TimeWindow(previousRightWinStart, previousRightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n-                    updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n-                }\n-            }\n-\n-            //create left window for new record\n-            if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n-                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+        public void processReverse(final K key,\n+                                   final V value,\n+                                   final long inputRecordTimestamp,\n+                                   final long closeTime,\n+                                   final Set<Long> windowStartTimes,\n+                                   ValueAndTimestamp<Agg> leftWinAgg,\n+                                   ValueAndTimestamp<Agg> rightWinAgg,\n+                                   boolean leftWinAlreadyCreated,\n+                                   boolean rightWinAlreadyCreated,\n+                                   Long previousRecordTimestamp) {\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    inputRecordTimestamp + 1)\n+            ) {\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n+                    if (startTime == inputRecordTimestamp + 1) {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass\n+                        rightWinAlreadyCreated = true;\n+                    } else if (endTime > inputRecordTimestamp) {\n+                        if (rightWinAgg == null) {\n+                            rightWinAgg = windowBeingProcessed.value;\n+                        }\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                    } else if (endTime == inputRecordTimestamp) {\n+                        leftWinAlreadyCreated = true;\n+                        updateWindowAndForward(windowBeingProcessed.key.window(), windowBeingProcessed.value, key, value, closeTime, inputRecordTimestamp);\n+                        if (windowMaxRecordTimestamp < inputRecordTimestamp) {\n+                            previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        } else {\n+                            return;\n+                        }\n+                    } else if (endTime < inputRecordTimestamp) {\n+                        leftWinAgg = windowBeingProcessed.value;\n+                        previousRecordTimestamp = windowMaxRecordTimestamp;\n+                        break;\n+                    } else {\n+                        log.error(\n+                            \"Unexpected window with start {} found when processing record at {} in `KStreamSlidingWindowAggregate`.\",\n+                            startTime, inputRecordTimestamp\n+                        );\n+                        throw new IllegalStateException(\"Unexpected window found when processing sliding windows\");\n+                    }\n                 }\n-                final TimeWindow window = new TimeWindow(inputRecordTimestamp - windows.timeDifferenceMs(), inputRecordTimestamp);\n-                updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n-            }\n-            if (!rightWinAlreadyCreated && rightWindowIsNotEmpty(rightWinAgg, inputRecordTimestamp)) {\n-                createCurrentRecordRightWindow(inputRecordTimestamp, rightWinAgg, key);\n             }\n+            createWindows(key, value, inputRecordTimestamp, closeTime, windowStartTimes, rightWinAgg, leftWinAgg, leftWinAlreadyCreated, rightWinAlreadyCreated, previousRecordTimestamp);\n         }\n \n         /**\n-         * Created to handle records where 0 < inputRecordTimestamp < timeDifferenceMs. These records would create\n-         * windows with negative start times, which is not supported. Instead, we will put them into the [0, timeDifferenceMs]\n-         * window as a \"workaround\", and we will update or create their right windows as new records come in later", "originalCommit": "b32e0304ad2d0ed18bff97fff7d5830a360ca3f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aba2ba1a6d1fa9bb1c8ad80c01a930076fa4b7c3", "url": "https://github.com/apache/kafka/commit/aba2ba1a6d1fa9bb1c8ad80c01a930076fa4b7c3", "message": "rebase clean up", "committedDate": "2020-09-10T14:14:50Z", "type": "commit"}, {"oid": "0cb516781867fb9e555811d673250359e26b3d08", "url": "https://github.com/apache/kafka/commit/0cb516781867fb9e555811d673250359e26b3d08", "message": "spacing clean-up", "committedDate": "2020-09-10T14:19:43Z", "type": "commit"}, {"oid": "794c5710a77cdeffb907c985cc1a67215774aa38", "url": "https://github.com/apache/kafka/commit/794c5710a77cdeffb907c985cc1a67215774aa38", "message": "Adding testing to run reverse and forward iterator", "committedDate": "2020-09-10T18:25:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxOTczNA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486619734", "bodyText": "nit: add 1 to upper bound to catch the current records'... here and elsewhere, it's not totally clear what this comment is referring to", "author": "ableegoldman", "createdAt": "2020-09-10T20:39:02Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -205,32 +221,67 @@ public void processInOrder(final K key, final V value, final long inputRecordTim\n                     }\n                 }\n             }\n+            createWindows(key, value, inputRecordTimestamp, closeTime, windowStartTimes, rightWinAgg, leftWinAgg, leftWinAlreadyCreated, rightWinAlreadyCreated, previousRecordTimestamp);\n+        }\n \n-            //create right window for previous record\n-            if (previousRecordTimestamp != null) {\n-                final long previousRightWinStart = previousRecordTimestamp + 1;\n-                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n-                    final TimeWindow window = new TimeWindow(previousRightWinStart, previousRightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n-                    updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n-                }\n-            }\n+        public void processReverse(final K key, final V value, final long inputRecordTimestamp, final long closeTime) {\n \n-            //create left window for new record\n-            if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n-                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store", "originalCommit": "794c5710a77cdeffb907c985cc1a67215774aa38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyMTM3MA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486621370", "bodyText": "nit: maybe you can just remove this comment, the code seems pretty explanatory. We can see what @vvcephei  thinks", "author": "ableegoldman", "createdAt": "2020-09-10T20:42:05Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java", "diffHunk": "@@ -205,32 +221,67 @@ public void processInOrder(final K key, final V value, final long inputRecordTim\n                     }\n                 }\n             }\n+            createWindows(key, value, inputRecordTimestamp, closeTime, windowStartTimes, rightWinAgg, leftWinAgg, leftWinAlreadyCreated, rightWinAlreadyCreated, previousRecordTimestamp);\n+        }\n \n-            //create right window for previous record\n-            if (previousRecordTimestamp != null) {\n-                final long previousRightWinStart = previousRecordTimestamp + 1;\n-                if (rightWindowNecessaryAndPossible(windowStartTimes, previousRightWinStart, inputRecordTimestamp)) {\n-                    final TimeWindow window = new TimeWindow(previousRightWinStart, previousRightWinStart + windows.timeDifferenceMs());\n-                    final ValueAndTimestamp<Agg> valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n-                    updateWindowAndForward(window, valueAndTime, key, value, closeTime, inputRecordTimestamp);\n-                }\n-            }\n+        public void processReverse(final K key, final V value, final long inputRecordTimestamp, final long closeTime) {\n \n-            //create left window for new record\n-            if (!leftWinAlreadyCreated) {\n-                final ValueAndTimestamp<Agg> valueAndTime;\n-                // if there's a right window that the new record could create && previous record falls within left window -> new record's left window is not empty\n-                if (leftWindowNotEmpty(previousRecordTimestamp, inputRecordTimestamp)) {\n-                    valueAndTime = ValueAndTimestamp.make(leftWinAgg.value(), inputRecordTimestamp);\n-                } else {\n-                    valueAndTime = ValueAndTimestamp.make(initializer.apply(), inputRecordTimestamp);\n+            final Set<Long> windowStartTimes = new HashSet<>();\n+\n+            // aggregate that will go in the current record\u2019s left/right window (if needed)\n+            ValueAndTimestamp<Agg> leftWinAgg = null;\n+            ValueAndTimestamp<Agg> rightWinAgg = null;\n+\n+            //if current record's left/right windows already exist\n+            boolean leftWinAlreadyCreated = false;\n+            boolean rightWinAlreadyCreated = false;\n+\n+            Long previousRecordTimestamp = null;\n+\n+            try (\n+                final KeyValueIterator<Windowed<K>, ValueAndTimestamp<Agg>> iterator = windowStore.backwardFetch(\n+                    key,\n+                    key,\n+                    Math.max(0, inputRecordTimestamp - 2 * windows.timeDifferenceMs()),\n+                    // to catch the current record's right window, if it exists, without more calls to the store\n+                    inputRecordTimestamp + 1)\n+            ) {\n+                while (iterator.hasNext()) {\n+                    final KeyValue<Windowed<K>, ValueAndTimestamp<Agg>> windowBeingProcessed = iterator.next();\n+                    final long startTime = windowBeingProcessed.key.window().start();\n+                    windowStartTimes.add(startTime);\n+                    final long endTime = startTime + windows.timeDifferenceMs();\n+                    final long windowMaxRecordTimestamp = windowBeingProcessed.value.timestamp();\n+                    if (startTime == inputRecordTimestamp + 1) {\n+                        //determine if current record's right window exists, will only be true at most once, on the first pass", "originalCommit": "794c5710a77cdeffb907c985cc1a67215774aa38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NTE4NQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486665185", "bodyText": "Yeah, it looks pretty straightforward without the comment. If anything would deserve clarification in a comment, it would be a reminder that we do not add the current record to the right-hand window. Then again, it's pretty fundamental to the algorithm.", "author": "vvcephei", "createdAt": "2020-09-10T22:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyMTM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyMzQ4MQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486623481", "bodyText": "Need to make this public for the child class used to parametrize the test so we continue to test both forward and reverse directions. The alternative would be to just create a new standalone ForwardOnlyWindowStore test utility class and stick it in the same package\n(btw, need to fix parameter alignment)", "author": "ableegoldman", "createdAt": "2020-09-10T20:46:18Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/InMemoryWindowStore.java", "diffHunk": "@@ -68,7 +68,7 @@\n \n     private volatile boolean open = false;\n \n-    InMemoryWindowStore(final String name,\n+    public InMemoryWindowStore(final String name,", "originalCommit": "794c5710a77cdeffb907c985cc1a67215774aa38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczNjc3OQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486736779", "bodyText": "Thanks for the explanation. This sounds fine to me.", "author": "vvcephei", "createdAt": "2020-09-11T02:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyMzQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTAxOQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486625019", "bodyText": "Where does topic-Canonized come from? Also, if we need to set the ValueSerde to String here, then wouldn't we need to do so for the in-order case as well? Does that mean we don't actually need the withValueSerde thing here?", "author": "ableegoldman", "createdAt": "2020-09-10T20:49:30Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -78,16 +100,28 @@\n     public void testAggregateSmallInput() {\n         final StreamsBuilder builder = new StreamsBuilder();\n         final String topic = \"topic\";\n-\n-        final KTable<Windowed<String>, String> table = builder\n-            .stream(topic, Consumed.with(Serdes.String(), Serdes.String()))\n-            .groupByKey(Grouped.with(Serdes.String(), Serdes.String()))\n-            .windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(10), ofMillis(50)))\n-            .aggregate(\n-                MockInitializer.STRING_INIT,\n-                MockAggregator.TOSTRING_ADDER,\n-                Materialized.<String, String, WindowStore<Bytes, byte[]>>as(\"topic-Canonized\").withValueSerde(Serdes.String())\n-            );\n+        final KTable<Windowed<String>, String> table;\n+        if (inOrderIterator) {\n+            table = builder\n+                .stream(topic, Consumed.with(Serdes.String(), Serdes.String()))\n+                .groupByKey(Grouped.with(Serdes.String(), Serdes.String()))\n+                .windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(10), ofMillis(50)))\n+                .aggregate(\n+                    MockInitializer.STRING_INIT,\n+                    MockAggregator.TOSTRING_ADDER,\n+                    Materialized.as(new InOrderMemoryWindowStoreSupplier(\"InOrder\", 50000L, 10L, false))\n+                );\n+        } else {\n+            table = builder\n+                .stream(topic, Consumed.with(Serdes.String(), Serdes.String()))\n+                .groupByKey(Grouped.with(Serdes.String(), Serdes.String()))\n+                .windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(10), ofMillis(50)))\n+                .aggregate(\n+                    MockInitializer.STRING_INIT,\n+                    MockAggregator.TOSTRING_ADDER,\n+                    Materialized.<String, String, WindowStore<Bytes, byte[]>>as(\"topic-Canonized\").withValueSerde(Serdes.String())", "originalCommit": "794c5710a77cdeffb907c985cc1a67215774aa38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MzA3MA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486673070", "bodyText": "I based the aggregate function off something else so topic-Canonized must be from there. It seems like generally, valueSerde doesn't need to be set to string so I removed it in most places. Changing to the custom window store made it complain about doing Serdes.String (it wanted an object) and it appears that we need a Serdes.String for the grace test so I'll mess around with that one more to see how it can be run with both iterators", "author": "lct45", "createdAt": "2020-09-10T22:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NDE0NQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486684145", "bodyText": "It should ultimately be the same for both iterators, but there might be some weird type nonsense going on. These problems should go away if you go with the approach of just setting a StoreSupplier based on inOrderIterator and then only specifying the topology once", "author": "ableegoldman", "createdAt": "2020-09-10T23:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MTkxOA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486741918", "bodyText": "The Materialized builder is notoriously vulnerable to \"weird type nonsense\" because it falls into a gap in Java's type inference system when you use chained methods. Let's see what happens when you implement @ableegoldman 's earlier suggestion.", "author": "vvcephei", "createdAt": "2020-09-11T02:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MTAwNg==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486751006", "bodyText": "I knew John would know what's up with the weird type nonsense \ud83d\ude1b", "author": "ableegoldman", "createdAt": "2020-09-11T03:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNTAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzQ2NA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486627464", "bodyText": "Instead of specifying the whole thing for both cases, you could just create a\nfinal WindowBytesStoreSupplier supplier = inOrderIterator ? new InOrderMemoryWindowStoreSupplier(...) : Stores.InMemoryWindowStore(...)\n\nand then pass that into the Materialized without having to list the whole topology out twice.", "author": "ableegoldman", "createdAt": "2020-09-10T20:54:22Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -78,16 +100,28 @@\n     public void testAggregateSmallInput() {\n         final StreamsBuilder builder = new StreamsBuilder();\n         final String topic = \"topic\";\n-\n-        final KTable<Windowed<String>, String> table = builder\n-            .stream(topic, Consumed.with(Serdes.String(), Serdes.String()))\n-            .groupByKey(Grouped.with(Serdes.String(), Serdes.String()))\n-            .windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(10), ofMillis(50)))\n-            .aggregate(\n-                MockInitializer.STRING_INIT,\n-                MockAggregator.TOSTRING_ADDER,\n-                Materialized.<String, String, WindowStore<Bytes, byte[]>>as(\"topic-Canonized\").withValueSerde(Serdes.String())\n-            );\n+        final KTable<Windowed<String>, String> table;\n+        if (inOrderIterator) {\n+            table = builder", "originalCommit": "794c5710a77cdeffb907c985cc1a67215774aa38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MTEwOA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486741108", "bodyText": "Yes, this would be better. Not sure if it helps, but for reference, this is what we did in org.apache.kafka.streams.integration.KTableKTableForeignKeyJoinMaterializationIntegrationTest#getTopology", "author": "vvcephei", "createdAt": "2020-09-11T02:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MDYxOA==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486660618", "bodyText": "It seems like resolving @ableegoldman 's comment ( https://github.com/apache/kafka/pull/9239/files#r486627464  ) would make this unnecessary.", "author": "vvcephei", "createdAt": "2020-09-10T22:08:07Z", "path": "checkstyle/suppressions.xml", "diffHunk": "@@ -203,6 +203,9 @@\n     <suppress checks=\"(FinalLocalVariable|WhitespaceAround|LocalVariableName|ImportControl|AvoidStarImport)\"\n               files=\"Murmur3Test.java\"/>\n \n+    <suppress checks=\"MethodLength\"\n+              files=\"KStreamSlidingWindowAggregateTest.java\"/>", "originalCommit": "794c5710a77cdeffb907c985cc1a67215774aa38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MjExMw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r486742113", "bodyText": "Beautiful. Thanks!", "author": "vvcephei", "createdAt": "2020-09-11T02:48:54Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -877,4 +1003,56 @@ private void assertLatenessMetrics(final TopologyTestDriver driver,\n         assertThat(driver.metrics().get(latenessMaxMetric).metricValue(), maxLateness);\n         assertThat(driver.metrics().get(latenessAvgMetric).metricValue(), avgLateness);\n     }\n-}\n\\ No newline at end of file\n+\n+    private static class InOrderMemoryWindowStore extends InMemoryWindowStore {", "originalCommit": "794c5710a77cdeffb907c985cc1a67215774aa38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d33206f8e73d9118b9c9f06d14266b3aac218d4", "url": "https://github.com/apache/kafka/commit/3d33206f8e73d9118b9c9f06d14266b3aac218d4", "message": "Test updates and fixes", "committedDate": "2020-09-11T14:50:02Z", "type": "commit"}, {"oid": "d9387e0341c9aede088d970452439dd28a0aa1ee", "url": "https://github.com/apache/kafka/commit/d9387e0341c9aede088d970452439dd28a0aa1ee", "message": "spacing fixes", "committedDate": "2020-09-11T15:02:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMDA0Mw==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r487110043", "bodyText": "These lines ended up being pretty long but I wasn't sure how to best split them up. WDYT @ableegoldman ?", "author": "lct45", "createdAt": "2020-09-11T15:09:05Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregateTest.java", "diffHunk": "@@ -131,14 +157,15 @@ public void testAggregateSmallInput() {\n     public void testReduceSmallInput() {\n         final StreamsBuilder builder = new StreamsBuilder();\n         final String topic = \"topic\";\n+        final WindowBytesStoreSupplier storeSupplier = inOrderIterator ? new InOrderMemoryWindowStoreSupplier(\"InOrder\", 50000L, 10L, false) : Stores.inMemoryWindowStore(\"Reverse\", Duration.ofMillis(50000), Duration.ofMillis(10), false);", "originalCommit": "d9387e0341c9aede088d970452439dd28a0aa1ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MDY0Ng==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r487170646", "bodyText": "This is how I typically break up ternaries.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final WindowBytesStoreSupplier storeSupplier = inOrderIterator ? new InOrderMemoryWindowStoreSupplier(\"InOrder\", 50000L, 10L, false) : Stores.inMemoryWindowStore(\"Reverse\", Duration.ofMillis(50000), Duration.ofMillis(10), false);\n          \n          \n            \n                    final WindowBytesStoreSupplier storeSupplier = \n          \n          \n            \n                        inOrderIterator \n          \n          \n            \n                            ? new InOrderMemoryWindowStoreSupplier(\"InOrder\", 50000L, 10L, false) \n          \n          \n            \n                            : Stores.inMemoryWindowStore(\"Reverse\", ofMillis(50000), ofMillis(10), false);", "author": "vvcephei", "createdAt": "2020-09-11T16:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMDA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MTU1NQ==", "url": "https://github.com/apache/kafka/pull/9239#discussion_r487171555", "bodyText": "But I wouldn't be afraid to just use a full if/else block, either.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final WindowBytesStoreSupplier storeSupplier = inOrderIterator ? new InOrderMemoryWindowStoreSupplier(\"InOrder\", 50000L, 10L, false) : Stores.inMemoryWindowStore(\"Reverse\", Duration.ofMillis(50000), Duration.ofMillis(10), false);\n          \n          \n            \n                    final WindowBytesStoreSupplier storeSupplier;\n          \n          \n            \n                    if (inOrderIterator) {\n          \n          \n            \n                        storeSupplier = new InOrderMemoryWindowStoreSupplier(\"InOrder\", 50000L, 10L, false);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        storeSupplier = Stores.inMemoryWindowStore(\"Reverse\", ofMillis(50000), ofMillis(10), false);\n          \n          \n            \n                    }", "author": "vvcephei", "createdAt": "2020-09-11T16:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMDA0Mw=="}], "type": "inlineReview"}, {"oid": "e71540c278cbd3316f851872b1ab4a22d6c7e5f7", "url": "https://github.com/apache/kafka/commit/e71540c278cbd3316f851872b1ab4a22d6c7e5f7", "message": "Ternary beautification", "committedDate": "2020-09-11T17:19:00Z", "type": "commit"}, {"oid": "12a2c7aeed1bbe9f7d2ba51206f85f22c3587c7a", "url": "https://github.com/apache/kafka/commit/12a2c7aeed1bbe9f7d2ba51206f85f22c3587c7a", "message": "checkstyle fixes", "committedDate": "2020-09-11T17:51:58Z", "type": "commit"}]}