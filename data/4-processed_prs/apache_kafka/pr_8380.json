{"pr_number": 8380, "pr_title": "MINOR: Refactor StreamsProducer", "pr_createdAt": "2020-03-28T07:39:42Z", "pr_url": "https://github.com/apache/kafka/pull/8380", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMzM3Ng==", "url": "https://github.com/apache/kafka/pull/8380#discussion_r400533376", "bodyText": "We can get the processing mode from the first parameter config right?", "author": "guozhangwang", "createdAt": "2020-03-30T22:30:28Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsProducer.java", "diffHunk": "@@ -52,31 +61,78 @@\n     private final Logger log;\n     private final String logPrefix;\n \n+    private final StreamThread.ProcessingMode processingMode;\n     private final Producer<byte[], byte[]> producer;\n-    private final boolean eosEnabled;\n \n     private boolean transactionInFlight = false;\n     private boolean transactionInitialized = false;\n \n-    public StreamsProducer(final Producer<byte[], byte[]> producer,\n-                           final boolean eosEnabled,\n+    public StreamsProducer(final StreamsConfig config,\n+                           final String threadId,\n+                           final KafkaClientSupplier clientSupplier,\n+                           final StreamThread.ProcessingMode processingMode,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxMDQ0Mw==", "url": "https://github.com/apache/kafka/pull/8380#discussion_r401310443", "bodyText": "+1", "author": "abbccdda", "createdAt": "2020-04-01T01:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMzM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzNTc2OQ==", "url": "https://github.com/apache/kafka/pull/8380#discussion_r400535769", "bodyText": "This is a meta comment for this test class: I think there are a lot of opportunities to reduce the 500+ LOC here sine many are duplicated code. For example, we can have a single mock KafkaProducer and have ALO / EOS_ALPHA / EOS_BETA streams producer wrapping the client supplier which would return the mock producer. And then in each unit test we could save creating the mock producer, creating the streams producer etc which are almost in every test function.", "author": "guozhangwang", "createdAt": "2020-03-30T22:36:09Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java", "diffHunk": "@@ -66,27 +72,57 @@\n         Collections.emptySet()\n     );\n \n-    private final ByteArraySerializer byteArraySerializer = new ByteArraySerializer();\n-    private final Map<TopicPartition, OffsetAndMetadata> offsetsAndMetadata = mkMap(\n-        mkEntry(new TopicPartition(topic, 0), new OffsetAndMetadata(0L, null))\n+    private final StreamsConfig config = new StreamsConfig(mkMap(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MjYwNg==", "url": "https://github.com/apache/kafka/pull/8380#discussion_r401342606", "bodyText": "We can do some of that but not all. If we use a mock(Producer.class) what you say works.\nHowever, if we use MockProducer this does not work, because we need to setup the MockProducer either for non-eos or eos and thus we need two instances. Therefore, we also need an StreamsProducer for each case.", "author": "mjsax", "createdAt": "2020-04-01T03:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzNTc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0OTk1NA==", "url": "https://github.com/apache/kafka/pull/8380#discussion_r401849954", "bodyText": "Yes I'm talking about using a mock(Producer.class).", "author": "guozhangwang", "createdAt": "2020-04-01T19:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzNTc2OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0cd2f65373a9369e01ad87a92bcf9e24a20985b5", "url": "https://github.com/apache/kafka/commit/0cd2f65373a9369e01ad87a92bcf9e24a20985b5", "message": "MINOR: Refactor StreamsProducer", "committedDate": "2020-04-01T21:59:32Z", "type": "commit"}, {"oid": "0cd2f65373a9369e01ad87a92bcf9e24a20985b5", "url": "https://github.com/apache/kafka/commit/0cd2f65373a9369e01ad87a92bcf9e24a20985b5", "message": "MINOR: Refactor StreamsProducer", "committedDate": "2020-04-01T21:59:32Z", "type": "forcePushed"}]}