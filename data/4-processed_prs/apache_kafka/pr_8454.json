{"pr_number": 8454, "pr_title": "KAFKA-9844; Maximum number of members within a group is not always enforced due to a race condition in join group", "pr_createdAt": "2020-04-09T12:31:27Z", "pr_url": "https://github.com/apache/kafka/pull/8454", "timeline": [{"oid": "22e7349db547a75356fa9c3f7c88dc0ea27d45ce", "url": "https://github.com/apache/kafka/commit/22e7349db547a75356fa9c3f7c88dc0ea27d45ce", "message": "KAFKA-9844; Maximum number of members within a group is not always enforced due to a race condition in join group", "committedDate": "2020-04-09T12:28:23Z", "type": "commit"}, {"oid": "1dab5f151f0017ee82d6de6839941f86899c9775", "url": "https://github.com/apache/kafka/commit/1dab5f151f0017ee82d6de6839941f86899c9775", "message": "fixup", "committedDate": "2020-04-09T12:36:05Z", "type": "commit"}, {"oid": "16bb5e402e8ba1838b13cc53d2ef1f7736936dd0", "url": "https://github.com/apache/kafka/commit/16bb5e402e8ba1838b13cc53d2ef1f7736936dd0", "message": "add unit test", "committedDate": "2020-04-13T17:50:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTA1OQ==", "url": "https://github.com/apache/kafka/pull/8454#discussion_r407675059", "bodyText": "I must make a copy of the props here otherwise it will alter the other tests.", "author": "dajac", "createdAt": "2020-04-13T19:38:37Z", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorConcurrencyTest.scala", "diffHunk": "@@ -124,6 +126,33 @@ class GroupCoordinatorConcurrencyTest extends AbstractCoordinatorConcurrencyTest\n     verifyConcurrentRandomSequences(createGroupMembers, allOperationsWithTxn)\n   }\n \n+  @Test\n+  def testConcurrentJoinGroupEnforceGroupMaxSize(): Unit = {\n+    val groupMaxSize = 1\n+    serverProps.put(KafkaConfig.GroupMaxSizeProp, groupMaxSize.toString)", "originalCommit": "16bb5e402e8ba1838b13cc53d2ef1f7736936dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dce9dd22a861abc182b5f64974e2f9442305ff07", "url": "https://github.com/apache/kafka/commit/dce9dd22a861abc182b5f64974e2f9442305ff07", "message": "fixup", "committedDate": "2020-04-14T07:08:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NTQ0Nw==", "url": "https://github.com/apache/kafka/pull/8454#discussion_r409895447", "bodyText": "Optional arguments are best avoided. Maybe we could split this into two methods getOrCreateGroup and getGroup?", "author": "hachikuji", "createdAt": "2020-04-16T22:56:01Z", "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -209,10 +209,14 @@ class GroupMetadataManager(brokerId: Int,\n       false\n   }\n   /**\n-   * Get the group associated with the given groupId, or null if not found\n+   * Get the group associated with the given groupId - the group is created if createIfNotExist\n+   * is true - or null if not found\n    */\n-  def getGroup(groupId: String): Option[GroupMetadata] = {\n-    Option(groupMetadataCache.get(groupId))\n+  def getGroup(groupId: String, createIfNotExist: Boolean = false): Option[GroupMetadata] = {", "originalCommit": "dce9dd22a861abc182b5f64974e2f9442305ff07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExMzgxNg==", "url": "https://github.com/apache/kafka/pull/8454#discussion_r410113816", "bodyText": "Sure. I went with the following method getOrMaybeCreateGroup which still takes the createIfNotExist argument in order to keep the calling side concise. It avoids having to switch between the two on the calling side which makes the error handling a little easier to follow. This is perhaps what you had in mind already.", "author": "dajac", "createdAt": "2020-04-17T09:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NTQ0Nw=="}], "type": "inlineReview"}, {"oid": "c08ba9576f94a0bba6639bc2233e81bc0756a3c5", "url": "https://github.com/apache/kafka/commit/c08ba9576f94a0bba6639bc2233e81bc0756a3c5", "message": "Address review", "committedDate": "2020-04-17T09:33:00Z", "type": "commit"}]}