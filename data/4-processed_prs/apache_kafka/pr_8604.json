{"pr_number": 8604, "pr_title": "KIP-597: MirrorMaker2 internal topics Formatters", "pr_createdAt": "2020-05-03T11:09:15Z", "pr_url": "https://github.com/apache/kafka/pull/8604", "timeline": [{"oid": "f5d356b076d6db6338db17710cf9a939682af2a5", "url": "https://github.com/apache/kafka/commit/f5d356b076d6db6338db17710cf9a939682af2a5", "message": "KIP-597: MirrorMaker2 internal topics Formatters\n\nThis PR includes 3 MessageFormatters for MirrorMaker2 internal topics:\n- HeartbeatFormatter\n- CheckpointFormatter\n- OffsetSyncFormatter\n\nThis also introduces a new public interface org.apache.kafka.common.MessageFormatter that users can implement to build custom formatters.", "committedDate": "2020-06-18T14:05:50Z", "type": "commit"}, {"oid": "08308ed6d4cffb63d60b0077cc9bc832314fcca6", "url": "https://github.com/apache/kafka/commit/08308ed6d4cffb63d60b0077cc9bc832314fcca6", "message": "Update to match the KIP", "committedDate": "2020-06-18T14:05:50Z", "type": "commit"}, {"oid": "2ae860d4eb4b25446054ea6a038fc08ebac8fc83", "url": "https://github.com/apache/kafka/commit/2ae860d4eb4b25446054ea6a038fc08ebac8fc83", "message": "javadoc", "committedDate": "2020-06-18T14:05:50Z", "type": "commit"}, {"oid": "711a004c3100bf821876b068bc09a84ec8188d04", "url": "https://github.com/apache/kafka/commit/711a004c3100bf821876b068bc09a84ec8188d04", "message": "Fix checkstyle/spotbugs issues", "committedDate": "2020-06-18T14:05:50Z", "type": "commit"}, {"oid": "60f4470ea41d1e02a753e01bae6c4ddd8619a560", "url": "https://github.com/apache/kafka/commit/60f4470ea41d1e02a753e01bae6c4ddd8619a560", "message": "Fix scala unit syntax", "committedDate": "2020-06-18T14:17:16Z", "type": "commit"}, {"oid": "60f4470ea41d1e02a753e01bae6c4ddd8619a560", "url": "https://github.com/apache/kafka/commit/60f4470ea41d1e02a753e01bae6c4ddd8619a560", "message": "Fix scala unit syntax", "committedDate": "2020-06-18T14:17:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDA2NQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r443970065", "bodyText": "do we risk NPE here?", "author": "kkonstantine", "createdAt": "2020-06-23T05:27:26Z", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -560,16 +561,15 @@ class LoggingMessageFormatter extends MessageFormatter with LazyLogging {\n }\n \n class NoOpMessageFormatter extends MessageFormatter {\n-  override def init(props: Properties): Unit = {}\n \n   def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream): Unit = {}\n }\n \n class ChecksumMessageFormatter extends MessageFormatter {\n   private var topicStr: String = _\n \n-  override def init(props: Properties): Unit = {\n-    topicStr = props.getProperty(\"topic\")\n+  override def configure(configs: Map[String, _]): Unit = {\n+    topicStr = configs.get(\"topic\").toString", "originalCommit": "60f4470ea41d1e02a753e01bae6c4ddd8619a560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDU2OQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r443970569", "bodyText": "can we add a test?", "author": "kkonstantine", "createdAt": "2020-06-23T05:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwNDkzOQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r444504939", "bodyText": "Good catch! I've pushed a change to address it", "author": "mimaison", "createdAt": "2020-06-23T20:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDA2NQ=="}], "type": "inlineReview"}, {"oid": "07fffaf8811f6a94b669164c0bbb42a62d68bd62", "url": "https://github.com/apache/kafka/commit/07fffaf8811f6a94b669164c0bbb42a62d68bd62", "message": "Address feedback", "committedDate": "2020-06-23T20:58:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTU3OQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448175579", "bodyText": "asScala.asJava looks a bit weird here. I understand that you are using this trick to convert the Properties to a Scala Map and then a Java Map. How about loading formatterArgs as a Map directly?", "author": "dajac", "createdAt": "2020-07-01T07:40:07Z", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -309,7 +308,7 @@ object ConsoleConsumer extends Logging {\n       formatterArgs.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer)\n     }\n \n-    formatter.init(formatterArgs)\n+    formatter.configure(formatterArgs.asScala.asJava)", "originalCommit": "07fffaf8811f6a94b669164c0bbb42a62d68bd62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3OTU5Ng==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448979596", "bodyText": "This trick is used in a couple of other places. I took a quick look at switching to a Map directly but it's used in a bunch of places so ended up being a larger change. I'd prefer keeping this PR focussed on the new formatter and maybe do some refactoring in a follow up PR. WDYT?", "author": "mimaison", "createdAt": "2020-07-02T12:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0NDcwMw==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r449544703", "bodyText": "I was thinking about adding a second utility method CommandLineUtils.parseKeyValueArgsAsMap and keep the existing one unchanged. We can do this as a follow up for sure.", "author": "dajac", "createdAt": "2020-07-03T11:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3NTU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njk1Nw==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448176957", "bodyText": "Can't we use configs directly instead of building props?", "author": "dajac", "createdAt": "2020-07-01T07:42:42Z", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -466,7 +465,9 @@ class DefaultMessageFormatter extends MessageFormatter {\n   var keyDeserializer: Option[Deserializer[_]] = None\n   var valueDeserializer: Option[Deserializer[_]] = None\n \n-  override def init(props: Properties): Unit = {\n+  override def configure(configs: Map[String, _]): Unit = {\n+    val props = new java.util.Properties()\n+    configs.asScala.foreach { case (key, value) => props.put(key, value.toString) }", "originalCommit": "07fffaf8811f6a94b669164c0bbb42a62d68bd62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDU5MQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448980591", "bodyText": "I initially was doing this but this forces casting the value to strings everywhere due to the type of the Map here [String, _]. Keeping the Properties object turned out way simpler.", "author": "mimaison", "createdAt": "2020-07-02T12:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0NTkwNQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r449545905", "bodyText": "That's a good point. Probably, the correct way to do this in the future would be to define a ConfigDef to parse the Map. We can tackle this as part of #8909.", "author": "dajac", "createdAt": "2020-07-03T11:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3Njk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3ODA5NQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448178095", "bodyText": "nit: We could use containsKey.", "author": "dajac", "createdAt": "2020-07-01T07:44:55Z", "path": "core/src/main/scala/kafka/tools/ConsoleConsumer.scala", "diffHunk": "@@ -560,20 +561,18 @@ class LoggingMessageFormatter extends MessageFormatter with LazyLogging {\n }\n \n class NoOpMessageFormatter extends MessageFormatter {\n-  override def init(props: Properties): Unit = {}\n \n   def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream): Unit = {}\n }\n \n class ChecksumMessageFormatter extends MessageFormatter {\n   private var topicStr: String = _\n \n-  override def init(props: Properties): Unit = {\n-    topicStr = props.getProperty(\"topic\")\n-    if (topicStr != null)\n-      topicStr = topicStr + \":\"\n+  override def configure(configs: Map[String, _]): Unit = {\n+    topicStr = if (configs.get(\"topic\") != null)", "originalCommit": "07fffaf8811f6a94b669164c0bbb42a62d68bd62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MjUwNQ==", "url": "https://github.com/apache/kafka/pull/8604#discussion_r448982505", "bodyText": "\ud83d\udc4d done", "author": "mimaison", "createdAt": "2020-07-02T12:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3ODA5NQ=="}], "type": "inlineReview"}, {"oid": "212da2cb62554c439c2500c6678e168fa4eb8f70", "url": "https://github.com/apache/kafka/commit/212da2cb62554c439c2500c6678e168fa4eb8f70", "message": "Address feedback", "committedDate": "2020-07-02T12:58:18Z", "type": "commit"}]}