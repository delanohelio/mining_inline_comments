{"pr_number": 9345, "pr_title": "KAFKA-10338; Support PEM format for SSL key and trust stores (KIP-651)", "pr_createdAt": "2020-09-28T19:01:02Z", "pr_url": "https://github.com/apache/kafka/pull/9345", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NTUzMg==", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500165532", "bodyText": "unused usePemCerts?", "author": "omkreddy", "createdAt": "2020-10-06T10:21:35Z", "path": "clients/src/test/java/org/apache/kafka/common/network/CertStores.java", "diffHunk": "@@ -54,13 +60,30 @@ public CertStores(boolean server, String commonName, InetAddress hostAddress) th\n     }\n \n     private CertStores(boolean server, String commonName, TestSslUtils.CertificateBuilder certBuilder) throws Exception {\n+        this(server, commonName, \"RSA\", certBuilder, false);\n+    }\n+\n+    private CertStores(boolean server, String commonName, String keyAlgorithm, TestSslUtils.CertificateBuilder certBuilder, boolean usePem) throws Exception {\n         String name = server ? \"server\" : \"client\";\n         Mode mode = server ? Mode.SERVER : Mode.CLIENT;\n-        File truststoreFile = File.createTempFile(name + \"TS\", \".jks\");\n-        sslConfig = TestSslUtils.createSslConfig(!server, true, mode, truststoreFile, name, commonName, certBuilder);\n+        File truststoreFile = usePem ? null : File.createTempFile(name + \"TS\", \".jks\");\n+        sslConfig = new SslConfigsBuilder(mode)\n+                .useClientCert(!server)\n+                .certAlias(name)\n+                .cn(commonName)\n+                .createNewTrustStore(truststoreFile)\n+                .certBuilder(certBuilder)\n+                .algorithm(keyAlgorithm)\n+                .usePem(usePem)\n+                .build();\n     }\n \n+\n     public Map<String, Object> getTrustingConfig(CertStores truststoreConfig) {\n+        return getTrustingConfig(truststoreConfig, false);\n+    }\n+\n+    public Map<String, Object> getTrustingConfig(CertStores truststoreConfig, boolean usePemCerts) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1OTA1Ng==", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500359056", "bodyText": "removed", "author": "rajinisivaram", "createdAt": "2020-10-06T14:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NTUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4NjQzMw==", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500186433", "bodyText": "Can we remove empty else block?", "author": "omkreddy", "createdAt": "2020-10-06T11:01:05Z", "path": "clients/src/test/java/org/apache/kafka/test/TestSslUtils.java", "diffHunk": "@@ -199,6 +206,156 @@ public static void createKeyStore(String filename,\n         return builder.build();\n     }\n \n+    public static void convertToPem(Map<String, Object> sslProps, boolean writeToFile, boolean encryptPrivateKey) throws Exception {\n+        String tsPath = (String) sslProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+        String tsType = (String) sslProps.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n+        Password tsPassword = (Password) sslProps.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+        Password trustCerts = (Password) sslProps.remove(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG);\n+        if (trustCerts == null && tsPath != null) {\n+            trustCerts = exportCertificates(tsPath, tsPassword, tsType);\n+        }\n+        if (trustCerts != null) {\n+            if (tsPath == null) {\n+                tsPath = File.createTempFile(\"truststore\", \".pem\").getPath();\n+                sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, tsPath);\n+            }\n+            sslProps.put(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, PEM_TYPE);\n+            if (writeToFile)\n+                writeToFile(tsPath, trustCerts);\n+            else {\n+                sslProps.put(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, trustCerts);\n+                sslProps.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+            }\n+        }\n+\n+        String ksPath = (String) sslProps.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n+        Password certChain = (Password) sslProps.remove(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG);\n+        Password key = (Password) sslProps.remove(SslConfigs.SSL_KEYSTORE_KEY_CONFIG);\n+        if (certChain == null && ksPath != null) {\n+            String ksType = (String) sslProps.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n+            Password ksPassword = (Password) sslProps.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n+            Password keyPassword = (Password) sslProps.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG);\n+            certChain = exportCertificates(ksPath, ksPassword, ksType);\n+            Password pemKeyPassword = encryptPrivateKey ? keyPassword : null;\n+            key = exportPrivateKey(ksPath, ksPassword, keyPassword, ksType, pemKeyPassword);\n+            if (!encryptPrivateKey)\n+                sslProps.remove(SslConfigs.SSL_KEY_PASSWORD_CONFIG);\n+        } else if (!encryptPrivateKey) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5NzczNA==", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500197734", "bodyText": "SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG => SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC", "author": "omkreddy", "createdAt": "2020-10-06T11:22:55Z", "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -923,9 +926,12 @@ object KafkaConfig {\n   val SslKeystoreLocationDoc = SslConfigs.SSL_KEYSTORE_LOCATION_DOC\n   val SslKeystorePasswordDoc = SslConfigs.SSL_KEYSTORE_PASSWORD_DOC\n   val SslKeyPasswordDoc = SslConfigs.SSL_KEY_PASSWORD_DOC\n+  val SslKeystoreKeyDoc = SslConfigs.SSL_KEYSTORE_KEY_DOC\n+  val SslKeystoreCertificateChainDoc = SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG\n   val SslTruststoreTypeDoc = SslConfigs.SSL_TRUSTSTORE_TYPE_DOC\n   val SslTruststorePasswordDoc = SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC\n   val SslTruststoreLocationDoc = SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC\n+  val SslTruststoreCertificatesDoc = SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5ODA0NQ==", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500198045", "bodyText": "SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG => SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC", "author": "omkreddy", "createdAt": "2020-10-06T11:23:37Z", "path": "core/src/main/scala/kafka/server/KafkaConfig.scala", "diffHunk": "@@ -923,9 +926,12 @@ object KafkaConfig {\n   val SslKeystoreLocationDoc = SslConfigs.SSL_KEYSTORE_LOCATION_DOC\n   val SslKeystorePasswordDoc = SslConfigs.SSL_KEYSTORE_PASSWORD_DOC\n   val SslKeyPasswordDoc = SslConfigs.SSL_KEY_PASSWORD_DOC\n+  val SslKeystoreKeyDoc = SslConfigs.SSL_KEYSTORE_KEY_DOC\n+  val SslKeystoreCertificateChainDoc = SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIzMDE3Mw==", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500230173", "bodyText": "unused node variable here and other methods.", "author": "omkreddy", "createdAt": "2020-10-06T12:21:09Z", "path": "clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java", "diffHunk": "@@ -167,17 +181,12 @@ public void testValidEndpointIdentificationSanIp() throws Exception {\n     @Test\n     public void testValidEndpointIdentificationCN() throws Exception {\n         String node = \"0\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM2MDAzNg==", "url": "https://github.com/apache/kafka/pull/9345#discussion_r500360036", "bodyText": "fixed these and few other warnings", "author": "rajinisivaram", "createdAt": "2020-10-06T14:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIzMDE3Mw=="}], "type": "inlineReview"}, {"oid": "ba3773c3fead43d4d30cc246f9e9fd9eb1736fa2", "url": "https://github.com/apache/kafka/commit/ba3773c3fead43d4d30cc246f9e9fd9eb1736fa2", "message": "KAFKA-10338; Support PEM format for SSL key and trust stores (KIP-651)", "committedDate": "2020-10-06T14:35:08Z", "type": "commit"}, {"oid": "b203a8373333ba3c64ce14ea397f39c0147f646e", "url": "https://github.com/apache/kafka/commit/b203a8373333ba3c64ce14ea397f39c0147f646e", "message": "Add new SSL configs to KafkaConfig", "committedDate": "2020-10-06T14:35:08Z", "type": "commit"}, {"oid": "19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "url": "https://github.com/apache/kafka/commit/19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "message": "Address review comments", "committedDate": "2020-10-06T14:54:14Z", "type": "commit"}, {"oid": "19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "url": "https://github.com/apache/kafka/commit/19b83fa8e94c335677c02ef9e11c3cb582fab9d2", "message": "Address review comments", "committedDate": "2020-10-06T14:54:14Z", "type": "forcePushed"}]}