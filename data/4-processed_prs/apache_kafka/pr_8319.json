{"pr_number": 8319, "pr_title": "KAFKA-9734: Fix IllegalState in Streams transit to standby", "pr_createdAt": "2020-03-19T21:58:55Z", "pr_url": "https://github.com/apache/kafka/pull/8319", "timeline": [{"oid": "39783414a12dcfcec96e6210928679a3d7d239ac", "url": "https://github.com/apache/kafka/commit/39783414a12dcfcec96e6210928679a3d7d239ac", "message": "KAFKA-9734: Fix IllegalState in Streams transit to standby", "committedDate": "2020-03-19T16:17:39Z", "type": "commit"}, {"oid": "ab51c45b7d6895a34c7822f5d201d368c3d547e6", "url": "https://github.com/apache/kafka/commit/ab51c45b7d6895a34c7822f5d201d368c3d547e6", "message": "wip", "committedDate": "2020-03-19T21:09:58Z", "type": "commit"}, {"oid": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "url": "https://github.com/apache/kafka/commit/c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "message": "remove unnecessary expectation", "committedDate": "2020-03-19T21:57:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzYyNQ==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395343625", "bodyText": "I moved this inside the block because we should only need to do it if we are transitioning from restoring standbys. I wanted to make the idempotent call slightly more efficient, since we now call this method every time in StreamThread#runOnce.", "author": "vvcephei", "createdAt": "2020-03-19T22:00:10Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -279,13 +279,13 @@ private boolean hasRestoredToEnd(final ChangelogMetadata metadata) {\n     // NOTE: even if the newly created tasks do not need any restoring, we still first transit to this state and then\n     // immediately transit back -- there's no overhead of transiting back and forth but simplifies the logic a lot.\n     @Override\n-    public void transitToRestoreActive() {\n+    public void enforceRestoreActive() {\n         if (state != ChangelogReaderState.ACTIVE_RESTORING) {\n             log.debug(\"Transiting to restore active tasks: {}\", changelogs);\n-        }\n \n-        // pause all partitions that are for standby tasks from the restore consumer\n-        pauseChangelogsFromRestoreConsumer(standbyRestoringChangelogs());\n+            // pause all partitions that are for standby tasks from the restore consumer\n+            pauseChangelogsFromRestoreConsumer(standbyRestoringChangelogs());", "originalCommit": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2OTc4MA==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395369780", "bodyText": "We can move the line 290 inside as well?", "author": "guozhangwang", "createdAt": "2020-03-19T23:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwOTkyMQ==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395409921", "bodyText": "Oh, yeah, of course :)", "author": "vvcephei", "createdAt": "2020-03-20T02:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MzYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDA3Nw==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395344077", "bodyText": "This might be a bit redundant, but it wasted a bit of my time to find out that if it wasn't in active_restoring, it must have been in restoring standbys because that's the only other state. I figure it doesn't hurt to just be explicit.", "author": "vvcephei", "createdAt": "2020-03-19T22:01:14Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -300,8 +300,10 @@ public void transitToRestoreActive() {\n     @Override\n     public void transitToUpdateStandby() {\n         if (state != ChangelogReaderState.ACTIVE_RESTORING) {\n-            throw new IllegalStateException(\"The changelog reader is not restoring active tasks while trying to \" +\n-                \"transit to update standby tasks: \" + changelogs);\n+            throw new IllegalStateException(\n+                \"The changelog reader is not restoring active tasks (is \" + state + \") while trying to \" +", "originalCommit": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDM2NQ==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395344365", "bodyText": "Rearranged this so we can include the exception itself. The stacktrace is useful for tracking down the reason for the exception.", "author": "vvcephei", "createdAt": "2020-03-19T22:01:54Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -501,14 +501,14 @@ private void runLoop() {\n                     mainConsumer.enforceRebalance();\n                 }\n             } catch (final TaskCorruptedException e) {\n-                log.warn(\"Detected the states of tasks {} are corrupted. \" +\n-                    \"Will close the task as dirty and re-create and bootstrap from scratch.\", e.corruptedTaskWithChangelogs());\n+                log.warn(\"Detected the states of tasks \" + e.corruptedTaskWithChangelogs() + \" are corrupted. \" +\n+                             \"Will close the task as dirty and re-create and bootstrap from scratch.\", e);", "originalCommit": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0NDQxOA==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395344418", "bodyText": "Also, here.", "author": "vvcephei", "createdAt": "2020-03-19T22:02:01Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -501,14 +501,14 @@ private void runLoop() {\n                     mainConsumer.enforceRebalance();\n                 }\n             } catch (final TaskCorruptedException e) {\n-                log.warn(\"Detected the states of tasks {} are corrupted. \" +\n-                    \"Will close the task as dirty and re-create and bootstrap from scratch.\", e.corruptedTaskWithChangelogs());\n+                log.warn(\"Detected the states of tasks \" + e.corruptedTaskWithChangelogs() + \" are corrupted. \" +\n+                             \"Will close the task as dirty and re-create and bootstrap from scratch.\", e);\n \n                 taskManager.handleCorruption(e.corruptedTaskWithChangelogs());\n             } catch (final TaskMigratedException e) {\n                 log.warn(\"Detected that the thread is being fenced. \" +\n-                    \"This implies that this thread missed a rebalance and dropped out of the consumer group. \" +\n-                    \"Will close out all assigned tasks and rejoin the consumer group.\");\n+                             \"This implies that this thread missed a rebalance and dropped out of the consumer group. \" +\n+                             \"Will close out all assigned tasks and rejoin the consumer group.\", e);", "originalCommit": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0Njc3MA==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395346770", "bodyText": "This is the primary fix. Instead of relying (hoping) on TaskManager to put the changelog reader into restoring_active, we just idempotently make sure it's in that state any time we're in partitions_assigned.", "author": "vvcephei", "createdAt": "2020-03-19T22:07:55Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -578,13 +578,13 @@ void runOnce() {\n         // only try to initialize the assigned tasks\n         // if the state is still in PARTITION_ASSIGNED after the poll call\n         if (state == State.PARTITIONS_ASSIGNED) {\n+            // transit to restore active is idempotent so we can call it multiple times\n+            changelogReader.enforceRestoreActive();", "originalCommit": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODg3Mw==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395348873", "bodyText": "Renamed this method to make it clear we aren't necessarily \"transitioning\", we actually call it all the time now any time we want to \"be in restoreActive\".", "author": "vvcephei", "createdAt": "2020-03-19T22:13:13Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -279,13 +279,13 @@ private boolean hasRestoredToEnd(final ChangelogMetadata metadata) {\n     // NOTE: even if the newly created tasks do not need any restoring, we still first transit to this state and then\n     // immediately transit back -- there's no overhead of transiting back and forth but simplifies the logic a lot.\n     @Override\n-    public void transitToRestoreActive() {\n+    public void enforceRestoreActive() {", "originalCommit": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0OTYwMA==", "url": "https://github.com/apache/kafka/pull/8319#discussion_r395349600", "bodyText": "This is a strict mock, so we have to remove this expectation, since the TaskManager no longer calls it.", "author": "vvcephei", "createdAt": "2020-03-19T22:15:04Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java", "diffHunk": "@@ -677,8 +677,6 @@ public void closeClean() {\n         };\n \n         resetToStrict(changeLogReader);\n-        changeLogReader.transitToRestoreActive();\n-        expectLastCall();", "originalCommit": "c7ac051e495a98b6c72a340c24f4b9bb1f25dcdd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "65e6b6aed01435aef1bcac534e9992b9e9579f18", "url": "https://github.com/apache/kafka/commit/65e6b6aed01435aef1bcac534e9992b9e9579f18", "message": "cr feedback", "committedDate": "2020-03-20T03:06:55Z", "type": "commit"}]}