{"pr_number": 8469, "pr_title": "[KAFKA-9826] Handle an unaligned first dirty offset during log cleaning.", "pr_createdAt": "2020-04-12T01:44:51Z", "pr_url": "https://github.com/apache/kafka/pull/8469", "timeline": [{"oid": "7a41a4599b24222ab46d08c1efb79f36235fb9a2", "url": "https://github.com/apache/kafka/commit/7a41a4599b24222ab46d08c1efb79f36235fb9a2", "message": "KAFKA-9826: LogSegments(A, A) can return a non-empty list if A isn't a segment base offset.\n\nEnsure that logSegments(A, A) returns an empty list in this case.\nAdd a test case for the logSegments call.\n\nAdjust some log cleaner tests because when the first dirty offset is in the active\nsegment, no segment is filthy.", "committedDate": "2020-04-06T23:14:56Z", "type": "commit"}, {"oid": "c9c1dc6495a6d5cbcc38cdb05b5cb8d86c48852f", "url": "https://github.com/apache/kafka/commit/c9c1dc6495a6d5cbcc38cdb05b5cb8d86c48852f", "message": "KAFKA-9826: Don't consider dirty bytes past the uncleanable point as cleanable.\n\nIn LogToClean::calculateCleanableBytes the cleanableBytes calculation would adjust the endpoint\nto the firstDirtyOffset even if it was past the first uncleanable offset. Instead,\nlimit the dirty bytes calculation to not go past the first uncleanable offset.", "committedDate": "2020-04-06T23:59:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5ODUxNA==", "url": "https://github.com/apache/kafka/pull/8469#discussion_r407798514", "bodyText": "While you are here, it's probably better to consistently throw IllegalArgumentException if from > to. Currently, we only throw IllegalArgumentException if we get into this path.", "author": "junrao", "createdAt": "2020-04-14T00:38:45Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2132,17 +2132,23 @@ class Log(@volatile private var _dir: File,\n \n   /**\n    * Get all segments beginning with the segment that includes \"from\" and ending with the segment\n-   * that includes up to \"to-1\" or the end of the log (if to > logEndOffset)\n+   * that includes up to \"to-1\" or the end of the log (if to > logEndOffset).\n+   *\n    */\n   def logSegments(from: Long, to: Long): Iterable[LogSegment] = {\n-    lock synchronized {\n-      val view = Option(segments.floorKey(from)).map { floor =>\n-        if (to < floor)\n-          throw new IllegalArgumentException(s\"Invalid log segment range: requested segments in $topicPartition \" +\n-            s\"from offset $from mapping to segment with base offset $floor, which is greater than limit offset $to\")\n-        segments.subMap(floor, to)\n-      }.getOrElse(segments.headMap(to))\n-      view.values.asScala\n+    if (from == to) {\n+      // Handle non-segment-aligned empty sets\n+      List.empty[LogSegment]\n+    } else {\n+      lock synchronized {\n+        val view = Option(segments.floorKey(from)).map { floor =>\n+          if (to < floor)\n+            throw new IllegalArgumentException(s\"Invalid log segment range: requested segments in $topicPartition \" +", "originalCommit": "c9c1dc6495a6d5cbcc38cdb05b5cb8d86c48852f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMzc5Mg==", "url": "https://github.com/apache/kafka/pull/8469#discussion_r408233792", "bodyText": "Done.", "author": "steverod", "createdAt": "2020-04-14T15:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5ODUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5ODY3OQ==", "url": "https://github.com/apache/kafka/pull/8469#discussion_r407798679", "bodyText": "Do we need to add a new line?", "author": "junrao", "createdAt": "2020-04-14T00:39:15Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2132,17 +2132,23 @@ class Log(@volatile private var _dir: File,\n \n   /**\n    * Get all segments beginning with the segment that includes \"from\" and ending with the segment\n-   * that includes up to \"to-1\" or the end of the log (if to > logEndOffset)\n+   * that includes up to \"to-1\" or the end of the log (if to > logEndOffset).\n+   *", "originalCommit": "c9c1dc6495a6d5cbcc38cdb05b5cb8d86c48852f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMzQ4Mw==", "url": "https://github.com/apache/kafka/pull/8469#discussion_r408233483", "bodyText": "Line removed.", "author": "steverod", "createdAt": "2020-04-14T15:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5ODY3OQ=="}], "type": "inlineReview"}, {"oid": "b4d9456028c544c9a2e899f4d2ac10e2cc2b7d8c", "url": "https://github.com/apache/kafka/commit/b4d9456028c544c9a2e899f4d2ac10e2cc2b7d8c", "message": "Review feedback: Add a check for from < to (not just floor < to).", "committedDate": "2020-04-14T02:44:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTcwOQ==", "url": "https://github.com/apache/kafka/pull/8469#discussion_r407849709", "bodyText": "Do we still need this given the test in line 2141?", "author": "junrao", "createdAt": "2020-04-14T03:48:27Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -2132,17 +2132,25 @@ class Log(@volatile private var _dir: File,\n \n   /**\n    * Get all segments beginning with the segment that includes \"from\" and ending with the segment\n-   * that includes up to \"to-1\" or the end of the log (if to > logEndOffset)\n+   * that includes up to \"to-1\" or the end of the log (if to > logEndOffset).\n    */\n   def logSegments(from: Long, to: Long): Iterable[LogSegment] = {\n-    lock synchronized {\n-      val view = Option(segments.floorKey(from)).map { floor =>\n-        if (to < floor)\n-          throw new IllegalArgumentException(s\"Invalid log segment range: requested segments in $topicPartition \" +\n-            s\"from offset $from mapping to segment with base offset $floor, which is greater than limit offset $to\")\n-        segments.subMap(floor, to)\n-      }.getOrElse(segments.headMap(to))\n-      view.values.asScala\n+    if (from == to) {\n+      // Handle non-segment-aligned empty sets\n+      List.empty[LogSegment]\n+    } else if (to < from) {\n+      throw new IllegalArgumentException(s\"Invalid log segment range: requested segments in $topicPartition \" +\n+        s\"from offset $from which is greater than limit offset $to\")\n+    } else {\n+      lock synchronized {\n+        val view = Option(segments.floorKey(from)).map { floor =>\n+          if (to < floor)", "originalCommit": "b4d9456028c544c9a2e899f4d2ac10e2cc2b7d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTI5Mw==", "url": "https://github.com/apache/kafka/pull/8469#discussion_r408339293", "bodyText": "Was the change to this pushed?", "author": "junrao", "createdAt": "2020-04-14T18:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzM3Mw==", "url": "https://github.com/apache/kafka/pull/8469#discussion_r408413373", "bodyText": "I mistakenly marked this as resolved (then unset it). Change was tested and just pushed, apologies for the unwanted notification!", "author": "steverod", "createdAt": "2020-04-14T20:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0OTcwOQ=="}], "type": "inlineReview"}, {"oid": "ac53a2a21dd631c0c65c686b7dbc7cb24a559c95", "url": "https://github.com/apache/kafka/commit/ac53a2a21dd631c0c65c686b7dbc7cb24a559c95", "message": "Remove extraneous check. Since we already validate from < to, floor(from) < to always.", "committedDate": "2020-04-14T20:24:36Z", "type": "commit"}]}