{"pr_number": 9761, "pr_title": "KAFKA-10768 Make ByteBufferInputStream.read(byte[], int, int) to follow the contract", "pr_createdAt": "2020-12-16T16:49:59Z", "pr_url": "https://github.com/apache/kafka/pull/9761", "timeline": [{"oid": "5b6bf7790edd65275a2947b87042e0ffc025297c", "url": "https://github.com/apache/kafka/commit/5b6bf7790edd65275a2947b87042e0ffc025297c", "message": "KAFKA-10768 Add a test for ByteBufferInputStream to ByteBufferLogInputStreamTest\n\nI made a test for ByteBufferInputStream in the ByteBufferLogInputStreamTest.\r\nFirst, I add a ByteBuffer that it's not empty to the ByteBufferInputStream, in order to verify it.\r\nAfter that, I try to use ByteBufferInputStream's read function and check return value whether it's correct.", "committedDate": "2020-12-16T16:36:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2ODUyNQ==", "url": "https://github.com/apache/kafka/pull/9761#discussion_r544768525", "bodyText": "Could you move the tests to ByteBufferInputStreamTest? If there is no such test class, feel free to create new one.", "author": "chia7712", "createdAt": "2020-12-17T02:39:48Z", "path": "clients/src/test/java/org/apache/kafka/common/record/ByteBufferLogInputStreamTest.java", "diffHunk": "@@ -120,4 +121,26 @@ public void iteratorRaisesOnTooLargeRecords() {\n         logInputStream.nextBatch();\n     }\n \n+    @Test\n+    public void testReadUnsignedIntFromInputStream() {", "originalCommit": "5b6bf7790edd65275a2947b87042e0ffc025297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "499bf1551a405717e448d27a896d483d99abf079", "url": "https://github.com/apache/kafka/commit/499bf1551a405717e448d27a896d483d99abf079", "message": "Add a fixed the scenario of 'len==0' to read function.", "committedDate": "2020-12-17T18:42:52Z", "type": "commit"}, {"oid": "1cbe4937f62635f7727c627bfa98be9aff5e9c70", "url": "https://github.com/apache/kafka/commit/1cbe4937f62635f7727c627bfa98be9aff5e9c70", "message": "Create a ByteufferInputStreamTest class and move the\ntestReadUnsignedIntFromInputStream from ByteBufferLogInputStreamTest to\nByteufferInputStreamTest.", "committedDate": "2020-12-20T17:16:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NzQ4OA==", "url": "https://github.com/apache/kafka/pull/9761#discussion_r547057488", "bodyText": "please revert this change.", "author": "chia7712", "createdAt": "2020-12-22T04:11:44Z", "path": "clients/src/test/java/org/apache/kafka/common/record/ByteBufferLogInputStreamTest.java", "diffHunk": "@@ -119,5 +119,4 @@ public void iteratorRaisesOnTooLargeRecords() {\n         assertNotNull(logInputStream.nextBatch());\n         logInputStream.nextBatch();\n     }\n-", "originalCommit": "1cbe4937f62635f7727c627bfa98be9aff5e9c70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwOTI4OQ==", "url": "https://github.com/apache/kafka/pull/9761#discussion_r549409289", "bodyText": "This change have been reverted.", "author": "bertber", "createdAt": "2020-12-28T16:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NzQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1OTUyOQ==", "url": "https://github.com/apache/kafka/pull/9761#discussion_r547059529", "bodyText": "throws Exception  is useless.", "author": "chia7712", "createdAt": "2020-12-22T04:20:35Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/ByteBufferInputStreamTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.kafka.common.utils;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.nio.ByteBuffer;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class ByteBufferInputStreamTest {\r\n+\r\n+    @Test\r\n+    public void testReadUnsignedIntFromInputStream() throws Exception {\r", "originalCommit": "1cbe4937f62635f7727c627bfa98be9aff5e9c70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQwOTUzMQ==", "url": "https://github.com/apache/kafka/pull/9761#discussion_r549409531", "bodyText": "It have been removed.", "author": "bertber", "createdAt": "2020-12-28T16:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1OTUyOQ=="}], "type": "inlineReview"}, {"oid": "23f5c4a93424c2f1817e5b9e178d37ea2d72c36d", "url": "https://github.com/apache/kafka/commit/23f5c4a93424c2f1817e5b9e178d37ea2d72c36d", "message": "Revert ByteBufferLogInputStreamTest's change and remove unnecessary code\nfrom ByteBufferInputStreamTest.", "committedDate": "2020-12-28T16:28:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NjcyOA==", "url": "https://github.com/apache/kafka/pull/9761#discussion_r549576728", "bodyText": "We have a pending PR offering a consistent import order (see #8404 (comment)). Could you please follow the rules (although it is not merged)?\n\nkafka, org.apache.kafka\ncom, net, org\njava, javax", "author": "chia7712", "createdAt": "2020-12-29T05:48:52Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/ByteBufferInputStreamTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *    http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.kafka.common.utils;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r", "originalCommit": "23f5c4a93424c2f1817e5b9e178d37ea2d72c36d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MjQzMQ==", "url": "https://github.com/apache/kafka/pull/9761#discussion_r550262431", "bodyText": "I have put the java behind the org", "author": "bertber", "createdAt": "2020-12-30T17:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU3NjcyOA=="}], "type": "inlineReview"}, {"oid": "3b44c6d62d79ab360d3a8ee7cd9207fe81d0056a", "url": "https://github.com/apache/kafka/commit/3b44c6d62d79ab360d3a8ee7cd9207fe81d0056a", "message": "reformat import order", "committedDate": "2020-12-30T16:47:08Z", "type": "commit"}, {"oid": "82c31fcd853badf1b76b934b774b1e014825347d", "url": "https://github.com/apache/kafka/commit/82c31fcd853badf1b76b934b774b1e014825347d", "message": "reformat import order again", "committedDate": "2021-01-01T06:29:45Z", "type": "commit"}]}