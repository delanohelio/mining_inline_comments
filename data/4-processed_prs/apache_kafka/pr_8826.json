{"pr_number": 8826, "pr_title": "KAFKA-10090 Misleading warnings: The configuration was supplied but i\u2026", "pr_createdAt": "2020-06-07T14:02:27Z", "pr_url": "https://github.com/apache/kafka/pull/8826", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MzY4Ng==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r446543686", "bodyText": "I'm confused, why does convert the type of config will change the way we interpret the config value?", "author": "abbccdda", "createdAt": "2020-06-27T16:39:57Z", "path": "clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java", "diffHunk": "@@ -159,24 +159,23 @@ private static ChannelBuilder create(SecurityProtocol securityProtocol,\n     }\n \n     // Visibility for testing\n+    @SuppressWarnings(\"unchecked\")\n     protected static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n-        Map<String, ?> parsedConfigs;\n+        Map<String, Object> parsedConfigs;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NzMwOA==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r446547308", "bodyText": "Does it make sense to just change the logging\n\nPardon me, I failed to get your point.\n\nAnd in terms of misleading, does this log confuse the user by any chance?\n\nfor example, the ssl-related configs used to create ssl protocol are viewed as unknown when creating KafkaAdmin.\n\nwhy does convert the type of config will change the way we interpret the config value?\n\nthe fix is unrelated to the type of config. The configs returned by this method is changed to the inner map (RecordingMap) of AbstractConfig so the keys used to call Map#get will be added to used list of AbstractConfig.", "author": "chia7712", "createdAt": "2020-06-27T17:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MzY4Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyNTYxMQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r520225611", "bodyText": "Does this cover the case when listenerName is not null? I guess that can only happen on the server side and since we don't log unused configs on the server, so maybe this is ok for now?", "author": "junrao", "createdAt": "2020-11-10T01:21:34Z", "path": "clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java", "diffHunk": "@@ -159,24 +159,25 @@ private static ChannelBuilder create(SecurityProtocol securityProtocol,\n     }\n \n     // Visibility for testing\n-    protected static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n-        Map<String, ?> parsedConfigs;\n+    @SuppressWarnings(\"unchecked\")\n+    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n+        Map<String, Object> parsedConfigs;\n         if (listenerName == null)\n-            parsedConfigs = config.values();\n+            parsedConfigs = (Map<String, Object>) config.values();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzNzA2MA==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r520237060", "bodyText": "if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\nthe method config.valuesWithPrefixOverride also returns ```RecordingMap so it is ok.", "author": "chia7712", "createdAt": "2020-11-10T01:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyNTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyNjMzNQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r520226335", "bodyText": "(1) \"so we should not wrap it to a immutable map\": It's kind of weird to have a comment on what we don't do.\n(2) to return map  => to returned map", "author": "junrao", "createdAt": "2020-11-10T01:23:55Z", "path": "clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java", "diffHunk": "@@ -159,24 +159,25 @@ private static ChannelBuilder create(SecurityProtocol securityProtocol,\n     }\n \n     // Visibility for testing\n-    protected static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n-        Map<String, ?> parsedConfigs;\n+    @SuppressWarnings(\"unchecked\")\n+    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n+        Map<String, Object> parsedConfigs;\n         if (listenerName == null)\n-            parsedConfigs = config.values();\n+            parsedConfigs = (Map<String, Object>) config.values();\n         else\n             parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n \n-        // include any custom configs from original configs\n-        Map<String, Object> configs = new HashMap<>(parsedConfigs);\n         config.originals().entrySet().stream()\n             .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs\n             // exclude already parsed listener prefix configs\n             .filter(e -> !(listenerName != null && e.getKey().startsWith(listenerName.configPrefix()) &&\n                 parsedConfigs.containsKey(e.getKey().substring(listenerName.configPrefix().length()))))\n             // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n             .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n-            .forEach(e -> configs.put(e.getKey(), e.getValue()));\n-        return configs;\n+            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n+        // The callers may add new elements to return map so we should not wrap it to a immutable map. Otherwise,\n+        // the callers have to create a new map to carry more elements and then following Get ops are not recorded.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3NzA1MA==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r526477050", "bodyText": "This comment is still not very clear to me. Are you saying if the caller needs to add more elements, it needs to create a new RecordingMap for the additional elements to be recorded?", "author": "junrao", "createdAt": "2020-11-18T22:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyNjMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ3MDg1NQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527470855", "bodyText": "Sorry for unclear comment. I will revise this comment and move it to method docs", "author": "chia7712", "createdAt": "2020-11-20T06:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyNjMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyNjg3MQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r520226871", "bodyText": "common/config/* is part of the public interface. This method seems internal. So, could we not expose it publicly to the end user?", "author": "junrao", "createdAt": "2020-11-10T01:25:27Z", "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "diffHunk": "@@ -582,6 +582,13 @@ public int hashCode() {\n         return originals.hashCode();\n     }\n \n+    /**\n+     * @return true if the input map is a recording map. otherwise, false\n+     */\n+    public static boolean isRecording(Map<String, ?> map) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzkyNg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r520293926", "bodyText": "I tried running console-producer with/without this PR. It doesn't seem to WARN any unused SSL configs in either test. Do you know why?\n\n@junrao this is the root cause.", "author": "chia7712", "createdAt": "2020-11-10T05:24:57Z", "path": "clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java", "diffHunk": "@@ -105,7 +105,9 @@ public AbstractConfig(ConfigDef definition, Map<?, ?> originals,  Map<String, ?>\n                 throw new ConfigException(entry.getKey().toString(), entry.getValue(), \"Key must be a string.\");\n \n         this.originals = resolveConfigVariables(configProviderProps, (Map<String, Object>) originals);\n-        this.values = definition.parse(this.originals);\n+        // pass a copy to definition.parse. Otherwise, the definition.parse adds all keys of definitions to \"used\" group\n+        // since definition.parse needs to call \"RecordingMap#get\" when checking all definitions.\n+        this.values = definition.parse(new HashMap<>(this.originals));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2MTE1OQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r526461159", "bodyText": "Hmm, why is this necessary since we reset used to empty in the next line?", "author": "junrao", "createdAt": "2020-11-18T22:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0NzY1Mg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527347652", "bodyText": "ConfigDef#parse (https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java#L468) tries to get all elements from input maps so all gets are recorded. In order to avoid recording, we pass a copy instead of RecordingMap.", "author": "chia7712", "createdAt": "2020-11-20T02:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjU1Mg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527972552", "bodyText": "Ok. I guess the issue is in the following, where we pass in a RecordingMap to construct ProducerConfig.\nhttps://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java#L384\nHowever, that code seems no longer necessary since we are now setting clientId in ProducerConfig.postProcessParsedConfig(). Could we just avoid constructing ProducerConfig there?", "author": "junrao", "createdAt": "2020-11-20T21:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTAwMg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r528169002", "bodyText": "However, that code seems no longer necessary since we are now setting clientId in ProducerConfig.postProcessParsedConfig(). Could we just avoid constructing ProducerConfig there?\n\nI don't think so. The configs passed to configurable object is origins so the generated \"client.id\" is not included. However, your feedback inspires me that we don't need to create a new ProducerConfig. Instead, we can use overrideConfig to set generated client.id to those configurable object. Will update it later.", "author": "chia7712", "createdAt": "2020-11-21T08:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk5OTY1Mw==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r532999653", "bodyText": "Hmm, I am still a bit confused. My understanding is that with the latest change, ProducerConfig will only be instantiated once and thus the passed in originals will never be a RecordingMap. But it seems this is still needed? Could you explain a bit more why this is the case?", "author": "junrao", "createdAt": "2020-12-01T00:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MzYxNg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533093616", "bodyText": "But it seems this is still needed?\n\nIt is not necessary with the latest change. I kept it as a total solution (if someone pass RecordingMap in the future). However, I'm going to remove it to make this PR simpler.", "author": "chia7712", "createdAt": "2020-12-01T06:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzkyNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4Njc4MQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527086781", "bodyText": "When will the input configs not be recording?", "author": "junrao", "createdAt": "2020-11-19T17:56:33Z", "path": "clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java", "diffHunk": "@@ -79,14 +79,29 @@ public SslFactory(Mode mode,\n         this.keystoreVerifiableUsingTruststore = keystoreVerifiableUsingTruststore;\n     }\n \n+    /**\n+     * @return true if the input map is a recording map. otherwise, false\n+     */\n+    static boolean isRecording(Map<String, ?> map) {\n+        // AbstractConfig is a public APIs and RecordingMap is a internal class\n+        // In order to avoid touching public interface, we just compare the class name here.\n+        return map.getClass().getSimpleName().equals(\"RecordingMap\");\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void configure(Map<String, ?> configs) throws KafkaException {\n         if (sslEngineFactory != null) {\n             throw new IllegalStateException(\"SslFactory was already configured.\");\n         }\n         this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n \n-        Map<String, Object> nextConfigs = new HashMap<>(configs);\n+        // it should keep using the input map if it is recording.\n+        // Otherwise, the used configs are not recorded and then AbstractConfig can produce misleading warnings:\n+        // \"The configuration 'xxx' was supplied but isn't a known config.\"\n+        Map<String, Object> nextConfigs = isRecording(configs)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1MjA3OA==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527352078", "bodyText": "Currently, the use cases of non-RecordingMap happens on tests. However, it seems to me we don't give a good definition of Configurable#configure. It is hard to say what we should pass to it. immutable map, mutable map and RecordingMap are alternatives. I want to keep flexibility but it is ok to me to rewrite related tests to make sure all pass are RecordingMap", "author": "chia7712", "createdAt": "2020-11-20T02:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4Njc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MjAzOA==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527092038", "bodyText": "consumer is unused.", "author": "junrao", "createdAt": "2020-11-19T18:04:48Z", "path": "clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java", "diffHunk": "@@ -2588,6 +2589,21 @@ public void deserializerShouldSeeGeneratedClientId() {\n         consumer.close();\n     }\n \n+    @Test\n+    public void testUnusedConfigs() {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n+        props.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLS\");\n+        ConsumerConfig config = new ConsumerConfig(ConsumerConfig.appendDeserializerToConfig(props, new StringDeserializer(), new StringDeserializer()));\n+\n+        assertTrue(new ConsumerConfig(config.originals(), false).unused().contains(SslConfigs.SSL_PROTOCOL_CONFIG));\n+        assertTrue(config.unused().contains(SslConfigs.SSL_PROTOCOL_CONFIG));\n+\n+        try (KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(config, null, null)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1MjY4Mg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527352682", "bodyText": "It tests the specify config is recorded when constructing KafkaConsumer", "author": "chia7712", "createdAt": "2020-11-20T02:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MjAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjYwNw==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527096607", "bodyText": "Should we use the private static constructor in this class? Ditto below.", "author": "junrao", "createdAt": "2020-11-19T18:11:56Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java", "diffHunk": "@@ -366,8 +379,9 @@ public void testMetadataFetch() throws InterruptedException {\n         // Return empty cluster 4 times and cluster from then on\n         when(metadata.fetch()).thenReturn(emptyCluster, emptyCluster, emptyCluster, emptyCluster, onePartitionCluster);\n \n-        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(configs, new StringSerializer(),\n-                new StringSerializer(), metadata, new MockClient(Time.SYSTEM, metadata), null, Time.SYSTEM) {\n+        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ2OTk5MQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527469991", "bodyText": "copy that", "author": "chia7712", "createdAt": "2020-11-20T06:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NjYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NzYyMg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527097622", "bodyText": "producer is unused.", "author": "junrao", "createdAt": "2020-11-19T18:13:29Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java", "diffHunk": "@@ -1290,6 +1308,23 @@ public void serializerShouldSeeGeneratedClientId() {\n         producer.close();\n     }\n \n+    @Test\n+    public void testUnusedConfigs() {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n+        props.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLS\");\n+        ProducerConfig config = new ProducerConfig(ProducerConfig.appendSerializerToConfig(props,\n+                new StringSerializer(), new StringSerializer()));\n+\n+        assertTrue(new ProducerConfig(config.originals(), false).unused().contains(SslConfigs.SSL_PROTOCOL_CONFIG));\n+        assertTrue(config.unused().contains(SslConfigs.SSL_PROTOCOL_CONFIG));\n+\n+        try (KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(config, null, null,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1MjczNA==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r527352734", "bodyText": "It tests the specify config is recorded when constructing KafkaProducer", "author": "chia7712", "createdAt": "2020-11-20T02:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NzYyMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMjI3Mg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533002272", "bodyText": "Could we just do config.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG) here?", "author": "junrao", "createdAt": "2020-12-01T00:56:12Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -314,27 +315,23 @@ public KafkaProducer(Properties properties) {\n      *                         be called in the producer when the serializer is passed in directly.\n      */\n     public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n-        this(Utils.propsToMap(properties), keySerializer, valueSerializer, null, null, null,\n-                Time.SYSTEM);\n+        this(Utils.propsToMap(properties), keySerializer, valueSerializer);\n     }\n \n     // visible for testing\n     @SuppressWarnings(\"unchecked\")\n-    KafkaProducer(Map<String, Object> configs,\n+    KafkaProducer(ProducerConfig config,\n                   Serializer<K> keySerializer,\n                   Serializer<V> valueSerializer,\n                   ProducerMetadata metadata,\n                   KafkaClient kafkaClient,\n                   ProducerInterceptors<K, V> interceptors,\n                   Time time) {\n-        ProducerConfig config = new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer,\n-                valueSerializer));\n         try {\n-            Map<String, Object> userProvidedConfigs = config.originals();\n             this.producerConfig = config;\n             this.time = time;\n \n-            String transactionalId = (String) userProvidedConfigs.get(ProducerConfig.TRANSACTIONAL_ID_CONFIG);\n+            String transactionalId = (String) config.originals().get(ProducerConfig.TRANSACTIONAL_ID_CONFIG);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5Mjk4Ng==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533092986", "bodyText": "good point.", "author": "chia7712", "createdAt": "2020-12-01T06:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwMjI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMzMzMw==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533013333", "bodyText": "Should gssapi.sasl.kerberos.service.name be sasl.kerberos.service.name?", "author": "junrao", "createdAt": "2020-12-01T01:29:47Z", "path": "clients/src/test/java/org/apache/kafka/common/network/ChannelBuildersTest.java", "diffHunk": "@@ -79,25 +80,52 @@ public void testChannelBuilderConfigs() {\n \n         // test configs with listener prefix\n         Map<String, Object> configs = ChannelBuilders.channelBuilderConfigs(securityConfig, new ListenerName(\"listener1\"));\n+\n         assertNull(configs.get(\"listener.name.listener1.gssapi.sasl.kerberos.service.name\"));\n+        assertFalse(securityConfig.unused().contains(\"listener.name.listener1.gssapi.sasl.kerberos.service.name\"));\n+\n         assertEquals(configs.get(\"gssapi.sasl.kerberos.service.name\"), \"testkafka\");\n+        assertFalse(securityConfig.unused().contains(\"gssapi.sasl.kerberos.service.name\"));\n+\n         assertEquals(configs.get(\"sasl.kerberos.service.name\"), \"testkafkaglobal\");\n+        assertFalse(securityConfig.unused().contains(\"gssapi.sasl.kerberos.service.name\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5Mjk1Nw==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533092957", "bodyText": "you are right.", "author": "chia7712", "createdAt": "2020-12-01T06:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMzMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMzk2Mg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533013962", "bodyText": "Do we need to instantiate again?", "author": "junrao", "createdAt": "2020-12-01T01:31:39Z", "path": "clients/src/test/java/org/apache/kafka/common/network/ChannelBuildersTest.java", "diffHunk": "@@ -79,25 +80,52 @@ public void testChannelBuilderConfigs() {\n \n         // test configs with listener prefix\n         Map<String, Object> configs = ChannelBuilders.channelBuilderConfigs(securityConfig, new ListenerName(\"listener1\"));\n+\n         assertNull(configs.get(\"listener.name.listener1.gssapi.sasl.kerberos.service.name\"));\n+        assertFalse(securityConfig.unused().contains(\"listener.name.listener1.gssapi.sasl.kerberos.service.name\"));\n+\n         assertEquals(configs.get(\"gssapi.sasl.kerberos.service.name\"), \"testkafka\");\n+        assertFalse(securityConfig.unused().contains(\"gssapi.sasl.kerberos.service.name\"));\n+\n         assertEquals(configs.get(\"sasl.kerberos.service.name\"), \"testkafkaglobal\");\n+        assertFalse(securityConfig.unused().contains(\"gssapi.sasl.kerberos.service.name\"));\n+\n         assertNull(configs.get(\"listener.name.listener1.sasl.kerberos.service.name\"));\n+        assertFalse(securityConfig.unused().contains(\"listener.name.listener1.sasl.kerberos.service.name\"));\n \n         assertNull(configs.get(\"plain.sasl.server.callback.handler.class\"));\n+        assertFalse(securityConfig.unused().contains(\"plain.sasl.server.callback.handler.class\"));\n+\n         assertEquals(configs.get(\"listener.name.listener1.gssapi.config1.key\"), \"custom.config1\");\n+        assertFalse(securityConfig.unused().contains(\"listener.name.listener1.gssapi.config1.key\"));\n+\n         assertEquals(configs.get(\"custom.config2.key\"), \"custom.config2\");\n+        assertFalse(securityConfig.unused().contains(\"custom.config2.key\"));\n \n         // test configs without listener prefix\n+        securityConfig = new TestSecurityConfig(props);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3OTY5NQ==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533079695", "bodyText": "We need a new RecordingMap to test different key without listener prefix. Otherwise, the key may be used by previous test.", "author": "chia7712", "createdAt": "2020-12-01T05:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMzk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxODU4Ng==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533018586", "bodyText": "Is this test necessary? Do we still have a case where we pass in a RecordingMap to  ProducerConfig?", "author": "junrao", "createdAt": "2020-12-01T01:46:14Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java", "diffHunk": "@@ -1271,27 +1270,48 @@ public void testProducerJmxPrefix() throws  Exception {\n         producer.close();\n     }\n \n-    private ProducerMetadata newMetadata(long refreshBackoffMs, long expirationMs) {\n-        return new ProducerMetadata(refreshBackoffMs, expirationMs, defaultMetadataIdleMs,\n+    private static ProducerMetadata newMetadata(long refreshBackoffMs, long expirationMs) {\n+        return new ProducerMetadata(refreshBackoffMs, expirationMs, DEFAULT_METADATA_IDLE_MS,\n                 new LogContext(), new ClusterResourceListeners(), Time.SYSTEM);\n     }\n \n     @Test\n-    public void serializerShouldSeeGeneratedClientId() {\n+    public void configurableObjectsShouldSeeGeneratedClientId() {\n         Properties props = new Properties();\n         props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n         props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, SerializerForClientId.class.getName());\n         props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, SerializerForClientId.class.getName());\n+        props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, PartitionerForClientId.class.getName());\n+        props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, ProducerInterceptorForClientId.class.getName());\n \n         KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props);\n-        assertEquals(2, SerializerForClientId.CLIENT_IDS.size());\n-        assertEquals(SerializerForClientId.CLIENT_IDS.get(0), producer.getClientId());\n-        assertEquals(SerializerForClientId.CLIENT_IDS.get(1), producer.getClientId());\n+        assertNotNull(producer.getClientId());\n+        assertNotEquals(0, producer.getClientId().length());\n+        assertEquals(4, CLIENT_IDS.size());\n+        CLIENT_IDS.forEach(id -> assertEquals(id, producer.getClientId()));\n         producer.close();\n     }\n \n+    @Test\n+    public void testUnusedConfigs() {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n+        props.put(SslConfigs.SSL_PROTOCOL_CONFIG, \"TLS\");\n+        ProducerConfig config = new ProducerConfig(ProducerConfig.appendSerializerToConfig(props,\n+                new StringSerializer(), new StringSerializer()));\n+\n+        assertTrue(new ProducerConfig(config.originals(), false).unused().contains(SslConfigs.SSL_PROTOCOL_CONFIG));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MzgwMg==", "url": "https://github.com/apache/kafka/pull/8826#discussion_r533093802", "bodyText": "I'm going to remove this test assertTrue(new ProducerConfig(config.originals(), false).unused().co...", "author": "chia7712", "createdAt": "2020-12-01T06:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxODU4Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "b994ee1ff848057103c0c73b009a54abf74f9285", "url": "https://github.com/apache/kafka/commit/b994ee1ff848057103c0c73b009a54abf74f9285", "message": "KAFKA-10090 Misleading warnings: The configuration was supplied but isn't a known config", "committedDate": "2020-12-02T15:49:06Z", "type": "commit"}, {"oid": "7298cfa9da20cb5a5b18add1d77420dc3c67da83", "url": "https://github.com/apache/kafka/commit/7298cfa9da20cb5a5b18add1d77420dc3c67da83", "message": "fix SslFactory configs", "committedDate": "2020-12-02T15:49:06Z", "type": "commit"}, {"oid": "df3780776e98a4ca97e6f80e7471ab07bed32219", "url": "https://github.com/apache/kafka/commit/df3780776e98a4ca97e6f80e7471ab07bed32219", "message": "channelBuilderConfigs should return RecordedMap", "committedDate": "2020-12-02T15:49:06Z", "type": "commit"}, {"oid": "93465cccb9096761819c57c17006a12ca34d1b63", "url": "https://github.com/apache/kafka/commit/93465cccb9096761819c57c17006a12ca34d1b63", "message": "address review comments; fix another bug", "committedDate": "2020-12-02T15:49:06Z", "type": "commit"}, {"oid": "29e36ae7d5c5bc27fe932d3c507b33b77661909c", "url": "https://github.com/apache/kafka/commit/29e36ae7d5c5bc27fe932d3c507b33b77661909c", "message": "refactor KafkaProducerTest", "committedDate": "2020-12-02T15:49:06Z", "type": "commit"}, {"oid": "a2b52fd78c50f49ca60c5ffba44361e9dd88e098", "url": "https://github.com/apache/kafka/commit/a2b52fd78c50f49ca60c5ffba44361e9dd88e098", "message": "apply generated client id to all configurable objects", "committedDate": "2020-12-02T15:49:07Z", "type": "commit"}, {"oid": "bee0513e40c2eae343456a067d7dce26af55854a", "url": "https://github.com/apache/kafka/commit/bee0513e40c2eae343456a067d7dce26af55854a", "message": "remove unnecessary tests and changes", "committedDate": "2020-12-02T15:49:07Z", "type": "commit"}, {"oid": "bee0513e40c2eae343456a067d7dce26af55854a", "url": "https://github.com/apache/kafka/commit/bee0513e40c2eae343456a067d7dce26af55854a", "message": "remove unnecessary tests and changes", "committedDate": "2020-12-02T15:49:07Z", "type": "forcePushed"}]}