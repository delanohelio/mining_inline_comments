{"pr_number": 8662, "pr_title": "HOTFIX: skip listOffsets request for newly created changelog topics", "pr_createdAt": "2020-05-12T22:45:01Z", "pr_url": "https://github.com/apache/kafka/pull/8662", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Mzc4OQ==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424083789", "bodyText": "Am I crazy or is this entire block not actually doing anything?", "author": "ableegoldman", "createdAt": "2020-05-12T23:07:24Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -1520,38 +1534,6 @@ private static void validateActiveTaskEncoding(final List<TopicPartition> partit\n         }\n     }\n \n-    /**\n-     * Internal helper function that creates a Kafka topic\n-     *\n-     * @param topicPartitions Map that contains the topic names to be created with the number of partitions\n-     */\n-    private void prepareTopic(final Map<String, InternalTopicConfig> topicPartitions) {\n-        log.debug(\"Starting to validate internal topics {} in partition assignor.\", topicPartitions);\n-\n-        // first construct the topics to make ready\n-        final Map<String, InternalTopicConfig> topicsToMakeReady = new HashMap<>();\n-\n-        for (final InternalTopicConfig topic : topicPartitions.values()) {\n-            final Optional<Integer> numPartitions = topic.numberOfPartitions();\n-            if (!numPartitions.isPresent()) {\n-                throw new StreamsException(\n-                    String.format(\"%sTopic [%s] number of partitions not defined\",\n-                                  logPrefix, topic.name())\n-                );\n-            }\n-            if (!topic.hasEnforcedNumberOfPartitions()) {\n-                topic.setNumberOfPartitions(numPartitions.get());\n-            }\n-            topicsToMakeReady.put(topic.name(), topic);\n-        }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzU1OA==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424103558", "bodyText": "It should do some sanity checks -- but I agree it's not easy to grok... Maybe we also incrementally refactored the code and this method become useless? All tests passed?", "author": "mjsax", "createdAt": "2020-05-13T00:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Mzc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMDgzMQ==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424110831", "bodyText": "I guess to be fair it was still validating that every topic had the numberOfPartitions set, but I thought it might make more sense to do this inside the InternalTopicManager since that checks the partitions anyways", "author": "ableegoldman", "createdAt": "2020-05-13T00:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Mzc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MzA5NA==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r425343094", "bodyText": "The logic indeed seem redundant to me.", "author": "guozhangwang", "createdAt": "2020-05-14T18:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4Mzc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNTM0MQ==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424105341", "bodyText": "I like immutability. Should we call this allExpetcedChangelogPartitions and introduce allExistingChangelogPartitions = allExpetcedChangelogPartitions - newlyCreatedChangelogs", "author": "mjsax", "createdAt": "2020-05-13T00:20:22Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -755,16 +753,25 @@ private TaskAssignor createTaskAssignor(final boolean lagComputationSuccessful)\n     private boolean populateClientStatesMap(final Map<UUID, ClientState> clientStates,\n                                             final Map<UUID, ClientMetadata> clientMetadataMap,\n                                             final Map<TopicPartition, TaskId> taskForPartition,\n-                                            final Map<TaskId, Set<TopicPartition>> changelogsByStatefulTask) {\n+                                            final Map<TaskId, Set<TopicPartition>> changelogsByStatefulTask,\n+                                            final Set<String> newlyCreatedChangelogs) {\n         boolean fetchEndOffsetsSuccessful;\n         Map<TaskId, Long> allTaskEndOffsetSums;\n         try {\n-            final Collection<TopicPartition> allChangelogPartitions = changelogsByStatefulTask.values().stream()\n-                                                                          .flatMap(Collection::stream)\n-                                                                          .collect(Collectors.toList());\n+            final Collection<TopicPartition> allExistingChangelogPartitions =", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwODk1Ng==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424108956", "bodyText": "Fair enough", "author": "ableegoldman", "createdAt": "2020-05-13T00:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwNTM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MDk1OA==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424750958", "bodyText": "Don't we need to reply adminClient, too?", "author": "mjsax", "createdAt": "2020-05-13T21:48:55Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1862,6 +1866,35 @@ public void shouldThrowIllegalStateExceptionIfAnyTopicsMissingFromChangelogEndOf\n         assertThrows(IllegalStateException.class, () -> partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)));\n     }\n \n+    @Test\n+    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n+        adminClient = EasyMock.createMock(AdminClient.class);\n+        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n+        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n+        allFuture.complete(emptyMap());\n+\n+        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n+        expect(result.all()).andReturn(allFuture);\n+\n+        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n+        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n+        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n+\n+        subscriptions.put(\"consumer10\",\n+                          new Subscription(\n+                              singletonList(\"topic1\"),\n+                              defaultSubscriptionInfo.encode()\n+                          ));\n+\n+        EasyMock.replay(result);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MTc3Mg==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424751772", "bodyText": "It gets replayed during configuration (at the end of configureDefault below)", "author": "ableegoldman", "createdAt": "2020-05-13T21:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MDk1OA=="}], "type": "inlineReview"}, {"oid": "dff6e11c4056adc492c92ead746fb097c9cfaec0", "url": "https://github.com/apache/kafka/commit/dff6e11c4056adc492c92ead746fb097c9cfaec0", "message": "skip listOffsets request for newly-made changelogs", "committedDate": "2020-05-13T21:51:24Z", "type": "commit"}, {"oid": "e0f8577acdd9d265520331f6343438681312bb1f", "url": "https://github.com/apache/kafka/commit/e0f8577acdd9d265520331f6343438681312bb1f", "message": "minor fix to newlycreatedTopics", "committedDate": "2020-05-13T21:51:24Z", "type": "commit"}, {"oid": "652ea3a3fdf24f672892be62d22cf22277e1ada0", "url": "https://github.com/apache/kafka/commit/652ea3a3fdf24f672892be62d22cf22277e1ada0", "message": "Ignore for now", "committedDate": "2020-05-13T21:51:24Z", "type": "commit"}, {"oid": "e8124ae155128137688dc159698e9129c3f499ab", "url": "https://github.com/apache/kafka/commit/e8124ae155128137688dc159698e9129c3f499ab", "message": "github review and add test", "committedDate": "2020-05-13T21:51:24Z", "type": "commit"}, {"oid": "fbc13b492ea6a93ea5ed014146343164f05fec31", "url": "https://github.com/apache/kafka/commit/fbc13b492ea6a93ea5ed014146343164f05fec31", "message": "remove Ignore annotation at last", "committedDate": "2020-05-13T22:06:43Z", "type": "commit"}, {"oid": "fbc13b492ea6a93ea5ed014146343164f05fec31", "url": "https://github.com/apache/kafka/commit/fbc13b492ea6a93ea5ed014146343164f05fec31", "message": "remove Ignore annotation at last", "committedDate": "2020-05-13T22:06:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMjA2MA==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424712060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.warn(\"listOffsets request failed due to \", e);\n          \n          \n            \n                        LOG.warn(\"listOffsets request failed.\", e);\n          \n      \n    \n    \n  \n\nThanks! (minor suggestion to make the log message more typical)", "author": "vvcephei", "createdAt": "2020-05-13T20:29:05Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ClientUtils.java", "diffHunk": "@@ -105,6 +109,7 @@ public static String getTaskProducerClientId(final String threadClientId, final\n                 endOffsets = future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n             }\n         } catch (final TimeoutException | RuntimeException | InterruptedException | ExecutionException e) {\n+            LOG.warn(\"listOffsets request failed due to \", e);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNjY0OQ==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r424716649", "bodyText": "It's not what you signed up for, but I'm wondering if we should at least submit a Jira to give some of these AdminClient methods a \"full consistency\" mode. In other words, since the command returns a future anyway, it would be nice to be able to tell it not to return until it can guarantee the topic will appear to be fully created on all brokers.\nI'm mildly concerned that we're just kicking the can down the road a little ways with this PR. I.e., we let the assignment happen, but then some other metadata (or data) operation for that topic will just fail shortly thereafter.\nMore generally, we jump through a lot of hoops in our own tests to try and make sure that the topics are really, actually created (or deleted) before proceeding with the test, and I'm sure that our users also suffer from the same problem in their testing and production code.", "author": "vvcephei", "createdAt": "2020-05-13T20:38:09Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopicManager.java", "diffHunk": "@@ -169,6 +173,9 @@ public void makeReady(final Map<String, InternalTopicConfig> topics) {\n             log.error(timeoutAndRetryError);\n             throw new StreamsException(timeoutAndRetryError);\n         }\n+        log.debug(\"Completed validating internal topics and created {}\", newlyCreatedTopics);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNDI2Mw==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r425314263", "bodyText": "I think this race condition was particularly severe since we do the listOffsets request pretty much immediately after creating the topics, whereas whatever we're doing with that topic next will not be until the rebalance was completed.\nAFAIK we've never had any users report subsequent operations failing after the first rebalance due to not-yet-fully-created topics, but it could have just slipped past us", "author": "ableegoldman", "createdAt": "2020-05-14T17:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNjY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNDQ3MA==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r425314470", "bodyText": "I do agree it would be useful though. Feel free to create a ticket :P", "author": "ableegoldman", "createdAt": "2020-05-14T17:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNjY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMDczNg==", "url": "https://github.com/apache/kafka/pull/8662#discussion_r425330736", "bodyText": "Thanks! Will do. I just wanted to bounce the idea off you first, in case it was stupid.", "author": "vvcephei", "createdAt": "2020-05-14T18:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNjY0OQ=="}], "type": "inlineReview"}, {"oid": "df24f6e351160de97ae664daf4f433abf54334d1", "url": "https://github.com/apache/kafka/commit/df24f6e351160de97ae664daf4f433abf54334d1", "message": "Minor log change suggestion\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-05-14T17:05:32Z", "type": "commit"}]}