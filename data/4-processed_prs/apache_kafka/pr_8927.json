{"pr_number": 8927, "pr_title": "KAFKA-10200: Fix testability of PAPI with windowed stores", "pr_createdAt": "2020-06-25T16:34:26Z", "pr_url": "https://github.com/apache/kafka/pull/8927", "timeline": [{"oid": "8fff0535d079f6f10bd33cb89a37bd30685b16fe", "url": "https://github.com/apache/kafka/commit/8fff0535d079f6f10bd33cb89a37bd30685b16fe", "message": "MINOR: Fix testability of PAPI with windowed stores", "committedDate": "2020-06-25T16:34:03Z", "type": "commit"}, {"oid": "74b50044ae2bfef9bc196d994fd20f361e3632f8", "url": "https://github.com/apache/kafka/commit/74b50044ae2bfef9bc196d994fd20f361e3632f8", "message": "remove demo and make test internal", "committedDate": "2020-06-25T16:53:04Z", "type": "commit"}, {"oid": "e46bd62c834c6bb69de60e73f694fb54e5455d4e", "url": "https://github.com/apache/kafka/commit/e46bd62c834c6bb69de60e73f694fb54e5455d4e", "message": "drop printlns", "committedDate": "2020-06-25T17:06:22Z", "type": "commit"}, {"oid": "3a96929ca3620a40a0bd19a7c77648afe60b9b95", "url": "https://github.com/apache/kafka/commit/3a96929ca3620a40a0bd19a7c77648afe60b9b95", "message": "cleanup", "committedDate": "2020-06-25T17:13:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Nzk4MA==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446087980", "bodyText": "I really like this class.", "author": "cadonna", "createdAt": "2020-06-26T09:56:50Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;\n+\n+public final class ProcessorContextUtils {", "originalCommit": "3a96929ca3620a40a0bd19a7c77648afe60b9b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2MzIyMg==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446263222", "bodyText": "Thanks!", "author": "vvcephei", "createdAt": "2020-06-26T15:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Nzk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxODg0NA==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446418844", "bodyText": "I'm trying to phrase this is a less discouraging way, since I agree this is a nice & clever fix:\nis this meant to be the actual, final solution to this problem, or just a temporary workaround to unblock us without the need for a KIP? This just \"happens\" to work out nicely because we know the mocks are actually returning a StreamsMetricsImpl as well. What happens if we need to add/access more complicated processor context functionality in the inner state stores? I say \"inner\" because the caching layers for example also perform a cast to InternalProcessorContext.\nI completely agree with proceeding with this, so don't take that question as a challenge to this PR. Just wondering where this leaves us going forward. Should we accept (and therefore enforce) that state stores can't have caching enabled in unit tests?", "author": "ableegoldman", "createdAt": "2020-06-26T21:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Nzk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MzI4Nw==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446473287", "bodyText": "Uh, no, that was an oversight :) I might as well fix it in this PR, so I'll not merge just now. Thanks for pointing it out.\nI think where it leaves us, in a nutshell, is that state stores should never cast the context, not as long as their init() method is a public interface. This class is a way to collect all the casting-related sins and put them all in one place where we can keep an eye on them.\nCasting doesn't always indicate a design failure, but in this case, it 100% does. I'd hope that everything in this class gets designed away and we can delete the class. I'd flip the table and do it right now, but I don't want to block the unit-testability of the PAPI behind a bunch of KIPs. I'll make tickets to fix the stuff that needs to be fixed.\nIn contrast, note that all the Processor implementations that power our DSL are very much not for public use, so for them, casting to InternalProcessorContext is fair game. Although, I have found and/or fixed a fair number of bugs following from casting in the processors as well. So, although, it's not a contract violation, it still may not be a good idea.", "author": "vvcephei", "createdAt": "2020-06-27T02:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Nzk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MTQxOQ==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r447071419", "bodyText": "Ok, after looking into the internals, I can see that caching is like logging, it only makes sense in the context of being in a \"real\" KafkaStreams environment, so we don't need to support it for unit tests. I've added more explicit exceptions when this condition is violated, as well as more documentation to the demo tests.", "author": "vvcephei", "createdAt": "2020-06-29T15:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Nzk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MDUxMg==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r447080512", "bodyText": "I totally agree. I missed to add that I really like this as a temporary fix. IMO, the root cause is that we pass in internal information in a public API which we should not do at all. I have already an idea how to fix it. Let's discuss that somewhere else.", "author": "cadonna", "createdAt": "2020-06-29T15:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Nzk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5MjIzOQ==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446092239", "bodyText": "prop: Here you could use TestUtils.tempDirectory().", "author": "cadonna", "createdAt": "2020-06-26T10:05:50Z", "path": "streams/test-utils/src/test/java/org/apache/kafka/streams/test/wordcount/WindowedWordCountProcessorTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.test.wordcount;\n+\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.apache.kafka.common.utils.Utils;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.processor.MockProcessorContext;\n+import org.apache.kafka.streams.processor.Processor;\n+import org.apache.kafka.streams.processor.TaskId;\n+import org.apache.kafka.streams.state.Stores;\n+import org.apache.kafka.streams.state.WindowStore;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Iterator;\n+import java.util.Properties;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class WindowedWordCountProcessorTest {\n+    @Test\n+    public void testWithInMemoryStore() {\n+        final MockProcessorContext context = new MockProcessorContext();\n+\n+        // Create, initialize, and register the state store.\n+        final WindowStore<String, Integer> store =\n+            Stores.windowStoreBuilder(Stores.inMemoryWindowStore(\"WindowedCounts\",\n+                                                                 Duration.ofDays(24),\n+                                                                 Duration.ofMillis(100),\n+                                                                 false),\n+                                      Serdes.String(),\n+                                      Serdes.Integer())\n+                  .withLoggingDisabled() // Changelog is not supported by MockProcessorContext.\n+                  .build();\n+        store.init(context, store);\n+        context.register(store, null);\n+\n+        // Create and initialize the processor under test\n+        final Processor<String, String> processor = new WindowedWordCountProcessorSupplier().get();\n+        processor.init(context);\n+\n+        // send a record to the processor\n+        context.setTimestamp(101);\n+        processor.process(\"key\", \"alpha beta gamma alpha\");\n+\n+        // send a record to the processor in a new window\n+        context.setTimestamp(221);\n+        processor.process(\"key\", \"gamma delta\");\n+\n+        // note that the processor does not forward during process()\n+        assertThat(context.forwarded().isEmpty(), is(true));\n+\n+        // now, we trigger the punctuator, which iterates over the state store and forwards the contents.\n+        context.scheduledPunctuators().get(0).getPunctuator().punctuate(1_000L);\n+\n+        // finally, we can verify the output.\n+        final Iterator<MockProcessorContext.CapturedForward> capturedForwards = context.forwarded().iterator();\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[alpha@100/200]\", \"2\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[beta@100/200]\", \"1\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[gamma@100/200]\", \"1\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[delta@200/300]\", \"1\")));\n+        assertThat(capturedForwards.next().keyValue(), is(new KeyValue<>(\"[gamma@200/300]\", \"1\")));\n+        assertThat(capturedForwards.hasNext(), is(false));\n+    }\n+\n+    @Test\n+    public void testWithPersistentStore() throws IOException {\n+        final Properties properties = new Properties();\n+        properties.setProperty(StreamsConfig.APPLICATION_ID_CONFIG, \"\");\n+        properties.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"\");\n+\n+        final File stateDir = Files.createTempDirectory(\"kafka-test-\").toFile();", "originalCommit": "3a96929ca3620a40a0bd19a7c77648afe60b9b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2MzExMg==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r446263112", "bodyText": "Ah, good call. I'd previously located this test in the examples module where the function wasn't available.", "author": "vvcephei", "createdAt": "2020-06-26T15:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5MjIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MTU0OQ==", "url": "https://github.com/apache/kafka/pull/8927#discussion_r447071549", "bodyText": "done!", "author": "vvcephei", "createdAt": "2020-06-29T15:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5MjIzOQ=="}], "type": "inlineReview"}, {"oid": "d0f3f4fe547469f88b2aeec5686de1be2756c99f", "url": "https://github.com/apache/kafka/commit/d0f3f4fe547469f88b2aeec5686de1be2756c99f", "message": "CR amendments", "committedDate": "2020-06-29T15:40:51Z", "type": "commit"}, {"oid": "06524e651572e3cebbcf841ee80b8c759b6591fe", "url": "https://github.com/apache/kafka/commit/06524e651572e3cebbcf841ee80b8c759b6591fe", "message": "document that caching is not supported by MockProcessorContext", "committedDate": "2020-06-29T15:44:29Z", "type": "commit"}, {"oid": "aa6408062e51677a2cbb5db4b885b8b940df503d", "url": "https://github.com/apache/kafka/commit/aa6408062e51677a2cbb5db4b885b8b940df503d", "message": "link the metrics adaptor to KAFKA-10217", "committedDate": "2020-06-29T16:04:40Z", "type": "commit"}]}