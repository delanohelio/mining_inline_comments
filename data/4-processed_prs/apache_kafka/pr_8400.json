{"pr_number": 8400, "pr_title": "KAFKA-9739: Fixes null key changing child node", "pr_createdAt": "2020-04-01T00:03:50Z", "pr_url": "https://github.com/apache/kafka/pull/8400", "timeline": [{"oid": "c42e8495bf3b2f432acd8ef7a23b6403f4168eb6", "url": "https://github.com/apache/kafka/commit/c42e8495bf3b2f432acd8ef7a23b6403f4168eb6", "message": "KAFKA-9739: When optimizing with merge nodes, the merge node must be the parent of at least one repartition topics to be optimized.", "committedDate": "2020-03-29T20:50:01Z", "type": "commit"}, {"oid": "a7a18ee121fdd87d93271d83a9c55ba1489c04e4", "url": "https://github.com/apache/kafka/commit/a7a18ee121fdd87d93271d83a9c55ba1489c04e4", "message": "KAFKA-9739: Clean up from cherry-pick, update naming since original work was done on 2.4 branch and the naming conventions for repartition topics has changed.", "committedDate": "2020-03-29T21:24:43Z", "type": "commit"}, {"oid": "96c3b65c1f6c20a3ad42ce2989a4521a4ac10de4", "url": "https://github.com/apache/kafka/commit/96c3b65c1f6c20a3ad42ce2989a4521a4ac10de4", "message": "KAFKA-9739: Add comment about topology remove println statement", "committedDate": "2020-03-30T00:10:44Z", "type": "commit"}, {"oid": "238943c1e98c39229b471bc1ce9447cc88b2e79b", "url": "https://github.com/apache/kafka/commit/238943c1e98c39229b471bc1ce9447cc88b2e79b", "message": "KAFKA-9739: Change to all repartition topics need to be children of the merge node to update the optimization map with the merge node vs. the key-changing node.", "committedDate": "2020-03-30T14:09:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMDg5OQ==", "url": "https://github.com/apache/kafka/pull/8400#discussion_r401610899", "bodyText": "This is the fix", "author": "bbejeck", "createdAt": "2020-04-01T13:23:24Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -399,11 +399,13 @@ private void maybeUpdateKeyChangingRepartitionNodeMap() {\n         final Set<StreamsGraphNode> mergeNodeKeyChangingParentsToRemove = new HashSet<>();\n         for (final StreamsGraphNode mergeNode : mergeNodes) {\n             mergeNodesToKeyChangers.put(mergeNode, new LinkedHashSet<>());\n-            final Collection<StreamsGraphNode> keys = keyChangingOperationsToOptimizableRepartitionNodes.keySet();\n-            for (final StreamsGraphNode key : keys) {\n-                final StreamsGraphNode maybeParentKey = findParentNodeMatching(mergeNode, node -> node.parentNodes().contains(key));\n-                if (maybeParentKey != null) {\n-                    mergeNodesToKeyChangers.get(mergeNode).add(key);\n+            final Set<Map.Entry<StreamsGraphNode, LinkedHashSet<OptimizableRepartitionNode<?, ?>>>> entrySet = keyChangingOperationsToOptimizableRepartitionNodes.entrySet();\n+            for (final Map.Entry<StreamsGraphNode, LinkedHashSet<OptimizableRepartitionNode<?, ?>>> entry : entrySet) {\n+                if (mergeNodeHasRepartitionChildren(mergeNode, entry.getValue())) {", "originalCommit": "238943c1e98c39229b471bc1ce9447cc88b2e79b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}