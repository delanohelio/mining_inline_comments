{"pr_number": 8556, "pr_title": "MINOR: Add a duplicate() method to Message classes", "pr_createdAt": "2020-04-26T05:04:29Z", "pr_url": "https://github.com/apache/kafka/pull/8556", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzOTkxMw==", "url": "https://github.com/apache/kafka/pull/8556#discussion_r415539913", "bodyText": "What about adding the expected number of elements?", "author": "chia7712", "createdAt": "2020-04-27T06:19:34Z", "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -2112,6 +2131,83 @@ private void generateFieldHashCode(FieldSpec field) {\n         }\n     }\n \n+    private void generateClassDuplicate(String className, StructSpec struct) {\n+        buffer.printf(\"@Override%n\");\n+        buffer.printf(\"public %s duplicate() {%n\", className);\n+        buffer.incrementIndent();\n+        buffer.printf(\"%s _duplicate = new %s();%n\", className, className);\n+        for (FieldSpec field : struct.fields()) {\n+            generateFieldDuplicate(new Target(field,\n+                field.camelCaseName(),\n+                field.camelCaseName(),\n+                input -> String.format(\"_duplicate.%s = %s\", field.camelCaseName(), input)));\n+        }\n+        buffer.printf(\"return _duplicate;%n\");\n+        buffer.decrementIndent();\n+        buffer.printf(\"}%n\");\n+    }\n+\n+    private void generateFieldDuplicate(Target target) {\n+        FieldSpec field = target.field();\n+        if ((field.type() instanceof FieldType.BoolFieldType) ||\n+                (field.type() instanceof FieldType.Int8FieldType) ||\n+                (field.type() instanceof FieldType.Int16FieldType) ||\n+                (field.type() instanceof FieldType.Int32FieldType) ||\n+                (field.type() instanceof FieldType.Int64FieldType) ||\n+                (field.type() instanceof FieldType.Float64FieldType) ||\n+                (field.type() instanceof FieldType.UUIDFieldType)) {\n+            buffer.printf(\"%s;%n\", target.assignmentStatement(target.sourceVariable()));\n+        } else {\n+            IsNullConditional cond = IsNullConditional.forName(target.sourceVariable()).\n+                nullableVersions(target.field().nullableVersions()).\n+                ifNull(() -> buffer.printf(\"%s;%n\", target.assignmentStatement(\"null\")));\n+            if (field.type().isBytes()) {\n+                if (field.zeroCopy()) {\n+                    cond.ifShouldNotBeNull(() ->\n+                        buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                            String.format(\"%s.duplicate()\", target.sourceVariable()))));\n+                } else {\n+                    cond.ifShouldNotBeNull(() -> {\n+                        headerGenerator.addImport(MessageGenerator.MESSAGE_UTIL_CLASS);\n+                        buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                            String.format(\"MessageUtil.duplicate(%s)\",\n+                                target.sourceVariable())));\n+                    });\n+                }\n+            } else if (field.type().isStruct()) {\n+                cond.ifShouldNotBeNull(() ->\n+                    buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                        String.format(\"%s.duplicate()\", target.sourceVariable()))));\n+            } else if (field.type().isString()) {\n+                // Strings are immutable, so we don't need to duplicate them.\n+                cond.ifShouldNotBeNull(() ->\n+                    buffer.printf(\"%s;%n\", target.assignmentStatement(\n+                        target.sourceVariable())));\n+            } else if (field.type().isArray()) {\n+                cond.ifShouldNotBeNull(() -> {\n+                    String newArrayName =\n+                        String.format(\"new%s\", field.capitalizedCamelCaseName());\n+                    buffer.printf(\"%s %s = new %s();%n\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4NjU2NQ==", "url": "https://github.com/apache/kafka/pull/8556#discussion_r422586565", "bodyText": "Good idea.  Added.", "author": "cmccabe", "createdAt": "2020-05-10T05:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUzOTkxMw=="}], "type": "inlineReview"}, {"oid": "6bd753bc8cf0abdbe8883687b08833e01f5b9f28", "url": "https://github.com/apache/kafka/commit/6bd753bc8cf0abdbe8883687b08833e01f5b9f28", "message": "Add a duplicate() method to Message classes", "committedDate": "2020-05-10T05:06:50Z", "type": "commit"}, {"oid": "54e5e1be4602c883f8395d044a8ed3cbd1719785", "url": "https://github.com/apache/kafka/commit/54e5e1be4602c883f8395d044a8ed3cbd1719785", "message": "Add size to new declaration", "committedDate": "2020-05-10T05:07:29Z", "type": "commit"}, {"oid": "54e5e1be4602c883f8395d044a8ed3cbd1719785", "url": "https://github.com/apache/kafka/commit/54e5e1be4602c883f8395d044a8ed3cbd1719785", "message": "Add size to new declaration", "committedDate": "2020-05-10T05:07:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3ODg1Mg==", "url": "https://github.com/apache/kafka/pull/8556#discussion_r424578852", "bodyText": "nit: maybe generateCollectionDuplicateMethod?", "author": "hachikuji", "createdAt": "2020-05-13T16:38:59Z", "path": "generator/src/main/java/org/apache/kafka/message/MessageDataGenerator.java", "diffHunk": "@@ -273,6 +276,22 @@ private String commaSeparatedHashSetFieldAndTypes(StructSpec struct) {\n             collect(Collectors.joining(\", \"));\n     }\n \n+    private void generateDuplicateMethod(String className, StructSpec struct) {", "originalCommit": "54e5e1be4602c883f8395d044a8ed3cbd1719785", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dd4be02b18229b5298827b8341944c5fcb341b78", "url": "https://github.com/apache/kafka/commit/dd4be02b18229b5298827b8341944c5fcb341b78", "message": "generateDuplicateMethod -> generateCollectionDuplicateMethod", "committedDate": "2020-05-13T22:16:56Z", "type": "commit"}]}