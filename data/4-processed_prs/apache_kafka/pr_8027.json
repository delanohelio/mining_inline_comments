{"pr_number": 8027, "pr_title": "KAFKA-7658: Follow up to original PR", "pr_createdAt": "2020-01-31T22:34:57Z", "pr_url": "https://github.com/apache/kafka/pull/8027", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNTYxNQ==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373715615", "bodyText": "Renaming this variable in this class and all its sub-classed to make it more clear what it is for", "author": "mjsax", "createdAt": "2020-01-31T22:35:49Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/AbstractStream.java", "diffHunk": "@@ -46,7 +46,7 @@\n     protected final String name;\n     protected final Serde<K> keySerde;\n     protected final Serde<V> valSerde;\n-    protected final Set<String> sourceNodes;\n+    protected final Set<String> subTopologySourceNodes;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4ODU4MA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373788580", "bodyText": "I agree with this\n\"subTopologySourceNodes\" is more clearly named", "author": "highluck", "createdAt": "2020-02-01T16:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNTYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjQ2OA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373716468", "bodyText": "Creating this MaterializedInternal was actually a bug as if the passed in \"store name\" was null, no store name would be generated, and we would fail with an NPE. It's fixed implicitly with the refactoring (this bug was exposed after I rewrote a test -- leave a comment there, too)", "author": "mjsax", "createdAt": "2020-01-31T22:38:49Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java", "diffHunk": "@@ -635,18 +626,14 @@ private void to(final TopicNameExtractor<K, V> topicExtractor,\n     @Override\n     public KTable<K, V> toTable(final Named named,\n                                 final Materialized<K, V, KeyValueStore<Bytes, byte[]>> materialized) {\n+        Objects.requireNonNull(named, \"named can't be null\");\n         Objects.requireNonNull(materialized, \"materialized can't be null\");\n \n-        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal =\n-            new MaterializedInternal<>(materialized);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4ODI2OA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373788268", "bodyText": "oh! this is good\nthank you,\nIt was my mistake", "author": "highluck", "createdAt": "2020-02-01T16:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjU5Mg==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373716592", "bodyText": "Just some cleanup to get rid or warnings.", "author": "mjsax", "createdAt": "2020-01-31T22:39:15Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImplJoin.java", "diffHunk": "@@ -77,8 +77,8 @@\n         final String joinMergeName = renamed.suffixWithOrElseGet(\n             \"-merge\", builder, KStreamImpl.MERGE_NAME);\n \n-        final StreamsGraphNode thisStreamsGraphNode = ((AbstractStream) lhs).streamsGraphNode;\n-        final StreamsGraphNode otherStreamsGraphNode = ((AbstractStream) other).streamsGraphNode;\n+        final StreamsGraphNode thisStreamsGraphNode = ((AbstractStream<?, ?>) lhs).streamsGraphNode;\n+        final StreamsGraphNode otherStreamsGraphNode = ((AbstractStream<?, ?>) other).streamsGraphNode;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjc3Mw==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373716773", "bodyText": "The is nothing to be deprecated -- also the comment is confusing as maintainMs / segmentInterval are not use in this method", "author": "mjsax", "createdAt": "2020-01-31T22:39:58Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImplJoin.java", "diffHunk": "@@ -184,7 +184,6 @@ private void assertUniqueStoreNames(final WindowBytesStoreSupplier supplier,\n         }\n     }\n \n-    @SuppressWarnings(\"deprecation\") // continuing to support Windows#maintainMs/segmentInterval in fallback mode", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjk3Nw==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373716977", "bodyText": "Adding couple of new test to verify we don't accept nulls.", "author": "mjsax", "createdAt": "2020-01-31T22:40:36Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -692,6 +687,38 @@ public void shouldNotAllowNullGroupedOnGroupByKey() {\n         assertThat(exception.getMessage(), equalTo(\"grouped can't be null\"));\n     }\n \n+    @Test", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzExNA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373717114", "bodyText": "This line was added in the original PR for no reason -- just removing it again.", "author": "mjsax", "createdAt": "2020-01-31T22:40:59Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1550,16 +1577,13 @@ public void shouldPropagateRepartitionFlagAfterGlobalKTableJoin() {\n             .groupByKey()\n             .count();\n \n-        final String topologyDescription = builder.build().describe().toString();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzIwMA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373717200", "bodyText": "Making the test a little bit fancier.", "author": "mjsax", "createdAt": "2020-01-31T22:41:18Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2433,13 +2458,15 @@ public void shouldMaterializeKTableFromKStream() {\n                 \"      <-- KSTREAM-SOURCE-0000000000\\n\\n\")\n         );\n \n-        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n+        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n             final TestInputTopic<String, String> inputTopic =\n                 driver.createInputTopic(input, Serdes.String().serializer(), Serdes.String().serializer());\n             final KeyValueStore<String, String> store = driver.getKeyValueStore(storeName);\n \n             inputTopic.pipeInput(\"A\", \"01\");\n-            final Map<String, String> expectedStore = mkMap(mkEntry(\"A\", \"01\"));\n+            inputTopic.pipeInput(\"B\", \"02\");\n+            inputTopic.pipeInput(\"A\", \"03\");\n+            final Map<String, String> expectedStore = mkMap(mkEntry(\"A\", \"03\"), mkEntry(\"B\", \"02\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzM5Mw==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373717393", "bodyText": "Changing this test, to also change the key type to make sure we can pass in serdes correctly.", "author": "mjsax", "createdAt": "2020-01-31T22:41:54Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2455,14 +2482,13 @@ public void shouldSupportKeyChangeKTableFromKStream() {\n         final String output = \"output\";\n \n         builder.stream(input, consumed)\n-            .map((key, value) -> new KeyValue<>(key + \"-\", value))\n-            .toTable()\n+            .map((key, value) -> new KeyValue<>(key.charAt(0) - 'A', value))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzUyNQ==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373717525", "bodyText": "Overwrite key-serde to match type (this was exposing the \"store name == null\" bug).", "author": "mjsax", "createdAt": "2020-01-31T22:42:23Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2455,14 +2482,13 @@ public void shouldSupportKeyChangeKTableFromKStream() {\n         final String output = \"output\";\n \n         builder.stream(input, consumed)\n-            .map((key, value) -> new KeyValue<>(key + \"-\", value))\n-            .toTable()\n+            .map((key, value) -> new KeyValue<>(key.charAt(0) - 'A', value))\n+            .toTable(Materialized.with(Serdes.Integer(), null))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzgwMQ==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373717801", "bodyText": "Due to the refactoring of the KStreamImple#toTable() overloads, we get different names -- but as nothing is released yet, there is backward compatibility concern.", "author": "mjsax", "createdAt": "2020-01-31T22:43:23Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2475,27 +2501,27 @@ public void shouldSupportKeyChangeKTableFromKStream() {\n                 \"    Processor: KSTREAM-FILTER-0000000005 (stores: [])\\n\" +\n                 \"      --> KSTREAM-SINK-0000000004\\n\" +\n                 \"      <-- KSTREAM-MAP-0000000001\\n\" +\n-                \"    Sink: KSTREAM-SINK-0000000004 (topic: KSTREAM-TOTABLE-0000000003-repartition)\\n\" +\n+                \"    Sink: KSTREAM-SINK-0000000004 (topic: KSTREAM-TOTABLE-0000000002-repartition)\\n\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxODA4NA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373718084", "bodyText": "This check is redundant, because we know there is only one sub-topology (ie, copartitionGroup) from the topologyDescription check above.", "author": "mjsax", "createdAt": "2020-01-31T22:44:29Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2675,11 +2700,6 @@ public void shouldSupportTableTableJoinWithKStreamToKTable() {\n                 \"    Sink: KSTREAM-SINK-0000000010 (topic: output)\\n\" +\n                 \"      <-- KTABLE-TOSTREAM-0000000009\\n\\n\"));\n \n-        final Collection<Set<String>> copartitionGroups =\n-            TopologyWrapper.getInternalTopologyBuilder(topology).copartitionGroups();\n-\n-        assertEquals(1, copartitionGroups.size());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxODI4MA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373718280", "bodyText": "Just a code simplification -- no need to not use props similarly to the other tests.", "author": "mjsax", "createdAt": "2020-01-31T22:45:09Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2894,40 +2909,33 @@ public void shouldSupportTriggerMaterializedWithKTableFromKStream() {\n             .to(output);\n \n         final Topology topology = builder.build(props);\n-        final String topologyDescription = topology.describe().toString();\n \n+        final String topologyDescription = topology.describe().toString();\n         assertThat(\n             topologyDescription,\n             equalTo(\"Topologies:\\n\" +\n                 \"   Sub-topology: 0\\n\" +\n                 \"    Source: KSTREAM-SOURCE-0000000000 (topics: [input])\\n\" +\n-                \"      --> KSTREAM-TOTABLE-0000000002\\n\" +\n-                \"    Processor: KSTREAM-TOTABLE-0000000002 (stores: [])\\n\" +\n+                \"      --> KSTREAM-TOTABLE-0000000001\\n\" +\n+                \"    Processor: KSTREAM-TOTABLE-0000000001 (stores: [])\\n\" +\n                 \"      --> KTABLE-MAPVALUES-0000000003\\n\" +\n                 \"      <-- KSTREAM-SOURCE-0000000000\\n\" +\n                 \"    Processor: KTABLE-MAPVALUES-0000000003 (stores: [store])\\n\" +\n                 \"      --> KTABLE-TOSTREAM-0000000004\\n\" +\n-                \"      <-- KSTREAM-TOTABLE-0000000002\\n\" +\n+                \"      <-- KSTREAM-TOTABLE-0000000001\\n\" +\n                 \"    Processor: KTABLE-TOSTREAM-0000000004 (stores: [])\\n\" +\n                 \"      --> KSTREAM-SINK-0000000005\\n\" +\n                 \"      <-- KTABLE-MAPVALUES-0000000003\\n\" +\n                 \"    Sink: KSTREAM-SINK-0000000005 (topic: output)\\n\" +\n                 \"      <-- KTABLE-TOSTREAM-0000000004\\n\\n\"));\n \n         try (\n-            final TopologyTestDriver driver = new TopologyTestDriver(\n-                topology,\n-                mkProperties(mkMap(\n-                    mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n-                    mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\"),\n-                    mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"kafka-test\").getAbsolutePath())\n-                )),\n-                Instant.ofEpochMilli(0L))) {\n+            final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxODQzNg==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r373718436", "bodyText": "This is an actual fix in the test code.", "author": "mjsax", "createdAt": "2020-01-31T22:45:48Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -2894,40 +2909,33 @@ public void shouldSupportTriggerMaterializedWithKTableFromKStream() {\n             .to(output);\n \n         final Topology topology = builder.build(props);\n-        final String topologyDescription = topology.describe().toString();\n \n+        final String topologyDescription = topology.describe().toString();\n         assertThat(\n             topologyDescription,\n             equalTo(\"Topologies:\\n\" +\n                 \"   Sub-topology: 0\\n\" +\n                 \"    Source: KSTREAM-SOURCE-0000000000 (topics: [input])\\n\" +\n-                \"      --> KSTREAM-TOTABLE-0000000002\\n\" +\n-                \"    Processor: KSTREAM-TOTABLE-0000000002 (stores: [])\\n\" +\n+                \"      --> KSTREAM-TOTABLE-0000000001\\n\" +\n+                \"    Processor: KSTREAM-TOTABLE-0000000001 (stores: [])\\n\" +\n                 \"      --> KTABLE-MAPVALUES-0000000003\\n\" +\n                 \"      <-- KSTREAM-SOURCE-0000000000\\n\" +\n                 \"    Processor: KTABLE-MAPVALUES-0000000003 (stores: [store])\\n\" +\n                 \"      --> KTABLE-TOSTREAM-0000000004\\n\" +\n-                \"      <-- KSTREAM-TOTABLE-0000000002\\n\" +\n+                \"      <-- KSTREAM-TOTABLE-0000000001\\n\" +\n                 \"    Processor: KTABLE-TOSTREAM-0000000004 (stores: [])\\n\" +\n                 \"      --> KSTREAM-SINK-0000000005\\n\" +\n                 \"      <-- KTABLE-MAPVALUES-0000000003\\n\" +\n                 \"    Sink: KSTREAM-SINK-0000000005 (topic: output)\\n\" +\n                 \"      <-- KTABLE-TOSTREAM-0000000004\\n\\n\"));\n \n         try (\n-            final TopologyTestDriver driver = new TopologyTestDriver(\n-                topology,\n-                mkProperties(mkMap(\n-                    mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n-                    mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\"),\n-                    mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"kafka-test\").getAbsolutePath())\n-                )),\n-                Instant.ofEpochMilli(0L))) {\n+            final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n             final TestInputTopic<String, String> inputTopic =\n                 driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n             final TestOutputTopic<String, Integer> outputTopic =\n                 driver.createOutputTopic(output, Serdes.String().deserializer(), Serdes.Integer().deserializer());\n-            final KeyValueStore<String, String> store = driver.getKeyValueStore(storeName);\n+            final KeyValueStore<String, Integer> store = driver.getKeyValueStore(storeName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4OTcwMA==", "url": "https://github.com/apache/kafka/pull/8027#discussion_r376689700", "bodyText": "This looks better than what I did, go for it!\nMy original hotfix PR is just to unblock the JDK11 jenkins job.", "author": "guozhangwang", "createdAt": "2020-02-08T05:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxODQzNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "20fd108f36231de06fa0d94889d20c35e6efdb0c", "url": "https://github.com/apache/kafka/commit/20fd108f36231de06fa0d94889d20c35e6efdb0c", "message": "KAFKA-7658: Follow up to original PR\n\n- add more unit tests\n- fix bug for auto-repartitioning\n- some code cleanup", "committedDate": "2020-02-08T03:48:29Z", "type": "commit"}, {"oid": "a8b67dca4c103c39815e1da092437059033d8784", "url": "https://github.com/apache/kafka/commit/a8b67dca4c103c39815e1da092437059033d8784", "message": "Fix failing tests", "committedDate": "2020-02-08T03:48:29Z", "type": "commit"}, {"oid": "295398d006e707a60672b3898068cac2049a0f7f", "url": "https://github.com/apache/kafka/commit/295398d006e707a60672b3898068cac2049a0f7f", "message": "Partly revert HOTFIX (https://github.com/apache/kafka/pull/8063) that seems not to be the correct fix", "committedDate": "2020-02-08T03:57:20Z", "type": "commit"}, {"oid": "295398d006e707a60672b3898068cac2049a0f7f", "url": "https://github.com/apache/kafka/commit/295398d006e707a60672b3898068cac2049a0f7f", "message": "Partly revert HOTFIX (https://github.com/apache/kafka/pull/8063) that seems not to be the correct fix", "committedDate": "2020-02-08T03:57:20Z", "type": "forcePushed"}]}