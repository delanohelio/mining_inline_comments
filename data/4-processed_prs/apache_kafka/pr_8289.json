{"pr_number": 8289, "pr_title": "KAFKA-9712: Catch and handle exception thrown by reflections scanner", "pr_createdAt": "2020-03-12T21:48:59Z", "pr_url": "https://github.com/apache/kafka/pull/8289", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTQ4Nw==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391961487", "bodyText": "nit: plural (Reflections) seems more appropriate because it refers to the library/class.", "author": "kkonstantine", "createdAt": "2020-03-12T23:44:38Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java", "diffHunk": "@@ -339,9 +339,16 @@ private PluginScanResult scanPluginPath(\n             Class<T> klass,\n             ClassLoader loader\n     ) throws InstantiationException, IllegalAccessException {\n-        Set<Class<? extends T>> plugins = reflections.getSubTypesOf(klass);\n-\n         Collection<PluginDesc<T>> result = new ArrayList<>();\n+        Set<Class<? extends T>> plugins;\n+        try {\n+             plugins = reflections.getSubTypesOf(klass);\n+        } catch (ReflectionsException e) {\n+            log.debug(\"Reflection scanner could not find any classes for URLs {}\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjcyMA==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391962720", "bodyText": "result is unused in this code block. To be future proof, I'd suggest being explicit by returning an empty list here, and declare result right above the block that is being used at.", "author": "kkonstantine", "createdAt": "2020-03-12T23:49:16Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java", "diffHunk": "@@ -339,9 +339,16 @@ private PluginScanResult scanPluginPath(\n             Class<T> klass,\n             ClassLoader loader\n     ) throws InstantiationException, IllegalAccessException {\n-        Set<Class<? extends T>> plugins = reflections.getSubTypesOf(klass);\n-\n         Collection<PluginDesc<T>> result = new ArrayList<>();\n+        Set<Class<? extends T>> plugins;\n+        try {\n+             plugins = reflections.getSubTypesOf(klass);\n+        } catch (ReflectionsException e) {\n+            log.debug(\"Reflection scanner could not find any classes for URLs {}\",\n+                reflections.getConfiguration().getUrls());\n+            return result;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NTk2NQ==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391975965", "bodyText": "I was unsure if the returned Collection would be mutated somewhere and was leaning on the safe side to return mutable ArrayList matching previous behavior. It does seem like they are not mutated though and an immutable empty list should be fine.", "author": "ncliang", "createdAt": "2020-03-13T00:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTQ2Mw==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r392031463", "bodyText": "That's a good point too. But what I wanted to highlight is to be explicit and return the exact collection, that being Collections.emptyList() or new ArrayList() (the former should be fine as you noted), instead of returning what's stored in result (whose declaration is good to be close to the use as much as possible).\nThat's to guard against result being used earlier by code in the future. Improbable, but also doesn't hurt and it's a good practice IMO.", "author": "kkonstantine", "createdAt": "2020-03-13T05:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2Mjc2Ng==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391962766", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return result;\n          \n          \n            \n                        return Collections.emptyList();", "author": "kkonstantine", "createdAt": "2020-03-12T23:49:28Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java", "diffHunk": "@@ -339,9 +339,16 @@ private PluginScanResult scanPluginPath(\n             Class<T> klass,\n             ClassLoader loader\n     ) throws InstantiationException, IllegalAccessException {\n-        Set<Class<? extends T>> plugins = reflections.getSubTypesOf(klass);\n-\n         Collection<PluginDesc<T>> result = new ArrayList<>();\n+        Set<Class<? extends T>> plugins;\n+        try {\n+             plugins = reflections.getSubTypesOf(klass);\n+        } catch (ReflectionsException e) {\n+            log.debug(\"Reflection scanner could not find any classes for URLs {}\",\n+                reflections.getConfiguration().getUrls());\n+            return result;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2Mjg1MA==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391962850", "bodyText": "nit: extra blank line", "author": "kkonstantine", "createdAt": "2020-03-12T23:49:52Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoaderTest.java", "diffHunk": "@@ -17,15 +17,22 @@\n \n package org.apache.kafka.connect.runtime.isolation;\n \n-import java.util.Collections;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.util.Collections;\n \n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n public class DelegatingClassLoaderTest {\n \n+    @Rule\n+    public TemporaryFolder pluginPath = new TemporaryFolder();\n+\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MzI5MQ==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391963291", "bodyText": "Nice to have test cases. Are all the cases that we want to cover? Did also fail with an empty directory, or a directory that contained an unparsable file (not a jar, but let's say a text file). If so, it'd be nice to have tests for these edge cases too. In general, as inspiration we could use how /usr/share/java looks on typical linux installations.", "author": "kkonstantine", "createdAt": "2020-03-12T23:51:38Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoaderTest.java", "diffHunk": "@@ -61,4 +68,23 @@ public void testLoadingPluginClass() throws ClassNotFoundException {\n             assertNotNull(classLoader.pluginClassLoader(pluginClassName));\n         }\n     }\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MDcyMg==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391980722", "bodyText": "I have added more testcases to cover these scenarios.", "author": "ncliang", "createdAt": "2020-03-13T01:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MzI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MzgwMQ==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391963801", "bodyText": "what happens if there's a mixture of valid jars and unrelated files in the path that is scanned. Will we miss plugins residing in that path, by skipping early here?", "author": "kkonstantine", "createdAt": "2020-03-12T23:53:39Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java", "diffHunk": "@@ -339,9 +339,16 @@ private PluginScanResult scanPluginPath(\n             Class<T> klass,\n             ClassLoader loader\n     ) throws InstantiationException, IllegalAccessException {\n-        Set<Class<? extends T>> plugins = reflections.getSubTypesOf(klass);\n-\n         Collection<PluginDesc<T>> result = new ArrayList<>();\n+        Set<Class<? extends T>> plugins;\n+        try {\n+             plugins = reflections.getSubTypesOf(klass);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NTAwNA==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r391975004", "bodyText": "In my tests, this scenario did not trigger the bug. It would only trigger when none of the files scanned contained a class. I can add a testcase for this.", "author": "ncliang", "createdAt": "2020-03-13T00:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MzgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMjAzMw==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r393102033", "bodyText": "@ncliang checkstyle fails because there's an extra single white space here:\n[ant:checkstyle] [ERROR] /home/jenkins/jenkins-slave/workspace/kafka-pr-jdk11-scala2.13/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java:345: 'try' child has incorrect indentation level 13, expected level should be 12. [Indentation]", "author": "kkonstantine", "createdAt": "2020-03-16T15:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MzgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjExNA==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r392036114", "bodyText": "Great tests.\nI'd suggest using nio (Files.copy and Paths), rather than bringing in the dependency in the org.codehaus.plexus util, that is available now, but is not listed explicitly in the project dependencies. For simple things like these it's almost always better to use standard java library stuff in tests.", "author": "kkonstantine", "createdAt": "2020-03-13T05:26:02Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoaderTest.java", "diffHunk": "@@ -61,4 +69,59 @@ public void testLoadingPluginClass() throws ClassNotFoundException {\n             assertNotNull(classLoader.pluginClassLoader(pluginClassName));\n         }\n     }\n+\n+    @Test\n+    public void testLoadingInvalidUberJar() throws Exception {\n+        pluginPath.newFile(\"invalid.jar\");\n+\n+        DelegatingClassLoader classLoader = new DelegatingClassLoader(\n+            Collections.singletonList(pluginPath.getRoot().getAbsolutePath()));\n+        classLoader.initLoaders();\n+    }\n+\n+    @Test\n+    public void testLoadingPluginDirContainsInvalidJarsOnly() throws Exception {\n+        pluginPath.newFolder(\"my-plugin\");\n+        pluginPath.newFile(\"my-plugin/invalid.jar\");\n+\n+        DelegatingClassLoader classLoader = new DelegatingClassLoader(\n+            Collections.singletonList(pluginPath.getRoot().getAbsolutePath()));\n+        classLoader.initLoaders();\n+    }\n+\n+    @Test\n+    public void testLoadingNoPlugins() throws Exception {\n+        DelegatingClassLoader classLoader = new DelegatingClassLoader(\n+            Collections.singletonList(pluginPath.getRoot().getAbsolutePath()));\n+        classLoader.initLoaders();\n+    }\n+\n+    @Test\n+    public void testLoadingPluginDirEmpty() throws Exception {\n+        pluginPath.newFolder(\"my-plugin\");\n+\n+        DelegatingClassLoader classLoader = new DelegatingClassLoader(\n+            Collections.singletonList(pluginPath.getRoot().getAbsolutePath()));\n+        classLoader.initLoaders();\n+    }\n+\n+    @Test\n+    public void testLoadingMixOfValidAndInvalidPlugins() throws Exception {\n+        TestPlugins.assertAvailable();\n+\n+        pluginPath.newFile(\"invalid.jar\");\n+        pluginPath.newFolder(\"my-plugin\");\n+        pluginPath.newFile(\"my-plugin/invalid.jar\");\n+        for (String fullPath : TestPlugins.pluginPath()) {\n+            FileUtils.copyFileToDirectory(new File(fullPath), pluginPath.getRoot());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA2MjQ2Mw==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r392062463", "bodyText": "Good point. And, in fact, the import is disallowed. noice.\nDelegatingClassLoaderTest.java:20:1: Disallowed import - org.codehaus.plexus.util.FileUtils. [ImportControl]", "author": "ncliang", "createdAt": "2020-03-13T07:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY3MzgyOQ==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r392673829", "bodyText": "Could it print the origin exception also? log.debug(\"xx\", e)", "author": "chia7712", "createdAt": "2020-03-15T13:27:09Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java", "diffHunk": "@@ -339,8 +340,15 @@ private PluginScanResult scanPluginPath(\n             Class<T> klass,\n             ClassLoader loader\n     ) throws InstantiationException, IllegalAccessException {\n-        Set<Class<? extends T>> plugins = reflections.getSubTypesOf(klass);\n-\n+        Set<Class<? extends T>> plugins;\n+        try {\n+             plugins = reflections.getSubTypesOf(klass);\n+        } catch (ReflectionsException e) {\n+            log.debug(\"Reflections scanner could not find any classes for URLs {}\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5Njk0MQ==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r392696941", "bodyText": "Good idea. Done.", "author": "ncliang", "createdAt": "2020-03-15T17:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY3MzgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMjMwOQ==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r393102309", "bodyText": "a tab is missing here for alignment too.", "author": "kkonstantine", "createdAt": "2020-03-16T15:18:19Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java", "diffHunk": "@@ -339,8 +340,15 @@ private PluginScanResult scanPluginPath(\n             Class<T> klass,\n             ClassLoader loader\n     ) throws InstantiationException, IllegalAccessException {\n-        Set<Class<? extends T>> plugins = reflections.getSubTypesOf(klass);\n-\n+        Set<Class<? extends T>> plugins;\n+        try {\n+             plugins = reflections.getSubTypesOf(klass);\n+        } catch (ReflectionsException e) {\n+            log.debug(\"Reflections scanner could not find any classes for URLs: \" +\n+                reflections.getConfiguration().getUrls(), e);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMjk1NQ==", "url": "https://github.com/apache/kafka/pull/8289#discussion_r393102955", "bodyText": "nit: probably checkstyle won't catch this, but if you format the block, there's an extra tab that you can remove here too.", "author": "kkonstantine", "createdAt": "2020-03-16T15:19:12Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java", "diffHunk": "@@ -339,8 +340,15 @@ private PluginScanResult scanPluginPath(\n             Class<T> klass,\n             ClassLoader loader\n     ) throws InstantiationException, IllegalAccessException {\n-        Set<Class<? extends T>> plugins = reflections.getSubTypesOf(klass);\n-\n+        Set<Class<? extends T>> plugins;\n+        try {\n+             plugins = reflections.getSubTypesOf(klass);\n+        } catch (ReflectionsException e) {\n+            log.debug(\"Reflections scanner could not find any classes for URLs: \" +\n+                reflections.getConfiguration().getUrls(), e);\n+            return Collections.emptyList();\n+        }\n+        ", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "953074dba8365e1b3ffe912478d14d1f2070e61a", "url": "https://github.com/apache/kafka/commit/953074dba8365e1b3ffe912478d14d1f2070e61a", "message": "KAFKA-9712: Catch and handle exception thrown by reflections scanner", "committedDate": "2020-03-16T16:00:33Z", "type": "commit"}, {"oid": "fd6d921622de9199878359ef6d5fc48765edcd21", "url": "https://github.com/apache/kafka/commit/fd6d921622de9199878359ef6d5fc48765edcd21", "message": "Update connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/DelegatingClassLoader.java\n\nCo-Authored-By: Konstantine Karantasis <konstantine@confluent.io>", "committedDate": "2020-03-16T16:00:33Z", "type": "commit"}, {"oid": "073b7316e329be20e53c83609182f75e8a4c56d0", "url": "https://github.com/apache/kafka/commit/073b7316e329be20e53c83609182f75e8a4c56d0", "message": "Address review comments", "committedDate": "2020-03-16T16:00:33Z", "type": "commit"}, {"oid": "7e3ab577139fa6309dc46234c13fd8e8e91b3a79", "url": "https://github.com/apache/kafka/commit/7e3ab577139fa6309dc46234c13fd8e8e91b3a79", "message": "Move result initialization back to right before it is used", "committedDate": "2020-03-16T16:00:33Z", "type": "commit"}, {"oid": "8b486a57101481e741293f58a2b563d6a276eb4e", "url": "https://github.com/apache/kafka/commit/8b486a57101481e741293f58a2b563d6a276eb4e", "message": "Use `java.io.File` in tests", "committedDate": "2020-03-16T16:00:33Z", "type": "commit"}, {"oid": "579dbab1edfc3f340b0f6b1a7a445a4c0b977bba", "url": "https://github.com/apache/kafka/commit/579dbab1edfc3f340b0f6b1a7a445a4c0b977bba", "message": "review comment", "committedDate": "2020-03-16T16:00:33Z", "type": "commit"}, {"oid": "342fea1e72218c0b19a8b79b30013cf40f0bdb90", "url": "https://github.com/apache/kafka/commit/342fea1e72218c0b19a8b79b30013cf40f0bdb90", "message": "Fix checkstyle", "committedDate": "2020-03-16T16:00:33Z", "type": "commit"}, {"oid": "342fea1e72218c0b19a8b79b30013cf40f0bdb90", "url": "https://github.com/apache/kafka/commit/342fea1e72218c0b19a8b79b30013cf40f0bdb90", "message": "Fix checkstyle", "committedDate": "2020-03-16T16:00:33Z", "type": "forcePushed"}]}