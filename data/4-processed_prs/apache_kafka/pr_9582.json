{"pr_number": 9582, "pr_title": "KAFKA-6687: rewrite topology to allow reading the same topic multiple times in the DSL", "pr_createdAt": "2020-11-10T04:29:23Z", "pr_url": "https://github.com/apache/kafka/pull/9582", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1OTI4OA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r520959288", "bodyText": "Saw this and at first I thought it was broken because it only considers pattern-subscribed topics that happened to explicitly configure an offset reset policy. Unless I'm missing something here, that makes no sense and we should consider all  source patterns and whether they overlap.\nBut then I started thinking, why does it matter if they overlap? Just because one pattern is a substring of another does not mean that they'll match the same topics. So I think that we should actually just remove this restriction altogether. Am I missing anything here?", "author": "ableegoldman", "createdAt": "2020-11-11T00:25:06Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -410,18 +410,6 @@ public final void addSource(final Topology.AutoOffsetReset offsetReset,\n             }\n         }\n \n-        for (final Pattern otherPattern : earliestResetPatterns) {\n-            if (topicPattern.pattern().contains(otherPattern.pattern()) || otherPattern.pattern().contains(topicPattern.pattern())) {\n-                throw new TopologyException(\"Pattern \" + topicPattern + \" will overlap with another pattern \" + otherPattern + \" already been registered by another source\");\n-            }\n-        }\n-\n-        for (final Pattern otherPattern : latestResetPatterns) {\n-            if (topicPattern.pattern().contains(otherPattern.pattern()) || otherPattern.pattern().contains(topicPattern.pattern())) {\n-                throw new TopologyException(\"Pattern \" + topicPattern + \" will overlap with another pattern \" + otherPattern + \" already been registered by another source\");\n-            }\n-        }\n-", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNDkyMA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522104920", "bodyText": "I agree on the first part.\nRegarding the second part, I had similiar thoughts when I wrote my comment in mergeDuplicateSourceNodes().\nBut I might also be missing something here.", "author": "cadonna", "createdAt": "2020-11-12T13:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1OTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDMxOA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r523044318", "bodyText": "I might also be missing something, but what's the scenario where one pattern is a substring of another and they dont match the same topics? If you take Bruno's example from earlier of topic* and topi*, topi* would be considered a substring of topic* and they would both match topic A, right? I guess the other scenario is if we have a topic topia A, that would match topi* and not topic*. So I guess it seems like it isn't always true that they'll overlap, but we would want to check if they do, right?", "author": "lct45", "createdAt": "2020-11-13T16:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1OTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA2MTY5Ng==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r523061696", "bodyText": "Pattern topic* is contained in pattern topic*A. However, topic*A matches only a subset of topic*. So, they do not match exactly the same topics. But matching exactly the same topics is a pre-requisite for merging the source nodes.", "author": "cadonna", "createdAt": "2020-11-13T16:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1OTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE3NTcwMw==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r523175703", "bodyText": "I think in this case we were matching whether the pattern's string was a literal substring of another pattern's string, not whether the regexes themselves are substrings. So topi* would not be a substring of topic* because topi* is not contained literally within the string topic*. It's not doing a smart regex-matching, just a dumb  literal string comparison", "author": "ableegoldman", "createdAt": "2020-11-13T19:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1OTI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4MzAzOQ==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r521983039", "bodyText": "Could you please add a try-catch clause to better document the test?\nFor example:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldAllowReadingFromSameTopic() {\n          \n          \n            \n                    builder.stream(\"topic\");\n          \n          \n            \n                    builder.stream(\"topic\");\n          \n          \n            \n                    builder.build();\n          \n          \n            \n                }\n          \n          \n            \n                public void shouldAllowReadingFromSameTopic() {\n          \n          \n            \n                    builder.stream(\"topic\");\n          \n          \n            \n                    builder.stream(\"topic\");\n          \n          \n            \n                    \n          \n          \n            \n                    try {\n          \n          \n            \n                        builder.build();\n          \n          \n            \n                    } catch (final TopologyException topologyException) {\n          \n          \n            \n                        fail(\"TopologyException not expected\");\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nThis applies also to the other tests.", "author": "cadonna", "createdAt": "2020-11-12T10:02:49Z", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -895,6 +898,55 @@ public void shouldUseSpecifiedNameForAggregateOperationGivenTable() {\n             STREAM_OPERATION_NAME);\n     }\n \n+    @Test\n+    public void shouldAllowReadingFromSameTopic() {\n+        builder.stream(\"topic\");\n+        builder.stream(\"topic\");\n+        builder.build();\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTIwOQ==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522001209", "bodyText": "We could avoid the instanceof and the casting if we introduce a RootGraphNode with a method sourceNodes(). Since a root can only have source nodes and state stores as children, we could make the topology code in general a bit more type safe. As far as I can see that would need some additional changes outside the scope of this PR. So, feel free to not consider this comment for this PR and we can do another PR for that.", "author": "cadonna", "createdAt": "2020-11-12T10:30:57Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -314,6 +317,50 @@ public void buildAndOptimizeTopology(final Properties props) {\n         internalTopologyBuilder.validateCopartition();\n     }\n \n+    private void mergeDuplicateSourceNodes() {\n+        final Map<String, StreamSourceNode<?, ?>> topicsToSourceNodes = new HashMap<>();\n+\n+        // We don't really care about the order here, but since Pattern does not implement equals() we can't rely on\n+        // a regular HashMap and containsKey(Pattern). But for our purposes it's sufficient to compare the compiled\n+        // string and flags to determine if two pattern subscriptions can be merged into a single source node\n+        final Map<Pattern, StreamSourceNode<?, ?>> patternsToSourceNodes =\n+            new TreeMap<>(Comparator.comparing(Pattern::pattern).thenComparing(Pattern::flags));\n+\n+        for (final StreamsGraphNode graphNode : root.children()) {\n+            if (graphNode instanceof StreamSourceNode) {\n+                final StreamSourceNode<?, ?> currentSourceNode = (StreamSourceNode<?, ?>) graphNode;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNTA2OA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522525068", "bodyText": "Yeah I think that's a fair point but I would prefer to keep the scope of this PR as small as possible for now. Maybe @lct45 could pick this up on the side once this is merged?", "author": "ableegoldman", "createdAt": "2020-11-13T00:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwNjg1NQ==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r523006855", "bodyText": "SGTM", "author": "lct45", "createdAt": "2020-11-13T15:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzk0Mg==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522027942", "bodyText": "Just to be clear. This improves the situation but it is not a complete solution, right? Assume we have a topic topicA. Patterns topic* and topi* both  match topicA but they are different when compared with this comparator. In that case a TopologyException would be thrown in the InternalTopologyBuilder, right?", "author": "cadonna", "createdAt": "2020-11-12T11:14:37Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -314,6 +317,50 @@ public void buildAndOptimizeTopology(final Properties props) {\n         internalTopologyBuilder.validateCopartition();\n     }\n \n+    private void mergeDuplicateSourceNodes() {\n+        final Map<String, StreamSourceNode<?, ?>> topicsToSourceNodes = new HashMap<>();\n+\n+        // We don't really care about the order here, but since Pattern does not implement equals() we can't rely on\n+        // a regular HashMap and containsKey(Pattern). But for our purposes it's sufficient to compare the compiled\n+        // string and flags to determine if two pattern subscriptions can be merged into a single source node\n+        final Map<Pattern, StreamSourceNode<?, ?>> patternsToSourceNodes =\n+            new TreeMap<>(Comparator.comparing(Pattern::pattern).thenComparing(Pattern::flags));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0OTY4NQ==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522549685", "bodyText": "Yes to all of that: this PR improves some situations, but not all. Specifically you would still get a TopologyException if  (a) subscribing to overlapping but not equal collection of topics, (b) subscribing to a topic and to a pattern that matches said topic, and (c) subscribing to two (or more) patterns that match the same topic(s).\nCase (c) is what you described, I just wanted to list them all here for completion. Here's my take on what we can/should reasonably try to tackle:\n(a) this case is easily detected, easily worked around, and easy for us to fix. It results in a \"compile time\" exception (meaning when the topology is compiled, not the program) which users can quickly detect and work around if need be by rewriting the topology themselves. Fix is relatively straightforward but very low priority, so I plan to just file a followup ticket for this for now\n(b) is easily detected (you get a compile time exception) and possible to work around, but difficult to solve. I think in all cases a user could find a way around this issue by some combination of topology rewriting and Pattern manipulation or topic renaming, depending on what exactly they're trying to achieve. Of course there's no way for us to detect what an arbitrary user is trying to do in this case, so I don't see any path forwarding to making this case possible. No plans to file a followup ticket\n(c) is difficult to detect, might be possible to work around, and probably very complicated to actually fix. Unfortunately, in this case you only get a run-time exception, since there's no way of knowing which topics will or will not be created ahead of time. And I'm thinking that determining whether two regexes will both match any possible string may be unsolvable...so, no followup ticket planned for this.\nWDYT?", "author": "ableegoldman", "createdAt": "2020-11-13T01:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3NTQzNA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522775434", "bodyText": "Thank you for the list of issues. I agree in all points.", "author": "cadonna", "createdAt": "2020-11-13T08:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NTEzOA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522095138", "bodyText": "Do we really need this comment and the comment on line 81. We get the same information when we navigate to the call and to the implementation of the methods with the difference that comments can start to be outdated without us noticing it.", "author": "cadonna", "createdAt": "2020-11-12T13:12:56Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamSourceNode.java", "diffHunk": "@@ -71,6 +78,21 @@ public Pattern topicPattern() {\n         return consumedInternal.valueSerde();\n     }\n \n+    // We \"merge\" source nodes into a single node under the hood if a user tries to read in a source topic multiple times\n+    public void merge(final StreamSourceNode<?, ?> other) {\n+        final AutoOffsetReset resetPolicy = consumedInternal.offsetResetPolicy();\n+        if (resetPolicy != null && !resetPolicy.equals(other.consumedInternal().offsetResetPolicy())) {\n+            log.error(\"Tried to merge source nodes {} and {} which are subscribed to the same topic/pattern, but \"\n+                          + \"the offset reset policies do not match\", this, other);\n+            throw new TopologyException(\"Can't configure different offset reset policies on the same input topic(s)\");\n+        }\n+        for (final StreamsGraphNode otherChild : other.children()) {\n+            // Move children from other to this, these calls take care of resetting the child's parents to this", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MTgwMw==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522381803", "bodyText": "I'll remove it", "author": "ableegoldman", "createdAt": "2020-11-12T19:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwNjA0Mg==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522106042", "bodyText": "Please use a collection with at least two topics to test the loop over the collections.", "author": "cadonna", "createdAt": "2020-11-12T13:30:37Z", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -895,6 +898,55 @@ public void shouldUseSpecifiedNameForAggregateOperationGivenTable() {\n             STREAM_OPERATION_NAME);\n     }\n \n+    @Test\n+    public void shouldAllowReadingFromSameTopic() {\n+        builder.stream(\"topic\");\n+        builder.stream(\"topic\");\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldAllowSubscribingToSamePattern() {\n+        builder.stream(Pattern.compile(\"some-regex\"));\n+        builder.stream(Pattern.compile(\"some-regex\"));\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldAllowReadingFromSameCollectionOfTopics() {\n+        builder.stream(Collections.singletonList(\"topic\"));\n+        builder.stream(Collections.singletonList(\"topic\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwODA0Nw==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522108047", "bodyText": "What should happen if this reset policy is null and the other is not null? I guess we should also throw in that case, don't we?", "author": "cadonna", "createdAt": "2020-11-12T13:33:55Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamSourceNode.java", "diffHunk": "@@ -71,6 +78,21 @@ public Pattern topicPattern() {\n         return consumedInternal.valueSerde();\n     }\n \n+    // We \"merge\" source nodes into a single node under the hood if a user tries to read in a source topic multiple times\n+    public void merge(final StreamSourceNode<?, ?> other) {\n+        final AutoOffsetReset resetPolicy = consumedInternal.offsetResetPolicy();\n+        if (resetPolicy != null && !resetPolicy.equals(other.consumedInternal().offsetResetPolicy())) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4NDY5MA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522384690", "bodyText": "Ack, good catch", "author": "ableegoldman", "createdAt": "2020-11-12T19:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwODA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwOTkxNg==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522109916", "bodyText": "What should happen in this case? See also my comment in merge().\n    @Test\n    public void shouldThrowWhenSubscribedToATopicWithSetAndUnsetResetPolicies() {\n        builder.stream(\"topic\");\n        builder.stream(\"topic\", Consumed.with(AutoOffsetReset.EARLIEST));\n        assertThrows(TopologyException.class, builder::build);\n    }", "author": "cadonna", "createdAt": "2020-11-12T13:36:53Z", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -895,6 +898,55 @@ public void shouldUseSpecifiedNameForAggregateOperationGivenTable() {\n             STREAM_OPERATION_NAME);\n     }\n \n+    @Test\n+    public void shouldAllowReadingFromSameTopic() {\n+        builder.stream(\"topic\");\n+        builder.stream(\"topic\");\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldAllowSubscribingToSamePattern() {\n+        builder.stream(Pattern.compile(\"some-regex\"));\n+        builder.stream(Pattern.compile(\"some-regex\"));\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldAllowReadingFromSameCollectionOfTopics() {\n+        builder.stream(Collections.singletonList(\"topic\"));\n+        builder.stream(Collections.singletonList(\"topic\"));\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldNotAllowReadingFromOverlappingAndUnequalCollectionOfTopics() {\n+        builder.stream(Collections.singletonList(\"topic\"));\n+        builder.stream(asList(\"topic\", \"anotherTopic\"));\n+        assertThrows(TopologyException.class, builder::build);\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenSubscribedToATopicWithDifferentResetPolicies() {\n+        builder.stream(\"topic\", Consumed.with(AutoOffsetReset.EARLIEST));\n+        builder.stream(\"topic\", Consumed.with(AutoOffsetReset.LATEST));\n+        assertThrows(TopologyException.class, builder::build);\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenSubscribedToATopicWithSetAndUnsetResetPolicies() {\n+        builder.stream(\"topic\", Consumed.with(AutoOffsetReset.EARLIEST));\n+        builder.stream(\"topic\");\n+        assertThrows(TopologyException.class, builder::build);\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3NjM4Mg==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522476382", "bodyText": "Yep that was just an oversight in the condition in merge(). I fixed that and added another unit test for the case", "author": "ableegoldman", "createdAt": "2020-11-12T22:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwOTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExMTk4NA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522111984", "bodyText": "Could you also add a test with two patterns with the same string but one with a set reset policy and one with unset reset policy like you did for the non-pattern case. Just to make it clear it should also throw in that case.", "author": "cadonna", "createdAt": "2020-11-12T13:40:10Z", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -895,6 +898,55 @@ public void shouldUseSpecifiedNameForAggregateOperationGivenTable() {\n             STREAM_OPERATION_NAME);\n     }\n \n+    @Test\n+    public void shouldAllowReadingFromSameTopic() {\n+        builder.stream(\"topic\");\n+        builder.stream(\"topic\");\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldAllowSubscribingToSamePattern() {\n+        builder.stream(Pattern.compile(\"some-regex\"));\n+        builder.stream(Pattern.compile(\"some-regex\"));\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldAllowReadingFromSameCollectionOfTopics() {\n+        builder.stream(Collections.singletonList(\"topic\"));\n+        builder.stream(Collections.singletonList(\"topic\"));\n+        builder.build();\n+    }\n+\n+    @Test\n+    public void shouldNotAllowReadingFromOverlappingAndUnequalCollectionOfTopics() {\n+        builder.stream(Collections.singletonList(\"topic\"));\n+        builder.stream(asList(\"topic\", \"anotherTopic\"));\n+        assertThrows(TopologyException.class, builder::build);\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenSubscribedToATopicWithDifferentResetPolicies() {\n+        builder.stream(\"topic\", Consumed.with(AutoOffsetReset.EARLIEST));\n+        builder.stream(\"topic\", Consumed.with(AutoOffsetReset.LATEST));\n+        assertThrows(TopologyException.class, builder::build);\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenSubscribedToATopicWithSetAndUnsetResetPolicies() {\n+        builder.stream(\"topic\", Consumed.with(AutoOffsetReset.EARLIEST));\n+        builder.stream(\"topic\");\n+        assertThrows(TopologyException.class, builder::build);\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenSubscribedToAPatternWithDifferentResetPolicies() {\n+        builder.stream(Pattern.compile(\"some-regex\"), Consumed.with(AutoOffsetReset.EARLIEST));\n+        builder.stream(Pattern.compile(\"some-regex\"), Consumed.with(AutoOffsetReset.LATEST));\n+        assertThrows(TopologyException.class, builder::build);\n+    }\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3ODAxMA==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522778010", "bodyText": "I would also remove this comment.", "author": "cadonna", "createdAt": "2020-11-13T08:16:33Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamSourceNode.java", "diffHunk": "@@ -71,6 +78,22 @@ public Pattern topicPattern() {\n         return consumedInternal.valueSerde();\n     }\n \n+    // We \"merge\" source nodes into a single node under the hood if a user tries to read in a source topic multiple times", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc4MjI5OQ==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r522782299", "bodyText": "Could you please extract this part in its own method since we use it also in a couple of other tests?", "author": "cadonna", "createdAt": "2020-11-13T08:20:41Z", "path": "streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java", "diffHunk": "@@ -895,6 +899,103 @@ public void shouldUseSpecifiedNameForAggregateOperationGivenTable() {\n             STREAM_OPERATION_NAME);\n     }\n \n+    @Test\n+    public void shouldAllowStreamsFromSameTopic() {\n+        builder.stream(\"topic\");\n+        builder.stream(\"topic\");\n+        try {\n+            builder.build();\n+        } catch (final TopologyException topologyException) {\n+            fail(\"TopologyException not expected\");\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cade4f52f7ac487ac7e84b3e4babdfed4deac91a", "url": "https://github.com/apache/kafka/commit/cade4f52f7ac487ac7e84b3e4babdfed4deac91a", "message": "merge source nodes and remove duplicates", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "cf3d911f4eb17511a5594fccfea2f4ab94ed051f", "url": "https://github.com/apache/kafka/commit/cf3d911f4eb17511a5594fccfea2f4ab94ed051f", "message": "improve error message", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "603eb0527579d7c08e2f57a9cd27a6cab4ddaf1d", "url": "https://github.com/apache/kafka/commit/603eb0527579d7c08e2f57a9cd27a6cab4ddaf1d", "message": "tests and minor fixes", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "ac03bddcf15468f5f7026e1dec6fae9b796eada1", "url": "https://github.com/apache/kafka/commit/ac03bddcf15468f5f7026e1dec6fae9b796eada1", "message": "fix Pattern subscription", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "9483ae9aef4bb2b0627d14003a9f4145617b8008", "url": "https://github.com/apache/kafka/commit/9483ae9aef4bb2b0627d14003a9f4145617b8008", "message": "simplify", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "7eaa50be9d8a08405308207cab1390a909cbc4fa", "url": "https://github.com/apache/kafka/commit/7eaa50be9d8a08405308207cab1390a909cbc4fa", "message": "more unit test coverage", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "3ad0fb057089039874b72aa62d772bebf49e24a6", "url": "https://github.com/apache/kafka/commit/3ad0fb057089039874b72aa62d772bebf49e24a6", "message": "unused import", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "70a9cb690011eba3112866d0a6cc86b366ec0ef5", "url": "https://github.com/apache/kafka/commit/70a9cb690011eba3112866d0a6cc86b366ec0ef5", "message": "remove weird regex check and fix letter in test exception", "committedDate": "2020-11-13T19:12:50Z", "type": "commit"}, {"oid": "cf32d6925b2ad8506179c2694595067cc26e1b43", "url": "https://github.com/apache/kafka/commit/cf32d6925b2ad8506179c2694595067cc26e1b43", "message": "review feedback", "committedDate": "2020-11-13T19:28:33Z", "type": "commit"}, {"oid": "cf32d6925b2ad8506179c2694595067cc26e1b43", "url": "https://github.com/apache/kafka/commit/cf32d6925b2ad8506179c2694595067cc26e1b43", "message": "review feedback", "committedDate": "2020-11-13T19:28:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4MzgyMQ==", "url": "https://github.com/apache/kafka/pull/9582#discussion_r523183821", "bodyText": "Filed https://issues.apache.org/jira/browse/KAFKA-10721", "author": "ableegoldman", "createdAt": "2020-11-13T19:41:52Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java", "diffHunk": "@@ -314,6 +317,50 @@ public void buildAndOptimizeTopology(final Properties props) {\n         internalTopologyBuilder.validateCopartition();\n     }\n \n+    private void mergeDuplicateSourceNodes() {\n+        final Map<String, StreamSourceNode<?, ?>> topicsToSourceNodes = new HashMap<>();\n+\n+        // We don't really care about the order here, but since Pattern does not implement equals() we can't rely on\n+        // a regular HashMap and containsKey(Pattern). But for our purposes it's sufficient to compare the compiled\n+        // string and flags to determine if two pattern subscriptions can be merged into a single source node\n+        final Map<Pattern, StreamSourceNode<?, ?>> patternsToSourceNodes =\n+            new TreeMap<>(Comparator.comparing(Pattern::pattern).thenComparing(Pattern::flags));\n+\n+        for (final StreamsGraphNode graphNode : root.children()) {\n+            if (graphNode instanceof StreamSourceNode) {\n+                final StreamSourceNode<?, ?> currentSourceNode = (StreamSourceNode<?, ?>) graphNode;\n+\n+                if (currentSourceNode.topicPattern() != null) {\n+                    if (!patternsToSourceNodes.containsKey(currentSourceNode.topicPattern())) {\n+                        patternsToSourceNodes.put(currentSourceNode.topicPattern(), currentSourceNode);\n+                    } else {\n+                        final StreamSourceNode<?, ?> mainSourceNode = patternsToSourceNodes.get(currentSourceNode.topicPattern());\n+                        mainSourceNode.merge(currentSourceNode);\n+                        root.removeChild(graphNode);\n+                    }\n+                } else {\n+                    for (final String topic : currentSourceNode.topicNames()) {\n+                        if (!topicsToSourceNodes.containsKey(topic)) {\n+                            topicsToSourceNodes.put(topic, currentSourceNode);\n+                        } else {\n+                            final StreamSourceNode<?, ?> mainSourceNode = topicsToSourceNodes.get(topic);\n+                            // TODO we only merge source nodes if the subscribed topic(s) are an exact match, so it's still not\n+                            // possible to subscribe to topicA in one KStream and topicA + topicB in another. We could achieve\n+                            // this by splitting these source nodes into one topic per node and routing to the subscribed children", "originalCommit": "cf32d6925b2ad8506179c2694595067cc26e1b43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}