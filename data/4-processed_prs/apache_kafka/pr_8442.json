{"pr_number": 8442, "pr_title": "KAFKA-9830: Implement AutoCloseable in ErrorReporter and subclasses", "pr_createdAt": "2020-04-08T00:17:59Z", "pr_url": "https://github.com/apache/kafka/pull/8442", "timeline": [{"oid": "a10cd9cc44915648c09fbda322c386161821953b", "url": "https://github.com/apache/kafka/commit/a10cd9cc44915648c09fbda322c386161821953b", "message": "KAFKA-9830: Implement AutoCloseable in ErrorReporter and subclasses\n\n* The DeadLetterQueueReporter has a KafkaProducer that it must close to clean up resources\n* Currently, the producer and it's threads are leaked every time a task is stopped\n* Responsibility for cleaning up ErrorReporters is transitively assigned to the\n    ProcessingContext, RetryWithToleranceOperator, and WorkerSinkTask/WorkerSinkTask classes\n* One new unit test in ErrorReporterTest asserts that the producer is closed by the dlq reporter\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-04-08T00:12:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4OTYwMA==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405189600", "bodyText": "want to add this as a default implementation in the ErrorReporter interface?", "author": "wicknicks", "createdAt": "2020-04-08T00:25:28Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/LogReporter.java", "diffHunk": "@@ -69,4 +69,7 @@ String message(ProcessingContext context) {\n                 context.toString(connConfig.includeRecordDetailsInErrorLog()));\n     }\n \n+    @Override\n+    public void close() {", "originalCommit": "a10cd9cc44915648c09fbda322c386161821953b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjU0OA==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405192548", "bodyText": "It might save us a few LOC if we added a default implementation but I kind of like the guarantee that any new implementation of the ErrorReporter interface would have to explicitly add a close method since it might help prevent resource leaks similar to the ones that warranted these changes in the future. And it's not public API, so we don't have to worry about breaking compatibility by adding a new method with no default implementation.", "author": "C0urante", "createdAt": "2020-04-08T00:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4OTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NTE5NA==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405195194", "bodyText": "I'll revert this to reduce the number of files changed and preserve backwards compatibility, but I would be fine with either strategy.\nWhen implementing this method for the LogReporter, I did for a moment have to scan the file and consider what resources might need to be cleaned up. I appreciate that the non-default method forced me to do that, and when/if another ErrorReporter subclass is written, I think it will be helpful too.", "author": "gharris1727", "createdAt": "2020-04-08T00:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4OTYwMA=="}], "type": "inlineReview"}, {"oid": "60bd1d43655ff7127f4e7c18ee884d53dfc7605c", "url": "https://github.com/apache/kafka/commit/60bd1d43655ff7127f4e7c18ee884d53dfc7605c", "message": "Make no-op close a default method in ErrorReporter for backwards-compatibility\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-04-08T00:38:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzc5OA==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405193798", "bodyText": "If I read this correctly, the guarantee here is that if a DLQ reporter is closed, its internal Kafka producer will also be closed.\nDo you think it would also make sense to add a test to ensure that when a WorkerSinkTask and WorkerSourceTask  are shut down, and/or a RetryWithToleranceOperator is closed, the underlying ErrorReporter instances are closed as well?", "author": "C0urante", "createdAt": "2020-04-08T00:40:24Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/errors/ErrorReporterTest.java", "diffHunk": "@@ -146,6 +146,20 @@ public void testReportDLQTwice() {\n         PowerMock.verifyAll();\n     }\n \n+    @Test\n+    public void testCloseDLQ() {", "originalCommit": "a10cd9cc44915648c09fbda322c386161821953b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDM3Ng==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405204376", "bodyText": "I found ErrorHandlingTaskTest that seemed to be doing similar testing, and I managed to test the rest of the hierarchy (WorkerSourceTask/WorkerSinkTask -> RetryWithToleranceOperator -> ProcessingContext -> ErrorReporter) in just two tests.\nCombined with the DLQ reporter -> KafkaProducer test from the first commit, I think the testing is adequate now.", "author": "gharris1727", "createdAt": "2020-04-08T01:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNTAxMg==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405205012", "bodyText": "Agreed, looks great!", "author": "C0urante", "createdAt": "2020-04-08T01:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzc5OA=="}], "type": "inlineReview"}, {"oid": "9973816a0e52b7bc0f4d619c1f8e326a5807bdfc", "url": "https://github.com/apache/kafka/commit/9973816a0e52b7bc0f4d619c1f8e326a5807bdfc", "message": "Add test that WorkerSourceTask/WorkerSinkTask close ErrorReporters on task stop.\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-04-08T01:16:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MDM1Mg==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405360352", "bodyText": "The exception caused by reporter will break this loop. Should we keep the exception and then throw it after all reporters are closed?", "author": "chia7712", "createdAt": "2020-04-08T08:48:22Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +216,10 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() throws Exception {\n+        for (ErrorReporter reporter : reporters) {\n+            reporter.close();", "originalCommit": "9973816a0e52b7bc0f4d619c1f8e326a5807bdfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2NzIwOQ==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405667209", "bodyText": "Yes, thanks for catching this oversight. I've added logic to suppress the exceptions from each of the reporters, but i'm not sure if that's the idiomatic way to combine multiple exceptions. I've also added a test to verify that this error collection behavior is present.", "author": "gharris1727", "createdAt": "2020-04-08T16:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MDM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MTg0Mw==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405361843", "bodyText": "Is Exception in method signature necessary? the method signature of ErrorReporter#close don't include checked exception.", "author": "chia7712", "createdAt": "2020-04-08T08:50:40Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +216,10 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() throws Exception {", "originalCommit": "9973816a0e52b7bc0f4d619c1f8e326a5807bdfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTQwOA==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r405649408", "bodyText": "You're right, i've removed the throws annotation here and above. Thanks!", "author": "gharris1727", "createdAt": "2020-04-08T16:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MTg0Mw=="}], "type": "inlineReview"}, {"oid": "5173af7c0bab92a5aca8ec593eb5e7dcdeef9c75", "url": "https://github.com/apache/kafka/commit/5173af7c0bab92a5aca8ec593eb5e7dcdeef9c75", "message": "Remove throws from new close methods where no checked exception is thrown.\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-04-08T16:19:06Z", "type": "commit"}, {"oid": "a23c4566c147c671c51ef4a8774afc15cb39b022", "url": "https://github.com/apache/kafka/commit/a23c4566c147c671c51ef4a8774afc15cb39b022", "message": "Handle exceptions from closing each reporter to collect as suppressed exceptions\n\nAlso add a test to verify that multiple reporters are closed despite exceptions\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-04-08T16:45:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTE2Ng==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417065166", "bodyText": "This is common enough that there's a util for that and is used extensively:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        retryWithToleranceOperator.close();\n          \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                        log.warn(\"Could not close retry operator\", t);\n          \n          \n            \n                    }\n          \n          \n            \n                    Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");", "author": "kkonstantine", "createdAt": "2020-04-29T04:50:00Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java", "diffHunk": "@@ -170,6 +170,11 @@ protected void close() {\n         } catch (Throwable t) {\n             log.warn(\"Could not close transformation chain\", t);\n         }\n+        try {\n+            retryWithToleranceOperator.close();\n+        } catch (Throwable t) {\n+            log.warn(\"Could not close retry operator\", t);\n+        }", "originalCommit": "a23c4566c147c671c51ef4a8774afc15cb39b022", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NTMxNQ==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417065315", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        retryWithToleranceOperator.close();\n          \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                        log.warn(\"Could not close retry operator\", t);\n          \n          \n            \n                    }\n          \n          \n            \n                    Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");", "author": "kkonstantine", "createdAt": "2020-04-29T04:50:36Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java", "diffHunk": "@@ -175,6 +175,11 @@ protected void close() {\n         } catch (Throwable t) {\n             log.warn(\"Could not close transformation chain\", t);\n         }\n+        try {\n+            retryWithToleranceOperator.close();\n+        } catch (Throwable t) {\n+            log.warn(\"Could not close retry operator\", t);\n+        }", "originalCommit": "a23c4566c147c671c51ef4a8774afc15cb39b022", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDU3Mg==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417074572", "bodyText": "Regardless how high performance we want this code to be, as a matter of principle we shouldn't create an exception (and pay the cost of filling its stacktrace during instantiation) if we don't need to throw it.\nI sketched a modification just with a +1 line, but feel free to adjust to your style of preference.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ConnectException e = new ConnectException(\"Failed to close all reporters\");\n          \n          \n            \n                    for (ErrorReporter reporter : reporters) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            reporter.close();\n          \n          \n            \n                        } catch (Throwable t) {\n          \n          \n            \n                            e.addSuppressed(t);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (e.getSuppressed().length > 0) {\n          \n          \n            \n                        throw e;\n          \n          \n            \n                    }\n          \n          \n            \n                    ConnectException e = null;\n          \n          \n            \n                    for (ErrorReporter reporter : reporters) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            reporter.close();\n          \n          \n            \n                        } catch (Throwable t) {\n          \n          \n            \n                            e = e == null ? new ConnectException(\"Failed to close all reporters\") : e;\n          \n          \n            \n                            e.addSuppressed(t);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (e != null) {\n          \n          \n            \n                        throw e;\n          \n          \n            \n                    }", "author": "kkonstantine", "createdAt": "2020-04-29T05:28:43Z", "path": "connect/runtime/src/main/java/org/apache/kafka/connect/runtime/errors/ProcessingContext.java", "diffHunk": "@@ -216,4 +217,18 @@ public void reporters(Collection<ErrorReporter> reporters) {\n         this.reporters = reporters;\n     }\n \n+    @Override\n+    public void close() {\n+        ConnectException e = new ConnectException(\"Failed to close all reporters\");\n+        for (ErrorReporter reporter : reporters) {\n+            try {\n+                reporter.close();\n+            } catch (Throwable t) {\n+                e.addSuppressed(t);\n+            }\n+        }\n+        if (e.getSuppressed().length > 0) {\n+            throw e;\n+        }", "originalCommit": "a23c4566c147c671c51ef4a8774afc15cb39b022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NjgzMw==", "url": "https://github.com/apache/kafka/pull/8442#discussion_r417076833", "bodyText": "Here's a nice blog re: exception costs and when they occur:\nhttps://shipilev.net/blog/2014/exceptional-performance", "author": "kkonstantine", "createdAt": "2020-04-29T05:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA3NDU3Mg=="}], "type": "inlineReview"}, {"oid": "a101cd71114aee1d239d7cd61543c2f3e91fe893", "url": "https://github.com/apache/kafka/commit/a101cd71114aee1d239d7cd61543c2f3e91fe893", "message": "Use Utils.closeQuietly and defer creation of exception in loop\n\nSigned-off-by: Greg Harris <gregh@confluent.io>", "committedDate": "2020-04-29T18:25:17Z", "type": "commit"}]}