{"pr_number": 8605, "pr_title": "MINOR: align the constructor of KafkaConsumer to KafkaProducer", "pr_createdAt": "2020-05-03T13:41:51Z", "pr_url": "https://github.com/apache/kafka/pull/8605", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwNTU4MQ==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419105581", "bodyText": "this check is duplicate to https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java#L103", "author": "chia7712", "createdAt": "2020-05-03T13:42:06Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -1235,19 +1245,6 @@ private void close(Duration timeout, boolean swallowException) {\n         log.debug(\"Kafka producer has been closed\");\n     }\n \n-    private static Map<String, Object> propsToMap(Properties properties) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwNTgwMw==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419105803", "bodyText": "this constructor is used by KafkaProducerTest only. I keep this method to minimize this PR", "author": "chia7712", "createdAt": "2020-05-03T13:44:05Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -310,21 +310,31 @@ public KafkaProducer(Properties properties) {\n      *                         be called in the producer when the serializer is passed in directly.\n      */\n     public KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n-        this(propsToMap(properties), keySerializer, valueSerializer, null, null, null,\n+        this(new ProducerConfig(ProducerConfig.addSerializerToConfig(properties, keySerializer, valueSerializer)), keySerializer,\n+                valueSerializer, null, null, null,\n                 Time.SYSTEM);\n     }\n \n     // visible for testing\n-    @SuppressWarnings(\"unchecked\")\n     KafkaProducer(Map<String, Object> configs,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1ODUyNA==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419158524", "bodyText": "The previous approach was intended to avoid having this logic in many places.", "author": "ijuma", "createdAt": "2020-05-03T20:52:14Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -284,7 +283,8 @@ public KafkaProducer(final Map<String, Object> configs) {\n      *                         be called in the producer when the serializer is passed in directly.\n      */\n     public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n-        this(configs, keySerializer, valueSerializer, null, null, null, Time.SYSTEM);\n+        this(new ProducerConfig(ProducerConfig.addSerializerToConfig(configs, keySerializer, valueSerializer)),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4MDAyMQ==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419180021", "bodyText": "Thanks for reviews!\nDo you mean that previous approach tried to avoid \u2018\u2019\u2019addSerializerToConfig\u2019\u2019\u2019? If so, should we do it for KafkaConsumer?", "author": "chia7712", "createdAt": "2020-05-04T00:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1ODUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE4NTEwNg==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419185106", "bodyText": "Yeah, it's a bit error prone to have that logic in every constructor. We could move the propsToMap method to a utility class and use it on the consumer too.", "author": "ijuma", "createdAt": "2020-05-04T01:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1ODUyNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5Njg1MQ==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r419596851", "bodyText": "the access modifier is changed from private to public as\n\nKafkaProducer has a same but public constructor\nthe previous constructor (ConsumerConfig, ...) is useless", "author": "chia7712", "createdAt": "2020-05-04T17:19:15Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/KafkaConsumer.java", "diffHunk": "@@ -662,12 +641,27 @@ public KafkaConsumer(Properties properties) {\n     public KafkaConsumer(Properties properties,\n                          Deserializer<K> keyDeserializer,\n                          Deserializer<V> valueDeserializer) {\n-        this(new ConsumerConfig(ConsumerConfig.addDeserializerToConfig(properties, keyDeserializer, valueDeserializer)),\n-             keyDeserializer, valueDeserializer);\n+        this(Utils.propsToMap(properties), keyDeserializer, valueDeserializer);\n     }\n \n+    /**\n+     * A consumer is instantiated by providing a set of key-value pairs as configuration, and a key and a value {@link Deserializer}.\n+     * <p>\n+     * Valid configuration strings are documented at {@link ConsumerConfig}.\n+     * <p>\n+     * Note: after creating a {@code KafkaConsumer} you must always {@link #close()} it to avoid resource leaks.\n+     *\n+     * @param configs The consumer configs\n+     * @param keyDeserializer The deserializer for key that implements {@link Deserializer}. The configure() method\n+     *            won't be called in the consumer when the deserializer is passed in directly.\n+     * @param valueDeserializer The deserializer for value that implements {@link Deserializer}. The configure() method\n+     *            won't be called in the consumer when the deserializer is passed in directly.\n+     */\n     @SuppressWarnings(\"unchecked\")\n-    private KafkaConsumer(ConsumerConfig config, Deserializer<K> keyDeserializer, Deserializer<V> valueDeserializer) {\n+    public KafkaConsumer(Map<String, Object> configs,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMDg1Mw==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430420853", "bodyText": "did you get around to update the PR with a variant that removes the no-longer-used addDeserializerToConfig() method?\n\ndone !", "author": "chia7712", "createdAt": "2020-05-26T13:41:48Z", "path": "clients/src/main/java/org/apache/kafka/clients/consumer/ConsumerConfig.java", "diffHunk": "@@ -573,18 +573,6 @@ private void maybeOverrideClientId(Map<String, Object> configs) {\n         return newConfigs;\n     }\n \n-    public static Properties addDeserializerToConfig(Properties properties,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjUwNA==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430426504", "bodyText": "We cannot remove this method since it's in a class that is part of Kafka's public API. We should probably deprecate it, but we need a KIP for that.", "author": "ijuma", "createdAt": "2020-05-26T13:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMDg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMTkxNg==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430421916", "bodyText": "This test is similar to ConsumerConfigTest", "author": "chia7712", "createdAt": "2020-05-26T13:43:15Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/ProducerConfigTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.clients.producer;\n+\n+import org.apache.kafka.common.serialization.ByteArraySerializer;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ProducerConfigTest {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNTQ0Mg==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430425442", "bodyText": "We cannot remove this method since it's in a class that is part of Kafka's public API. We should probably deprecate it, but we need a KIP for that.", "author": "ijuma", "createdAt": "2020-05-26T13:48:05Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java", "diffHunk": "@@ -480,18 +480,6 @@ private static String parseAcks(String acksString) {\n         return newConfigs;\n     }\n \n-    public static Properties addSerializerToConfig(Properties properties,\n-                                                   Serializer<?> keySerializer,\n-                                                   Serializer<?> valueSerializer) {\n-        Properties newProperties = new Properties();\n-        newProperties.putAll(properties);\n-        if (keySerializer != null)\n-            newProperties.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass().getName());\n-        if (valueSerializer != null)\n-            newProperties.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass().getName());\n-        return newProperties;\n-    }\n-", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyOTU2Nw==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430429567", "bodyText": "@ijuma Should I file a issue for this PR if a KIP is required ?", "author": "chia7712", "createdAt": "2020-05-26T13:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMTA4Ng==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430431086", "bodyText": "I think you could submit a KIP for the deprecation of the two methods in this class, but we can merge the other changes in the meantime.", "author": "ijuma", "createdAt": "2020-05-26T13:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzMjQ0Mg==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430432442", "bodyText": "copy that!", "author": "chia7712", "createdAt": "2020-05-26T13:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzODA2OQ==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430438069", "bodyText": "the follow-up https://issues.apache.org/jira/browse/KAFKA-10044", "author": "chia7712", "createdAt": "2020-05-26T14:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNTQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjA4Nw==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r430426087", "bodyText": "Nit: capitalize please.", "author": "ijuma", "createdAt": "2020-05-26T13:48:55Z", "path": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java", "diffHunk": "@@ -1184,4 +1185,22 @@ private static byte checkRange(final byte i) {\n         result.removeAll(right);\n         return result;\n     }\n+\n+    /**\n+     * convert a properties to map. All keys in properties must be string type. Otherwise, a ConfigException is thrown.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NDY0OA==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r432864648", "bodyText": "Should we assert a string valued parameter too?", "author": "ijuma", "createdAt": "2020-05-30T15:39:49Z", "path": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java", "diffHunk": "@@ -681,4 +683,15 @@ public void testDiff() {\n         assertThat(diff, is(mkSet(\"a\", \"b\")));\n         assertThat(diff.getClass(), equalTo(TreeSet.class));\n     }\n+\n+    @Test\n+    public void testPropsToMap() {\n+        Properties props = new Properties();\n+        props.put(1, 2);\n+        assertThrows(ConfigException.class, () -> Utils.propsToMap(props));\n+        props.remove(1);\n+        // the non-string value is legal\n+        props.put(\"key\", 22);\n+        assertEquals(Utils.propsToMap(props).get(\"key\"), 22);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NDUwNg==", "url": "https://github.com/apache/kafka/pull/8605#discussion_r432874506", "bodyText": "done", "author": "chia7712", "createdAt": "2020-05-30T18:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2NDY0OA=="}], "type": "inlineReview"}, {"oid": "e51e19af226b96639dbce9796315f33c93ed927f", "url": "https://github.com/apache/kafka/commit/e51e19af226b96639dbce9796315f33c93ed927f", "message": "MINOR: align the constructor of KafkaConsumer to KafkaProducer", "committedDate": "2020-05-30T18:00:51Z", "type": "commit"}, {"oid": "e51e19af226b96639dbce9796315f33c93ed927f", "url": "https://github.com/apache/kafka/commit/e51e19af226b96639dbce9796315f33c93ed927f", "message": "MINOR: align the constructor of KafkaConsumer to KafkaProducer", "committedDate": "2020-05-30T18:00:51Z", "type": "forcePushed"}]}