{"pr_number": 8767, "pr_title": "KAFKA-10060 GroupMetadataManager should not log if there are no offse\u2026", "pr_createdAt": "2020-05-31T16:08:48Z", "pr_url": "https://github.com/apache/kafka/pull/8767", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTE0OQ==", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432961149", "bodyText": "create another GroupMetadataManager to override the methods we want to verify", "author": "chia7712", "createdAt": "2020-05-31T16:09:41Z", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -85,21 +82,47 @@ class GroupMetadataManagerTest {\n       offsetsTopicCompressionCodec = config.offsetsTopicCompressionCodec,\n       offsetCommitTimeoutMs = config.offsetCommitTimeoutMs,\n       offsetCommitRequiredAcks = config.offsetCommitRequiredAcks)\n+  }\n \n-    defaultOffsetRetentionMs = offsetConfig.offsetsRetentionMs\n-\n+  private[this] def mockKafkaZkClient: KafkaZkClient = {\n     // make two partitions of the group topic to make sure some partitions are not owned by the coordinator\n-    zkClient = EasyMock.createNiceMock(classOf[KafkaZkClient])\n+    val zkClient: KafkaZkClient = EasyMock.createNiceMock(classOf[KafkaZkClient])\n     EasyMock.expect(zkClient.getTopicPartitionCount(Topic.GROUP_METADATA_TOPIC_NAME)).andReturn(Some(2))\n     EasyMock.replay(zkClient)\n+    zkClient\n+  }\n \n+  @Before\n+  def setUp(): Unit = {\n+    defaultOffsetRetentionMs = offsetConfig.offsetsRetentionMs\n     metrics = new kMetrics()\n     time = new MockTime\n     replicaManager = EasyMock.createNiceMock(classOf[ReplicaManager])\n-    groupMetadataManager = new GroupMetadataManager(0, ApiVersion.latestVersion, offsetConfig, replicaManager, zkClient, time, metrics)\n+    groupMetadataManager = new GroupMetadataManager(0, ApiVersion.latestVersion, offsetConfig, replicaManager,\n+      mockKafkaZkClient, time, metrics)\n     partition = EasyMock.niceMock(classOf[Partition])\n   }\n \n+  @Test\n+  def testLogInfoFromCleanupGroupMetadata(): Unit = {\n+    var expiredOffsets: Int = 0\n+    var infoCount = 0\n+    val gmm = new GroupMetadataManager(0, ApiVersion.latestVersion, offsetConfig, replicaManager, mockKafkaZkClient, time, metrics) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTE0MA==", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432961140", "bodyText": "Nit: no need for braces.", "author": "ijuma", "createdAt": "2020-05-31T16:09:35Z", "path": "core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala", "diffHunk": "@@ -786,7 +786,9 @@ class GroupMetadataManager(brokerId: Int,\n       group.removeExpiredOffsets(currentTimestamp, config.offsetsRetentionMs)\n     })\n     offsetExpiredSensor.record(numOffsetsRemoved)\n-    info(s\"Removed $numOffsetsRemoved expired offsets in ${time.milliseconds() - currentTimestamp} milliseconds.\")\n+    if (numOffsetsRemoved > 0) {\n+      info(s\"Removed $numOffsetsRemoved expired offsets in ${time.milliseconds() - currentTimestamp} milliseconds.\")\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MzE1OA==", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432963158", "bodyText": "done", "author": "chia7712", "createdAt": "2020-05-31T16:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTM1OQ==", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432961359", "bodyText": "Nit: we don't use private[this] for tests. It's mostly a micro-optimization is not particularly useful for tests (private provides good enough semantics).", "author": "ijuma", "createdAt": "2020-05-31T16:11:43Z", "path": "core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala", "diffHunk": "@@ -85,21 +82,47 @@ class GroupMetadataManagerTest {\n       offsetsTopicCompressionCodec = config.offsetsTopicCompressionCodec,\n       offsetCommitTimeoutMs = config.offsetCommitTimeoutMs,\n       offsetCommitRequiredAcks = config.offsetCommitRequiredAcks)\n+  }\n \n-    defaultOffsetRetentionMs = offsetConfig.offsetsRetentionMs\n-\n+  private[this] def mockKafkaZkClient: KafkaZkClient = {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MzE2NA==", "url": "https://github.com/apache/kafka/pull/8767#discussion_r432963164", "bodyText": "done", "author": "chia7712", "createdAt": "2020-05-31T16:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTM1OQ=="}], "type": "inlineReview"}, {"oid": "8ece74d094cb186bff1316062c0199c56461dc5e", "url": "https://github.com/apache/kafka/commit/8ece74d094cb186bff1316062c0199c56461dc5e", "message": "KAFKA-10060 GroupMetadataManager should not log if there are no offsets to expire", "committedDate": "2020-05-31T16:33:43Z", "type": "commit"}, {"oid": "8ece74d094cb186bff1316062c0199c56461dc5e", "url": "https://github.com/apache/kafka/commit/8ece74d094cb186bff1316062c0199c56461dc5e", "message": "KAFKA-10060 GroupMetadataManager should not log if there are no offsets to expire", "committedDate": "2020-05-31T16:33:43Z", "type": "forcePushed"}]}