{"pr_number": 9649, "pr_title": "MINOR: Combine repeated top-level error test in AlterIsrManagerTest", "pr_createdAt": "2020-11-24T11:21:29Z", "pr_url": "https://github.com/apache/kafka/pull/9649", "timeline": [{"oid": "b40af394d214dd25b4b8216e3ebb9f9409a5aa8e", "url": "https://github.com/apache/kafka/commit/b40af394d214dd25b4b8216e3ebb9f9409a5aa8e", "message": "MINOR: combine repeated top level test of AlterIsrManagerTest", "committedDate": "2020-12-09T04:46:53Z", "type": "forcePushed"}, {"oid": "d33eaf75cbbc3d8075db1976366236368823a55c", "url": "https://github.com/apache/kafka/commit/d33eaf75cbbc3d8075db1976366236368823a55c", "message": "Resolve chia's suggestions", "committedDate": "2020-12-31T02:58:50Z", "type": "forcePushed"}, {"oid": "0802e5063bd5d65cc47e2a370c36e19717aaf3d7", "url": "https://github.com/apache/kafka/commit/0802e5063bd5d65cc47e2a370c36e19717aaf3d7", "message": "Resolve chia's suggestions", "committedDate": "2020-12-31T03:02:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQxNDAwNA==", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551414004", "bodyText": "Maybe rename this and \"testPartitionError\" to something slightly different so they don't look like actual test cases? Maybe something like \"assertTopLevelError\" or \"checkTopLevelError\".", "author": "mumrah", "createdAt": "2021-01-04T16:13:31Z", "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "diffHunk": "@@ -127,26 +127,24 @@ class AlterIsrManagerTest {\n \n   @Test\n   def testAuthorizationFailed(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.CLUSTER_AUTHORIZATION_FAILED)\n-    // On authz error, we log the exception and keep retrying\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    testTopLevelError(Errors.CLUSTER_AUTHORIZATION_FAILED)\n   }\n \n   @Test\n   def testStaleBrokerEpoch(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.STALE_BROKER_EPOCH)\n-    // On stale broker epoch, we want to retry, so we don't clear items from the pending map\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    testTopLevelError(Errors.STALE_BROKER_EPOCH)\n   }\n \n   @Test\n-  def testOtherErrors(): Unit = {\n+  def testUnknownServer(): Unit = {\n+    testTopLevelError(Errors.UNKNOWN_SERVER_ERROR)\n+  }\n+\n+  def testTopLevelError(error: Errors): Unit = {", "originalCommit": "0802e5063bd5d65cc47e2a370c36e19717aaf3d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MzUzNA==", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551683534", "bodyText": "Could you change it to private method?", "author": "chia7712", "createdAt": "2021-01-05T02:34:17Z", "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "diffHunk": "@@ -127,26 +127,24 @@ class AlterIsrManagerTest {\n \n   @Test\n   def testAuthorizationFailed(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.CLUSTER_AUTHORIZATION_FAILED)\n-    // On authz error, we log the exception and keep retrying\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    checkTopLevelError(Errors.CLUSTER_AUTHORIZATION_FAILED)\n   }\n \n   @Test\n   def testStaleBrokerEpoch(): Unit = {\n-    val isrs = Seq(AlterIsrItem(tp0, new LeaderAndIsr(1, 1, List(1,2,3), 10), _ => { }, 0))\n-    val manager = testTopLevelError(isrs, Errors.STALE_BROKER_EPOCH)\n-    // On stale broker epoch, we want to retry, so we don't clear items from the pending map\n-    assertFalse(manager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n+    checkTopLevelError(Errors.STALE_BROKER_EPOCH)\n   }\n \n   @Test\n-  def testOtherErrors(): Unit = {\n+  def testUnknownServer(): Unit = {\n+    checkTopLevelError(Errors.UNKNOWN_SERVER_ERROR)\n+  }\n+\n+  def checkTopLevelError(error: Errors): Unit = {", "originalCommit": "29662bd6ead6478b75a665d617cb1e5cbdaa4050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MzU1NQ==", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551683555", "bodyText": "ditto", "author": "chia7712", "createdAt": "2021-01-05T02:34:22Z", "path": "core/src/test/scala/unit/kafka/server/AlterIsrManagerTest.scala", "diffHunk": "@@ -174,13 +172,24 @@ class AlterIsrManagerTest {\n   }\n \n   @Test\n-  def testPartitionErrors(): Unit = {\n-    val errors = Seq(Errors.INVALID_UPDATE_VERSION, Errors.UNKNOWN_TOPIC_OR_PARTITION, Errors.NOT_LEADER_OR_FOLLOWER)\n-    errors.foreach(error => {\n-      val alterIsrManager = testPartitionError(tp0, error)\n-      // Any partition-level error should clear the item from the pending queue allowing for future updates\n-      assertTrue(alterIsrManager.submit(AlterIsrItem(tp0, null, _ => { }, 0)))\n-    })\n+  def testInvalidUpdateVersion(): Unit = {\n+    checkPartitionError(Errors.INVALID_UPDATE_VERSION)\n+  }\n+\n+  @Test\n+  def testUnknownTopicPartition(): Unit = {\n+    checkPartitionError(Errors.UNKNOWN_TOPIC_OR_PARTITION)\n+  }\n+\n+  @Test\n+  def testNotLeaderOrFollower(): Unit = {\n+    checkPartitionError(Errors.NOT_LEADER_OR_FOLLOWER)\n+  }\n+\n+  def checkPartitionError(error: Errors): Unit = {", "originalCommit": "29662bd6ead6478b75a665d617cb1e5cbdaa4050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxOTk0MA==", "url": "https://github.com/apache/kafka/pull/9649#discussion_r551719940", "bodyText": "Thanks, done!", "author": "dengziming", "createdAt": "2021-01-05T05:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY4MzU1NQ=="}], "type": "inlineReview"}, {"oid": "6f346e64aa2023e75ebc6db2dbede66645d06cd7", "url": "https://github.com/apache/kafka/commit/6f346e64aa2023e75ebc6db2dbede66645d06cd7", "message": "MINOR: combine repeated top level test of AlterIsrManagerTest", "committedDate": "2021-01-05T05:33:52Z", "type": "commit"}, {"oid": "794c7b62127c18620f9ee5e0beda3e9ec80341aa", "url": "https://github.com/apache/kafka/commit/794c7b62127c18620f9ee5e0beda3e9ec80341aa", "message": "make util method private", "committedDate": "2021-01-05T05:33:52Z", "type": "forcePushed"}, {"oid": "d57d84f8b24d7eb7220d0a93a89bdef0f11fe0f4", "url": "https://github.com/apache/kafka/commit/d57d84f8b24d7eb7220d0a93a89bdef0f11fe0f4", "message": "better method naming\n\nmake util method private", "committedDate": "2021-01-05T09:40:14Z", "type": "forcePushed"}, {"oid": "3126634ac64d4290fb28a9acde59985483127901", "url": "https://github.com/apache/kafka/commit/3126634ac64d4290fb28a9acde59985483127901", "message": "Resolve chia's suggestions\n\nbetter method naming\n\nmake util method private", "committedDate": "2021-01-05T13:27:25Z", "type": "commit"}, {"oid": "3126634ac64d4290fb28a9acde59985483127901", "url": "https://github.com/apache/kafka/commit/3126634ac64d4290fb28a9acde59985483127901", "message": "Resolve chia's suggestions\n\nbetter method naming\n\nmake util method private", "committedDate": "2021-01-05T13:27:25Z", "type": "forcePushed"}, {"oid": "388bca84c4a18f63f6cb3223d25d34f508231d18", "url": "https://github.com/apache/kafka/commit/388bca84c4a18f63f6cb3223d25d34f508231d18", "message": "Merge branch 'trunk' into minor-isrMgrTest", "committedDate": "2021-01-06T03:53:05Z", "type": "commit"}]}