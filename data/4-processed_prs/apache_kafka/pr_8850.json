{"pr_number": 8850, "pr_title": "KAFKA-10141: Add more detail to log segment delete messages", "pr_createdAt": "2020-06-11T03:37:38Z", "pr_url": "https://github.com/apache/kafka/pull/8850", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1OTE3Nw==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438559177", "bodyText": "LogSegment.largestTimestamp may refer to either the largest record timestamp for newer formats or the last modified time of the segment for older formats. I think it would be helpful if the log message indicated which case it is. Perhaps we could add a method like this to LogSegment?\ndef largestRecordTimestamp: Option[Long]", "author": "hachikuji", "createdAt": "2020-06-11T05:59:37Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1784,8 +1784,18 @@ class Log(@volatile private var _dir: File,\n   private def deleteRetentionMsBreachedSegments(): Int = {\n     if (config.retentionMs < 0) return 0\n     val startMs = time.milliseconds\n-    deleteOldSegments((segment, _) => startMs - segment.largestTimestamp > config.retentionMs,\n-      reason = s\"retention time ${config.retentionMs}ms breach\")\n+\n+    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n+      if (startMs - segment.largestTimestamp > config.retentionMs) {\n+        info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3ODE0Ng==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438578146", "bodyText": "That's a good point, I'll implement that method you suggested and using that method log the message accordingly.", "author": "skaundinya15", "createdAt": "2020-06-11T06:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1OTE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1OTk5NQ==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438559995", "bodyText": "With the logging we have above, do you think we still need the message in deleteOldSegments? Perhaps we could make it more concise at least. Maybe just mention the number of segments to be deleted for example.", "author": "hachikuji", "createdAt": "2020-06-11T06:02:25Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1784,8 +1784,18 @@ class Log(@volatile private var _dir: File,\n   private def deleteRetentionMsBreachedSegments(): Int = {\n     if (config.retentionMs < 0) return 0\n     val startMs = time.milliseconds\n-    deleteOldSegments((segment, _) => startMs - segment.largestTimestamp > config.retentionMs,\n-      reason = s\"retention time ${config.retentionMs}ms breach\")\n+\n+    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n+      if (startMs - segment.largestTimestamp > config.retentionMs) {\n+        info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n+          s\" retentionMs breach. Largest timestamp of segment is ${segment.largestTimestamp}\")\n+        true\n+      } else {\n+        false\n+      }\n+    }\n+\n+    deleteOldSegments(shouldDelete, reason = s\"retention time ${config.retentionMs}ms breach\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3MzQ2Mw==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438573463", "bodyText": "Yeah I agree, I think it would be redundant to keep the reason in deleteOldSegments. I'll remove that and as you suggested just mentioned the number of segments getting deleted.", "author": "skaundinya15", "createdAt": "2020-06-11T06:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1OTk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MDE1Ng==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438560156", "bodyText": "nit: space after info", "author": "hachikuji", "createdAt": "2020-06-11T06:02:54Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1804,8 +1816,15 @@ class Log(@volatile private var _dir: File,\n   }\n \n   private def deleteLogStartOffsetBreachedSegments(): Int = {\n-    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) =\n-      nextSegmentOpt.exists(_.baseOffset <= logStartOffset)\n+    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n+      if (nextSegmentOpt.exists(_.baseOffset <= logStartOffset)) {\n+        info (s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MjY0OQ==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438992649", "bodyText": "In addition, it might be useful to know the total log size. Maybe we could include size - diff as the size after deletion?", "author": "hachikuji", "createdAt": "2020-06-11T18:36:19Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1794,20 +1811,29 @@ class Log(@volatile private var _dir: File,\n     def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n       if (diff - segment.size >= 0) {\n         diff -= segment.size\n+        info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NzYyMg==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438997622", "bodyText": "Can we keep the reason? On second thought, maybe it's fine to leave this as is.", "author": "hachikuji", "createdAt": "2020-06-11T18:45:42Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1702,11 +1702,12 @@ class Log(@volatile private var _dir: File,\n    *                  (if there is one) and returns true iff it is deletable\n    * @return The number of segments deleted\n    */\n-  private def deleteOldSegments(predicate: (LogSegment, Option[LogSegment]) => Boolean, reason: String): Int = {\n+  private def deleteOldSegments(predicate: (LogSegment, Option[LogSegment]) => Boolean) = {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1NTQyNA==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r439155424", "bodyText": "Wouldn't keeping the reason be a redundant? Since for every segment we delete we are logging exactly why we are deleting and the details surrounding the deleition.", "author": "skaundinya15", "createdAt": "2020-06-12T01:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NzYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMzM3Ng==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441703376", "bodyText": "In that case, perhaps we can remove the log message? We already have the following logging in the deleteSegments path:\n  private def deleteSegmentFiles(segments: Iterable[LogSegment], asyncDelete: Boolean): Unit = {\n    segments.foreach(_.changeFileSuffixes(\"\", Log.DeletedFileSuffix))\n\n    def deleteSegments(): Unit = {\n      info(s\"Deleting segments ${segments.mkString(\",\")}\")\n      maybeHandleIOException(s\"Error while deleting segments for $topicPartition in dir ${dir.getParent}\") {\n        segments.foreach(_.deleteIfExists())\n      }\n    }\n\n    if (asyncDelete) {\n      info(s\"Scheduling segments for deletion ${segments.mkString(\",\")}\")\n      scheduler.schedule(\"delete-file\", () => deleteSegments, delay = config.fileDeleteDelayMs)\n    } else {\n      deleteSegments()\n    }\n  }\nSo it seems this message is not adding any additional value.", "author": "hachikuji", "createdAt": "2020-06-17T17:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NzYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MjM1OA==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441752358", "bodyText": "Sure, will do.", "author": "skaundinya15", "createdAt": "2020-06-17T18:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NzYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5ODk1NQ==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r438998955", "bodyText": "nit: could we make the connection clearer? How about this?\n   info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n              s\" retentionMs breach based on the largest record timestamp from the segment, which is $ts\")\nAlso, we seem to have lost mention o", "author": "hachikuji", "createdAt": "2020-06-11T18:48:13Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1784,8 +1785,24 @@ class Log(@volatile private var _dir: File,\n   private def deleteRetentionMsBreachedSegments(): Int = {\n     if (config.retentionMs < 0) return 0\n     val startMs = time.milliseconds\n-    deleteOldSegments((segment, _) => startMs - segment.largestTimestamp > config.retentionMs,\n-      reason = s\"retention time ${config.retentionMs}ms breach\")\n+\n+    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n+      if (startMs - segment.largestTimestamp > config.retentionMs) {\n+        segment.largestRecordTimestamp match {\n+          case Some(ts) =>\n+            info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n+              s\" retentionMs breach. Largest record timestamp of segment is $ts\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1NjU2NA==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r439156564", "bodyText": "Also, we seem to have lost mention o\n\nI'll clarify the log message as you suggested. Could you explain what you meant by the above?", "author": "skaundinya15", "createdAt": "2020-06-12T01:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5ODk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNTgxOA==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441705818", "bodyText": "Sorry, forgot to finish my thought. I think I was going to mention that we lost the reference to the configuration value.", "author": "hachikuji", "createdAt": "2020-06-17T17:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5ODk1NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5OTk3OA==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441699978", "bodyText": "We lost the reference to config.retentionMs.", "author": "hachikuji", "createdAt": "2020-06-17T17:11:34Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1784,8 +1785,26 @@ class Log(@volatile private var _dir: File,\n   private def deleteRetentionMsBreachedSegments(): Int = {\n     if (config.retentionMs < 0) return 0\n     val startMs = time.milliseconds\n-    deleteOldSegments((segment, _) => startMs - segment.largestTimestamp > config.retentionMs,\n-      reason = s\"retention time ${config.retentionMs}ms breach\")\n+\n+    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n+      if (startMs - segment.largestTimestamp > config.retentionMs) {\n+        segment.largestRecordTimestamp match {\n+          case Some(ts) =>\n+            info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n+              s\" retentionMs breach based on the largest record timestamp from the segment, which\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MzI2OQ==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441753269", "bodyText": "Will add it back in.", "author": "skaundinya15", "createdAt": "2020-06-17T18:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5OTk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMTAwMw==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441701003", "bodyText": "Similarly, can you mention config.retentionSize?", "author": "hachikuji", "createdAt": "2020-06-17T17:13:22Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1794,20 +1813,30 @@ class Log(@volatile private var _dir: File,\n     def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n       if (diff - segment.size >= 0) {\n         diff -= segment.size\n+        info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n+          s\" retentionSize breach. Segment size is ${segment.size} and total log size after\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMjc1NA==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441702754", "bodyText": "nit: braces unnecessary for simple variable references", "author": "hachikuji", "createdAt": "2020-06-17T17:16:33Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1794,20 +1813,30 @@ class Log(@volatile private var _dir: File,\n     def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n       if (diff - segment.size >= 0) {\n         diff -= segment.size\n+        info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n+          s\" retentionSize breach. Segment size is ${segment.size} and total log size after\" +\n+          s\" deletion will be ${size - diff}\")\n         true\n       } else {\n         false\n       }\n     }\n \n-    deleteOldSegments(shouldDelete, reason = s\"retention size in bytes ${config.retentionSize} breach\")\n+    deleteOldSegments(shouldDelete)\n   }\n \n   private def deleteLogStartOffsetBreachedSegments(): Int = {\n-    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) =\n-      nextSegmentOpt.exists(_.baseOffset <= logStartOffset)\n+    def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n+      if (nextSegmentOpt.exists(_.baseOffset <= logStartOffset)) {\n+        info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n+          s\" startOffset breach. logStartOffset is ${logStartOffset}\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMDIwMA==", "url": "https://github.com/apache/kafka/pull/8850#discussion_r441930200", "bodyText": "nit: \".. will be deleted due to retention size in bytes ${config.retentionSize} breach.\"", "author": "hachikuji", "createdAt": "2020-06-18T02:16:41Z", "path": "core/src/main/scala/kafka/log/Log.scala", "diffHunk": "@@ -1794,20 +1811,30 @@ class Log(@volatile private var _dir: File,\n     def shouldDelete(segment: LogSegment, nextSegmentOpt: Option[LogSegment]) = {\n       if (diff - segment.size >= 0) {\n         diff -= segment.size\n+        info(s\"Segment with base offset ${segment.baseOffset} will be deleted due to\" +\n+          s\" ${config.retentionSize} breach. Segment size is ${segment.size} and total log size\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "576f5ade7218cc7f3b3ec8557aae3a17a7b35597", "url": "https://github.com/apache/kafka/commit/576f5ade7218cc7f3b3ec8557aae3a17a7b35597", "message": "KAFKA-10141: Add more detail to log segment delete messages", "committedDate": "2020-06-18T06:03:57Z", "type": "commit"}, {"oid": "79f20319a320b253ee6c1991b01a697efb8f18c5", "url": "https://github.com/apache/kafka/commit/79f20319a320b253ee6c1991b01a697efb8f18c5", "message": "Addressed PR comments", "committedDate": "2020-06-18T06:03:57Z", "type": "commit"}, {"oid": "05b176862afc410f2a482a4df6e1aca216bd7c28", "url": "https://github.com/apache/kafka/commit/05b176862afc410f2a482a4df6e1aca216bd7c28", "message": "Addressed PR comments", "committedDate": "2020-06-18T06:03:57Z", "type": "commit"}, {"oid": "5ae7d6759adb555bd5c768b0923f7f4b7445e8f1", "url": "https://github.com/apache/kafka/commit/5ae7d6759adb555bd5c768b0923f7f4b7445e8f1", "message": "addressed PR comments", "committedDate": "2020-06-18T06:03:57Z", "type": "commit"}, {"oid": "44fcc4b1cd3f269d193f8bceb7d89a0a175c4644", "url": "https://github.com/apache/kafka/commit/44fcc4b1cd3f269d193f8bceb7d89a0a175c4644", "message": "addressed PR comments", "committedDate": "2020-06-18T06:03:57Z", "type": "commit"}, {"oid": "44fcc4b1cd3f269d193f8bceb7d89a0a175c4644", "url": "https://github.com/apache/kafka/commit/44fcc4b1cd3f269d193f8bceb7d89a0a175c4644", "message": "addressed PR comments", "committedDate": "2020-06-18T06:03:57Z", "type": "forcePushed"}, {"oid": "068a9061f31a2536e43cb4f650b958342c0a9ae3", "url": "https://github.com/apache/kafka/commit/068a9061f31a2536e43cb4f650b958342c0a9ae3", "message": "Clarify retention time in comment", "committedDate": "2020-06-19T00:21:56Z", "type": "commit"}]}