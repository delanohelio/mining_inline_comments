{"pr_number": 9064, "pr_title": "KAFKA-10205: Documentation and handling of non deterministic Topologies", "pr_createdAt": "2020-07-23T13:59:15Z", "pr_url": "https://github.com/apache/kafka/pull/9064", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4MTcxNw==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r459581717", "bodyText": "Nit: insert <p> tag to actually get the new paragraph rendered.\nNit: Topology -> {@link Topology}`\nIt's not really clear what \"deterministic\" means. We should elaborate more.", "author": "mjsax", "createdAt": "2020-07-23T16:37:21Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -49,6 +49,9 @@\n /**\n  * {@code StreamsBuilder} provide the high-level Kafka Streams DSL to specify a Kafka Streams topology.\n  *\n+ * It is a requirement that the processing logic (Topology) be defined in a deterministic way.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4MjgwMA==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r459582800", "bodyText": "\"different\" for sure, but this implies that one might have an operator the other does not. The observed issue is, that even if both contain the same operator, they might be added in different order (and thus be named differently) to the Topology, thus we should stretch that order matters.", "author": "mjsax", "createdAt": "2020-07-23T16:39:08Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -49,6 +49,9 @@\n /**\n  * {@code StreamsBuilder} provide the high-level Kafka Streams DSL to specify a Kafka Streams topology.\n  *\n+ * It is a requirement that the processing logic (Topology) be defined in a deterministic way.\n+ * If different instances build different runtime code logic the resulting behavior may be unexpected.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NTQyMw==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r459585423", "bodyText": "Topic not found sounds like as-if the topic was not found in the cluster -- however, what actually happened is that we received a record but the record's topic is unknown in the sub-topology.\nSimilar to above, \"deterministic\" is not really easy to understand. I would also not phrase it as a question, but as a statement:\n... This may happen if different KafkaStreams instances of the same application execute different Topologies. Note that Topologies are only identical if all operators are added in the same order.\n\nOr similar.", "author": "mjsax", "createdAt": "2020-07-23T16:43:33Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -181,8 +182,16 @@ public StreamTask(final TaskId id,\n \n         final TimestampExtractor defaultTimestampExtractor = config.defaultTimestampExtractor();\n         final DeserializationExceptionHandler defaultDeserializationExceptionHandler = config.defaultDeserializationExceptionHandler();\n+        final Set<String> sourceTopics = topology.sourceTopics();\n         for (final TopicPartition partition : partitions) {\n-            final SourceNode source = topology.source(partition.topic());\n+            final String topicName = partition.topic();\n+            if (!sourceTopics.contains(topicName)) {\n+                throw new TopologyException(\n+                        \"Topic not found \" + topicName + \". Is the Streams Topology built in a deterministic way?\"", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NjMyNA==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r459586324", "bodyText": "We should not use this annotation but rather use assertThrows (we still have some code that does not use assertThrows but we try to lazily migrate our tests, as it provides a better test pattern).", "author": "mjsax", "createdAt": "2020-07-23T16:45:06Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -1984,6 +1985,24 @@ public void shouldThrowWakeupExceptionOnInitializeOffsetsWhenWakeupException() {\n         task.initializeStateStores();\n     }\n \n+    @Test(expected = TopologyException.class)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1Mjk4Nw==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r464752987", "bodyText": "{@link KafkaStreams}", "author": "mjsax", "createdAt": "2020-08-04T01:53:09Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -50,6 +50,14 @@\n /**\n  * {@code StreamsBuilder} provide the high-level Kafka Streams DSL to specify a Kafka Streams topology.\n  *\n+ * <p>\n+ * It is a requirement that the processing logic ({@link Topology}) be defined in a deterministic way,\n+ * as in, the order in which all operators are added must be predictable and the same across all application\n+ * instances.\n+ * Topologies are only identical if all operators are added in the same order.\n+ * If different KafkaStream instances of the same application build different topologies the result may be", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MzI0NA==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r464753244", "bodyText": "incompatible runtimes and unexpected results -> incompatible runtime code and unexpected results or errors.", "author": "mjsax", "createdAt": "2020-08-04T01:54:05Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -50,6 +50,14 @@\n /**\n  * {@code StreamsBuilder} provide the high-level Kafka Streams DSL to specify a Kafka Streams topology.\n  *\n+ * <p>\n+ * It is a requirement that the processing logic ({@link Topology}) be defined in a deterministic way,\n+ * as in, the order in which all operators are added must be predictable and the same across all application\n+ * instances.\n+ * Topologies are only identical if all operators are added in the same order.\n+ * If different KafkaStream instances of the same application build different topologies the result may be\n+ * incompatible runtimes and unexpected results.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MzkzOA==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r464753938", "bodyText": "nit: formatting: (we should also get the exception an verify the error message)\nfinal TopologyException  exception = assertThrows(\n    TopologyException.class,\n    () -> new StreamTask(\n        ...\n    )\n);\n\nassertThat(exception.getMessage(), equalTo(\"...\"));", "author": "mjsax", "createdAt": "2020-08-04T01:56:47Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -1916,6 +1917,40 @@ public void shouldAlwaysSuspendRunningTasks() {\n         assertThat(task.state(), equalTo(SUSPENDED));\n     }\n \n+    @Test\n+    public void szTest() {\n+        final InternalProcessorContext context = new ProcessorContextImpl(\n+                taskId,\n+                createConfig(false, \"100\"),\n+                stateManager,\n+                streamsMetrics,\n+                null\n+        );\n+        final StreamsMetricsImpl metrics = new StreamsMetricsImpl(this.metrics, \"test\", StreamsConfig.METRICS_LATEST);\n+        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet());\n+        EasyMock.replay(stateManager);\n+\n+        // The processor topology is missing the topics\n+        final ProcessorTopology topology = withSources(asList(), mkMap());\n+\n+        assertThrows(TopologyException.class, () ->", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1NDU4Mg==", "url": "https://github.com/apache/kafka/pull/9064#discussion_r464754582", "bodyText": "szTest is a terrible test name: shouldThrowTopologyExceptionIfTaskCreatedForUnknownTopic", "author": "mjsax", "createdAt": "2020-08-04T01:59:26Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -1916,6 +1917,40 @@ public void shouldAlwaysSuspendRunningTasks() {\n         assertThat(task.state(), equalTo(SUSPENDED));\n     }\n \n+    @Test\n+    public void szTest() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "b82dd38f9033020331466681dbe525eeea564faf", "url": "https://github.com/apache/kafka/commit/b82dd38f9033020331466681dbe525eeea564faf", "message": "KAFKA-10205: Documentation and handling of non deterministic Topologies", "committedDate": "2020-08-30T13:25:32Z", "type": "commit"}, {"oid": "b82dd38f9033020331466681dbe525eeea564faf", "url": "https://github.com/apache/kafka/commit/b82dd38f9033020331466681dbe525eeea564faf", "message": "KAFKA-10205: Documentation and handling of non deterministic Topologies", "committedDate": "2020-08-30T13:25:32Z", "type": "forcePushed"}]}