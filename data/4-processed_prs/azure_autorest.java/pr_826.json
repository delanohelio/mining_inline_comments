{"pr_number": 826, "pr_title": "v4 fluentlite, support resource with scope", "pr_createdAt": "2020-12-03T04:30:01Z", "pr_url": "https://github.com/Azure/autorest.java/pull/826", "timeline": [{"oid": "c747f8abe9a0b22740ddded6025b752554eaa593", "url": "https://github.com/Azure/autorest.java/commit/c747f8abe9a0b22740ddded6025b752554eaa593", "message": "init implementation for resource with scope in path", "committedDate": "2020-12-02T09:40:05Z", "type": "commit"}, {"oid": "704dd6bd99256038c66d6af2388f11fa16cd2d7e", "url": "https://github.com/Azure/autorest.java/commit/704dd6bd99256038c66d6af2388f11fa16cd2d7e", "message": "allow non void return type for deleteById", "committedDate": "2020-12-02T09:48:45Z", "type": "commit"}, {"oid": "bd650c37cca663ae51fe4d80d88e4d36de94e622", "url": "https://github.com/Azure/autorest.java/commit/bd650c37cca663ae51fe4d80d88e4d36de94e622", "message": "find scope in resource id", "committedDate": "2020-12-03T04:29:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MDM0NQ==", "url": "https://github.com/Azure/autorest.java/pull/826#discussion_r534660345", "bodyText": "Please review whether this part is OK.\nWith some special handling on \"scope\" parameter (which is expected as 1st segment in path).", "author": "weidongxu-microsoft", "createdAt": "2020-12-03T04:31:12Z", "path": "fluentgen/src/test/java/com/azure/autorest/fluent/util/GeneratedUtilsClassWorkbenchTests.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for license information.\n+ */\n+\n+package com.azure.autorest.fluent.util;\n+\n+import com.azure.core.util.CoreUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class GeneratedUtilsClassWorkbenchTests {\n+\n+    static final class Utils {\n+        static String getValueFromIdByName(String id, String name) {\n+            if (id == null) {\n+                return null;\n+            }\n+            Iterable<String> iterable = Arrays.asList(id.split(\"/\"));\n+            Iterator<String> itr = iterable.iterator();\n+            while (itr.hasNext()) {\n+                String part = itr.next();\n+                if (part != null && !part.trim().isEmpty()) {\n+                    if (part.equalsIgnoreCase(name)) {\n+                        if (itr.hasNext()) {\n+                            return itr.next();\n+                        } else {\n+                            return null;\n+                        }\n+                    }\n+                }\n+            }\n+            return null;\n+        }\n+\n+        static String getValueFromIdByParameterName(String id, String pathTemplate, String parameterName) {\n+            if (id == null || pathTemplate == null) {\n+                return null;\n+            }\n+            String parameterNameParentheses = \"{\" + parameterName +  \"}\";\n+            List<String> idSegmentsReverted = Arrays.asList(id.split(\"/\"));\n+            List<String> pathSegments = Arrays.asList(pathTemplate.split(\"/\"));\n+            Collections.reverse(idSegmentsReverted);\n+            Iterator<String> idItrReverted = idSegmentsReverted.iterator();\n+            int pathIndex = pathSegments.size();\n+            while (idItrReverted.hasNext() && pathIndex > 0) {\n+                String idSegment = idItrReverted.next();\n+                String pathSegment = pathSegments.get(--pathIndex);\n+                if (!CoreUtils.isNullOrEmpty(idSegment) && !CoreUtils.isNullOrEmpty(pathSegment)) {\n+                    if (pathSegment.equalsIgnoreCase(parameterNameParentheses)) {\n+                        if (\"scope\".equalsIgnoreCase(parameterName)\n+                                && pathIndex == 0 || (pathIndex == 1 && pathSegments.get(0).isEmpty())) {\n+                            List<String> segments = new ArrayList<>();\n+                            segments.add(idSegment);\n+                            idItrReverted.forEachRemaining(segments::add);\n+                            Collections.reverse(segments);\n+                            if (segments.size() > 0 && segments.get(0).isEmpty()) {\n+                                segments.remove(0);\n+                            }\n+                            return String.join(\"/\", segments);\n+                        } else {\n+                            return idSegment;\n+                        }\n+                    }\n+                }\n+            }\n+            return null;\n+        }", "originalCommit": "bd650c37cca663ae51fe4d80d88e4d36de94e622", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjMwNQ==", "url": "https://github.com/Azure/autorest.java/pull/826#discussion_r535792305", "bodyText": "I think it is OK only check the first segment with \"/\"", "author": "ChenTanyi", "createdAt": "2020-12-04T02:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MDM0NQ=="}], "type": "inlineReview"}, {"oid": "d3acf6061130ef1bca7666cd6c8b698573454fa9", "url": "https://github.com/Azure/autorest.java/commit/d3acf6061130ef1bca7666cd6c8b698573454fa9", "message": "generalize scope resource", "committedDate": "2020-12-03T13:45:53Z", "type": "commit"}, {"oid": "d2ecaebfefd85ea2df4005b0c786885d59c75227", "url": "https://github.com/Azure/autorest.java/commit/d2ecaebfefd85ea2df4005b0c786885d59c75227", "message": "add Utils._getValueFromIdByParameterName", "committedDate": "2020-12-04T02:48:05Z", "type": "commit"}, {"oid": "87d5700568e89f048efc93567cd42ae53443225f", "url": "https://github.com/Azure/autorest.java/commit/87d5700568e89f048efc93567cd42ae53443225f", "message": "add WithExistingScope etc. to resource with scope", "committedDate": "2020-12-04T03:15:45Z", "type": "commit"}, {"oid": "968e924117072a1307e0dc7b334ec9295606d716", "url": "https://github.com/Azure/autorest.java/commit/968e924117072a1307e0dc7b334ec9295606d716", "message": "switch to getValueFromIdByParameterName for resource with scope", "committedDate": "2020-12-04T04:14:44Z", "type": "commit"}, {"oid": "c8776bbae69ac8daebe6156253152c9867235608", "url": "https://github.com/Azure/autorest.java/commit/c8776bbae69ac8daebe6156253152c9867235608", "message": "add live test for resource with scope (advisor)", "committedDate": "2020-12-04T06:26:50Z", "type": "commit"}, {"oid": "3df50471f3b126ea90722b2c20729705991d3ccb", "url": "https://github.com/Azure/autorest.java/commit/3df50471f3b126ea90722b2c20729705991d3ccb", "message": "[Automation] Report", "committedDate": "2020-12-04T07:33:33Z", "type": "commit"}, {"oid": "c213030c718ffd256d82271f3fc0de78d1359e83", "url": "https://github.com/Azure/autorest.java/commit/c213030c718ffd256d82271f3fc0de78d1359e83", "message": "Merge branch 'v4' into v4_fluentlite-scope", "committedDate": "2020-12-04T07:46:58Z", "type": "commit"}, {"oid": "41dc9041a3c37cbf0522647877de262f60e75431", "url": "https://github.com/Azure/autorest.java/commit/41dc9041a3c37cbf0522647877de262f60e75431", "message": "Merge branch 'v4_fluentlite-scope' of https://github.com/weidongxu-microsoft/autorest.java into v4_fluentlite-scope", "committedDate": "2020-12-04T07:48:43Z", "type": "commit"}]}