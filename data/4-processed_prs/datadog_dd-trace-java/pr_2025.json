{"pr_number": 2025, "pr_title": "Config override and system properties for tests cleanup", "pr_createdAt": "2020-10-22T22:05:02Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2025", "timeline": [{"oid": "eace412422de755390d0ea8602a4f4fffe728a23", "url": "https://github.com/DataDog/dd-trace-java/commit/eace412422de755390d0ea8602a4f4fffe728a23", "message": "Config and system properties preservation in ddspec", "committedDate": "2020-10-23T16:36:40Z", "type": "commit"}, {"oid": "996875cfb6ff429b78b86792becea69b6167fc4f", "url": "https://github.com/DataDog/dd-trace-java/commit/996875cfb6ff429b78b86792becea69b6167fc4f", "message": "Replace withConfigOverride() with injectConfig()", "committedDate": "2020-10-23T16:37:48Z", "type": "commit"}, {"oid": "012cc9b10f2e1a0f82494f5d0d8612a481b3ebf5", "url": "https://github.com/DataDog/dd-trace-java/commit/012cc9b10f2e1a0f82494f5d0d8612a481b3ebf5", "message": "Replace updateConfig() with injectConfig()", "committedDate": "2020-10-23T16:37:49Z", "type": "commit"}, {"oid": "2efa8aca34a4cef83d208152d1f9aee1b11b3c49", "url": "https://github.com/DataDog/dd-trace-java/commit/2efa8aca34a4cef83d208152d1f9aee1b11b3c49", "message": "Add preagent configuration", "committedDate": "2020-10-23T16:37:49Z", "type": "commit"}, {"oid": "14961adbaeb0a9cc1b0de5b9116c366111dfc2d9", "url": "https://github.com/DataDog/dd-trace-java/commit/14961adbaeb0a9cc1b0de5b9116c366111dfc2d9", "message": "Use configurePreAgent() everywhere", "committedDate": "2020-10-23T16:37:49Z", "type": "commit"}, {"oid": "b8299976afcee93bc24e327322179f620139a2bb", "url": "https://github.com/DataDog/dd-trace-java/commit/b8299976afcee93bc24e327322179f620139a2bb", "message": "Allow dd-trace-api tests to run + codenarc", "committedDate": "2020-10-23T16:37:49Z", "type": "commit"}, {"oid": "b8299976afcee93bc24e327322179f620139a2bb", "url": "https://github.com/DataDog/dd-trace-java/commit/b8299976afcee93bc24e327322179f620139a2bb", "message": "Allow dd-trace-api tests to run + codenarc", "committedDate": "2020-10-23T16:37:49Z", "type": "forcePushed"}, {"oid": "5a4d6036e8775cf518a1ff70ad9dfe2f5e874f3e", "url": "https://github.com/DataDog/dd-trace-java/commit/5a4d6036e8775cf518a1ff70ad9dfe2f5e874f3e", "message": "Fix merged exit-on-failure branch", "committedDate": "2020-10-23T17:28:01Z", "type": "commit"}, {"oid": "13ea159aa1f3d5267e05f471b2dcb29e3a8ad24a", "url": "https://github.com/DataDog/dd-trace-java/commit/13ea159aa1f3d5267e05f471b2dcb29e3a8ad24a", "message": "codenarc", "committedDate": "2020-10-23T18:56:39Z", "type": "commit"}, {"oid": "26e03973287688e735cac0743504da486194ad54", "url": "https://github.com/DataDog/dd-trace-java/commit/26e03973287688e735cac0743504da486194ad54", "message": "Restore config in cleanup because of instance variables", "committedDate": "2020-10-23T19:19:10Z", "type": "forcePushed"}, {"oid": "fbfda75c6845c90ecca0ecdf73c974dbff818c4b", "url": "https://github.com/DataDog/dd-trace-java/commit/fbfda75c6845c90ecca0ecdf73c974dbff818c4b", "message": "Restore config in cleanup because of instance variables", "committedDate": "2020-10-23T20:27:40Z", "type": "commit"}, {"oid": "fbfda75c6845c90ecca0ecdf73c974dbff818c4b", "url": "https://github.com/DataDog/dd-trace-java/commit/fbfda75c6845c90ecca0ecdf73c974dbff818c4b", "message": "Restore config in cleanup because of instance variables", "committedDate": "2020-10-23T20:27:40Z", "type": "forcePushed"}, {"oid": "81b26ac3279b2ab6f510c76625a344c309d8d06b", "url": "https://github.com/DataDog/dd-trace-java/commit/81b26ac3279b2ab6f510c76625a344c309d8d06b", "message": "test fixes", "committedDate": "2020-10-23T21:32:29Z", "type": "commit"}, {"oid": "81b26ac3279b2ab6f510c76625a344c309d8d06b", "url": "https://github.com/DataDog/dd-trace-java/commit/81b26ac3279b2ab6f510c76625a344c309d8d06b", "message": "test fixes", "committedDate": "2020-10-23T21:32:29Z", "type": "forcePushed"}, {"oid": "60caa3dd8dd4b5735fcfee0ec65618df4d9bd6aa", "url": "https://github.com/DataDog/dd-trace-java/commit/60caa3dd8dd4b5735fcfee0ec65618df4d9bd6aa", "message": "RabbitMQ instrumentation has a bug", "committedDate": "2020-10-23T23:29:57Z", "type": "commit"}, {"oid": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "url": "https://github.com/DataDog/dd-trace-java/commit/dd164ed47abb3d28ead369880c43ea06c167f0a2", "message": "Needs to extend AgentTestRunner", "committedDate": "2020-10-24T03:04:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MDA0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r511980042", "bodyText": "Do these need to be removed as a dependency declaration from somewhere?", "author": "tylerbenson", "createdAt": "2020-10-26T13:58:46Z", "path": "dd-trace-core/src/test/groovy/datadog/trace/core/CoreTracerTest.groovy", "diffHunk": "@@ -31,22 +27,13 @@ import static datadog.trace.api.config.TracerConfig.PRIORITY_SAMPLING\n import static datadog.trace.api.config.TracerConfig.SERVICE_MAPPING\n import static datadog.trace.api.config.TracerConfig.SPAN_TAGS\n import static datadog.trace.api.config.TracerConfig.WRITER_TYPE\n-import static datadog.trace.bootstrap.config.provider.SystemPropertiesConfigSource.PREFIX\n \n @Timeout(10)\n class CoreTracerTest extends DDSpecification {\n \n-  @Rule\n-  public final RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties()\n-  @Rule\n-  public final EnvironmentVariables environmentVariables = new EnvironmentVariables()", "originalCommit": "996875cfb6ff429b78b86792becea69b6167fc4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjYxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512182615", "bodyText": "Yes. Done.", "author": "randomanderson", "createdAt": "2020-10-26T18:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MDA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MTQwMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r511981403", "bodyText": "Is changing expect -> when/then an important/required change or just done for consistency/style? (I'm fine with it, just making sure I understand.)", "author": "tylerbenson", "createdAt": "2020-10-26T14:00:31Z", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpServerTest.groovy", "diffHunk": "@@ -309,12 +309,13 @@ abstract class HttpServerTest<SERVER> extends AgentTestRunner {\n \n   def \"test tag query string for #endpoint\"() {\n     setup:\n+    injectSysConfig(HTTP_SERVER_TAG_QUERY_STRING, \"true\")\n     def request = request(endpoint, method, body).build()\n-    Response response = withConfigOverride(\"http.server.tag.query-string\", \"true\") {\n-      client.newCall(request).execute()\n-    }\n \n-    expect:\n+    when:\n+    Response response = client.newCall(request).execute()\n+\n+    then:", "originalCommit": "996875cfb6ff429b78b86792becea69b6167fc4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NzY2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512197661", "bodyText": "Consistency/style mostly.  It's cleaner to have \"This is what's being tested\" under when and \"these are the expected results\" under then so I usually just make the adjustment as I go.\nThere are some edge cases with mocks and others with AsyncConditions or BlockingVariable where putting things in the wrong block changes evaluation order.", "author": "randomanderson", "createdAt": "2020-10-26T18:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MTQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MzY1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r511983653", "bodyText": "Probably not a big deal, but the result of this change is that config is reconstructed twice instead of just once.", "author": "tylerbenson", "createdAt": "2020-10-26T14:03:39Z", "path": "dd-trace-core/src/test/groovy/datadog/trace/core/util/SystemAccessTest.groovy", "diffHunk": "@@ -106,10 +102,8 @@ class SystemAccessTest extends DDSpecification {\n \n   def \"Test getVMArguments\"() {\n     setup:\n-    ConfigUtils.updateConfig {\n-      System.setProperty(PREFIX + PROFILING_ENABLED, profilingEnabled.toString())\n-      System.setProperty(PREFIX + HEALTH_METRICS_ENABLED, healthMetricsEnabled.toString())\n-    }\n+    injectSysConfig(PROFILING_ENABLED, profilingEnabled.toString())\n+    injectSysConfig(HEALTH_METRICS_ENABLED, healthMetricsEnabled.toString())", "originalCommit": "012cc9b10f2e1a0f82494f5d0d8612a481b3ebf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwMTY3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512101675", "bodyText": "I considered that.  At first I had a mini DSL for setting config similar to TagsAssert.  After working through a bunch of the tests, I realized almost all tests that set a config only set one.\nIt just not worth it to complicate things.  (Even taking in a map involves the GString conversion step)", "author": "randomanderson", "createdAt": "2020-10-26T16:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4MzY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk4NzgzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r511987832", "bodyText": "\ud83d\udc4d", "author": "tylerbenson", "createdAt": "2020-10-26T14:09:19Z", "path": "utils/test-utils/src/main/groovy/datadog/trace/test/util/DDSpecification.groovy", "diffHunk": "@@ -15,13 +20,24 @@ import static net.bytebuddy.matcher.ElementMatchers.none\n abstract class DDSpecification extends Specification {\n   private static final String CONFIG = \"datadog.trace.api.Config\"\n \n+  private static Field configInstanceField\n+  private static Constructor configConstructor\n+\n   static {\n     makeConfigInstanceModifiable()\n   }\n \n   // Keep track of config instance already made modifiable\n   private static isConfigInstanceModifiable = false\n \n+  @Rule\n+  public final ResetControllableEnvironmentVariables environmentVariables = new ResetControllableEnvironmentVariables()\n+\n+  // Intentionally not using the RestoreSystemProperties @Rule because this needs to save properties\n+  // in the BeforeClass stage instead of Before stage.  Even manually calling before()/after\n+  // doesn't work because the properties object is not cloned for each invocation\n+  private static Properties originalSystemProperties", "originalCommit": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NDI5NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r511994295", "bodyText": "Why does it matter if this is setup or setupSpec?", "author": "tylerbenson", "createdAt": "2020-10-26T14:18:06Z", "path": "dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/test_before_1_11_106/groovy/AWS0ClientTest.groovy", "diffHunk": "@@ -37,16 +37,11 @@ class AWS0ClientTest extends AgentTestRunner {\n     new ProfileCredentialsProvider(),\n     new InstanceProfileCredentialsProvider())\n \n-  def setupSpec() {\n+  def setup() {", "originalCommit": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTE2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512089168", "bodyText": "System properties get reset to the pre-test stage before each test.  Properties set in setupSpec() will only apply to the very first test and get reset after.", "author": "randomanderson", "createdAt": "2020-10-26T16:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NDI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NjcwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r511996700", "bodyText": "What's the motivation for this change?", "author": "tylerbenson", "createdAt": "2020-10-26T14:21:21Z", "path": "dd-java-agent/instrumentation/jdbc/src/test/groovy/JDBCConnectionUrlParserTest.groovy", "diffHunk": "@@ -1,10 +1,10 @@\n+import datadog.trace.agent.test.AgentTestRunner\n import datadog.trace.bootstrap.instrumentation.jdbc.DBInfo\n-import datadog.trace.test.util.DDSpecification\n import spock.lang.Shared\n \n import static datadog.trace.bootstrap.instrumentation.jdbc.JDBCConnectionUrlParser.parse\n \n-class JDBCConnectionUrlParserTest extends DDSpecification {\n+class JDBCConnectionUrlParserTest extends AgentTestRunner {", "originalCommit": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5MTc0Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512091746", "bodyText": "This failure .  There was that race where if this test class ran first, Config is loaded in the a application classloader instead of the the boot classloader", "author": "randomanderson", "createdAt": "2020-10-26T16:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5NjcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODUyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r511998522", "bodyText": "Why did these need to be moved to setup?", "author": "tylerbenson", "createdAt": "2020-10-26T14:23:40Z", "path": "dd-java-agent/instrumentation/rabbitmq-amqp-2.7/src/test/groovy/RabbitMQTest.groovy", "diffHunk": "@@ -47,12 +40,23 @@ class RabbitMQTest extends AgentTestRunner {\n   def defaultRabbitMQPort = 5672\n   @Shared\n   InetSocketAddress rabbitmqAddress = new InetSocketAddress(\"127.0.0.1\", defaultRabbitMQPort)\n-  @Shared\n-  boolean expectE2EDuration = Boolean.valueOf(System.getProperty(\"dd.amqp.e2e.duration.enabled\"))\n \n-  ConnectionFactory factory = new ConnectionFactory(host: rabbitmqAddress.hostName, port: rabbitmqAddress.port)\n-  Connection conn = factory.newConnection()\n-  Channel channel = conn.createChannel()\n+  def factory\n+  def conn\n+  def channel\n+\n+  @Override\n+  void configurePreAgent() {\n+    super.configurePreAgent()\n+\n+    injectSysConfig(\"dd.amqp.e2e.duration.enabled\", \"true\")\n+  }\n+\n+  def setup() {\n+    factory = new ConnectionFactory(host: rabbitmqAddress.hostName, port: rabbitmqAddress.port)\n+    conn = factory.newConnection()\n+    channel = conn.createChannel()\n+  }", "originalCommit": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMzQ1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512203453", "bodyText": "Instance fields get initialized before setup() methods are called.  This test set properties in a static block so when the fields get constructed, the properties are already set.  To maintain the same behavior, the field initialization had to be moved into the setup() block.\nThis test is still \"inaccurate\" because e2e duration in RabbitMQ is broken.  The bad config api hid that fact.  I listed it under \"future work\" to fix RabbitMQ.", "author": "randomanderson", "createdAt": "2020-10-26T19:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk5ODUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMTQ0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512001448", "bodyText": "oops... Is this cleanup even needed anymore? I think you've generally removed all the other similar cleanup methods.", "author": "tylerbenson", "createdAt": "2020-10-26T14:27:13Z", "path": "dd-java-agent/src/test/groovy/datadog/trace/agent/JMXFetchTest.groovy", "diffHunk": "@@ -80,7 +80,7 @@ class JMXFetchTest extends Specification {\n \n     cleanup:\n     names.each {\n-      System.clearProperty(\"dd.integration.${it}.enabled\")\n+      System.clearProperty(\"dd.jmxfetch.${it}.enabled\")", "originalCommit": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5NjM3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512096376", "bodyText": "JMXFetchTest doesn't extend DDSpecification (none of the top-level tests in dd-java-agent can).  Fixing this is part of the \"future work\" I described in the description.", "author": "randomanderson", "createdAt": "2020-10-26T16:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMTQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMzQ0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512003444", "bodyText": "\ud83d\udc4d", "author": "tylerbenson", "createdAt": "2020-10-26T14:29:46Z", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/AgentTestRunner.java", "diffHunk": "@@ -285,7 +287,7 @@ public static void blockUntilChildSpansFinished(final int numberOfSpans) {\n     }\n   }\n \n-  public static class TestRunnerListener implements AgentBuilder.Listener {\n+  public static class TestRunnerListener extends AgentBuilder.Listener.Adapter {", "originalCommit": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxMjI1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r512012253", "bodyText": "I think ShouldBeConstructedWithoutConfig is a bit confusing... consider calling this method directly and having this method return new Object() so it can be a valid assignment. (I don't think it matters that the assertion be done within the constructor.)", "author": "tylerbenson", "createdAt": "2020-10-26T14:40:38Z", "path": "dd-java-agent/testing/src/test/groovy/ConfigResetTest.groovy", "diffHunk": "@@ -0,0 +1,91 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.api.Config\n+import spock.lang.Shared\n+\n+class ConfigResetTest extends AgentTestRunner {\n+\n+  @Shared\n+  def sharedInstance = new ShouldBeConstructedWithoutConfig()\n+\n+  @Shared\n+  def sharedInstanceCreatedInSetup\n+\n+  def notSharedInstance = new ShouldBeConstructedWithoutConfig()\n+\n+  def notSharedInstanceCreatedInSetup\n+\n+  def setupSpec() {\n+    sharedInstanceCreatedInSetup = new ShouldBeConstructedWithoutConfig()\n+  }\n+\n+  def setup() {\n+    notSharedInstanceCreatedInSetup = new ShouldBeConstructedWithoutConfig()\n+  }\n+\n+  static void checkStaticAssertions() {\n+    assert System.getProperty(\"dd.trace.enabled\") == null\n+    assert System.getenv(\"DD_TRACE_ENABLED\") == null\n+    assert Config.get().isTraceEnabled()\n+  }", "originalCommit": "dd164ed47abb3d28ead369880c43ea06c167f0a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0db32e071f6bfb11af9dcabdf4a9827e5835b49", "url": "https://github.com/DataDog/dd-trace-java/commit/a0db32e071f6bfb11af9dcabdf4a9827e5835b49", "message": "Updating ConfigReset test", "committedDate": "2020-10-26T17:04:23Z", "type": "commit"}, {"oid": "a04f602f724c2890067ce40144f11ed45116b7f6", "url": "https://github.com/DataDog/dd-trace-java/commit/a04f602f724c2890067ce40144f11ed45116b7f6", "message": "remove extra system-rules dependencies", "committedDate": "2020-10-26T17:53:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ5OTcyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2025#discussion_r513499726", "bodyText": "\ud83d\udc4d For the paranoid checks.", "author": "bantonsson", "createdAt": "2020-10-28T14:41:32Z", "path": "utils/test-utils/src/main/groovy/datadog/trace/test/util/DDSpecification.groovy", "diffHunk": "@@ -43,6 +59,123 @@ abstract class DDSpecification extends Specification {\n           .transform(Transformer.ForField.withModifiers(PUBLIC, STATIC, VOLATILE))\n       }\n       .installOn(instrumentation)\n-    isConfigInstanceModifiable = true\n+\n+    try {\n+      Class configClass = Class.forName(CONFIG)\n+      configInstanceField = configClass.getDeclaredField(\"INSTANCE\")\n+      configConstructor = configClass.getDeclaredConstructor()\n+      configConstructor.setAccessible(true)\n+      isConfigInstanceModifiable = true\n+    } catch (ReflectiveOperationException e) {\n+      println(\"Config will not be modifiable\")\n+      e.printStackTrace()\n+    }\n+  }\n+\n+  private void saveProperties() {\n+    originalSystemProperties = new Properties()\n+    originalSystemProperties.putAll(System.properties)\n+  }\n+\n+  private void restoreProperties() {\n+    Properties copy = new Properties()\n+    copy.putAll(originalSystemProperties)\n+    System.setProperties(copy)\n+\n+    environmentVariables?.reset()\n+  }\n+\n+  void setupSpec() {\n+    assert System.getenv().findAll { it.key.startsWith(\"DD_\") }.isEmpty()\n+    assert System.getProperties().findAll { it.key.toString().startsWith(\"dd.\") }.isEmpty()\n+\n+    saveProperties()\n+  }\n+\n+  void cleanupSpec() {\n+    restoreProperties()\n+\n+    assert System.getenv().findAll { it.key.startsWith(\"DD_\") }.isEmpty()\n+    assert System.getProperties().findAll { it.key.toString().startsWith(\"dd.\") }.isEmpty()\n+\n+    if (isConfigInstanceModifiable) {\n+      rebuildConfig()\n+    }\n+  }\n+\n+  void setup() {\n+    restoreProperties()\n+\n+    assert System.getenv().findAll { it.key.startsWith(\"DD_\") }.isEmpty()\n+    assert System.getProperties().findAll { it.key.toString().startsWith(\"dd.\") }.isEmpty()", "originalCommit": "a04f602f724c2890067ce40144f11ed45116b7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}