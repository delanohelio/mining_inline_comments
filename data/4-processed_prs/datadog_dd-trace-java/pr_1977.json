{"pr_number": 1977, "pr_title": "Instrument akka dispatchers without relying on Executor/Runnable instrumentations", "pr_createdAt": "2020-10-12T18:52:48Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1977", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MDA4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503980080", "bodyText": "Is this expected to stay like this long term?", "author": "tylerbenson", "createdAt": "2020-10-13T14:04:56Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinExecutorTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaWrappedRunnableInstrumentation; its responsibility\n+ * is to capture context if there is an active scope.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class AkkaForkJoinExecutorTaskInstrumentation extends Instrumenter.Default {\n+  public AkkaForkJoinExecutorTaskInstrumentation() {\n+    super(\"java_concurrent\", \"akka_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // prevents Runnable from being instrumented unless this\n+    // instrumentation would take effect (unless something else\n+    // instruments it).\n+    return hasClassesNamed(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return Collections.singletonMap(Runnable.class.getName(), State.class.getName());", "originalCommit": "fd6666d161367fd47312438de2ea91c73ea3ecbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5ODM2Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503998367", "bodyText": "To make this work properly this instrumentation would need to be radically different, so no, this probably isn't long term, and only happens when Scala 2.11 is in use.", "author": "richardstartin", "createdAt": "2020-10-13T14:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MDA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MjMzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503982333", "bodyText": "wrapped?", "author": "tylerbenson", "createdAt": "2020-10-13T14:07:52Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinExecutorTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaWrappedRunnableInstrumentation; its responsibility\n+ * is to capture context if there is an active scope.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class AkkaForkJoinExecutorTaskInstrumentation extends Instrumenter.Default {\n+  public AkkaForkJoinExecutorTaskInstrumentation() {\n+    super(\"java_concurrent\", \"akka_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // prevents Runnable from being instrumented unless this\n+    // instrumentation would take effect (unless something else\n+    // instruments it).\n+    return hasClassesNamed(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return Collections.singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isConstructor().and(takesArgument(0, named(Runnable.class.getName()))),\n+        getClass().getName() + \"$Construct\");\n+  }\n+\n+  public static final class Construct {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.Argument(0) Runnable wrapped) {", "originalCommit": "fd6666d161367fd47312438de2ea91c73ea3ecbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NDk1MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503984951", "bodyText": "both this and AkkaForkJoinExecutorTaskInstrumentation are instrumenting the same class.  Why separate them?", "author": "tylerbenson", "createdAt": "2020-10-13T14:11:04Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaWrappedRunnableInstrumentation.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.AdviceUtils.endTaskScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.AdviceUtils.startTaskScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaForkJoinExecutorTaskInstrumentation; its\n+ * responsibility is to activate any captured scope.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class AkkaWrappedRunnableInstrumentation extends Instrumenter.Default {\n+\n+  public AkkaWrappedRunnableInstrumentation() {\n+    super(\"java_concurrent\", \"akka_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // prevents Runnable from being instrumented unless this\n+    // instrumentation would take effect (unless something else\n+    // instruments it).\n+    return hasClassesNamed(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return Collections.singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");", "originalCommit": "fd6666d161367fd47312438de2ea91c73ea3ecbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5ODQ5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503998497", "bodyText": "This was an oversight.", "author": "richardstartin", "createdAt": "2020-10-13T14:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NDk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5MDM0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503990345", "bodyText": "Can you elaborate on how this collaboration works in this comment for future people who might be working in here", "author": "devinsba", "createdAt": "2020-10-13T14:17:56Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinExecutorTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaWrappedRunnableInstrumentation; its responsibility", "originalCommit": "fd6666d161367fd47312438de2ea91c73ea3ecbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNjIwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r504006201", "bodyText": "I removed the second instrumentation and the comment.", "author": "richardstartin", "createdAt": "2020-10-13T14:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5MDM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5MjI4NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503992285", "bodyText": "This is incorrect - both need to be instrumented to be correct with work-stealing", "author": "richardstartin", "createdAt": "2020-10-13T14:20:17Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinTaskInstrumentation.java", "diffHunk": "@@ -41,19 +43,20 @@ public AkkaForkJoinTaskInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return named(\"akka.dispatch.forkjoin.ForkJoinTask\");\n+    return extendsClass(named(\"akka.dispatch.forkjoin.ForkJoinTask\"))\n+        .and(not(named(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\")));\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>(4);\n-    transformers.put(isMethod().and(named(\"doExec\")), getClass().getName() + \"$DoExec\");", "originalCommit": "fd6666d161367fd47312438de2ea91c73ea3ecbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2dba20944b292e7b3441e1d319623f58d38ae707", "url": "https://github.com/DataDog/dd-trace-java/commit/2dba20944b292e7b3441e1d319623f58d38ae707", "message": "merge instrumentations", "committedDate": "2020-10-13T18:27:11Z", "type": "forcePushed"}, {"oid": "fe3377e9250900194b86a7aaf328d125ea349bb6", "url": "https://github.com/DataDog/dd-trace-java/commit/fe3377e9250900194b86a7aaf328d125ea349bb6", "message": "merge instrumentations", "committedDate": "2020-10-14T07:02:40Z", "type": "forcePushed"}, {"oid": "fb78748eea00b4a8c92a4bec48fe36109e2daf29", "url": "https://github.com/DataDog/dd-trace-java/commit/fb78748eea00b4a8c92a4bec48fe36109e2daf29", "message": "add test for dispatcher propagation", "committedDate": "2020-10-14T11:50:29Z", "type": "forcePushed"}, {"oid": "65a1dba91625f46645f36854978e03f82efc787d", "url": "https://github.com/DataDog/dd-trace-java/commit/65a1dba91625f46645f36854978e03f82efc787d", "message": "disable instrumentation akka dispatchers", "committedDate": "2020-10-14T16:13:33Z", "type": "commit"}, {"oid": "f5008301e7547355134c442ea69a07e3d1a331c1", "url": "https://github.com/DataDog/dd-trace-java/commit/f5008301e7547355134c442ea69a07e3d1a331c1", "message": "enough specialised instrumentation of Akka executors not to rely on generic Executor/Runnable instrumentation from java-concurrent", "committedDate": "2020-10-14T16:13:33Z", "type": "commit"}, {"oid": "a364d2ccb39a998f457c611d3a895123ea358bf0", "url": "https://github.com/DataDog/dd-trace-java/commit/a364d2ccb39a998f457c611d3a895123ea358bf0", "message": "don't assert inverse for ancient versions of Akka because some but not all akka-concurrent instrumentations pass", "committedDate": "2020-10-14T16:13:34Z", "type": "commit"}, {"oid": "40214eee33964bf351561277c4b59bc64f04f8c2", "url": "https://github.com/DataDog/dd-trace-java/commit/40214eee33964bf351561277c4b59bc64f04f8c2", "message": "add testing for ForkJoinExecutorConfigurator.AkkaForkJoinPool", "committedDate": "2020-10-14T16:13:34Z", "type": "commit"}, {"oid": "ae51423ec521b194159b5957bb3db2d30cf074b0", "url": "https://github.com/DataDog/dd-trace-java/commit/ae51423ec521b194159b5957bb3db2d30cf074b0", "message": "merge instrumentations", "committedDate": "2020-10-14T16:13:34Z", "type": "commit"}, {"oid": "0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "url": "https://github.com/DataDog/dd-trace-java/commit/0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "message": "add test for dispatcher propagation", "committedDate": "2020-10-14T16:13:34Z", "type": "commit"}, {"oid": "0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "url": "https://github.com/DataDog/dd-trace-java/commit/0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "message": "add test for dispatcher propagation", "committedDate": "2020-10-14T16:13:34Z", "type": "forcePushed"}]}