{"pr_number": 1199, "pr_title": "Shared classloader for agent and jmx-fetch", "pr_createdAt": "2020-02-03T21:33:09Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1199", "timeline": [{"oid": "42fb30385b3d3627766d4790940baa762ba012a0", "url": "https://github.com/DataDog/dd-trace-java/commit/42fb30385b3d3627766d4790940baa762ba012a0", "message": "Fix a couple tests using the wrong arguments", "committedDate": "2020-02-03T22:04:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzU3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r374663574", "bodyText": "This seems to be a lot of manual dependency management that is very easy to get wrong. Instead maybe you would consider just somehow including jmxfetch into existing agent jar?", "author": "mar-kolya", "createdAt": "2020-02-04T13:17:54Z", "path": "gradle/dependencies.gradle", "diffHunk": "@@ -60,5 +60,31 @@ ext {\n     scala          : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: \"${versions.scala}\"),\n     kotlin         : dependencies.create(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: \"${versions.kotlin}\"),\n     coroutines     : dependencies.create(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: \"${versions.coroutines}\"),\n+\n+    // Shared between agent tooling and instrumentation and JMXFetch\n+    shared         : [\n+      dependencies.create(group: 'com.datadoghq', name: 'java-dogstatsd-client', version: '2.8'),\n+      // \"Explicit override jnr version because .22 caused issues\" - mar-kolya\n+      dependencies.create(group: 'com.github.jnr', name: 'jnr-unixsocket', version: '0.23'),\n+      dependencies.create(group: 'com.google.guava', name: 'guava', version: \"${versions.guava}\")\n+    ],\n+\n+    // Inverse of \"shared\".  These exclude directives are part of shadowJar's DSL\n+    // which is similar but not exactly the same as the regular gradle dependency{} block\n+    // Also, transitive dependencies have to be explicitly listed\n+    sharedInverse  : (Closure) {\n+      // dogstatsd and its transitives\n+      exclude(dependency('com.datadoghq:java-dogstatsd-client'))\n+      exclude(dependency('com.github.jnr::'))\n+      exclude(dependency('org.ow2.asm::'))\n+\n+      // Guava and its transitives\n+      exclude(dependency('com.google.guava::'))\n+      exclude(dependency('com.google.code.findbugs::'))\n+      exclude(dependency('com.google.errorprone::'))\n+      exclude(dependency('com.google.j2objc::'))\n+      exclude(dependency('org.codehaus.mojo::'))\n+      exclude(dependency('org.checkerframework::'))", "originalCommit": "42fb30385b3d3627766d4790940baa762ba012a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NTYxOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r377875618", "bodyText": "Yes, it is worth thinking about automating a bit more.  However, I suspect it will have to be semi-manual as we upgrade different components.\nI think it is mostly going to effect us when we upgrade jmxfetch, since I don't believe dogstatsd has many dependencies.", "author": "dougqh", "createdAt": "2020-02-11T20:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMjE2NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r376602164", "bodyText": "I've merged change #1204 in this method to master. Will be small merge conflict :)", "author": "lpriima", "createdAt": "2020-02-07T20:53:04Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -160,13 +163,38 @@ public void execute() {\n     }\n   }\n \n+  private static synchronized void createParentClassloader(final URL bootstrapURL) {\n+    if (PARENT_CLASSLOADER == null) {\n+      try {\n+        final Class<?> bootstrapProxyClass =\n+            ClassLoader.getSystemClassLoader()\n+                .loadClass(\"datadog.trace.bootstrap.DatadogClassLoader$BootstrapClassLoaderProxy\");\n+        final Constructor constructor = bootstrapProxyClass.getDeclaredConstructor(URL.class);\n+        BOOTSTRAP_PROXY = (ClassLoader) constructor.newInstance(bootstrapURL);\n+\n+        final ClassLoader grandParent;\n+        if (isJavaBefore9()) {\n+          grandParent = null; // bootstrap\n+        } else {\n+          // platform classloader is parent of system in java 9+\n+          grandParent = getPlatformClassLoader();\n+        }\n+\n+        PARENT_CLASSLOADER = createDatadogClassLoader(\"shared.isolated\", bootstrapURL, grandParent);\n+      } catch (final Throwable ex) {\n+        log.error(\"Throwable thrown creating parent classloader\", ex);\n+      }\n+    }\n+  }\n+\n   private static synchronized void startDatadogAgent(\n       final Instrumentation inst, final URL bootstrapURL) {\n     if (AGENT_CLASSLOADER == null) {\n       final ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();", "originalCommit": "42fb30385b3d3627766d4790940baa762ba012a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3MzU1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r376673559", "bodyText": "Is synchronized needed for this method ? And AGENT_CLASSLOADER not volatile at the same time?", "author": "lpriima", "createdAt": "2020-02-08T01:15:17Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -160,13 +163,38 @@ public void execute() {\n     }\n   }\n \n+  private static synchronized void createParentClassloader(final URL bootstrapURL) {\n+    if (PARENT_CLASSLOADER == null) {\n+      try {\n+        final Class<?> bootstrapProxyClass =\n+            ClassLoader.getSystemClassLoader()\n+                .loadClass(\"datadog.trace.bootstrap.DatadogClassLoader$BootstrapClassLoaderProxy\");\n+        final Constructor constructor = bootstrapProxyClass.getDeclaredConstructor(URL.class);\n+        BOOTSTRAP_PROXY = (ClassLoader) constructor.newInstance(bootstrapURL);\n+\n+        final ClassLoader grandParent;\n+        if (isJavaBefore9()) {\n+          grandParent = null; // bootstrap\n+        } else {\n+          // platform classloader is parent of system in java 9+\n+          grandParent = getPlatformClassLoader();\n+        }\n+\n+        PARENT_CLASSLOADER = createDatadogClassLoader(\"shared.isolated\", bootstrapURL, grandParent);\n+      } catch (final Throwable ex) {\n+        log.error(\"Throwable thrown creating parent classloader\", ex);\n+      }\n+    }\n+  }\n+\n   private static synchronized void startDatadogAgent(", "originalCommit": "42fb30385b3d3627766d4790940baa762ba012a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc1Njk2NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r377756964", "bodyText": "I'm not sure.  Just following the comments in the class that said access to the classloader fields need to be synchronized.  I know at one point startDatadogAgent() and similar methods could have been called by multiple thread because of weird classloading situations.\nI think that might have been fixed with #1084 but the synchronized attributes were never removed so I don't know.", "author": "randomanderson", "createdAt": "2020-02-11T16:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3MzU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3ODc4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r377878786", "bodyText": "Yes, in this case, I think synchronized or some other lock is the right choice.\nIf we had any reads outside, the synchronized block we also need to make the field volatile, but I don't think we do.\nSince this is effectively a lazy singleton, the one other approach we could take is a holder class - like...\nclass AgentClassLoaderHolder {\nstatic final DatadogClassLoader loader = ...\n}\nThe main benefit of that approach is that the locking is handled implicitly through the JVM class init checking and gets optimized away once JIT-ted.  However, we're not accessing these fields enough for that to be a significant issue.\nAnd if there's any context that needs to be captured by the Holder class, this approach doesn't really work.\nIn short - for now, I think this is probably the right solution.", "author": "dougqh", "createdAt": "2020-02-11T20:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3MzU1OQ=="}], "type": "inlineReview"}, {"oid": "3c0877e38a84d3ddb3ed96568341686dd463e35e", "url": "https://github.com/DataDog/dd-trace-java/commit/3c0877e38a84d3ddb3ed96568341686dd463e35e", "message": "Create a shared parent classloader", "committedDate": "2020-02-11T16:42:39Z", "type": "commit"}, {"oid": "c79fe3a45991892e8c8c23336668840a32422a1b", "url": "https://github.com/DataDog/dd-trace-java/commit/c79fe3a45991892e8c8c23336668840a32422a1b", "message": "Create shared internal jar", "committedDate": "2020-02-11T16:44:46Z", "type": "commit"}, {"oid": "0cb0ae0a485add2461d437090830b32a1a0b1ab4", "url": "https://github.com/DataDog/dd-trace-java/commit/0cb0ae0a485add2461d437090830b32a1a0b1ab4", "message": "Less repetition in gradle files", "committedDate": "2020-02-11T16:44:46Z", "type": "commit"}, {"oid": "01b0bebc93e984f32257616b8538b7d3f32039b1", "url": "https://github.com/DataDog/dd-trace-java/commit/01b0bebc93e984f32257616b8538b7d3f32039b1", "message": "minor formatting", "committedDate": "2020-02-11T16:44:46Z", "type": "commit"}, {"oid": "9023c6e1c7ee77602c968f64be87d265c093bd8a", "url": "https://github.com/DataDog/dd-trace-java/commit/9023c6e1c7ee77602c968f64be87d265c093bd8a", "message": "Fix a couple tests using the wrong arguments", "committedDate": "2020-02-11T16:44:46Z", "type": "commit"}, {"oid": "9023c6e1c7ee77602c968f64be87d265c093bd8a", "url": "https://github.com/DataDog/dd-trace-java/commit/9023c6e1c7ee77602c968f64be87d265c093bd8a", "message": "Fix a couple tests using the wrong arguments", "committedDate": "2020-02-11T16:44:46Z", "type": "forcePushed"}]}