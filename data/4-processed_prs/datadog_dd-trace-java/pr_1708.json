{"pr_number": 1708, "pr_title": "Add the various MLT io classes - Used for serializing collected stacktraces", "pr_createdAt": "2020-07-23T18:28:42Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1708", "timeline": [{"oid": "4ce4edac18053d5070d1474469b7fe4bc0c825ea", "url": "https://github.com/DataDog/dd-trace-java/commit/4ce4edac18053d5070d1474469b7fe4bc0c825ea", "message": "Add the various MLT io classes - Used for serializing collected stacktraces\n\nCo-authored-by: Jean-Philippe Bempel <jean-philippe.bempel@datadoghq.com>\nCo-authored-by: Jaroslav Bachorik <jaroslav.bachorik@datadoghq.com>\nCo-authored-by: Laplie Anderson <laplie.anderson@datadoghq.com>", "committedDate": "2020-07-23T18:27:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjY0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462402641", "bodyText": "Java uses int as index of array and we can't create array more than Integer.MAX_VALUE .\nI don't understand why we are using long as offset in this interface and then we have to convert it to int anyway in  many places in implementation:\nhttps://github.com/DataDog/dd-trace-java/pull/1708/files#diff-d12c79eb0010a77cc4ca68b1b31d4225R43", "author": "lpriima", "createdAt": "2020-07-29T15:48:23Z", "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/LEB128Writer.java", "diffHunk": "@@ -0,0 +1,355 @@\n+package com.datadog.mlt.io;\n+\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+\n+public interface LEB128Writer {\n+  int EXT_BIT = 0x80;\n+  long COMPRESSED_INT_MASK = -EXT_BIT;\n+\n+  /**\n+   * Get a default {@linkplain LEB128Writer} instance\n+   *\n+   * @return a new instance of {@linkplain LEB128Writer}\n+   */\n+  static LEB128Writer getInstance() {\n+    return new LEB128ByteBufferWriter();\n+  }\n+\n+  /** Reset the writer. Discard any collected data and set position to 0. */\n+  void reset();\n+\n+  /**\n+   * Write {@linkplain Character} data in LEB128 encoding\n+   *\n+   * @param data the data\n+   * @return the writer instance for chaining\n+   */\n+  LEB128Writer writeChar(char data);\n+\n+  /**\n+   * Write {@linkplain Character} data in LEB128 encoding at the given offset\n+   *\n+   * @param offset the offset from which to start writing the data\n+   * @param data the data\n+   * @return the writer position after the data has been written\n+   */\n+  long writeChar(long offset, char data);", "originalCommit": "4ce4edac18053d5070d1474469b7fe4bc0c825ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMTYwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462821600", "bodyText": "This started with using mmapped file as the backing storage in mind. Hence 'long' index. But I agree that for our current (and any foreseeable future) usage an 'int' offset would be sufficient.", "author": "jbachorik", "createdAt": "2020-07-30T08:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMjIxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r464312215", "bodyText": "Refactored to int offset values.", "author": "jbachorik", "createdAt": "2020-08-03T09:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMDYzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462420639", "bodyText": "Do we need dd. prefix and/or ENV var support, Config and etc ... for this one ?", "author": "lpriima", "createdAt": "2020-07-29T16:14:09Z", "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/MLTChunkCollector.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.datadog.mlt.io;\n+\n+import it.unimi.dsi.fastutil.ints.IntArrayList;\n+import it.unimi.dsi.fastutil.ints.IntIterator;\n+import it.unimi.dsi.fastutil.ints.IntList;\n+import java.nio.ByteBuffer;\n+import java.util.function.Consumer;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+import lombok.Getter;\n+\n+public abstract class MLTChunkCollector implements IMLTChunk {\n+  /*\n+   * TODO seems like subtree compression is worse than plain full-tree deduplication\n+   *  when the subtree compression is finally removed this flag should go as well + subtree support in FrameSequence\n+   */\n+  private static final boolean USE_SUBTREE_COMPRESSION =\n+      Boolean.getBoolean(\"mlt.subtree_compression\");", "originalCommit": "4ce4edac18053d5070d1474469b7fe4bc0c825ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMjI4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462822288", "bodyText": "This should be gone - the subtree compression proved to be suboptimal for the data we are collecting for MLT. The flag as well as all the related functionality can safely be removed.", "author": "jbachorik", "createdAt": "2020-07-30T08:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMDYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMjAwNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r464312005", "bodyText": "Subtree compression removed. No need for the config any more.", "author": "jbachorik", "createdAt": "2020-08-03T09:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMDYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTY3MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462511671", "bodyText": "class without state? Should we mark all methods as static and add private constructor ?", "author": "lpriima", "createdAt": "2020-07-29T18:45:21Z", "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/MLTReader.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.datadog.mlt.io;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** The MLT binary format reader */\n+public final class MLTReader {", "originalCommit": "4ce4edac18053d5070d1474469b7fe4bc0c825ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNTUwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462825508", "bodyText": "\ud83d\udc4d", "author": "bantonsson", "createdAt": "2020-07-30T08:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTczNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462511737", "bodyText": "class without state? Should we mark all methods as static and add private constructor ?", "author": "lpriima", "createdAt": "2020-07-29T18:45:29Z", "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/MLTWriter.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package com.datadog.mlt.io;\n+\n+import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n+import it.unimi.dsi.fastutil.ints.IntSet;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+import java.util.function.IntConsumer;\n+\n+/** The MLT binary format writer */\n+public final class MLTWriter {", "originalCommit": "4ce4edac18053d5070d1474469b7fe4bc0c825ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzI1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462823252", "bodyText": "The eternal question whether to have all-static singletons or instance singletons :)\nI have no strong opinion either way - only that mocking would be impossible for all-static one.", "author": "jbachorik", "createdAt": "2020-07-30T08:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNjE2NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462826165", "bodyText": "\ud83d\udc4d", "author": "bantonsson", "createdAt": "2020-07-30T08:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4MzcxMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r463083713", "bodyText": "you don't have to mock something which doesn't have state :)", "author": "lpriima", "createdAt": "2020-07-30T15:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMTMyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r464311326", "bodyText": "Ok, all-static now.\nIn theory, you still can mock no-state class - eg. a factory impl which will return mock instanes in turn. But it is not the case here.", "author": "jbachorik", "createdAt": "2020-08-03T09:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTI3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r462819270", "bodyText": "So since this is not the full code, I couldn't figure out exactly how this is used, but I think that it would be good to mention that this data structure is not thread safe, to set expectations and avoid misuse.", "author": "bantonsson", "createdAt": "2020-07-30T07:59:50Z", "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/ConstantPool.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.datadog.mlt.io;\n+\n+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;\n+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;\n+import it.unimi.dsi.fastutil.objects.Object2IntMap;\n+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;\n+\n+/**\n+ * A generic constant pool implementation.", "originalCommit": "4ce4edac18053d5070d1474469b7fe4bc0c825ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMDQ2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1708#discussion_r464310466", "bodyText": "Done", "author": "jbachorik", "createdAt": "2020-08-03T09:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTI3MA=="}], "type": "inlineReview"}, {"oid": "ddc4158491efd9588ba6a1747aa49f98e8139500", "url": "https://github.com/DataDog/dd-trace-java/commit/ddc4158491efd9588ba6a1747aa49f98e8139500", "message": "Make MLTReader/Writer all static classes", "committedDate": "2020-08-03T07:28:07Z", "type": "commit"}, {"oid": "29b41952fc7a585e7626a24e8c93d393fae636aa", "url": "https://github.com/DataDog/dd-trace-java/commit/29b41952fc7a585e7626a24e8c93d393fae636aa", "message": "Use 'int' offsets rather than 'long' ones.", "committedDate": "2020-08-03T07:28:31Z", "type": "commit"}, {"oid": "5765725d2abba18b96ed1ecbadf8dbd2badbc59c", "url": "https://github.com/DataDog/dd-trace-java/commit/5765725d2abba18b96ed1ecbadf8dbd2badbc59c", "message": "Remove subtree compression", "committedDate": "2020-08-03T07:32:41Z", "type": "commit"}, {"oid": "7c5eda88369732cf120f0956242a793ed8a2f4f3", "url": "https://github.com/DataDog/dd-trace-java/commit/7c5eda88369732cf120f0956242a793ed8a2f4f3", "message": "Add note about ConstantPool not being thread safe.", "committedDate": "2020-08-03T07:37:46Z", "type": "commit"}, {"oid": "63ced687e9400acb1ee7b7db307d1df6b228d339", "url": "https://github.com/DataDog/dd-trace-java/commit/63ced687e9400acb1ee7b7db307d1df6b228d339", "message": "Add rudimentary tests for MLTWriter and MLTReader", "committedDate": "2020-08-03T09:44:13Z", "type": "commit"}, {"oid": "71bdd7516e9a4ee1ed86a480594f0433ff65499b", "url": "https://github.com/DataDog/dd-trace-java/commit/71bdd7516e9a4ee1ed86a480594f0433ff65499b", "message": "Update formatting", "committedDate": "2020-08-03T09:44:43Z", "type": "commit"}, {"oid": "a199cc3cc7ccf387990a663e13016eb453f53c71", "url": "https://github.com/DataDog/dd-trace-java/commit/a199cc3cc7ccf387990a663e13016eb453f53c71", "message": "Forbid instantiation of MLTReader and MLTWriter", "committedDate": "2020-08-03T09:52:18Z", "type": "commit"}, {"oid": "46004b459083e8c2738c5784a5f4d03e0c66b32f", "url": "https://github.com/DataDog/dd-trace-java/commit/46004b459083e8c2738c5784a5f4d03e0c66b32f", "message": "Attempt at fixing the intermittently failing test", "committedDate": "2020-08-03T10:26:24Z", "type": "commit"}, {"oid": "9e70249d7d0628e07da798019a2c00383916679a", "url": "https://github.com/DataDog/dd-trace-java/commit/9e70249d7d0628e07da798019a2c00383916679a", "message": "Add debug", "committedDate": "2020-08-03T10:38:51Z", "type": "commit"}, {"oid": "227442f76a618143fc78948a666b71500d7c3e98", "url": "https://github.com/DataDog/dd-trace-java/commit/227442f76a618143fc78948a666b71500d7c3e98", "message": "Add even more debug", "committedDate": "2020-08-03T10:46:55Z", "type": "commit"}, {"oid": "2b6d69534f5b56cadf4d472870925d89ce218add", "url": "https://github.com/DataDog/dd-trace-java/commit/2b6d69534f5b56cadf4d472870925d89ce218add", "message": "Fix format. Seems to prevent running up-to-date tests on CI.", "committedDate": "2020-08-03T10:59:08Z", "type": "commit"}, {"oid": "9ad92c302184d5773a0bd4a3577f707393b8e628", "url": "https://github.com/DataDog/dd-trace-java/commit/9ad92c302184d5773a0bd4a3577f707393b8e628", "message": "The tests must be fixed!", "committedDate": "2020-08-03T13:34:04Z", "type": "commit"}, {"oid": "c8b841d53facfe32961b932436ce1787d000cc89", "url": "https://github.com/DataDog/dd-trace-java/commit/c8b841d53facfe32961b932436ce1787d000cc89", "message": "One more attempt to fix handling of LEB128Writer", "committedDate": "2020-08-03T14:24:19Z", "type": "commit"}]}