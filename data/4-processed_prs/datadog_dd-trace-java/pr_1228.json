{"pr_number": 1228, "pr_title": "Cache the result of toString in BigInteger", "pr_createdAt": "2020-02-18T23:10:50Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1228", "timeline": [{"oid": "3c6b840d6987747b7262b50d8c76ca52761dd3a7", "url": "https://github.com/DataDog/dd-trace-java/commit/3c6b840d6987747b7262b50d8c76ca52761dd3a7", "message": "Cache the result of toString in BigInteger", "committedDate": "2020-02-18T23:04:50Z", "type": "commit"}, {"oid": "4ee46882532b0d3e3df803d46c2b29d2c9d1b01b", "url": "https://github.com/DataDog/dd-trace-java/commit/4ee46882532b0d3e3df803d46c2b29d2c9d1b01b", "message": "java 8", "committedDate": "2020-02-18T23:20:53Z", "type": "commit"}, {"oid": "fc6c327705d784d4d3c46cea973ad63502603409", "url": "https://github.com/DataDog/dd-trace-java/commit/fc6c327705d784d4d3c46cea973ad63502603409", "message": "formatting", "committedDate": "2020-02-19T01:40:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjg0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1228#discussion_r382112842", "bodyText": "Technically this isn't threadsafe, but in practice I don't think it matters.", "author": "tylerbenson", "createdAt": "2020-02-20T16:28:53Z", "path": "dd-trace-ot/src/main/java/datadog/opentracing/StringCachingBigInteger.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package datadog.opentracing;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+\n+/**\n+ * Because we are using BigInteger for Trace and Span Id, the toString() operator may result in\n+ * heavy computation and string allocation overhead. In order to limit this, we are caching the\n+ * result of toString, thereby taking advantage of the immutability of BigInteger.\n+ */\n+public class StringCachingBigInteger extends BigInteger {\n+\n+  private String cachedString;", "originalCommit": "fc6c327705d784d4d3c46cea973ad63502603409", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyODQ5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1228#discussion_r382128492", "bodyText": "Yes, in this case, it will work, since the calculation is idempotent.\nEach thread will eventually make the null -> non-null transition.\nThis is the same basic strategy employed by String for the hashCode calculation.\nThe downside is a potential for a bit of extra allocation compared to the \"ideal\", but that's a reasonable trade-off.\nThis will already save a great deal on allocation and keeping the coordination overhead down is also important.\nIt could be made volatile, but we'd still have the same fundamental race -- so I think this is good as is.", "author": "dougqh", "createdAt": "2020-02-20T16:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjg0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNjgxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1228#discussion_r382226814", "bodyText": "keeping the coordination overhead down is also important.\n\nSuper agreed on this point. The overhead in a massively parallel/concurrent environment would not be worth locking this value", "author": "aarya123", "createdAt": "2020-02-20T20:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjg0Mg=="}], "type": "inlineReview"}, {"oid": "17b4fae39c88f7cf7f34bc9d8d97096e596f3583", "url": "https://github.com/DataDog/dd-trace-java/commit/17b4fae39c88f7cf7f34bc9d8d97096e596f3583", "message": "Ignores for coverage", "committedDate": "2020-02-20T20:00:28Z", "type": "commit"}]}