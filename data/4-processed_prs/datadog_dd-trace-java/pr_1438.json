{"pr_number": 1438, "pr_title": "Call the new MLT API on various Span Activations", "pr_createdAt": "2020-05-07T20:55:54Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1438", "timeline": [{"oid": "f16619adb2e8c05904e7f46c9977a87dddb8fd9c", "url": "https://github.com/DataDog/dd-trace-java/commit/f16619adb2e8c05904e7f46c9977a87dddb8fd9c", "message": "Add additional heuristics.", "committedDate": "2020-05-13T21:27:50Z", "type": "forcePushed"}, {"oid": "c9567e77832623674dfbed5ad50ebc69936d196c", "url": "https://github.com/DataDog/dd-trace-java/commit/c9567e77832623674dfbed5ad50ebc69936d196c", "message": "Invoke the profiler API", "committedDate": "2020-05-14T21:51:10Z", "type": "forcePushed"}, {"oid": "7214bfad985fab116ce2f3c37e68bf6ca267f344", "url": "https://github.com/DataDog/dd-trace-java/commit/7214bfad985fab116ce2f3c37e68bf6ca267f344", "message": "sync with master.", "committedDate": "2020-05-15T19:53:52Z", "type": "forcePushed"}, {"oid": "64e6b697802f36a5f57623a22a40cd87caff2726", "url": "https://github.com/DataDog/dd-trace-java/commit/64e6b697802f36a5f57623a22a40cd87caff2726", "message": "sync with master.", "committedDate": "2020-05-19T13:17:34Z", "type": "forcePushed"}, {"oid": "c2528ea0e2b50d1b55218bdc52400063624afce7", "url": "https://github.com/DataDog/dd-trace-java/commit/c2528ea0e2b50d1b55218bdc52400063624afce7", "message": "First pass at using histograms for tracking trace duration", "committedDate": "2020-05-19T14:00:34Z", "type": "commit"}, {"oid": "2d7498561947a169c6c02ea5ca8660aaff48e7b1", "url": "https://github.com/DataDog/dd-trace-java/commit/2d7498561947a169c6c02ea5ca8660aaff48e7b1", "message": "Add additional heuristics.", "committedDate": "2020-05-19T14:00:34Z", "type": "commit"}, {"oid": "da383afc7d93be0d9816f80d63a5b0412bec7ee9", "url": "https://github.com/DataDog/dd-trace-java/commit/da383afc7d93be0d9816f80d63a5b0412bec7ee9", "message": "Invoke the profiler API", "committedDate": "2020-05-19T14:00:34Z", "type": "commit"}, {"oid": "1ef70d73f541be59543363c0ec9a155b68e757a2", "url": "https://github.com/DataDog/dd-trace-java/commit/1ef70d73f541be59543363c0ec9a155b68e757a2", "message": "sync with master.", "committedDate": "2020-05-19T14:00:34Z", "type": "forcePushed"}, {"oid": "b5f2e5e9770b4d022bb516fe83a6c077eea28402", "url": "https://github.com/DataDog/dd-trace-java/commit/b5f2e5e9770b4d022bb516fe83a6c077eea28402", "message": "sync with master.", "committedDate": "2020-05-19T14:02:56Z", "type": "forcePushed"}, {"oid": "585ea5c3c831c4ec1cd655906ad58b5859ff09f1", "url": "https://github.com/DataDog/dd-trace-java/commit/585ea5c3c831c4ec1cd655906ad58b5859ff09f1", "message": "sync with master.", "committedDate": "2020-05-19T14:06:02Z", "type": "commit"}, {"oid": "585ea5c3c831c4ec1cd655906ad58b5859ff09f1", "url": "https://github.com/DataDog/dd-trace-java/commit/585ea5c3c831c4ec1cd655906ad58b5859ff09f1", "message": "sync with master.", "committedDate": "2020-05-19T14:06:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMjk3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1438#discussion_r427422974", "bodyText": "I think these numbers should be config params.  I can imagine in local testing wanting to change them around a bit.", "author": "randomanderson", "createdAt": "2020-05-19T16:08:51Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/TraceProfilingScopeManager.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.core.scopemanager;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.context.TraceScope;\n+import datadog.trace.core.DDSpan;\n+import datadog.trace.core.interceptor.TraceStatsCollector;\n+import datadog.trace.profiling.Profiler;\n+import datadog.trace.profiling.Session;\n+import java.util.concurrent.TimeUnit;\n+import org.HdrHistogram.Histogram;\n+\n+public class TraceProfilingScopeManager extends ScopeInterceptor.DelegatingInterceptor {\n+  private static final long MAX_NANOSECONDS_BETWEEN_ACTIVATIONS = TimeUnit.SECONDS.toNanos(1);\n+  private static final double ACTIVATIONS_PER_SECOND = 5;\n+  private static final ThreadLocal<Boolean> IS_THREAD_PROFILING =\n+      new ThreadLocal<Boolean>() {\n+        @Override\n+        protected Boolean initialValue() {\n+          return false;\n+        }\n+      };\n+\n+  private final TraceStatsCollector statsCollector;\n+  private final RateLimiter rateLimiter = RateLimiter.create(ACTIVATIONS_PER_SECOND);\n+  private volatile long lastProfileTimestamp = System.nanoTime();\n+\n+  public TraceProfilingScopeManager(\n+      final TraceStatsCollector statsCollector, final ScopeInterceptor delegate) {\n+    super(delegate);\n+    this.statsCollector = statsCollector;\n+  }\n+\n+  @Override\n+  public Scope handleSpan(final AgentSpan span) {\n+    if (IS_THREAD_PROFILING.get() // don't need to waste a permit if so.\n+        || !(span instanceof DDSpan)\n+        || !maybeInteresting((DDSpan) span)\n+        || !acquireProfilePermit()) {\n+      // We don't want to wrap the scope for profiling.\n+      return delegate.handleSpan(span);\n+    }\n+    lastProfileTimestamp = System.nanoTime();\n+    return new TraceProfilingScope(delegate.handleSpan(span));\n+  }\n+\n+  private boolean maybeInteresting(final DDSpan span) {\n+    final Histogram traceStats = statsCollector.getTraceStats(span);\n+    if (traceStats == null) {\n+      // No historical data for this trace yet.\n+      return false;\n+    }\n+    final Histogram overallStats = statsCollector.getOverallStats();\n+\n+    final long traceAverage = traceStats.getValueAtPercentile(50);\n+    final long overall80 = overallStats.getValueAtPercentile(80);\n+    if (overall80 < traceAverage) {\n+      // This trace is likely to be slower than most, so lets profile it.\n+      return true;\n+    }\n+\n+    final long traceCount = traceStats.getTotalCount();\n+    final long overallCount = overallStats.getTotalCount();\n+    if (3 < traceCount && traceCount < (overallCount * .9)) {\n+      // This is an uncommon trace (but not unique), so lets profile it.\n+      return true;\n+    }\n+\n+    if (lastProfileTimestamp + MAX_NANOSECONDS_BETWEEN_ACTIVATIONS < System.nanoTime()) {", "originalCommit": "585ea5c3c831c4ec1cd655906ad58b5859ff09f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzNDIzNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1438#discussion_r427434234", "bodyText": "good idea.  I'm going to merge this PR, then cover more config and testing separately.", "author": "tylerbenson", "createdAt": "2020-05-19T16:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMjk3NA=="}], "type": "inlineReview"}]}