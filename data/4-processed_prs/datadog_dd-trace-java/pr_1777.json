{"pr_number": 1777, "pr_title": "Fix db query is not get when using scalikejdbc", "pr_createdAt": "2020-08-16T11:05:20Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1777", "timeline": [{"oid": "13cf0703c63a30433241c91392358da76523745f", "url": "https://github.com/DataDog/dd-trace-java/commit/13cf0703c63a30433241c91392358da76523745f", "message": "Add scala dependencies.", "committedDate": "2020-08-16T08:40:09Z", "type": "commit"}, {"oid": "35607b6dfaa014085f03dd1e1f18f1d487e4fa3a", "url": "https://github.com/DataDog/dd-trace-java/commit/35607b6dfaa014085f03dd1e1f18f1d487e4fa3a", "message": "Add scalikejdbc test.", "committedDate": "2020-08-16T10:47:35Z", "type": "commit"}, {"oid": "0fe5fce3c2adc381b48485903f2fd7010de9d078", "url": "https://github.com/DataDog/dd-trace-java/commit/0fe5fce3c2adc381b48485903f2fd7010de9d078", "message": "Ignore DBConnectionAttributesWiredPreparedStatement.", "committedDate": "2020-08-16T10:48:09Z", "type": "commit"}, {"oid": "3e650ea1dccb31cb2bb2773dafa3f7f669a6a9f5", "url": "https://github.com/DataDog/dd-trace-java/commit/3e650ea1dccb31cb2bb2773dafa3f7f669a6a9f5", "message": "Add latestDepTestCompile.", "committedDate": "2020-08-16T11:27:39Z", "type": "commit"}, {"oid": "3e650ea1dccb31cb2bb2773dafa3f7f669a6a9f5", "url": "https://github.com/DataDog/dd-trace-java/commit/3e650ea1dccb31cb2bb2773dafa3f7f669a6a9f5", "message": "Add latestDepTestCompile.", "committedDate": "2020-08-16T11:27:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5OTQ4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1777#discussion_r471499489", "bodyText": "@orekyuu This seems to be the only functional change. Can you better explain how this solves the problem?", "author": "tylerbenson", "createdAt": "2020-08-17T14:01:11Z", "path": "dd-java-agent/instrumentation/jdbc/src/main/java/datadog/trace/instrumentation/jdbc/PreparedStatementInstrumentation.java", "diffHunk": "@@ -39,7 +40,8 @@ public PreparedStatementInstrumentation() {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.sql.PreparedStatement\"));\n+    return implementsInterface(named(\"java.sql.PreparedStatement\"))\n+        .and(not(named(\"scalikejdbc.DBConnectionAttributesWiredPreparedStatement\")));", "originalCommit": "3e650ea1dccb31cb2bb2773dafa3f7f669a6a9f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUzNzkzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1777#discussion_r471537932", "bodyText": "Before the change, the following was executed.\n\nCall prepareStatement method in scalikejdbc.DBSession#createStatementExecutor. (https://github.com/scalikejdbc/scalikejdbc/blob/3f24bdb57af36eeb2ea636710e8845773fad19f1/scalikejdbc-core/src/main/scala/scalikejdbc/DBSession.scala#L87 )\nIn JDBCMaps.preparedStatements, save SQL with raw PreparedStatement as key.\nDBSession wraps PreparedStatement with DBConnectionAttributesWiredPreparedStatement ( https://github.com/scalikejdbc/scalikejdbc/blob/3f24bdb57af36eeb2ea636710e8845773fad19f1/scalikejdbc-core/src/main/scala/scalikejdbc/DBSession.scala#L93 )\nGet SQL using JDBCConnectionAttributesWiredPreparedStatement from JDBCMaps.preparedStatements but no value exists.\n\nIgnoring the DBConnectionAttributesWiredPreparedStatement and using the raw PreparedStatement should work as expected. \ud83e\udd14", "author": "orekyuu", "createdAt": "2020-08-17T14:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5OTQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MDM2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1777#discussion_r471570361", "bodyText": "Ok, so ignoring the wrapped one allows the instrumentation to be properly applied on the \"underlying\" one?", "author": "tylerbenson", "createdAt": "2020-08-17T15:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5OTQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NzE3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1777#discussion_r471587174", "bodyText": "When JDBCConnectionAttributesWiredPreparedStatement#execute was called, span was recorded there. However, if JDBCConnectionAttributesWiredPreparedStatement is ignored, the span will be recorded by the execute of another PreparedStatement (for example, HikariProxyPreparedStatement), so it looks like the expected behavior.", "author": "orekyuu", "createdAt": "2020-08-17T16:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5OTQ4OQ=="}], "type": "inlineReview"}, {"oid": "6936606b328fe0bfe962f2f9597af48003731140", "url": "https://github.com/DataDog/dd-trace-java/commit/6936606b328fe0bfe962f2f9597af48003731140", "message": "Move unit test to scalike project.", "committedDate": "2020-08-19T11:07:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4OTQ0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1777#discussion_r473089442", "bodyText": "One last request... please move this to :dd-java-agent:instrumentation:jdbc:scalikejdbc then we'll be good to go.", "author": "tylerbenson", "createdAt": "2020-08-19T14:50:19Z", "path": "settings.gradle", "diffHunk": "@@ -145,6 +145,7 @@ include ':dd-java-agent:instrumentation:reactor-core-3.1'\n include ':dd-java-agent:instrumentation:rmi'\n include ':dd-java-agent:instrumentation:rxjava-1'\n include ':dd-java-agent:instrumentation:scala-concurrent'\n+include ':dd-java-agent:instrumentation:scalikejdbc'", "originalCommit": "6936606b328fe0bfe962f2f9597af48003731140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "06228d9fe4e34c44bc874cb7776eb17d7fa67623", "url": "https://github.com/DataDog/dd-trace-java/commit/06228d9fe4e34c44bc874cb7776eb17d7fa67623", "message": "Change project location.", "committedDate": "2020-08-19T15:01:26Z", "type": "commit"}]}