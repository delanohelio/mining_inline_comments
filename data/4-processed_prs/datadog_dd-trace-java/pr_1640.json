{"pr_number": 1640, "pr_title": "Deadlock detection JFR events", "pr_createdAt": "2020-06-29T16:29:38Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1640", "timeline": [{"oid": "709d834d1203bb74542e14423d6a5f7d0f1b45a2", "url": "https://github.com/DataDog/dd-trace-java/commit/709d834d1203bb74542e14423d6a5f7d0f1b45a2", "message": "Deadlock detection JFR events", "committedDate": "2020-06-29T17:07:31Z", "type": "commit"}, {"oid": "709d834d1203bb74542e14423d6a5f7d0f1b45a2", "url": "https://github.com/DataDog/dd-trace-java/commit/709d834d1203bb74542e14423d6a5f7d0f1b45a2", "message": "Deadlock detection JFR events", "committedDate": "2020-06-29T17:07:31Z", "type": "forcePushed"}, {"oid": "73e6cee49e41b1d110b24a15b01164097886a067", "url": "https://github.com/DataDog/dd-trace-java/commit/73e6cee49e41b1d110b24a15b01164097886a067", "message": "Guard DeadlockEvent registration", "committedDate": "2020-06-29T17:59:21Z", "type": "commit"}, {"oid": "d0a57c9bca21e2beb0db732dde331169d53e055c", "url": "https://github.com/DataDog/dd-trace-java/commit/d0a57c9bca21e2beb0db732dde331169d53e055c", "message": "Formatting!", "committedDate": "2020-06-29T18:17:56Z", "type": "commit"}, {"oid": "c7d200ca519181a63f550fa7db6a857f9927723a", "url": "https://github.com/DataDog/dd-trace-java/commit/c7d200ca519181a63f550fa7db6a857f9927723a", "message": "Enforce same order for the collected events", "committedDate": "2020-06-30T10:02:14Z", "type": "commit"}, {"oid": "a95a8d0e16d29b0cb07eab5700943a0f997dd147", "url": "https://github.com/DataDog/dd-trace-java/commit/a95a8d0e16d29b0cb07eab5700943a0f997dd147", "message": "Format!", "committedDate": "2020-06-30T10:14:51Z", "type": "commit"}, {"oid": "ad107ba2e68d7d93184bb99931986d4d7a1ccaf7", "url": "https://github.com/DataDog/dd-trace-java/commit/ad107ba2e68d7d93184bb99931986d4d7a1ccaf7", "message": "Move the event registration to where it does not break wildfly", "committedDate": "2020-06-30T11:09:24Z", "type": "commit"}, {"oid": "83905084c6ebd6e997ee8cc12e6f8844cf091179", "url": "https://github.com/DataDog/dd-trace-java/commit/83905084c6ebd6e997ee8cc12e6f8844cf091179", "message": "Format!", "committedDate": "2020-06-30T11:12:16Z", "type": "commit"}, {"oid": "71ed3af3261823a85210d08faf315882089d7006", "url": "https://github.com/DataDog/dd-trace-java/commit/71ed3af3261823a85210d08faf315882089d7006", "message": "Revert @Slf4j annotation", "committedDate": "2020-06-30T13:04:46Z", "type": "commit"}, {"oid": "a5e068845279a6d1cecb1094779e907bbedc86fa", "url": "https://github.com/DataDog/dd-trace-java/commit/a5e068845279a6d1cecb1094779e907bbedc86fa", "message": "Remove the debug wait. Argh!", "committedDate": "2020-07-01T07:09:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2NTYyNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448165625", "bodyText": "Like for MLT we may have an issue regarding initializing or using JMX to early no?", "author": "jpbempel", "createdAt": "2020-07-01T07:21:13Z", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/events/DeadlockEventFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.datadog.profiling.controller.openjdk.events;\n+\n+import java.lang.management.LockInfo;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MonitorInfo;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+\n+public class DeadlockEventFactory {\n+  private static final DeadlockEvent DEADLOCK_EVENT = new DeadlockEvent();\n+  private static final DeadlockedThreadEvent DEADLOCKED_THREAD_EVENT = new DeadlockedThreadEvent();\n+\n+  private final ThreadMXBean threadMXBean;\n+  private final AtomicLong deadlockCounter = new AtomicLong();\n+\n+  public static void registerEvents() {\n+    FlightRecorder.addPeriodicEvent(DeadlockEvent.class, DeadlockEvent::emit);\n+  }\n+\n+  DeadlockEventFactory(ThreadMXBean threadMXBean) {\n+    this.threadMXBean = threadMXBean;\n+  }\n+\n+  DeadlockEventFactory() {\n+    this(ManagementFactory.getThreadMXBean());", "originalCommit": "a5e068845279a6d1cecb1094779e907bbedc86fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNDAwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448234001", "bodyText": "\ud83d\ude2d Yeah. Possible. Although all our smoke tests are passing - this class is touched only when a recording is being started and at that moment everything else is up. But I know we were protecting against a very improbable event that there happen to be a JVM doing eager load of class constants (not that I know of any in real life). Let me try put it in the right place so we don't crash in that hypothetical case.", "author": "jbachorik", "createdAt": "2020-07-01T09:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2NTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTE1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448255159", "bodyText": "Done", "author": "jbachorik", "createdAt": "2020-07-01T10:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2NTYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2ODMzMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448168331", "bodyText": "could we at least store the Thread Ids for this event, it could be sufficient for correlating and identifying deadlocked threads, no?", "author": "jpbempel", "createdAt": "2020-07-01T07:26:14Z", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/events/DeadlockEventFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.datadog.profiling.controller.openjdk.events;\n+\n+import java.lang.management.LockInfo;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MonitorInfo;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+\n+public class DeadlockEventFactory {\n+  private static final DeadlockEvent DEADLOCK_EVENT = new DeadlockEvent();\n+  private static final DeadlockedThreadEvent DEADLOCKED_THREAD_EVENT = new DeadlockedThreadEvent();\n+\n+  private final ThreadMXBean threadMXBean;\n+  private final AtomicLong deadlockCounter = new AtomicLong();\n+\n+  public static void registerEvents() {\n+    FlightRecorder.addPeriodicEvent(DeadlockEvent.class, DeadlockEvent::emit);\n+  }\n+\n+  DeadlockEventFactory(ThreadMXBean threadMXBean) {\n+    this.threadMXBean = threadMXBean;\n+  }\n+\n+  DeadlockEventFactory() {\n+    this(ManagementFactory.getThreadMXBean());\n+  }\n+\n+  final List<? extends Event> collectEvents() {\n+    if (!isDeadlockEventEnabled()) {\n+      return Collections.emptyList();\n+    }\n+\n+    long[] locked = threadMXBean.findDeadlockedThreads();\n+    if (locked == null) {\n+      return Collections.emptyList();\n+    }\n+    long id = deadlockCounter.getAndIncrement();\n+\n+    List<Event> events = new ArrayList<>();\n+    DeadlockEvent event = new DeadlockEvent(id, locked.length);", "originalCommit": "a5e068845279a6d1cecb1094779e907bbedc86fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNTA4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448235086", "bodyText": "I was trying to explain this in the description - we are severely limited by not being able to have array/collection attributes. There is no good way to store thread IDs short of putting them to a comma delimited string which is kind of off-putting ... That's why there is the 'deadlock ID' concept so we can emit events per deadlocked thread and relate them back to the primary event.", "author": "jbachorik", "createdAt": "2020-07-01T09:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2ODMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzOTQ3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448239470", "bodyText": "right, I overlooked the description :)\nlet's keep it that way for now, we will see if it's wirth to improve with the list of thread ids encoded.", "author": "jpbempel", "createdAt": "2020-07-01T09:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2ODMzMQ=="}], "type": "inlineReview"}, {"oid": "a017d77f0101e4f2658e83cfd2be89bbd446707f", "url": "https://github.com/DataDog/dd-trace-java/commit/a017d77f0101e4f2658e83cfd2be89bbd446707f", "message": "Let's do the JMX initialization jiggle-wiggle", "committedDate": "2020-07-01T09:59:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2OTk1NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448269955", "bodyText": "are you sure about this change?\nit seems to desynchronize later access to AGENT_CLASSLOADER in this method", "author": "jpbempel", "createdAt": "2020-07-01T10:28:53Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -264,12 +264,27 @@ private static synchronized void installDatadogTracer() {\n   private static synchronized void startJmx(final URL bootstrapURL) {\n     startJmxFetch(bootstrapURL);\n     initializeJmxThreadCpuTimeProvider();\n+    registerDeadlockDetectionEvent(bootstrapURL);\n+  }\n+\n+  private static synchronized void registerDeadlockDetectionEvent(URL bootstrapUrl) {\n+    log.info(\"Initializing JMX thread deadlock detector\");\n+    try {\n+      ClassLoader classLoader = getProfilingClassloader(bootstrapUrl);\n+      final Class<?> deadlockFactoryClass =\n+          classLoader.loadClass(\n+              \"com.datadog.profiling.controller.openjdk.events.DeadlockEventFactory\");\n+      final Method registerMethod = deadlockFactoryClass.getMethod(\"registerEvents\");\n+      registerMethod.invoke(null);\n+    } catch (final Throwable ex) {\n+      log.error(\"Throwable thrown while initializing JMX thread deadlock detector\", ex);\n+    }\n   }\n \n   /** Enable JMX based thread CPU time provider once it is safe to touch JMX */\n   private static synchronized void initializeJmxThreadCpuTimeProvider() {\n     log.info(\"Initializing JMX thread CPU time provider\");\n-    if (AGENT_CLASSLOADER == null) {\n+    if (PROFILING_CLASSLOADER == null) {", "originalCommit": "a017d77f0101e4f2658e83cfd2be89bbd446707f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NDQ0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448274442", "bodyText": "\ud83d\udca9 this is totally wrong. thanks for catching it. somehow I messed up while renaming ...", "author": "jbachorik", "createdAt": "2020-07-01T10:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2OTk1NQ=="}], "type": "inlineReview"}, {"oid": "28bfd16c0716ff2438b60e3bded1a16f625056b6", "url": "https://github.com/DataDog/dd-trace-java/commit/28bfd16c0716ff2438b60e3bded1a16f625056b6", "message": "Clean up the mess with incorrect class loader check", "committedDate": "2020-07-01T10:38:40Z", "type": "commit"}]}