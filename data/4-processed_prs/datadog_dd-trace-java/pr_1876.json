{"pr_number": 1876, "pr_title": "Port Reactor fixes from OTel", "pr_createdAt": "2020-09-16T15:00:59Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1876", "timeline": [{"oid": "3e85a2f53ed0a45cfc043333cb644d40e556677e", "url": "https://github.com/DataDog/dd-trace-java/commit/3e85a2f53ed0a45cfc043333cb644d40e556677e", "message": "Finish the port", "committedDate": "2020-09-16T19:23:35Z", "type": "forcePushed"}, {"oid": "9a4d875d184c7f4dcf452e46ae2e29593b032a09", "url": "https://github.com/DataDog/dd-trace-java/commit/9a4d875d184c7f4dcf452e46ae2e29593b032a09", "message": "not sure why java 8 requires this.....", "committedDate": "2020-09-23T19:19:46Z", "type": "forcePushed"}, {"oid": "5fd7700299d28d9e807d097fe3ec268e5cd7e04f", "url": "https://github.com/DataDog/dd-trace-java/commit/5fd7700299d28d9e807d097fe3ec268e5cd7e04f", "message": "not sure why java 8 requires this.....", "committedDate": "2020-09-23T19:36:51Z", "type": "forcePushed"}, {"oid": "d622b6555febd89940259ebfed947af07f3648bb", "url": "https://github.com/DataDog/dd-trace-java/commit/d622b6555febd89940259ebfed947af07f3648bb", "message": "Test won't work", "committedDate": "2020-09-24T13:45:19Z", "type": "forcePushed"}, {"oid": "400da2d065d60eea3fc79dc386bc66c7bcc826d7", "url": "https://github.com/DataDog/dd-trace-java/commit/400da2d065d60eea3fc79dc386bc66c7bcc826d7", "message": "hmmmmmm", "committedDate": "2020-09-29T19:23:37Z", "type": "forcePushed"}, {"oid": "d5c344d68007435a06f3470e007b3ee2d5a6e5da", "url": "https://github.com/DataDog/dd-trace-java/commit/d5c344d68007435a06f3470e007b3ee2d5a6e5da", "message": "Fix merge/rebase", "committedDate": "2020-10-01T15:41:50Z", "type": "forcePushed"}, {"oid": "d04013407b67ceb7bd01ac9b0629445d0e36b41c", "url": "https://github.com/DataDog/dd-trace-java/commit/d04013407b67ceb7bd01ac9b0629445d0e36b41c", "message": "Start from no continuations. Fix other things from here", "committedDate": "2020-10-06T15:04:02Z", "type": "forcePushed"}, {"oid": "baf105de8223d306f621214d1a414f4bbf2dff7b", "url": "https://github.com/DataDog/dd-trace-java/commit/baf105de8223d306f621214d1a414f4bbf2dff7b", "message": "Start from no continuations. Fix other things from here", "committedDate": "2020-10-06T15:16:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NTYyOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508755628", "bodyText": "Reverting changes here. Auto-formatter changed this when I was adding debug logging", "author": "devinsba", "createdAt": "2020-10-20T18:40:35Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -40,7 +40,7 @@\n     private final CoreTracer tracer;", "originalCommit": "a796b7192d04f15b678629faf62629b858ca834e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NTc3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508755779", "bodyText": "Reverting changes here. Auto-formatter changed this when I was adding debug logging", "author": "devinsba", "createdAt": "2020-10-20T18:40:43Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScopeManager.java", "diffHunk": "@@ -79,7 +79,7 @@ public AgentScope activate(final AgentSpan span, final ScopeSource source) {\n ", "originalCommit": "a796b7192d04f15b678629faf62629b858ca834e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NjIyOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508756229", "bodyText": "This changes the behavior of the test to pass. Will fix in follow up", "author": "devinsba", "createdAt": "2020-10-20T18:41:08Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientBase.groovy", "diffHunk": "@@ -31,11 +31,10 @@ abstract class SpringWebfluxHttpClientBase extends HttpClientTest {\n       .uri(uri)\n       .headers { h -> headers.forEach({ key, value -> h.add(key, value) }) }\n       .exchange()\n-      .doAfterSuccessOrError { res, ex ->\n-        callback?.call()\n-      }\n       .block()\n \n+    callback?.call()", "originalCommit": "a796b7192d04f15b678629faf62629b858ca834e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NjQ0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508756440", "bodyText": "This disables a test that should pass. Will fix in follow up", "author": "devinsba", "createdAt": "2020-10-20T18:41:28Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientBase.groovy", "diffHunk": "@@ -109,6 +108,10 @@ abstract class SpringWebfluxHttpClientBase extends HttpClientTest {\n     false\n   }\n \n+  boolean testCallbackWithParent() {\n+    false\n+  }", "originalCommit": "a796b7192d04f15b678629faf62629b858ca834e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NzQzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508757437", "bodyText": "This is another modeling issue but I don't feel as strongly about this one to fix it in a follow-up", "author": "devinsba", "createdAt": "2020-10-20T18:42:38Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/SpringWebfluxTest.groovy", "diffHunk": "@@ -176,7 +176,7 @@ class SpringWebfluxTest extends AgentTestRunner {\n             resourceName \"TestController.tracedMethod\"\n             operationName \"trace.annotation\"\n           }\n-          childOf(span(1))\n+          childOf(span(0)) // FIXME this is wrong", "originalCommit": "a796b7192d04f15b678629faf62629b858ca834e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMDk1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508820959", "bodyText": "Logically this seems like it should be a child of 1, not 0, right?  Might be worth understanding what's going on here.", "author": "tylerbenson", "createdAt": "2020-10-20T20:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NzQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM2ODI2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509368262", "bodyText": "The parent is the one at the time of the subscribe call, which is the root span, since it creates the stream that ends up calling the controller. So it ends up a sibling instead of child because the handler span doesn't exist yet at the time of stream construction", "author": "devinsba", "createdAt": "2020-10-21T15:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NzQzNw=="}], "type": "inlineReview"}, {"oid": "5750d3b3836d8bab290ec2dc1174f8f165fb6043", "url": "https://github.com/DataDog/dd-trace-java/commit/5750d3b3836d8bab290ec2dc1174f8f165fb6043", "message": "Put test back", "committedDate": "2020-10-20T18:52:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwOTkxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508809911", "bodyText": "Can this extend HttpClientTest instead?", "author": "tylerbenson", "createdAt": "2020-10-20T20:14:39Z", "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/ReactorNettyTest.groovy", "diffHunk": "@@ -0,0 +1,84 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.asserts.TraceAssert\n+import datadog.trace.api.DDSpanTypes\n+import datadog.trace.bootstrap.instrumentation.api.Tags\n+import datadog.trace.core.DDSpan\n+import reactor.netty.http.client.HttpClient\n+import reactor.netty.http.client.HttpClientResponse\n+import spock.lang.AutoCleanup\n+import spock.lang.Shared\n+\n+import static datadog.trace.agent.test.server.http.TestHttpServer.httpServer\n+import static datadog.trace.agent.test.utils.TraceUtils.basicSpan\n+import static datadog.trace.agent.test.utils.TraceUtils.runUnderTrace\n+\n+class ReactorNettyTest extends AgentTestRunner {", "originalCommit": "6e80455836f636258e538484823259b4d5e3d359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3MTE2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509371162", "bodyText": "Maybe, I considered this test slightly redundant so just ported as is", "author": "devinsba", "createdAt": "2020-10-21T15:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwOTkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMjQ5NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r510232494", "bodyText": "By redundant I mean that both of these clients are already covered by client tests. These are more like additional tests", "author": "devinsba", "createdAt": "2020-10-22T14:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwOTkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzNDc5Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r510934796", "bodyText": "Do we have reactor netty client tests elsewhere?  I don't see any usage of reactor.netty.http.client in our codebase.", "author": "tylerbenson", "createdAt": "2020-10-23T14:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwOTkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzNzYwNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r510937605", "bodyText": "reactor-netty is just the glue that wires netty to reactor. The client is covered by the netty and webflux client tests", "author": "devinsba", "createdAt": "2020-10-23T14:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwOTkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNDQxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508814417", "bodyText": "Why should this result in two different traces?  from the input above, I would expect a single trace.", "author": "tylerbenson", "createdAt": "2020-10-20T20:23:04Z", "path": "dd-java-agent/instrumentation/lettuce-5/src/test/groovy/Lettuce5ReactiveClientTest.groovy", "diffHunk": "@@ -383,14 +384,16 @@ class Lettuce5ReactiveClientTest extends AgentTestRunner {\n     when:\n     runUnderTrace(\"test-parent\") {\n       reactiveCommands.set(\"a\", \"1\")\n-        .then(reactiveCommands.get(\"a\")) // The get here is ending up in another trace\n+        .then(reactiveCommands.get(\"a\")) // The get here is reported separately\n         .subscribe()\n     }\n \n     then:\n-    assertTraces(1) {\n+    assertTraces(2) {", "originalCommit": "6e80455836f636258e538484823259b4d5e3d359", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3MDI1OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509370258", "bodyText": "When doing .subscribe() the flow executes in a non blocking manner. So the parent and the set are in the first trace, but when the set finishes the trace reports and then the get will end up in it's own trace", "author": "devinsba", "createdAt": "2020-10-21T15:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNDQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNTIxMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508815212", "bodyText": "Doesn't look like this is used.", "author": "tylerbenson", "createdAt": "2020-10-20T20:24:16Z", "path": "dd-java-agent/instrumentation/lettuce-5/src/test/groovy/Lettuce5ReactiveClientTest.groovy", "diffHunk": "@@ -438,14 +443,15 @@ class Lettuce5ReactiveClientTest extends AgentTestRunner {\n     when:\n     runUnderTrace(\"test-parent\") {\n       reactiveCommands.set(\"a\", \"1\")\n-        .then(reactiveCommands.get(\"a\")) // The get here is ending up in another trace\n-        .subscribeOn(Schedulers.elastic())\n+        .then(reactiveCommands.get(\"a\"))\n+        .subscribeOn(Schedulers.newParallel(\"test\"))\n         .subscribe()\n     }\n \n     then:\n     assertTraces(1) {\n       sortSpansByStart()\n+      DDSpan parentSpan", "originalCommit": "6e80455836f636258e538484823259b4d5e3d359", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNTk1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508815956", "bodyText": "\ud83d\udc4d", "author": "tylerbenson", "createdAt": "2020-10-20T20:25:22Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -23,24 +24,22 @@ class ReactorCoreTest extends AgentTestRunner {\n \n   @Shared\n   def addOne = { i ->\n-    // FIXME: Our clock implementation doesn't guarantee that start times are monotonic across\n-    //  traces, we base span start times on a millisecond time from the start of the trace and\n-    //  offset a number of nanos, this does not guarantee that the start times are monotonic. Thus\n-    //  2 traces started during the same millisecond might have the span start times wrong relative\n-    //  to each other. IE: TraceA and TraceB start at the same millisecond, SpanA1 starts, then\n-    //  SpanB1 starts. SpanB1 can have an earlier startTimeNano than SpanA1\n-    sleep(1)", "originalCommit": "6e80455836f636258e538484823259b4d5e3d359", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxOTI5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r508819290", "bodyText": "These are no longer needed... (same comment below)", "author": "tylerbenson", "createdAt": "2020-10-20T20:30:20Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/SpringWebfluxTest.groovy", "diffHunk": "@@ -122,7 +122,7 @@ class SpringWebfluxTest extends AgentTestRunner {\n     assertTraces(1) {\n       sortSpansByStart()\n       trace(3) {\n-        span {\n+        span(0) {", "originalCommit": "6e80455836f636258e538484823259b4d5e3d359", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd7aa317a736c468b4877e3d12bc7dd3875084b9", "url": "https://github.com/DataDog/dd-trace-java/commit/cd7aa317a736c468b4877e3d12bc7dd3875084b9", "message": "unused var", "committedDate": "2020-10-21T14:06:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NDIyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509384227", "bodyText": "Can we put REDIS_QUERY back in as the span name here?", "author": "richardstartin", "createdAt": "2020-10-21T15:26:05Z", "path": "dd-java-agent/instrumentation/lettuce-5/src/main/java8/datadog/trace/instrumentation/lettuce5/rx/LettuceMonoDualConsumer.java", "diffHunk": "@@ -17,20 +19,32 @@\n   private AgentSpan span = null;\n   private final RedisCommand command;\n   private final boolean finishSpanOnClose;\n+  private final AgentSpan parentSpan;\n \n   public LettuceMonoDualConsumer(final RedisCommand command, final boolean finishSpanOnClose) {\n     this.command = command;\n     this.finishSpanOnClose = finishSpanOnClose;\n+    parentSpan = activeSpan();\n   }\n \n   @Override\n   public void accept(final R r) {\n-    span = startSpan(REDIS_QUERY);\n-    DECORATE.afterStart(span);\n-    DECORATE.onCommand(span, command);\n-    if (finishSpanOnClose) {\n-      DECORATE.beforeFinish(span);\n-      span.finish();\n+    TraceScope parentScope = null;\n+    try {\n+      if (parentSpan != null) {\n+        parentScope = activateSpan(parentSpan);\n+      }\n+      span = startSpan(\"redis.query\");", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NTAxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509385011", "bodyText": "Can we also test on the elastic scheduler? Does this still work if you change the scheduler back?", "author": "richardstartin", "createdAt": "2020-10-21T15:27:04Z", "path": "dd-java-agent/instrumentation/lettuce-5/src/test/groovy/Lettuce5ReactiveClientTest.groovy", "diffHunk": "@@ -438,8 +443,8 @@ class Lettuce5ReactiveClientTest extends AgentTestRunner {\n     when:\n     runUnderTrace(\"test-parent\") {\n       reactiveCommands.set(\"a\", \"1\")\n-        .then(reactiveCommands.get(\"a\")) // The get here is ending up in another trace\n-        .subscribeOn(Schedulers.elastic())\n+        .then(reactiveCommands.get(\"a\"))\n+        .subscribeOn(Schedulers.newParallel(\"test\"))", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMTEwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r510231104", "bodyText": "The test becomes flaky with the other scheduler. I'll make a mental note to update this test in my followup", "author": "devinsba", "createdAt": "2020-10-22T14:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NTAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NTcwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509385704", "bodyText": "Is it OpenTracing or OpenTelemetry?", "author": "richardstartin", "createdAt": "2020-10-21T15:27:58Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/NOTICE.txt", "diffHunk": "@@ -0,0 +1,17 @@\n+This product contains a modified part of OpenTracing:", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MDI1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r510190253", "bodyText": "This NOTICE was copied from OTel, but their code was copied from opentracing", "author": "devinsba", "createdAt": "2020-10-22T14:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NTcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NjcwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509386706", "bodyText": "Since this will happen a lot with few distinct inputs can we wrap this string comparison in a ClassValue?", "author": "richardstartin", "createdAt": "2020-10-21T15:29:14Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingOperator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {\n+\n+  /**\n+   * Registers a hook that applies to every operator, propagating {@link Context} to downstream\n+   * callbacks to ensure spans in the {@link Context} are available throughout the lifetime of a\n+   * reactive stream. This should generally be called in a static initializer block in your\n+   * application.\n+   */\n+  public static void registerOnEachOperator() {\n+    Hooks.onEachOperator(TracingSubscriber.class.getName(), tracingLift());\n+  }\n+\n+  private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n+    return Operators.lift(new Lifter<>());\n+  }\n+\n+  public static class Lifter<T>\n+      implements BiFunction<Scannable, CoreSubscriber<? super T>, CoreSubscriber<? super T>> {\n+\n+    @Override\n+    public CoreSubscriber<? super T> apply(\n+        final Scannable publisher, final CoreSubscriber<? super T> sub) {\n+      // if Flux/Mono #just, #empty, #error\n+      if (publisher instanceof Fuseable.ScalarCallable\n+          || publisher.getClass().getName().startsWith(\"reactor.core.Scannable$Attr$\")) {", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIxNjE4Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r510216182", "bodyText": "\ud83d\udc4d", "author": "devinsba", "createdAt": "2020-10-22T14:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NjcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4OTk5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509389997", "bodyText": "I think parameterising the scheduler would be really helpful.", "author": "richardstartin", "createdAt": "2020-10-21T15:33:31Z", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -375,15 +350,30 @@ class ReactorCoreTest extends AgentTestRunner {\n     \"basic flux\" | 2         | { -> Flux.fromIterable([1, 2]).map(addOne) }\n   }\n \n+  def \"Fluxes produce the right number of results\"() {\n+    when:\n+    List<String> values = Flux.fromIterable(Arrays.asList(1, 2, 3, 4))\n+      .parallel()\n+      .runOn(Schedulers.parallel())", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5MjczNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1876#discussion_r509392736", "bodyText": "Can we change the span names back to the way they were - this improves serialisation performance.", "author": "richardstartin", "createdAt": "2020-10-21T15:37:07Z", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -2,77 +2,67 @@\n \n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n-import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n-import static datadog.trace.instrumentation.springwebflux.client.HttpHeadersInjectAdapter.SETTER;\n import static datadog.trace.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-import static datadog.trace.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.HTTP_REQUEST;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n-import datadog.trace.bootstrap.instrumentation.api.InstrumentationTags;\n-import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.util.List;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Mono;\n \n+/**\n+ * Based on Spring Sleuth's Reactor instrumentation.\n+ * https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientBeanPostProcessor.java\n+ */\n public class WebClientTracingFilter implements ExchangeFilterFunction {\n-  private static final WebClientTracingFilter INSTANCE = new WebClientTracingFilter();\n-\n   public static void addFilter(final List<ExchangeFilterFunction> exchangeFilterFunctions) {\n     // Since the builder where we instrument the build function can be reused, we need\n     // to only add the filter once\n-    int index = exchangeFilterFunctions.indexOf(INSTANCE);\n-    if (index == 0) {\n-      return;\n-    }\n-    if (index > 0) {\n-      exchangeFilterFunctions.remove(index);\n-    }\n-    exchangeFilterFunctions.add(0, INSTANCE);\n+    exchangeFilterFunctions.removeIf(\n+        filterFunction -> filterFunction instanceof WebClientTracingFilter);\n+    exchangeFilterFunctions.add(0, new WebClientTracingFilter());\n   }\n \n   @Override\n   public Mono<ClientResponse> filter(final ClientRequest request, final ExchangeFunction next) {\n-    final AgentSpan span;\n-    if (activeSpan() != null) {\n-      span = startSpan(HTTP_REQUEST, activeSpan().context());\n-    } else {\n-      span = startSpan(HTTP_REQUEST);\n-    }\n-    span.setTag(Tags.SPAN_KIND, Tags.SPAN_KIND_CLIENT);\n-    span.setTag(InstrumentationTags.DD_MEASURED, true);\n-    DECORATE.afterStart(span);\n+    return new MonoWebClientTrace(request, next);\n+  }\n+\n+  public static final class MonoWebClientTrace extends Mono<ClientResponse> {\n+    final ExchangeFunction next;\n+    final ClientRequest request;\n \n-    try (final AgentScope scope = activateSpan(span)) {\n-      scope.setAsyncPropagation(true);\n-      final ClientRequest mutatedRequest =\n-          ClientRequest.from(request)\n-              .attribute(AgentSpan.class.getName(), span)\n-              .headers(httpHeaders -> propagate().inject(span, httpHeaders, SETTER))\n-              .build();\n-      DECORATE.onRequest(span, mutatedRequest);\n+    public MonoWebClientTrace(final ClientRequest request, final ExchangeFunction next) {\n+      this.next = next;\n+      this.request = request;\n+    }\n \n-      return next.exchange(mutatedRequest)\n-          .doOnSuccessOrError(\n-              (clientResponse, throwable) -> {\n-                if (throwable != null) {\n-                  DECORATE.onError(span, throwable);\n-                } else {\n-                  DECORATE.onResponse(span, clientResponse);\n-                }\n-                DECORATE.beforeFinish(span);\n-                span.finish();\n-              })\n-          .doOnCancel(\n-              () -> {\n-                DECORATE.onCancel(span);\n-                DECORATE.beforeFinish(span);\n-                span.finish();\n-              });\n+    @Override\n+    public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n+      final AgentSpan span;\n+      if (activeSpan() != null) {\n+        span = startSpan(\"http.request\", activeSpan().context());", "originalCommit": "29d33311e0b0105cab65e1ef409eb41193c0ce57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec6105e6743995dd0a42687ec84e4632cb8693dd", "url": "https://github.com/DataDog/dd-trace-java/commit/ec6105e6743995dd0a42687ec84e4632cb8693dd", "message": "Port reactor instrumentation updates from OTel", "committedDate": "2020-10-23T13:49:25Z", "type": "commit"}, {"oid": "ec6105e6743995dd0a42687ec84e4632cb8693dd", "url": "https://github.com/DataDog/dd-trace-java/commit/ec6105e6743995dd0a42687ec84e4632cb8693dd", "message": "Port reactor instrumentation updates from OTel", "committedDate": "2020-10-23T13:49:25Z", "type": "forcePushed"}]}