{"pr_number": 1697, "pr_title": "MLT - Collect initial (\"base\") stacktrace for each MLT Scope.", "pr_createdAt": "2020-07-20T20:46:33Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1697", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5ODU3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1697#discussion_r457698570", "bodyText": "From what I've read, Exception.fillInStackTrace might actually be faster", "author": "dougqh", "createdAt": "2020-07-20T21:20:49Z", "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/ScopeStackCollector.java", "diffHunk": "@@ -59,6 +59,9 @@\n     this.threadStacktraceCollector = threadStacktraceCollector;\n     this.startTime = startTimeEpoch;\n     this.startTimeNs = startTimeNs;\n+\n+    // Capture the base stacktrace:\n+    collect(Thread.currentThread().getStackTrace());", "originalCommit": "8f365a2935859f0a7f7bb4a25ef5e7aa3ee6e51f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "680591b6f6ddf913050358eda8b8bd50bd05db89", "url": "https://github.com/DataDog/dd-trace-java/commit/680591b6f6ddf913050358eda8b8bd50bd05db89", "message": "Collect initial (\"base\") stacktrace for each MLT Scope.\n\nThis will allow for better root stack frame analysis.", "committedDate": "2020-07-21T14:14:59Z", "type": "commit"}, {"oid": "bec45793e71c46608494423e852e11aab33b543e", "url": "https://github.com/DataDog/dd-trace-java/commit/bec45793e71c46608494423e852e11aab33b543e", "message": "Use Throwable.getStackTrace() instead.", "committedDate": "2020-07-21T14:14:59Z", "type": "commit"}, {"oid": "bec45793e71c46608494423e852e11aab33b543e", "url": "https://github.com/DataDog/dd-trace-java/commit/bec45793e71c46608494423e852e11aab33b543e", "message": "Use Throwable.getStackTrace() instead.", "committedDate": "2020-07-21T14:14:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3MzEzNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1697#discussion_r460773134", "bodyText": "Hm, won't this trigger an infinite loop? scopeStackCollector is not updated inside the loop so once it is non-null and not-equal to target it will stay that forever ...", "author": "jbachorik", "createdAt": "2020-07-27T09:46:09Z", "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/ScopeManager.java", "diffHunk": "@@ -55,6 +55,7 @@ public ScopeStackCollector getCurrentScope() {\n \n   IMLTChunk endScope(ScopeStackCollector target) {\n     ScopeStackCollector scopeStackCollector = scopeCollectorQueue.removeLast();\n+    // FIXME: this seems dangerous:\n     while (scopeStackCollector != null && !target.equals(scopeStackCollector)) {\n       scopeCollectorQueue.removeLast();\n     }", "originalCommit": "bec45793e71c46608494423e852e11aab33b543e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}