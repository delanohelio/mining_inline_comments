{"pr_number": 1866, "pr_title": "Replace Thread CpuTime JMX access to a generic one", "pr_createdAt": "2020-09-15T08:35:59Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1866", "timeline": [{"oid": "7eefcc044202b708de5812813bfc2d417a2d1bc7", "url": "https://github.com/DataDog/dd-trace-java/commit/7eefcc044202b708de5812813bfc2d417a2d1bc7", "message": "Replace Thread CpuTime JMX access to a generic one\n\nInstead of an interface for accessing just ThreadCpuTime from JMX,\nwe have a generic one, where we can add as many method we need when\naccessing JMX.\nHere we have added also getCurrentPid, but we could add access to\nother JMX features like Thread dumps...", "committedDate": "2020-09-15T08:49:16Z", "type": "commit"}, {"oid": "7eefcc044202b708de5812813bfc2d417a2d1bc7", "url": "https://github.com/DataDog/dd-trace-java/commit/7eefcc044202b708de5812813bfc2d417a2d1bc7", "message": "Replace Thread CpuTime JMX access to a generic one\n\nInstead of an interface for accessing just ThreadCpuTime from JMX,\nwe have a generic one, where we can add as many method we need when\naccessing JMX.\nHere we have added also getCurrentPid, but we could add access to\nother JMX features like Thread dumps...", "committedDate": "2020-09-15T08:49:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNzUxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488517515", "bodyText": "A nit - would be good to have the specific implementations being final to encourage composition over inheritance (and make the whole API more evolvable by providing fewer potentially moving parts).", "author": "jbachorik", "createdAt": "2020-09-15T09:22:21Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxSystemProvider.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package datadog.trace.core.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.lang.management.ThreadMXBean;\n+\n+/** System provider based on JMX MXbeans */\n+public class JmxSystemProvider implements SystemProvider {", "originalCommit": "7eefcc044202b708de5812813bfc2d417a2d1bc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzNTA0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488535043", "bodyText": "I don't like to prevent any further modifications with final because it's always difficult to foresee any evolutions that we may need in the future. that's also an internal API here not critical.", "author": "jpbempel", "createdAt": "2020-09-15T09:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0MzI3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488543279", "bodyText": "Why would you extend this class to evolve the API? On the contrary, allowing uncontrolled inheritance may make it quite difficult to do the evolution without touching all the child types.", "author": "jbachorik", "createdAt": "2020-09-15T10:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNzUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxODI5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488518290", "bodyText": "This one should really be final. It is an API entry point and we don't really want its subclasses floating around when we keep on evolving this entry point.", "author": "jbachorik", "createdAt": "2020-09-15T09:23:31Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/SystemAccess.java", "diffHunk": "@@ -3,47 +3,43 @@\n import datadog.trace.api.Config;\n import lombok.extern.slf4j.Slf4j;\n \n-/**\n- * Thread CPU time accessor.<br>\n- * This class abstracts away the actual method used to get the current thread CPU time.\n- */\n @Slf4j\n-public final class ThreadCpuTimeAccess {\n-  private static volatile ThreadCpuTimeProvider cpuTimeProvider = ThreadCpuTimeProvider.NONE;\n+public class SystemAccess {", "originalCommit": "7eefcc044202b708de5812813bfc2d417a2d1bc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzNjE0Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488536142", "bodyText": "This one is IMHO the less required to be final, there are only static methods. What would be the point to extend it?", "author": "jpbempel", "createdAt": "2020-09-15T09:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxODI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0NDIwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488544208", "bodyText": "Exactly. What would be the point? Yet, if someone decides to extend it for whatever strange reason you are for a surprise when evolving this class.\nThere is literally no downside to having this class final - it is an entry point to your API and there should never be any subclasses of this class.", "author": "jbachorik", "createdAt": "2020-09-15T10:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxODI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3OTI2NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488579264", "bodyText": "If someone try to extend this class, it will not get what he thinks. it's a dumb mistake. On my side I will not have issue to evolve this class as there is not instance methods so not direct interactions with inherited classes.", "author": "jpbempel", "createdAt": "2020-09-15T11:06:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxODI5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MTI1MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488591250", "bodyText": "Ok. I hear you. It is up to you. I will stop bike-shedding here.", "author": "jbachorik", "createdAt": "2020-09-15T11:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxODI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxOTQ5Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488519496", "bodyText": "This makes me wonder - do we really need the SystemAccess tied to profiling?\nNot critical request but would be good to think about it.", "author": "jbachorik", "createdAt": "2020-09-15T09:25:22Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/SystemAccess.java", "diffHunk": "@@ -3,47 +3,43 @@\n import datadog.trace.api.Config;\n import lombok.extern.slf4j.Slf4j;\n \n-/**\n- * Thread CPU time accessor.<br>\n- * This class abstracts away the actual method used to get the current thread CPU time.\n- */\n @Slf4j\n-public final class ThreadCpuTimeAccess {\n-  private static volatile ThreadCpuTimeProvider cpuTimeProvider = ThreadCpuTimeProvider.NONE;\n+public class SystemAccess {\n+  private static volatile SystemProvider systemProvider = SystemProvider.NONE;\n \n   /**\n-   * Disable JMX based thread CPU time. Will flip back to the {@linkplain\n-   * ThreadCpuTimeProvider#NONE} implementation.\n+   * Disable JMX based thread CPU time. Will flip back to the {@linkplain SystemProvider#NONE}\n+   * implementation.\n    */\n   public static void disableJmx() {\n     log.debug(\"Disabling JMX thread CPU time provider\");\n-    cpuTimeProvider = ThreadCpuTimeProvider.NONE;\n+    systemProvider = SystemProvider.NONE;\n   }\n \n-  /** Enable JMX based thread CPU time */\n+  /** Enable JMX accesses */\n   public static void enableJmx() {\n     if (!Config.get().isProfilingEnabled()) {\n-      log.info(\"Will not enable thread CPU time access. Profiling is disabled.\");\n+      log.info(\"Will not enable JMX access. Profiling is disabled.\");", "originalCommit": "7eefcc044202b708de5812813bfc2d417a2d1bc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzNzQ2Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488537463", "bodyText": "I also don't see the need to be tied to profiling, but right now, only profiling is using it.\nThis could test could be removed if we want to expose to a broad scope of the tracer.", "author": "jpbempel", "createdAt": "2020-09-15T09:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxOTQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUyMTEyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1866#discussion_r488521120", "bodyText": "This provider is providing for SystemAccess - hence SystemAccessProvider would convey the intention better, IMO.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface SystemProvider {\n          \n          \n            \n            public interface SystemAccessProvider {", "author": "jbachorik", "createdAt": "2020-09-15T09:27:53Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/SystemProvider.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * A pluggable system provider used by {@linkplain SystemAccess}. {@linkplain SystemAccess} may not\n+ * use JMX classes (even via transitive dependencies) due to potential race in j.u.l initialization.\n+ * Therefore it uses an abstract {@linkplain SystemProvider} type to hold the actual implementation\n+ * which may be switched between the {@linkplain SystemProvider#NONE} and {@linkplain\n+ * JmxSystemProvider} on-the-fly once JMX is safe to use.\n+ */\n+public interface SystemProvider {", "originalCommit": "7eefcc044202b708de5812813bfc2d417a2d1bc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6b64636cc65ab36c443a3d8139e47efa0c1a75e1", "url": "https://github.com/DataDog/dd-trace-java/commit/6b64636cc65ab36c443a3d8139e47efa0c1a75e1", "message": "add revapi exception", "committedDate": "2020-09-15T09:39:36Z", "type": "commit"}, {"oid": "fa6e1d45c7068dd79b3fc73cd387314fb7b6c3b1", "url": "https://github.com/DataDog/dd-trace-java/commit/fa6e1d45c7068dd79b3fc73cd387314fb7b6c3b1", "message": "Rename SystemProvider", "committedDate": "2020-09-15T10:11:23Z", "type": "commit"}, {"oid": "fa6e1d45c7068dd79b3fc73cd387314fb7b6c3b1", "url": "https://github.com/DataDog/dd-trace-java/commit/fa6e1d45c7068dd79b3fc73cd387314fb7b6c3b1", "message": "Rename SystemProvider", "committedDate": "2020-09-15T10:11:23Z", "type": "forcePushed"}, {"oid": "a040919b63fc2bd872de2d161ff83a51950c3923", "url": "https://github.com/DataDog/dd-trace-java/commit/a040919b63fc2bd872de2d161ff83a51950c3923", "message": "fix class name loaded by agent", "committedDate": "2020-09-15T12:10:50Z", "type": "commit"}, {"oid": "837def6182b7d839c2bb2c693b1c7b7403b72111", "url": "https://github.com/DataDog/dd-trace-java/commit/837def6182b7d839c2bb2c693b1c7b7403b72111", "message": "fix formatting", "committedDate": "2020-09-15T12:30:22Z", "type": "commit"}, {"oid": "28c5f2371a7acbd82cd238846332de1edde1f5ef", "url": "https://github.com/DataDog/dd-trace-java/commit/28c5f2371a7acbd82cd238846332de1edde1f5ef", "message": "Add final for class & change visibility", "committedDate": "2020-09-15T17:21:11Z", "type": "commit"}]}