{"pr_number": 1472, "pr_title": "avoid materialising meta (baggage + tags) during serialisation", "pr_createdAt": "2020-05-18T22:18:24Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1472", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMzgzMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r426923831", "bodyText": "I haven't measured it, but I expect this to get hot and there will only be one implementation at runtime, so the MapAcceptor might not actually get allocated (inlined => scalarised), but it's still smaller than a hashmap and doesn't need resizing if it doesn't work out like that.", "author": "richardstartin", "createdAt": "2020-05-18T22:21:04Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java", "diffHunk": "@@ -119,10 +110,13 @@ public void writeDDSpan(final DDSpan span, final DEST destination) throws IOExce\n     /* 9  */ writeTag(TYPE, span.getType(), destination);\n     /* 10 */ writeInt(ERROR, span.getError(), destination);\n     /* 11 */ writeNumberMap(METRICS, span.getMetrics(), destination);\n-    /* 12 */ writeStringMap(META, span.getMeta(), destination);\n+    /* 12 */ writeMeta(span, destination);\n     writeMapFooter(destination);\n   }\n \n+  /** A destination to serialize the span's meta into */\n+  protected abstract MapAcceptor<String> getMetaAcceptor(DEST destination);", "originalCommit": "d92df4fd7f41d21f834e1cada163497302f30ba8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3Mzg3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427073872", "bodyText": "Yeah, it would be interesting to see, but I think it is a win either way.", "author": "bantonsson", "createdAt": "2020-05-19T07:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMzgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNDA3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r426924076", "bodyText": "This got backed out in a bad merge (my bad) :(", "author": "richardstartin", "createdAt": "2020-05-18T22:21:52Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/MsgpackFormatWriter.java", "diffHunk": "@@ -40,6 +41,12 @@ public void writeString(byte[] key, String value, MessagePacker destination) thr\n     }\n   }\n \n+  @Override\n+  public void writeTag(byte[] key, String value, MessagePacker destination) throws IOException {", "originalCommit": "d92df4fd7f41d21f834e1cada163497302f30ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNTA1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r426925052", "bodyText": "Move the wrapping here so it can be used without wrapping.", "author": "richardstartin", "createdAt": "2020-05-18T22:24:33Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpan.java", "diffHunk": "@@ -354,7 +356,7 @@ public String getSpanType() {\n \n   @Override\n   public Map<String, Object> getTags() {\n-    return context.getTags();\n+    return Collections.unmodifiableMap(context.getTags());", "originalCommit": "d92df4fd7f41d21f834e1cada163497302f30ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNTcxMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r426925710", "bodyText": "Wasn't sure what synchronized was achieving here. Collections.unmodifiableMap doesn't mutate the map, and prevented it from being mutated. The only caller of this method, DDSpan does not mutate the map. Should the visibility be reduced to package?", "author": "richardstartin", "createdAt": "2020-05-18T22:26:20Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -349,8 +349,8 @@ public synchronized void setTag(final String tag, final Object value) {\n     }\n   }\n \n-  public synchronized Map<String, Object> getTags() {", "originalCommit": "d92df4fd7f41d21f834e1cada163497302f30ba8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NzEyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427377120", "bodyText": "This is a new module. I would make it package private if possible", "author": "devinsba", "createdAt": "2020-05-19T15:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNTcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5Njc1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427396753", "bodyText": "Right, but it doesn't actually make any concurrency guarantees. If the map can only be mutated within critical sections, it will now have been released and any caller can observe the map during critical sections where the map is being mutated. If the map were being copied at this point, synchronized would make sense.", "author": "richardstartin", "createdAt": "2020-05-19T15:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNTcxMA=="}], "type": "inlineReview"}, {"oid": "486aa06000e3b17f8489e012a9d3b725cb2b66b9", "url": "https://github.com/DataDog/dd-trace-java/commit/486aa06000e3b17f8489e012a9d3b725cb2b66b9", "message": "avoid materialising meta (baggage + tags) as map and write it into serialising acceptor", "committedDate": "2020-05-19T06:56:14Z", "type": "commit"}, {"oid": "3734b896fced69ce8d4cefbebde8f5690ceaf742", "url": "https://github.com/DataDog/dd-trace-java/commit/3734b896fced69ce8d4cefbebde8f5690ceaf742", "message": "make revapi happy", "committedDate": "2020-05-19T06:56:19Z", "type": "commit"}, {"oid": "3734b896fced69ce8d4cefbebde8f5690ceaf742", "url": "https://github.com/DataDog/dd-trace-java/commit/3734b896fced69ce8d4cefbebde8f5690ceaf742", "message": "make revapi happy", "committedDate": "2020-05-19T06:56:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3MzI3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427073275", "bodyText": "Yes, the getMeta show up in the memory overhead as well, and is creating a lot of unnecessary HashMapNode and HashMapNode[].", "author": "bantonsson", "createdAt": "2020-05-19T07:02:29Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpan.java", "diffHunk": "@@ -261,19 +261,21 @@ public final DDSpan setSpanType(final String type) {\n   // Getters\n \n   /**\n-   * Meta merges baggage and tags (stringified values)\n+   * Meta merges baggage and tags (stringified values) into a writable destination\n    *\n-   * @return merged context baggage and tags\n+   * @return\n    */\n-  public Map<String, String> getMeta() {\n-    final Map<String, String> meta = new HashMap<>();\n-    for (final Map.Entry<String, String> entry : context.getBaggageItems().entrySet()) {\n-      meta.put(entry.getKey(), entry.getValue());\n+  public void transferMeta(MapAcceptor<String> acceptor) {", "originalCommit": "3734b896fced69ce8d4cefbebde8f5690ceaf742", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "41ff80b15eb370c2b0ef74f6b41a111ae2d36303", "url": "https://github.com/DataDog/dd-trace-java/commit/41ff80b15eb370c2b0ef74f6b41a111ae2d36303", "message": "simplify merging of tags and baggage", "committedDate": "2020-05-19T14:06:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzODY2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427338668", "bodyText": "As determined by our Idea settings, these finals get automatically added when we save the file: https://github.com/DataDog/dd-trace-java/blob/master/CONTRIBUTING.md\nI'd suggest not trying to change them back, otherwise the next time it gets saved will redo the change.", "author": "tylerbenson", "createdAt": "2020-05-19T14:19:19Z", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/MsgpackFormatWriter.java", "diffHunk": "@@ -41,50 +41,49 @@ public void writeString(final byte[] key, final String value, final MessagePacke\n   }\n \n   @Override\n-  public void writeShort(final byte[] key, final short value, final MessagePacker destination)\n-      throws IOException {\n+  public void writeTag(byte[] key, String value, MessagePacker destination) throws IOException {\n+    writeKey(key, destination);\n+    writeStringUTF8(value, destination);\n+  }\n+\n+  @Override\n+  public void writeShort(byte[] key, short value, MessagePacker destination) throws IOException {\n     writeKey(key, destination);\n     destination.packShort(value);\n   }\n \n   @Override\n-  public void writeByte(final byte[] key, final byte value, final MessagePacker destination)\n-      throws IOException {\n+  public void writeByte(byte[] key, byte value, MessagePacker destination) throws IOException {\n     writeKey(key, destination);\n     destination.packByte(value);\n   }\n \n   @Override\n-  public void writeInt(final byte[] key, final int value, final MessagePacker destination)\n-      throws IOException {\n+  public void writeInt(byte[] key, int value, MessagePacker destination) throws IOException {\n     writeKey(key, destination);\n     destination.packInt(value);\n   }\n \n   @Override\n-  public void writeLong(final byte[] key, final long value, final MessagePacker destination)\n-      throws IOException {\n+  public void writeLong(byte[] key, long value, MessagePacker destination) throws IOException {\n     writeKey(key, destination);\n     destination.packLong(value);\n   }\n \n   @Override\n-  public void writeFloat(final byte[] key, final float value, final MessagePacker destination)\n-      throws IOException {\n+  public void writeFloat(byte[] key, float value, MessagePacker destination) throws IOException {\n     writeKey(key, destination);", "originalCommit": "41ff80b15eb370c2b0ef74f6b41a111ae2d36303", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MDczNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427350735", "bodyText": "What I did was rebase on top of your change made to this file after I submitted this PR. I accepted my changes over yours. If you want, I can put the final parameters back in, but would prefer that my editor doesn't make changes without my control.", "author": "richardstartin", "createdAt": "2020-05-19T14:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzODY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427342164", "bodyText": "Odd... why aren't these added to the 0.52.0 section below?", "author": "tylerbenson", "createdAt": "2020-05-19T14:23:25Z", "path": ".palantir/revapi.yml", "diffHunk": "@@ -299,6 +299,9 @@ acceptedBreaks:\n       old: \"method datadog.trace.bootstrap.instrumentation.api.AgentScope datadog.trace.core.scopemanager.DDScopeManager::activate(datadog.trace.bootstrap.instrumentation.api.AgentSpan,\\\n         \\ boolean)\"\n       justification: \"Removed deprecated APIs preventing refactoring\"\n+    - code: \"java.method.removed\"\n+      old: \"method java.util.Map<java.lang.String, java.lang.String> datadog.trace.core.DDSpan::getMeta()\"\n+      justification: \"internal api\"", "originalCommit": "c479e49a5f659ec875d686ef1e7293526878d855", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NzU0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427387541", "bodyText": "see the comment about revapi below. Happy to learn what I did wrong.", "author": "richardstartin", "createdAt": "2020-05-19T15:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwMzUzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427403537", "bodyText": "Might need to rebase against master? The version is dependent on the most recent tag in the history", "author": "devinsba", "createdAt": "2020-05-19T15:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwOTc0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427409743", "bodyText": "No, thanks for the suggestion, I even tried it, it produces the same result. I had also already rebased against 6f549f3bac29c674a5127624836c3b918c22392e btw.", "author": "richardstartin", "createdAt": "2020-05-19T15:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMjUyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427412526", "bodyText": "@devinsba is probably right.  Originally, this branch was against 0.51.0, you added the revapi changes, then you rebased to the latest after 0.51.0 was released.  The commands you used weren't wrong.", "author": "randomanderson", "createdAt": "2020-05-19T15:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyNTMxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427425317", "bodyText": "I created this branch last night off the tip of master. 0.51.0 was released 11 days ago. Does it sound likely that I branched prior to 0.51.0?", "author": "richardstartin", "createdAt": "2020-05-19T16:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTM2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427429368", "bodyText": "@richardstartin Maybe you didn't fetch all tags?  ./gradlew currentVersion will tell you what gradle thinks the current version of the project is", "author": "randomanderson", "createdAt": "2020-05-19T16:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMzEwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427433101", "bodyText": "> Task :currentVersion\n\nProject version: 0.52.0-SNAPSHOT\n\nOf course, I can't verify what it was at 23:16 UTC last night.", "author": "richardstartin", "createdAt": "2020-05-19T16:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzNTY1NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427435655", "bodyText": "Idk then.  The commands you ran looked fine", "author": "randomanderson", "createdAt": "2020-05-19T16:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NjAwNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1472#discussion_r427446007", "bodyText": "The minimal reproducer is this:\ngit checkout master\ngit fetch # to be sure\ngit pull origin master\ngit checkout -b revapi-bug\n\nchange the name of DDSpan.getMeta to thisIsABreakingChange\nRun\n./gradlew :dd-trace-ot:revapiAcceptBreak --justification \"this is a breaking change for test purposes\" \\\n          --code \"java.method.removed\" \\\n          --old \"method java.util.Map<java.lang.String, java.lang.String> datadog.trace.core.DDSpan::getMeta()\"\n\nThe change is attributed to the wrong version according to our expectations (should create a new section 0.52.0):\ngit diff\n\ndiff --git a/.palantir/revapi.yml b/.palantir/revapi.yml\nindex e18bbf39f..7d290c945 100644\n--- a/.palantir/revapi.yml\n+++ b/.palantir/revapi.yml\n@@ -299,6 +299,9 @@ acceptedBreaks:\n       old: \"method datadog.trace.bootstrap.instrumentation.api.AgentScope datadog.trace.core.scopemanager.DDScopeManager::activate(datadog.trace.bootstrap.instrumentation.api.AgentSpan,\\\n         \\ boolean)\"\n       justification: \"Removed deprecated APIs preventing refactoring\"\n+    - code: \"java.method.removed\"\n+      old: \"method java.util.Map<java.lang.String, java.lang.String> datadog.trace.core.DDSpan::getMeta()\"\n+      justification: \"this is a breaking change for test purposes\"\n     - code: \"java.method.removed\"\n       old: \"method long datadog.trace.common.writer.ddagent.AbstractDisruptor<T>::getCurrentCount()\\\n         \\ @ datadog.trace.common.writer.ddagent.TraceProcessingDisruptor\"\ndiff --git a/dd-trace-core/src/main/java/datadog/trace/core/DDSpan.java b/dd-trace-core/src/main/java/datadog/trace/core/DDSpan.java\nindex 9bf2ce56a..3d659b745 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/DDSpan.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/DDSpan.java\n@@ -265,7 +265,7 @@ public class DDSpan implements MutableSpan, AgentSpan {\n    *\n    * @return merged context baggage and tags\n    */\n-  public Map<String, String> getMeta() {\n+  public Map<String, String> thisIsABreakingChange() {\n     final Map<String, String> meta = new HashMap<>();\n     for (final Map.Entry<String, String> entry : context.getBaggageItems().entrySet()) {\n       meta.put(entry.getKey(), entry.getValue());\ndiff --git a/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java b/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java\nindex 77307a838..670d11855 100644\n--- a/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java\n+++ b/dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java\n@@ -119,7 +119,7 @@ public abstract class FormatWriter<DEST> {\n     /* 9  */ writeTag(TYPE, span.getType(), destination);\n     /* 10 */ writeInt(ERROR, span.getError(), destination);\n     /* 11 */ writeNumberMap(METRICS, span.getMetrics(), destination);\n-    /* 12 */ writeStringMap(META, span.getMeta(), destination);\n+    /* 12 */ writeStringMap(META, span.thisIsABreakingChange(), destination);\n     writeMapFooter(destination);\n   }", "author": "richardstartin", "createdAt": "2020-05-19T16:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MjE2NA=="}], "type": "inlineReview"}, {"oid": "aed4bccc95d800c1f54d8b18a2f2a9f93096a76c", "url": "https://github.com/DataDog/dd-trace-java/commit/aed4bccc95d800c1f54d8b18a2f2a9f93096a76c", "message": "even parameters and variables which don't change must be declared final", "committedDate": "2020-05-19T14:41:46Z", "type": "forcePushed"}, {"oid": "f9878defd4b6f3307f9fc565d5c7994def4b3081", "url": "https://github.com/DataDog/dd-trace-java/commit/f9878defd4b6f3307f9fc565d5c7994def4b3081", "message": "tag should overwrite baggage", "committedDate": "2020-05-19T14:56:14Z", "type": "commit"}, {"oid": "f9878defd4b6f3307f9fc565d5c7994def4b3081", "url": "https://github.com/DataDog/dd-trace-java/commit/f9878defd4b6f3307f9fc565d5c7994def4b3081", "message": "tag should overwrite baggage", "committedDate": "2020-05-19T14:56:14Z", "type": "forcePushed"}]}