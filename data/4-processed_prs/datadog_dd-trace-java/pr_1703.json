{"pr_number": 1703, "pr_title": "Check for error condition before setting ERROR_MSG", "pr_createdAt": "2020-07-22T16:46:16Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1703", "timeline": [{"oid": "cf542a773a72db77254581f26272baa407de27d7", "url": "https://github.com/DataDog/dd-trace-java/commit/cf542a773a72db77254581f26272baa407de27d7", "message": "Check for error condition before setting ERROR_MSG", "committedDate": "2020-07-22T16:40:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MDM0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r458940344", "bodyText": "Can we assign map.get(EVENT) to a local and check span.isError() first please?", "author": "richardstartin", "createdAt": "2020-07-22T16:53:15Z", "path": "dd-java-agent/instrumentation/opentracing/src/main/java/datadog/trace/instrumentation/opentracing/DefaultLogHandler.java", "diffHunk": "@@ -34,11 +35,15 @@ public void log(final long timestampMicroseconds, final String event, final Agen\n     log.debug(\"`log` method is not implemented. Provided log: {}\", event);\n   }\n \n+  private boolean isErrorSpan(final Map<String, ?> map, final AgentSpan span) {\n+    return (map.get(EVENT) instanceof String && map.get(EVENT).equals(\"error\")) || span.isError();", "originalCommit": "cf542a773a72db77254581f26272baa407de27d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da544690a46e75feb51727321d12253ad7aa50c7", "url": "https://github.com/DataDog/dd-trace-java/commit/da544690a46e75feb51727321d12253ad7aa50c7", "message": "Reverse order of short circuit logic\n\nAlso assign map value to a local variable.", "committedDate": "2020-07-22T20:00:28Z", "type": "commit"}, {"oid": "3775aa563b5eb3e58c5130398489717b0079ca85", "url": "https://github.com/DataDog/dd-trace-java/commit/3775aa563b5eb3e58c5130398489717b0079ca85", "message": "Update the other DefaultLogHandler", "committedDate": "2020-07-28T19:57:31Z", "type": "commit"}, {"oid": "c36a15d75eeebb28cf6d614bc4c1e34ae6460703", "url": "https://github.com/DataDog/dd-trace-java/commit/c36a15d75eeebb28cf6d614bc4c1e34ae6460703", "message": "Add tests", "committedDate": "2020-07-28T19:57:58Z", "type": "commit"}, {"oid": "48eafc0a6548ff2250867621083a225755d8e237", "url": "https://github.com/DataDog/dd-trace-java/commit/48eafc0a6548ff2250867621083a225755d8e237", "message": "Make test names  more descriptive", "committedDate": "2020-07-28T20:02:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjA3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r462356074", "bodyText": "pro tip:\nGroovy allows for inline declaration of maps: [(Fields.EVENT): \"error, (Fields.MESSAGE): errorMessage]\nConsider updating?", "author": "tylerbenson", "createdAt": "2020-07-29T14:45:05Z", "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/DefaultLogHandlerTest.groovy", "diffHunk": "@@ -61,16 +61,80 @@ class DefaultLogHandlerTest extends DDSpecification {\n     when:\n     underTest.log(fields, span)\n \n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp but the span is not an error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the event is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.EVENT, \"error\")\n+    fields.put(Fields.MESSAGE, errorMessage)", "originalCommit": "48eafc0a6548ff2250867621083a225755d8e237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1Nzc0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r462357744", "bodyText": "actually, I just realized this is also the case in the other test methods so never mind.", "author": "tylerbenson", "createdAt": "2020-07-29T14:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjA3NA=="}], "type": "inlineReview"}]}