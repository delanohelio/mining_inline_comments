{"pr_number": 1920, "pr_title": "Make FieldBackedProvider respect class loader matchers", "pr_createdAt": "2020-09-28T13:35:38Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1920", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NjA5MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495946091", "bodyText": "This can be written correctly following the usual double checked locking idiom in fewer lines of code.", "author": "richardstartin", "createdAt": "2020-09-28T13:39:00Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -127,6 +128,20 @@ private ClassLoaderHasClassesNamedMatcher(final String... classNames) {\n       }\n     }\n \n+    private WeakCache<ClassLoader, Boolean> getCache() {\n+      WeakCache<ClassLoader, Boolean> cache = cacheHolder;", "originalCommit": "a5876ae8086b6046204ac2bd681927e03b753297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjYzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495952637", "bodyText": "WDYM? What is not correct with this?", "author": "bantonsson", "createdAt": "2020-09-28T13:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NjA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1Njc1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495956759", "bodyText": "Or do you only want to remove the cache != null check?", "author": "bantonsson", "createdAt": "2020-09-28T13:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NjA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NzIyOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495957228", "bodyText": "This is correct, it just doesn't need to be this long and isn't instantly recognisable as double checked locking.\n  private WeakCache<ClassLoader, Boolean> getCache() {\n     if (cacheHolder == null) {\n         synchronized (this) {\n             if (cacheHolder == null) {\n                 cacheHolder = AgentTooling.newWeakCache(25);\n             }\n         }\n     }\n     return cacheHolder;\n    }\nIs shorter and more idiomatic. The first thing someone will do when they read that code is check if cacheHolder is volatile and then carry on.", "author": "richardstartin", "createdAt": "2020-09-28T13:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NjA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyMjM4Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496022387", "bodyText": "Sure, I'll change that.", "author": "bantonsson", "createdAt": "2020-09-28T15:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NjA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTcxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495949717", "bodyText": "Are we relying on doing this for equality semantics? i.e. is it now important that classLoaderMatcher() always returns the same instance? If so, violation of this kind of implicit requirement was what led to field injection being disabled in the first place. If not, please ignore this comment.", "author": "richardstartin", "createdAt": "2020-09-28T13:44:01Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinTaskInstrumentation.java", "diffHunk": "@@ -39,14 +39,16 @@\n \n   static final String TASK_CLASS_NAME = \"akka.dispatch.forkjoin.ForkJoinTask\";\n \n+  static final ElementMatcher<ClassLoader> CLASS_LOADER_MATCHER = hasClassesNamed(TASK_CLASS_NAME);", "originalCommit": "a5876ae8086b6046204ac2bd681927e03b753297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1NDU3Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495954573", "bodyText": "So the equality semantics is only important if you don't want to do the checks and add the extra transformers multiple times. Things will still work.", "author": "bantonsson", "createdAt": "2020-09-28T13:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjQ4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495952484", "bodyText": "I don't think ElementMatcher<ClassLoader> can be assumed to have good enough equality semantics to do this.\nOne possible solution I would find amenable is that we create an abstract class implementing  ElementMatcher<ClassLoader> and we add abstract hashCode and equals, and require that type here.", "author": "richardstartin", "createdAt": "2020-09-28T13:47:47Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -67,11 +71,35 @@ public Default(final String instrumentationName, final String... additionalNames\n       instrumentationPrimaryName = instrumentationName;\n \n       enabled = Config.get().isIntegrationEnabled(instrumentationNames, defaultEnabled());\n-      Map<String, String> contextStore = contextStore();\n-      if (!contextStore.isEmpty()) {\n-        contextProvider = new FieldBackedProvider(this, contextStore);\n-      } else {\n-        contextProvider = NoopContextProvider.INSTANCE;\n+    }\n+\n+    // Since the super(...) call is first in the constructor, we can't really rely on things\n+    // being properly initialized in the Instrumentation until the super(...) call has finished\n+    // so do the rest of the initialization lazily\n+    private void lazyInit() {\n+      synchronized (this) {\n+        if (!initialized) {\n+          Map<ElementMatcher<ClassLoader>, Map<String, String>> contextStores;", "originalCommit": "a5876ae8086b6046204ac2bd681927e03b753297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNTI5OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496525298", "bodyText": "So the problem here is that as far as I can see, all the builtin matchers in ByteBuddy actually have equals and hashCode implemented, and if we were to enforce our own abstract class, we could not use junctions like not or and (which we do in some places). I think that we should go the other way and implement equals and hashCode for our own matchers.", "author": "bantonsson", "createdAt": "2020-09-29T08:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NTcwNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496545705", "bodyText": "That's also reasonable. I'm just worried about the consequences of not ensuring classLoaderMatcher always returns the same instance when writing instrumentation. Someone writing instrumentation shouldn't need to know about this to get the best results.", "author": "richardstartin", "createdAt": "2020-09-29T08:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3NjgxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496576817", "bodyText": "I mean that caveat was already present even before this change, since every new classLoaderMatcher that matched the same thing as some other classLoaderMatcher, and cached the result, would do the same work once more, and not share any results between the instances.", "author": "bantonsson", "createdAt": "2020-09-29T09:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4NzYzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496587637", "bodyText": "I just want to remove them because I see no evidence of the magical performance gains which justify the complexity, but I'll approve this PR when you mark it ready. You don't have to go and implement equals and hashCode for every matcher.", "author": "richardstartin", "createdAt": "2020-09-29T09:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjQ4NA=="}], "type": "inlineReview"}, {"oid": "c573d3accaa504484fa440f5c465baa96bedc577", "url": "https://github.com/DataDog/dd-trace-java/commit/c573d3accaa504484fa440f5c465baa96bedc577", "message": "Make FieldBackedProvider respect class loader matchers", "committedDate": "2020-09-28T14:57:53Z", "type": "forcePushed"}, {"oid": "8b2182ade1166c4b7f9459b6dbe47890e06bdad4", "url": "https://github.com/DataDog/dd-trace-java/commit/8b2182ade1166c4b7f9459b6dbe47890e06bdad4", "message": "Make FieldBackedProvider respect class loader matchers", "committedDate": "2020-09-28T15:14:34Z", "type": "forcePushed"}, {"oid": "76c9be5ba6ba82c3d3d6c21e525e7c61348a3b77", "url": "https://github.com/DataDog/dd-trace-java/commit/76c9be5ba6ba82c3d3d6c21e525e7c61348a3b77", "message": "Make FieldBackedProvider respect class loader matchers", "committedDate": "2020-09-29T08:22:21Z", "type": "forcePushed"}, {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "url": "https://github.com/DataDog/dd-trace-java/commit/820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "message": "Make FieldBackedProvider respect class loader matchers", "committedDate": "2020-09-29T08:28:55Z", "type": "forcePushed"}, {"oid": "36646cea1aa26e5588e01aebf0b0215a5ec0bb6f", "url": "https://github.com/DataDog/dd-trace-java/commit/36646cea1aa26e5588e01aebf0b0215a5ec0bb6f", "message": "Make FieldBackedProvider respect class loader matchers", "committedDate": "2020-09-29T14:26:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NTczNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496765737", "bodyText": "can allClassLoaderContextStores and contextStore() both be empty? if so should this branch also check contextStore() and if it's empty assign an empty map to contextStores?", "author": "mcculls", "createdAt": "2020-09-29T14:30:17Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -67,11 +71,35 @@ public Default(final String instrumentationName, final String... additionalNames\n       instrumentationPrimaryName = instrumentationName;\n \n       enabled = Config.get().isIntegrationEnabled(instrumentationNames, defaultEnabled());\n-      Map<String, String> contextStore = contextStore();\n-      if (!contextStore.isEmpty()) {\n-        contextProvider = new FieldBackedProvider(this, contextStore);\n-      } else {\n-        contextProvider = NoopContextProvider.INSTANCE;\n+    }\n+\n+    // Since the super(...) call is first in the constructor, we can't really rely on things\n+    // being properly initialized in the Instrumentation until the super(...) call has finished\n+    // so do the rest of the initialization lazily\n+    private void lazyInit() {\n+      synchronized (this) {\n+        if (!initialized) {\n+          Map<ElementMatcher<ClassLoader>, Map<String, String>> contextStores;\n+          Map<String, String> allClassLoaderContextStores = contextStoreForAll();\n+          Map<String, String> matchedContextStores = contextStore();\n+          if (!allClassLoaderContextStores.isEmpty()) {\n+            if (contextStore().isEmpty()) {\n+              contextStores = singletonMap(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            } else {\n+              contextStores = new HashMap<>();\n+              contextStores.put(classLoaderMatcher(), matchedContextStores);\n+              contextStores.put(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            }\n+          } else {\n+            contextStores = singletonMap(classLoaderMatcher(), matchedContextStores);", "originalCommit": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NzMwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496767300", "bodyText": "AFAICT none of the above assignments leave contextStores as an empty map, so either there's a missing case above or this this check isn't needed...", "author": "mcculls", "createdAt": "2020-09-29T14:32:16Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -67,11 +71,35 @@ public Default(final String instrumentationName, final String... additionalNames\n       instrumentationPrimaryName = instrumentationName;\n \n       enabled = Config.get().isIntegrationEnabled(instrumentationNames, defaultEnabled());\n-      Map<String, String> contextStore = contextStore();\n-      if (!contextStore.isEmpty()) {\n-        contextProvider = new FieldBackedProvider(this, contextStore);\n-      } else {\n-        contextProvider = NoopContextProvider.INSTANCE;\n+    }\n+\n+    // Since the super(...) call is first in the constructor, we can't really rely on things\n+    // being properly initialized in the Instrumentation until the super(...) call has finished\n+    // so do the rest of the initialization lazily\n+    private void lazyInit() {\n+      synchronized (this) {\n+        if (!initialized) {\n+          Map<ElementMatcher<ClassLoader>, Map<String, String>> contextStores;\n+          Map<String, String> allClassLoaderContextStores = contextStoreForAll();\n+          Map<String, String> matchedContextStores = contextStore();\n+          if (!allClassLoaderContextStores.isEmpty()) {\n+            if (contextStore().isEmpty()) {\n+              contextStores = singletonMap(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            } else {\n+              contextStores = new HashMap<>();\n+              contextStores.put(classLoaderMatcher(), matchedContextStores);\n+              contextStores.put(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            }\n+          } else {\n+            contextStores = singletonMap(classLoaderMatcher(), matchedContextStores);\n+          }\n+          if (!contextStores.isEmpty()) {", "originalCommit": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2ODE4Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496768183", "bodyText": "Awesome catch indeed. This got broken during rewrite. I'll change it immediately.", "author": "bantonsson", "createdAt": "2020-09-29T14:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2OTcwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496769708", "bodyText": "I'll swap around the logic as well.", "author": "bantonsson", "createdAt": "2020-09-29T14:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NzMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MTI0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496771244", "bodyText": "Could we call this HibernateMatchers or something similar as it's not common to all instrumentations", "author": "mcculls", "createdAt": "2020-09-29T14:37:07Z", "path": "dd-java-agent/instrumentation/hibernate/src/main/java/datadog/trace/instrumentation/hibernate/CommonMatchers.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.instrumentation.hibernate;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public final class CommonMatchers {", "originalCommit": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MjA1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496772059", "bodyText": "Sure", "author": "bantonsson", "createdAt": "2020-09-29T14:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MTI0NA=="}], "type": "inlineReview"}, {"oid": "e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "url": "https://github.com/DataDog/dd-trace-java/commit/e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "message": "Fixes according to PR review", "committedDate": "2020-09-29T15:00:48Z", "type": "commit"}, {"oid": "e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "url": "https://github.com/DataDog/dd-trace-java/commit/e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "message": "Fixes according to PR review", "committedDate": "2020-09-29T15:00:48Z", "type": "forcePushed"}]}