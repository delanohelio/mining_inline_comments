{"pr_number": 1393, "pr_title": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "pr_createdAt": "2020-04-21T16:26:15Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1393", "timeline": [{"oid": "48402c44810a22a7b926b6e8b666df6cb03e7ce4", "url": "https://github.com/DataDog/dd-trace-java/commit/48402c44810a22a7b926b6e8b666df6cb03e7ce4", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "committedDate": "2020-04-21T21:41:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0MDUxMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r412540510", "bodyText": "weird formatting...", "author": "tylerbenson", "createdAt": "2020-04-21T22:41:12Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -375,11 +375,26 @@ private String profilingProxyPasswordMasker() {\n         getBooleanSettingFromEnvironment(TRACE_RESOLVER_ENABLED, DEFAULT_TRACE_RESOLVER_ENABLED);\n     serviceMapping = getMapSettingFromEnvironment(SERVICE_MAPPING, null);\n \n-    final Map<String, String> tagsPreMap = new HashMap<>(getMapSettingFromEnvironment(TAGS, null));\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, ENV);\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, VERSION);\n-    tags = Collections.unmodifiableMap(tagsPreMap);\n-    globalTags = getMapSettingFromEnvironment(GLOBAL_TAGS, null);\n+    {\n+      final Map<String, String> tagsPreMap =\n+          new HashMap<>(getMapSettingFromEnvironment(TAGS, null));\n+      if (tagsPreMap != null && !tagsPreMap.isEmpty()) {\n+        // we only populate this tags if we use 'dd.tags'. If we don't use it: we populate this tags\n+        // to\n+        // 'dd.trace.global.tags' and globalTags field", "originalCommit": "48402c44810a22a7b926b6e8b666df6cb03e7ce4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e66734796fc700349c96144fccc35d1961a8cb8", "url": "https://github.com/DataDog/dd-trace-java/commit/5e66734796fc700349c96144fccc35d1961a8cb8", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "committedDate": "2020-04-22T00:10:13Z", "type": "forcePushed"}, {"oid": "d02ceb3d9446bdbc2fc883bc4fb77674d53245e5", "url": "https://github.com/DataDog/dd-trace-java/commit/d02ceb3d9446bdbc2fc883bc4fb77674d53245e5", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "committedDate": "2020-04-22T01:25:36Z", "type": "forcePushed"}, {"oid": "b82171f522bae86c5c428f37c9c86a463e11823e", "url": "https://github.com/DataDog/dd-trace-java/commit/b82171f522bae86c5c428f37c9c86a463e11823e", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "committedDate": "2020-04-22T06:12:02Z", "type": "forcePushed"}, {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "url": "https://github.com/DataDog/dd-trace-java/commit/baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "committedDate": "2020-04-22T07:13:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNTYzNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414635636", "bodyText": "Do you think it would simplify things to reduce the distinction between tags and global tags and combine them into a single map as soon as possible?  (End result being just a single tags field.)", "author": "tylerbenson", "createdAt": "2020-04-24T14:49:23Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -375,11 +376,20 @@ private String profilingProxyPasswordMasker() {\n         getBooleanSettingFromEnvironment(TRACE_RESOLVER_ENABLED, DEFAULT_TRACE_RESOLVER_ENABLED);\n     serviceMapping = getMapSettingFromEnvironment(SERVICE_MAPPING, null);\n \n-    final Map<String, String> tagsPreMap = new HashMap<>(getMapSettingFromEnvironment(TAGS, null));\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, ENV);\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, VERSION);\n-    tags = Collections.unmodifiableMap(tagsPreMap);\n-    globalTags = getMapSettingFromEnvironment(GLOBAL_TAGS, null);\n+    {\n+      final Map<String, String> tagsPreMap = getMapSettingFromEnvironment(TAGS, null);\n+      if (tagsPreMap != null && !tagsPreMap.isEmpty()) {\n+        // we only populate this tags if we use 'dd.tags'. If we don't use it: we populate this tags\n+        // to 'dd.trace.global.tags' and globalTags field\n+        tags = getMapWithPropertiesDefinedByEnvironment(tagsPreMap, ENV, VERSION);\n+      } else {\n+        tags = Collections.emptyMap();\n+      }\n+    }\n+    globalTags =\n+        getMapWithPropertiesDefinedByEnvironment(\n+            getMapSettingFromEnvironment(GLOBAL_TAGS, null), ENV, VERSION);\n+", "originalCommit": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MTE5Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414771193", "bodyText": "+1 I think this idea makes sense too. We just need to be careful about the order of precedence for updating the single map.\nE.g.,\n\nLook for DD_ prefixed env var first for env/service/version.\nThen look at JMX flags.", "author": "jdgumz", "createdAt": "2020-04-24T18:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQ1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414640456", "bodyText": "When you've implemented merging of the tags/global tags, this should also have b:2, right?", "author": "tylerbenson", "createdAt": "2020-04-24T14:55:45Z", "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1142,22 +1144,27 @@ class ConfigTest extends DDSpecification {\n   def \"verify dd.tags overrides global tags in properties\"() {\n     setup:\n     def prop = new Properties()\n-    prop.setProperty(TAGS, \"a:1\")\n+    prop.setProperty(TAGS, \"a:1,env:us-west,version:42\")\n     prop.setProperty(GLOBAL_TAGS, \"b:2\")\n     prop.setProperty(SPAN_TAGS, \"c:3\")\n     prop.setProperty(JMX_TAGS, \"d:4\")\n     prop.setProperty(HEADER_TAGS, \"e:5\")\n     prop.setProperty(PROFILING_TAGS, \"f:6\")\n+    prop.setProperty(Config.ENV, \"eu-east\")\n+    prop.setProperty(Config.VERSION, \"43\")\n \n     when:\n     Config config = Config.get(prop)\n \n     then:\n-    config.mergedSpanTags == [a: \"1\", c: \"3\"]\n-    config.mergedJmxTags == [a: \"1\", d: \"4\", (RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName]\n+    config.mergedSpanTags == [a: \"1\", c: \"3\",  (Config.ENV) : \"eu-east\", (Config.VERSION) : \"43\"]", "originalCommit": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwNTg2Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414805867", "bodyText": "if you want me to merge them. It might break existing backward compatibility because we already have several versions where dd.tags exclude dd.trace.global.tags is it ok ?", "author": "lpriima", "createdAt": "2020-04-24T19:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwNzIwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414807200", "bodyText": "yeah, let's merge them into a single map inside Config.  Any edge cases where this would be problematic?", "author": "tylerbenson", "createdAt": "2020-04-24T19:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMzMyNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414813325", "bodyText": "yeah, let's merge them into a single map inside Config. Any edge cases where this would be problematic?\n\n@jdgumz  ?", "author": "lpriima", "createdAt": "2020-04-24T19:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjAwMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414816002", "bodyText": "The only thing I can think of is a hard-coded service tag existing in some Dockerfile or build config that goes unnoticed. If someone adds DD_SERVICE elsewhere and the value is different, it might be a surprise.\nBut I think as long as we call out the order of precedence very clearly in our release notes, folks should be able to triage the issue. I don't think we can support differing service values - there has to be one.", "author": "jdgumz", "createdAt": "2020-04-24T19:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MjUzNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414772534", "bodyText": "DD_SERVICE should not be ignored - it should have the highest precedence.", "author": "jdgumz", "createdAt": "2020-04-24T18:18:09Z", "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1283,191 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == DEFAULT_SERVICE_NAME\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"DD_SERVICE ignored when 'dd.service.name' java property is set; 'dd.service.name' overwrites DD_SERVICE_NAME\"() {", "originalCommit": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwNzg5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414807897", "bodyText": "In our codebase, we have a different order of precedence.  System Properties, defined on the command line have a higher precedence than environment variables.", "author": "tylerbenson", "createdAt": "2020-04-24T19:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MjUzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODIzNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414818236", "bodyText": "@tylerbenson here @jdgumz wants java property(env var) dd.service(DD_SERVICE) take precedence over dd.service.name(DD_SERVICE_NAME).  That's another potentially backward incompatible change which might affect some deployments where we have both of them already. It looks like previous change where we introduced tags which overwrite old existing global.tags : https://github.com/DataDog/dd-trace-java/pull/1263/files#diff-43038f0f76f33bbf93ca377b0f77ff7aR707", "author": "lpriima", "createdAt": "2020-04-24T19:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MjUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414775850", "bodyText": "I'm not sure I understand. Why are we using the service:service-tag-in-dd-trace-global-tags-java-property still? I think it'd be confusing to see a different service in the span metadata from the one that should be used (the value of DD_SERVICE).", "author": "jdgumz", "createdAt": "2020-04-24T18:23:44Z", "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1283,191 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == DEFAULT_SERVICE_NAME\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"DD_SERVICE ignored when 'dd.service.name' java property is set; 'dd.service.name' overwrites DD_SERVICE_NAME\"() {\n+    setup:\n+    environmentVariables.set(DD_SERVICE_NAME_ENV,\"dd-service-name-env-var\")\n+    System.setProperty(PREFIX + SERVICE_NAME, \"dd-service-name-java-prop\")\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-name-java-prop\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n   }\n \n+  def \"DD_SERVICE ignored when 'DD_SERVICE_NAME' environment var is set\"() {\n+    setup:\n+    environmentVariables.set(DD_SERVICE_NAME_ENV,\"dd-service-name-env-var\")\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-name-env-var\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"dd.service overwrites DD_SERVICE\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-java-prop\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"set servicenaem by DD_SERVICE\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+    environmentVariables.set(DD_GLOBAL_TAGS_ENV, \"service:service-tag-in-env-var,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']", "originalCommit": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDA3NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414810074", "bodyText": "I assume service would get removed from the metadata before being reported to the agent, but I'm wondering if the part that does that would then replace the env-var service name since the rules for processing tags happen at a different place. This might be a problem and mean we need to pull those tags out earlier.", "author": "tylerbenson", "createdAt": "2020-04-24T19:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDUzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414810532", "bodyText": "service name will be overwritten for span with the check above", "author": "lpriima", "createdAt": "2020-04-24T19:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMTE0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414821147", "bodyText": "The point of this and some other tests to show: that we can have service tag in tags, which will be later ignored and FOR SURE will be overwritten by some other things up to default service name. That's behaviour is different from env and version tags, which will not be overwritten unless  corresponding java property or env var is set.", "author": "lpriima", "createdAt": "2020-04-24T19:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0NDc1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416044759", "bodyText": "Gotcha. One other question: it seems like DD_SERVICE overrides the value of service even when there's a service tag in the global system property. This seems inconsistent with dd.service as a system property overriding the env var DD_SERVICE? It sounded like we wanted to maintain the highest precedence for system properties?", "author": "jdgumz", "createdAt": "2020-04-27T18:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTU0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416065545", "bodyText": "we have precedence of\n\njava system properties\nenvironment variables\nproperty file\n\nbefore, and implications of this might be more unpredictable for many other deployment. Of we want to change this precedence order, let's address it in a separate PR", "author": "lpriima", "createdAt": "2020-04-27T18:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA=="}], "type": "inlineReview"}, {"oid": "8994a8b37bf78e59d342a44726981eca4aa0b71a", "url": "https://github.com/DataDog/dd-trace-java/commit/8994a8b37bf78e59d342a44726981eca4aa0b71a", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "committedDate": "2020-04-27T06:30:26Z", "type": "commit"}, {"oid": "f50a4871c55a0cee2e4596503e81e6088a26ce25", "url": "https://github.com/DataDog/dd-trace-java/commit/f50a4871c55a0cee2e4596503e81e6088a26ce25", "message": "DD_SERVICE priority over DD_SERVICE_NAME; merge TAGS and GLOBAL_TAGS", "committedDate": "2020-04-27T06:53:07Z", "type": "forcePushed"}, {"oid": "2bab0776f81603348332bab998a6a466f779fdfa", "url": "https://github.com/DataDog/dd-trace-java/commit/2bab0776f81603348332bab998a6a466f779fdfa", "message": "DD_SERVICE priority over DD_SERVICE_NAME; merge TAGS and GLOBAL_TAGS", "committedDate": "2020-04-27T06:55:07Z", "type": "commit"}, {"oid": "2bab0776f81603348332bab998a6a466f779fdfa", "url": "https://github.com/DataDog/dd-trace-java/commit/2bab0776f81603348332bab998a6a466f779fdfa", "message": "DD_SERVICE priority over DD_SERVICE_NAME; merge TAGS and GLOBAL_TAGS", "committedDate": "2020-04-27T06:55:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNjAzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416036032", "bodyText": "I'm not sure I understand this case. If we have a service somewhere (global tags, or even DD_SERVICE) shouldn't that be used?", "author": "jdgumz", "createdAt": "2020-04-27T18:07:59Z", "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1282,190 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {", "originalCommit": "2bab0776f81603348332bab998a6a466f779fdfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2ODA2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416068066", "bodyText": "It should not. It will be ignored. That's requirement we have now. You can't define service name through tags. If you try to do so: it will be overwritten later", "author": "lpriima", "createdAt": "2020-04-27T18:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNjAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzNzMxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416137314", "bodyText": "While this is true from the config perspective, we may have a problem with this when it is actually applied to a span.  Spans have decorators that are applied to tags.  Specifically ServiceNameDecorator may be problematic.  I think we want to update SpanDecoratorTest to validate this.", "author": "tylerbenson", "createdAt": "2020-04-27T20:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNjAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0ODI0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416048248", "bodyText": "Wait - don't we have it set up to allow DD_ENV and DD_VERSION to override dd.trace.global.tags?\nI'm guessing this is a different case because dd.service already existed and generally system properties take the highest precedent?", "author": "jdgumz", "createdAt": "2020-04-27T18:25:45Z", "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1282,190 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == DEFAULT_SERVICE_NAME\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n   }\n \n+  def \"DD_SERVICE precedence over 'dd.service.name' java property is set; 'dd.service' overwrites DD_SERVICE\"() {", "originalCommit": "2bab0776f81603348332bab998a6a466f779fdfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA3MDA1NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416070054", "bodyText": "Wait - don't we have it set up to allow DD_ENV and DD_VERSION to override dd.trace.global.tags?\n\nwe don't have to, but if we set these 2 env vars they override corresponding tags. Here is a test for it:\nhttps://github.com/DataDog/dd-trace-java/pull/1393/files#diff-19302d05d6472f1ef9c915823a88f122R1323\n\nI'm guessing this is a different case because dd.service already existed and generally system properties take the highest precedent?\n\ncorrect", "author": "lpriima", "createdAt": "2020-04-27T18:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0ODI0OA=="}], "type": "inlineReview"}]}