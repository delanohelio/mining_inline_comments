{"pr_number": 1948, "pr_title": "fix akka/scala FJP internal push context propagation", "pr_createdAt": "2020-10-05T11:09:47Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1948", "timeline": [{"oid": "1f80a9c58e95f48f20cec115e036b77aa44b093d", "url": "https://github.com/DataDog/dd-trace-java/commit/1f80a9c58e95f48f20cec115e036b77aa44b093d", "message": "fix context propagation with internal push in Scala FJP", "committedDate": "2020-10-05T11:10:58Z", "type": "forcePushed"}, {"oid": "3a26d79fab1177baceccc8477a1905f1f5d14c13", "url": "https://github.com/DataDog/dd-trace-java/commit/3a26d79fab1177baceccc8477a1905f1f5d14c13", "message": "fix context propagation with internal push in Scala FJP", "committedDate": "2020-10-05T16:22:12Z", "type": "forcePushed"}, {"oid": "af753130d6b953f34fe1582716cc8d6d535129fd", "url": "https://github.com/DataDog/dd-trace-java/commit/af753130d6b953f34fe1582716cc8d6d535129fd", "message": "fix context propagation with internal push in Scala FJP", "committedDate": "2020-10-05T16:48:13Z", "type": "forcePushed"}, {"oid": "6d9f43aca0eda438826eff65d85c9f8d0786ba4c", "url": "https://github.com/DataDog/dd-trace-java/commit/6d9f43aca0eda438826eff65d85c9f8d0786ba4c", "message": "fix context propagation with internal push in Scala FJP", "committedDate": "2020-10-05T17:06:07Z", "type": "forcePushed"}, {"oid": "245fef70eeabf6f494583a1a60bc71b103e430e8", "url": "https://github.com/DataDog/dd-trace-java/commit/245fef70eeabf6f494583a1a60bc71b103e430e8", "message": "demonstrate that context does not propagate with FJP internal pushes (Akka)", "committedDate": "2020-10-05T17:18:43Z", "type": "commit"}, {"oid": "930ad009e832c9486428c75a01b3c065d547dae1", "url": "https://github.com/DataDog/dd-trace-java/commit/930ad009e832c9486428c75a01b3c065d547dae1", "message": "demonstrate that context does not propagate with FJP internal pushes (Scala)", "committedDate": "2020-10-05T17:18:43Z", "type": "commit"}, {"oid": "a10a93ca91ab82cf4dab3ab85533c8bbda838710", "url": "https://github.com/DataDog/dd-trace-java/commit/a10a93ca91ab82cf4dab3ab85533c8bbda838710", "message": "fix context propagation with internal push in Akka FJP", "committedDate": "2020-10-05T17:18:43Z", "type": "commit"}, {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8", "url": "https://github.com/DataDog/dd-trace-java/commit/7402cb0e3d94b359edf994061eaaea9fca0844b8", "message": "fix context propagation with internal push in Scala FJP", "committedDate": "2020-10-05T17:18:43Z", "type": "commit"}, {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8", "url": "https://github.com/DataDog/dd-trace-java/commit/7402cb0e3d94b359edf994061eaaea9fca0844b8", "message": "fix context propagation with internal push in Scala FJP", "committedDate": "2020-10-05T17:18:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MjY1MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#discussion_r499762650", "bodyText": "I don't recall for sure, but I think ByteBuddy might not call this when there's an exception and you don't have an onThrowable declaration.", "author": "tylerbenson", "createdAt": "2020-10-05T17:35:43Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinTaskInstrumentation.java", "diffHunk": "@@ -37,90 +29,69 @@\n @AutoService(Instrumenter.class)\n public final class AkkaForkJoinTaskInstrumentation extends Instrumenter.Default {\n \n-  static final String TASK_CLASS_NAME = \"akka.dispatch.forkjoin.ForkJoinTask\";\n-\n-  static final ElementMatcher<ClassLoader> CLASS_LOADER_MATCHER = hasClassesNamed(TASK_CLASS_NAME);\n-\n   public AkkaForkJoinTaskInstrumentation() {\n     super(\"java_concurrent\", \"akka_concurrent\");\n   }\n \n-  @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    // Optimization for expensive typeMatcher.\n-    return CLASS_LOADER_MATCHER;\n-  }\n-\n-  @Override\n-  public ElementMatcher<TypeDescription> typeMatcher() {\n-    return extendsClass(named(TASK_CLASS_NAME));\n-  }\n-\n   @Override\n   public Map<String, String> contextStore() {\n-    return singletonMap(TASK_CLASS_NAME, State.class.getName());\n+    return singletonMap(\"akka.dispatch.forkjoin.ForkJoinTask\", State.class.getName());\n   }\n \n   @Override\n-  public Map<String, String> contextStoreForAll() {\n-    final Map<String, String> map = new HashMap<>();\n-    map.put(Runnable.class.getName(), State.class.getName());\n-    map.put(Callable.class.getName(), State.class.getName());\n-    return Collections.unmodifiableMap(map);\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"akka.dispatch.forkjoin.ForkJoinTask\");\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return singletonMap(\n-        named(\"exec\").and(takesArguments(0)).and(not(isAbstract())),\n-        AkkaForkJoinTaskInstrumentation.class.getName() + \"$ForkJoinTaskAdvice\");\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>(4);\n+    transformers.put(isMethod().and(named(\"doExec\")), getClass().getName() + \"$DoExec\");\n+    transformers.put(isMethod().and(named(\"fork\")), getClass().getName() + \"$Fork\");\n+    transformers.put(isMethod().and(named(\"cancel\")), getClass().getName() + \"$Cancel\");\n+    return transformers;\n   }\n \n-  public static class ForkJoinTaskAdvice {\n-\n-    /**\n-     * When {@link ForkJoinTask} object is submitted to {@link ForkJoinPool} as {@link Runnable} or\n-     * {@link Callable} it will not get wrapped, instead it will be casted to {@code ForkJoinTask}\n-     * directly. This means state is still stored in {@code Runnable} or {@code Callable} and we\n-     * need to use that state.\n-     */\n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static TraceScope enter(@Advice.This final ForkJoinTask thiz) {\n-      final ContextStore<ForkJoinTask, State> contextStore =\n-          InstrumentationContext.get(ForkJoinTask.class, State.class);\n-      TraceScope scope = AdviceUtils.startTaskScope(contextStore, thiz);\n-      if (thiz instanceof Runnable) {\n-        final ContextStore<Runnable, State> runnableContextStore =\n-            InstrumentationContext.get(Runnable.class, State.class);\n-        final TraceScope newScope =\n-            AdviceUtils.startTaskScope(runnableContextStore, (Runnable) thiz);\n-        if (null != newScope) {\n-          if (null != scope) {\n-            newScope.close();\n-          } else {\n-            scope = newScope;\n-          }\n+  public static final class DoExec {\n+    @Advice.OnMethodEnter\n+    public static <T> TraceScope before(@Advice.This ForkJoinTask<T> task) {\n+      State state = InstrumentationContext.get(ForkJoinTask.class, State.class).get(task);\n+      if (null != state) {\n+        TraceScope.Continuation continuation = state.getAndResetContinuation();\n+        if (null != continuation) {\n+          return continuation.activate();\n         }\n       }\n-      if (thiz instanceof Callable) {\n-        final ContextStore<Callable, State> callableContextStore =\n-            InstrumentationContext.get(Callable.class, State.class);\n-        final TraceScope newScope =\n-            AdviceUtils.startTaskScope(callableContextStore, (Callable) thiz);\n-        if (null != newScope) {\n-          if (null != scope) {\n-            newScope.close();\n-          } else {\n-            scope = newScope;\n-          }\n-        }\n+      return null;\n+    }\n+\n+    @Advice.OnMethodExit", "originalCommit": "7402cb0e3d94b359edf994061eaaea9fca0844b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NDE5MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#discussion_r499774191", "bodyText": "Good to know, thanks", "author": "richardstartin", "createdAt": "2020-10-05T17:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MjY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MzIxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#discussion_r500463211", "bodyText": "Interesting.  Do we need to add some static analysis to flag such cases?", "author": "dougqh", "createdAt": "2020-10-06T17:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MjY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMTI4Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#discussion_r501831283", "bodyText": "We should, because it's a scope leak waiting to happen", "author": "richardstartin", "createdAt": "2020-10-08T15:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MjY1MA=="}], "type": "inlineReview"}, {"oid": "43c504c36d2d27a86d931f11a50deed3ef62beba", "url": "https://github.com/DataDog/dd-trace-java/commit/43c504c36d2d27a86d931f11a50deed3ef62beba", "message": "make sure exit blocks always execute", "committedDate": "2020-10-05T18:28:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NTk1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#discussion_r500465952", "bodyText": "Nice, I was going to ask how to test this.  Glad to see that we've already thought about it.", "author": "dougqh", "createdAt": "2020-10-06T17:17:16Z", "path": "dd-java-agent/instrumentation/akka-concurrent/src/test/java/LinearTask.java", "diffHunk": "@@ -0,0 +1,45 @@\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+\n+import akka.dispatch.forkjoin.RecursiveTask;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+public class LinearTask extends RecursiveTask<Integer> {\n+  private final int depth;\n+  private final int parent;\n+\n+  public LinearTask(int depth) {\n+    this(0, depth);\n+  }\n+\n+  private LinearTask(int parent, int depth) {\n+    this.parent = parent;\n+    this.depth = depth;\n+  }\n+\n+  @Override\n+  protected Integer compute() {\n+    try {\n+      // introduces delay to encourage parallelism\n+      // which will expose problems with context propagation\n+      Thread.sleep(5);", "originalCommit": "43c504c36d2d27a86d931f11a50deed3ef62beba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}