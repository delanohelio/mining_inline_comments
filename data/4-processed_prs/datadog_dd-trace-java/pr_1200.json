{"pr_number": 1200, "pr_title": "Reduce tracer thread count by combining scheduled executors into a single executor.", "pr_createdAt": "2020-02-04T20:33:54Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1200", "timeline": [{"oid": "9348ab8c57ea514b5f8d47505bbae81eabed17b3", "url": "https://github.com/DataDog/dd-trace-java/commit/9348ab8c57ea514b5f8d47505bbae81eabed17b3", "message": "Fix muzzle", "committedDate": "2020-02-04T21:57:00Z", "type": "forcePushed"}, {"oid": "425a7df0b816829cc9b4ec9cad264fdd3127657c", "url": "https://github.com/DataDog/dd-trace-java/commit/425a7df0b816829cc9b4ec9cad264fdd3127657c", "message": "Fix muzzle", "committedDate": "2020-02-04T23:12:46Z", "type": "forcePushed"}, {"oid": "e829ec1d8e1f22909cfe01f68548e8cb0533bb43", "url": "https://github.com/DataDog/dd-trace-java/commit/e829ec1d8e1f22909cfe01f68548e8cb0533bb43", "message": "Fix muzzle", "committedDate": "2020-02-04T23:54:12Z", "type": "forcePushed"}, {"oid": "08515857a7cfd9998975e2a7a2932d20e1f6dc76", "url": "https://github.com/DataDog/dd-trace-java/commit/08515857a7cfd9998975e2a7a2932d20e1f6dc76", "message": "Fix muzzle", "committedDate": "2020-02-05T01:09:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNjc4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r375106786", "bodyText": "executorService.shutdownNow() ?", "author": "jpbempel", "createdAt": "2020-02-05T08:06:09Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/SharedExecutors.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package datadog.common.exec;\n+\n+import static datadog.common.exec.DaemonThreadFactory.TASK_SCHEDULER;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class SharedExecutors {\n+  private static final long SHUTDOWN_WAIT_SECONDS = 5;\n+\n+  private static final ScheduledExecutorService TASK_SCHEDULER_EXECUTOR_SERVICE =\n+      Executors.newSingleThreadScheduledExecutor(TASK_SCHEDULER);\n+\n+  static {\n+    try {\n+      Runtime.getRuntime().addShutdownHook(new ShutdownCallback(TASK_SCHEDULER_EXECUTOR_SERVICE));\n+    } catch (final IllegalStateException ex) {\n+      // The JVM is already shutting down.\n+    }\n+  }\n+\n+  public static ScheduledExecutorService taskScheduler() {\n+    return TASK_SCHEDULER_EXECUTOR_SERVICE;\n+  }\n+\n+  public static ScheduledFuture<?> scheduleTaskAtFixedRate(\n+      final Runnable command, final long initialDelay, final long period, final TimeUnit unit) {\n+    return TASK_SCHEDULER_EXECUTOR_SERVICE.scheduleAtFixedRate(command, initialDelay, period, unit);\n+  }\n+\n+  public static boolean isTaskSchedulerShutdown() {\n+    return TASK_SCHEDULER_EXECUTOR_SERVICE.isShutdown();\n+  }\n+\n+  private static final class ShutdownCallback extends Thread {\n+\n+    private final ScheduledExecutorService executorService;\n+\n+    private ShutdownCallback(final ScheduledExecutorService executorService) {\n+      super(\"dd-exec-shutdown-hook\");\n+      this.executorService = executorService;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        executorService.shutdown();\n+        executorService.awaitTermination(SHUTDOWN_WAIT_SECONDS, TimeUnit.SECONDS);\n+      } catch (final InterruptedException e) {\n+        // Don't bother waiting then...", "originalCommit": "08515857a7cfd9998975e2a7a2932d20e1f6dc76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2ODU0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r375368544", "bodyText": "Originally it was shutdownNow but I changed it because I wasn't sure if that was overly harsh.  Do you think shutdownNow() is better?", "author": "tylerbenson", "createdAt": "2020-02-05T16:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNjc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2OTYyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r375369620", "bodyText": "I mean not replacing what you have with shutdown + awaitTermination but as a fallback in case of timeout (catch clause)", "author": "jpbempel", "createdAt": "2020-02-05T16:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNjc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNzcwNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r375407707", "bodyText": "Ok, I understand now.  Thanks for the suggestion.", "author": "tylerbenson", "createdAt": "2020-02-05T17:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwNjc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjU5NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r376422595", "bodyText": "Without context as to what this is, this looks kind of weird.\nI get that it is the TRACE_PROCESSOR ThreadFactory, but without an affix on the variable name or the class qualifying the static access it still looks strange at first glance.", "author": "dougqh", "createdAt": "2020-02-07T14:37:05Z", "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -29,8 +30,8 @@ public TraceProcessingDisruptor(\n   }\n \n   @Override\n-  protected ThreadFactory getThreadFactory() {\n-    return new DaemonThreadFactory(\"dd-trace-processor\");\n+  protected DaemonThreadFactory getThreadFactory() {\n+    return TRACE_PROCESSOR;", "originalCommit": "1c6e3e685a6ecfd4b4b91ebb4e07e62386f350cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNDQxMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r376424413", "bodyText": "That's the beauty of import static isn't it? \ud83d\ude1b", "author": "jpbempel", "createdAt": "2020-02-07T14:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjg4MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r376422881", "bodyText": "Logging?", "author": "dougqh", "createdAt": "2020-02-07T14:37:40Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/SharedExecutors.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package datadog.common.exec;\n+\n+import static datadog.common.exec.DaemonThreadFactory.TASK_SCHEDULER;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class SharedExecutors {\n+  private static final long SHUTDOWN_WAIT_SECONDS = 5;\n+\n+  private static final ScheduledExecutorService TASK_SCHEDULER_EXECUTOR_SERVICE =\n+      Executors.newSingleThreadScheduledExecutor(TASK_SCHEDULER);\n+\n+  static {\n+    try {\n+      Runtime.getRuntime().addShutdownHook(new ShutdownCallback(TASK_SCHEDULER_EXECUTOR_SERVICE));\n+    } catch (final IllegalStateException ex) {\n+      // The JVM is already shutting down.", "originalCommit": "1c6e3e685a6ecfd4b4b91ebb4e07e62386f350cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMzc3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r376423775", "bodyText": "I'd personally prefer a singleton object without the static wrapper methods, but I'll leave it to the group to decide.", "author": "dougqh", "createdAt": "2020-02-07T14:39:19Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/SharedExecutors.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package datadog.common.exec;\n+\n+import static datadog.common.exec.DaemonThreadFactory.TASK_SCHEDULER;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class SharedExecutors {\n+  private static final long SHUTDOWN_WAIT_SECONDS = 5;\n+\n+  private static final ScheduledExecutorService TASK_SCHEDULER_EXECUTOR_SERVICE =\n+      Executors.newSingleThreadScheduledExecutor(TASK_SCHEDULER);\n+\n+  static {\n+    try {\n+      Runtime.getRuntime().addShutdownHook(new ShutdownCallback(TASK_SCHEDULER_EXECUTOR_SERVICE));\n+    } catch (final IllegalStateException ex) {\n+      // The JVM is already shutting down.\n+    }\n+  }\n+\n+  public static ScheduledExecutorService taskScheduler() {", "originalCommit": "1c6e3e685a6ecfd4b4b91ebb4e07e62386f350cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNDQ3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r376424475", "bodyText": "At some point, we should revisit whether we really need the shutdown hooks.\nThey aren't guaranteed to work and they cause problems with SecurityManagers.\nBut this PR is probably not the right place to make such a change.", "author": "dougqh", "createdAt": "2020-02-07T14:40:40Z", "path": "utils/thread-utils/src/main/java/datadog/common/exec/SharedExecutors.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package datadog.common.exec;\n+\n+import static datadog.common.exec.DaemonThreadFactory.TASK_SCHEDULER;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class SharedExecutors {\n+  private static final long SHUTDOWN_WAIT_SECONDS = 5;\n+\n+  private static final ScheduledExecutorService TASK_SCHEDULER_EXECUTOR_SERVICE =\n+      Executors.newSingleThreadScheduledExecutor(TASK_SCHEDULER);\n+\n+  static {\n+    try {\n+      Runtime.getRuntime().addShutdownHook(new ShutdownCallback(TASK_SCHEDULER_EXECUTOR_SERVICE));", "originalCommit": "1c6e3e685a6ecfd4b4b91ebb4e07e62386f350cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNjk2NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r376426964", "bodyText": "+1 shutdown hooks are most of the time useless, as they guarantee nothing, eventually they may close some resources, but destruction of the process will close those resources, at OS level anyway.", "author": "jpbempel", "createdAt": "2020-02-07T14:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNDQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMDA5OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r377200099", "bodyText": "I don't have a deep understanding of them, so I would tend to defer to you.", "author": "tylerbenson", "createdAt": "2020-02-10T17:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNDQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwOTU5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r377209590", "bodyText": "just 2 cents: I think part of the reason we have these is to actually give process a chance to flush traces - i.e. to prevent premature shutdown, not to close resources properly... I'm not sure if that still works this way - but that would have been my reasoning for using shutdown hooks", "author": "mar-kolya", "createdAt": "2020-02-10T17:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNDQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxMjUzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1200#discussion_r377212532", "bodyText": "Yes makes sense here, but still no guarantees, it's best effort :)", "author": "jpbempel", "createdAt": "2020-02-10T17:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNDQ3NQ=="}], "type": "inlineReview"}, {"oid": "75c77691923935db9c23718619e92d2fc03facb5", "url": "https://github.com/DataDog/dd-trace-java/commit/75c77691923935db9c23718619e92d2fc03facb5", "message": "Reduce tracer thread count by combining scheduled executors into a single executor.\n\nPulls out utility classes for reuse by other projects.\n\nThis also meant the dependency had to be bundled with dd-trace-ot since it isn't published as a separate dependency.", "committedDate": "2020-02-10T18:45:58Z", "type": "commit"}, {"oid": "e5980d481206a84cddbe3682ae43fd50d2d0c8ae", "url": "https://github.com/DataDog/dd-trace-java/commit/e5980d481206a84cddbe3682ae43fd50d2d0c8ae", "message": "Fix muzzle", "committedDate": "2020-02-10T18:45:58Z", "type": "commit"}, {"oid": "9c6cfbe359f3209d8ea375527264e1bfd15e8208", "url": "https://github.com/DataDog/dd-trace-java/commit/9c6cfbe359f3209d8ea375527264e1bfd15e8208", "message": "Fix shutdown hook.", "committedDate": "2020-02-10T18:45:58Z", "type": "commit"}, {"oid": "486d98135eabdae3fe511a944bfab85a1d0c6363", "url": "https://github.com/DataDog/dd-trace-java/commit/486d98135eabdae3fe511a944bfab85a1d0c6363", "message": "Code review changes", "committedDate": "2020-02-10T19:37:36Z", "type": "commit"}, {"oid": "486d98135eabdae3fe511a944bfab85a1d0c6363", "url": "https://github.com/DataDog/dd-trace-java/commit/486d98135eabdae3fe511a944bfab85a1d0c6363", "message": "Code review changes", "committedDate": "2020-02-10T19:37:36Z", "type": "forcePushed"}]}