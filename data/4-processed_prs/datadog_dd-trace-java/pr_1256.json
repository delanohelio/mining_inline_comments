{"pr_number": 1256, "pr_title": "WeakCache instead of WeakMap", "pr_createdAt": "2020-02-25T22:35:00Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1256", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzMzkxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r384233917", "bodyText": "This will need to be removed...  Can't put guava on the bootstrap.", "author": "tylerbenson", "createdAt": "2020-02-26T01:48:59Z", "path": "dd-java-agent/agent-bootstrap/agent-bootstrap.gradle", "diffHunk": "@@ -13,6 +13,7 @@ dependencies {\n   compile project(':dd-trace-api')\n   compile deps.opentracing\n   compile deps.slf4j\n+  compile group: 'com.google.guava', name: 'guava', version: versions.guava", "originalCommit": "81c53e54cd7ce1c96d2393108469855af9412e03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMTk4NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r384511985", "bodyText": "We could shadow, but I think the best thing to do is to move WeakCache into agent-tooling to start.\nEven with the existing WeakMap, I don't see any real use outside of instrumentation.", "author": "dougqh", "createdAt": "2020-02-26T14:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzMzkxNw=="}], "type": "inlineReview"}, {"oid": "00ddcd1b1475bd63fcca63d73579a56d2bebe650", "url": "https://github.com/DataDog/dd-trace-java/commit/00ddcd1b1475bd63fcca63d73579a56d2bebe650", "message": "WeakCache intstead of WeakMap", "committedDate": "2020-02-28T01:56:15Z", "type": "forcePushed"}, {"oid": "eeada1a1f8869bba647c97ef0cfc3be5fd06ae5d", "url": "https://github.com/DataDog/dd-trace-java/commit/eeada1a1f8869bba647c97ef0cfc3be5fd06ae5d", "message": "WeakCache instead of WeakMap", "committedDate": "2020-02-28T02:08:46Z", "type": "forcePushed"}, {"oid": "294748d5499029f5a3a67e405221807de160cdca", "url": "https://github.com/DataDog/dd-trace-java/commit/294748d5499029f5a3a67e405221807de160cdca", "message": "WeakCache instead of WeakMap", "committedDate": "2020-02-29T08:43:13Z", "type": "forcePushed"}, {"oid": "1f9f0e0b1caaa9f55cf9bd206408c1e9f101a0cd", "url": "https://github.com/DataDog/dd-trace-java/commit/1f9f0e0b1caaa9f55cf9bd206408c1e9f101a0cd", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-02T05:04:49Z", "type": "forcePushed"}, {"oid": "a336d6b6d573e2d84123f07dabc50b9a7e568959", "url": "https://github.com/DataDog/dd-trace-java/commit/a336d6b6d573e2d84123f07dabc50b9a7e568959", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-02T05:28:26Z", "type": "forcePushed"}, {"oid": "6a0e333638e69bd3aa22e2323507ef7578ee9da7", "url": "https://github.com/DataDog/dd-trace-java/commit/6a0e333638e69bd3aa22e2323507ef7578ee9da7", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-02T05:34:35Z", "type": "forcePushed"}, {"oid": "fbb3800c5f485457978eb60e844e8b239533e8c7", "url": "https://github.com/DataDog/dd-trace-java/commit/fbb3800c5f485457978eb60e844e8b239533e8c7", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-02T05:35:10Z", "type": "forcePushed"}, {"oid": "53d423fb73704baa1ec7cb9e37220c7a8e8d2742", "url": "https://github.com/DataDog/dd-trace-java/commit/53d423fb73704baa1ec7cb9e37220c7a8e8d2742", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-02T16:07:07Z", "type": "forcePushed"}, {"oid": "ce801661692af034b15cedc8474c8fb44d3e00ad", "url": "https://github.com/DataDog/dd-trace-java/commit/ce801661692af034b15cedc8474c8fb44d3e00ad", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-04T08:21:26Z", "type": "forcePushed"}, {"oid": "51a9e65101824248211a999c50cd8afcb937d010", "url": "https://github.com/DataDog/dd-trace-java/commit/51a9e65101824248211a999c50cd8afcb937d010", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-04T08:47:57Z", "type": "forcePushed"}, {"oid": "86c1b10f7d7d813a4fed9b17b85e56f4fdd1b479", "url": "https://github.com/DataDog/dd-trace-java/commit/86c1b10f7d7d813a4fed9b17b85e56f4fdd1b479", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-04T16:06:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2MjQ1OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r388462459", "bodyText": "I'm not sure this one can be a cache, since we cannot necessarily recompute whether we've already injected.\nIf we can safely detection prior failed injection, then we could use a cache.\nHowever, I think a WeakMap is probably the better choice here.", "author": "dougqh", "createdAt": "2020-03-05T17:56:02Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -36,7 +34,7 @@\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final WeakCache<ClassLoader, Boolean> injectedClassLoaders = WeakCache.newWeakCache();", "originalCommit": "86c1b10f7d7d813a4fed9b17b85e56f4fdd1b479", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NDM1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r388464353", "bodyText": "Since the Callable allocation is only down the slow-path, I think this is fine.", "author": "dougqh", "createdAt": "2020-03-05T17:58:30Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -50,12 +50,18 @@ public boolean matches(ClassLoader loader) {\n     if (loader == BOOTSTRAP_LOADER) {\n       loader = Utils.getBootstrapProxy();\n     }\n-\n-    return mismatchCache.computeIfAbsent(loader, this);\n+    final ClassLoader cl = loader;\n+    return mismatchCache.getIfPresentOrCompute(\n+        loader,\n+        new Callable<Boolean>() {", "originalCommit": "86c1b10f7d7d813a4fed9b17b85e56f4fdd1b479", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5OTIwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r390199206", "bodyText": "I would also prefer to use different class as a supplier and avoid creating new anonymous instance just to pass a parameter to cache supplier. But If we using guava Cache interface underneath, this anonymous callable will be created at some point anyway; or we will have to do get and put inside a critical section again (eg: https://github.com/DataDog/dd-trace-java/blob/master/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/WeakMap.java#L120 )", "author": "lpriima", "createdAt": "2020-03-10T09:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NDM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NDg1MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r388464850", "bodyText": "new / new looks odd.  Can this just be WeakCache.newWeakCache.", "author": "dougqh", "createdAt": "2020-03-05T17:59:22Z", "path": "dd-java-agent/agent-tooling/src/test/groovy/datadog/trace/agent/tooling/WeakCacheTest.groovy", "diffHunk": "@@ -0,0 +1,54 @@\n+package datadog.trace.agent.tooling\n+\n+import spock.lang.Specification\n+\n+import java.util.concurrent.Callable\n+\n+class WeakCacheTest  extends Specification  {\n+  def supplier = new CounterSupplier()\n+\n+  def sut = new WeakCache().newWeakCache()", "originalCommit": "86c1b10f7d7d813a4fed9b17b85e56f4fdd1b479", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NTM4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r388475384", "bodyText": "Personally, I'm not found of initialisms for variables or single letter variables -- other e, t for Exception and Throwable.  I'm assuming this stands for subject under test, but I'd prefer something like \"cache\".", "author": "dougqh", "createdAt": "2020-03-05T18:19:56Z", "path": "dd-java-agent/agent-tooling/src/test/groovy/datadog/trace/agent/tooling/WeakCacheTest.groovy", "diffHunk": "@@ -0,0 +1,54 @@\n+package datadog.trace.agent.tooling\n+\n+import spock.lang.Specification\n+\n+import java.util.concurrent.Callable\n+\n+class WeakCacheTest  extends Specification  {\n+  def supplier = new CounterSupplier()\n+\n+  def sut = new WeakCache().newWeakCache()", "originalCommit": "86c1b10f7d7d813a4fed9b17b85e56f4fdd1b479", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2MTA4Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r388761083", "bodyText": "it was copy-paste from WeakMapTest.groovy . fixed in both places", "author": "lpriima", "createdAt": "2020-03-06T08:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NTM4NA=="}], "type": "inlineReview"}, {"oid": "75ea96f1c27ca92b5bab2ddda14426e5d41d5c5f", "url": "https://github.com/DataDog/dd-trace-java/commit/75ea96f1c27ca92b5bab2ddda14426e5d41d5c5f", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-06T07:56:15Z", "type": "forcePushed"}, {"oid": "b1ff3e7d9cbaaf6094881b74dcdeeb3086a21e4d", "url": "https://github.com/DataDog/dd-trace-java/commit/b1ff3e7d9cbaaf6094881b74dcdeeb3086a21e4d", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-06T08:14:56Z", "type": "forcePushed"}, {"oid": "02900fe435fa2da2166b871049c42e49ed859ab4", "url": "https://github.com/DataDog/dd-trace-java/commit/02900fe435fa2da2166b871049c42e49ed859ab4", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-06T08:33:44Z", "type": "forcePushed"}, {"oid": "c2403cda7a75f579001325e8c9a6dab40bb4def1", "url": "https://github.com/DataDog/dd-trace-java/commit/c2403cda7a75f579001325e8c9a6dab40bb4def1", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-07T01:51:06Z", "type": "forcePushed"}, {"oid": "a80f6d0932afa060631d6faae44e52926019ad54", "url": "https://github.com/DataDog/dd-trace-java/commit/a80f6d0932afa060631d6faae44e52926019ad54", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-07T01:52:41Z", "type": "forcePushed"}, {"oid": "c492b30619cf65ffe8ec3f1bde59cd36d96cea41", "url": "https://github.com/DataDog/dd-trace-java/commit/c492b30619cf65ffe8ec3f1bde59cd36d96cea41", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-07T06:53:21Z", "type": "forcePushed"}, {"oid": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "url": "https://github.com/DataDog/dd-trace-java/commit/c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-07T07:17:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNjgyMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389806823", "bodyText": "Why remove this interface and switch to passing the Callable in?  Seems like an unnecessary tradeoff.", "author": "tylerbenson", "createdAt": "2020-03-09T16:27:52Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,8 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public final class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjA4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r390196089", "bodyText": "This class stores two unrelated abstractions: matcher and cache supplier. I was trying to split them. The actual interface of supplier was not that important for me. But looks like we will be able to remove WeakMap.ValueSupplier after this change.", "author": "lpriima", "createdAt": "2020-03-10T09:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNjgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyODU0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393928543", "bodyText": "Yes, I don't really like classes implementing an extra interface like Supplier.  I think it is generally better to have an internal object for that purpose instead.\nAs for Callable vs our own interface.  I don't think it matters too much, but we typically avoid adding additional abstractions when the JDK classes suffice.  I don't see why this would be any different.\nIn short, I'm happy with the change.", "author": "dougqh", "createdAt": "2020-03-17T19:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwNjgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwOTMyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389809324", "bodyText": "did you figure this out?", "author": "tylerbenson", "createdAt": "2020-03-09T16:31:33Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -82,11 +80,11 @@ private void updateParent(AgentSpan span, final String resourceName) {\n    * @return The result can be an empty string but will never be {@code null}.\n    */\n   private String getPathResourceName(final Class target, final Method method) {\n-    Map<Method, String> classMap = resourceNames.get(target);\n-\n+    Map<Method, String> classMap = resourceNames.getIfPresent(target);\n+    // tests are failing if put is inside critical section here", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NTQ1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r390185453", "bodyText": "didn't figure out why. But definitely logic is expected to be like this in tests. If I use direct cache.get(key, valueSuppler) then tests are failing", "author": "lpriima", "createdAt": "2020-03-10T09:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwOTMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MzA1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395643052", "bodyText": "I was thinking about another detail related to critical sections yesterday.\nI think doing the computation inside the critical section might be a bad idea in general.\nMy thinking is that it increases the amount of activity under lock including likely taking other locks.  In other words, it increases our potential for deadlocks.  I'm not sure how much it increases our exposure, but it is strictly an increase.", "author": "dougqh", "createdAt": "2020-03-20T13:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwOTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNzExMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389817111", "bodyText": "This class is referenced directly by instrumentation so it needs to be in the bootstrap project.  Guava should not be though, this is why we have WeakMap.Provider.", "author": "tylerbenson", "createdAt": "2020-03-09T16:43:58Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakCache.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.agent.tooling;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * no null keys nor null values are permitted\n+ *\n+ * @param <K>\n+ * @param <V>\n+ */\n+@Slf4j\n+public final class WeakCache<K, V> {", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5ODY3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r390398670", "bodyText": "Hmm, that makes sense -- and maybe, following WeakMap.Provider is the right choice for now.\nI'm a little worried that the way our instrumentation is currently structured obscures the requirements for injecting into ClassLoaders particularly the bootstrap.  I'm actually increasingly thinking we shouldn't inject into the bootstrap at all, but that's a separate matter.\nI also don't like the swapping of the Provider at runtime required by WeakMap.Provider and others.  I'd prefer to see something immutable if possible -- perhaps via ServiceLoader.  Right now, a call at start-up provides a different result than later on -- given that the concurrency properties of the WeakMap are crucial, I find that too subtle and problematic.\nAs alternative, we could have WeakCache find a Provider by searching the instrumentation ClassLoader using ServiceLoader.", "author": "dougqh", "createdAt": "2020-03-10T15:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxNzExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2MjgzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389862837", "bodyText": "I'm wondering a general 10 min expiration works; I think it does.\nOur main cache control should be size -- and we're forcing all callers to specify, so I think this is fine.\nMaybe we should also provide an option to specify initialSize, but I think this is reasonable starting point.", "author": "dougqh", "createdAt": "2020-03-09T17:56:36Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakCache.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.agent.tooling;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * no null keys nor null values are permitted\n+ *\n+ * @param <K>\n+ * @param <V>\n+ */\n+@Slf4j\n+public final class WeakCache<K, V> {\n+  public static final int CACHE_CONCURRENCY =\n+      Math.max(8, Runtime.getRuntime().availableProcessors());\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache() {\n+    return new WeakCache(\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .concurrencyLevel(CACHE_CONCURRENCY)\n+            .expireAfterAccess(10, TimeUnit.MINUTES)\n+            .build());\n+  }\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache(final long maxSize) {\n+    return new WeakCache(\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .maximumSize(maxSize)\n+            .concurrencyLevel(CACHE_CONCURRENCY)\n+            .expireAfterAccess(10, TimeUnit.MINUTES)", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2MzQ1Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389863456", "bodyText": "I assuming we still need to run this through googleJavaFormat, since I think it would make most of these parameters final.", "author": "dougqh", "createdAt": "2020-03-09T17:57:28Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakCache.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.agent.tooling;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * no null keys nor null values are permitted\n+ *\n+ * @param <K>\n+ * @param <V>\n+ */\n+@Slf4j\n+public final class WeakCache<K, V> {\n+  public static final int CACHE_CONCURRENCY =\n+      Math.max(8, Runtime.getRuntime().availableProcessors());\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache() {\n+    return new WeakCache(\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .concurrencyLevel(CACHE_CONCURRENCY)\n+            .expireAfterAccess(10, TimeUnit.MINUTES)\n+            .build());\n+  }\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache(final long maxSize) {\n+    return new WeakCache(\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .maximumSize(maxSize)\n+            .concurrencyLevel(CACHE_CONCURRENCY)\n+            .expireAfterAccess(10, TimeUnit.MINUTES)\n+            .build());\n+  }\n+\n+  private final Cache<K, V> cache;\n+\n+  private WeakCache(Cache<K, V> cache) {\n+    this.cache = cache;\n+  }\n+\n+  /** @return null if key is not present */\n+  public V getIfPresent(Object key) {\n+    return cache.getIfPresent(key);\n+  }\n+\n+  public V getIfPresentOrCompute(K key, Callable<? extends V> loader) {", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3OTgxNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389879816", "bodyText": "I don't think that's a googleJavaFormat thing, but specific to our recommended Idea configuration.", "author": "tylerbenson", "createdAt": "2020-03-09T18:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2MzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3MTM1NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r390171354", "bodyText": "ok", "author": "lpriima", "createdAt": "2020-03-10T09:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2MzQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NDI2Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389864267", "bodyText": "I assume in this case that we can recompute, so this should be fine.", "author": "dougqh", "createdAt": "2020-03-09T17:58:51Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-1/src/main/java/datadog/trace/instrumentation/jaxrs1/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -19,7 +17,7 @@\n public class JaxRsAnnotationsDecorator extends BaseDecorator {\n   public static JaxRsAnnotationsDecorator DECORATE = new JaxRsAnnotationsDecorator();\n \n-  private final WeakMap<Class, Map<Method, String>> resourceNames = newWeakMap();\n+  private final WeakCache<Class, Map<Method, String>> resourceNames = WeakCache.newWeakCache();", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMTg1NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393831855", "bodyText": "https://github.com/DataDog/dd-trace-java/pull/1256/files#diff-4af6c77e2e2da192a5bf9abf9298c074R22\nkeeping as is so far. because change is getting to big already", "author": "lpriima", "createdAt": "2020-03-17T17:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NDI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NDczMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389864732", "bodyText": "I'm not sure we should have a newWeakCache that doesn't require specifying size.\nBasically, I'm not sure there's a one size fits all or most for this, but maybe, there is.", "author": "dougqh", "createdAt": "2020-03-09T17:59:41Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-1/src/main/java/datadog/trace/instrumentation/jaxrs1/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -19,7 +17,7 @@\n public class JaxRsAnnotationsDecorator extends BaseDecorator {\n   public static JaxRsAnnotationsDecorator DECORATE = new JaxRsAnnotationsDecorator();\n \n-  private final WeakMap<Class, Map<Method, String>> resourceNames = newWeakMap();\n+  private final WeakCache<Class, Map<Method, String>> resourceNames = WeakCache.newWeakCache();", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4MzMxOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r390183319", "bodyText": "default is unlimited size", "author": "lpriima", "createdAt": "2020-03-10T09:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NDczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODA5Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393838093", "bodyText": "introduce custom size parameter:\nhttps://github.com/DataDog/dd-trace-java/pull/1256/files#diff-f371393c051827398efcd93779e801deR35\nkeeping as is so far, because change getting too big:\nhttps://github.com/DataDog/dd-trace-java/pull/1256/files#diff-4af6c77e2e2da192a5bf9abf9298c074R22", "author": "lpriima", "createdAt": "2020-03-17T17:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NDczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NTg4MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395645881", "bodyText": "My thinking is that we keep the WeakMap for non-evicting unlimited cases.  WeakCache should always evict -- and people need to write code with that in mind.\nWe should also strictly prefer WeakCache over WeakMap whenever possible.", "author": "dougqh", "createdAt": "2020-03-20T13:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NDczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NTM1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389865352", "bodyText": "Is this effectively another cache?\nI guess don't yet a notion of a non-weak cache, but maybe, we should.", "author": "dougqh", "createdAt": "2020-03-09T18:00:42Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-1/src/main/java/datadog/trace/instrumentation/jaxrs1/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -71,11 +69,10 @@ private void updateParent(AgentSpan span, final String resourceName) {\n    * @return The result can be an empty string but will never be {@code null}.\n    */\n   private String getPathResourceName(final Class target, final Method method) {\n-    Map<Method, String> classMap = resourceNames.get(target);\n-\n+    Map<Method, String> classMap = resourceNames.getIfPresent(target);\n     if (classMap == null) {\n-      resourceNames.putIfAbsent(target, new ConcurrentHashMap<Method, String>());\n-      classMap = resourceNames.get(target);\n+      resourceNames.put(target, new ConcurrentHashMap<Method, String>());", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NDEzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r390184133", "bodyText": "it's just how it was before", "author": "lpriima", "createdAt": "2020-03-10T09:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2NTM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg2Nzk0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r389867940", "bodyText": "I know this is pre-existing and a bit subjective.\nHowever, I would prefer to see ConcurrentMap rather than Map here to make the thread coordination a bit more clear.", "author": "dougqh", "createdAt": "2020-03-09T18:05:28Z", "path": "dd-java-agent/instrumentation/netty-4.1/src/main/java/datadog/trace/instrumentation/netty41/AttributeKeys.java", "diffHunk": "@@ -1,27 +1,26 @@\n package datadog.trace.instrumentation.netty41;\n \n-import datadog.trace.bootstrap.WeakMap;\n+import datadog.trace.agent.tooling.WeakCache;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.context.TraceScope;\n import datadog.trace.instrumentation.netty41.client.HttpClientTracingHandler;\n import datadog.trace.instrumentation.netty41.server.HttpServerTracingHandler;\n import io.netty.util.AttributeKey;\n import java.util.Map;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n \n public class AttributeKeys {\n \n-  private static final WeakMap<ClassLoader, Map<String, AttributeKey<?>>> map =\n-      WeakMap.Implementation.DEFAULT.get();\n-\n-  private static final WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>\n-      mapSupplier =\n-          new WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>() {\n-            @Override\n-            public Map<String, AttributeKey<?>> get(final ClassLoader ignored) {\n-              return new ConcurrentHashMap<>();\n-            }\n-          };\n+  private static final WeakCache<ClassLoader, Map<String, AttributeKey<?>>> map =", "originalCommit": "c7f5acc2bc9d02d3421dea262117a89bb9f1b549", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "200eab0c3db26e92668d32a6caf5bcee9bbe4ca3", "url": "https://github.com/DataDog/dd-trace-java/commit/200eab0c3db26e92668d32a6caf5bcee9bbe4ca3", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-10T09:52:25Z", "type": "forcePushed"}, {"oid": "02706bb65c513117ab52cbc7a12fb90174745f7d", "url": "https://github.com/DataDog/dd-trace-java/commit/02706bb65c513117ab52cbc7a12fb90174745f7d", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-10T10:05:49Z", "type": "forcePushed"}, {"oid": "a86e839eef7c6e871310b6f12563c5ee8ab6998b", "url": "https://github.com/DataDog/dd-trace-java/commit/a86e839eef7c6e871310b6f12563c5ee8ab6998b", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-11T08:29:47Z", "type": "forcePushed"}, {"oid": "9768bf7dc971383a78a25a402d7e6b90c25aaa5f", "url": "https://github.com/DataDog/dd-trace-java/commit/9768bf7dc971383a78a25a402d7e6b90c25aaa5f", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-11T10:30:06Z", "type": "forcePushed"}, {"oid": "5ab050e980f71d50550a974a2210aa3c45a08b40", "url": "https://github.com/DataDog/dd-trace-java/commit/5ab050e980f71d50550a974a2210aa3c45a08b40", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-11T10:30:53Z", "type": "forcePushed"}, {"oid": "b1b988ff476bbe3ab4cf8e54cfe042c710a5b4b2", "url": "https://github.com/DataDog/dd-trace-java/commit/b1b988ff476bbe3ab4cf8e54cfe042c710a5b4b2", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-11T11:08:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMDcyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r391300722", "bodyText": "PreparedStatements can be reused forever.  These entries can't expire.  I believe this needs to be a WeakMap.  Connections can also be reused but I think that codepath rebuilds DBInfo if its not in the map.", "author": "randomanderson", "createdAt": "2020-03-11T22:16:18Z", "path": "dd-java-agent/instrumentation/jdbc/src/main/java/datadog/trace/instrumentation/jdbc/JDBCMaps.java", "diffHunk": "@@ -13,6 +11,7 @@\n  * <p>Should be injected into the bootstrap classpath.\n  */\n public class JDBCMaps {\n-  public static final WeakMap<Connection, DBInfo> connectionInfo = newWeakMap();\n-  public static final WeakMap<PreparedStatement, String> preparedStatements = newWeakMap();\n+  public static final WeakCache<Connection, DBInfo> connectionInfo = WeakCache.newWeakCache();\n+  public static final WeakCache<PreparedStatement, String> preparedStatements =", "originalCommit": "b1b988ff476bbe3ab4cf8e54cfe042c710a5b4b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NDgxMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r391884810", "bodyText": "changed back", "author": "lpriima", "createdAt": "2020-03-12T20:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMDcyMg=="}], "type": "inlineReview"}, {"oid": "9383c4b1717a1dd6e44dd4acc794f216208c6978", "url": "https://github.com/DataDog/dd-trace-java/commit/9383c4b1717a1dd6e44dd4acc794f216208c6978", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-11T23:22:06Z", "type": "forcePushed"}, {"oid": "af7d2a44c806369518abaf8d76d32f1b7484a196", "url": "https://github.com/DataDog/dd-trace-java/commit/af7d2a44c806369518abaf8d76d32f1b7484a196", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-12T08:29:26Z", "type": "forcePushed"}, {"oid": "a5be8fa7c6ebf957b218c9cf2ced583d02d8bef0", "url": "https://github.com/DataDog/dd-trace-java/commit/a5be8fa7c6ebf957b218c9cf2ced583d02d8bef0", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-12T20:45:09Z", "type": "forcePushed"}, {"oid": "821af18bc90b50d0d7a175535ddfa7cf043b6854", "url": "https://github.com/DataDog/dd-trace-java/commit/821af18bc90b50d0d7a175535ddfa7cf043b6854", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-12T21:37:49Z", "type": "forcePushed"}, {"oid": "fa0de92b0819745ec82c19940689f51f1f6ad6b1", "url": "https://github.com/DataDog/dd-trace-java/commit/fa0de92b0819745ec82c19940689f51f1f6ad6b1", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-17T02:46:32Z", "type": "forcePushed"}, {"oid": "940ad33b4c427397469e6322b6276746e05cc37e", "url": "https://github.com/DataDog/dd-trace-java/commit/940ad33b4c427397469e6322b6276746e05cc37e", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-17T03:05:02Z", "type": "forcePushed"}, {"oid": "6c84c0a85f3c1b16795cbcc0d07352fe815b1bd3", "url": "https://github.com/DataDog/dd-trace-java/commit/6c84c0a85f3c1b16795cbcc0d07352fe815b1bd3", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-17T04:26:22Z", "type": "forcePushed"}, {"oid": "68c11786e6bcfa4a6cbb4ba7c89d15c84e80b928", "url": "https://github.com/DataDog/dd-trace-java/commit/68c11786e6bcfa4a6cbb4ba7c89d15c84e80b928", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-17T05:15:55Z", "type": "forcePushed"}, {"oid": "aac32a43a67c36976b3911e98b5df70340c88142", "url": "https://github.com/DataDog/dd-trace-java/commit/aac32a43a67c36976b3911e98b5df70340c88142", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-17T05:42:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNjE1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393736153", "bodyText": "Why Object key rather than K key?", "author": "dougqh", "createdAt": "2020-03-17T14:50:05Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/WeakCache.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package datadog.trace.bootstrap;\n+\n+import java.util.concurrent.Callable;\n+import lombok.extern.slf4j.Slf4j;\n+\n+public interface WeakCache<K, V> {\n+  interface Provider<K, V> {\n+    WeakCache<K, V> newWeakCache();\n+\n+    WeakCache<K, V> newWeakCache(final long maxSize);\n+  }\n+\n+  V getIfPresent(final Object key);", "originalCommit": "aac32a43a67c36976b3911e98b5df70340c88142", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4NTUzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393785539", "bodyText": "it's pretty much was a copy from guava Cache:\nhttps://github.com/google/guava/blob/0cd4e9faa1360da4a343f84cb275d6eda0c5e732/guava/src/com/google/common/cache/Cache.java#L49\nI was trying to find why it's done like this in guava and didn't find any reason, why they not using K there. They doesn't seems to care about compatibility with JDK versions before 5. Like in JDK There is always a some form of get method accepting Object in all types of map interfaces:\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Map.html#get-java.lang.Object-\nhttps://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html#get-java.lang.Object-", "author": "lpriima", "createdAt": "2020-03-17T15:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNjE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MTA2NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395641065", "bodyText": "Yes, I'm aware that Java maps do something similar.  I think we can leave it as is.  I was mostly just curious.", "author": "dougqh", "createdAt": "2020-03-20T13:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNjE1Mw=="}], "type": "inlineReview"}, {"oid": "420b3d09d6a6e6824c3e0da26cd8747d59ac454c", "url": "https://github.com/DataDog/dd-trace-java/commit/420b3d09d6a6e6824c3e0da26cd8747d59ac454c", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-17T16:06:01Z", "type": "forcePushed"}, {"oid": "1acde595dade750a7bb6f8101211c877441586cd", "url": "https://github.com/DataDog/dd-trace-java/commit/1acde595dade750a7bb6f8101211c877441586cd", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-17T18:51:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNTg3Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393925877", "bodyText": "We should probably treat having more that one supplier as an IllegalState.", "author": "dougqh", "createdAt": "2020-03-17T19:42:36Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTooling.java", "diffHunk": "@@ -16,6 +20,26 @@\n     registerWeakMapProvider();\n   }\n \n+  private static <K, V> Iterator<Provider> loadServiceProviders() {\n+    return ServiceLoader.load(Provider.class, AgentInstaller.class.getClassLoader()).iterator();\n+  }\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache() {\n+    Iterator<Provider> providers = loadServiceProviders();\n+    if (providers.hasNext()) {\n+      return providers.next().newWeakCache();\n+    }\n+    return new WeakCache.NoOpCache<>();\n+  }\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache(final long maxSize) {\n+    Iterator<Provider> providers = loadServiceProviders();\n+    if (providers.hasNext()) {\n+      return providers.next().newWeakCache(maxSize);\n+    }", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNjMyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393926326", "bodyText": "Do we need the NoOp?  Or, would it better to just raise an IllegalStateException immediately?\nI'm usually in favor of failing fast when possible.", "author": "dougqh", "createdAt": "2020-03-17T19:43:30Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTooling.java", "diffHunk": "@@ -16,6 +20,26 @@\n     registerWeakMapProvider();\n   }\n \n+  private static <K, V> Iterator<Provider> loadServiceProviders() {\n+    return ServiceLoader.load(Provider.class, AgentInstaller.class.getClassLoader()).iterator();\n+  }\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache() {\n+    Iterator<Provider> providers = loadServiceProviders();\n+    if (providers.hasNext()) {\n+      return providers.next().newWeakCache();\n+    }\n+    return new WeakCache.NoOpCache<>();\n+  }\n+\n+  public static <K, V> WeakCache<K, V> newWeakCache(final long maxSize) {\n+    Iterator<Provider> providers = loadServiceProviders();\n+    if (providers.hasNext()) {\n+      return providers.next().newWeakCache(maxSize);\n+    }\n+    return new WeakCache.NoOpCache<>();", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjIyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r394002224", "bodyText": "it's always was failfast: https://github.com/DataDog/dd-trace-java/pull/1256/files#diff-c083f4bb26e5995615a99ef3bcd3f171R25\npublic static class NoOpCache<K, V> implements WeakCache<K, V> {\n    public NoOpCache() {\n      log.error(\"Can't provide cache\");\n      throw new RuntimeException(\"Can't initialize skipCache\"); // todo: should I delete it ?\n    }\n\nBut I will do it in less weird form", "author": "lpriima", "createdAt": "2020-03-17T22:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNjMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNjg2Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393926867", "bodyText": "I like the moving of the factory onto AgentTooling.  I think that's a good call given the inherent coupling.", "author": "dougqh", "createdAt": "2020-03-17T19:44:34Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -39,10 +35,9 @@ private ClassLoaderMatcher() {\n       extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n     public static final SkipClassLoaderMatcher INSTANCE = new SkipClassLoaderMatcher();\n     /* Cache of classloader-instance -> (true|false). True = skip instrumentation. False = safe to instrument. */\n-    private static final Cache<ClassLoader, Boolean> skipCache =\n-        CacheBuilder.newBuilder().weakKeys().concurrencyLevel(CACHE_CONCURRENCY).build();\n     private static final String DATADOG_CLASSLOADER_NAME =\n         \"datadog.trace.bootstrap.DatadogClassLoader\";\n+    private static final WeakCache<ClassLoader, Boolean> skipCache = AgentTooling.newWeakCache();", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyOTQyNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393929427", "bodyText": "Thanks for doing that clean-up", "author": "dougqh", "createdAt": "2020-03-17T19:49:23Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-1/src/main/java/datadog/trace/instrumentation/jaxrs1/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -19,7 +19,7 @@\n public class JaxRsAnnotationsDecorator extends BaseDecorator {\n   public static JaxRsAnnotationsDecorator DECORATE = new JaxRsAnnotationsDecorator();\n \n-  private final WeakMap<Class, Map<Method, String>> resourceNames = newWeakMap();\n+  private final WeakMap<Class<?>, Map<Method, String>> resourceNames = newWeakMap();", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzMDQzMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393930433", "bodyText": "So accessing the Provider directly inside the Instrumentation?  I think I like that.", "author": "dougqh", "createdAt": "2020-03-17T19:51:16Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -27,7 +25,8 @@\n \n   public static final JaxRsAnnotationsDecorator DECORATE = new JaxRsAnnotationsDecorator();\n \n-  private final WeakMap<Class, Map<Method, String>> resourceNames = newWeakMap();\n+  private final WeakMap<Class<?>, Map<Method, String>> resourceNames =\n+      WeakMap.Provider.newWeakMap();", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzMDgzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393930832", "bodyText": "I see removed the duplication.  Nice.", "author": "dougqh", "createdAt": "2020-03-17T19:52:02Z", "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/test/groovy/JaxRsAnnotations2InstrumentationTest.groovy", "diffHunk": "@@ -193,18 +193,4 @@ class JaxRsAnnotationsInstrumentationTest extends AgentTestRunner {\n     void call() {\n     }\n   }\n-\n-  def getName(Class clazz) {", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzMTQ1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393931453", "bodyText": "I think I'd prefer that encapsulated a bit more.  As is, that ServiceLoader look-up is a lot to process.", "author": "dougqh", "createdAt": "2020-03-17T19:53:09Z", "path": "dd-java-agent/instrumentation/netty-4.0/src/main/java/datadog/trace/instrumentation/netty40/AttributeKeys.java", "diffHunk": "@@ -1,27 +1,27 @@\n package datadog.trace.instrumentation.netty40;\n \n-import datadog.trace.bootstrap.WeakMap;\n+import datadog.trace.bootstrap.WeakCache;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.context.TraceScope;\n import datadog.trace.instrumentation.netty40.client.HttpClientTracingHandler;\n import datadog.trace.instrumentation.netty40.server.HttpServerTracingHandler;\n import io.netty.util.AttributeKey;\n-import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n public class AttributeKeys {\n \n-  private static final WeakMap<ClassLoader, Map<String, AttributeKey<?>>> map =\n-      WeakMap.Implementation.DEFAULT.get();\n-\n-  private static final WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>\n-      mapSupplier =\n-          new WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>() {\n-            @Override\n-            public Map<String, AttributeKey<?>> get(final ClassLoader ignored) {\n-              return new ConcurrentHashMap<>();\n-            }\n-          };\n+  private static final WeakCache<ClassLoader, ConcurrentMap<String, AttributeKey<?>>> map =\n+      ServiceLoader.load(WeakCache.Provider.class, null).iterator().next().newWeakCache();", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzMTgwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r393931801", "bodyText": "Yes, I'd prefer to create a static factory to wrap the look-up, so we don't have to repeat this.", "author": "dougqh", "createdAt": "2020-03-17T19:53:48Z", "path": "dd-java-agent/instrumentation/netty-4.1/src/main/java/datadog/trace/instrumentation/netty41/AttributeKeys.java", "diffHunk": "@@ -1,27 +1,27 @@\n package datadog.trace.instrumentation.netty41;\n \n-import datadog.trace.bootstrap.WeakMap;\n+import datadog.trace.bootstrap.WeakCache;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.context.TraceScope;\n import datadog.trace.instrumentation.netty41.client.HttpClientTracingHandler;\n import datadog.trace.instrumentation.netty41.server.HttpServerTracingHandler;\n import io.netty.util.AttributeKey;\n-import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n public class AttributeKeys {\n \n-  private static final WeakMap<ClassLoader, Map<String, AttributeKey<?>>> map =\n-      WeakMap.Implementation.DEFAULT.get();\n-\n-  private static final WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>\n-      mapSupplier =\n-          new WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>() {\n-            @Override\n-            public Map<String, AttributeKey<?>> get(final ClassLoader ignored) {\n-              return new ConcurrentHashMap<>();\n-            }\n-          };\n+  private static final WeakCache<ClassLoader, ConcurrentMap<String, AttributeKey<?>>> map =\n+      ServiceLoader.load(WeakCache.Provider.class, null).iterator().next().newWeakCache();", "originalCommit": "1acde595dade750a7bb6f8101211c877441586cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NTA5Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r394145092", "bodyText": "Right now we already have several (e.g.: netty-4.0 and netty-4.1) no-dependency artifacts with a lot of copy-paste inside. If we try to move common code to separate module, the muzzle tests will fail. Do we want to make this changes inside this PR ?", "author": "lpriima", "createdAt": "2020-03-18T07:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzMTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0OTA2NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395649065", "bodyText": "I see.\nYes, I think part of our problem is that helper class system doesn't transitively handle parents, etc. automatically.  I think that ends up discouraging reuse, but we shouldn't solve that now.\nI was more wondering whether we could put a static look-up method on WeakCache or WeakCache.Provider that handles the ServiceLoader logic.  I suppose that has the problem of needing to find the right ClassLoader.  Hmm?", "author": "dougqh", "createdAt": "2020-03-20T13:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzMTgwMQ=="}], "type": "inlineReview"}, {"oid": "6923ea3382dc8b242fb2accb2b071359191fc844", "url": "https://github.com/DataDog/dd-trace-java/commit/6923ea3382dc8b242fb2accb2b071359191fc844", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-18T06:44:53Z", "type": "forcePushed"}, {"oid": "ffbc7522cbb2a2bf1b825e44285ff5452d679c2c", "url": "https://github.com/DataDog/dd-trace-java/commit/ffbc7522cbb2a2bf1b825e44285ff5452d679c2c", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-18T07:24:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MzQ3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r394463479", "bodyText": "I don't think this class can use a cache semantic.  The reason this exists is because netty will throw an error if an attribute of the same name is created more than once.  (See the comment in the class.)", "author": "tylerbenson", "createdAt": "2020-03-18T16:05:21Z", "path": "dd-java-agent/instrumentation/netty-4.0/src/main/java/datadog/trace/instrumentation/netty40/AttributeKeys.java", "diffHunk": "@@ -1,27 +1,41 @@\n package datadog.trace.instrumentation.netty40;\n \n-import datadog.trace.bootstrap.WeakMap;\n+import datadog.trace.bootstrap.WeakCache;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.context.TraceScope;\n import datadog.trace.instrumentation.netty40.client.HttpClientTracingHandler;\n import datadog.trace.instrumentation.netty40.server.HttpServerTracingHandler;\n import io.netty.util.AttributeKey;\n-import java.util.Map;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n public class AttributeKeys {\n+  private static WeakCache<ClassLoader, ConcurrentMap<String, AttributeKey<?>>> newWeakCache() {\n+    final Iterator<WeakCache.Provider> providers =\n+        ServiceLoader.load(WeakCache.Provider.class, null).iterator();\n+    if (providers.hasNext()) {\n+      final WeakCache.Provider provider = providers.next();\n+      if (providers.hasNext()) {\n+        throw new IllegalStateException(\n+            \"Only one implementation of WeakCache.Provider suppose to be in classpath\");\n+      }\n+      return provider.newWeakCache();\n+    }\n+    throw new IllegalStateException(\"Can't load implementation of WeakCache.Provider\");\n+  }\n \n-  private static final WeakMap<ClassLoader, Map<String, AttributeKey<?>>> map =\n-      WeakMap.Implementation.DEFAULT.get();\n-\n-  private static final WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>\n-      mapSupplier =\n-          new WeakMap.ValueSupplier<ClassLoader, Map<String, AttributeKey<?>>>() {\n-            @Override\n-            public Map<String, AttributeKey<?>> get(final ClassLoader ignored) {\n-              return new ConcurrentHashMap<>();\n-            }\n-          };\n+  private static final WeakCache<ClassLoader, ConcurrentMap<String, AttributeKey<?>>> map =", "originalCommit": "ffbc7522cbb2a2bf1b825e44285ff5452d679c2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4ODY4Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r394588687", "bodyText": "Maybe just cache without time eviction ? only by weak reference expiration", "author": "lpriima", "createdAt": "2020-03-18T19:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzOTEyNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395639124", "bodyText": "Conceptually, I don't think of WeakReference expiration as eviction per se.  From the standpoint of retrieving something from the Map/Cache, WeakReference expiration isn't an observable difference.  Only the side effect on memory is observable.", "author": "dougqh", "createdAt": "2020-03-20T13:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY1MTMzMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395651332", "bodyText": "I don't think this class can use a cache semantic. The reason this exists is because netty will throw an error if an attribute of the same name is created more than once. (See the comment in the class.)\n\nThat doesn't necessarily mean that cache won't work, but it depends on the nature of the error.  If Netty fails fast and in recoverable way, then we could simply handle the exception rather than introducing a side structure.", "author": "dougqh", "createdAt": "2020-03-20T13:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MzQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MzY2NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r394463664", "bodyText": "Same problem here...", "author": "tylerbenson", "createdAt": "2020-03-18T16:05:34Z", "path": "dd-java-agent/instrumentation/netty-4.1/src/main/java/datadog/trace/instrumentation/netty41/AttributeKeys.java", "diffHunk": "@@ -1,27 +1,41 @@\n package datadog.trace.instrumentation.netty41;\n \n-import datadog.trace.bootstrap.WeakMap;\n+import datadog.trace.bootstrap.WeakCache;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.context.TraceScope;\n import datadog.trace.instrumentation.netty41.client.HttpClientTracingHandler;\n import datadog.trace.instrumentation.netty41.server.HttpServerTracingHandler;\n import io.netty.util.AttributeKey;\n-import java.util.Map;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n public class AttributeKeys {\n+  private static WeakCache<ClassLoader, ConcurrentMap<String, AttributeKey<?>>> newWeakCache() {", "originalCommit": "ffbc7522cbb2a2bf1b825e44285ff5452d679c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "519b4ad68ab893d88449e638be997374540fca91", "url": "https://github.com/DataDog/dd-trace-java/commit/519b4ad68ab893d88449e638be997374540fca91", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-19T09:00:43Z", "type": "forcePushed"}, {"oid": "623f9bf907b33b894806ab8fc2e95556974e8cde", "url": "https://github.com/DataDog/dd-trace-java/commit/623f9bf907b33b894806ab8fc2e95556974e8cde", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-19T09:47:48Z", "type": "forcePushed"}, {"oid": "3aed00d0de92cf4fa7c773ec71292dd1e4e70e84", "url": "https://github.com/DataDog/dd-trace-java/commit/3aed00d0de92cf4fa7c773ec71292dd1e4e70e84", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-19T15:16:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDcwMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395204701", "bodyText": "This is implied for fields on an interface, so this doesn't change anything.", "author": "tylerbenson", "createdAt": "2020-03-19T17:37:53Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/WeakMap.java", "diffHunk": "@@ -45,7 +45,7 @@ public static boolean isProviderRegistered() {\n   interface Implementation {\n     <K, V> WeakMap<K, V> get();\n \n-    Implementation DEFAULT = new Default();\n+    public static final Implementation DEFAULT = new Default();", "originalCommit": "3aed00d0de92cf4fa7c773ec71292dd1e4e70e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyODA3MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395328070", "bodyText": "that's true. Do you want me to revert it back ? it's just a  style question", "author": "lpriima", "createdAt": "2020-03-19T21:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzOTg3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395639878", "bodyText": "I'm fine with dropping public, but I'm less keen on dropping static.  And final is a useful implied addition.", "author": "dougqh", "createdAt": "2020-03-20T13:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNDcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNTk3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395205978", "bodyText": "How expensive is loadWeakCacheProvider()?  Is this something we should be concerned about?", "author": "tylerbenson", "createdAt": "2020-03-19T17:39:48Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTooling.java", "diffHunk": "@@ -16,22 +20,44 @@\n     registerWeakMapProvider();\n   }\n \n+  private static void registerWeakMapProvider() {\n+    if (!WeakMap.Provider.isProviderRegistered()) {\n+      WeakMap.Provider.registerIfAbsent(new WeakMapSuppliers.WeakConcurrent(new Cleaner()));\n+      //    WeakMap.Provider.registerIfAbsent(new WeakMapSuppliers.WeakConcurrent.Inline());\n+      //    WeakMap.Provider.registerIfAbsent(new WeakMapSuppliers.Guava());\n+    }\n+  }\n+\n+  private static <K, V> Provider loadWeakCacheProvider() {\n+    final Iterator<Provider> providers =\n+        ServiceLoader.load(Provider.class, AgentInstaller.class.getClassLoader()).iterator();\n+    if (providers.hasNext()) {\n+      final Provider provider = providers.next();\n+      if (providers.hasNext()) {\n+        throw new IllegalStateException(\n+            \"Only one implementation of WeakCache.Provider suppose to be in classpath\");\n+      }\n+      return provider;\n+    }\n+    throw new IllegalStateException(\"Can't load implementation of WeakCache.Provider\");\n+  }\n+\n   private static final DDLocationStrategy LOCATION_STRATEGY = new DDLocationStrategy();\n   private static final DDCachingPoolStrategy POOL_STRATEGY = new DDCachingPoolStrategy();\n \n+  public static <K, V> WeakCache<K, V> newWeakCache() {\n+    return loadWeakCacheProvider().newWeakCache();", "originalCommit": "3aed00d0de92cf4fa7c773ec71292dd1e4e70e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMzQ5OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395233499", "bodyText": "Yes, I was pondering that.  I think it would be good to have the Provider captured by a static final, so we don't keep reloading it.", "author": "dougqh", "createdAt": "2020-03-19T18:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNTk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwOTU5OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395209598", "bodyText": "since you're returning a boolean and not a count, maybe doesMatch/matches/evaluateMatch instead?", "author": "tylerbenson", "createdAt": "2020-03-19T17:45:18Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -50,12 +50,18 @@ public boolean matches(ClassLoader loader) {\n     if (loader == BOOTSTRAP_LOADER) {\n       loader = Utils.getBootstrapProxy();\n     }\n-\n-    return mismatchCache.computeIfAbsent(loader, this);\n+    final ClassLoader cl = loader;\n+    return mismatchCache.getIfPresentOrCompute(\n+        loader,\n+        new Callable<Boolean>() {\n+          @Override\n+          public Boolean call() {\n+            return countMismatch(cl);\n+          }\n+        });\n   }\n \n-  @Override\n-  public Boolean get(final ClassLoader loader) {\n+  private boolean countMismatch(final ClassLoader loader) {", "originalCommit": "3aed00d0de92cf4fa7c773ec71292dd1e4e70e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MDQwOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1256#discussion_r395640408", "bodyText": "Is that a side effect of our prior change in this area?  But yes, we should clean-up the naming.", "author": "dougqh", "createdAt": "2020-03-20T13:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwOTU5OA=="}], "type": "inlineReview"}, {"oid": "e2937bc9f44c47e5d9729f1f304961d270f3fae6", "url": "https://github.com/DataDog/dd-trace-java/commit/e2937bc9f44c47e5d9729f1f304961d270f3fae6", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-19T21:59:10Z", "type": "commit"}, {"oid": "e2937bc9f44c47e5d9729f1f304961d270f3fae6", "url": "https://github.com/DataDog/dd-trace-java/commit/e2937bc9f44c47e5d9729f1f304961d270f3fae6", "message": "WeakCache instead of WeakMap", "committedDate": "2020-03-19T21:59:10Z", "type": "forcePushed"}]}