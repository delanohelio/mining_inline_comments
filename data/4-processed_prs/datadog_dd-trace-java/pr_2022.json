{"pr_number": 2022, "pr_title": "Elasticsearch 7 instrumentation", "pr_createdAt": "2020-10-22T11:27:05Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2022", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyODU5NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r510128594", "bodyText": "I'm a bit confused about this (to be honest about muzzle in general), but this seems to say that it should fail for no versions, since (,) is non inclusive, and then pass for all versions, because of the assertInverse = true. Is this correct, and if so, is there no clearer way to write it?", "author": "bantonsson", "createdAt": "2020-10-22T12:42:30Z", "path": "dd-java-agent/instrumentation/elasticsearch/rest-7/rest-7.gradle", "diffHunk": "@@ -0,0 +1,51 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"org.elasticsearch.client\"\n+    module = \"elasticsearch-rest-client\"\n+    versions = \"[7,)\"\n+    assertInverse = true\n+  }\n+\n+  fail {\n+    group = \"org.elasticsearch.client\"\n+    module = \"rest\"\n+    versions = \"(,)\"\n+    assertInverse = true", "originalCommit": "f5e23acadaa06995e369636ac40c79a47d017add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE0NTYyMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r510145621", "bodyText": "I'm still cleaning up the muzzle specs for ES7 so ignore this as it will likely change (it comes from the ES6 muzzle spec)", "author": "mcculls", "createdAt": "2020-10-22T13:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyODU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5NjM3NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r510896375", "bodyText": "Turns out that (,) is treated just like [,] or + (ie. all versions) in the version resolver code because it doesn't have any upper or lower bound - so this was saying it should fail for all versions of the legacy rest artifact. This is correct given the compatibility of that artifact.\nThe use of assertInverse is suspect, since the inverse shouldn't match any version and therefore become a no-op - but I wonder if it was added as a precaution, maybe because of a doubt that the version range really meant \"all versions\"?\nI did find a couple of places that set the range to all-versions and use assertInverse=true - one uses (,) and the other uses [,]. Of all the places that just set the range to all-versions there's a 40/60 split between (,) and [,].\nIMHO we should use [,] (or maybe +?) everywhere to consistently declare \"all versions\" - and also remove assertInverse whenever we set \"all versions\".\nThoughts?", "author": "mcculls", "createdAt": "2020-10-23T13:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyODU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MDUwNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r510980504", "bodyText": "This is really an abuse of set theoretic range notation. I interpreted (,) as the empty set, i.e. the set has equal open upper and lower bounds. So I'm surprised this meant \"everything\" and not \"nothing\". I say we go for + to mean everything, but I'd prefer * or anything else which would differentiate make the notation less pseudo-set-theoretic.", "author": "richardstartin", "createdAt": "2020-10-23T15:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyODU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDI1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r511074253", "bodyText": "I don't think we can use + here... (IIRC, that's a gradle specific syntax).  I think we have to rely on the maven range syntax rules. (+ is also generally a notation for the latest version, not defining a range.)\nI would support standardizing on [,], and not using assertInverse when the range is \"all inclusive\".", "author": "tylerbenson", "createdAt": "2020-10-23T18:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyODU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3ODg4NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r511078884", "bodyText": "Yes, I think there might be alternatives to assertInverse in general.  But for now, it sounds like we've settled on a good solution.", "author": "dougqh", "createdAt": "2020-10-23T18:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyODU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzMjEzNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r511132136", "bodyText": "as @tylerbenson thought [,] is the one that works, and most clearly states \"all versions\" - I tried both * and + and they're not supported by the maven dependency resolver used by muzzle", "author": "mcculls", "createdAt": "2020-10-23T20:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyODU5NA=="}], "type": "inlineReview"}, {"oid": "57c7341fe9e5295760cdf02c1d04fe4377fb3dd2", "url": "https://github.com/DataDog/dd-trace-java/commit/57c7341fe9e5295760cdf02c1d04fe4377fb3dd2", "message": "Elasticsearch 7 instrumentation", "committedDate": "2020-10-23T11:46:56Z", "type": "commit"}, {"oid": "0e2355fc1893353e092c3184ba0cfed933146ed6", "url": "https://github.com/DataDog/dd-trace-java/commit/0e2355fc1893353e092c3184ba0cfed933146ed6", "message": "unused imports", "committedDate": "2020-10-23T11:46:56Z", "type": "commit"}, {"oid": "e45754c0e4b4b8925df738b55ac8c1313581b6c9", "url": "https://github.com/DataDog/dd-trace-java/commit/e45754c0e4b4b8925df738b55ac8c1313581b6c9", "message": "Map AutoPutMappingAction back to PutMappingAction on ES 7.9", "committedDate": "2020-10-23T11:46:56Z", "type": "commit"}, {"oid": "8d008406b07ce5d298389838eb344b5b5e561b39", "url": "https://github.com/DataDog/dd-trace-java/commit/8d008406b07ce5d298389838eb344b5b5e561b39", "message": "Add classloader matcher to make sure the new advice only applies to ES7\n\nThis is because the client in ES7 has been simplified so the best place\nto intercept is the public top-level methods. Since these methods also\nexisted in previous releases we don't want our ES7 advice to also apply\nthere otherwise we'd get duplicated spans.", "committedDate": "2020-10-23T11:46:56Z", "type": "commit"}, {"oid": "c5614320e646a08547562e87812c8b2bd20f8e6b", "url": "https://github.com/DataDog/dd-trace-java/commit/c5614320e646a08547562e87812c8b2bd20f8e6b", "message": "Cleanup", "committedDate": "2020-10-23T11:46:56Z", "type": "commit"}, {"oid": "c5614320e646a08547562e87812c8b2bd20f8e6b", "url": "https://github.com/DataDog/dd-trace-java/commit/c5614320e646a08547562e87812c8b2bd20f8e6b", "message": "Cleanup", "committedDate": "2020-10-23T11:46:56Z", "type": "forcePushed"}, {"oid": "01eeba6f39673d75e5522f8130eed048213c7ffb", "url": "https://github.com/DataDog/dd-trace-java/commit/01eeba6f39673d75e5522f8130eed048213c7ffb", "message": "Apply ElasticsearchBreakTraceInstrumentation workaround ES 7 transport tests", "committedDate": "2020-10-23T13:31:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4OTk1OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r510989958", "bodyText": "General comment, I would love for us to use testcontainers or something else off-jvm so don't have to worry about things like this", "author": "devinsba", "createdAt": "2020-10-23T16:08:29Z", "path": "dd-java-agent/instrumentation/elasticsearch/rest-7/rest-7.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"org.elasticsearch.client\"\n+    module = \"elasticsearch-rest-client\"\n+    versions = \"[7,)\"\n+    assertInverse = true\n+  }\n+\n+  fail {\n+    group = \"org.elasticsearch.client\"\n+    module = \"rest\"\n+    versions = \"[,]\" // legacy artifact, all versions should fail\n+  }\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: '7.0.0'\n+\n+  compile project(':dd-java-agent:instrumentation:elasticsearch')\n+\n+  testCompile project(':dd-java-agent:instrumentation:apache-httpclient-4')\n+  testCompile project(':dd-java-agent:instrumentation:apache-httpasyncclient-4')\n+  // Netty is used, but it adds complexity to the tests since we're using embedded ES.", "originalCommit": "01eeba6f39673d75e5522f8130eed048213c7ffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5NDI0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r510994241", "bodyText": "Is there another version of the transport instrumentation that covers the earlier 7.x versions?", "author": "devinsba", "createdAt": "2020-10-23T16:15:51Z", "path": "dd-java-agent/instrumentation/elasticsearch/transport-7.3/transport-7.3.gradle", "diffHunk": "@@ -0,0 +1,50 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"org.elasticsearch.client\"\n+    module = \"transport\"\n+    versions = \"[7.3,]\"", "originalCommit": "01eeba6f39673d75e5522f8130eed048213c7ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNTIyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r511005220", "bodyText": "So ES only changed Action to ActionType in 7.3 - before that it was still Action, which means the previous transport-6 instrumentation will work for versions before 7.3 (at least for transport traces - the REST instrumentation has a different breaking change that came in in 7.0.)\nThe transport 7.0 scenario isn't covered by our automated tests because other ES7 changes means it needs different test bootstrapping (another reason to consider using testcontainers) and that would conflict with ES6 where the old compatible transport is defined. But local testing of those early versions (ES is already up to 7.10) show it works.", "author": "mcculls", "createdAt": "2020-10-23T16:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5NDI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyNjg0MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2022#discussion_r511126841", "bodyText": "\ud83d\udc4d", "author": "tylerbenson", "createdAt": "2020-10-23T19:55:37Z", "path": "dd-java-agent/instrumentation/elasticsearch/rest-7/src/main/java/datadog/trace/instrumentation/elasticsearch7/RestResponseListener.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package datadog.trace.instrumentation.elasticsearch7;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.elasticsearch.ElasticsearchRestClientDecorator;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseListener;\n+\n+/** This class is identical to version 6's instrumentation. */", "originalCommit": "01eeba6f39673d75e5522f8130eed048213c7ffb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}