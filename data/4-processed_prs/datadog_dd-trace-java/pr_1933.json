{"pr_number": 1933, "pr_title": "Scala Promise and Java CompletableFuture instrumentation", "pr_createdAt": "2020-09-30T14:25:03Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1933", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NjAxNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497556014", "bodyText": "There was a memory saving in making these changes, but not a significant improvement in the time to load our classes. I think there is also potential for deadlock. If this is causing problems, I suggest either synchronizing on getClassLoadingLock(name), or completely abandoning the package based classloading logic.", "author": "richardstartin", "createdAt": "2020-09-30T14:29:12Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/DatadogClassLoader.java", "diffHunk": "@@ -67,11 +67,16 @@ public boolean hasLoadedClass(final String className) {\n   }\n \n   Class<?> loadFromPackage(String packageName, String name) throws ClassNotFoundException {\n-    Object packageLock = internalJarURLHandler.getPackageLock(packageName);\n+    InternalJarURLHandler.Lock packageLock = internalJarURLHandler.getPackageLock(packageName);", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NzQ1NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497567455", "bodyText": "I haven't seen the locks causing any issues.", "author": "bantonsson", "createdAt": "2020-09-30T14:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NjAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzM2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497557360", "bodyText": "I think the changes made to State were an improvement here, and the assert I added previously was incorrect. I.e. it's better to control which thread gets to set the continuation than try, fail, and then assert/log that something bad happened, when it's a race anyway and the important detail is that there is only one winner.", "author": "richardstartin", "createdAt": "2020-09-30T14:30:51Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ConcurrentState.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public final class ConcurrentState {\n+\n+  public static ContextStore.Factory<ConcurrentState> FACTORY =\n+      new ContextStore.Factory<ConcurrentState>() {\n+        @Override\n+        public ConcurrentState create() {\n+          return new ConcurrentState();\n+        }\n+      };\n+\n+  private final AtomicReference<TraceScope.Continuation> continuationRef =\n+      new AtomicReference<>(null);\n+\n+  private ConcurrentState() {}\n+\n+  public static <K> void captureActiveScope(ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final TraceScope scope = activeScope();\n+    captureScope(contextStore, key, scope);\n+  }\n+\n+  public static <K> void captureScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope) {\n+    final ConcurrentState state = contextStore.putIfAbsent(key, FACTORY);\n+    if (scope != null) {\n+      final TraceScope.Continuation continuation = scope.captureConcurrent();\n+      if (continuation != null) {\n+        state.setContinuation(continuation);\n+      }\n+    }\n+  }\n+\n+  public static <K> TraceScope activateAndContinueContinuation(\n+      ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (state == null) {\n+      return null;\n+    }\n+    return state.activateAndContinueContinuation();\n+  }\n+\n+  public static <K> void closeScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope, Throwable throwable) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (scope != null) {\n+      scope.close();\n+      return;\n+    }\n+    if (state == null) {\n+      return;\n+    }\n+    if (throwable != null) {\n+      // This might lead to the continuation being consumed early, but it's better to be safe if we\n+      // threw an Exception on entry\n+      state.closeContinuation();\n+    }\n+  }\n+\n+  public static <K> void closeAndClearContinuation(\n+      ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (state == null) {\n+      return;\n+    }\n+    state.closeAndClearContinuation();\n+  }\n+\n+  boolean setContinuation(TraceScope.Continuation continuation) {\n+    final boolean result = continuationRef.compareAndSet(null, continuation);", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2Nzk3Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497567976", "bodyText": "Yeah, I forgot to remodel my things in the same way. I'll take a look at it.", "author": "bantonsson", "createdAt": "2020-09-30T14:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MDMwMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497560303", "bodyText": "Pet peeve - SkipType.values() allocates every time. I'd prefer an EnumSet or SkipType[] VALUES = values() inside the enum.", "author": "richardstartin", "createdAt": "2020-09-30T14:34:40Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;\n+  }\n+\n+  public static boolean skip(SkipType type, String className) {\n+    return blockedClasses.get(type.ordinal()).contains(className);\n+  }\n+\n+  private static final ClassValue<Integer> SKIP =\n+      new ClassValue<Integer>() {\n+        @Override\n+        protected Integer computeValue(Class<?> clazz) {\n+          int result = 0;\n+          String name = clazz.getName();\n+          for (SkipType type : SkipType.values()) {", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MTI0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497561245", "bodyText": "Ah, didn't know that.", "author": "bantonsson", "createdAt": "2020-09-30T14:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MDMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MTExMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497561113", "bodyText": "Isn't this mask basically an EnumSet<SkipType>?", "author": "richardstartin", "createdAt": "2020-09-30T14:35:44Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;\n+  }\n+\n+  public static boolean skip(SkipType type, String className) {\n+    return blockedClasses.get(type.ordinal()).contains(className);\n+  }\n+\n+  private static final ClassValue<Integer> SKIP =\n+      new ClassValue<Integer>() {\n+        @Override\n+        protected Integer computeValue(Class<?> clazz) {", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MTc5NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497561794", "bodyText": "Could be EnumSet.contains(type) which reduces to bitwise operations too.", "author": "richardstartin", "createdAt": "2020-09-30T14:36:37Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDYzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497564637", "bodyText": "Yes, you are completely correct. I'll change it to EnumSet and EnumMap", "author": "bantonsson", "createdAt": "2020-09-30T14:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MTc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MjU2MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497562560", "bodyText": "This could be an EnumMap<SkipType, Set<String>", "author": "richardstartin", "createdAt": "2020-09-30T14:37:34Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;\n+  }\n+\n+  public static boolean skip(SkipType type, String className) {\n+    return blockedClasses.get(type.ordinal()).contains(className);\n+  }\n+\n+  private static final ClassValue<Integer> SKIP =\n+      new ClassValue<Integer>() {\n+        @Override\n+        protected Integer computeValue(Class<?> clazz) {\n+          int result = 0;\n+          String name = clazz.getName();\n+          for (SkipType type : SkipType.values()) {\n+            if (skip(type, name)) {\n+              result |= type.getMask();\n+            }\n+          }\n+          return result;\n+        }\n+      };\n+\n+  private static final ArrayList<Set<String>> blockedClasses =", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2Mzc5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497563790", "bodyText": "\ud83e\udd47", "author": "richardstartin", "createdAt": "2020-09-30T14:39:08Z", "path": "dd-java-agent/instrumentation/guava-10/src/test/groovy/ListenableFutureTest.groovy", "diffHunk": "@@ -32,7 +32,7 @@ class ListenableFutureTest extends AbstractPromiseTest<SettableFuture<Boolean>,\n   }\n \n   @Override\n-  Boolean get(SettableFuture<Boolean> promise) {\n+  boolean get(SettableFuture<Boolean> promise) {", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDgzOA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497564838", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void afterInit(@Advice.This UniCompletion thiz) {\n          \n          \n            \n                public static void afterInit(@Advice.This UniCompletion zis) {", "author": "richardstartin", "createdAt": "2020-09-30T14:40:25Z", "path": "dd-java-agent/instrumentation/java-concurrent/java-completablefuture/src/main/java8/java/util/concurrent/CompletableFutureAdvice.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package java.util.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.concurrent.CompletableFuture.ASYNC;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ConcurrentState;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.CompletableFuture.UniCompletion;\n+import net.bytebuddy.asm.Advice;\n+\n+// This class is put into java.util.concurrent to allow access to package private classes.\n+public final class CompletableFutureAdvice {\n+\n+  public static final class UniConstructor {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void afterInit(@Advice.This UniCompletion thiz) {", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0Mjc2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r498042768", "bodyText": "Yes, that is easier to distinguish.", "author": "bantonsson", "createdAt": "2020-10-01T07:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDgzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NTcxNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497565716", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                value << (0..((1 << 3) - 1))\n          \n          \n            \n                value << (0..7)", "author": "richardstartin", "createdAt": "2020-09-30T14:41:27Z", "path": "dd-java-agent/instrumentation/java-concurrent/java-completablefuture/src/test/groovy/CompletableFutureTest.groovy", "diffHunk": "@@ -178,26 +232,47 @@ class CompletableFutureTest extends AgentTestRunner {\n         basicSpan(it, \"child\", span(0))\n       }\n     }\n+\n+    where:\n+    value << (0..((1 << 3) - 1))", "originalCommit": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA0NDU1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r498044553", "bodyText": "Yes, that is a bit convoluted. I'll change it and add a comment.", "author": "bantonsson", "createdAt": "2020-10-01T07:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NTcxNg=="}], "type": "inlineReview"}, {"oid": "5fbaf0493160c589bc4b086315d0065560a9fd99", "url": "https://github.com/DataDog/dd-trace-java/commit/5fbaf0493160c589bc4b086315d0065560a9fd99", "message": "CompletableFuture Completion instrumentation", "committedDate": "2020-10-01T08:37:14Z", "type": "forcePushed"}, {"oid": "4141a5a27dd4625db8c1f1316bc0b3a0e6bbe2e4", "url": "https://github.com/DataDog/dd-trace-java/commit/4141a5a27dd4625db8c1f1316bc0b3a0e6bbe2e4", "message": "CompletableFuture Completion instrumentation", "committedDate": "2020-10-01T09:03:12Z", "type": "forcePushed"}, {"oid": "a6b3a1587ba4de747b30c5f94727b94e6bae142b", "url": "https://github.com/DataDog/dd-trace-java/commit/a6b3a1587ba4de747b30c5f94727b94e6bae142b", "message": "CompletableFuture Completion instrumentation", "committedDate": "2020-10-01T10:01:15Z", "type": "forcePushed"}, {"oid": "9b1b4e951a33fe3e78141fe513deeddff535f091", "url": "https://github.com/DataDog/dd-trace-java/commit/9b1b4e951a33fe3e78141fe513deeddff535f091", "message": "CompletableFuture Completion instrumentation", "committedDate": "2020-10-01T12:12:32Z", "type": "forcePushed"}, {"oid": "9d90c8951c3cffc7227cba0dbbf795fee41ad63d", "url": "https://github.com/DataDog/dd-trace-java/commit/9d90c8951c3cffc7227cba0dbbf795fee41ad63d", "message": "CompletableFuture Completion instrumentation", "committedDate": "2020-10-01T14:07:45Z", "type": "forcePushed"}, {"oid": "af157e2e0ed629cc4fd3b3df402dac94dfffb3b1", "url": "https://github.com/DataDog/dd-trace-java/commit/af157e2e0ed629cc4fd3b3df402dac94dfffb3b1", "message": "CompletableFuture.Completion instrumentation", "committedDate": "2020-10-02T14:54:10Z", "type": "forcePushed"}, {"oid": "9eac612bc566d5051e276092772e1dc2a44296ab", "url": "https://github.com/DataDog/dd-trace-java/commit/9eac612bc566d5051e276092772e1dc2a44296ab", "message": "CompletableFuture.Completion instrumentation", "committedDate": "2020-10-02T15:24:55Z", "type": "forcePushed"}, {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "url": "https://github.com/DataDog/dd-trace-java/commit/d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "message": "CompletableFuture.Completion instrumentation", "committedDate": "2020-10-05T06:25:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2Mjg2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r498962861", "bodyText": "Could you update the description explaining why the classloader changes are needed in this PR?", "author": "tylerbenson", "createdAt": "2020-10-02T17:46:25Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/DatadogClassLoader.java", "diffHunk": "@@ -159,11 +164,16 @@ public DelegateClassLoader(\n     @Override\n     protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n       String packageName = shared.getPackageName(name);\n-      Object packageLock = internalJarURLHandler.getPackageLock(packageName);\n+      InternalJarURLHandler.Lock packageLock = internalJarURLHandler.getPackageLock(packageName);", "originalCommit": "9eac612bc566d5051e276092772e1dc2a44296ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNzg0OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499627849", "bodyText": "Sure. I'll do that.", "author": "bantonsson", "createdAt": "2020-10-05T14:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2Mjg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyOTg1MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499029850", "bodyText": "and only to... ?", "author": "tylerbenson", "createdAt": "2020-10-02T20:13:40Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ExcludeFilterProvider.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package datadog.trace.agent.tooling;\n+\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Used to allow an {@link Instrumenter} to opt out of broad instrumentations like {@link Runnable}.\n+ *\n+ * <p>These are looked up in a separate pass before the {@link Instrumenter} is allowed to add\n+ * instrumentations. Note, it is up to the {@link ExcludeFilterProvider} to check if it is enabled\n+ * and only to", "originalCommit": "9eac612bc566d5051e276092772e1dc2a44296ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMzA2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499623062", "bodyText": "Yeah. Only to...\nThanks. I'll update the comment.", "author": "bantonsson", "createdAt": "2020-10-05T14:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyOTg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMDg0OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499030849", "bodyText": "I don't follow why this needed in this PR.", "author": "tylerbenson", "createdAt": "2020-10-02T20:16:10Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ExcludeFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class ExcludeFilter {", "originalCommit": "9eac612bc566d5051e276092772e1dc2a44296ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNDgyMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499624821", "bodyText": "So it is needed because the normal Runnable and Executor instrumentations get in the way, and do double or triple work, including capturing contexts and adding fields that should never be used, to the UniCompletion instances.", "author": "bantonsson", "createdAt": "2020-10-05T14:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMDg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMDc0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499600743", "bodyText": "Could you add a comment on why this should be a separate iteration loop.", "author": "tylerbenson", "createdAt": "2020-10-05T13:32:01Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentInstaller.java", "diffHunk": "@@ -95,8 +96,23 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n       agentBuilder = agentBuilder.with(listener);\n     }\n     int numInstrumenters = 0;\n-    for (final Instrumenter instrumenter :\n-        ServiceLoader.load(Instrumenter.class, AgentInstaller.class.getClassLoader())) {\n+    ServiceLoader<Instrumenter> loader =\n+        ServiceLoader.load(Instrumenter.class, AgentInstaller.class.getClassLoader());\n+    for (final Instrumenter instrumenter : loader) {", "originalCommit": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNDg2Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499624866", "bodyText": "Sure.", "author": "bantonsson", "createdAt": "2020-10-05T14:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMDc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMDExNA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499620114", "bodyText": "Why is this needed in addition to State?", "author": "richardstartin", "createdAt": "2020-10-05T13:59:37Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ConcurrentState.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public final class ConcurrentState {", "originalCommit": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNzI5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499627297", "bodyText": "It's because it has different semantics, than State since there is a benign race between multiple threads in the tryFire method, that I thought was better to keep separate from the normal State instead of adding other methods onto State that might be used inadvertently.", "author": "bantonsson", "createdAt": "2020-10-05T14:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMDExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMTQ2Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499621463", "bodyText": "If there's no scope we should check that first, in case ContextStore is backed by something expensive", "author": "richardstartin", "createdAt": "2020-10-05T14:01:32Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ConcurrentState.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public final class ConcurrentState {\n+\n+  private static final class ContinuationClaim implements TraceScope.Continuation {\n+\n+    @Override\n+    public TraceScope activate() {\n+      throw new IllegalStateException();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+      throw new IllegalStateException();\n+    }\n+  }\n+\n+  private static final TraceScope.Continuation CLAIMED = new ContinuationClaim();\n+\n+  public static ContextStore.Factory<ConcurrentState> FACTORY =\n+      new ContextStore.Factory<ConcurrentState>() {\n+        @Override\n+        public ConcurrentState create() {\n+          return new ConcurrentState();\n+        }\n+      };\n+\n+  private final AtomicReference<TraceScope.Continuation> continuationRef =\n+      new AtomicReference<>(null);\n+\n+  private ConcurrentState() {}\n+\n+  public static <K> void captureScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope) {\n+    final ConcurrentState state = contextStore.putIfAbsent(key, FACTORY);\n+    if (scope != null) {\n+      if (!state.captureAndSetContinuation(scope) && log.isDebugEnabled()) {\n+        log.debug(\n+            \"continuation was already set for {} in scope {}, no continuation captured.\",\n+            key,\n+            scope);\n+      }\n+    }\n+  }\n+\n+  public static <K> TraceScope activateAndContinueContinuation(\n+      ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (state == null) {\n+      return null;\n+    }\n+    return state.activateAndContinueContinuation();\n+  }\n+\n+  public static <K> void closeScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope, Throwable throwable) {\n+    final ConcurrentState state = contextStore.get(key);", "originalCommit": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNzY1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499627652", "bodyText": "Ok, I'll look over the code for this pattern.", "author": "bantonsson", "createdAt": "2020-10-05T14:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMTQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzNzk3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499637979", "bodyText": "Ok, I'll look over the code for this pattern.\n\nThe mark of a good senior engineer.  \ud83d\udc4d", "author": "tylerbenson", "createdAt": "2020-10-05T14:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMTQ2Mw=="}], "type": "inlineReview"}, {"oid": "14fe46352ba4b39d231c73a8df2b588213d06ed7", "url": "https://github.com/DataDog/dd-trace-java/commit/14fe46352ba4b39d231c73a8df2b588213d06ed7", "message": "CompletableFuture.Completion instrumentation", "committedDate": "2020-10-05T16:02:43Z", "type": "forcePushed"}, {"oid": "ee8034edf556fc0ca5c02fd013d2b1a5f6aea1ae", "url": "https://github.com/DataDog/dd-trace-java/commit/ee8034edf556fc0ca5c02fd013d2b1a5f6aea1ae", "message": "Add instrumentation to propagate across scala promises properly\n\nThere were significant changes in 2.13, so that required completely separate instrumentation.", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "f7145d31f7297c50decdc792e221cc85168b28be", "url": "https://github.com/DataDog/dd-trace-java/commit/f7145d31f7297c50decdc792e221cc85168b28be", "message": "Add scala promise instrumentation to various projects\n\nTo verify compatibility", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "f3467f4edad50fb6b7badc420de88b6f1135a49b", "url": "https://github.com/DataDog/dd-trace-java/commit/f3467f4edad50fb6b7badc420de88b6f1135a49b", "message": "Add instrumentation to ensure that the play 2.3 test doesn't hang on the first request", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "695f3e9a4e4fc8160b6e6263670d5cd453c68d23", "url": "https://github.com/DataDog/dd-trace-java/commit/695f3e9a4e4fc8160b6e6263670d5cd453c68d23", "message": "Add promise test for completable future.", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "694d6cf1b64a3389c714bcc6296550920763a4fd", "url": "https://github.com/DataDog/dd-trace-java/commit/694d6cf1b64a3389c714bcc6296550920763a4fd", "message": "Add instrumentation to CompletableFuture to support proper context propagation.\n\nTODO: CompletableFutureTest still needs to be updated since several tests fail with this new instrumentation.", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "debd9d76ee0eb50c6cf842a961a751f09151af75", "url": "https://github.com/DataDog/dd-trace-java/commit/debd9d76ee0eb50c6cf842a961a751f09151af75", "message": "Make CodeNarc happy", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "c0630fa8e4935b0b56c2f811638f2fe18d2abc4f", "url": "https://github.com/DataDog/dd-trace-java/commit/c0630fa8e4935b0b56c2f811638f2fe18d2abc4f", "message": "Some more tests for CompletableFuture.Completion", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "c0cdee938b68ee80dd76bf1d0695715e97fff7a9", "url": "https://github.com/DataDog/dd-trace-java/commit/c0cdee938b68ee80dd76bf1d0695715e97fff7a9", "message": "Ask the right class loader for classes in the java package that we don't have\n\nSince we now inject classes into to `java.*` pacakge we need to delegate\nall the classes that we don't find in those packages to the `super.loadClass`\nmethod to not fail loading regular classes from the `java.*` packages.", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "608683084888d77fc654dd2b15e4f83afcba0b30", "url": "https://github.com/DataDog/dd-trace-java/commit/608683084888d77fc654dd2b15e4f83afcba0b30", "message": "Enable force rerun of tests with property", "committedDate": "2020-10-06T05:55:04Z", "type": "commit"}, {"oid": "9ddc777ef2a529066cb0f4771417048533d9b676", "url": "https://github.com/DataDog/dd-trace-java/commit/9ddc777ef2a529066cb0f4771417048533d9b676", "message": "Allow Instrumenter to disable field injection and wrapping for types", "committedDate": "2020-10-06T06:13:17Z", "type": "forcePushed"}, {"oid": "028bf039f0e56142de2846e82598bd4e7a8baf44", "url": "https://github.com/DataDog/dd-trace-java/commit/028bf039f0e56142de2846e82598bd4e7a8baf44", "message": "Allow Instrumenter to disable field injection and wrapping for types", "committedDate": "2020-10-06T08:40:32Z", "type": "commit"}, {"oid": "ee4fecdad13216d480ecc6720c5eca7c488c636e", "url": "https://github.com/DataDog/dd-trace-java/commit/ee4fecdad13216d480ecc6720c5eca7c488c636e", "message": "CompletableFuture.Completion Instrumentation", "committedDate": "2020-10-06T08:43:03Z", "type": "commit"}, {"oid": "ee4fecdad13216d480ecc6720c5eca7c488c636e", "url": "https://github.com/DataDog/dd-trace-java/commit/ee4fecdad13216d480ecc6720c5eca7c488c636e", "message": "CompletableFuture.Completion Instrumentation", "committedDate": "2020-10-06T08:43:03Z", "type": "forcePushed"}, {"oid": "39c15a78f849ece1c0c0ca43c7128b889166f51f", "url": "https://github.com/DataDog/dd-trace-java/commit/39c15a78f849ece1c0c0ca43c7128b889166f51f", "message": "Exclude otel 0.9.0 that started failing muzzle", "committedDate": "2020-10-06T09:09:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4OTE1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r507889153", "bodyText": "returning null here is very weird and seems like it could be particularly troublesome in the future.", "author": "BurgersMcSlopshot", "createdAt": "2020-10-19T16:28:05Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ExcludeFilter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Enables types to opt out of being wrapped and/or having fields injected for a number of the broad\n+ * instrumentations, i.e. {@code Executor} and {@code Runnable}.\n+ */\n+public class ExcludeFilter {\n+\n+  public enum ExcludeType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static ExcludeType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;", "originalCommit": "39c15a78f849ece1c0c0ca43c7128b889166f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwOTk0OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r508609948", "bodyText": "So not all types that we inject fields for are types that need to be excluded. There could of course be a special ExcludeType called UNKNOWN, but null was chosen here. Maybe a comment is in order.", "author": "bantonsson", "createdAt": "2020-10-20T15:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4OTE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5MDQwMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r507890400", "bodyText": "to pair with the comment in the ExcludeFilter regarding potentially coercing a string to a null enum value, why not pass keyType directly into the filter and skip the null check here?", "author": "BurgersMcSlopshot", "createdAt": "2020-10-19T16:29:58Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldBackedProvider.java", "diffHunk": "@@ -461,13 +453,27 @@ public static void resetContextMatchers() {\n   private static AgentBuilder.RawMatcher safeToInjectFieldsMatcher(\n       final String keyType, final String valueType) {\n     return new AgentBuilder.RawMatcher() {\n+      private final ExcludeType skipType = ExcludeType.fromFieldType(keyType);\n+\n       @Override\n       public boolean matches(\n           final TypeDescription typeDescription,\n           final ClassLoader classLoader,\n           final JavaModule module,\n           final Class<?> classBeingRedefined,\n           final ProtectionDomain protectionDomain) {\n+\n+        // First check if we should skip injecting the field based on the key type\n+        if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {", "originalCommit": "39c15a78f849ece1c0c0ca43c7128b889166f51f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMDA2Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r508610063", "bodyText": "Thanks. That is a very good point.", "author": "bantonsson", "createdAt": "2020-10-20T15:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5MDQwMA=="}], "type": "inlineReview"}]}