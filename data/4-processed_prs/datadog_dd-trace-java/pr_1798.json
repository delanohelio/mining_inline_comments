{"pr_number": 1798, "pr_title": "abstract FixedSizeCache to allow interchangeability", "pr_createdAt": "2020-08-25T08:04:31Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1798", "timeline": [{"oid": "63bcfaea095d60e2990fca61123ad9549232a55b", "url": "https://github.com/DataDog/dd-trace-java/commit/63bcfaea095d60e2990fca61123ad9549232a55b", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap", "committedDate": "2020-08-25T08:07:16Z", "type": "forcePushed"}, {"oid": "65020c6e45f8fbdb880a81b3fde223a7790defcf", "url": "https://github.com/DataDog/dd-trace-java/commit/65020c6e45f8fbdb880a81b3fde223a7790defcf", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap", "committedDate": "2020-08-25T08:12:01Z", "type": "forcePushed"}, {"oid": "f5a59c4f06e9209353f0c6f85cd3c58efb92d2dc", "url": "https://github.com/DataDog/dd-trace-java/commit/f5a59c4f06e9209353f0c6f85cd3c58efb92d2dc", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap", "committedDate": "2020-08-25T08:13:44Z", "type": "forcePushed"}, {"oid": "1f76de432fdaa6a02132860094de71b6aa9de63f", "url": "https://github.com/DataDog/dd-trace-java/commit/1f76de432fdaa6a02132860094de71b6aa9de63f", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap", "committedDate": "2020-08-25T08:15:50Z", "type": "forcePushed"}, {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "url": "https://github.com/DataDog/dd-trace-java/commit/a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap", "committedDate": "2020-08-25T08:16:47Z", "type": "commit"}, {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "url": "https://github.com/DataDog/dd-trace-java/commit/a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap", "committedDate": "2020-08-25T08:16:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476565671", "bodyText": "I think naming this as capacity is a bit misleading...", "author": "tylerbenson", "createdAt": "2020-08-25T16:07:18Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/cache/CHMCache.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.bootstrap.instrumentation.cache;\n+\n+import datadog.trace.bootstrap.instrumentation.api.Function;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+final class CHMCache<K, V> implements DDCache<K, V> {\n+\n+  private final ConcurrentHashMap<K, V> chm;\n+\n+  public CHMCache(final int capacity) {\n+    this.chm = new ConcurrentHashMap<>(capacity);", "originalCommit": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MTE5MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476591191", "bodyText": "Agreed.", "author": "richardstartin", "createdAt": "2020-08-25T16:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNzQ1Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476607457", "bodyText": "Well, what is it then? It's the capacity of the map's table immediately after construction, and unless there is irresponsible/unjustified usage and the map needs to be resized, it will remain the capacity of the map's table.", "author": "richardstartin", "createdAt": "2020-08-25T17:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNzYyNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476627626", "bodyText": "initialCapacity?", "author": "devinsba", "createdAt": "2020-08-25T17:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTAzMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476629030", "bodyText": "Simply calling it capacity suggests there is a limit.  I'd suggest either Brian's proposal or expectedSize.", "author": "tylerbenson", "createdAt": "2020-08-25T17:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTY2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476641661", "bodyText": "Calling it capacity suggests it has a capacity, but I think Brian's suggestion is a good one.", "author": "richardstartin", "createdAt": "2020-08-25T18:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4MDE5NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476680195", "bodyText": "I changed the name and added javadoc to the factory methods.", "author": "richardstartin", "createdAt": "2020-08-25T19:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDg3Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476570872", "bodyText": "Why unbounded?  Seems a bit scary.", "author": "tylerbenson", "createdAt": "2020-08-25T16:15:18Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/cache/QualifiedClassNameCache.java", "diffHunk": "@@ -42,15 +45,15 @@ protected Leaf computeValue(Class<?> type) {\n \n     private final CharSequence name;\n \n-    private final FixedSizeCache<CharSequence, CharSequence> cache;\n+    private final DDCache<CharSequence, CharSequence> cache;\n     private final Function<CharSequence, CharSequence> joiner;\n \n     private Leaf(\n         CharSequence name,\n         TwoArgFunction<CharSequence, CharSequence, CharSequence> joiner,\n         int leafSize) {\n       this.name = name;\n-      this.cache = new FixedSizeCache<>(leafSize);\n+      this.cache = DDCaches.newUnboundedCache(leafSize);", "originalCommit": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MTA5MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476591090", "bodyText": "I think there are implicit bounds in many cases, like the methods on a class. In those cases I think it's fine not to enforce a bound.", "author": "richardstartin", "createdAt": "2020-08-25T16:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyOTcxOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477129719", "bodyText": "I agree with that it's fine with unbounded here since there is a natural bound. Would be nice with a comment about the reasoning, i.e. that QualifiedClassNameCache is per Class and the number of methods are bounded.", "author": "bantonsson", "createdAt": "2020-08-26T08:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDg3Mg=="}], "type": "inlineReview"}, {"oid": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3", "url": "https://github.com/DataDog/dd-trace-java/commit/255d88fd4544b47a3c122d583c5a5ac22f1e5ec3", "message": "change capacity to initialCapacity, clarifying javadoc", "committedDate": "2020-08-25T19:16:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExOTUzOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477119539", "bodyText": "Yup, that was covered below...", "author": "bantonsson", "createdAt": "2020-08-26T08:17:45Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/cache/FixedSizeCache.java", "diffHunk": "@@ -65,16 +67,17 @@ public FixedSizeCache(int capacity) {\n    * @param creator how to create a cached value base on the key if the lookup fails\n    * @return the cached or created and stored value\n    */\n+  @Override\n   public V computeIfAbsent(K key, Function<K, ? extends V> creator) {\n     if (key == null) {\n       return null;\n     }\n \n     int h = key.hashCode();\n     int firstPos = h & mask;\n-    V value = null;\n+    V value;\n     // try to find a slot or a match 3 times\n-    for (int i = 1; i <= 3; i++) {\n+    for (int i = 1; true; i++) {", "originalCommit": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzMjU0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477132544", "bodyText": "There is no chain of hashes in the unbounded one.", "author": "bantonsson", "createdAt": "2020-08-26T08:37:51Z", "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/cache/FixedSizeCacheTest.groovy", "diffHunk": "@@ -32,20 +33,48 @@ class FixedSizeCacheTest extends DDSpecification {\n     new TKey(1, 10, \"foo\")    | \"ten_value\"    | 3     // used the cached tk10\n     new TKey(6, 6, \"foo\")     | \"six_value\"    | 3     // used the cached tk6\n     new TKey(1, 11, \"eleven\") | \"eleven_value\" | 4     // create new value in an occupied slot\n-    new TKey(4, 4, \"four\" )   | \"four_value\"   | 4     // create new value in empty slot\n+    new TKey(4, 4, \"four\")    | \"four_value\"   | 4     // create new value in empty slot\n     null                      | null           | 3     // do nothing\n   }\n \n+  def \"chm cache should store and retrieve values\"() {\n+    setup:\n+    def fsCache = DDCaches.newUnboundedCache(15)\n+    def creationCount = new AtomicInteger(0)\n+    def tvc = new TVC(creationCount)\n+    def tk1 = new TKey(1, 1, \"one\")\n+    def tk6 = new TKey(6, 6, \"six\")\n+    def tk10 = new TKey(10, 10, \"ten\")\n+    // insert some values that happen to be the chain of hashes 1 -> 6 -> 10", "originalCommit": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNTQ5Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477135497", "bodyText": "So the reason for the difference in counts here is that we insert a new thing with hash 1 equals 6 in the unbounded cache, and that will of course create a new item, since the only thing we have with hash 1 has equals 1. In the fixed size cache, we try to insert it at hash 1 and collide, do a rehash ending up on hash 6 and find equals 6 there, which is a match.", "author": "bantonsson", "createdAt": "2020-08-26T08:42:35Z", "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/cache/FixedSizeCacheTest.groovy", "diffHunk": "@@ -32,20 +33,48 @@ class FixedSizeCacheTest extends DDSpecification {\n     new TKey(1, 10, \"foo\")    | \"ten_value\"    | 3     // used the cached tk10\n     new TKey(6, 6, \"foo\")     | \"six_value\"    | 3     // used the cached tk6\n     new TKey(1, 11, \"eleven\") | \"eleven_value\" | 4     // create new value in an occupied slot\n-    new TKey(4, 4, \"four\" )   | \"four_value\"   | 4     // create new value in empty slot\n+    new TKey(4, 4, \"four\")    | \"four_value\"   | 4     // create new value in empty slot\n     null                      | null           | 3     // do nothing\n   }\n \n+  def \"chm cache should store and retrieve values\"() {\n+    setup:\n+    def fsCache = DDCaches.newUnboundedCache(15)\n+    def creationCount = new AtomicInteger(0)\n+    def tvc = new TVC(creationCount)\n+    def tk1 = new TKey(1, 1, \"one\")\n+    def tk6 = new TKey(6, 6, \"six\")\n+    def tk10 = new TKey(10, 10, \"ten\")\n+    // insert some values that happen to be the chain of hashes 1 -> 6 -> 10\n+    fsCache.computeIfAbsent(tk1, tvc)\n+    fsCache.computeIfAbsent(tk6, tvc)\n+    fsCache.computeIfAbsent(tk10, tvc)\n+\n+    expect:\n+    fsCache.computeIfAbsent(tk, tvc) == value\n+    creationCount.get() == count\n+\n+    where:\n+    tk                        | value          | count\n+    new TKey(1, 1, \"foo\")     | \"one_value\"    | 3\n+    new TKey(1, 6, \"foo\")     | \"foo_value\"    | 4", "originalCommit": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "946a1eaf6f8a8b677fb12d29f23684446d6d32f5", "url": "https://github.com/DataDog/dd-trace-java/commit/946a1eaf6f8a8b677fb12d29f23684446d6d32f5", "message": "clarifying comments", "committedDate": "2020-08-26T08:59:14Z", "type": "commit"}]}