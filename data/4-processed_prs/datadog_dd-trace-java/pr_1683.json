{"pr_number": 1683, "pr_title": "CI-App: JUnit4 Instrumentation", "pr_createdAt": "2020-07-15T13:26:47Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1683", "timeline": [{"oid": "3b08fee9e0ef72ed0cc906e258c2f9595524b416", "url": "https://github.com/DataDog/dd-trace-java/commit/3b08fee9e0ef72ed0cc906e258c2f9595524b416", "message": "Added instrumentation for JUnit4 test framework.", "committedDate": "2020-07-24T13:59:55Z", "type": "commit"}, {"oid": "19fbc856f0de364adabf80d0d227ab84fb63aeec", "url": "https://github.com/DataDog/dd-trace-java/commit/19fbc856f0de364adabf80d0d227ab84fb63aeec", "message": "Remove ContextStore logic", "committedDate": "2020-07-24T13:59:55Z", "type": "commit"}, {"oid": "f7fdafba7ac78198580fe65367953ebcf0b83a7a", "url": "https://github.com/DataDog/dd-trace-java/commit/f7fdafba7ac78198580fe65367953ebcf0b83a7a", "message": "JUnit4 Instrumentation", "committedDate": "2020-07-24T13:59:55Z", "type": "forcePushed"}, {"oid": "cd7b1221e165043234f995ebd6dae7134393af0c", "url": "https://github.com/DataDog/dd-trace-java/commit/cd7b1221e165043234f995ebd6dae7134393af0c", "message": "JUnit4 Instrumentation", "committedDate": "2020-07-24T14:38:29Z", "type": "forcePushed"}, {"oid": "5dacf808ac29b095cd12205f188a1d7f786a4955", "url": "https://github.com/DataDog/dd-trace-java/commit/5dacf808ac29b095cd12205f188a1d7f786a4955", "message": "JUnit4 Instrumentation", "committedDate": "2020-07-27T08:21:18Z", "type": "forcePushed"}, {"oid": "dffcf3080836c55e8f75eb031d8f533e80fce1b5", "url": "https://github.com/DataDog/dd-trace-java/commit/dffcf3080836c55e8f75eb031d8f533e80fce1b5", "message": "JUnit4 Instrumentation", "committedDate": "2020-07-27T13:01:45Z", "type": "forcePushed"}, {"oid": "9baadbf4c6dfff2823d6310f7eb7b492f8528d0a", "url": "https://github.com/DataDog/dd-trace-java/commit/9baadbf4c6dfff2823d6310f7eb7b492f8528d0a", "message": "JUnit4 Instrumentation", "committedDate": "2020-07-27T15:00:48Z", "type": "forcePushed"}, {"oid": "dffb903d913721b9199c6c619cfbd469069256f9", "url": "https://github.com/DataDog/dd-trace-java/commit/dffb903d913721b9199c6c619cfbd469069256f9", "message": "JUnit4 Instrumentation", "committedDate": "2020-07-27T15:28:59Z", "type": "commit"}, {"oid": "dffb903d913721b9199c6c619cfbd469069256f9", "url": "https://github.com/DataDog/dd-trace-java/commit/dffb903d913721b9199c6c619cfbd469069256f9", "message": "JUnit4 Instrumentation", "committedDate": "2020-07-27T15:28:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc1Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461044752", "bodyText": "Would it be possible to annotate the class instead of each method?", "author": "tylerbenson", "createdAt": "2020-07-27T17:16:11Z", "path": "dd-java-agent/instrumentation/junit-4/src/test/groovy/JUnit4Test.groovy", "diffHunk": "@@ -0,0 +1,106 @@\n+import datadog.trace.agent.test.base.TestFrameworkTest\n+import datadog.trace.api.DisableTestTrace\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator\n+import datadog.trace.instrumentation.junit4.JUnit4Decorator\n+import org.junit.runner.JUnitCore\n+import spock.lang.Shared\n+\n+class JUnit4Test extends TestFrameworkTest {\n+\n+  @Shared\n+  def runner = new JUnitCore()\n+\n+  @DisableTestTrace(reason = \"avoid self-tracing\")", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MzUxNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461383516", "bodyText": "Yes, changed \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-28T07:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjQ0NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461046445", "bodyText": "Can you use BaseDecorator.spanNameForMethod instead?", "author": "tylerbenson", "createdAt": "2020-07-27T17:19:10Z", "path": "dd-java-agent/instrumentation/junit-4/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Decorator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@Slf4j\n+public class JUnit4Decorator extends TestDecorator {\n+  public static final JUnit4Decorator DECORATE = new JUnit4Decorator();\n+\n+  @Override\n+  public String testFramework() {\n+    return \"junit4\";\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"junit\", \"junit-4\"};\n+  }\n+\n+  @Override\n+  public String component() {\n+    return \"junit\";\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final Description description) {\n+    onTestStart(span, description, null);\n+  }\n+\n+  public void onTestStart(\n+      final AgentSpan span, final Description description, final String testNameArg) {\n+    final String testSuite = description.getClassName();\n+    final String testName = (testNameArg != null) ? testNameArg : description.getMethodName();\n+\n+    span.setTag(DDTags.RESOURCE_NAME, testSuite + \".\" + testName);", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MzczMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461383731", "bodyText": "Changed \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-28T07:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NzI0Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461397247", "bodyText": "Just realised that BaseDecorator.spanNameForMethod method uses clazz.getSimpleName().\nIn this case, we'd need the package prefix also. Changes reverted to use Description testSuite and testName.", "author": "drodriguezhdez", "createdAt": "2020-07-28T08:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTg4Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461055882", "bodyText": "This seems to suggest the compatibility extends beyond junit 4...", "author": "tylerbenson", "createdAt": "2020-07-27T17:34:50Z", "path": "dd-java-agent/instrumentation/junit-4/junit-4.gradle", "diffHunk": "@@ -0,0 +1,15 @@\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'junit'\n+    module = 'junit'\n+    versions = '(,)'", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NTYzNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461385637", "bodyText": "Changed to [4.7,).", "author": "drodriguezhdez", "createdAt": "2020-07-28T07:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjE2Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461056162", "bodyText": "We usually set this version to the earliest supported version.", "author": "tylerbenson", "createdAt": "2020-07-27T17:35:15Z", "path": "dd-java-agent/instrumentation/junit-4/junit-4.gradle", "diffHunk": "@@ -0,0 +1,15 @@\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'junit'\n+    module = 'junit'\n+    versions = '(,)'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'junit', name: 'junit', version: '4.12'", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NDk4Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461384986", "bodyText": "It has been set junit:junit:4.7 as earliest supported version. \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-28T07:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjU1MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461056551", "bodyText": "if we change this, what effect does it have on the spock tests?", "author": "tylerbenson", "createdAt": "2020-07-27T17:35:57Z", "path": "dd-java-agent/instrumentation/junit-4/junit-4.gradle", "diffHunk": "@@ -0,0 +1,15 @@\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'junit'\n+    module = 'junit'\n+    versions = '(,)'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'junit', name: 'junit', version: '4.12'\n+\n+  testCompile group: 'junit', name: 'junit', version: '4.12'", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NDE5OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461384198", "bodyText": "Removed testCompile dependency. It's not necessary for our tests.", "author": "drodriguezhdez", "createdAt": "2020-07-28T07:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODIxMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461058212", "bodyText": "This is mainly only needed if you're doing inheritance/interface matching.  Here you're instrumenting a specific named class, so it's not needed.", "author": "tylerbenson", "createdAt": "2020-07-27T17:39:06Z", "path": "dd-java-agent/instrumentation/junit-4/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.junit4.JUnit4Decorator.DECORATE;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.DisableTestTrace;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.context.TraceScope;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Test;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit4Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit4Instrumentation() {\n+    super(\"junit\", \"junit-4\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.junit.runner.notification.RunNotifier\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"org.junit.runner.notification.RunNotifier\");\n+  }", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NDMwNg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461384306", "bodyText": "Removed \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-28T07:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3Mjg5OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461072898", "bodyText": "Is this going to be the convention across other languages too?", "author": "tylerbenson", "createdAt": "2020-07-27T18:04:51Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.bootstrap.instrumentation.decorator;\n+\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class TestDecorator extends BaseDecorator {\n+  public static final String TEST_PASS = \"PASS\";\n+  public static final String TEST_FAIL = \"FAIL\";\n+  public static final String TEST_SKIP = \"SKIP\";\n+\n+  protected abstract String testFramework();\n+\n+  protected String service() {\n+    return Config.get().getServiceName() + \".test\";", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3MzY0NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461073644", "bodyText": "Also, since you're going to be calling this every span, consider saving the result to a field to avoid string concat over and over.", "author": "tylerbenson", "createdAt": "2020-07-27T18:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3Mjg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwNDg1Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461404857", "bodyText": "It was our proposal, but after receiving feedback, the serviceName will not be altered by testing instrumentation.\nThis logic has been removed \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-28T08:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3Mjg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDA2OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461074068", "bodyText": "with a field, this conditional should be unnecessary.", "author": "tylerbenson", "createdAt": "2020-07-27T18:07:00Z", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.bootstrap.instrumentation.decorator;\n+\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class TestDecorator extends BaseDecorator {\n+  public static final String TEST_PASS = \"PASS\";\n+  public static final String TEST_FAIL = \"FAIL\";\n+  public static final String TEST_SKIP = \"SKIP\";\n+\n+  protected abstract String testFramework();\n+\n+  protected String service() {\n+    return Config.get().getServiceName() + \".test\";\n+  }\n+\n+  protected String spanKind() {\n+    return Tags.SPAN_KIND_TEST;\n+  }\n+\n+  @Override\n+  protected String spanType() {\n+    return DDSpanTypes.TEST;\n+  }\n+\n+  @Override\n+  public AgentSpan afterStart(final AgentSpan span) {\n+    assert span != null;\n+    if (service() != null) {", "originalCommit": "dffb903d913721b9199c6c619cfbd469069256f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NDU1NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461384554", "bodyText": "Removed \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-28T07:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDA2OA=="}], "type": "inlineReview"}, {"oid": "cc5a87ecf858658d7c21b78e2065767f2b449413", "url": "https://github.com/DataDog/dd-trace-java/commit/cc5a87ecf858658d7c21b78e2065767f2b449413", "message": "Set @DisableTestTrace annotation at type level.", "committedDate": "2020-07-28T06:38:51Z", "type": "commit"}, {"oid": "4fd8aefd1c9b5f06071ede4149c18ca0772839f0", "url": "https://github.com/DataDog/dd-trace-java/commit/4fd8aefd1c9b5f06071ede4149c18ca0772839f0", "message": "Avoid using CL to load test class. Use Description getTestClass accessor instead.", "committedDate": "2020-07-28T06:43:57Z", "type": "commit"}, {"oid": "496255b64b30e5b06c7c697ec35059e4d6673d0f", "url": "https://github.com/DataDog/dd-trace-java/commit/496255b64b30e5b06c7c697ec35059e4d6673d0f", "message": "Remove unnecesary classLoader matcher.", "committedDate": "2020-07-28T06:46:48Z", "type": "commit"}, {"oid": "66ae0ac93d9343e81943b1305d3d8169f1ab79a0", "url": "https://github.com/DataDog/dd-trace-java/commit/66ae0ac93d9343e81943b1305d3d8169f1ab79a0", "message": "Test instrumentation on test inheritance.", "committedDate": "2020-07-28T06:59:26Z", "type": "commit"}, {"oid": "09990e3acf974a3e9f5763715ceca3efa645e69f", "url": "https://github.com/DataDog/dd-trace-java/commit/09990e3acf974a3e9f5763715ceca3efa645e69f", "message": "Use spanNameForMethod to calculate test resourceName", "committedDate": "2020-07-28T07:08:14Z", "type": "commit"}, {"oid": "2b7a296f10909325840a6ded93f2f84419286efd", "url": "https://github.com/DataDog/dd-trace-java/commit/2b7a296f10909325840a6ded93f2f84419286efd", "message": "Removed unnecesary test dependency", "committedDate": "2020-07-28T07:21:30Z", "type": "commit"}, {"oid": "325189415c0508621f234b873ff1fb6fed98a155", "url": "https://github.com/DataDog/dd-trace-java/commit/325189415c0508621f234b873ff1fb6fed98a155", "message": "Exclude JUnit4 testInheritance classes to be executed during dd-java-agent build lifecycle", "committedDate": "2020-07-28T07:22:09Z", "type": "commit"}, {"oid": "8d697722c4cf2b572e0a73d3771d85645bb4fc66", "url": "https://github.com/DataDog/dd-trace-java/commit/8d697722c4cf2b572e0a73d3771d85645bb4fc66", "message": "Configure Muzzle", "committedDate": "2020-07-28T07:39:00Z", "type": "commit"}, {"oid": "acba3dddd081d78ab4a4d7b69adaa4fb89e38695", "url": "https://github.com/DataDog/dd-trace-java/commit/acba3dddd081d78ab4a4d7b69adaa4fb89e38695", "message": "service() is based on a field in TestDecorator", "committedDate": "2020-07-28T07:43:01Z", "type": "commit"}, {"oid": "9ac721a56b5a36bdd4de2ad1e707cbf7317991b8", "url": "https://github.com/DataDog/dd-trace-java/commit/9ac721a56b5a36bdd4de2ad1e707cbf7317991b8", "message": "Use testSuite and testName from Description to calculate resourceName", "committedDate": "2020-07-28T08:13:23Z", "type": "commit"}, {"oid": "de288942cdb752e808bb4f7f1bfafca79d4f3cd0", "url": "https://github.com/DataDog/dd-trace-java/commit/de288942cdb752e808bb4f7f1bfafca79d4f3cd0", "message": "Configure Muzzle", "committedDate": "2020-07-28T08:13:57Z", "type": "commit"}, {"oid": "8105fdb1145f266a3d9bac2e8c1e17badcc647b9", "url": "https://github.com/DataDog/dd-trace-java/commit/8105fdb1145f266a3d9bac2e8c1e17badcc647b9", "message": "service name is not changed.", "committedDate": "2020-07-28T08:19:48Z", "type": "commit"}, {"oid": "06ff293264d285a960dfa14babbac8390d433ed7", "url": "https://github.com/DataDog/dd-trace-java/commit/06ff293264d285a960dfa14babbac8390d433ed7", "message": "service name is not changed", "committedDate": "2020-07-28T08:31:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxNjgxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461416817", "bodyText": "So I thought that setting the TEST_STATUS to TEST_PASS here in onTestStart seemed a bit premature,  shouldn't that be done in onTestFinish? But after reading the instrumentation, it seems that onTestFinish is called for all tests even if it is a failure. Would be nice with some short comments explaining which method gets called when. And yes most of the other decorators are missing this type of information which I think is a shame.", "author": "bantonsson", "createdAt": "2020-07-28T08:42:16Z", "path": "dd-java-agent/instrumentation/junit-4/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Decorator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.DisableTestTrace;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@Slf4j\n+public class JUnit4Decorator extends TestDecorator {\n+  public static final JUnit4Decorator DECORATE = new JUnit4Decorator();\n+\n+  @Override\n+  public String testFramework() {\n+    return \"junit4\";\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"junit\", \"junit-4\"};\n+  }\n+\n+  @Override\n+  public String component() {\n+    return \"junit\";\n+  }\n+\n+  public boolean skipTrace(final Description description) {\n+    return description.getAnnotation(DisableTestTrace.class) != null\n+        || description.getTestClass().getAnnotation(DisableTestTrace.class) != null;\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final Description description) {\n+    onTestStart(span, description, null);\n+  }\n+\n+  public void onTestStart(\n+      final AgentSpan span, final Description description, final String testNameArg) {\n+    final String testSuite = description.getClassName();\n+    final String testName = (testNameArg != null) ? testNameArg : description.getMethodName();\n+\n+    span.setTag(DDTags.RESOURCE_NAME, testSuite + \".\" + testName);\n+    span.setTag(DDTags.TEST_SUITE, testSuite);\n+    span.setTag(DDTags.TEST_NAME, testName);\n+    span.setTag(DDTags.TEST_STATUS, TEST_PASS);", "originalCommit": "06ff293264d285a960dfa14babbac8390d433ed7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQyMDEyMg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461420122", "bodyText": "Sure \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-28T08:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxNjgxNw=="}], "type": "inlineReview"}, {"oid": "5b4a7fb1a4c1110b5eb0e597f09d3e3e04dc92e2", "url": "https://github.com/DataDog/dd-trace-java/commit/5b4a7fb1a4c1110b5eb0e597f09d3e3e04dc92e2", "message": "Added comments at JUnit4Decorator", "committedDate": "2020-07-28T08:52:26Z", "type": "commit"}, {"oid": "19f0b56a26c4589045db547e228805fb2649059b", "url": "https://github.com/DataDog/dd-trace-java/commit/19f0b56a26c4589045db547e228805fb2649059b", "message": "Configure Muzzle", "committedDate": "2020-07-29T07:19:55Z", "type": "commit"}, {"oid": "7c130e199cf565f1d179786df689c43553ae77bf", "url": "https://github.com/DataDog/dd-trace-java/commit/7c130e199cf565f1d179786df689c43553ae77bf", "message": "Rename module to junit-4.10", "committedDate": "2020-07-29T07:24:49Z", "type": "commit"}, {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74", "url": "https://github.com/DataDog/dd-trace-java/commit/16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74", "message": "Test traces disabled by default. Enabled by configuration.", "committedDate": "2020-07-29T08:12:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxMjI2OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463012269", "bodyText": "This could have been just false... no additional config required.", "author": "tylerbenson", "createdAt": "2020-07-30T13:53:11Z", "path": "dd-java-agent/instrumentation/junit-4.10/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -55,6 +56,11 @@ public JUnit4Instrumentation() {\n     return transformers;\n   }\n \n+  @Override\n+  protected boolean defaultEnabled() {\n+    return Config.get().isTraceTestsEnabled();", "originalCommit": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxNjg3OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463016878", "bodyText": "Yes, we can also have an overarching \"test\" instrumentation to have a big flag to enable.", "author": "dougqh", "createdAt": "2020-07-30T13:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxMjI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNTk4MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463035980", "bodyText": "I removed specific config for tests in this PR #1726\nThe config dd.integrations.junit.enabled=true will be used instead of that.", "author": "drodriguezhdez", "createdAt": "2020-07-30T14:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxMjI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyNDExNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463024117", "bodyText": "I'm curious if using a RunListener would suffice instead of resorting to instrumentation.", "author": "dougqh", "createdAt": "2020-07-30T14:09:55Z", "path": "dd-java-agent/instrumentation/junit-4.10/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.junit4.JUnit4Decorator.DECORATE;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.context.TraceScope;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit4Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit4Instrumentation() {\n+    super(\"junit\", \"junit-4\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.junit.runner.notification.RunNotifier\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".JUnit4Decorator\"};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();", "originalCommit": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MzE0MA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463043140", "bodyText": "I think we'd need to instrument the org.junit.runner.Runner.run(RunNotifier runNotifier) method to add our custom \"Trace\" RunListener in that case. That Runner is an abstract class, so bytecode manipulation would be affected in several classes if I'm not wrong. That's why I preferred to instrument a single point, the class RunNotifier.", "author": "drodriguezhdez", "createdAt": "2020-07-30T14:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyNDExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTUxMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463029510", "bodyText": "This ends up repeating the annotation detection of JUnit.\nIf the RunListener is sufficient, we can avoid that altogether.", "author": "dougqh", "createdAt": "2020-07-30T14:17:15Z", "path": "dd-java-agent/instrumentation/junit-4.10/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.junit4.JUnit4Decorator.DECORATE;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.context.TraceScope;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit4Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit4Instrumentation() {\n+    super(\"junit\", \"junit-4\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.junit.runner.notification.RunNotifier\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".JUnit4Decorator\"};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        named(\"fireTestStarted\"), JUnit4Instrumentation.class.getName() + \"$TestStartedAdvice\");\n+    transformers.put(\n+        named(\"fireTestFinished\"), JUnit4Instrumentation.class.getName() + \"$TestFinishedAdvice\");\n+    transformers.put(\n+        named(\"fireTestFailure\"), JUnit4Instrumentation.class.getName() + \"$TestFailureAdvice\");\n+    transformers.put(\n+        named(\"fireTestIgnored\"), JUnit4Instrumentation.class.getName() + \"$TestIgnoredAdvice\");\n+    return transformers;\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return Config.get().isTraceTestsEnabled();\n+  }\n+\n+  public static class TestStartedAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void startTest(@Advice.Argument(0) final Description description) {\n+      if (DECORATE.skipTrace(description)) {\n+        return;\n+      }\n+\n+      final AgentSpan span = startSpan(\"junit.test\");\n+      final AgentScope scope = activateSpan(span);\n+      scope.setAsyncPropagation(true);\n+\n+      DECORATE.afterStart(span);\n+      DECORATE.onTestStart(span, description);\n+    }\n+  }\n+\n+  public static class TestFinishedAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void finishTest(@Advice.Argument(0) final Description description) {\n+      if (DECORATE.skipTrace(description)) {\n+        return;\n+      }\n+\n+      final AgentSpan span = AgentTracer.activeSpan();\n+      if (span == null) {\n+        return;\n+      }\n+\n+      final TraceScope scope = AgentTracer.activeScope();\n+      if (scope != null) {\n+        scope.close();\n+      }\n+\n+      DECORATE.onTestFinish(span);\n+      DECORATE.beforeFinish(span);\n+      span.finish();\n+    }\n+  }\n+\n+  public static class TestFailureAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void failureTest(@Advice.Argument(0) final Failure failure) {\n+      if (DECORATE.skipTrace(failure.getDescription())) {\n+        return;\n+      }\n+\n+      final AgentSpan span = AgentTracer.activeSpan();\n+      if (span == null) {\n+        return;\n+      }\n+\n+      DECORATE.onTestFailure(span, failure);\n+    }\n+  }\n+\n+  public static class TestIgnoredAdvice {\n+    @Advice.OnMethodExit\n+    public static void ignoreTest(@Advice.Argument(0) final Description description) {\n+      if (DECORATE.skipTrace(description)) {\n+        return;\n+      }\n+\n+      final List<String> testNames = new ArrayList<>();", "originalCommit": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0OTg1Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463049853", "bodyText": "I'm confused when you say \"repeating the annotation detection of JUnit`. Can you elaborate?", "author": "drodriguezhdez", "createdAt": "2020-07-30T14:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3NzUxNQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463077515", "bodyText": "Generally, I think when there is a callback API we should try to use it.\nThat may not always work if the callback API doesn't provide access to all the information that we want, but we should try.\nSo I'd like to know what we're doing here that cannot be done with a RunListener.\nBecause this code ends up repeating the @Test & @Ignore detection rules that already exist inside of JUnit.\nI'd prefer not to repeat that logic (and potentially miss edge cases) unless we have good reason to do so.", "author": "dougqh", "createdAt": "2020-07-30T15:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4OTQ0Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463089443", "bodyText": "I think we can obtain same information using both RunNotifier or RunListener, cause RunNotifier invokes every RunListener configured in the Runner.\nThe reason of using directly RunNotifier is in this comment, but I can change the implementation to create our own RunListener and add it to the runner using instrumentation if we feel more comfortable with that approach.\nThe logic in that new RunListener would be exactly the same that we use in the RunNotifier instrumentation nowadays.", "author": "drodriguezhdez", "createdAt": "2020-07-30T15:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTUxMA=="}], "type": "inlineReview"}]}