{"pr_number": 2044, "pr_title": "Replace Guava caches", "pr_createdAt": "2020-10-30T16:57:09Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/2044", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0MTc2NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515241765", "bodyText": "There is no basis for this number.  The alternative is removing newWeakCache() and forcing callers to specify a capacity.", "author": "randomanderson", "createdAt": "2020-10-30T16:58:55Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTooling.java", "diffHunk": "@@ -27,27 +27,38 @@ static void registerWeakMapProvider() {\n     }\n   }\n \n-  private static <K, V> Provider loadWeakCacheProvider() {\n-    final Iterator<Provider> providers =\n-        ServiceLoader.load(Provider.class, AgentInstaller.class.getClassLoader()).iterator();\n-    if (providers.hasNext()) {\n-      final Provider provider = providers.next();\n-      if (providers.hasNext()) {\n-        throw new IllegalStateException(\n-            \"Only one implementation of WeakCache.Provider suppose to be in classpath\");\n+  private static Provider loadWeakCacheProvider() {\n+    ClassLoader classLoader = AgentInstaller.class.getClassLoader();\n+    Class<Provider> providerClass;\n+\n+    String version = System.getProperty(\"java.version\");\n+    try {\n+      if (version == null || version.startsWith(\"1.7\")) {\n+        providerClass =\n+            (Class<Provider>)\n+                classLoader.loadClass(\"datadog.trace.agent.tooling.CLHMWeakCache$Provider\");\n+        log.debug(\"Using CLHMWeakCache Provider\");\n+      } else {\n+        providerClass =\n+            (Class<Provider>)\n+                classLoader.loadClass(\"datadog.trace.agent.tooling.CaffeineWeakCache$Provider\");\n+        log.debug(\"Using CaffeineWeakCache Provider\");\n       }\n-      return provider;\n+\n+      return providerClass.getDeclaredConstructor().newInstance();\n+    } catch (ReflectiveOperationException e) {\n+      throw new IllegalStateException(\"Can't load implementation of WeakCache.Provider\", e);\n     }\n-    throw new IllegalStateException(\"Can't load implementation of WeakCache.Provider\");\n   }\n \n+  private static final long DEFAULT_CACHE_CAPACITY = 32;", "originalCommit": "037ebf90ad0752a937c6824f6926e8ee6bc62277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0NTA2MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515245061", "bodyText": "I think this assumes that the function is pure (which is a realistic expectation)", "author": "richardstartin", "createdAt": "2020-10-30T17:03:59Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/CaffeineWeakCache.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package datadog.trace.agent.tooling;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import datadog.trace.api.Function;\n+import datadog.trace.bootstrap.WeakCache;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CaffeineWeakCache<K, V> implements WeakCache<K, V> {\n+  public static final class Provider implements WeakCache.Provider {\n+    @Override\n+    public <K, V> WeakCache<K, V> newWeakCache(long maxSize) {\n+      return new CaffeineWeakCache<>(maxSize);\n+    }\n+  }\n+\n+  private final Cache<K, V> cache;\n+\n+  public CaffeineWeakCache(long maxSize) {\n+    cache =\n+        Caffeine.newBuilder()\n+            .weakKeys()\n+            .maximumSize(maxSize)\n+            .expireAfterAccess(10, TimeUnit.MINUTES)\n+            .build();\n+  }\n+\n+  @Override\n+  public V getIfPresent(K key) {\n+    return cache.getIfPresent(key);\n+  }\n+\n+  @Override\n+  public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n+    // Unable to use cache.get() directly because it relies on java.util.function.Function which is", "originalCommit": "037ebf90ad0752a937c6824f6926e8ee6bc62277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgwNDQyMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515804421", "bodyText": "Agree that this is a realistic assumption. The same is true for the implementation in CLHMWeakCache, so maybe there should be a comment in the WeakCache interface so it doesn't come as a surprise to users of the cache.", "author": "bantonsson", "createdAt": "2020-11-02T08:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0NTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0ODgyMA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515248820", "bodyText": "@devinsba mentioned encapsulating this in a Platform class before, I think there are probably enough instances of this to do it now", "author": "richardstartin", "createdAt": "2020-10-30T17:10:07Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTooling.java", "diffHunk": "@@ -27,27 +27,38 @@ static void registerWeakMapProvider() {\n     }\n   }\n \n-  private static <K, V> Provider loadWeakCacheProvider() {\n-    final Iterator<Provider> providers =\n-        ServiceLoader.load(Provider.class, AgentInstaller.class.getClassLoader()).iterator();\n-    if (providers.hasNext()) {\n-      final Provider provider = providers.next();\n-      if (providers.hasNext()) {\n-        throw new IllegalStateException(\n-            \"Only one implementation of WeakCache.Provider suppose to be in classpath\");\n+  private static Provider loadWeakCacheProvider() {\n+    ClassLoader classLoader = AgentInstaller.class.getClassLoader();\n+    Class<Provider> providerClass;\n+\n+    String version = System.getProperty(\"java.version\");\n+    try {\n+      if (version == null || version.startsWith(\"1.7\")) {", "originalCommit": "037ebf90ad0752a937c6824f6926e8ee6bc62277", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0ODAxNw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515248017", "bodyText": "How does this still provide cache semantics with a max size?", "author": "tylerbenson", "createdAt": "2020-10-30T17:08:54Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -56,23 +59,16 @@\n    *   <li>Allow for quick fast path equivalence check of composite keys\n    * </ul>\n    */\n-  final Cache<ClassLoader, WeakReference<ClassLoader>> loaderRefCache =\n-      CacheBuilder.newBuilder()\n-          .weakKeys()\n-          .concurrencyLevel(CONCURRENCY_LEVEL)\n-          .initialCapacity(LOADER_CAPACITY / 2)\n-          .maximumSize(LOADER_CAPACITY)\n-          .build();\n+  final WeakCache<ClassLoader, WeakReference<ClassLoader>> loaderRefCache =\n+      AgentTooling.newWeakCache(LOADER_CAPACITY);\n \n   /**\n    * Single shared Type.Resolution cache -- uses a composite key -- conceptually of loader & name\n    */\n-  final Cache<TypeCacheKey, TypePool.Resolution> sharedResolutionCache =\n-      CacheBuilder.newBuilder()\n-          .softValues()\n+  final ConcurrentMap<TypeCacheKey, TypePool.Resolution> sharedResolutionCache =\n+      new ConcurrentLinkedHashMap.Builder<TypeCacheKey, TypePool.Resolution>()\n+          .maximumWeightedCapacity(TYPE_CAPACITY)", "originalCommit": "037ebf90ad0752a937c6824f6926e8ee6bc62277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4OTM5Ng==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515289396", "bodyText": "ConcurrentLinkedHashMap is a bounded concurrent map with least-recently-used eviction: https://github.com/ben-manes/concurrentlinkedhashmap/blob/master/src/main/java/com/googlecode/concurrentlinkedhashmap/ConcurrentLinkedHashMap.java#L108", "author": "randomanderson", "createdAt": "2020-10-30T18:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0ODAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyMTU1NA==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515321554", "bodyText": "Ah, ok.  I was getting this confused with ConcurrentHashMap.", "author": "tylerbenson", "createdAt": "2020-10-30T19:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0ODAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1MzA2Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515253067", "bodyText": "Why do we need this at all if we have the dependencies below? Based partially on seeing the huge benefits from removing WeakMap wherever possible, I don't feel good about the weak-map-as-a-cache approach.", "author": "richardstartin", "createdAt": "2020-10-30T17:15:58Z", "path": "dd-java-agent/agent-tooling/agent-tooling.gradle", "diffHunk": "@@ -12,13 +12,11 @@ dependencies {\n   compile(project(':dd-java-agent:agent-bootstrap')) {\n     exclude group: 'com.datadoghq', module: 'agent-logging'\n   }\n-  compile group: 'com.blogspot.mydailyjava', name: 'weak-lock-free', version: '0.15'\n+  compile group: 'com.blogspot.mydailyjava', name: 'weak-lock-free', version: '0.17'", "originalCommit": "037ebf90ad0752a937c6824f6926e8ee6bc62277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzA1MQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r515257051", "bodyText": "I see why, the JDK7 implementation requires both.", "author": "richardstartin", "createdAt": "2020-10-30T17:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1MzA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4NjAyMw==", "url": "https://github.com/DataDog/dd-trace-java/pull/2044#discussion_r521586023", "bodyText": "Worth doing a perf test before/after this change?", "author": "tylerbenson", "createdAt": "2020-11-11T19:23:41Z", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -56,23 +59,16 @@\n    *   <li>Allow for quick fast path equivalence check of composite keys\n    * </ul>\n    */\n-  final Cache<ClassLoader, WeakReference<ClassLoader>> loaderRefCache =\n-      CacheBuilder.newBuilder()\n-          .weakKeys()\n-          .concurrencyLevel(CONCURRENCY_LEVEL)\n-          .initialCapacity(LOADER_CAPACITY / 2)\n-          .maximumSize(LOADER_CAPACITY)\n-          .build();\n+  final WeakCache<ClassLoader, WeakReference<ClassLoader>> loaderRefCache =\n+      AgentTooling.newWeakCache(LOADER_CAPACITY);\n \n   /**\n    * Single shared Type.Resolution cache -- uses a composite key -- conceptually of loader & name\n    */\n-  final Cache<TypeCacheKey, TypePool.Resolution> sharedResolutionCache =\n-      CacheBuilder.newBuilder()\n-          .softValues()\n+  final ConcurrentMap<TypeCacheKey, TypePool.Resolution> sharedResolutionCache =\n+      new ConcurrentLinkedHashMap.Builder<TypeCacheKey, TypePool.Resolution>()\n+          .maximumWeightedCapacity(TYPE_CAPACITY)", "originalCommit": "1252b4eddf62a572a9da1916f43b722e9549d67b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a34ba17b27293131d65a2fff433748bca99a9b66", "url": "https://github.com/DataDog/dd-trace-java/commit/a34ba17b27293131d65a2fff433748bca99a9b66", "message": "Use datadog.trace.api.Function in WeakMap", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "2a07215492aac5f6b7d21c8199ebc6f8d3b0481f", "url": "https://github.com/DataDog/dd-trace-java/commit/2a07215492aac5f6b7d21c8199ebc6f8d3b0481f", "message": "Simplify WeakCache interface", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "95e08a9bcd98c84355df0515e946521b6d507ed0", "url": "https://github.com/DataDog/dd-trace-java/commit/95e08a9bcd98c84355df0515e946521b6d507ed0", "message": "Add CLHMWeakCache and CaffeineWeakCache", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "aa06610445147b08eb33f93ab064cea7a6400ab6", "url": "https://github.com/DataDog/dd-trace-java/commit/aa06610445147b08eb33f93ab064cea7a6400ab6", "message": "Replace Guava caches in DDCachingPoolStrategy", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "2e8c864b6eadf0211a112249fe7ef959a548cddc", "url": "https://github.com/DataDog/dd-trace-java/commit/2e8c864b6eadf0211a112249fe7ef959a548cddc", "message": "Datastax cassandra instrumentation had a guava dep", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "e583356b8372f331557e01d5a5f33197e9a5c4b0", "url": "https://github.com/DataDog/dd-trace-java/commit/e583356b8372f331557e01d5a5f33197e9a5c4b0", "message": "Update test", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "54629fc18377c8572e2d3378241be550fca9e0d0", "url": "https://github.com/DataDog/dd-trace-java/commit/54629fc18377c8572e2d3378241be550fca9e0d0", "message": "Add some debug logging", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "21c547254aaeb4c9e96fef83342c7d16b4d8f4e9", "url": "https://github.com/DataDog/dd-trace-java/commit/21c547254aaeb4c9e96fef83342c7d16b4d8f4e9", "message": "approximateSize() was being used by tests", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "c3f33f0f7a817a638edea77e1bbb7801685c4a08", "url": "https://github.com/DataDog/dd-trace-java/commit/c3f33f0f7a817a638edea77e1bbb7801685c4a08", "message": "ShadowPackageRenamingTest relied on guava being used", "committedDate": "2020-11-23T17:22:43Z", "type": "commit"}, {"oid": "a979b8fe7ed931678b66585edbfd9ae76cea1c09", "url": "https://github.com/DataDog/dd-trace-java/commit/a979b8fe7ed931678b66585edbfd9ae76cea1c09", "message": "Use AgentTaskScheduler.INSTANCE for background cleanup", "committedDate": "2020-11-23T17:23:51Z", "type": "commit"}, {"oid": "4798688ffe95d80eb692c2c8fba6a473cbbb8b66", "url": "https://github.com/DataDog/dd-trace-java/commit/4798688ffe95d80eb692c2c8fba6a473cbbb8b66", "message": "Patch Caffeine's BoundedLocalCache.PerformCleanupTask to avoid loading ForkJoinTask before instrumentation is ready", "committedDate": "2020-11-23T17:25:04Z", "type": "commit"}, {"oid": "4798688ffe95d80eb692c2c8fba6a473cbbb8b66", "url": "https://github.com/DataDog/dd-trace-java/commit/4798688ffe95d80eb692c2c8fba6a473cbbb8b66", "message": "Patch Caffeine's BoundedLocalCache.PerformCleanupTask to avoid loading ForkJoinTask before instrumentation is ready", "committedDate": "2020-11-23T17:25:04Z", "type": "forcePushed"}, {"oid": "eaf51897cf34d6e83d6bbeec1ceb3d3d91f95e0c", "url": "https://github.com/DataDog/dd-trace-java/commit/eaf51897cf34d6e83d6bbeec1ceb3d3d91f95e0c", "message": "Use Platform class to check Java version", "committedDate": "2020-11-23T17:47:44Z", "type": "commit"}]}