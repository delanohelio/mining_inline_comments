{"pr_number": 1649, "pr_title": "Automatic service naming", "pr_createdAt": "2020-07-02T08:14:36Z", "pr_url": "https://github.com/DataDog/dd-trace-java/pull/1649", "timeline": [{"oid": "1e955ea6096db1e7610828443cabf774992b9fa1", "url": "https://github.com/DataDog/dd-trace-java/commit/1e955ea6096db1e7610828443cabf774992b9fa1", "message": "Modified Config.java to include service name autodetection for Oracle JDKs", "committedDate": "2020-07-02T08:11:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDMwOQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r448834309", "bodyText": "Then I think we should change those tests rather than introduce test-aware behaviour here.", "author": "richardstartin", "createdAt": "2020-07-02T08:26:37Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -1469,6 +1470,53 @@ private static String getHostName() {\n     return null;\n   }\n \n+  /**\n+   * Returns autodetected service name based on the java process command line. Tipically, the\n+   * autodetection will return either the JAR filename or the java main class.\n+   */\n+  private static String autodetectServiceName(final String defaultValue) {\n+    /*\n+     Testing purposes\n+     Automatic detection breaks the tests that assert default values.\n+     To fix that, it is checked if the method is executed from a DDSpecification\n+    */\n+    if (System.getProperty(\"DDSpecification\") != null", "originalCommit": "1e955ea6096db1e7610828443cabf774992b9fa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg1NTgxMQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r448855811", "bodyText": "Good point.\nThat was my first approach, but the autodetection algorithm is based on process command line, and unfortunately there is no a standard way to obtain this info. Totally platform dependant.\nI think that implies either all default values are mocked in all tests to obtain the service name deterministically (this could make the tests that assert default values useless), or the default behaviour is maintained as always, and only in the specific tests are configured the proper platform values and assert the expected service name.\nTBH, not super fan of poluting production code with this test-aware behaviour, but I assumed this tradeoff to maintain the testability as high as possibly.", "author": "drodriguezhdez", "createdAt": "2020-07-02T09:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2MzI3Nw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r448863277", "bodyText": "I'm not necessarily suggesting that it isn't the most pragmatic solution, but seeing this makes me quite uncomfortable because it points to a missing abstraction from the Config class. We should first capture an environment, and then use it. Tests would then depend on (and control) what's in the captured environment, and we would have a simple test which demonstrates that we can actually capture an environment from properties, environment variables and config files. This would also do away with the practice of setting system properties in test setup.\nThis feels like quite a large design change to propose as part of this otherwise simple set of changes, but want to leave this open for others to discuss if there are other ways to avoid test-aware logic.", "author": "richardstartin", "createdAt": "2020-07-02T09:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzNDMwOQ=="}], "type": "inlineReview"}, {"oid": "a716daf622a2312a5b3467ca301b7eba4f978d86", "url": "https://github.com/DataDog/dd-trace-java/commit/a716daf622a2312a5b3467ca301b7eba4f978d86", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T08:42:50Z", "type": "forcePushed"}, {"oid": "e702a9493c6cae0780a3bc69c14931c8cd811c54", "url": "https://github.com/DataDog/dd-trace-java/commit/e702a9493c6cae0780a3bc69c14931c8cd811c54", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T10:52:23Z", "type": "forcePushed"}, {"oid": "1defdb76d6f1058cd93488c43663a9bb0338b1a5", "url": "https://github.com/DataDog/dd-trace-java/commit/1defdb76d6f1058cd93488c43663a9bb0338b1a5", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:28:12Z", "type": "forcePushed"}, {"oid": "64e8c88577baaaaac3dd08801e3bf8175673a215", "url": "https://github.com/DataDog/dd-trace-java/commit/64e8c88577baaaaac3dd08801e3bf8175673a215", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:31:59Z", "type": "forcePushed"}, {"oid": "418f4a1bb6288f4043dbfe1070dca22969e56e62", "url": "https://github.com/DataDog/dd-trace-java/commit/418f4a1bb6288f4043dbfe1070dca22969e56e62", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:44:42Z", "type": "commit"}, {"oid": "418f4a1bb6288f4043dbfe1070dca22969e56e62", "url": "https://github.com/DataDog/dd-trace-java/commit/418f4a1bb6288f4043dbfe1070dca22969e56e62", "message": "Use CaptureEnvironment instance to encapsulate platform dependant config settings.", "committedDate": "2020-07-03T13:44:42Z", "type": "forcePushed"}, {"oid": "1f2e4767df6f9b3247a34a550e35dbc0df39d398", "url": "https://github.com/DataDog/dd-trace-java/commit/1f2e4767df6f9b3247a34a550e35dbc0df39d398", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-03T15:14:50Z", "type": "forcePushed"}, {"oid": "a5786748479b828d5d70a5a505d82dbd8f29711e", "url": "https://github.com/DataDog/dd-trace-java/commit/a5786748479b828d5d70a5a505d82dbd8f29711e", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:13:29Z", "type": "forcePushed"}, {"oid": "98f882b16efee534a55bcf2cf1e9f8213b60da98", "url": "https://github.com/DataDog/dd-trace-java/commit/98f882b16efee534a55bcf2cf1e9f8213b60da98", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:47:47Z", "type": "forcePushed"}, {"oid": "c0693ee32f760233c20f1b8ca59bea348372d856", "url": "https://github.com/DataDog/dd-trace-java/commit/c0693ee32f760233c20f1b8ca59bea348372d856", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:54:59Z", "type": "commit"}, {"oid": "c0693ee32f760233c20f1b8ca59bea348372d856", "url": "https://github.com/DataDog/dd-trace-java/commit/c0693ee32f760233c20f1b8ca59bea348372d856", "message": "Use 'sun.java.command' sysprop as main info to extract java process command line.", "committedDate": "2020-07-06T07:54:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Mzk4Mg==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450093982", "bodyText": "redundant check, extractJarOrClass is already testing against null command", "author": "jpbempel", "createdAt": "2020-07-06T09:21:07Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.api.env;\n+\n+import datadog.trace.api.config.GeneralConfig;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * The {@code CapturedEnvironment} instance keeps those {@code Config} values which are platform\n+ * dependant.\n+ */\n+@Slf4j\n+public class CapturedEnvironment {\n+\n+  private static final CapturedEnvironment INSTANCE = new CapturedEnvironment();\n+\n+  @Getter private final Map<String, String> properties;\n+\n+  CapturedEnvironment() {\n+    properties = new HashMap<>();\n+    properties.put(GeneralConfig.SERVICE_NAME, autodetectServiceName());\n+  }\n+\n+  // Testing purposes\n+  static void useFixedEnv(final Map<String, String> props) {\n+    INSTANCE.properties.clear();\n+\n+    for (final Map.Entry<String, String> entry : props.entrySet()) {\n+      INSTANCE.properties.put(entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  /**\n+   * Returns autodetected service name based on the java process command line. Typically, the\n+   * autodetection will return either the JAR filename or the java main class.\n+   */\n+  private String autodetectServiceName() {\n+    // Besides \"sun.java.command\" property is not an standard, all main JDKs has set this property.\n+    // Tested on:\n+    // - OracleJDK, OpenJDK, AdoptOpenJDK, IBM JDK, Azul Zulu JDK, Amazon Coretto JDK\n+    if (System.getProperty(\"sun.java.command\") != null) {", "originalCommit": "c0693ee32f760233c20f1b8ca59bea348372d856", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5NDc2Mw==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450094763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (split.length < 1 || split[0].equals(\"\")) {\n          \n          \n            \n                if (split.length == 0 || split[0].equals(\"\")) {", "author": "jpbempel", "createdAt": "2020-07-06T09:22:26Z", "path": "dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.api.env;\n+\n+import datadog.trace.api.config.GeneralConfig;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * The {@code CapturedEnvironment} instance keeps those {@code Config} values which are platform\n+ * dependant.\n+ */\n+@Slf4j\n+public class CapturedEnvironment {\n+\n+  private static final CapturedEnvironment INSTANCE = new CapturedEnvironment();\n+\n+  @Getter private final Map<String, String> properties;\n+\n+  CapturedEnvironment() {\n+    properties = new HashMap<>();\n+    properties.put(GeneralConfig.SERVICE_NAME, autodetectServiceName());\n+  }\n+\n+  // Testing purposes\n+  static void useFixedEnv(final Map<String, String> props) {\n+    INSTANCE.properties.clear();\n+\n+    for (final Map.Entry<String, String> entry : props.entrySet()) {\n+      INSTANCE.properties.put(entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n+  /**\n+   * Returns autodetected service name based on the java process command line. Typically, the\n+   * autodetection will return either the JAR filename or the java main class.\n+   */\n+  private String autodetectServiceName() {\n+    // Besides \"sun.java.command\" property is not an standard, all main JDKs has set this property.\n+    // Tested on:\n+    // - OracleJDK, OpenJDK, AdoptOpenJDK, IBM JDK, Azul Zulu JDK, Amazon Coretto JDK\n+    if (System.getProperty(\"sun.java.command\") != null) {\n+      return extractJarOrClass(System.getProperty(\"sun.java.command\"));\n+    }\n+\n+    return null;\n+  }\n+\n+  private String extractJarOrClass(final String command) {\n+    if (command == null || command.equals(\"\")) {\n+      return null;\n+    }\n+\n+    final String[] split = command.trim().split(\" \");\n+    if (split.length < 1 || split[0].equals(\"\")) {", "originalCommit": "c0693ee32f760233c20f1b8ca59bea348372d856", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5d602aaa713d942c24ffa4f16e3af8128ecb444", "url": "https://github.com/DataDog/dd-trace-java/commit/f5d602aaa713d942c24ffa4f16e3af8128ecb444", "message": "Apply suggestions from PR feedback.", "committedDate": "2020-07-06T10:03:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg4OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450388888", "bodyText": "Should the service name be example instead of example.jar?", "author": "tylerbenson", "createdAt": "2020-07-06T17:57:07Z", "path": "dd-trace-api/src/test/groovy/datadog/trace/api/env/CapturedEnvironmentTest.groovy", "diffHunk": "@@ -0,0 +1,82 @@\n+package datadog.trace.api.env\n+\n+import datadog.trace.api.config.GeneralConfig\n+import datadog.trace.util.test.DDSpecification\n+import org.junit.Rule\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties\n+\n+class CapturedEnvironmentTest extends DDSpecification {\n+\n+  @Rule\n+  public final RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties()\n+\n+  def \"non autodetected service.name with null command\"() {\n+    setup:\n+    System.clearProperty(\"sun.java.command\")\n+\n+    when:\n+    def capturedEnv = new CapturedEnvironment()\n+\n+    then:\n+    def props = capturedEnv.properties\n+    props.get(GeneralConfig.SERVICE_NAME) == null\n+  }\n+\n+  def \"non autodetected service.name with empty command\"() {\n+    setup:\n+    System.setProperty(\"sun.java.command\", \"\")\n+\n+    when:\n+    def capturedEnv = new CapturedEnvironment()\n+\n+    then:\n+    def props = capturedEnv.properties\n+    props.get(GeneralConfig.SERVICE_NAME) == null\n+  }\n+\n+  def \"non autodetected service.name with all blanks command\"() {\n+    setup:\n+    System.setProperty(\"sun.java.command\", \" \")\n+\n+    when:\n+    def capturedEnv = new CapturedEnvironment()\n+\n+    then:\n+    def props = capturedEnv.properties\n+    props.get(GeneralConfig.SERVICE_NAME) == null\n+  }\n+\n+  def \"set service.name by sysprop 'sun.java.command' with class\"() {\n+    setup:\n+    System.setProperty(\"sun.java.command\", \"org.example.App -Dfoo=bar arg2 arg3\")\n+\n+    when:\n+    def capturedEnv = new CapturedEnvironment()\n+\n+    then:\n+    def props = capturedEnv.properties\n+    props.get(GeneralConfig.SERVICE_NAME) == \"org.example.App\"\n+  }\n+\n+  def \"set service.name by sysprop 'sun.java.command' with jar\"() {\n+    setup:\n+    System.setProperty(\"sun.java.command\", \"foo/bar/example.jar -Dfoo=bar arg2 arg3\")\n+\n+    when:\n+    def capturedEnv = new CapturedEnvironment()\n+\n+    then:\n+    def props = capturedEnv.properties\n+    props.get(GeneralConfig.SERVICE_NAME) == \"example.jar\"", "originalCommit": "f5d602aaa713d942c24ffa4f16e3af8128ecb444", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NzQ5OA==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450647498", "bodyText": "Personally, I like the current form example.jar cause it gives me the hint that the name comes from the JAR name, and that is something that I'd like to know as a user. But totally opened to change it if you guys consider the name without extension is a better form taking into account the customer profile.", "author": "drodriguezhdez", "createdAt": "2020-07-07T06:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzM4NQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450903385", "bodyText": "The ultimate goal is to not have to manually set the service name at all.  IE, the jar name, or main class name, or servlet name, or \"name\" from the framework being used gives a reasonable default.\nWith that in mind, I think it should be example.  Someone seeing example.jar probably want to change it.", "author": "randomanderson", "createdAt": "2020-07-07T14:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUwMjc3OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r451502779", "bodyText": "Perfect \ud83d\udc4d", "author": "drodriguezhdez", "createdAt": "2020-07-08T12:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTM4OQ==", "url": "https://github.com/DataDog/dd-trace-java/pull/1649#discussion_r450391389", "bodyText": "I would like to see a test with both this and the service name set to demonstrate the manually configured name takes priority.", "author": "tylerbenson", "createdAt": "2020-07-06T18:01:51Z", "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -645,6 +649,19 @@ class ConfigTest extends DDSpecification {\n     config.writerType == \"DDAgentWriter\"\n   }\n \n+  def \"captured env props override default props\"() {", "originalCommit": "f5d602aaa713d942c24ffa4f16e3af8128ecb444", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49baa00573b7f41a80a88a0341bd47aebd828a4f", "url": "https://github.com/DataDog/dd-trace-java/commit/49baa00573b7f41a80a88a0341bd47aebd828a4f", "message": "Added tests to demonstrate the manually configured properties have prevalence over captured env props.", "committedDate": "2020-07-07T07:11:09Z", "type": "commit"}, {"oid": "8d7fdf22a045e532a706dab2aca06aa92ed61dc9", "url": "https://github.com/DataDog/dd-trace-java/commit/8d7fdf22a045e532a706dab2aca06aa92ed61dc9", "message": "Remove .jar suffix to service name based on JAR name", "committedDate": "2020-07-08T12:14:13Z", "type": "commit"}]}