{"pr_number": 1714, "pr_title": "Fix CorsSupport default behavior", "pr_createdAt": "2020-05-01T20:54:59Z", "pr_url": "https://github.com/oracle/helidon/pull/1714", "timeline": [{"oid": "6b535c526ad8868a550df8e9bb19ff23abd2747c", "url": "https://github.com/oracle/helidon/commit/6b535c526ad8868a550df8e9bb19ff23abd2747c", "message": "Default CorsSupport via CorsSupport.create() did not have wildcarded default behavior\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>", "committedDate": "2020-05-01T19:35:32Z", "type": "commit"}, {"oid": "b2ad7c4e400485fdf12fbf4c71729a5e730a803e", "url": "https://github.com/oracle/helidon/commit/b2ad7c4e400485fdf12fbf4c71729a5e730a803e", "message": "Concurrent changes", "committedDate": "2020-05-01T19:56:51Z", "type": "commit"}, {"oid": "f484909bfab1397c3e679ee9696891fafe0ff2d5", "url": "https://github.com/oracle/helidon/commit/f484909bfab1397c3e679ee9696891fafe0ff2d5", "message": "Some clean-up", "committedDate": "2020-05-01T20:42:09Z", "type": "commit"}, {"oid": "aba84507c28e35f4458f3f69c7962e2e8a3d2dff", "url": "https://github.com/oracle/helidon/commit/aba84507c28e35f4458f3f69c7962e2e8a3d2dff", "message": "Change aggregator's internal data structure from a map to a list to give developers more control over the routing they build; developers need to add CrossOriginConfigs in the order they should be checked", "committedDate": "2020-05-02T12:15:35Z", "type": "commit"}, {"oid": "895bb77ea69155eae6664f157750c0f0be4cac4a", "url": "https://github.com/oracle/helidon/commit/895bb77ea69155eae6664f157750c0f0be4cac4a", "message": "Changes in JavaDoc", "committedDate": "2020-05-02T13:33:16Z", "type": "commit"}, {"oid": "2ac42994453eed6d6f64285b0b7bd6641384d018", "url": "https://github.com/oracle/helidon/commit/2ac42994453eed6d6f64285b0b7bd6641384d018", "message": "Remove unused impport", "committedDate": "2020-05-02T17:03:29Z", "type": "commit"}, {"oid": "85c100c6474cd052488b337ac26238d1ee5a63e3", "url": "https://github.com/oracle/helidon/commit/85c100c6474cd052488b337ac26238d1ee5a63e3", "message": "Add testing of CrossOriginConfig ordering in aggregator", "committedDate": "2020-05-03T12:01:10Z", "type": "commit"}, {"oid": "ff821cc06b8a33b967f6b6000b52d86a56c30fca", "url": "https://github.com/oracle/helidon/commit/ff821cc06b8a33b967f6b6000b52d86a56c30fca", "message": "Fix incorrect CrossOriginConfig look-up during preflight; searched for OPTIONS but needed to use the method the pre-flight request was asking for", "committedDate": "2020-05-04T19:16:31Z", "type": "commit"}, {"oid": "cbcec311c36cbdd619c281afd710b9f87772368d", "url": "https://github.com/oracle/helidon/commit/cbcec311c36cbdd619c281afd710b9f87772368d", "message": "Use paths with slash prefix; otherwise the path matcher regex .+ might not have at least one character to consume", "committedDate": "2020-05-04T21:08:29Z", "type": "commit"}, {"oid": "1e412a232e0fec9a1192ec82be33191202b6b5f5", "url": "https://github.com/oracle/helidon/commit/1e412a232e0fec9a1192ec82be33191202b6b5f5", "message": "Minor adjustment to path handling", "committedDate": "2020-05-04T21:20:07Z", "type": "commit"}, {"oid": "a04fc3fb410b63099d5c1606a67877ad8f8c7c09", "url": "https://github.com/oracle/helidon/commit/a04fc3fb410b63099d5c1606a67877ad8f8c7c09", "message": "Add DEFAULT constant for CrossOriginConfig", "committedDate": "2020-05-04T23:32:08Z", "type": "commit"}, {"oid": "ac7b9fdbddc4203c145747a277423676b220f731", "url": "https://github.com/oracle/helidon/commit/ac7b9fdbddc4203c145747a277423676b220f731", "message": "Add create() method instead of DEFAULT constant", "committedDate": "2020-05-05T09:52:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODk5NA==", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420368994", "bodyText": "Could not find in docs whether there is a possibility we would get the leading / in response. In such a case I would probably try to guard against it, e.g.\nString path = requestContext.getUriInfo().getPath();\nif (path.startsWith(\"/\")) {\n            return path;\n        } else {\n            return '/' + path;\n        }", "author": "tomas-langer", "createdAt": "2020-05-05T19:56:40Z", "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsSupportMp.java", "diffHunk": "@@ -112,7 +112,7 @@ protected Builder secondaryLookupSupplier(\n \n         @Override\n         public String path() {\n-            return requestContext.getUriInfo().getPath();\n+            return \"/\" + requestContext.getUriInfo().getPath();", "originalCommit": "ac7b9fdbddc4203c145747a277423676b220f731", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQ3Mw==", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420370473", "bodyText": "HTTP methods should be compared ignore case (unless you fix the requestedMethod and configured methods somewhere to be always upper/lower cased)", "author": "tomas-langer", "createdAt": "2020-05-05T19:59:33Z", "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CorsSupportHelper.java", "diffHunk": "@@ -510,26 +524,16 @@ R processCorsPreFlightRequest(CrossOriginConfig crossOrigin,\n                     () -> \"actual origin: \" + originOpt.get() + \", allowedOrigins: \" + allowedOrigins);\n         }\n \n-        Optional<String> methodOpt = requestAdapter.firstHeader(ACCESS_CONTROL_REQUEST_METHOD);\n-        if (methodOpt.isEmpty()) {\n-            return forbid(requestAdapter,\n-                    responseAdapter,\n-                    METHOD_NOT_IN_ALLOWED_LIST,\n-                    () -> \"header \" + ACCESS_CONTROL_REQUEST_METHOD + \" absent from request\");\n-        }\n-\n         // Check if method is allowed\n-        String method = methodOpt.get();\n         List<String> allowedMethods = Arrays.asList(crossOrigin.allowMethods());\n         if (!allowedMethods.contains(\"*\")\n-                && !contains(method, allowedMethods, String::equals)) {\n+                && !contains(requestedMethod, allowedMethods, String::equals)) {", "originalCommit": "ac7b9fdbddc4203c145747a277423676b220f731", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDY1Nw==", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420370657", "bodyText": "HTTP methods should be compared ignore case (unless you fix the requestedMethod and configured methods somewhere to be always upper/lower cased)", "author": "tomas-langer", "createdAt": "2020-05-05T19:59:51Z", "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "diffHunk": "@@ -218,6 +228,21 @@ public long maxAgeSeconds() {\n         return maxAgeSeconds;\n     }\n \n+    /**\n+     * Reports whether the specified HTTP method name matches this {@code CrossOriginConfig}.\n+     *\n+     * @param method HTTP method name to check\n+     * @return true if this {@code CrossOriginConfig} matches the specified method; false otherwise\n+     */\n+    public boolean matches(String method) {\n+        for (String allowMethod : allowMethods) {\n+            if (allowMethod.equals(method) || allowMethod.equals(\"*\")) {", "originalCommit": "ac7b9fdbddc4203c145747a277423676b220f731", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba75111a349232d94a9cf89a12c570bfd2cf6bb4", "url": "https://github.com/oracle/helidon/commit/ba75111a349232d94a9cf89a12c570bfd2cf6bb4", "message": "Reviewer comments: compare HTTP method names case-agnostically, and be defensive about presence or absence of leading / in MP request path", "committedDate": "2020-05-05T20:15:46Z", "type": "commit"}]}