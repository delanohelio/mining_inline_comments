{"pr_number": 2282, "pr_title": "JMS Reactive Messaging connector", "pr_createdAt": "2020-08-21T13:36:43Z", "pr_url": "https://github.com/oracle/helidon/pull/2282", "timeline": [{"oid": "1ba88a4fc882abef6704f7abf1b0ac70f72257d1", "url": "https://github.com/oracle/helidon/commit/1ba88a4fc882abef6704f7abf1b0ac70f72257d1", "message": "Copyright 2\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-01T12:11:20Z", "type": "forcePushed"}, {"oid": "b577be7ad2f7f4413b185b24aab552b2a0279639", "url": "https://github.com/oracle/helidon/commit/b577be7ad2f7f4413b185b24aab552b2a0279639", "message": "Message selector\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-01T20:28:22Z", "type": "forcePushed"}, {"oid": "60ea2e816b6a1b67cf0d9bcdcf1e951b97c7af42", "url": "https://github.com/oracle/helidon/commit/60ea2e816b6a1b67cf0d9bcdcf1e951b97c7af42", "message": "Oracle AQ connector\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-07T15:55:01Z", "type": "forcePushed"}, {"oid": "b443bf685ed48c09960d563763fbd6c8afa3b505", "url": "https://github.com/oracle/helidon/commit/b443bf685ed48c09960d563763fbd6c8afa3b505", "message": "Snapshot version bump\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-07T18:15:48Z", "type": "forcePushed"}, {"oid": "e062b2113d341c4efdec381a8f0951e84c450eb0", "url": "https://github.com/oracle/helidon/commit/e062b2113d341c4efdec381a8f0951e84c450eb0", "message": "Snapshot version bump\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-07T19:41:16Z", "type": "forcePushed"}, {"oid": "9e85205d080a418aab658c0cbe1be7b30a663258", "url": "https://github.com/oracle/helidon/commit/9e85205d080a418aab658c0cbe1be7b30a663258", "message": "Snapshot version bump\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-07T19:50:56Z", "type": "forcePushed"}, {"oid": "efe7dc343aba3efe9222149cb5113810a0477672", "url": "https://github.com/oracle/helidon/commit/efe7dc343aba3efe9222149cb5113810a0477672", "message": "Snapshot version bump\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-07T20:13:26Z", "type": "forcePushed"}, {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "url": "https://github.com/oracle/helidon/commit/68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "message": "Use @HelidonTest\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-17T15:01:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjA3Ng==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490406076", "bodyText": "There is no need to use a Main class in MP. If you remove it (and the property from pom.xml) it will work fine.\nThe default main class is io.helidon.microprofile.cdi.Main - but you do not need to explicitly define it", "author": "tomas-langer", "createdAt": "2020-09-17T16:41:23Z", "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/Main.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjYyOQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490406629", "bodyText": "Do not commit commented out parts", "author": "tomas-langer", "createdAt": "2020-09-17T16:42:15Z", "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/MsgProcessingBean.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.mp.example;\n+\n+import java.util.concurrent.SubmissionPublisher;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.eclipse.microprofile.reactive.streams.operators.ProcessorBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.FlowAdapters;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Bean for message processing.\n+ */\n+@ApplicationScoped\n+public class MsgProcessingBean {\n+\n+    private final SubmissionPublisher<String> emitter = new SubmissionPublisher<>();\n+    private final SubmissionPublisher<String> broadCaster = new SubmissionPublisher<>();\n+\n+//    @Produces", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MjYyNg==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494092626", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-09-24T07:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwOTE4MQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490409181", "bodyText": "The package structure should be:\nio.helidion.examples.messaging.mp\nThe existing examples have it wrong, this would follow our naming convention.", "author": "tomas-langer", "createdAt": "2020-09-17T16:46:10Z", "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/WebSocketEndpoint.java", "diffHunk": "@@ -0,0 +1,96 @@\n+\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.mp.example;", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MjA5NQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494092095", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-09-24T07:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwOTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMzAzMQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490413031", "bodyText": "Copy/paste error? JmsConnector - should be AqConnector", "author": "tomas-langer", "createdAt": "2020-09-17T16:52:03Z", "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqConnector.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.aq;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n+import java.util.function.BiConsumer;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.sql.DataSource;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.messaging.MessagingException;\n+import io.helidon.messaging.connectors.jms.JmsConnector;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+import io.helidon.messaging.connectors.jms.SessionMetadata;\n+\n+import oracle.jms.AQjmsConnectionFactory;\n+import oracle.jms.AQjmsMessage;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+\n+/**\n+ * MicroProfile Reactive Messaging Oracle AQ connector.\n+ */\n+@ApplicationScoped\n+@Connector(AqConnector.CONNECTOR_NAME)\n+public class AqConnector extends JmsConnector {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AqConnector.class.getName());\n+    /**\n+     * Microprofile messaging Oracle AQ connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-aq\";\n+\n+    private static final String DATASOURCE_PROP = \"data-source\";\n+    private static final String URL_PROP = \"url\";\n+    private static final String USERNAME_PROP = \"username\";\n+    private static final String PASSWORD_PROP = \"password\";\n+\n+    @Inject\n+    private Instance<AQjmsConnectionFactory> connectionFactories;\n+\n+    /**\n+     * Create new JmsConnector.", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MTkxMQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494091911", "bodyText": "thx", "author": "danielkec", "createdAt": "2020-09-24T07:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMzAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDEwNg==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490414106", "bodyText": "method of is not supported by our guidelines. Should be create", "author": "tomas-langer", "createdAt": "2020-09-17T16:53:43Z", "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqMessage.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.aq;\n+\n+import java.sql.Connection;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+\n+import io.helidon.messaging.MessagingException;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+import io.helidon.messaging.connectors.jms.SessionMetadata;\n+\n+import oracle.jms.AQjmsMessage;\n+import oracle.jms.AQjmsSession;\n+\n+/**\n+ * Message representing AQ JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface AqMessage<T> extends JmsMessage<T> {\n+\n+    /**\n+     * Return DB connection used for receiving this message.\n+     *\n+     * @return java.sql.Connection\n+     */\n+    Connection getDBConnection();\n+\n+    /**\n+     * Create from AQjmsMessage.\n+     *\n+     * @param msg             Oracle AQ JMS message to be wrapped\n+     * @param executor        Executor used for invoking ack\n+     * @param sessionMetadata metadata about the JMS session\n+     * @param <T>             payload type\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static <T> AqMessage<T> of(AQjmsMessage msg, Executor executor, SessionMetadata sessionMetadata) {", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxOTMyOA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501919328", "bodyText": "Trying to honor extended api of Message", "author": "danielkec", "createdAt": "2020-10-08T18:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDEwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDgxOA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490414818", "bodyText": "wrong accessor name, missing javadocs", "author": "tomas-langer", "createdAt": "2020-09-17T16:54:52Z", "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/SessionMetadata.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Session;\n+\n+/**\n+ * Metadata of the JMS session.\n+ */\n+public class SessionMetadata {\n+    private final Session session;\n+    private final Connection connection;\n+    private final ConnectionFactory connectionFactory;\n+\n+    SessionMetadata(final Session session, final Connection connection, final ConnectionFactory connectionFactory) {\n+        this.session = session;\n+        this.connection = connection;\n+        this.connectionFactory = connectionFactory;\n+    }\n+\n+    public Session getSession() {", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTA5OA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490415098", "bodyText": "For all accessors - do not use the verb, add javadocs", "author": "tomas-langer", "createdAt": "2020-09-17T16:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0ODc2MQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501948761", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-10-08T19:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTM3Mg==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490415372", "bodyText": "we do not use final in parameter declaration", "author": "tomas-langer", "createdAt": "2020-09-17T16:55:45Z", "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingException.java", "diffHunk": "@@ -30,4 +30,14 @@\n     public MessagingException(final String message) {\n         super(message);\n     }\n+\n+    /**\n+     * Create new MessagingException with supplied message and cause.\n+     *\n+     * @param message supplied message\n+     * @param cause   of this exception\n+     */\n+    public MessagingException(final String message, Throwable cause) {", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0OTE0OA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501949148", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-10-08T19:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjE4NQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490416185", "bodyText": "method name should be create", "author": "tomas-langer", "createdAt": "2020-09-17T16:57:06Z", "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageEOFException;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import io.helidon.messaging.MessagingException;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Message representing JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface JmsMessage<T> extends Message<T> {\n+\n+    /**\n+     * The logger.\n+     */\n+    Logger LOGGER = Logger.getLogger(JmsMessage.class.getName());\n+\n+    /**\n+     * Original JMS message received.\n+     *\n+     * @return original JMS message received\n+     */\n+    javax.jms.Message getJmsMessage();\n+\n+    /**\n+     * Metadata about the JMS session.\n+     *\n+     * @return JMS session\n+     */\n+    Session getJmsSession();\n+\n+    /**\n+     * Get client's connection to its JMS provider.\n+     *\n+     * @return JMS connection\n+     */\n+    Connection getJmsConnection();\n+\n+    /**\n+     * Get JMS connection factory.\n+     *\n+     * @return JMS connection factory\n+     */\n+    ConnectionFactory getJmsConnectionFactory();\n+\n+    /**\n+     * Check if message has been acknowledged yet.\n+     *\n+     * @return true if message has been acknowledged\n+     */\n+    boolean isAck();\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg          JMS message to be wrapped\n+     * @param executor     Executor used for invoking ack\n+     * @param sessionEntry metadata about the JMS session\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg, Executor executor, SessionMetadata sessionEntry) {", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjM3NQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490416375", "bodyText": "all factory methods should be create instead of of", "author": "tomas-langer", "createdAt": "2020-09-17T16:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0OTAwMA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501949000", "bodyText": "Trying to honor extended api of Message", "author": "danielkec", "createdAt": "2020-10-08T19:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzU0OQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490417549", "bodyText": "Isn't this class automatically public, as it is declared on an interface? If so, missing javadoc", "author": "tomas-langer", "createdAt": "2020-09-17T16:59:19Z", "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageEOFException;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import io.helidon.messaging.MessagingException;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Message representing JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface JmsMessage<T> extends Message<T> {\n+\n+    /**\n+     * The logger.\n+     */\n+    Logger LOGGER = Logger.getLogger(JmsMessage.class.getName());\n+\n+    /**\n+     * Original JMS message received.\n+     *\n+     * @return original JMS message received\n+     */\n+    javax.jms.Message getJmsMessage();\n+\n+    /**\n+     * Metadata about the JMS session.\n+     *\n+     * @return JMS session\n+     */\n+    Session getJmsSession();\n+\n+    /**\n+     * Get client's connection to its JMS provider.\n+     *\n+     * @return JMS connection\n+     */\n+    Connection getJmsConnection();\n+\n+    /**\n+     * Get JMS connection factory.\n+     *\n+     * @return JMS connection factory\n+     */\n+    ConnectionFactory getJmsConnectionFactory();\n+\n+    /**\n+     * Check if message has been acknowledged yet.\n+     *\n+     * @return true if message has been acknowledged\n+     */\n+    boolean isAck();\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg          JMS message to be wrapped\n+     * @param executor     Executor used for invoking ack\n+     * @param sessionEntry metadata about the JMS session\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg, Executor executor, SessionMetadata sessionEntry) {\n+        if (msg instanceof TextMessage) {\n+            return new JmsTextMessage((TextMessage) msg, executor, sessionEntry);\n+        } else if (msg instanceof BytesMessage) {\n+            return new JmsBytesMessage((BytesMessage) msg, executor, sessionEntry);\n+        } else {\n+            throw new MessagingException(\"Unsupported JMS message type\");\n+        }\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg) {\n+        if (msg instanceof TextMessage) {\n+            return JmsMessage.of((TextMessage) msg);\n+        } else if (msg instanceof BytesMessage) {\n+            return JmsMessage.of((BytesMessage) msg);\n+        } else {\n+            throw new MessagingException(\"Unsupported JMS message type\");\n+        }\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<String> of(javax.jms.TextMessage msg) {\n+        return new JmsTextMessage(msg, Executors.newWorkStealingPool(), null);\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<InputStream> of(javax.jms.BytesMessage msg) {\n+        return new JmsBytesMessage(msg, Executors.newWorkStealingPool(), null);\n+    }\n+\n+    abstract class AbstractJmsMessage<T> implements JmsMessage<T> {\n+\n+        private final Executor executor;\n+        private final SessionMetadata sharedSessionEntry;\n+        private boolean acked = false;\n+\n+        protected AbstractJmsMessage(Executor executor, SessionMetadata sharedSessionEntry) {\n+            this.sharedSessionEntry = sharedSessionEntry;\n+            this.executor = executor;\n+        }\n+\n+        @Override\n+        public Session getJmsSession() {\n+            return sharedSessionEntry.getSession();\n+        }\n+\n+        @Override\n+        public Connection getJmsConnection() {\n+            return sharedSessionEntry.getConnection();\n+        }\n+\n+        @Override\n+        public ConnectionFactory getJmsConnectionFactory() {\n+            return sharedSessionEntry.getConnectionFactory();\n+        }\n+\n+        @Override\n+        public boolean isAck() {\n+            return acked;\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> ack() {\n+            return CompletableFuture.runAsync(() -> {\n+                try {\n+                    this.getJmsMessage().acknowledge();\n+                    acked = true;\n+                } catch (JMSException e) {\n+                    LOGGER.log(Level.SEVERE, e, () -> \"Error during acknowledgement of JMS message\");\n+                }\n+            }, executor);\n+        }\n+\n+    }\n+\n+    class JmsTextMessage extends AbstractJmsMessage<String> {", "originalCommit": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNjAxOQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501926019", "bodyText": "Yes it is thx!", "author": "danielkec", "createdAt": "2020-10-08T18:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NzIzNA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494097234", "bodyText": "@paulparkinson before starting the example build and run pre-populated Oracle DB\ncd ./examples/messaging/docker/oracle-aq-18-xe/ && \\\n./buildAndRun.sh\nExpect it to take tens of minutes before ready, 18.4 xe takes a long time to start", "author": "danielkec", "createdAt": "2020-09-24T07:30:13Z", "path": "examples/messaging/oracle-aq-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.examples.messaging.mp;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.SubmissionPublisher;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.jms.JMSException;\n+import javax.jms.MapMessage;\n+\n+import io.helidon.common.reactive.BufferedEmittingPublisher;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.messaging.connectors.aq.AqMessage;\n+\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.FlowAdapters;\n+import org.reactivestreams.Publisher;\n+\n+@ApplicationScoped\n+public class MsgProcessingBean {\n+\n+    private final BufferedEmittingPublisher<String> emitter = BufferedEmittingPublisher.create();\n+    private final SubmissionPublisher<String> broadCaster = new SubmissionPublisher<>();\n+\n+    @Outgoing(\"to-queue-1\")\n+    public Publisher<String> toFirstQueue() {\n+        // Create new publisher for emitting to by this::process\n+        return ReactiveStreams\n+                .fromPublisher(FlowAdapters.toPublisher(emitter))\n+                .buildRs();\n+    }\n+\n+    @Incoming(\"from-queue-1\")\n+    @Outgoing(\"to-queue-2\")\n+    //Leave commit by ack to outgoing connector\n+    @Acknowledgment(Acknowledgment.Strategy.NONE)\n+    public CompletionStage<AqMessage<String>> betweenQueues(AqMessage<String> msg) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            try {\n+                PreparedStatement statement = msg.getDBConnection()\n+                        .prepareStatement(\"INSERT INTO frank.message_log (message) VALUES (?)\");\n+                statement.setString(1, msg.getPayload());\n+                statement.executeUpdate();\n+            } catch (SQLException e) {\n+                //Gets caught by messaging engine and translated to onError signal\n+                throw new RuntimeException(\"Error when saving message to log table.\", e);\n+            }\n+            return msg;\n+        });\n+    }", "originalCommit": "7e35c7b261923dacfce8dd8f53338ae5157b607e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff8f60ef374dd257e999a55ab7302e04bf598421", "url": "https://github.com/oracle/helidon/commit/ff8f60ef374dd257e999a55ab7302e04bf598421", "message": "JMS Connector\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-01T16:41:39Z", "type": "forcePushed"}, {"oid": "077f745fd44e7f66de67d04d411f3a96c2debe13", "url": "https://github.com/oracle/helidon/commit/077f745fd44e7f66de67d04d411f3a96c2debe13", "message": "Derive JMS metadata from message", "committedDate": "2020-10-27T16:07:11Z", "type": "forcePushed"}, {"oid": "6cb9dd0a47a74e103d27fef9f4ee1eb5a1902808", "url": "https://github.com/oracle/helidon/commit/6cb9dd0a47a74e103d27fef9f4ee1eb5a1902808", "message": "JMS Connector\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nCheckstyle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nCheckstyle 2\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nCopyright\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "6e57efc2d9fb134da6e151a056c09dece20db09f", "url": "https://github.com/oracle/helidon/commit/6e57efc2d9fb134da6e151a056c09dece20db09f", "message": "Review issues\n\nCustom mapper support for outgoing messages\n\nCheckstyle fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nCopyright fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nRemove final params\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nReview issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nFix examples readme\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nFix examples readme 2\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "08219911eb44e7758c42e3a8627f71f83325b90b", "url": "https://github.com/oracle/helidon/commit/08219911eb44e7758c42e3a8627f71f83325b90b", "message": "Add connectors to the feature catalog\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "30240a5f6f2d3aa14d4892e60a91ad9a8b67e3df", "url": "https://github.com/oracle/helidon/commit/30240a5f6f2d3aa14d4892e60a91ad9a8b67e3df", "message": "Static module dependency to jakarta\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "ee23eb189d3f46fbbc5504f37aaeb427546d0bde", "url": "https://github.com/oracle/helidon/commit/ee23eb189d3f46fbbc5504f37aaeb427546d0bde", "message": "Getter name convention\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "f53007a3b743fcce208de410dbb0b2669f2eeaa3", "url": "https://github.com/oracle/helidon/commit/f53007a3b743fcce208de410dbb0b2669f2eeaa3", "message": "Remove logger from interface\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "16fc5c1a2b175bb175aeaa2b1e2c3b59642159f4", "url": "https://github.com/oracle/helidon/commit/16fc5c1a2b175bb175aeaa2b1e2c3b59642159f4", "message": "Clean up connector\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "09c98e697775a3a4bfd7832949ac012986991f7b", "url": "https://github.com/oracle/helidon/commit/09c98e697775a3a4bfd7832949ac012986991f7b", "message": "JmsMessage api refactor\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "077f745fd44e7f66de67d04d411f3a96c2debe13", "url": "https://github.com/oracle/helidon/commit/077f745fd44e7f66de67d04d411f3a96c2debe13", "message": "Derive JMS metadata from message", "committedDate": "2020-10-27T16:07:11Z", "type": "commit"}, {"oid": "22b138e3d36017679f38c6993711a07cb2362c69", "url": "https://github.com/oracle/helidon/commit/22b138e3d36017679f38c6993711a07cb2362c69", "message": "Snapshot version alignment\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-10-27T16:38:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzcwOA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r518703708", "bodyText": "Hello, I couldn't see this being resolved. May I know if its available for public?", "author": "mohanishappy", "createdAt": "2020-11-06T11:52:53Z", "path": "bom/pom.xml", "diffHunk": "@@ -835,6 +835,16 @@\n                 <artifactId>helidon-messaging-kafka</artifactId>\n                 <version>${helidon.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.jms</groupId>\n+                <artifactId>helidon-messaging-jms</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.aq</groupId>\n+                <artifactId>helidon-messaging-aq</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>", "originalCommit": "6cb9dd0a47a74e103d27fef9f4ee1eb5a1902808", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMjYwOQ==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r518802609", "bodyText": "Hi, helidon-messaging-aq is part of this PR, it needs to be accepted, merged and then released with new version of Helidon", "author": "danielkec", "createdAt": "2020-11-06T14:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NjY3MA==", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r519586670", "bodyText": "Got it, thanks for the update.", "author": "mohanishappy", "createdAt": "2020-11-09T07:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzcwOA=="}], "type": "inlineReview"}, {"oid": "665b8be1d20456d08ae2fd65aa63e703ca2fc87b", "url": "https://github.com/oracle/helidon/commit/665b8be1d20456d08ae2fd65aa63e703ca2fc87b", "message": "Generic return type for getJmsMessage()\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-11-13T08:55:41Z", "type": "commit"}, {"oid": "fe92d7aa9bf12218b24e66b49aef659526d0ea78", "url": "https://github.com/oracle/helidon/commit/fe92d7aa9bf12218b24e66b49aef659526d0ea78", "message": "Alphabetical version order\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-11-13T09:03:15Z", "type": "commit"}, {"oid": "b66126863aa5d64bf09f018dff547d537bb87393", "url": "https://github.com/oracle/helidon/commit/b66126863aa5d64bf09f018dff547d537bb87393", "message": "Align module/directory/package\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-11-13T10:34:08Z", "type": "commit"}, {"oid": "e04627e1d41a2dccf4afe2d6ef645dc2996bd19b", "url": "https://github.com/oracle/helidon/commit/e04627e1d41a2dccf4afe2d6ef645dc2996bd19b", "message": "Property order and javadoc fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-11-13T10:54:40Z", "type": "commit"}, {"oid": "47921c5cdb77c8b3c4917d320099e734f11f0176", "url": "https://github.com/oracle/helidon/commit/47921c5cdb77c8b3c4917d320099e734f11f0176", "message": "Checkstyle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-11-13T11:01:22Z", "type": "commit"}]}