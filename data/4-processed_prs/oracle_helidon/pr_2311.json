{"pr_number": 2311, "pr_title": "Helidon MP OIDC Security provider guide", "pr_createdAt": "2020-09-01T15:10:55Z", "pr_url": "https://github.com/oracle/helidon/pull/2311", "timeline": [{"oid": "83716fa13cd60b6775fbc6b55e543a613122aa55", "url": "https://github.com/oracle/helidon/commit/83716fa13cd60b6775fbc6b55e543a613122aa55", "message": "Helidon MP Security OIDC provider guide\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-09-01T15:01:18Z", "type": "commit"}, {"oid": "06536187a6113be1569b6ef8ae1ff99f203aebc2", "url": "https://github.com/oracle/helidon/commit/06536187a6113be1569b6ef8ae1ff99f203aebc2", "message": "Update Helidon MP : OIDC Security provider guide\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-09-15T09:22:04Z", "type": "commit"}, {"oid": "2e84dccf9cf0aea0b5e0842c75db728ce7843c89", "url": "https://github.com/oracle/helidon/commit/2e84dccf9cf0aea0b5e0842c75db728ce7843c89", "message": "Update Helidon MP : Miss click correction\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-09-22T07:56:52Z", "type": "commit"}, {"oid": "7e7ff11cc588da20801f499df85694969b26b9a0", "url": "https://github.com/oracle/helidon/commit/7e7ff11cc588da20801f499df85694969b26b9a0", "message": "Update Helidon MP : Update plan + link bullet list\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-09-25T07:21:02Z", "type": "commit"}, {"oid": "a80006c0e397c14d063f0d942228e1540ef06dca", "url": "https://github.com/oracle/helidon/commit/a80006c0e397c14d063f0d942228e1540ef06dca", "message": "Update Helidon MP : tests passing + roles validation\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-10-05T07:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNDM2NQ==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499534365", "bodyText": "As in case of SE guide. Realm name in URL should be myRealm", "author": "Verdent", "createdAt": "2020-10-05T11:39:28Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNzMxMA==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499537310", "bodyText": "as above myRealm", "author": "Verdent", "createdAt": "2020-10-05T11:45:07Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"\n+        identity-uri: \"http://localhost:8080/auth/realms/myrealm\"   // <2>", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNzcwMw==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499537703", "bodyText": "Available after client is saved/created", "author": "Verdent", "createdAt": "2020-10-05T11:45:49Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0NzU5Mw==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499647593", "bodyText": "missing port in the URL", "author": "Verdent", "createdAt": "2020-10-05T14:37:25Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"\n+        identity-uri: \"http://localhost:8080/auth/realms/myrealm\"   // <2>\n+        frontend-uri: \"http://localhost:7987\"   // <3>\n+----\n+<1> `client-id` must be the same as the one configure in keycloak.\n+<2> `identity-uri` is used to redirect the user to keycloak.\n+<3> `frontend-uri` will direct you back to the application.\n+\n+The client secret is the one generate into Keycloak Client Credentials. It must be copy past into `client-id` variable\n+from application.yaml.\n+\n+Make sure keycloak and the application are not running on the same port.\n+The application port value can be changed into microprofile-config.properties.\n+\n+[source,properties]\n+.Change these properties to configure the server host and port\n+----\n+server.port=7987\n+server.host=localhost\n+----\n+\n+If the port 7987 is already used, check what port is free on your machine.\n+\n+[source,properties]\n+.Replace the old port into microprofile-config.properties\n+----\n+server.port=\"Your new port\"\n+----\n+\n+[source,yaml]\n+.Replace the old port into application.yaml\n+----\n+frontend-uri: \"http://localhost:Your new port\"\n+----\n+\n+==== Secure your application\n+\n+The `GreetResource` class is a JAX-RS resource available at the endpoint `/greet`. Use `@Authenticated` annotation to protect\n+any method or endpoint.\n+Modify the `getDefaultMessage` method with the `@Authenticated` to limit its access.\n+\n+[source,java]\n+.Add `@Authenticated` to secure `getDefaultMessage`\n+----\n+    @Authenticated\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public JsonObject getDefaultMessage() {\n+        return createResponse(\"World\");\n+    }\n+----\n+\n+When a client will send an HTTP GET request at the endpoint `http://localhost/greet`, he will be redirected to keycloak.", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2MjM2MA==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499662360", "bodyText": "Wouldn't this construct be nicer? :-)\nserver = Server.builder()\n                .config(Config.create())\n                .build()\n                .start();\nalso... where did the serverUrl initialization go? :-)", "author": "Verdent", "createdAt": "2020-10-05T14:56:48Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"\n+        identity-uri: \"http://localhost:8080/auth/realms/myrealm\"   // <2>\n+        frontend-uri: \"http://localhost:7987\"   // <3>\n+----\n+<1> `client-id` must be the same as the one configure in keycloak.\n+<2> `identity-uri` is used to redirect the user to keycloak.\n+<3> `frontend-uri` will direct you back to the application.\n+\n+The client secret is the one generate into Keycloak Client Credentials. It must be copy past into `client-id` variable\n+from application.yaml.\n+\n+Make sure keycloak and the application are not running on the same port.\n+The application port value can be changed into microprofile-config.properties.\n+\n+[source,properties]\n+.Change these properties to configure the server host and port\n+----\n+server.port=7987\n+server.host=localhost\n+----\n+\n+If the port 7987 is already used, check what port is free on your machine.\n+\n+[source,properties]\n+.Replace the old port into microprofile-config.properties\n+----\n+server.port=\"Your new port\"\n+----\n+\n+[source,yaml]\n+.Replace the old port into application.yaml\n+----\n+frontend-uri: \"http://localhost:Your new port\"\n+----\n+\n+==== Secure your application\n+\n+The `GreetResource` class is a JAX-RS resource available at the endpoint `/greet`. Use `@Authenticated` annotation to protect\n+any method or endpoint.\n+Modify the `getDefaultMessage` method with the `@Authenticated` to limit its access.\n+\n+[source,java]\n+.Add `@Authenticated` to secure `getDefaultMessage`\n+----\n+    @Authenticated\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public JsonObject getDefaultMessage() {\n+        return createResponse(\"World\");\n+    }\n+----\n+\n+When a client will send an HTTP GET request at the endpoint `http://localhost/greet`, he will be redirected to keycloak.\n+Keycloak will check if the client has the required authorisation to access this endpoint. If the client can log in successfully,\n+keycloak redirect it to the wished endpoint. If the client cannot log in, or the required access data are incomplete,\n+Keycloak refuses the access.\n+\n+==== Try it !\n+\n+Now, Helidon and Keycloak are correctly configured, and your application is safe.\n+\n+[source,bash]\n+.Build the application, skipping unit tests, then run it:\n+----\n+mvn package -DskipTests=true\n+java -jar target/helidon-quickstart-mp.jar\n+----\n+\n+The tests must be skipped, otherwise it produces test failure. As the `/greet` endpoint for GET request is\n+now protected, its access is limited, and the tests are not built to take oidc security in account.\n+\n+. Open your favourite browser and try to access `http://localhost:7987/greet/Michael`.\n+. You should not be redirected and receive greeting from the application.\n+. Enter the following into URL : `http://localhost:7987/greet`.\n+. Keycloak redirect you to its login page.\n+. Enter the username and associated password:\n+.. `Username` : `myUser`\n+.. `Password`: `password`\n+. After successful log in, keycloak redirect you to the `http://localhost:7987/greet` endpoint and print Hello word.\n+\n+From the actual settings, the user needs to log in only once, then Keycloak saves all the connection data.\n+\n+==== Update tests to the secure environment\n+\n+At this stage of the application, tests cannot pass because of OIDC security. The only way to authenticate a user is\n+through the front end of that server which can be accessed with the browser for example.\n+\n+In order to keep security and test the application locally, a new security provider must be provided. By adding specific\n+configuration to the test, it is possible to override the application configuration.\n+\n+The following explains how to set a basic authentication instead of oidc security provider only for the tests. Which means,\n+at the end of this guide, the application will be secured by oidc and the tests will use basic authentication.\n+\n+In the test folder `helidon-quickstart-mp/src/test`:\n+\n+[source,bash]\n+.Create a new directory and another one inside\n+----\n+mkdir resources\n+cd resources\n+touch application.yaml\n+----\n+\n+Open the application.yaml file you just created.\n+\n+[source,yaml]\n+.Copy these properties into the new application.yaml\n+----\n+app:\n+  greeting: \"Hello\"\n+\n+security:\n+  providers:\n+    - abac:\n+    - http-basic-auth:\n+        users:\n+          - login: \"jack\"\n+            password: \"jackIsGreat\"\n+  web-server:\n+    paths:\n+      - path: \"/greet\"\n+        methods: [\"get\"]\n+        authenticate: true\n+----\n+\n+By adding this new application.yaml, it will append the properties to the application.yaml located into `java/resources`.\n+The oidc properties are not overridden, and the server cannot decide which security provider to choose.\n+\n+Excluding oidc dependency during the test leaves only basic authentication security available for the tests.\n+\n+[source,xml]\n+.Add this plugin to the build\n+----\n+<plugin>\n+    <groupId>org.apache.maven.plugins</groupId>\n+    <artifactId>maven-surefire-plugin</artifactId>\n+    <configuration>\n+        <classpathDependencyExcludes>\n+            <classpathDependencyExclude>io.helidon.microprofile:helidon-microprofile-oidc</classpathDependencyExclude>\n+        </classpathDependencyExcludes>\n+    </configuration>\n+</plugin>\n+----\n+\n+In the `Maintest.java` file, tests need to be modified to check the application security when accessing `/greet` path with a\n+`GET` method.\n+\n+First step is to configure the server with the new application.yaml.\n+\n+[source,java]\n+.Replace the startTheServer method by this one:\n+----\n+@BeforeAll\n+    public static void startTheServer() {\n+        Server.Builder serverBuilder = Server.builder();\n+        serverBuilder.config(Config.create());\n+        server = serverBuilder.build().start();", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2MzExMg==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499663112", "bodyText": "MainTest.java", "author": "Verdent", "createdAt": "2020-10-05T14:57:48Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"\n+        identity-uri: \"http://localhost:8080/auth/realms/myrealm\"   // <2>\n+        frontend-uri: \"http://localhost:7987\"   // <3>\n+----\n+<1> `client-id` must be the same as the one configure in keycloak.\n+<2> `identity-uri` is used to redirect the user to keycloak.\n+<3> `frontend-uri` will direct you back to the application.\n+\n+The client secret is the one generate into Keycloak Client Credentials. It must be copy past into `client-id` variable\n+from application.yaml.\n+\n+Make sure keycloak and the application are not running on the same port.\n+The application port value can be changed into microprofile-config.properties.\n+\n+[source,properties]\n+.Change these properties to configure the server host and port\n+----\n+server.port=7987\n+server.host=localhost\n+----\n+\n+If the port 7987 is already used, check what port is free on your machine.\n+\n+[source,properties]\n+.Replace the old port into microprofile-config.properties\n+----\n+server.port=\"Your new port\"\n+----\n+\n+[source,yaml]\n+.Replace the old port into application.yaml\n+----\n+frontend-uri: \"http://localhost:Your new port\"\n+----\n+\n+==== Secure your application\n+\n+The `GreetResource` class is a JAX-RS resource available at the endpoint `/greet`. Use `@Authenticated` annotation to protect\n+any method or endpoint.\n+Modify the `getDefaultMessage` method with the `@Authenticated` to limit its access.\n+\n+[source,java]\n+.Add `@Authenticated` to secure `getDefaultMessage`\n+----\n+    @Authenticated\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public JsonObject getDefaultMessage() {\n+        return createResponse(\"World\");\n+    }\n+----\n+\n+When a client will send an HTTP GET request at the endpoint `http://localhost/greet`, he will be redirected to keycloak.\n+Keycloak will check if the client has the required authorisation to access this endpoint. If the client can log in successfully,\n+keycloak redirect it to the wished endpoint. If the client cannot log in, or the required access data are incomplete,\n+Keycloak refuses the access.\n+\n+==== Try it !\n+\n+Now, Helidon and Keycloak are correctly configured, and your application is safe.\n+\n+[source,bash]\n+.Build the application, skipping unit tests, then run it:\n+----\n+mvn package -DskipTests=true\n+java -jar target/helidon-quickstart-mp.jar\n+----\n+\n+The tests must be skipped, otherwise it produces test failure. As the `/greet` endpoint for GET request is\n+now protected, its access is limited, and the tests are not built to take oidc security in account.\n+\n+. Open your favourite browser and try to access `http://localhost:7987/greet/Michael`.\n+. You should not be redirected and receive greeting from the application.\n+. Enter the following into URL : `http://localhost:7987/greet`.\n+. Keycloak redirect you to its login page.\n+. Enter the username and associated password:\n+.. `Username` : `myUser`\n+.. `Password`: `password`\n+. After successful log in, keycloak redirect you to the `http://localhost:7987/greet` endpoint and print Hello word.\n+\n+From the actual settings, the user needs to log in only once, then Keycloak saves all the connection data.\n+\n+==== Update tests to the secure environment\n+\n+At this stage of the application, tests cannot pass because of OIDC security. The only way to authenticate a user is\n+through the front end of that server which can be accessed with the browser for example.\n+\n+In order to keep security and test the application locally, a new security provider must be provided. By adding specific\n+configuration to the test, it is possible to override the application configuration.\n+\n+The following explains how to set a basic authentication instead of oidc security provider only for the tests. Which means,\n+at the end of this guide, the application will be secured by oidc and the tests will use basic authentication.\n+\n+In the test folder `helidon-quickstart-mp/src/test`:\n+\n+[source,bash]\n+.Create a new directory and another one inside\n+----\n+mkdir resources\n+cd resources\n+touch application.yaml\n+----\n+\n+Open the application.yaml file you just created.\n+\n+[source,yaml]\n+.Copy these properties into the new application.yaml\n+----\n+app:\n+  greeting: \"Hello\"\n+\n+security:\n+  providers:\n+    - abac:\n+    - http-basic-auth:\n+        users:\n+          - login: \"jack\"\n+            password: \"jackIsGreat\"\n+  web-server:\n+    paths:\n+      - path: \"/greet\"\n+        methods: [\"get\"]\n+        authenticate: true\n+----\n+\n+By adding this new application.yaml, it will append the properties to the application.yaml located into `java/resources`.\n+The oidc properties are not overridden, and the server cannot decide which security provider to choose.\n+\n+Excluding oidc dependency during the test leaves only basic authentication security available for the tests.\n+\n+[source,xml]\n+.Add this plugin to the build\n+----\n+<plugin>\n+    <groupId>org.apache.maven.plugins</groupId>\n+    <artifactId>maven-surefire-plugin</artifactId>\n+    <configuration>\n+        <classpathDependencyExcludes>\n+            <classpathDependencyExclude>io.helidon.microprofile:helidon-microprofile-oidc</classpathDependencyExclude>\n+        </classpathDependencyExcludes>\n+    </configuration>\n+</plugin>\n+----\n+\n+In the `Maintest.java` file, tests need to be modified to check the application security when accessing `/greet` path with a", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3NTMwMA==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499675300", "bodyText": "the same as above about this getConnectionString method", "author": "Verdent", "createdAt": "2020-10-05T15:14:39Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"\n+        identity-uri: \"http://localhost:8080/auth/realms/myrealm\"   // <2>\n+        frontend-uri: \"http://localhost:7987\"   // <3>\n+----\n+<1> `client-id` must be the same as the one configure in keycloak.\n+<2> `identity-uri` is used to redirect the user to keycloak.\n+<3> `frontend-uri` will direct you back to the application.\n+\n+The client secret is the one generate into Keycloak Client Credentials. It must be copy past into `client-id` variable\n+from application.yaml.\n+\n+Make sure keycloak and the application are not running on the same port.\n+The application port value can be changed into microprofile-config.properties.\n+\n+[source,properties]\n+.Change these properties to configure the server host and port\n+----\n+server.port=7987\n+server.host=localhost\n+----\n+\n+If the port 7987 is already used, check what port is free on your machine.\n+\n+[source,properties]\n+.Replace the old port into microprofile-config.properties\n+----\n+server.port=\"Your new port\"\n+----\n+\n+[source,yaml]\n+.Replace the old port into application.yaml\n+----\n+frontend-uri: \"http://localhost:Your new port\"\n+----\n+\n+==== Secure your application\n+\n+The `GreetResource` class is a JAX-RS resource available at the endpoint `/greet`. Use `@Authenticated` annotation to protect\n+any method or endpoint.\n+Modify the `getDefaultMessage` method with the `@Authenticated` to limit its access.\n+\n+[source,java]\n+.Add `@Authenticated` to secure `getDefaultMessage`\n+----\n+    @Authenticated\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public JsonObject getDefaultMessage() {\n+        return createResponse(\"World\");\n+    }\n+----\n+\n+When a client will send an HTTP GET request at the endpoint `http://localhost/greet`, he will be redirected to keycloak.\n+Keycloak will check if the client has the required authorisation to access this endpoint. If the client can log in successfully,\n+keycloak redirect it to the wished endpoint. If the client cannot log in, or the required access data are incomplete,\n+Keycloak refuses the access.\n+\n+==== Try it !\n+\n+Now, Helidon and Keycloak are correctly configured, and your application is safe.\n+\n+[source,bash]\n+.Build the application, skipping unit tests, then run it:\n+----\n+mvn package -DskipTests=true\n+java -jar target/helidon-quickstart-mp.jar\n+----\n+\n+The tests must be skipped, otherwise it produces test failure. As the `/greet` endpoint for GET request is\n+now protected, its access is limited, and the tests are not built to take oidc security in account.\n+\n+. Open your favourite browser and try to access `http://localhost:7987/greet/Michael`.\n+. You should not be redirected and receive greeting from the application.\n+. Enter the following into URL : `http://localhost:7987/greet`.\n+. Keycloak redirect you to its login page.\n+. Enter the username and associated password:\n+.. `Username` : `myUser`\n+.. `Password`: `password`\n+. After successful log in, keycloak redirect you to the `http://localhost:7987/greet` endpoint and print Hello word.\n+\n+From the actual settings, the user needs to log in only once, then Keycloak saves all the connection data.\n+\n+==== Update tests to the secure environment\n+\n+At this stage of the application, tests cannot pass because of OIDC security. The only way to authenticate a user is\n+through the front end of that server which can be accessed with the browser for example.\n+\n+In order to keep security and test the application locally, a new security provider must be provided. By adding specific\n+configuration to the test, it is possible to override the application configuration.\n+\n+The following explains how to set a basic authentication instead of oidc security provider only for the tests. Which means,\n+at the end of this guide, the application will be secured by oidc and the tests will use basic authentication.\n+\n+In the test folder `helidon-quickstart-mp/src/test`:\n+\n+[source,bash]\n+.Create a new directory and another one inside\n+----\n+mkdir resources\n+cd resources\n+touch application.yaml\n+----\n+\n+Open the application.yaml file you just created.\n+\n+[source,yaml]\n+.Copy these properties into the new application.yaml\n+----\n+app:\n+  greeting: \"Hello\"\n+\n+security:\n+  providers:\n+    - abac:\n+    - http-basic-auth:\n+        users:\n+          - login: \"jack\"\n+            password: \"jackIsGreat\"\n+  web-server:\n+    paths:\n+      - path: \"/greet\"\n+        methods: [\"get\"]\n+        authenticate: true\n+----\n+\n+By adding this new application.yaml, it will append the properties to the application.yaml located into `java/resources`.\n+The oidc properties are not overridden, and the server cannot decide which security provider to choose.\n+\n+Excluding oidc dependency during the test leaves only basic authentication security available for the tests.\n+\n+[source,xml]\n+.Add this plugin to the build\n+----\n+<plugin>\n+    <groupId>org.apache.maven.plugins</groupId>\n+    <artifactId>maven-surefire-plugin</artifactId>\n+    <configuration>\n+        <classpathDependencyExcludes>\n+            <classpathDependencyExclude>io.helidon.microprofile:helidon-microprofile-oidc</classpathDependencyExclude>\n+        </classpathDependencyExcludes>\n+    </configuration>\n+</plugin>\n+----\n+\n+In the `Maintest.java` file, tests need to be modified to check the application security when accessing `/greet` path with a\n+`GET` method.\n+\n+First step is to configure the server with the new application.yaml.\n+\n+[source,java]\n+.Replace the startTheServer method by this one:\n+----\n+@BeforeAll\n+    public static void startTheServer() {\n+        Server.Builder serverBuilder = Server.builder();\n+        serverBuilder.config(Config.create());\n+        server = serverBuilder.build().start();\n+    }\n+----\n+\n+The server has now one security provider, basic authentication configured.\n+Next step is to modify the test to check that the application is correctly protected.\n+\n+[source,java]\n+.Replace the first webclient call by this one:\n+----\n+Response response = client\n+        .target(getConnectionString(\"/greet\"))\n+        .request()\n+        .get(Response.class);\n+\n+Assertions.assertEquals(401, response.getStatus());\n+----\n+\n+This piece of code uses the webclient to access the application on `/greet` path with a `GET` method. The http basic\n+authentication security provider protects this path, so the client should receive an HTTP 401 code for unauthorized.\n+\n+Only `jack` user has access to this part of the application.\n+\n+[source,java]\n+.Add new check to the testHelloWorld method:\n+----\n+String encoding = Base64.getEncoder().encodeToString(\"jack:jackIsGreat\".getBytes());\n+\n+JsonObject jsonObject = client\n+        .target(getConnectionString(\"/greet\"))", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4Mzk4Nw==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499683987", "bodyText": "This is not needed since you have @ Authenticated already present", "author": "Verdent", "createdAt": "2020-10-05T15:27:06Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"\n+        identity-uri: \"http://localhost:8080/auth/realms/myrealm\"   // <2>\n+        frontend-uri: \"http://localhost:7987\"   // <3>\n+----\n+<1> `client-id` must be the same as the one configure in keycloak.\n+<2> `identity-uri` is used to redirect the user to keycloak.\n+<3> `frontend-uri` will direct you back to the application.\n+\n+The client secret is the one generate into Keycloak Client Credentials. It must be copy past into `client-id` variable\n+from application.yaml.\n+\n+Make sure keycloak and the application are not running on the same port.\n+The application port value can be changed into microprofile-config.properties.\n+\n+[source,properties]\n+.Change these properties to configure the server host and port\n+----\n+server.port=7987\n+server.host=localhost\n+----\n+\n+If the port 7987 is already used, check what port is free on your machine.\n+\n+[source,properties]\n+.Replace the old port into microprofile-config.properties\n+----\n+server.port=\"Your new port\"\n+----\n+\n+[source,yaml]\n+.Replace the old port into application.yaml\n+----\n+frontend-uri: \"http://localhost:Your new port\"\n+----\n+\n+==== Secure your application\n+\n+The `GreetResource` class is a JAX-RS resource available at the endpoint `/greet`. Use `@Authenticated` annotation to protect\n+any method or endpoint.\n+Modify the `getDefaultMessage` method with the `@Authenticated` to limit its access.\n+\n+[source,java]\n+.Add `@Authenticated` to secure `getDefaultMessage`\n+----\n+    @Authenticated\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public JsonObject getDefaultMessage() {\n+        return createResponse(\"World\");\n+    }\n+----\n+\n+When a client will send an HTTP GET request at the endpoint `http://localhost/greet`, he will be redirected to keycloak.\n+Keycloak will check if the client has the required authorisation to access this endpoint. If the client can log in successfully,\n+keycloak redirect it to the wished endpoint. If the client cannot log in, or the required access data are incomplete,\n+Keycloak refuses the access.\n+\n+==== Try it !\n+\n+Now, Helidon and Keycloak are correctly configured, and your application is safe.\n+\n+[source,bash]\n+.Build the application, skipping unit tests, then run it:\n+----\n+mvn package -DskipTests=true\n+java -jar target/helidon-quickstart-mp.jar\n+----\n+\n+The tests must be skipped, otherwise it produces test failure. As the `/greet` endpoint for GET request is\n+now protected, its access is limited, and the tests are not built to take oidc security in account.\n+\n+. Open your favourite browser and try to access `http://localhost:7987/greet/Michael`.\n+. You should not be redirected and receive greeting from the application.\n+. Enter the following into URL : `http://localhost:7987/greet`.\n+. Keycloak redirect you to its login page.\n+. Enter the username and associated password:\n+.. `Username` : `myUser`\n+.. `Password`: `password`\n+. After successful log in, keycloak redirect you to the `http://localhost:7987/greet` endpoint and print Hello word.\n+\n+From the actual settings, the user needs to log in only once, then Keycloak saves all the connection data.\n+\n+==== Update tests to the secure environment\n+\n+At this stage of the application, tests cannot pass because of OIDC security. The only way to authenticate a user is\n+through the front end of that server which can be accessed with the browser for example.\n+\n+In order to keep security and test the application locally, a new security provider must be provided. By adding specific\n+configuration to the test, it is possible to override the application configuration.\n+\n+The following explains how to set a basic authentication instead of oidc security provider only for the tests. Which means,\n+at the end of this guide, the application will be secured by oidc and the tests will use basic authentication.\n+\n+In the test folder `helidon-quickstart-mp/src/test`:\n+\n+[source,bash]\n+.Create a new directory and another one inside\n+----\n+mkdir resources\n+cd resources\n+touch application.yaml\n+----\n+\n+Open the application.yaml file you just created.\n+\n+[source,yaml]\n+.Copy these properties into the new application.yaml\n+----\n+app:\n+  greeting: \"Hello\"\n+\n+security:\n+  providers:\n+    - abac:\n+    - http-basic-auth:\n+        users:\n+          - login: \"jack\"\n+            password: \"jackIsGreat\"\n+  web-server:\n+    paths:\n+      - path: \"/greet\"\n+        methods: [\"get\"]\n+        authenticate: true", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mjk1OQ==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499742959", "bodyText": "where did we get getConnectionString method?", "author": "Verdent", "createdAt": "2020-10-05T16:59:45Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"\n+        identity-uri: \"http://localhost:8080/auth/realms/myrealm\"   // <2>\n+        frontend-uri: \"http://localhost:7987\"   // <3>\n+----\n+<1> `client-id` must be the same as the one configure in keycloak.\n+<2> `identity-uri` is used to redirect the user to keycloak.\n+<3> `frontend-uri` will direct you back to the application.\n+\n+The client secret is the one generate into Keycloak Client Credentials. It must be copy past into `client-id` variable\n+from application.yaml.\n+\n+Make sure keycloak and the application are not running on the same port.\n+The application port value can be changed into microprofile-config.properties.\n+\n+[source,properties]\n+.Change these properties to configure the server host and port\n+----\n+server.port=7987\n+server.host=localhost\n+----\n+\n+If the port 7987 is already used, check what port is free on your machine.\n+\n+[source,properties]\n+.Replace the old port into microprofile-config.properties\n+----\n+server.port=\"Your new port\"\n+----\n+\n+[source,yaml]\n+.Replace the old port into application.yaml\n+----\n+frontend-uri: \"http://localhost:Your new port\"\n+----\n+\n+==== Secure your application\n+\n+The `GreetResource` class is a JAX-RS resource available at the endpoint `/greet`. Use `@Authenticated` annotation to protect\n+any method or endpoint.\n+Modify the `getDefaultMessage` method with the `@Authenticated` to limit its access.\n+\n+[source,java]\n+.Add `@Authenticated` to secure `getDefaultMessage`\n+----\n+    @Authenticated\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public JsonObject getDefaultMessage() {\n+        return createResponse(\"World\");\n+    }\n+----\n+\n+When a client will send an HTTP GET request at the endpoint `http://localhost/greet`, he will be redirected to keycloak.\n+Keycloak will check if the client has the required authorisation to access this endpoint. If the client can log in successfully,\n+keycloak redirect it to the wished endpoint. If the client cannot log in, or the required access data are incomplete,\n+Keycloak refuses the access.\n+\n+==== Try it !\n+\n+Now, Helidon and Keycloak are correctly configured, and your application is safe.\n+\n+[source,bash]\n+.Build the application, skipping unit tests, then run it:\n+----\n+mvn package -DskipTests=true\n+java -jar target/helidon-quickstart-mp.jar\n+----\n+\n+The tests must be skipped, otherwise it produces test failure. As the `/greet` endpoint for GET request is\n+now protected, its access is limited, and the tests are not built to take oidc security in account.\n+\n+. Open your favourite browser and try to access `http://localhost:7987/greet/Michael`.\n+. You should not be redirected and receive greeting from the application.\n+. Enter the following into URL : `http://localhost:7987/greet`.\n+. Keycloak redirect you to its login page.\n+. Enter the username and associated password:\n+.. `Username` : `myUser`\n+.. `Password`: `password`\n+. After successful log in, keycloak redirect you to the `http://localhost:7987/greet` endpoint and print Hello word.\n+\n+From the actual settings, the user needs to log in only once, then Keycloak saves all the connection data.\n+\n+==== Update tests to the secure environment\n+\n+At this stage of the application, tests cannot pass because of OIDC security. The only way to authenticate a user is\n+through the front end of that server which can be accessed with the browser for example.\n+\n+In order to keep security and test the application locally, a new security provider must be provided. By adding specific\n+configuration to the test, it is possible to override the application configuration.\n+\n+The following explains how to set a basic authentication instead of oidc security provider only for the tests. Which means,\n+at the end of this guide, the application will be secured by oidc and the tests will use basic authentication.\n+\n+In the test folder `helidon-quickstart-mp/src/test`:\n+\n+[source,bash]\n+.Create a new directory and another one inside\n+----\n+mkdir resources\n+cd resources\n+touch application.yaml\n+----\n+\n+Open the application.yaml file you just created.\n+\n+[source,yaml]\n+.Copy these properties into the new application.yaml\n+----\n+app:\n+  greeting: \"Hello\"\n+\n+security:\n+  providers:\n+    - abac:\n+    - http-basic-auth:\n+        users:\n+          - login: \"jack\"\n+            password: \"jackIsGreat\"\n+  web-server:\n+    paths:\n+      - path: \"/greet\"\n+        methods: [\"get\"]\n+        authenticate: true\n+----\n+\n+By adding this new application.yaml, it will append the properties to the application.yaml located into `java/resources`.\n+The oidc properties are not overridden, and the server cannot decide which security provider to choose.\n+\n+Excluding oidc dependency during the test leaves only basic authentication security available for the tests.\n+\n+[source,xml]\n+.Add this plugin to the build\n+----\n+<plugin>\n+    <groupId>org.apache.maven.plugins</groupId>\n+    <artifactId>maven-surefire-plugin</artifactId>\n+    <configuration>\n+        <classpathDependencyExcludes>\n+            <classpathDependencyExclude>io.helidon.microprofile:helidon-microprofile-oidc</classpathDependencyExclude>\n+        </classpathDependencyExcludes>\n+    </configuration>\n+</plugin>\n+----\n+\n+In the `Maintest.java` file, tests need to be modified to check the application security when accessing `/greet` path with a\n+`GET` method.\n+\n+First step is to configure the server with the new application.yaml.\n+\n+[source,java]\n+.Replace the startTheServer method by this one:\n+----\n+@BeforeAll\n+    public static void startTheServer() {\n+        Server.Builder serverBuilder = Server.builder();\n+        serverBuilder.config(Config.create());\n+        server = serverBuilder.build().start();\n+    }\n+----\n+\n+The server has now one security provider, basic authentication configured.\n+Next step is to modify the test to check that the application is correctly protected.\n+\n+[source,java]\n+.Replace the first webclient call by this one:\n+----\n+Response response = client\n+        .target(getConnectionString(\"/greet\"))", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2MjkwMA==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r503262900", "bodyText": "It is a private method from MainTest class to return application endpoint and append a path to it.", "author": "tvallin", "createdAt": "2020-10-12T12:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mjk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2Mzk5OQ==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499763999", "bodyText": "I think you should mention here, that they have to replace {helidon-version} with the version of Helidon they want to use.", "author": "Verdent", "createdAt": "2020-10-05T17:38:18Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTY2NQ==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499765665", "bodyText": "I think that calling it configuration instead of properties is better here since you are adding OIDC security provider configuration and you are adding those to helidon configuration file. And I might also suggest to add here some note where this application.yaml will be located.", "author": "Verdent", "createdAt": "2020-10-05T17:41:34Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NTgzNw==", "url": "https://github.com/oracle/helidon/pull/2311#discussion_r499765837", "bodyText": "I might suggest to add some note as in client-id etc. that user should insert that generated hash here.", "author": "Verdent", "createdAt": "2020-10-05T17:41:53Z", "path": "docs/mp/guides/05_security-oidc.adoc", "diffHunk": "@@ -0,0 +1,517 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon MP OIDC Security Provider\n+:h1Prefix: MP\n+:description: Helidon OIDC Security Provider guide\n+:keywords: helidon, security, guide, oidc, provider\n+\n+This guide describes how to set up Keycloak and Helidon\n+to secure an application with OIDC security provider.\n+\n+== What you need\n+\n+[width=50%,role=\"flex, sm7\"]\n+|===\n+|About 20 minutes\n+|<<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+* <<Keycloak Installation,Keycloak Installation>>\n+* <<Set up Keycloak,Set up Keycloak>>\n+* <<Set up Helidon,Set up Helidon>>\n+* <<Restrict access to a specific role,Restrict access to a specific role>>\n+\n+=== Keycloak Installation\n+\n+==== On Docker\n+\n+To install Keycloak with Docker, open a terminal and make sure the port 8080 is free.\n+\n+[source,bash]\n+.Enter the following command\n+----\n+docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:11.0.2\n+----\n+\n+This will start Keycloak on local port 8080. It will create the admin user with username `admin` and password `admin`\n+Feel free to modify 11.0.2 by any keycloak version of your wish.\n+If you are running docker behind a proxy server, make sure it is either configured into docker or\n+disable it. Otherwise, you might face a connection timeout because docker cannot download the required data.\n+\n+To verify that Keycloak is running correctly, go to the admin console : http://localhost:8080/auth/admin\n+Log in using the username and password mentioned above: `admin`.\n+\n+You should be logged in successfully, and it prompts the admin console.\n+\n+==== On JDK\n+\n+Download the last version of Keycloak from Keycloak website : https://www.keycloak.org/downloads\n+In the table Server choose Standalone server distribution. ZIP or Tar format are available, click on either\n+to download Keycloak.\n+\n+After extracting the archive file, you should have a directory named keycloak followed by the version. For example,\n+if you chose version 11.0.2, the folder must be named keycloak-11.0.2.\n+\n+Open keycloak folder to make it your current directory.\n+[source,bash]\n+.Run this command from command prompt to open the directory:\n+----\n+cd keycloak-11.0.2\n+----\n+\n+===== Start Keycloak\n+\n+To start keycloak and have it ready for further steps, run the following command.\n+\n+[source,bash]\n+.On Linux run:\n+----\n+bin/standalone.sh\n+----\n+\n+[source,bash]\n+.On Windows run:\n+----\n+bin/standalone.bat\n+----\n+\n+Keycloak runs on localhost:8080 by default.\n+\n+===== Create an admin user\n+\n+You need to create an admin user because it does not come by default when installing Keycloak.\n+To do this, open  http://localhost:8080/auth in your favorite browser.\n+\n+A window `Welcome to Keycloak` should be prompted. If not, check if any error appear in the terminal.\n+\n+Fill the form by adding Username and Password. Click on `Create` to create the admin user.\n+\n+Above Administration Console should be printed \"User created\" in a green rectangle.\n+\n+To check that the admin user was created correctly, click on Administration user which should redirect you\n+to a Login form. Enter the Username and Password created earlier to log in.\n+\n+After successfully logged in, the admin console is prompted.\n+\n+=== Set up Keycloak\n+\n+To set up Keycloak properly, go to the admin console: http://localhost:8080/auth/admin\n+\n+If you are using Docker, use Username `admin` and password `admin` as it is the default admin user.\n+Otherwise, use the username and password you used to create the admin user.\n+\n+==== Create a realm\n+\n+A realm is the place where groups of applications, and their environment, can be created. It gathers :\n+\n+- One or several applications\n+- One or several users\n+- Sessions\n+- Events\n+- Clients and their scopes\n+\n+By default, there is a realm called `Master`. It is used to manage Keycloak. It is not recommended to associate your\n+application with this realm as it could disturb Keycloak functioning.\n+\n+To create a new realm to manage your application:\n+\n+. Open Keycloak admin console http://localhost:8080/auth/admin.\n+. Hover the mouse over the dropdown in the top-left corner where it says `Master`, and press `Add realm`.\n+. Fill the form by adding the realm name, `myRealm` for example.\n+. Click on `Create` to create the new realm.\n+\n+To verify that your realm is created, on the top-left corner where it said `Master` previously\n+should be now your realm name or `myRealm` is you followed the example.\n+\n+To switch from a realm to another, hover the realm name, and the other realm created appear in the dropdown.\n+Click on any realm name to change the current realm. Make sure all configuration or modification are saved before changing\n+the current realm or be subject to lose your configuration.\n+\n+==== Create a user\n+\n+Initially there are no users in a new realm. An unlimited number of user can be created per realm.\n+A realm contains resources such as client which can be accessed by users.\n+\n+To create a new user:\n+\n+. Open the Keycloak admin console: http://localhost:8080/auth/admin\n+. Click on `Users` in the left menu\n+. Press `Add user`\n+. Fill the form (Username is the only mendatory field) with this value Username: `myUser`\n+. Click `Save`\n+\n+A new user is just created but it needs a password to be able to login. To initialize it, do this:\n+\n+. Click on `Credentials` at the top of the page, under `Myuser`.\n+. Fill `Password` and `Password confirmation` with the user password of your choice.\n+. If the `Temporary` field is set to `ON`, the user has to  update password on next login. Click `ON`\n+to make it `OFF` and prevent it.\n+. Press `Set Password`.\n+. A pop-up window is popping off. Click on `Set Password` to confirm the new password.\n+\n+To verify that the new user is created correctly:\n+\n+. Open the Keycloak account console: http://localhost:8080/auth/realms/myrealm/account.\n+. Login with `myuser` and password chosen earlier.\n+\n+You should now be logged-in to the account console where users can manage their accounts.\n+\n+==== Create a Client\n+\n+To create your first client:\n+\n+. Navigate to the left menu, into configure section, click on `Clients`. This window displays a table with every client\n+from the realm.\n+. Click on `Create`\n+. Fill the following:\n+. `Client ID` : `myClientID`.\n+.. `Client Protocol` : `openid-connect`\n+.. `Access type` : `confidential`\n+.. `Valid Redirect URIs` : `http://localhost:7987/*`\n+. Press `Save`\n+\n+A new tab named `Credentials` is created. Click on it to access this new tab.\n+\n+- `Client Authenticator` : `Client ID and Secret`\n+- Click on `generate secret` to generate client secret.\n+\n+Keycloak is now configured and ready. Keep keycloak running on your terminal and open a new tab to\n+set up Helidon.\n+\n+=== Set up Helidon\n+\n+Use the Helidon MP Maven archetype to create a simple project. It will be used as an example\n+to show how to set up Helidon.\n+\n+[source,bash,subs=\"attributes+\"]\n+.Run the Maven archetype\n+----\n+mvn -U archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-mp \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-mp \\\n+    -Dpackage=io.helidon.examples.quickstart.mp\n+----\n+\n+[source,bash]\n+.The project will be built and run from the helidon-quickstart-mp directory:\n+----\n+cd helidon-quickstart-mp\n+----\n+\n+==== Update project dependencies\n+\n+Update the pom.xml file and add the following Helidon dependency to the `<dependencies>` section.\n+\n+[source,xml]\n+.Add the following dependency to `pom.xml`:\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile</groupId>\n+    <artifactId>helidon-microprofile-oidc</artifactId>\n+</dependency>\n+----\n+\n+==== Add OIDC security properties\n+\n+The OIDC security provider properties can be joined to helidon property file.\n+So it can be easily used to configure the web server without modifying application code.\n+\n+[source,yaml]\n+.Create application.yaml file and add the following line\n+----\n+security:\n+  providers:\n+    - abac:\n+      # Adds ABAC Provider - it does not require any configuration\n+    - oidc:\n+        redirect-uri: \"/oidc/redirect/*\"\n+        audience: \"account\"\n+        client-id: \"myClientID\"   // <1>\n+        client-secret: \"Client secret generated into Keycloak client credential\"", "originalCommit": "a80006c0e397c14d063f0d942228e1540ef06dca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51dbe50489195256838d49d8267252d3119d284d", "url": "https://github.com/oracle/helidon/commit/51dbe50489195256838d49d8267252d3119d284d", "message": "Update Helidon MP : Modification Verdent review\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-10-12T10:13:38Z", "type": "commit"}, {"oid": "105b78366a59cec8ed73a7ff372e636033469597", "url": "https://github.com/oracle/helidon/commit/105b78366a59cec8ed73a7ff372e636033469597", "message": "Update Helidon MP : Check up from beginning\n\nSigned-off-by: tvallin <thibault.vallin@oracle.com>", "committedDate": "2020-10-22T12:48:04Z", "type": "commit"}]}