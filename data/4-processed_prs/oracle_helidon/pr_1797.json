{"pr_number": 1797, "pr_title": "New application types (templates) for the CLI", "pr_createdAt": "2020-05-14T15:06:59Z", "pr_url": "https://github.com/oracle/helidon/pull/1797", "timeline": [{"oid": "0095db768980365a5c6541573f2e05685422f932", "url": "https://github.com/oracle/helidon/commit/0095db768980365a5c6541573f2e05685422f932", "message": "New application types (templates) for the CLI. New templates can be added following the same structure and naming convention that is part of the contract in with the CLI's init command.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-05-14T15:05:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3MzI4OA==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425273288", "bodyText": "Can you remove this file? This should be generated by the plugin.", "author": "romain-grecourt", "createdAt": "2020-05-14T16:30:47Z", "path": "apptypes/mp/basic/src/main/resources/META-INF/helidon-archetype-resources.txt", "diffHunk": "@@ -0,0 +1,8 @@\n+pom.xml.mustache", "originalCommit": "0095db768980365a5c6541573f2e05685422f932", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NTgwNg==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425275806", "bodyText": "This should not be ${project.version}. This should be moved in the parent pom as plugin with extension=true and use the build-tools version property.", "author": "romain-grecourt", "createdAt": "2020-05-14T16:34:43Z", "path": "apptypes/mp/basic/pom.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.apptypes</groupId>\n+        <artifactId>helidon-apptypes-mp</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>helidon-apptypes-mp-basic</artifactId>\n+    <name>Helidon Template Application MP basic</name>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>\n+\n+    <build>\n+        <extensions>\n+            <extension>\n+                <groupId>io.helidon.build-tools.archetype</groupId>\n+                <artifactId>helidon-archetype-maven-plugin</artifactId>\n+                <version>${project.version}</version>", "originalCommit": "0095db768980365a5c6541573f2e05685422f932", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNjg4OA==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425316888", "bodyText": "Right, not the correct version. Will fix.", "author": "spericas", "createdAt": "2020-05-14T17:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NTgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3Nzg3MA==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425277870", "bodyText": "Same comment as above, this should be moved to the parent pom and use the build-tools version property.", "author": "romain-grecourt", "createdAt": "2020-05-14T16:37:55Z", "path": "apptypes/se/basic/pom.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.apptypes</groupId>\n+        <artifactId>helidon-apptypes-se</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>helidon-apptypes-se-basic</artifactId>\n+    <name>Helidon Template Application SE basic</name>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    </properties>\n+\n+    <build>", "originalCommit": "0095db768980365a5c6541573f2e05685422f932", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3ODAyMQ==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425278021", "bodyText": "Same comment as above, this should be generated by the maven plugin.", "author": "romain-grecourt", "createdAt": "2020-05-14T16:38:10Z", "path": "apptypes/se/basic/src/main/resources/META-INF/helidon-archetype-resources.txt", "diffHunk": "@@ -0,0 +1,8 @@\n+pom.xml.mustache", "originalCommit": "0095db768980365a5c6541573f2e05685422f932", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a15574e5528f87c25f0726a06070854104f42387", "url": "https://github.com/oracle/helidon/commit/a15574e5528f87c25f0726a06070854104f42387", "message": "Moved apptypes to archetypes and removed bare archetype. Cleaned up poms.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-05-14T19:26:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4ODY4NA==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425888684", "bodyText": "This annotation is no longer required.", "author": "tomas-langer", "createdAt": "2020-05-15T15:43:58Z", "path": "archetypes/mp/basic/src/main/resources/src/main/java/__pkg__/GreetResource.java.mustache", "diffHunk": "@@ -0,0 +1,52 @@\n+\n+package {{package}};\n+\n+import java.util.Collections;\n+\n+import javax.enterprise.context.RequestScoped;\n+import javax.inject.Inject;\n+import javax.json.Json;\n+import javax.json.JsonBuilderFactory;\n+import javax.json.JsonObject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+/**\n+ * A simple JAX-RS resource to greet you. Examples:\n+ *\n+ * Get default greeting message:\n+ * curl -X GET http://localhost:8080/greet\n+ *\n+ * The message is returned as a JSON object.\n+ */\n+@Path(\"/greet\")\n+@RequestScoped", "originalCommit": "a15574e5528f87c25f0726a06070854104f42387", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4ODk1Mw==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425888953", "bodyText": "Please remove these @SuppressWarnings annotations. They are not relevant.", "author": "tomas-langer", "createdAt": "2020-05-15T15:44:27Z", "path": "archetypes/mp/basic/src/main/resources/src/main/java/__pkg__/GreetResource.java.mustache", "diffHunk": "@@ -0,0 +1,52 @@\n+\n+package {{package}};\n+\n+import java.util.Collections;\n+\n+import javax.enterprise.context.RequestScoped;\n+import javax.inject.Inject;\n+import javax.json.Json;\n+import javax.json.JsonBuilderFactory;\n+import javax.json.JsonObject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+/**\n+ * A simple JAX-RS resource to greet you. Examples:\n+ *\n+ * Get default greeting message:\n+ * curl -X GET http://localhost:8080/greet\n+ *\n+ * The message is returned as a JSON object.\n+ */\n+@Path(\"/greet\")\n+@RequestScoped\n+public class GreetResource {\n+    private static final JsonBuilderFactory JSON = Json.createBuilderFactory(Collections.emptyMap());\n+\n+    private final String message;\n+\n+    @Inject\n+    public GreetResource(@ConfigProperty(name = \"app.greeting\") String message) {\n+        this.message = message;\n+    }\n+\n+    /**\n+     * Return a wordly greeting message.\n+     *\n+     * @return {@link JsonObject}\n+     */\n+    @SuppressWarnings(\"checkstyle:designforextension\")", "originalCommit": "a15574e5528f87c25f0726a06070854104f42387", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MDg4Nw==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425890887", "bodyText": "Please stop using this bundle.\nI think it is confusing - it just adds support for JSON-P.", "author": "tomas-langer", "createdAt": "2020-05-15T15:47:45Z", "path": "archetypes/se/basic/src/main/resources/pom.xml.mustache", "diffHunk": "@@ -7,36 +6,26 @@\n     <parent>\n         <groupId>io.helidon.applications</groupId>\n         <artifactId>helidon-se</artifactId>\n-        <version>@project.version@</version>\n-        <relativePath/>\n+        <version>{{helidonVersion}}</version>\n     </parent>\n-    <groupId>${groupId}</groupId>\n-    <artifactId>${artifactId}</artifactId>\n-    <version>${version}</version>\n-    <name>${artifactId}</name>\n+    <groupId>{{groupId}}</groupId>\n+    <artifactId>{{artifactId}}</artifactId>\n+    <version>{{version}}</version>\n+    <name>{{name}}</name>\n \n     <properties>\n-        <mainClass>${package}.Main</mainClass>\n+        <mainClass>{{package}}.Main</mainClass>\n     </properties>\n \n     <dependencies>\n         <dependency>\n-            <groupId>io.helidon.webserver</groupId>\n-            <artifactId>helidon-webserver</artifactId>\n+            <groupId>io.helidon.bundles</groupId>", "originalCommit": "a15574e5528f87c25f0726a06070854104f42387", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MTQ4Ng==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425891486", "bodyText": "This is now deprecated. Please switch to new API (as was in old template in master).", "author": "tomas-langer", "createdAt": "2020-05-15T15:48:51Z", "path": "archetypes/se/basic/src/main/resources/src/main/java/__pkg__/Main.java.mustache", "diffHunk": "@@ -49,83 +40,58 @@ public final class Main {\n      * @throws IOException if there are problems reading logging properties\n      */\n     static WebServer startServer() throws IOException {\n-#if( $loggingConfig.matches(\"y|yes|true\") )\n         // load logging configuration\n         setupLogging();\n-#end\n \n-#if( $applicationYaml.matches(\"y|yes|true\") )\n         // By default this will pick up application.yaml from the classpath\n         Config config = Config.create();\n-#end\n-\n-        WebServer server = WebServer.builder()\n-#if( $applicationYaml.matches(\"y|yes|true\") )\n-            .routing(createRouting(config))\n-            .config(config.get(\"server\"))\n-#else\n-            .routing(createRouting())\n-#end\n-#if( $jsonSupport.matches(\"y|yes|true\") )\n-            .addMediaSupport(JsonpSupport.create())\n-#end\n-            .build();\n+\n+        // Get webserver config from the \"server\" section of application.yaml\n+        ServerConfiguration serverConfig =", "originalCommit": "a15574e5528f87c25f0726a06070854104f42387", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MTk0OA==", "url": "https://github.com/oracle/helidon/pull/1797#discussion_r425891948", "bodyText": "This is wrong place to register this.\nPlease switch to new media support\nShould be registered on Server.builder().addMediaSupport(JsonpSupport.create())", "author": "tomas-langer", "createdAt": "2020-05-15T15:49:40Z", "path": "archetypes/se/basic/src/main/resources/src/main/java/__pkg__/Main.java.mustache", "diffHunk": "@@ -49,83 +40,58 @@ public final class Main {\n      * @throws IOException if there are problems reading logging properties\n      */\n     static WebServer startServer() throws IOException {\n-#if( $loggingConfig.matches(\"y|yes|true\") )\n         // load logging configuration\n         setupLogging();\n-#end\n \n-#if( $applicationYaml.matches(\"y|yes|true\") )\n         // By default this will pick up application.yaml from the classpath\n         Config config = Config.create();\n-#end\n-\n-        WebServer server = WebServer.builder()\n-#if( $applicationYaml.matches(\"y|yes|true\") )\n-            .routing(createRouting(config))\n-            .config(config.get(\"server\"))\n-#else\n-            .routing(createRouting())\n-#end\n-#if( $jsonSupport.matches(\"y|yes|true\") )\n-            .addMediaSupport(JsonpSupport.create())\n-#end\n-            .build();\n+\n+        // Get webserver config from the \"server\" section of application.yaml\n+        ServerConfiguration serverConfig =\n+                ServerConfiguration.create(config.get(\"server\"));\n+\n+        WebServer server = WebServer.create(serverConfig, createRouting(config));\n \n         // Try to start the server. If successful, print some info and arrange to\n         // print a message at shutdown. If unsuccessful, print the exception.\n         server.start()\n-            .thenAccept(ws -> {\n-#if( $restService.matches(\"y|yes|true\") )\n-                System.out.println(\"WEB server is up! http://localhost:\" + ws.port() + \"${restServicePath}\");\n-#else\n-                System.out.println(\"WEB server is up! http://localhost:\" + ws.port());\n-#end\n-                ws.whenShutdown().thenRun(()\n-                    -> System.out.println(\"WEB server is DOWN. Good bye!\"));\n+                .thenAccept(ws -> {\n+                    System.out.println(\n+                            \"WEB server is up! http://localhost:\" + ws.port() + \"/greet\");\n+                    ws.whenShutdown().thenRun(()\n+                            -> System.out.println(\"WEB server is DOWN. Good bye!\"));\n                 })\n-            .exceptionally(t -> {\n-                System.err.println(\"Startup failed: \" + t.getMessage());\n-                t.printStackTrace(System.err);\n-                return null;\n-            });\n+                .exceptionally(t -> {\n+                    System.err.println(\"Startup failed: \" + t.getMessage());\n+                    t.printStackTrace(System.err);\n+                    return null;\n+                });\n \n         // Server threads are not daemon. No need to block. Just react.\n+\n         return server;\n     }\n \n     /**\n      * Creates new {@link Routing}.\n      *\n-     * @return configured routing\n+     * @return routing configured with JSON support, a health check, and a service\n      * @param config configuration of this server\n      */\n-#if( $applicationYaml.matches(\"y|yes|true\") )\n     private static Routing createRouting(Config config) {\n-#else\n-    private static Routing createRouting() {\n-#end\n-#if( $metricsSupport.matches(\"y|yes|true\") )\n         MetricsSupport metrics = MetricsSupport.create();\n-#end\n-#if( $healthSupport.matches(\"y|yes|true\") )\n+        GreetService greetService = new GreetService(config);\n         HealthSupport health = HealthSupport.builder()\n-                .add(HealthChecks.healthChecks())   // Adds a convenient set of checks\n+                .addLiveness(HealthChecks.healthChecks())   // Adds a convenient set of checks\n                 .build();\n-#end\n \n         return Routing.builder()\n-#if( $healthSupport.matches(\"y|yes|true\") )\n+                .register(JsonSupport.create())", "originalCommit": "a15574e5528f87c25f0726a06070854104f42387", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1f6c0098f565d038c4e2247bbe8e65b82b93061", "url": "https://github.com/oracle/helidon/commit/b1f6c0098f565d038c4e2247bbe8e65b82b93061", "message": "Updated basic template based on API changes.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-05-18T13:53:45Z", "type": "commit"}]}