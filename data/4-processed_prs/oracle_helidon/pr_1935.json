{"pr_number": 1935, "pr_title": "Mp config docs", "pr_createdAt": "2020-06-05T09:44:12Z", "pr_url": "https://github.com/oracle/helidon/pull/1935", "timeline": [{"oid": "0bcabb03e0b405d6af1e9611b6c0dea414a25227", "url": "https://github.com/oracle/helidon/commit/0bcabb03e0b405d6af1e9611b6c0dea414a25227", "message": "Docs for MP Config", "committedDate": "2020-06-05T09:02:04Z", "type": "commit"}, {"oid": "069df20c85311857158270434f5bc225dc47c8ec", "url": "https://github.com/oracle/helidon/commit/069df20c85311857158270434f5bc225dc47c8ec", "message": "Updated the MP docs", "committedDate": "2020-06-05T09:02:04Z", "type": "commit"}, {"oid": "296914db81480d9a8309d84dcd6919fca0c41236", "url": "https://github.com/oracle/helidon/commit/296914db81480d9a8309d84dcd6919fca0c41236", "message": "Added info based on review", "committedDate": "2020-06-05T09:02:04Z", "type": "commit"}, {"oid": "1fa220c2afed9e6bc18f4082cd7da6ce40b02b64", "url": "https://github.com/oracle/helidon/commit/1fa220c2afed9e6bc18f4082cd7da6ce40b02b64", "message": "Updated MP Config documentation.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-05T09:42:50Z", "type": "commit"}, {"oid": "9bf787807624d5cfdf660f3ecce648ee7ca2066d", "url": "https://github.com/oracle/helidon/commit/9bf787807624d5cfdf660f3ecce648ee7ca2066d", "message": "Update 01_introduction.adoc\n\nadded h1prefix for MP", "committedDate": "2020-06-08T14:40:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MzMyOA==", "url": "https://github.com/oracle/helidon/pull/1935#discussion_r436763328", "bodyText": "Consider setting column values to tables to prevent scrolling [cols=\"3,5\"]", "author": "ljamen", "createdAt": "2020-06-08T14:44:05Z", "path": "docs/mp/config/01_introduction.adoc", "diffHunk": "@@ -43,29 +162,57 @@ Step-by-step guide about using {spec-name} in your Helidon MP application.\n --\n ====\n \n-== Using {spec-name} in Helidon MP applications\n+== Using MicroProfile Config Sources\n+\n+The following configuration sources can be used to retrieve the configuration:\n+", "originalCommit": "9bf787807624d5cfdf660f3ecce648ee7ca2066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2NDE2Mw==", "url": "https://github.com/oracle/helidon/pull/1935#discussion_r436764163", "bodyText": "[cols=\"3,5\"]", "author": "ljamen", "createdAt": "2020-06-08T14:45:14Z", "path": "docs/mp/config/02_MP_config_sources.adoc", "diffHunk": "@@ -0,0 +1,184 @@\n+///////////////////////////////////////////////////////////////////////////////\r\n+\r\n+    Copyright (c) 2020 Oracle and/or its affiliates.\r\n+\r\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+    you may not use this file except in compliance with the License.\r\n+    You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+    Unless required by applicable law or agreed to in writing, software\r\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+    See the License for the specific language governing permissions and\r\n+    limitations under the License.\r\n+\r\n+///////////////////////////////////////////////////////////////////////////////\r\n+\r\n+= Microprofile Config Sources\r\n+:pagename: MicroProfileSources\r\n+:description: MicroProfile Config Sources\r\n+:keywords: helidon, mp, ordinal, mpconfig, yamlmpconfig\r\n+\r\n+\r\n+A Config Source provides configuration values from different sources such as property files and user classes that are registered by the application.\r\n+\r\n+== Understanding the Ordering of Default Config Sources\r\n+\r\n+The default MicroProfile Config Sources are:\r\n+\r\n+* System properties (ordinal=400)\r\n+* Environment variables (ordinal=300)\r\n+* /META-INF/microprofile-config.properties (ordinal=100)\r\n+\r\n+Each Config Source has an ordinal that determines the priority of the Config Source.\r\n+A Config Source with higher ordinal has higher priority as compared to the Config Source with\r\n+lower ordinal. The values taken from the high-priority Config Source overrides the values\r\n+from low-priority Config Source.\r\n+\r\n+This helps to customize the configuration of Config Sources using external Config Source\r\n+if an external Config Source has higher ordinal values than the built-in Config Sources of the application.\r\n+\r\n+\r\n+== Creating Custom Config Sources\r\n+\r\n+Custom Config Sources are loaded using the Java Service Loader pattern, by implementing\r\n+either `org.eclipse.microprofile.config.spi.ConfigSource`,\r\n+or `org.eclipse.microprofile.config.spi.ConfigSourceProvider` SPI and registering\r\n+it as a service (Using `META-INF/services/${class-name}` file when using classpath, or\r\n+using the `provides` statement in `module-info.java` when using module path).\r\n+\r\n+The interface `org.eclipse.microprofile.config.spi.ConfigSource` requires implementation of the following methods:\r\n+\r\n+* `String getName()`\r\n+* `Map<String, String> getProperties()`\r\n+* `String getValue(String key)`\r\n+* `getOrdinal()`\r\n+\r\n+=== Example of a Custom Config Source\r\n+\r\n+[source,java]\r\n+----\r\n+public class CustomConfigSource implements ConfigSource {\r\n+    private static final String NAME = \"MyConfigSource\";\r\n+    private static final int ORDINAL = 200; // Default for MP is 100\r\n+    private static final Map<String, String> PROPERTIES = mapOf(\"app.greeting\", \"Hi\");\r\n+\r\n+\r\n+    @Override\r\n+    public String getName() {\r\n+        return NAME; <1>\r\n+    }\r\n+\r\n+    @Override\r\n+    public Map<String, String> getProperties() {\r\n+        return PROPERTIES; <2>\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getValue(String key) {\r\n+        return PROPERTIES.get(key); <3>\r\n+    }\r\n+\r\n+    @Override\r\n+    public int getOrdinal() {\r\n+        return ORDINAL; <4>\r\n+    }\r\n+}\r\n+----\r\n+\r\n+<1> Returns the name of the Config Source to use for logging or analysis of configured values.\r\n+<2> Returns the properties in this Config Source as a map.\r\n+<3> Returns the value of the requested key, or `null` if the key is not available\r\n+<4> Returns the ordinal of this Config Source.\r\n+\r\n+\r\n+== Creating MicroProfile Config Sources for Manual Setup of Config\r\n+\r\n+You can use the following methods to create MicroProfile Config Sources to manually set up the Config from `org.eclipse.microprofile.config.spi.ConfigProviderResolver#getBuilder()` on `io.helidon.config.mp.MpConfigSources` class:\r\n+\r", "originalCommit": "9bf787807624d5cfdf660f3ecce648ee7ca2066d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d9e32716016e434dce8a452138b4f03cb518bee", "url": "https://github.com/oracle/helidon/commit/3d9e32716016e434dce8a452138b4f03cb518bee", "message": "Review fix for tables.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-06-10T14:00:26Z", "type": "commit"}]}