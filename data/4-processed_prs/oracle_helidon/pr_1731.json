{"pr_number": 1731, "pr_title": "CORS SE doc", "pr_createdAt": "2020-05-05T21:21:11Z", "pr_url": "https://github.com/oracle/helidon/pull/1731", "timeline": [{"oid": "735b243577755cdbbf2a7bf77da175a2f757e61d", "url": "https://github.com/oracle/helidon/commit/735b243577755cdbbf2a7bf77da175a2f757e61d", "message": "Initial push of CORS SE doc", "committedDate": "2020-05-05T21:17:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyMTk2Mw==", "url": "https://github.com/oracle/helidon/pull/1731#discussion_r421821963", "bodyText": "Maybe  mention that you can control cors support via configuration and link to 02_configuration.adoc?", "author": "barchetta", "createdAt": "2020-05-07T22:05:32Z", "path": "docs/se/cors/01_introduction.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= CORS in SE\n+:toc:\n+:toc-placement: preamble\n+:pagename: cors-introduction\n+:description: Helidon SE CORS Support\n+:keywords: helidon, java, cors, se\n+:helidon-tag: https://github.com/oracle/helidon/tree/{helidon-version}\n+:quickstart-example: {helidon-tag}/examples/quickstarts/helidon-quickstart-se\n+:cors-spec: https://www.w3.org/TR/cors/\n+:helidon-se-cors-example: {helidon-tag}/examples/cors\n+:model-reader-java: {mp-openapi-prefix}/api/src/main/java/org/eclipse/microprofile/openapi/OASModelReader.java\n+:filter-java: {mp-openapi-prefix}/api/src/main/java/org/eclipse/microprofile/openapi/OASFilter.java\n+\n+Easily allow your Helidon SE application to support link:{cors-spec}[cross-origin resource sharing] (CORS).\n+\n+== Quick start\n+You add CORS support to your application by adding to its <<se/webserver/03_routing.adoc,web server routing set-up>>.\n+The following code shows how to prepare your application's routing to support metrics and health support as well as\n+CORS.\n+\n+[[intro-quick-start-code-example]]\n+[source,java]\n+----\n+\n+    private static Routing createRouting(Config config) {\n+\n+        MetricsSupport metrics = MetricsSupport.create();\n+        GreetService greetService = new GreetService(config);\n+        HealthSupport health = HealthSupport.builder()\n+                .addLiveness(HealthChecks.healthChecks())   // Adds a convenient set of checks\n+                .build();\n+        CorsSupport corsSupport = CorsSupport.builder()  // <1>\n+                .addCrossOriginSupport(CrossOriginSupport.builder() // <2>\n+                            .allowOrigins(\"http://foo.com\", \"http://there.com\") // <3>\n+                            .allowMethods(\"PUT\", \"DELETE\") // <4>\n+                            .build())\n+                .addCrossoriginSupport(CrossOriginSupport.create()) // <5>\n+                .build();\n+\n+        // Note: Add the CORS routing *before* registering the GreetService routing.\n+        return Routing.builder()\n+                .register(JsonSupport.create())\n+                .register(health)                   // Health at \"/health\"\n+                .register(metrics)                 // Metrics at \"/metrics\"\n+                .register(\"/greet\", corsSupport, greetService) // <6>\n+                .build();\n+    }\n+----\n+<1> Create a `CorsSupport` instance using its builder.\n+<2> Add a `CrossOriginSupport` instance (using _its_ builder) to constrain resource sharing.\n+<3> List the origins (sites) allowed to share resources from this app.\n+<4> List the HTTP methods the constraint applies to.\n+<5> Add a `CrossOriginSupport` instance that permits all sharing (the default).\n+<6> Register the new `CorsSupport` instance with -- but in front of -- the service which implements the business logic.\n+\n+These few additional lines allow the app to participate in CORS.\n+\n+== Maven coordinates\n+\n+The <<about/04_managing-dependencies.adoc, Getting Started>> page describes how you\n+should declare dependency management for Helidon applications. Then declare the following dependency in your project:\n+\n+[source,xml,subs=\"attributes+\"]\n+----\n+<dependency>\n+    <groupId>io.helidon.webserver</groupId>\n+    <artifactId>helidon-webserver-cors</artifactId>\n+</dependency>\n+----\n+\n+See the Helidon CORS support in action by building and running the CORS example link:{helidon-se-cors-example}[here].", "originalCommit": "735b243577755cdbbf2a7bf77da175a2f757e61d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1OTAwMQ==", "url": "https://github.com/oracle/helidon/pull/1731#discussion_r421859001", "bodyText": "Done", "author": "tjquinno", "createdAt": "2020-05-07T23:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyMTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyMjIwNA==", "url": "https://github.com/oracle/helidon/pull/1731#discussion_r421822204", "bodyText": "Typo: Exixts", "author": "barchetta", "createdAt": "2020-05-07T22:06:08Z", "path": "docs/se/cors/02_configuration.adoc", "diffHunk": "@@ -0,0 +1,128 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= CORS Configuration\n+:javadoc-base-url-api: {javadoc-base-url}?io/helidon/webserver/cors\n+:javadoc-base-url-webserver: {javadoc-base-url}?io/helidon/webserver\n+:pagename: cors-configuration\n+:description: Helidon CORS Configuration\n+:keywords: helidon, java, cors, configuration\n+\n+From your application retreive and use configuration to set up the app's CORS behavior.\n+\n+[[cors-configuration-formats]]\n+== CORS configuration formats\n+The support in Helidon for CORS configuration works with two closely-related formats. Each corresponds to a class\n+in the Helidon CORS library which holds CORS information.\n+\n+=== Basic cross-origin configuration\n+This is the basic building block of CORS information. The table lists the possible settings in a\n+single instance:\n+[[config-key-table]]\n+|===\n+| Config key | Default | Corresponding HTTP header\n+\n+| `allow-credentials` | `false` | `Access-Control-Allow-Credentials`\n+| `allow-headers` | `[\"*\"]` | `Access-Control-Allow-Headers`\n+| `allow-methods` | `[\"*\"]` | `Access-Control-Allow-Methods`\n+| `allow-origins` | `[\"*\"]` | `Access-Control-Allow-Origins`\n+| `expose-headers` | none | `Access-Control-Expose-Headers`\n+| `max-age` | 3600 | `Access-Control-Allow-Age`\n+| `enabled` | `true` | n/a\n+|===\n+\n+All except `enabled` correspond to HTTP headers which the CORS protocol uses.\n+\n+The following example, if loaded and used by the application, would limit cross-origin resource sharing for `PUT` and\n+`DELETE` operations to only `foo.com` and `there.com`:\n+\n+[source,hocon]\n+----\n+...\n+restrictive-cors:\n+  allow-origins: [\"http://foo.com\", \"http://there.com\"]\n+  allow-methods: [\"PUT\", \"DELETE\"]\n+...\n+----\n+\n+=== Mapped cross-origin configuration\n+In some cases, you or your users might want to configure CORS behavior based on URL path matching. The _mapped_\n+configuration format permits this:\n+\n+[source,hocon]\n+----\n+...\n+my-cors:\n+  paths:\n+    - path-prefix: /greeting <1>\n+      allow-origins: [\"http://foo.com\", \"http://there.com\", \"http://other.com\"]\n+      allow-methods: [\"PUT\", \"DELETE\"]\n+    - path-prefix: / <2>\n+      allow-methods: [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n+...\n+----\n+<1> Sets restrictions on CORS for the `/greeting` path.\n+<2> Permits sharing of resources at the top-level path with all origins (the default) for the indicated HTTP methods.\n+CORS would be denied to `PATCH` HTTP requests.\n+\n+Path expressions can be any expression accepted by the\n+link:{javadoc-base-url-webserver}/PathMatcher.html[`PathMatcher`] class.\n+\n+Arrange the entries in the order you want Helidon to check them. Usually this is from most specific to most general.\n+Helidon CORS support searches the cross-origin entries in the order you define them until it finds an entry that\n+matches an incoming request's path expression and HTTP method.\n+\n+You might want to avoid using mapped configuration to set up the _normal_ CORS behavior in your app, because you have to\n+make sure the paths are the same in the configuration and in the code that establishes routing for your application.\n+You _can_ use mapped configuration to your advantage if you want to allow your users to override the CORS behavior set up\n+in the application code. See the example below.\n+\n+== Using CORS configuration from the application\n+To use basic or mapped CORS configuration, you add logic to your application to load sections of configuration and\n+use the loaded config to build `CrossOriginConfig` instances. (The\n+<<se/cors/01_introduction.adoc#intro-quick-start-code-example,code example in the QuickStart introduction>> shows\n+this in practice.)\n+\n+The link:{javadoc-base-url-api}/CrossOriginConfig.Builder.html[`CrossOriginConfig.Builder`] class has methods that\n+correspond directly to each of the settings described in the <<config-key-table,earlier table>>. You can also create\n+a `CrossOriginConfig` instance directly from a config node.\n+\n+[source,java]\n+----\n+CorsSupport.Builder builder = CorsSupport.builder();\n+\n+Config config = Config.create(); // Created from the current config sources\n+\n+config.get(\"my-cors\") // <1>\n+    .ifExists(builder::mappedConfig);\n+\n+config.get(\"restrictive-cors\") // <2>\n+    .ifExixts(builder::config);", "originalCommit": "735b243577755cdbbf2a7bf77da175a2f757e61d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1OTA0MA==", "url": "https://github.com/oracle/helidon/pull/1731#discussion_r421859040", "bodyText": "Done", "author": "tjquinno", "createdAt": "2020-05-07T23:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyMjIwNA=="}], "type": "inlineReview"}, {"oid": "eef5920cd40608ae2e2619c61c6c1d2879bf836f", "url": "https://github.com/oracle/helidon/commit/eef5920cd40608ae2e2619c61c6c1d2879bf836f", "message": "Concurrent changes", "committedDate": "2020-05-07T22:54:23Z", "type": "commit"}, {"oid": "86e759035469ddc8b23c4e86df50c66cfae459eb", "url": "https://github.com/oracle/helidon/commit/86e759035469ddc8b23c4e86df50c66cfae459eb", "message": "Concurrent changes", "committedDate": "2020-05-07T23:40:47Z", "type": "commit"}, {"oid": "4026099cc210ed9edfa686a5fb8238cb1a623e76", "url": "https://github.com/oracle/helidon/commit/4026099cc210ed9edfa686a5fb8238cb1a623e76", "message": "Review comments", "committedDate": "2020-05-07T23:53:38Z", "type": "commit"}, {"oid": "bec7ca1ca0e8fb98a0326d697ac2b8a0fb7ba11e", "url": "https://github.com/oracle/helidon/commit/bec7ca1ca0e8fb98a0326d697ac2b8a0fb7ba11e", "message": "Add tags for sharing some content from MP doc", "committedDate": "2020-05-08T12:48:57Z", "type": "commit"}, {"oid": "2cffa9bbf775e5be4a0309cbabca0d994d0d8b12", "url": "https://github.com/oracle/helidon/commit/2cffa9bbf775e5be4a0309cbabca0d994d0d8b12", "message": "barb's edits to CORS docs", "committedDate": "2020-05-08T19:31:29Z", "type": "commit"}, {"oid": "aafce4f0d7a437aa094514f051187496db39f404", "url": "https://github.com/oracle/helidon/commit/aafce4f0d7a437aa094514f051187496db39f404", "message": "barb's second attempt to add comments", "committedDate": "2020-05-08T19:54:50Z", "type": "commit"}, {"oid": "870843adf0ab57497067f88448dce81f84572237", "url": "https://github.com/oracle/helidon/commit/870843adf0ab57497067f88448dce81f84572237", "message": "Fix links", "committedDate": "2020-05-08T20:37:40Z", "type": "commit"}]}