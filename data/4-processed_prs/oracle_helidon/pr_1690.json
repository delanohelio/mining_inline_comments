{"pr_number": 1690, "pr_title": "New implementation of PublisherInputStream that improves performance and fixes race conditions", "pr_createdAt": "2020-04-24T19:40:24Z", "pr_url": "https://github.com/oracle/helidon/pull/1690", "timeline": [{"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd", "url": "https://github.com/oracle/helidon/commit/20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd", "message": "New implementation of PublisherInputStream, now renamed to SubscriberInputStream as it really implements a subscriber not a publisher. This new implementation fixes a couple of important problems: (1) It implements the ability to read into byte arrays, not just one byte a time for better performance and (2) It changes the implementation to avoid a race condition when accessing the data chunks held in CompletableFuture's. The race condition resulted in certain tests to hang if a thread raced and updated the value of the old 'processed' variable.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-04-24T19:34:55Z", "type": "commit"}, {"oid": "8766804dabccf9883c26736e0e45f0b8ee4f2798", "url": "https://github.com/oracle/helidon/commit/8766804dabccf9883c26736e0e45f0b8ee4f2798", "message": "Created inner class to implement subscriber and renamed class to prevent confusion with other public APIs. Also renamed and re-formatted internal document describing implementation.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-04-27T14:26:00Z", "type": "commit"}, {"oid": "15c6069e09a12546dc276db2bb185ec5877f41c8", "url": "https://github.com/oracle/helidon/commit/15c6069e09a12546dc276db2bb185ec5877f41c8", "message": "Fixed copyright year.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>", "committedDate": "2020-04-27T15:36:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxNTYzNA==", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415615634", "bodyText": "SubscriberInputStream", "author": "danielkec", "createdAt": "2020-04-27T08:29:38Z", "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.", "originalCommit": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxODQwMg==", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415618402", "bodyText": "onSubscribe/onNext/onComplete/onError", "author": "danielkec", "createdAt": "2020-04-27T08:33:44Z", "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.\n+\n+## Implementation\n+\n+The input stream implementation is not thread-safe: concurrent accesses should not be \n+allowed, and even invocations of `read()` should be synchronized by out-of-band means for \n+any stream state updates to be visible across threads.\n+ \n+The following assumptions are made about the operation of the stream:\n+ \n+- `Subscription.request` is invoked only after one chunk has been consumed\n+- the number of chunks requested is always 1\n+- Publisher fully conforms to the Flow.Publisher in the reactive-streams specification with respect to:\n+  - total order of `onNext`/`onComplete`/`onError`", "originalCommit": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTUxMw==", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415671513", "bodyText": "request call to cancelled subscription is legal by the spec, it just has to be noop", "author": "danielkec", "createdAt": "2020-04-27T09:50:49Z", "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.\n+\n+## Implementation\n+\n+The input stream implementation is not thread-safe: concurrent accesses should not be \n+allowed, and even invocations of `read()` should be synchronized by out-of-band means for \n+any stream state updates to be visible across threads.\n+ \n+The following assumptions are made about the operation of the stream:\n+ \n+- `Subscription.request` is invoked only after one chunk has been consumed\n+- the number of chunks requested is always 1\n+- Publisher fully conforms to the Flow.Publisher in the reactive-streams specification with respect to:\n+  - total order of `onNext`/`onComplete`/`onError`\n+  - strictly heeding backpressure (not calling onNext until more chunks were requested)\n+  - relaxed ordering of calls to request - allows to request even after onComplete/onError", "originalCommit": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNzEyMA==", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r416037120", "bodyText": "at the time when that statement has been created there has been certain debate over the meaning of \"during\" in a certain rule, so this condition has been spelled out.", "author": "olotenko", "createdAt": "2020-04-27T18:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTUxMw=="}], "type": "inlineReview"}]}