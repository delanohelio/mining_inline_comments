{"pr_number": 1639, "pr_title": "Docs: Add custom runtime image guide, maven guide, gradle guide, refactored native image guide. ", "pr_createdAt": "2020-04-14T00:36:30Z", "pr_url": "https://github.com/oracle/helidon/pull/1639", "timeline": [{"oid": "3e0f686966dabe88212ebca303fcc8dc305b0c09", "url": "https://github.com/oracle/helidon/commit/3e0f686966dabe88212ebca303fcc8dc305b0c09", "message": "Add customer runtime image guide, refactored native image guide. Fixed some typos in webserver javadocs", "committedDate": "2020-04-14T00:30:00Z", "type": "commit"}, {"oid": "c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "url": "https://github.com/oracle/helidon/commit/c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "message": "Fix copyright", "committedDate": "2020-04-14T00:51:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDIyNw==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r408280227", "bodyText": "typo: mave -> maven", "author": "batsatt", "createdAt": "2020-04-14T16:40:27Z", "path": "docs/common/guides/jlink_image.adoc", "diffHunk": "@@ -0,0 +1,207 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Custom Runtime Images with `jlink`\n+\n+// :description: Helidon Custom Runtime Images\n+// :keywords: helidon, guide, jlink, image\n+// :helidon-uc-edition: MP-or-SE\n+// :helidon-lc-edition: mp-or-se\n+// :docker-image-size: some-number\n+// :docker-multi-stage-url: https://docs.docker.com/develop/develop-images/multistage-build/\n+\n+This guide describes how to build a custom runtime image for your Helidon application\n+using Helidon's support for the JDK's `jlink` tool.\n+\n+== Introduction\n+\n+JDK 9 introduced the https://docs.oracle.com/en/java/javase/11/tools/jlink.html[`jlink`]\n+command that supports assembling a set of modules and their dependencies into a custom\n+runtime image. The `helidon-mave-plugin` has support for easily creating a custom runtime image for your", "originalCommit": "c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMTcxNQ==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r409101715", "bodyText": "fixed", "author": "barchetta", "createdAt": "2020-04-15T20:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MDIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MTAxNw==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r408281017", "bodyText": "maybe \"as well as how to build it in a Docker image\" ?", "author": "batsatt", "createdAt": "2020-04-14T16:41:43Z", "path": "docs/common/guides/jlink_image.adoc", "diffHunk": "@@ -0,0 +1,207 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Custom Runtime Images with `jlink`\n+\n+// :description: Helidon Custom Runtime Images\n+// :keywords: helidon, guide, jlink, image\n+// :helidon-uc-edition: MP-or-SE\n+// :helidon-lc-edition: mp-or-se\n+// :docker-image-size: some-number\n+// :docker-multi-stage-url: https://docs.docker.com/develop/develop-images/multistage-build/\n+\n+This guide describes how to build a custom runtime image for your Helidon application\n+using Helidon's support for the JDK's `jlink` tool.\n+\n+== Introduction\n+\n+JDK 9 introduced the https://docs.oracle.com/en/java/javase/11/tools/jlink.html[`jlink`]\n+command that supports assembling a set of modules and their dependencies into a custom\n+runtime image. The `helidon-mave-plugin` has support for easily creating a custom runtime image for your\n+Helidon application resulting in a smaller, better performing runtime.\n+\n+In this guide you will learn how to build a custom runtime image locally on your machine,\n+as well as using Docker.", "originalCommit": "c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMzQ1OQ==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r409103459", "bodyText": "fixed", "author": "barchetta", "createdAt": "2020-04-15T20:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjI1Ng==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r408282256", "bodyText": "This might give the impression that we're going to use jlink directly; how about just java -version.", "author": "batsatt", "createdAt": "2020-04-14T16:43:36Z", "path": "docs/common/guides/jlink_image.adoc", "diffHunk": "@@ -0,0 +1,207 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Custom Runtime Images with `jlink`\n+\n+// :description: Helidon Custom Runtime Images\n+// :keywords: helidon, guide, jlink, image\n+// :helidon-uc-edition: MP-or-SE\n+// :helidon-lc-edition: mp-or-se\n+// :docker-image-size: some-number\n+// :docker-multi-stage-url: https://docs.docker.com/develop/develop-images/multistage-build/\n+\n+This guide describes how to build a custom runtime image for your Helidon application\n+using Helidon's support for the JDK's `jlink` tool.\n+\n+== Introduction\n+\n+JDK 9 introduced the https://docs.oracle.com/en/java/javase/11/tools/jlink.html[`jlink`]\n+command that supports assembling a set of modules and their dependencies into a custom\n+runtime image. The `helidon-mave-plugin` has support for easily creating a custom runtime image for your\n+Helidon application resulting in a smaller, better performing runtime.\n+\n+In this guide you will learn how to build a custom runtime image locally on your machine,\n+as well as using Docker.\n+\n+== What You Need\n+\n+|===\n+|About 10 minutes\n+| <<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+== Verify Java 11 or Newer\n+\n+[source,bash]\n+----\n+$JAVA_HOME/bin/jlink --version", "originalCommit": "c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMTgxMg==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r409101812", "bodyText": "fixed", "author": "barchetta", "createdAt": "2020-04-15T20:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MzIzNg==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r408283236", "bodyText": "typo: you -> you'd", "author": "batsatt", "createdAt": "2020-04-14T16:45:04Z", "path": "docs/common/guides/jlink_image.adoc", "diffHunk": "@@ -0,0 +1,207 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Custom Runtime Images with `jlink`\n+\n+// :description: Helidon Custom Runtime Images\n+// :keywords: helidon, guide, jlink, image\n+// :helidon-uc-edition: MP-or-SE\n+// :helidon-lc-edition: mp-or-se\n+// :docker-image-size: some-number\n+// :docker-multi-stage-url: https://docs.docker.com/develop/develop-images/multistage-build/\n+\n+This guide describes how to build a custom runtime image for your Helidon application\n+using Helidon's support for the JDK's `jlink` tool.\n+\n+== Introduction\n+\n+JDK 9 introduced the https://docs.oracle.com/en/java/javase/11/tools/jlink.html[`jlink`]\n+command that supports assembling a set of modules and their dependencies into a custom\n+runtime image. The `helidon-mave-plugin` has support for easily creating a custom runtime image for your\n+Helidon application resulting in a smaller, better performing runtime.\n+\n+In this guide you will learn how to build a custom runtime image locally on your machine,\n+as well as using Docker.\n+\n+== What You Need\n+\n+|===\n+|About 10 minutes\n+| <<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+== Verify Java 11 or Newer\n+\n+[source,bash]\n+----\n+$JAVA_HOME/bin/jlink --version\n+----\n+\n+== Generate The Project\n+\n+Generate the project using the Helidon {helidon-uc-edition} Quickstart Maven archetype.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+mvn archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-{helidon-lc-edition} \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-{helidon-lc-edition} \\\n+    -Dpackage=io.helidon.examples.quickstart.{helidon-lc-edition}\n+----\n+\n+The archetype generates a Maven project in your current directory\n+(for example, `helidon-quickstart-{helidon-lc-edition}`). Change into this directory and build.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+cd helidon-quickstart-{helidon-lc-edition}\n+mvn package\n+----\n+\n+At this point you can run the application using the JVM:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+java -jar target/helidon-quickstart-{helidon-lc-edition}.jar\n+----\n+\n+In another shell test an endpoint:\n+\n+[source,bash]\n+----\n+curl -X GET http://localhost:8080/greet\n+----\n+\n+The application should respond with `{\"message\":\"Hello World!\"}`\n+\n+Now stop the running application (by pressing Ctrl+C).\n+\n+For more information about the Quickstart application and other enpoints it supports see the\n+<<{helidon-lc-edition}/guides/02_quickstart.adoc,Helidon {helidon-uc-edition} quickstart Guide>>.\n+\n+== Building a Custom Runtime Image\n+\n+You can build a custom runtime image in 2 different ways:\n+\n+* Locally, on your desktop\n+* Using Docker\n+\n+=== Local build\n+\n+Build the custom runtime image using the jlink image profile:\n+\n+[source,bash]\n+----\n+mvn package -Pjlink-image\n+----\n+\n+[TIP]\n+This uses the `helidon-maven-plugin` to perform the custom image generation.\n+\n+After the build completes it will report some statistics about the build including\n+the reduction in image size.\n+\n+The `target/helidon-quickstart-{helidon-lc-edition}` directory is a self contained\n+custom image of your application. It contains your application, its runtime\n+dependencies and the JDK modules it depends on. You can start your application\n+using the provide\n+`start` script:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+./target/helidon-quickstart-{helidon-lc-edition}/bin/start\n+----\n+\n+=== Class Data Sharing (CDS) Archive\n+\n+Aslo included in the custom image is a Class Data Sharing (CDS) archive that\n+improves your application's startup performance and in-memory footprint.\n+You can learn more about Class Data Sharing in the\n+https://docs.oracle.com/en/java/javase/11/vm/class-data-sharing.html[JDK documentation].\n+\n+The CDS archive increases your image size to get these performance optimizations.\n+It can be of significant size (tens of MB). The size of the CDS archive is\n+reported at the end of the build output.\n+\n+If you rather have a smaller image size (with a slightly increased startup time) you", "originalCommit": "c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMTg4NA==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r409101884", "bodyText": "fixed", "author": "barchetta", "createdAt": "2020-04-15T20:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MzIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NTE0MQ==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r408285141", "bodyText": "I think it would also be worth showing passing script arguments, e.g. --test or --help just so it is clear how it is done, (and maybe that the port mappings isn't required).", "author": "batsatt", "createdAt": "2020-04-14T16:48:09Z", "path": "docs/common/guides/jlink_image.adoc", "diffHunk": "@@ -0,0 +1,207 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Custom Runtime Images with `jlink`\n+\n+// :description: Helidon Custom Runtime Images\n+// :keywords: helidon, guide, jlink, image\n+// :helidon-uc-edition: MP-or-SE\n+// :helidon-lc-edition: mp-or-se\n+// :docker-image-size: some-number\n+// :docker-multi-stage-url: https://docs.docker.com/develop/develop-images/multistage-build/\n+\n+This guide describes how to build a custom runtime image for your Helidon application\n+using Helidon's support for the JDK's `jlink` tool.\n+\n+== Introduction\n+\n+JDK 9 introduced the https://docs.oracle.com/en/java/javase/11/tools/jlink.html[`jlink`]\n+command that supports assembling a set of modules and their dependencies into a custom\n+runtime image. The `helidon-mave-plugin` has support for easily creating a custom runtime image for your\n+Helidon application resulting in a smaller, better performing runtime.\n+\n+In this guide you will learn how to build a custom runtime image locally on your machine,\n+as well as using Docker.\n+\n+== What You Need\n+\n+|===\n+|About 10 minutes\n+| <<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+== Verify Java 11 or Newer\n+\n+[source,bash]\n+----\n+$JAVA_HOME/bin/jlink --version\n+----\n+\n+== Generate The Project\n+\n+Generate the project using the Helidon {helidon-uc-edition} Quickstart Maven archetype.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+mvn archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-{helidon-lc-edition} \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-{helidon-lc-edition} \\\n+    -Dpackage=io.helidon.examples.quickstart.{helidon-lc-edition}\n+----\n+\n+The archetype generates a Maven project in your current directory\n+(for example, `helidon-quickstart-{helidon-lc-edition}`). Change into this directory and build.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+cd helidon-quickstart-{helidon-lc-edition}\n+mvn package\n+----\n+\n+At this point you can run the application using the JVM:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+java -jar target/helidon-quickstart-{helidon-lc-edition}.jar\n+----\n+\n+In another shell test an endpoint:\n+\n+[source,bash]\n+----\n+curl -X GET http://localhost:8080/greet\n+----\n+\n+The application should respond with `{\"message\":\"Hello World!\"}`\n+\n+Now stop the running application (by pressing Ctrl+C).\n+\n+For more information about the Quickstart application and other enpoints it supports see the\n+<<{helidon-lc-edition}/guides/02_quickstart.adoc,Helidon {helidon-uc-edition} quickstart Guide>>.\n+\n+== Building a Custom Runtime Image\n+\n+You can build a custom runtime image in 2 different ways:\n+\n+* Locally, on your desktop\n+* Using Docker\n+\n+=== Local build\n+\n+Build the custom runtime image using the jlink image profile:\n+\n+[source,bash]\n+----\n+mvn package -Pjlink-image\n+----\n+\n+[TIP]\n+This uses the `helidon-maven-plugin` to perform the custom image generation.\n+\n+After the build completes it will report some statistics about the build including\n+the reduction in image size.\n+\n+The `target/helidon-quickstart-{helidon-lc-edition}` directory is a self contained\n+custom image of your application. It contains your application, its runtime\n+dependencies and the JDK modules it depends on. You can start your application\n+using the provide\n+`start` script:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+./target/helidon-quickstart-{helidon-lc-edition}/bin/start\n+----\n+\n+=== Class Data Sharing (CDS) Archive\n+\n+Aslo included in the custom image is a Class Data Sharing (CDS) archive that\n+improves your application's startup performance and in-memory footprint.\n+You can learn more about Class Data Sharing in the\n+https://docs.oracle.com/en/java/javase/11/vm/class-data-sharing.html[JDK documentation].\n+\n+The CDS archive increases your image size to get these performance optimizations.\n+It can be of significant size (tens of MB). The size of the CDS archive is\n+reported at the end of the build output.\n+\n+If you rather have a smaller image size (with a slightly increased startup time) you\n+can skip the creation of the CDS archive by executing your build like this:\n+\n+[source,bash]\n+----\n+mvn package -Pjlink-image -Djlink.image.addClassDataSharingArchive=false\n+----\n+\n+For more information see the\n+https://github.com/oracle/helidon-build-tools/tree/master/helidon-maven-plugin[`helidon-maven-plugin` documentation].\n+\n+=== Multi-stage Docker build\n+\n+To build a Docker image with a custom Java runtime image use the jlink\n+Dockerfile included with the quickstart.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+docker build -t helidon-quickstart-{helidon-lc-edition}-jlink -f Dockerfile.jlink .\n+----\n+\n+[TIP]\n+This does a full build inside the Docker container. The first\n+time you run it, it will take a while because it is downloading all\n+of the Maven dependencies and caching them in a Docker layer.\n+Subsequent builds will be much faster as long as you don't change\n+the `pom.xml` file. If the pom is modified then the dependencies\n+will be re-downloaded.\n+\n+Start the application:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+docker run --rm -p 8080:8080 helidon-quickstart-{helidon-lc-edition}-jlink:latest\n+----\n+\n+You can exercise the application's endpoints as before.", "originalCommit": "c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NzA4NA==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r408287084", "bodyText": "Did you mean does include the CDS archive? If not, you should clarify that this isn't the image just built above.", "author": "batsatt", "createdAt": "2020-04-14T16:51:05Z", "path": "docs/common/guides/jlink_image.adoc", "diffHunk": "@@ -0,0 +1,207 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Custom Runtime Images with `jlink`\n+\n+// :description: Helidon Custom Runtime Images\n+// :keywords: helidon, guide, jlink, image\n+// :helidon-uc-edition: MP-or-SE\n+// :helidon-lc-edition: mp-or-se\n+// :docker-image-size: some-number\n+// :docker-multi-stage-url: https://docs.docker.com/develop/develop-images/multistage-build/\n+\n+This guide describes how to build a custom runtime image for your Helidon application\n+using Helidon's support for the JDK's `jlink` tool.\n+\n+== Introduction\n+\n+JDK 9 introduced the https://docs.oracle.com/en/java/javase/11/tools/jlink.html[`jlink`]\n+command that supports assembling a set of modules and their dependencies into a custom\n+runtime image. The `helidon-mave-plugin` has support for easily creating a custom runtime image for your\n+Helidon application resulting in a smaller, better performing runtime.\n+\n+In this guide you will learn how to build a custom runtime image locally on your machine,\n+as well as using Docker.\n+\n+== What You Need\n+\n+|===\n+|About 10 minutes\n+| <<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+== Verify Java 11 or Newer\n+\n+[source,bash]\n+----\n+$JAVA_HOME/bin/jlink --version\n+----\n+\n+== Generate The Project\n+\n+Generate the project using the Helidon {helidon-uc-edition} Quickstart Maven archetype.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+mvn archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-{helidon-lc-edition} \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-{helidon-lc-edition} \\\n+    -Dpackage=io.helidon.examples.quickstart.{helidon-lc-edition}\n+----\n+\n+The archetype generates a Maven project in your current directory\n+(for example, `helidon-quickstart-{helidon-lc-edition}`). Change into this directory and build.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+cd helidon-quickstart-{helidon-lc-edition}\n+mvn package\n+----\n+\n+At this point you can run the application using the JVM:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+java -jar target/helidon-quickstart-{helidon-lc-edition}.jar\n+----\n+\n+In another shell test an endpoint:\n+\n+[source,bash]\n+----\n+curl -X GET http://localhost:8080/greet\n+----\n+\n+The application should respond with `{\"message\":\"Hello World!\"}`\n+\n+Now stop the running application (by pressing Ctrl+C).\n+\n+For more information about the Quickstart application and other enpoints it supports see the\n+<<{helidon-lc-edition}/guides/02_quickstart.adoc,Helidon {helidon-uc-edition} quickstart Guide>>.\n+\n+== Building a Custom Runtime Image\n+\n+You can build a custom runtime image in 2 different ways:\n+\n+* Locally, on your desktop\n+* Using Docker\n+\n+=== Local build\n+\n+Build the custom runtime image using the jlink image profile:\n+\n+[source,bash]\n+----\n+mvn package -Pjlink-image\n+----\n+\n+[TIP]\n+This uses the `helidon-maven-plugin` to perform the custom image generation.\n+\n+After the build completes it will report some statistics about the build including\n+the reduction in image size.\n+\n+The `target/helidon-quickstart-{helidon-lc-edition}` directory is a self contained\n+custom image of your application. It contains your application, its runtime\n+dependencies and the JDK modules it depends on. You can start your application\n+using the provide\n+`start` script:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+./target/helidon-quickstart-{helidon-lc-edition}/bin/start\n+----\n+\n+=== Class Data Sharing (CDS) Archive\n+\n+Aslo included in the custom image is a Class Data Sharing (CDS) archive that\n+improves your application's startup performance and in-memory footprint.\n+You can learn more about Class Data Sharing in the\n+https://docs.oracle.com/en/java/javase/11/vm/class-data-sharing.html[JDK documentation].\n+\n+The CDS archive increases your image size to get these performance optimizations.\n+It can be of significant size (tens of MB). The size of the CDS archive is\n+reported at the end of the build output.\n+\n+If you rather have a smaller image size (with a slightly increased startup time) you\n+can skip the creation of the CDS archive by executing your build like this:\n+\n+[source,bash]\n+----\n+mvn package -Pjlink-image -Djlink.image.addClassDataSharingArchive=false\n+----\n+\n+For more information see the\n+https://github.com/oracle/helidon-build-tools/tree/master/helidon-maven-plugin[`helidon-maven-plugin` documentation].\n+\n+=== Multi-stage Docker build\n+\n+To build a Docker image with a custom Java runtime image use the jlink\n+Dockerfile included with the quickstart.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+docker build -t helidon-quickstart-{helidon-lc-edition}-jlink -f Dockerfile.jlink .\n+----\n+\n+[TIP]\n+This does a full build inside the Docker container. The first\n+time you run it, it will take a while because it is downloading all\n+of the Maven dependencies and caching them in a Docker layer.\n+Subsequent builds will be much faster as long as you don't change\n+the `pom.xml` file. If the pom is modified then the dependencies\n+will be re-downloaded.\n+\n+Start the application:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+docker run --rm -p 8080:8080 helidon-quickstart-{helidon-lc-edition}-jlink:latest\n+----\n+\n+You can exercise the application's endpoints as before.\n+\n+== How small is this?\n+\n+Let's take a look at the Docker image for a custom runtime that does\n+not include the CDS archive:", "originalCommit": "c7f85f5e8bad0084ad04b2db88c2d0c813a6b5a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMjk0NA==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r409102944", "bodyText": "I've removed the size/timing info from both the graalvm guide and custom image guide since they won't age well. I'm thinking that information is best left for blogs.", "author": "barchetta", "createdAt": "2020-04-15T20:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4NzA4NA=="}], "type": "inlineReview"}, {"oid": "8ec64a3a716bd2b2eb0e4efd4a2edc977dcadc63", "url": "https://github.com/oracle/helidon/commit/8ec64a3a716bd2b2eb0e4efd4a2edc977dcadc63", "message": "Docs: change edition attributes to flavor. Tweak some wording", "committedDate": "2020-04-14T20:00:17Z", "type": "commit"}, {"oid": "71dd51765a8b9267fd4751e2a0d01949da8d21f6", "url": "https://github.com/oracle/helidon/commit/71dd51765a8b9267fd4751e2a0d01949da8d21f6", "message": "Merge branch 'master' into jlink-docs", "committedDate": "2020-04-15T16:52:24Z", "type": "commit"}, {"oid": "05e0b9eeb61b26b733e45b9fa40864e9974a0a7e", "url": "https://github.com/oracle/helidon/commit/05e0b9eeb61b26b733e45b9fa40864e9974a0a7e", "message": "Add gradle and maven guides. Update jlink guide based on feedback.", "committedDate": "2020-04-15T20:02:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMDk1NQ==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r409200955", "bodyText": "Since those docs also say to add a profile, which would be confusing here since it is already present, maybe say \"For more information on available configuration options see the\"", "author": "batsatt", "createdAt": "2020-04-15T23:55:55Z", "path": "docs/common/guides/jlink_image.adoc", "diffHunk": "@@ -0,0 +1,188 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Custom Runtime Images with `jlink`\n+\n+// :description: Helidon Custom Runtime Images\n+// :keywords: helidon, guide, jlink, image\n+// :helidon-uc-flavor: MP-or-SE\n+// :helidon-lc-flavor: mp-or-se\n+// :docker-multi-stage-url: https://docs.docker.com/develop/develop-images/multistage-build/\n+\n+This guide describes how to build a custom runtime image for your Helidon application\n+using Helidon's support for the JDK's `jlink` tool.\n+\n+== Introduction\n+\n+JDK 9 introduced the https://docs.oracle.com/en/java/javase/11/tools/jlink.html[`jlink`]\n+command that supports assembling a set of modules and their dependencies into a custom\n+runtime image. The `helidon-maven-plugin` has support for easily creating a custom runtime image for your\n+Helidon application resulting in a smaller, better performing runtime.\n+\n+In this guide you will learn how to build a custom runtime image locally on your machine,\n+as well as how to build it in a Docker image.\n+\n+== What You Need\n+\n+|===\n+|About 10 minutes\n+| <<about/03_prerequisites.adoc,Helidon Prerequisites>>\n+|===\n+\n+== Verify Java 11 or Newer\n+\n+[source,bash]\n+----\n+$JAVA_HOME/bin/java --version\n+----\n+\n+== Generate The Project\n+\n+Generate the project using the Helidon {helidon-uc-flavor} Quickstart Maven archetype.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+mvn archetype:generate -DinteractiveMode=false \\\n+    -DarchetypeGroupId=io.helidon.archetypes \\\n+    -DarchetypeArtifactId=helidon-quickstart-{helidon-lc-flavor} \\\n+    -DarchetypeVersion={helidon-version} \\\n+    -DgroupId=io.helidon.examples \\\n+    -DartifactId=helidon-quickstart-{helidon-lc-flavor} \\\n+    -Dpackage=io.helidon.examples.quickstart.{helidon-lc-flavor}\n+----\n+\n+The archetype generates a Maven project in your current directory\n+(for example, `helidon-quickstart-{helidon-lc-flavor}`). Change into this directory and build.\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+cd helidon-quickstart-{helidon-lc-flavor}\n+mvn package\n+----\n+\n+At this point you can run the application using the JVM:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+java -jar target/helidon-quickstart-{helidon-lc-flavor}.jar\n+----\n+\n+In another shell test an endpoint:\n+\n+[source,bash]\n+----\n+curl -X GET http://localhost:8080/greet\n+----\n+\n+The application should respond with `{\"message\":\"Hello World!\"}`\n+\n+Now stop the running application (by pressing Ctrl+C).\n+\n+For more information about the Quickstart application and other enpoints it supports see the\n+<<{helidon-lc-flavor}/guides/02_quickstart.adoc,Helidon {helidon-uc-flavor} quickstart Guide>>.\n+\n+== Building a Custom Runtime Image\n+\n+You can build a custom runtime image in 2 different ways:\n+\n+* Locally, on your desktop\n+* Using Docker\n+\n+=== Local build\n+\n+Build the custom runtime image using the jlink image profile:\n+\n+[source,bash]\n+----\n+mvn package -Pjlink-image\n+----\n+\n+[TIP]\n+This uses the `helidon-maven-plugin` to perform the custom image generation.\n+\n+After the build completes it will report some statistics about the build including\n+the reduction in image size.\n+\n+The `target/helidon-quickstart-{helidon-lc-flavor}` directory is a self contained\n+custom image of your application. It contains your application, its runtime\n+dependencies and the JDK modules it depends on. You can start your application\n+using the provide\n+`start` script:\n+\n+[source,bash,subs=\"attributes+\"]\n+----\n+./target/helidon-quickstart-{helidon-lc-flavor}/bin/start\n+----\n+\n+=== Class Data Sharing (CDS) Archive\n+\n+Aslo included in the custom image is a Class Data Sharing (CDS) archive that\n+improves your application's startup performance and in-memory footprint.\n+You can learn more about Class Data Sharing in the\n+https://docs.oracle.com/en/java/javase/11/vm/class-data-sharing.html[JDK documentation].\n+\n+The CDS archive increases your image size to get these performance optimizations.\n+It can be of significant size (tens of MB). The size of the CDS archive is\n+reported at the end of the build output.\n+\n+If you'd rather have a smaller image size (with a slightly increased startup time) you\n+can skip the creation of the CDS archive by executing your build like this:\n+\n+[source,bash]\n+----\n+mvn package -Pjlink-image -Djlink.image.addClassDataSharingArchive=false\n+----\n+\n+For more information see the", "originalCommit": "05e0b9eeb61b26b733e45b9fa40864e9974a0a7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMDkyNg==", "url": "https://github.com/oracle/helidon/pull/1639#discussion_r409210926", "bodyText": "fixed", "author": "barchetta", "createdAt": "2020-04-16T00:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMDk1NQ=="}], "type": "inlineReview"}, {"oid": "f65995830adc6e28cce981a9879f3110e24dc253", "url": "https://github.com/oracle/helidon/commit/f65995830adc6e28cce981a9879f3110e24dc253", "message": "Adjust wording", "committedDate": "2020-04-16T00:28:44Z", "type": "commit"}, {"oid": "c583e0656a4a011a363906427504287dbe59fe49", "url": "https://github.com/oracle/helidon/commit/c583e0656a4a011a363906427504287dbe59fe49", "message": "Update maven build guid", "committedDate": "2020-04-16T19:13:52Z", "type": "commit"}]}