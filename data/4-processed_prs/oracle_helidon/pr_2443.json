{"pr_number": 2443, "pr_title": "MP health edits", "pr_createdAt": "2020-10-12T21:12:47Z", "pr_url": "https://github.com/oracle/helidon/pull/2443", "timeline": [{"oid": "5b5df10f4c1f0d00e452509082e176a030cefb22", "url": "https://github.com/oracle/helidon/commit/5b5df10f4c1f0d00e452509082e176a030cefb22", "message": "MP health edits", "committedDate": "2020-10-12T21:10:26Z", "type": "commit"}, {"oid": "fc774bc92fc7459208470fa1105e64979d24b976", "url": "https://github.com/oracle/helidon/commit/fc774bc92fc7459208470fa1105e64979d24b976", "message": "Fix some typos", "committedDate": "2020-10-13T12:49:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTg0Nw==", "url": "https://github.com/oracle/helidon/pull/2443#discussion_r504005847", "bodyText": "supports", "author": "ljamen", "createdAt": "2020-10-13T14:37:01Z", "path": "docs/mp/health/01_introduction.adoc", "diffHunk": "@@ -20,23 +20,85 @@\n :spec-name: MicroProfile Health\n :description: {spec-name} support in Helidon MP\n :keywords: helidon, mp, microprofile, health\n-:h1Prefix: MP \n+:h1Prefix: MP\n+:health-release: {version.lib.microprofile-health}\n \n == Overview\n-Applications implement health checks to expose health status that is collected\n- at regular intervals by external tooling, such as orchestrators like\n- Kubernetes. The orchestrator may then take action, such as restarting your\n- application if the health check fails.\n+Microservices expose their health status primarily so external tools (for example, an orchestrator such as Kubernetes)\n+can monitor each service and take action, such as restarting a service instance if it has failed\n+or temporarily shunting traffic away from the instance if the service is unable to process\n+incoming requests normally.\n \n-A typical health check combines the statuses of all the dependencies that\n- affect availability and the ability to perform correctly:\n+== About the MicroProfile Health Specification\n+Helidon MP implements the MicroProfile Health\n+link:http://download.eclipse.org/microprofile/microprofile-health-{health-release}/microprofile-health-spec.html[spec].\n+The spec prescribes how external tools probe a service's health checks and how you\n+implement health checks as part of your microservice that are specific to your service's needs.\n \n-* network latency\n-* storage\n-* database\n-* other services used by your application\n+== Concepts\n \n-== Next Steps\n+=== Liveness and Readiness Checks\n \n-Create a sample MicroProfile (MP) project\n-that can be used to run some basic examples using both built-in and custom health-checks with Helidon MP.  <<mp/guides/04_health.adoc, Helidon MP Health Check Guide>>.\n\\ No newline at end of file\n+MicroProfile Health support two types of health checks.", "originalCommit": "fc774bc92fc7459208470fa1105e64979d24b976", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNjIyOA==", "url": "https://github.com/oracle/helidon/pull/2443#discussion_r504006228", "bodyText": "two types of health checks:", "author": "ljamen", "createdAt": "2020-10-13T14:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNjIzMA==", "url": "https://github.com/oracle/helidon/pull/2443#discussion_r504016230", "bodyText": "two types of health checks, including....", "author": "ljamen", "createdAt": "2020-10-13T14:49:53Z", "path": "docs/mp/health/01_introduction.adoc", "diffHunk": "@@ -20,23 +20,85 @@\n :spec-name: MicroProfile Health\n :description: {spec-name} support in Helidon MP\n :keywords: helidon, mp, microprofile, health\n-:h1Prefix: MP \n+:h1Prefix: MP\n+:health-release: {version.lib.microprofile-health}\n \n == Overview\n-Applications implement health checks to expose health status that is collected\n- at regular intervals by external tooling, such as orchestrators like\n- Kubernetes. The orchestrator may then take action, such as restarting your\n- application if the health check fails.\n+Microservices expose their health status primarily so external tools (for example, an orchestrator such as Kubernetes)\n+can monitor each service and take action, such as restarting a service instance if it has failed\n+or temporarily shunting traffic away from the instance if the service is unable to process\n+incoming requests normally.\n \n-A typical health check combines the statuses of all the dependencies that\n- affect availability and the ability to perform correctly:\n+== About the MicroProfile Health Specification\n+Helidon MP implements the MicroProfile Health\n+link:http://download.eclipse.org/microprofile/microprofile-health-{health-release}/microprofile-health-spec.html[spec].\n+The spec prescribes how external tools probe a service's health checks and how you\n+implement health checks as part of your microservice that are specific to your service's needs.\n \n-* network latency\n-* storage\n-* database\n-* other services used by your application\n+== Concepts\n \n-== Next Steps\n+=== Liveness and Readiness Checks\n \n-Create a sample MicroProfile (MP) project\n-that can be used to run some basic examples using both built-in and custom health-checks with Helidon MP.  <<mp/guides/04_health.adoc, Helidon MP Health Check Guide>>.\n\\ No newline at end of file\n+MicroProfile Health support two types of health checks.\n+\n+_Liveness_ checks report whether the runtime environment in which the service is running\n+is sufficient to support the work the service performs.\n+The environment is beyond the control of\n+the service itself and typically cannot improve without outside intervention.\n+If a microservice instance reports a `DOWN`\n+liveness check, it should never report `UP` later.\n+It will need to be stopped and a replacement instance created.\n+\n+_Readiness_ checks report whether the service is _currently_ capable of performing its work.\n+A service that reports `DOWN` for its readiness cannot _at the moment_ do its job, but at\n+some future point it might become able to do so without requiring a restart.\n+\n+The following table describes more about these two types of health check, including how an orchestrator", "originalCommit": "fc774bc92fc7459208470fa1105e64979d24b976", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxODA0Ng==", "url": "https://github.com/oracle/helidon/pull/2443#discussion_r504018046", "bodyText": "Each custom check", "author": "ljamen", "createdAt": "2020-10-13T14:52:17Z", "path": "docs/mp/health/01_introduction.adoc", "diffHunk": "@@ -20,23 +20,85 @@\n :spec-name: MicroProfile Health\n :description: {spec-name} support in Helidon MP\n :keywords: helidon, mp, microprofile, health\n-:h1Prefix: MP \n+:h1Prefix: MP\n+:health-release: {version.lib.microprofile-health}\n \n == Overview\n-Applications implement health checks to expose health status that is collected\n- at regular intervals by external tooling, such as orchestrators like\n- Kubernetes. The orchestrator may then take action, such as restarting your\n- application if the health check fails.\n+Microservices expose their health status primarily so external tools (for example, an orchestrator such as Kubernetes)\n+can monitor each service and take action, such as restarting a service instance if it has failed\n+or temporarily shunting traffic away from the instance if the service is unable to process\n+incoming requests normally.\n \n-A typical health check combines the statuses of all the dependencies that\n- affect availability and the ability to perform correctly:\n+== About the MicroProfile Health Specification\n+Helidon MP implements the MicroProfile Health\n+link:http://download.eclipse.org/microprofile/microprofile-health-{health-release}/microprofile-health-spec.html[spec].\n+The spec prescribes how external tools probe a service's health checks and how you\n+implement health checks as part of your microservice that are specific to your service's needs.\n \n-* network latency\n-* storage\n-* database\n-* other services used by your application\n+== Concepts\n \n-== Next Steps\n+=== Liveness and Readiness Checks\n \n-Create a sample MicroProfile (MP) project\n-that can be used to run some basic examples using both built-in and custom health-checks with Helidon MP.  <<mp/guides/04_health.adoc, Helidon MP Health Check Guide>>.\n\\ No newline at end of file\n+MicroProfile Health support two types of health checks.\n+\n+_Liveness_ checks report whether the runtime environment in which the service is running\n+is sufficient to support the work the service performs.\n+The environment is beyond the control of\n+the service itself and typically cannot improve without outside intervention.\n+If a microservice instance reports a `DOWN`\n+liveness check, it should never report `UP` later.\n+It will need to be stopped and a replacement instance created.\n+\n+_Readiness_ checks report whether the service is _currently_ capable of performing its work.\n+A service that reports `DOWN` for its readiness cannot _at the moment_ do its job, but at\n+some future point it might become able to do so without requiring a restart.\n+\n+The following table describes more about these two types of health check, including how an orchestrator\n+such as Kubernetes might react.\n+\n+=== Known Health Check Endpoints\n+A MicroProfile-compliant service reports its health via known REST endpoints. Helidon MP\n+provides these endpoints automatically as part of every MP microservice.\n+\n+External management tools (or `curl` or browsers) retrieve liveness via `/health/live` and\n+readiness via `/health/ready`.\n+\n+The following table summarizes the two types of health checks in MicroProfile Health.\n+\n+.Types of Health Checks\n+|===\n+|Type | Meaning | REST endpoint | Kubernetes response on failure\n+\n+|liveness\n+|whether the runtime environment is suitable\n+|`/health/live`\n+|Restarts container.\n+\n+|readiness\n+|whether the microservice is currently capable of doing its work\n+|`/health/ready`\n+|Diverts requests away from the instance; periodically rechecks readiness and resumes traffic once the\n+microservice reports itself as ready.\n+|===\n+\n+=== Built-in and Custom Health Checks\n+\n+==== Built-in Health Checks\n+Helidon provides built-in, default checks for each endpoint.\n+The built-in liveness checks include various environmental values, such as whether the JVM has detected deadlocks\n+or whether there is sufficient heap space. The built-in readiness check always reports `UP`.\n+\n+You can see all the defaults by accessing any Helidon MP microservice's `/health/live` endpoint\n+and viewing the response.\n+\n+==== Custom Health Checks\n+Add your own liveness or readiness checks by adding a Java class for each check.\n+Each such check must implement the `HealthCheck` interface, and you add either the `@Liveness` or", "originalCommit": "fc774bc92fc7459208470fa1105e64979d24b976", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b13d44443cef092b18fb3476b4faa181b33f682", "url": "https://github.com/oracle/helidon/commit/3b13d44443cef092b18fb3476b4faa181b33f682", "message": "Fix further typos\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>", "committedDate": "2020-10-13T15:38:54Z", "type": "commit"}]}