{"pr_number": 2301, "pr_title": "Scheduled tasks", "pr_createdAt": "2020-08-31T09:38:40Z", "pr_url": "https://github.com/oracle/helidon/pull/2301", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzOTk4MQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r493839981", "bodyText": "May be a different annotation? Would be much easier to use.\n@Scheduled(\"* * *\")\n@Periodical or FixedRate(10)\nWhere FixedRate is:\nlong value();\nTimeUnit unit() default TimeUnit.SECONDS", "author": "tomas-langer", "createdAt": "2020-09-23T19:23:15Z", "path": "microprofile/scheduling/src/main/java/io/helidon/microprofile/scheduling/Scheduled.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.scheduling;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * Scheduled to be invoked periodically.\n+ */\n+@Retention(RUNTIME)\n+@Target({METHOD})\n+public @interface Scheduled {\n+\n+    /**\n+     * Cron expression specifying period for invocation.\n+     *\n+     * @return cron expression as string\n+     */\n+    String cron() default \"\";\n+\n+    /**\n+     * Fixed rate at milliseconds.\n+     *\n+     * @return period of invocation in milliseconds\n+     */\n+    long fixedRate() default -1;", "originalCommit": "4ce01d99a1e96cc5e9ab8adb3712c4c895cd46a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE1Mzc2NQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r560153765", "bodyText": "Fixed, now we have @Scheduled(\"0/${seconds-from-config}  * * * * ? *\") with placeholders and @FixedRate where delay can be configured externally", "author": "danielkec", "createdAt": "2021-01-19T12:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzOTk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MDQ2OA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r493840468", "bodyText": "Make sure this is after the server is started", "author": "tomas-langer", "createdAt": "2020-09-23T19:24:11Z", "path": "microprofile/scheduling/src/main/java/io/helidon/microprofile/scheduling/SchedulingCdiExtension.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.scheduling;\n+\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Initialized;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.AfterDeploymentValidation;\n+import javax.enterprise.inject.spi.AnnotatedMethod;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.DeploymentException;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.enterprise.inject.spi.ProcessAnnotatedType;\n+import javax.enterprise.inject.spi.ProcessManagedBean;\n+import javax.enterprise.inject.spi.WithAnnotations;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+\n+import com.cronutils.descriptor.CronDescriptor;\n+import com.cronutils.model.Cron;\n+import com.cronutils.model.definition.CronDefinition;\n+import com.cronutils.model.definition.CronDefinitionBuilder;\n+import com.cronutils.model.time.ExecutionTime;\n+import com.cronutils.parser.CronParser;\n+\n+import static com.cronutils.model.CronType.QUARTZ;\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_AFTER;\n+\n+/**\n+ * Scheduling CDI Extension.\n+ */\n+public class SchedulingCdiExtension implements Extension {\n+    private static final Logger LOGGER = Logger.getLogger(SchedulingCdiExtension.class.getName());\n+    private final Map<Class<?>, AnnotatedMethod<?>> methods = new HashMap<>();\n+    private final Map<AnnotatedMethod<?>, Bean<?>> beans = new HashMap<>();\n+\n+    private void registerMethods(\n+            @Observes\n+            @WithAnnotations({Scheduled.class}) ProcessAnnotatedType<?> pat) {\n+        // Lookup channel methods\n+        pat.getAnnotatedType().getMethods()\n+                .stream()\n+                .filter(am -> am.isAnnotationPresent(Scheduled.class))\n+                .forEach(annotatedMethod -> {\n+                    methods.put(annotatedMethod.getDeclaringType().getJavaClass(), annotatedMethod);\n+                });\n+    }\n+\n+    private void onProcessBean(@Observes ProcessManagedBean<?> event) {\n+        // Gather bean references\n+        Bean<?> bean = event.getBean();\n+        Optional.ofNullable(methods.get(bean.getBeanClass()))\n+                .ifPresent(m -> beans.put(m, bean));\n+    }\n+\n+    private void deploymentValidation(@Observes AfterDeploymentValidation event) {\n+    }\n+\n+    private void invoke(@Observes @Priority(PLATFORM_AFTER + 102) @Initialized(ApplicationScoped.class) Object event,", "originalCommit": "4ce01d99a1e96cc5e9ab8adb3712c4c895cd46a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MDcyMw==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r493840723", "bodyText": "This must be configurable through config", "author": "tomas-langer", "createdAt": "2020-09-23T19:24:38Z", "path": "microprofile/scheduling/src/main/java/io/helidon/microprofile/scheduling/SchedulingCdiExtension.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.scheduling;\n+\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Initialized;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.AfterDeploymentValidation;\n+import javax.enterprise.inject.spi.AnnotatedMethod;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.DeploymentException;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.enterprise.inject.spi.ProcessAnnotatedType;\n+import javax.enterprise.inject.spi.ProcessManagedBean;\n+import javax.enterprise.inject.spi.WithAnnotations;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+\n+import com.cronutils.descriptor.CronDescriptor;\n+import com.cronutils.model.Cron;\n+import com.cronutils.model.definition.CronDefinition;\n+import com.cronutils.model.definition.CronDefinitionBuilder;\n+import com.cronutils.model.time.ExecutionTime;\n+import com.cronutils.parser.CronParser;\n+\n+import static com.cronutils.model.CronType.QUARTZ;\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_AFTER;\n+\n+/**\n+ * Scheduling CDI Extension.\n+ */\n+public class SchedulingCdiExtension implements Extension {\n+    private static final Logger LOGGER = Logger.getLogger(SchedulingCdiExtension.class.getName());\n+    private final Map<Class<?>, AnnotatedMethod<?>> methods = new HashMap<>();\n+    private final Map<AnnotatedMethod<?>, Bean<?>> beans = new HashMap<>();\n+\n+    private void registerMethods(\n+            @Observes\n+            @WithAnnotations({Scheduled.class}) ProcessAnnotatedType<?> pat) {\n+        // Lookup channel methods\n+        pat.getAnnotatedType().getMethods()\n+                .stream()\n+                .filter(am -> am.isAnnotationPresent(Scheduled.class))\n+                .forEach(annotatedMethod -> {\n+                    methods.put(annotatedMethod.getDeclaringType().getJavaClass(), annotatedMethod);\n+                });\n+    }\n+\n+    private void onProcessBean(@Observes ProcessManagedBean<?> event) {\n+        // Gather bean references\n+        Bean<?> bean = event.getBean();\n+        Optional.ofNullable(methods.get(bean.getBeanClass()))\n+                .ifPresent(m -> beans.put(m, bean));\n+    }\n+\n+    private void deploymentValidation(@Observes AfterDeploymentValidation event) {\n+    }\n+\n+    private void invoke(@Observes @Priority(PLATFORM_AFTER + 102) @Initialized(ApplicationScoped.class) Object event,\n+                        BeanManager beanManager) {\n+        // kickoff\n+        ScheduledThreadPoolSupplier scheduledThreadPoolSupplier = ScheduledThreadPoolSupplier.builder()", "originalCommit": "4ce01d99a1e96cc5e9ab8adb3712c4c895cd46a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDE2MjczMQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r560162731", "bodyText": "it is now", "author": "danielkec", "createdAt": "2021-01-19T13:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MDcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MTAxMw==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r493841013", "bodyText": "Do not use info...", "author": "tomas-langer", "createdAt": "2020-09-23T19:25:10Z", "path": "microprofile/scheduling/src/main/java/io/helidon/microprofile/scheduling/SchedulingCdiExtension.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.scheduling;\n+\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Initialized;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.AfterDeploymentValidation;\n+import javax.enterprise.inject.spi.AnnotatedMethod;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.DeploymentException;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.enterprise.inject.spi.ProcessAnnotatedType;\n+import javax.enterprise.inject.spi.ProcessManagedBean;\n+import javax.enterprise.inject.spi.WithAnnotations;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+\n+import com.cronutils.descriptor.CronDescriptor;\n+import com.cronutils.model.Cron;\n+import com.cronutils.model.definition.CronDefinition;\n+import com.cronutils.model.definition.CronDefinitionBuilder;\n+import com.cronutils.model.time.ExecutionTime;\n+import com.cronutils.parser.CronParser;\n+\n+import static com.cronutils.model.CronType.QUARTZ;\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_AFTER;\n+\n+/**\n+ * Scheduling CDI Extension.\n+ */\n+public class SchedulingCdiExtension implements Extension {\n+    private static final Logger LOGGER = Logger.getLogger(SchedulingCdiExtension.class.getName());\n+    private final Map<Class<?>, AnnotatedMethod<?>> methods = new HashMap<>();\n+    private final Map<AnnotatedMethod<?>, Bean<?>> beans = new HashMap<>();\n+\n+    private void registerMethods(\n+            @Observes\n+            @WithAnnotations({Scheduled.class}) ProcessAnnotatedType<?> pat) {\n+        // Lookup channel methods\n+        pat.getAnnotatedType().getMethods()\n+                .stream()\n+                .filter(am -> am.isAnnotationPresent(Scheduled.class))\n+                .forEach(annotatedMethod -> {\n+                    methods.put(annotatedMethod.getDeclaringType().getJavaClass(), annotatedMethod);\n+                });\n+    }\n+\n+    private void onProcessBean(@Observes ProcessManagedBean<?> event) {\n+        // Gather bean references\n+        Bean<?> bean = event.getBean();\n+        Optional.ofNullable(methods.get(bean.getBeanClass()))\n+                .ifPresent(m -> beans.put(m, bean));\n+    }\n+\n+    private void deploymentValidation(@Observes AfterDeploymentValidation event) {\n+    }\n+\n+    private void invoke(@Observes @Priority(PLATFORM_AFTER + 102) @Initialized(ApplicationScoped.class) Object event,\n+                        BeanManager beanManager) {\n+        // kickoff\n+        ScheduledThreadPoolSupplier scheduledThreadPoolSupplier = ScheduledThreadPoolSupplier.builder()\n+                .threadNamePrefix(\"scheduled-\")\n+                .build();\n+        for (Map.Entry<Class<?>, AnnotatedMethod<?>> entry : methods.entrySet()) {\n+            Class<?> aClass = entry.getKey();\n+            AnnotatedMethod<?> am = entry.getValue();\n+            Bean<?> bean = beans.get(am);\n+            Object beanInstance = lookup(bean, beanManager);\n+            Scheduled annotation = am.getAnnotation(Scheduled.class);\n+            ScheduledExecutorService executorService = scheduledThreadPoolSupplier.get();\n+            if (annotation.fixedRate() > 0) {\n+                executorService.scheduleAtFixedRate(() -> {\n+                    try {\n+                        am.getJavaMember().invoke(beanInstance);\n+                    } catch (Throwable e) {\n+                        LOGGER.log(Level.SEVERE, e, () -> \"Error when invoking scheduled method.\");\n+                    }\n+                }, 0L, annotation.fixedRate(), TimeUnit.MILLISECONDS);\n+            } else if (annotation.cron().length() > 0) {\n+                CronDefinition cronDefinition =\n+                        CronDefinitionBuilder.instanceDefinitionFor(QUARTZ);\n+\n+                //create a parser based on provided definition\n+                CronParser parser = new CronParser(cronDefinition);\n+                Cron cron = parser.parse(annotation.cron());\n+                LOGGER.info(() ->", "originalCommit": "4ce01d99a1e96cc5e9ab8adb3712c4c895cd46a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODU4Ng==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r496218586", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-09-28T20:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MTAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MTY2OA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r493841668", "bodyText": "Switch to the new @HelidonTest testing approach, should support everything in this class", "author": "tomas-langer", "createdAt": "2020-09-23T19:26:15Z", "path": "microprofile/scheduling/src/test/java/io/helidon/microprofile/scheduling/AbstractCDITest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.scheduling;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.CDI;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+import io.helidon.microprofile.server.ServerCdiExtension;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+public abstract class AbstractCDITest {", "originalCommit": "4ce01d99a1e96cc5e9ab8adb3712c4c895cd46a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODQ4Ng==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r496218486", "bodyText": "Switched", "author": "danielkec", "createdAt": "2020-09-28T20:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MjAwNQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r493842005", "bodyText": "I think you mean ScheduledBean or CronnedBean, Croned is from word Crone...", "author": "tomas-langer", "createdAt": "2020-09-23T19:26:50Z", "path": "microprofile/scheduling/src/test/java/io/helidon/microprofile/scheduling/CronedBean.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.scheduling;\n+\n+import java.time.LocalTime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class CronedBean {", "originalCommit": "4ce01d99a1e96cc5e9ab8adb3712c4c895cd46a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1NzIxOQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r494157219", "bodyText": "\ud83d\ude00 \"a crone is an old woman who may be disagreeable, malicious, or sinister in manner\"", "author": "danielkec", "createdAt": "2020-09-24T09:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MjAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkwNzYxNg==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r494907616", "bodyText": "Exactly ;)", "author": "tomas-langer", "createdAt": "2020-09-25T10:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MjAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODM1NA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r496218354", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-09-28T20:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MjAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MjQyNA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r493842424", "bodyText": "Do not use system.out - you can use fields to store information about executions and then inject the bean into a test to obtain these values", "author": "tomas-langer", "createdAt": "2020-09-23T19:27:37Z", "path": "microprofile/scheduling/src/test/java/io/helidon/microprofile/scheduling/CronedBean.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.scheduling;\n+\n+import java.time.LocalTime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class CronedBean {\n+\n+    public static Runnable onInvoke = () -> {\n+    };\n+\n+    @Scheduled(cron = \"0/2 * * * * ? *\")\n+    public void test2sec() {\n+        onInvoke.run();\n+        System.out.println(\"Executed at \" + LocalTime.now().toString());", "originalCommit": "4ce01d99a1e96cc5e9ab8adb3712c4c895cd46a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxODI2OA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r496218268", "bodyText": "fixed", "author": "danielkec", "createdAt": "2020-09-28T20:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg0MjQyNA=="}], "type": "inlineReview"}, {"oid": "6e864d82ed3ab437c58e4eb7ec675341f0dd0974", "url": "https://github.com/oracle/helidon/commit/6e864d82ed3ab437c58e4eb7ec675341f0dd0974", "message": "Review issues, @HelidonTest\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2020-09-28T20:41:57Z", "type": "forcePushed"}, {"oid": "e970286661ffb523f364721106e069a9daeb4b4c", "url": "https://github.com/oracle/helidon/commit/e970286661ffb523f364721106e069a9daeb4b4c", "message": "Optimized rescheduling\n * configurable cron\n * configurable fixed delay\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-01-19T11:56:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc0NDYzOQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r563744639", "bodyText": "Scheduling should not depend on server, just on CDI.", "author": "tomas-langer", "createdAt": "2021-01-25T14:02:01Z", "path": "microprofile/scheduling/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2021 Oracle and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.microprofile</groupId>\n+        <artifactId>helidon-microprofile-project</artifactId>\n+        <version>2.2.1-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.microprofile.scheduling</groupId>\n+    <artifactId>helidon-microprofile-scheduling</artifactId>\n+    <name>Helidon MicroProfile Scheduling</name>\n+    <description>\n+        Helidon MicroProfile Scheduling\n+    </description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.cronutils</groupId>\n+            <artifactId>cron-utils</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.config</groupId>\n+            <artifactId>helidon-microprofile-config</artifactId>\n+        </dependency>\n+        <dependency>", "originalCommit": "bd45110b95771f98b0dc8c22f59b6539388abb79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDM1NDIwOA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r564354208", "bodyText": "fixed", "author": "danielkec", "createdAt": "2021-01-26T09:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc0NDYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzc0NzA3Ng==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r563747076", "bodyText": "should only depend on cdi, not server", "author": "tomas-langer", "createdAt": "2021-01-25T14:05:44Z", "path": "microprofile/scheduling/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2021 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.helidon.microprofile.scheduling.SchedulingCdiExtension;\n+\n+/**\n+ * CDI Scheduling implementation.\n+ */\n+module io.helidon.microprofile.scheduling {\n+    requires java.logging;\n+\n+    requires static jakarta.enterprise.cdi.api;\n+    requires static jakarta.inject.api;\n+    requires static jakarta.activation;\n+    requires jakarta.interceptor.api;\n+    requires io.helidon.config;\n+    requires io.helidon.config.mp;\n+    requires io.helidon.microprofile.config;\n+    requires io.helidon.microprofile.server;", "originalCommit": "bd45110b95771f98b0dc8c22f59b6539388abb79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4ODI4MQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r577588281", "bodyText": "please change to use of resource-config.json\n{\n    \"bundles\": [\n        {\"name\":\"CronUtilsI18N\"}\n    ]\n}\nin the same location and remove this file.", "author": "tomas-langer", "createdAt": "2021-02-17T12:56:18Z", "path": "scheduling/src/main/resources/META-INF/native-image/io.helidon.scheduling/helidon-scheduling/native-image.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+#\n+# Copyright (c) 2021 Oracle and/or its affiliates.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+Args=-H:IncludeResourceBundles=CronUtilsI18N", "originalCommit": "a9d49929e7d952251965f00064f08f0c98787004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTMyODMyNg==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r579328326", "bodyText": "fixed", "author": "danielkec", "createdAt": "2021-02-19T16:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU4ODI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU5MDQ3OA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r577590478", "bodyText": "All tests using this class seem to be a danger of intermittent errors. I think the unit tests should validate we read the expression correctly, but validating that we correctly schedule is tricky, as we may get inconsistent result if the build machine gets heavily loaded.", "author": "tomas-langer", "createdAt": "2021-02-17T12:59:45Z", "path": "scheduling/src/test/java/io/helidon/scheduling/IntervalMeter.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright (c) 2021 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.scheduling;\n+\n+import org.hamcrest.Matchers;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class IntervalMeter extends CopyOnWriteArrayList<IntervalMeter.Interval> {", "originalCommit": "a9d49929e7d952251965f00064f08f0c98787004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTMzMDExNg==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r579330116", "bodyText": "I have moved the tests under profile, so those are not going to be invoked in the pipeline. I don't see any point in testing cron expression evaluation as its done by external library.", "author": "danielkec", "createdAt": "2021-02-19T16:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzU5MDQ3OA=="}], "type": "inlineReview"}, {"oid": "b2ff4abe5be70a00490b34ded8960cbb47584097", "url": "https://github.com/oracle/helidon/commit/b2ff4abe5be70a00490b34ded8960cbb47584097", "message": "Scheduled tasks\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:42:58Z", "type": "commit"}, {"oid": "f70702c779477966e7e7cb405244dbe1cff24d7d", "url": "https://github.com/oracle/helidon/commit/f70702c779477966e7e7cb405244dbe1cff24d7d", "message": "Review issues, @HelidonTest\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:42:58Z", "type": "commit"}, {"oid": "11323764b4b98e54b7278efd55658aeae39a03c8", "url": "https://github.com/oracle/helidon/commit/11323764b4b98e54b7278efd55658aeae39a03c8", "message": "Optimized rescheduling\n * configurable cron\n * configurable fixed delay\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:42:58Z", "type": "commit"}, {"oid": "fa19638e82dfd03c64bc9c04254179810c81ac0d", "url": "https://github.com/oracle/helidon/commit/fa19638e82dfd03c64bc9c04254179810c81ac0d", "message": "Configurable override\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:42:59Z", "type": "commit"}, {"oid": "2370aa83efd1ac289a289df07643bf4310716e83", "url": "https://github.com/oracle/helidon/commit/2370aa83efd1ac289a289df07643bf4310716e83", "message": "Javadoc and config mapping\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:42:59Z", "type": "commit"}, {"oid": "30f392c9898a7b2f54c74a31f71e7afb9145f5cb", "url": "https://github.com/oracle/helidon/commit/30f392c9898a7b2f54c74a31f71e7afb9145f5cb", "message": "Documentation\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:42:59Z", "type": "commit"}, {"oid": "44fcfe82761d9c531dd250c7094464cee2239b11", "url": "https://github.com/oracle/helidon/commit/44fcfe82761d9c531dd250c7094464cee2239b11", "message": "Copyright fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:18Z", "type": "commit"}, {"oid": "00d44b4a575f69f787c5c0d5847c0f89d91554f4", "url": "https://github.com/oracle/helidon/commit/00d44b4a575f69f787c5c0d5847c0f89d91554f4", "message": "Dependencies cleanup\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:18Z", "type": "commit"}, {"oid": "b3b3b709074deb12bb5e9e9e91a622d83b9574c3", "url": "https://github.com/oracle/helidon/commit/b3b3b709074deb12bb5e9e9e91a622d83b9574c3", "message": "SE Scheduling\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:18Z", "type": "commit"}, {"oid": "6d7fd37af981a8201c435d9033f63dff89ede279", "url": "https://github.com/oracle/helidon/commit/6d7fd37af981a8201c435d9033f63dff89ede279", "message": "Copyright\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:18Z", "type": "commit"}, {"oid": "ba3a763a284ecf7709a8b32c63f913454ec98f40", "url": "https://github.com/oracle/helidon/commit/ba3a763a284ecf7709a8b32c63f913454ec98f40", "message": "Copyright\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:18Z", "type": "commit"}, {"oid": "691cba320115a7ba335a92b6fb9fcd913cfa3a11", "url": "https://github.com/oracle/helidon/commit/691cba320115a7ba335a92b6fb9fcd913cfa3a11", "message": "Javadoc fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:19Z", "type": "commit"}, {"oid": "2b913069f396c654c4947be759033b2640d90ec0", "url": "https://github.com/oracle/helidon/commit/2b913069f396c654c4947be759033b2640d90ec0", "message": "Native image support\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:19Z", "type": "commit"}, {"oid": "1fa8d617ac0988e11109671bb8cb82d37c750a5e", "url": "https://github.com/oracle/helidon/commit/1fa8d617ac0988e11109671bb8cb82d37c750a5e", "message": "Copyright\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:59Z", "type": "commit"}, {"oid": "f769aa23151fef8a2bd2fa3f450a36e521014860", "url": "https://github.com/oracle/helidon/commit/f769aa23151fef8a2bd2fa3f450a36e521014860", "message": "Scheduling doc\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:59Z", "type": "commit"}, {"oid": "418c9dcdb7b6f9784457dc02ed9fefa81c9e170d", "url": "https://github.com/oracle/helidon/commit/418c9dcdb7b6f9784457dc02ed9fefa81c9e170d", "message": "Review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:59Z", "type": "commit"}, {"oid": "418c9dcdb7b6f9784457dc02ed9fefa81c9e170d", "url": "https://github.com/oracle/helidon/commit/418c9dcdb7b6f9784457dc02ed9fefa81c9e170d", "message": "Review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T16:44:59Z", "type": "forcePushed"}, {"oid": "59dee016113c7407f3834ea4ca0a1baff322b1a6", "url": "https://github.com/oracle/helidon/commit/59dee016113c7407f3834ea4ca0a1baff322b1a6", "message": "Snapshot version fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-02-19T17:00:14Z", "type": "commit"}, {"oid": "76202e8c638c7e23b61d242edb6d1b5ae57b9402", "url": "https://github.com/oracle/helidon/commit/76202e8c638c7e23b61d242edb6d1b5ae57b9402", "message": "Merge remote-tracking branch 'upstream/master' into 2274-scheduled\n\n# Conflicts:\n#\tdependencies/pom.xml\n#\tdocs/sitegen.yaml", "committedDate": "2021-03-09T16:06:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzEwNDM0OQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r593104349", "bodyText": "This class is missing javadoc and it is public.", "author": "tomas-langer", "createdAt": "2021-03-12T11:29:02Z", "path": "scheduling/src/main/java/io/helidon/scheduling/Scheduling.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright (c) 2021 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.scheduling;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+\n+/**\n+ * Scheduling periodically executed task with specified fixed rate or cron expression.\n+ *\n+ * <pre>{@code\n+ * Scheduling.fixedRate()\n+ *      .delay(2)\n+ *      .task(inv -> System.out.println(\"Executed every 2 seconds\"))\n+ *      .build();\n+ * }</pre>\n+ *\n+ * <pre>{@code\n+ * Scheduling.cron()\n+ *      .expression(\"0 45 9 ? * *\")\n+ *      .task(inv -> System.out.println(\"Executed every day at 9:45\"))\n+ *      .build()\n+ * }</pre>\n+ */\n+public class Scheduling {\n+\n+    private Scheduling() {\n+        //hidden constructor\n+    }\n+\n+    /**\n+     * Build a task executed periodically at a fixed rate.\n+     *\n+     * @return this builder\n+     */\n+    public static FixedRateBuilder fixedRate() {\n+        return new FixedRateBuilder();\n+    }\n+\n+    /**\n+     * Build a task executed periodically according to provided cron expression.\n+     *\n+     * @return this builder\n+     */\n+    public static CronBuilder cron() {\n+        return new CronBuilder();\n+    }\n+\n+    public static final class FixedRateBuilder implements io.helidon.common.Builder<Task> {", "originalCommit": "76202e8c638c7e23b61d242edb6d1b5ae57b9402", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzExODc0NA==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r593118744", "bodyText": "fixed", "author": "danielkec", "createdAt": "2021-03-12T11:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzEwNDM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzEwNDc1NQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r593104755", "bodyText": "The dev guidelines expect the method to be called builder, so in case we have two builders,\nwe should have fixedRateBuilder and cronBuilder methods.", "author": "tomas-langer", "createdAt": "2021-03-12T11:29:44Z", "path": "scheduling/src/main/java/io/helidon/scheduling/Scheduling.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright (c) 2021 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.scheduling;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+\n+/**\n+ * Scheduling periodically executed task with specified fixed rate or cron expression.\n+ *\n+ * <pre>{@code\n+ * Scheduling.fixedRate()\n+ *      .delay(2)\n+ *      .task(inv -> System.out.println(\"Executed every 2 seconds\"))\n+ *      .build();\n+ * }</pre>\n+ *\n+ * <pre>{@code\n+ * Scheduling.cron()\n+ *      .expression(\"0 45 9 ? * *\")\n+ *      .task(inv -> System.out.println(\"Executed every day at 9:45\"))\n+ *      .build()\n+ * }</pre>\n+ */\n+public class Scheduling {\n+\n+    private Scheduling() {\n+        //hidden constructor\n+    }\n+\n+    /**\n+     * Build a task executed periodically at a fixed rate.\n+     *\n+     * @return this builder\n+     */\n+    public static FixedRateBuilder fixedRate() {", "originalCommit": "76202e8c638c7e23b61d242edb6d1b5ae57b9402", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzExODg5MQ==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r593118891", "bodyText": "fixed", "author": "danielkec", "createdAt": "2021-03-12T11:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzEwNDc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzEwNTAzNg==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r593105036", "bodyText": "Public class without javadoc.", "author": "tomas-langer", "createdAt": "2021-03-12T11:30:11Z", "path": "scheduling/src/main/java/io/helidon/scheduling/Scheduling.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright (c) 2021 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.scheduling;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+\n+/**\n+ * Scheduling periodically executed task with specified fixed rate or cron expression.\n+ *\n+ * <pre>{@code\n+ * Scheduling.fixedRate()\n+ *      .delay(2)\n+ *      .task(inv -> System.out.println(\"Executed every 2 seconds\"))\n+ *      .build();\n+ * }</pre>\n+ *\n+ * <pre>{@code\n+ * Scheduling.cron()\n+ *      .expression(\"0 45 9 ? * *\")\n+ *      .task(inv -> System.out.println(\"Executed every day at 9:45\"))\n+ *      .build()\n+ * }</pre>\n+ */\n+public class Scheduling {\n+\n+    private Scheduling() {\n+        //hidden constructor\n+    }\n+\n+    /**\n+     * Build a task executed periodically at a fixed rate.\n+     *\n+     * @return this builder\n+     */\n+    public static FixedRateBuilder fixedRate() {\n+        return new FixedRateBuilder();\n+    }\n+\n+    /**\n+     * Build a task executed periodically according to provided cron expression.\n+     *\n+     * @return this builder\n+     */\n+    public static CronBuilder cron() {\n+        return new CronBuilder();\n+    }\n+\n+    public static final class FixedRateBuilder implements io.helidon.common.Builder<Task> {\n+\n+        private ScheduledExecutorService executorService;\n+        private long initialDelay = 0;\n+        private Long delay;\n+        private TimeUnit timeUnit = TimeUnit.SECONDS;\n+        private ScheduledConsumer<FixedRateInvocation> task;\n+\n+        private FixedRateBuilder() {\n+            //hidden constructor\n+        }\n+\n+        /**\n+         * Custom {@link ScheduledExecutorService ScheduledExecutorService} used for executing scheduled task.\n+         *\n+         * @param executorService custom ScheduledExecutorService\n+         * @return this builder\n+         */\n+        public FixedRateBuilder executor(ScheduledExecutorService executorService) {\n+            this.executorService = executorService;\n+            return this;\n+        }\n+\n+        /**\n+         * Initial delay of the first invocation. Time unit is by default {@link TimeUnit#SECONDS},\n+         * can be specified with {@link FixedRateBuilder#timeUnit(java.util.concurrent.TimeUnit) timeUnit()}.\n+         *\n+         * @param initialDelay initial delay value\n+         * @return this builder\n+         */\n+        public FixedRateBuilder initialDelay(long initialDelay) {\n+            this.initialDelay = initialDelay;\n+            return this;\n+        }\n+\n+        /**\n+         * Fixed rate delay between each invocation. Time unit is by default {@link TimeUnit#SECONDS},\n+         * can be specified with {@link FixedRateBuilder#timeUnit(java.util.concurrent.TimeUnit)}.\n+         *\n+         * @param delay delay between each invocation\n+         * @return this builder\n+         */\n+        public FixedRateBuilder delay(long delay) {\n+            this.delay = delay;\n+            return this;\n+        }\n+\n+        /**\n+         * Task to be scheduled for execution.\n+         *\n+         * @param task scheduled for execution\n+         * @return this builder\n+         */\n+        public FixedRateBuilder task(ScheduledConsumer<FixedRateInvocation> task) {\n+            this.task = task;\n+            return this;\n+        }\n+\n+        /**\n+         * {@link TimeUnit TimeUnit} used for interpretation of values provided with {@link FixedRateBuilder#delay(long)}\n+         * and {@link FixedRateBuilder#initialDelay(long)}.\n+         *\n+         * @param timeUnit for interpreting delay and in {@link FixedRateBuilder#delay(long)}\n+         *                 and {@link FixedRateBuilder#initialDelay(long)}\n+         * @return this builder\n+         */\n+        public FixedRateBuilder timeUnit(TimeUnit timeUnit) {\n+            this.timeUnit = timeUnit;\n+            return this;\n+        }\n+\n+        @Override\n+        public Task build() {\n+            if (task == null) {\n+                throw new SchedulingException(\"No task to execute provided!\");\n+            }\n+            if (delay == null) {\n+                throw new SchedulingException(\"No delay provided!\");\n+            }\n+\n+            if (executorService == null) {\n+                executorService = ScheduledThreadPoolSupplier.builder()\n+                        .threadNamePrefix(\"scheduled-\")\n+                        .build()\n+                        .get();\n+            }\n+            return new FixedRateTask(executorService, initialDelay, delay, timeUnit,\n+                    invocation -> task.run((FixedRateInvocation) invocation));\n+        }\n+    }\n+\n+    public static final class CronBuilder implements io.helidon.common.Builder<Task> {", "originalCommit": "76202e8c638c7e23b61d242edb6d1b5ae57b9402", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzExODk3Nw==", "url": "https://github.com/oracle/helidon/pull/2301#discussion_r593118977", "bodyText": "thx fixed", "author": "danielkec", "createdAt": "2021-03-12T11:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzEwNTAzNg=="}], "type": "inlineReview"}, {"oid": "b3e16dd6b1edb59060493479433d88c244b2456d", "url": "https://github.com/oracle/helidon/commit/b3e16dd6b1edb59060493479433d88c244b2456d", "message": "2nd review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>", "committedDate": "2021-03-12T11:56:01Z", "type": "commit"}, {"oid": "b99658c2d3d626c2f9d4c7bf6289d8a2dc215b66", "url": "https://github.com/oracle/helidon/commit/b99658c2d3d626c2f9d4c7bf6289d8a2dc215b66", "message": "Merge remote-tracking branch 'upstream/master' into 2274-scheduled", "committedDate": "2021-03-29T08:57:07Z", "type": "commit"}]}