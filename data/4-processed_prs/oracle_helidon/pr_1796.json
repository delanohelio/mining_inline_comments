{"pr_number": 1796, "pr_title": "JSON-P Streaming support", "pr_createdAt": "2020-05-14T14:48:21Z", "pr_url": "https://github.com/oracle/helidon/pull/1796", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwMTA3Mg==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425301072", "bodyText": "Is this actually required ?", "author": "romain-grecourt", "createdAt": "2020-05-14T17:13:17Z", "path": "media/jsonb/common/src/main/java/io/helidon/media/jsonb/common/JsonbBodyWriter.java", "diffHunk": "@@ -48,6 +49,13 @@ private JsonbBodyWriter(Jsonb jsonb) {\n     public boolean accept(GenericType<?> type,\n             MessageBodyWriterContext context) {\n \n+        // We are excluding the following types from support:\n+        // 1. any char sequence\n+        // 2. Flow.Publisher - that can only be supported by streaming media\n+        if (Flow.Publisher.class.isAssignableFrom(type.rawType())) {", "originalCommit": "c41fdca1b88098ef8ee49f274c990001c8c1b30a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTgxNQ==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425635815", "bodyText": "Yes, because otherwise when you have JSON-B registered, you do not get an error, if you do  response.send(Publisher<Pojo>)\nYou should get appropriate error telling you there is no registered writer, but JSON-B just processes it", "author": "tomas-langer", "createdAt": "2020-05-15T08:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwMTA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1Mzk4MA==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r426053980", "bodyText": "This is something that we should solve for all non stream readers and writers.\nreponse.send(Publisher<Pojo>) is really not supported, instead it should be `response.send(Publisher, Pojo.class).\nI.e, MessageBodyWriterContext.marshall and MessageBodyReader.Context.unmarshall should reject the Flow.Puslisher type.\nCan you update these two methods and throw a proper exception (maybe IllegalArgumentException) ?", "author": "romain-grecourt", "createdAt": "2020-05-15T21:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwMTA3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTA1Mw==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r426055053", "bodyText": "I will look for the place we check for byte[] and update it", "author": "tomas-langer", "createdAt": "2020-05-15T21:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwMTA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMzI3MQ==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425333271", "bodyText": "@danielkec FYI. Can this be done better ? Is there something we can add in Multi to support this ?", "author": "romain-grecourt", "createdAt": "2020-05-14T18:04:59Z", "path": "media/jsonp/common/src/main/java/io/helidon/media/jsonp/common/JsonpBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonp.common;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.json.JsonStructure;\n+import javax.json.JsonWriterFactory;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.common.reactive.Single;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+import io.helidon.media.jsonp.common.JsonpBodyWriter.JsonStructureToChunks;\n+\n+/**\n+ * Message body writer for {@link javax.json.JsonStructure} sub-classes (JSON-P).\n+ */\n+public class JsonpBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure> {\n+    private static final byte[] ARRAY_JSON_END_BYTES = \"]\".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] ARRAY_JSON_BEGIN_BYTES = \"[\".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] COMMA_BYTES = \",\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final JsonWriterFactory jsonWriterFactory;\n+\n+    JsonpBodyStreamWriter(JsonWriterFactory jsonWriterFactory) {\n+        this.jsonWriterFactory = jsonWriterFactory;\n+    }\n+\n+    @Override\n+    public boolean accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return JsonStructure.class.isAssignableFrom(type.rawType());\n+    }\n+\n+    @Override\n+    public Publisher<DataChunk> write(Publisher<JsonStructure> publisher,\n+                                      GenericType<? extends JsonStructure> type,\n+                                      MessageBodyWriterContext context) {\n+\n+        MediaType contentType = context.findAccepted(MediaType.JSON_PREDICATE, MediaType.APPLICATION_JSON);\n+        context.contentType(contentType);\n+\n+        // we do not have join operator\n+        AtomicBoolean first = new AtomicBoolean(true);\n+\n+        JsonStructureToChunks jsonToChunks = new JsonStructureToChunks(jsonWriterFactory,\n+                                                                       context.charset());\n+\n+        // we also do not have an append operator\n+        Multi<DataChunk> stream = Multi.concat(", "originalCommit": "c41fdca1b88098ef8ee49f274c990001c8c1b30a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5OTQ3Mw==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425699473", "bodyText": "Now we do #1806", "author": "danielkec", "createdAt": "2020-05-15T10:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0OTg1Nw==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r426049857", "bodyText": "@tomas-langer Can you update the corresponding code to leverage #1806", "author": "romain-grecourt", "createdAt": "2020-05-15T21:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MjY5Mw==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r426472693", "bodyText": "Done", "author": "tomas-langer", "createdAt": "2020-05-18T08:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzMzI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTIwNw==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425335207", "bodyText": "I under what you are doing here, but if we do this we need to do this for all the places where there is similar code. i.e  jsonb, jackson.", "author": "romain-grecourt", "createdAt": "2020-05-14T18:08:16Z", "path": "media/jsonp/common/src/main/java/io/helidon/media/jsonp/common/JsonpBodyWriter.java", "diffHunk": "@@ -50,15 +49,14 @@ public boolean accept(GenericType<?> type, MessageBodyWriterContext context) {\n \n     @Override\n     public Publisher<DataChunk> write(Single<JsonStructure> content, GenericType<? extends JsonStructure> type,\n-            MessageBodyWriterContext context) {\n+                                      MessageBodyWriterContext context) {\n \n         MediaType contentType = context.findAccepted(MediaType.JSON_PREDICATE, MediaType.APPLICATION_JSON);\n         context.contentType(contentType);\n-        return content.flatMap(new JsonStructureToChunks(jsonWriterFactory, context.charset()));\n+        return content.map(new JsonStructureToChunks(jsonWriterFactory, context.charset()));", "originalCommit": "c41fdca1b88098ef8ee49f274c990001c8c1b30a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzOTA5Nw==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425639097", "bodyText": "this is not a different functionality - it still works the same, I am just skipping going from an immediate value to publisher, as that created an unnecessary flatMap operation.\nAlso when I need to process records one by one, the intermediate publisher would cause trouble (as if it had more than one chunk per JsonObject, I would insert two commas there).\nWe should revisit it when implementing the stream writers for JSON-B and for Jackson", "author": "tomas-langer", "createdAt": "2020-05-15T08:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzOTU0NQ==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425639545", "bodyText": "will add a reference to those issues", "author": "tomas-langer", "createdAt": "2020-05-15T08:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTk5MA==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425335990", "bodyText": "The newXXX static methods have been removed. Let's remove it.", "author": "romain-grecourt", "createdAt": "2020-05-14T18:09:46Z", "path": "media/jsonp/common/src/main/java/io/helidon/media/jsonp/common/JsonpSupport.java", "diffHunk": "@@ -61,6 +62,19 @@ public JsonpBodyWriter newWriter() {\n         return new JsonpBodyWriter(jsonWriterFactory);\n     }\n \n+    /**\n+     * Create a new JSON-P stream writer.\n+     * <p>\n+     * This stream writer supports {@link java.util.concurrent.Flow.Publisher publishers}\n+     * of {@link javax.json.JsonStructure} (such as {@link javax.json.JsonObject})\n+     * , writing them as an array of JSONs.\n+     *\n+     * @return JSON processing stream writer.\n+     */\n+    public JsonpBodyStreamWriter newStreamWriter() {", "originalCommit": "c41fdca1b88098ef8ee49f274c990001c8c1b30a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzMzk5MA==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r425633990", "bodyText": "Actually these newXXX methods are not yet removed in this version. I didn't commit these changes yet. So I think it is OK to leave it as it is.", "author": "Verdent", "createdAt": "2020-05-15T08:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMzNTk5MA=="}], "type": "inlineReview"}, {"oid": "96ce3141976d24dbf04f17211bfd1f2c2c60dc45", "url": "https://github.com/oracle/helidon/commit/96ce3141976d24dbf04f17211bfd1f2c2c60dc45", "message": "JSON-P stream writer and related changes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-05-15T08:40:23Z", "type": "forcePushed"}, {"oid": "a8ac088efb21c19dbecb7b84ce3f40ba01499218", "url": "https://github.com/oracle/helidon/commit/a8ac088efb21c19dbecb7b84ce3f40ba01499218", "message": "JSON-P stream writer and related changes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-05-15T09:19:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTQzNg==", "url": "https://github.com/oracle/helidon/pull/1796#discussion_r426055436", "bodyText": "Add a unit test.", "author": "tomas-langer", "createdAt": "2020-05-15T21:28:34Z", "path": "media/jsonp/common/src/main/java/io/helidon/media/jsonp/common/JsonpBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonp.common;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.json.JsonStructure;\n+import javax.json.JsonWriterFactory;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.common.reactive.Single;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+import io.helidon.media.jsonp.common.JsonpBodyWriter.JsonStructureToChunks;\n+\n+/**\n+ * Message body writer for {@link javax.json.JsonStructure} sub-classes (JSON-P).\n+ */\n+public class JsonpBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure> {", "originalCommit": "a8ac088efb21c19dbecb7b84ce3f40ba01499218", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d187478dd1a38146640e14bdc85d2c85cefe302", "url": "https://github.com/oracle/helidon/commit/6d187478dd1a38146640e14bdc85d2c85cefe302", "message": "JSON-P stream writer and related changes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-05-16T10:01:18Z", "type": "commit"}, {"oid": "845fba7ab41f7e6953784ee86a4554d79f690d8e", "url": "https://github.com/oracle/helidon/commit/845fba7ab41f7e6953784ee86a4554d79f690d8e", "message": "Updated according to changes in #1806.\nChanged generic declaration in API to be more open for users.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-05-17T12:15:13Z", "type": "commit"}, {"oid": "845fba7ab41f7e6953784ee86a4554d79f690d8e", "url": "https://github.com/oracle/helidon/commit/845fba7ab41f7e6953784ee86a4554d79f690d8e", "message": "Updated according to changes in #1806.\nChanged generic declaration in API to be more open for users.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-05-17T12:15:13Z", "type": "forcePushed"}, {"oid": "f82c033d61a34ec76e5dcee7346535a3b542081f", "url": "https://github.com/oracle/helidon/commit/f82c033d61a34ec76e5dcee7346535a3b542081f", "message": "Fix of new API for Jackson Writer\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>", "committedDate": "2020-05-17T12:46:58Z", "type": "commit"}]}