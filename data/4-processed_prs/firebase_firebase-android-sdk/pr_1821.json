{"pr_number": 1821, "pr_title": "Add dependency vendoring support.", "pr_createdAt": "2020-07-24T15:44:31Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1821", "timeline": [{"oid": "252daa80f25c823087d79724899f386cdd5691a4", "url": "https://github.com/firebase/firebase-android-sdk/commit/252daa80f25c823087d79724899f386cdd5691a4", "message": "Add dependency vendoring support.\n\nThe `VendorPlugin`(applied with `id 'firebase-vendor'`) adds a dedicated\n`vendor` gradle configuration to the project, which can be used to\ninclude the dependencies in the output library. Such dependencies are\nare shaded under the library's package name to avoid symbol collisions.\n\nExample use:\n```kotlin\nplugins {\n  id(\"com.android.library\")\n  id(\"firebase-vendor\")\n}\n\nandroid {\n  // ...\n}\n\ndependencies {\n  implementation(\"com.example:somelib:1.0\")\n\n  // this will make this library available at compile time as well as\n  // will vendor it inside the produced aar under `com.mylib.com.example`.\n  vendor(\"com.example:libtovendor:1.0\") {\n    // IMPORTANT: it the library (transitively) depends on any library\n    that contains `javax` or `java` packages, it must be excluded here\n    and added as a pom dependency below.\n    exclude(\"javax.inject\", \"javax.inject\")\n  }\n  implementation(\"javax.inject:javax.inject:1\")\n}\n```", "committedDate": "2020-07-24T15:45:10Z", "type": "forcePushed"}, {"oid": "29be7c9f77c604e69b0a8b141eafb8d6497aff31", "url": "https://github.com/firebase/firebase-android-sdk/commit/29be7c9f77c604e69b0a8b141eafb8d6497aff31", "message": "Remove dead code elimination.", "committedDate": "2020-08-14T19:30:05Z", "type": "forcePushed"}, {"oid": "1de3d2fd7b24d8e128a4c3a310cb17335917f5f5", "url": "https://github.com/firebase/firebase-android-sdk/commit/1de3d2fd7b24d8e128a4c3a310cb17335917f5f5", "message": "Undo agp upgrade", "committedDate": "2020-08-14T20:21:12Z", "type": "forcePushed"}, {"oid": "56f32fbd79c82dce80f5b3e110e1892929b6e6df", "url": "https://github.com/firebase/firebase-android-sdk/commit/56f32fbd79c82dce80f5b3e110e1892929b6e6df", "message": "Add dependency vendoring support.\n\nThe `VendorPlugin`(applied with `id 'firebase-vendor'`) adds a dedicated\n`vendor` gradle configuration to the project, which can be used to\ninclude the dependencies in the output library. Such dependencies are\nare shaded under the library's package name to avoid symbol collisions.\n\nExample use:\n```kotlin\nplugins {\n  id(\"com.android.library\")\n  id(\"firebase-vendor\")\n}\n\nandroid {\n  // ...\n}\n\ndependencies {\n  implementation(\"com.example:somelib:1.0\")\n\n  // this will make this library available at compile time as well as\n  // will vendor it inside the produced aar under `com.mylib.com.example`.\n  vendor(\"com.example:libtovendor:1.0\") {\n    // IMPORTANT: it the library (transitively) depends on any library\n    that contains `javax` or `java` packages, it must be excluded here\n    and added as a pom dependency below.\n    exclude(\"javax.inject\", \"javax.inject\")\n  }\n  implementation(\"javax.inject:javax.inject:1\")\n}\n```", "committedDate": "2020-08-17T16:01:43Z", "type": "commit"}, {"oid": "56f32fbd79c82dce80f5b3e110e1892929b6e6df", "url": "https://github.com/firebase/firebase-android-sdk/commit/56f32fbd79c82dce80f5b3e110e1892929b6e6df", "message": "Add dependency vendoring support.\n\nThe `VendorPlugin`(applied with `id 'firebase-vendor'`) adds a dedicated\n`vendor` gradle configuration to the project, which can be used to\ninclude the dependencies in the output library. Such dependencies are\nare shaded under the library's package name to avoid symbol collisions.\n\nExample use:\n```kotlin\nplugins {\n  id(\"com.android.library\")\n  id(\"firebase-vendor\")\n}\n\nandroid {\n  // ...\n}\n\ndependencies {\n  implementation(\"com.example:somelib:1.0\")\n\n  // this will make this library available at compile time as well as\n  // will vendor it inside the produced aar under `com.mylib.com.example`.\n  vendor(\"com.example:libtovendor:1.0\") {\n    // IMPORTANT: it the library (transitively) depends on any library\n    that contains `javax` or `java` packages, it must be excluded here\n    and added as a pom dependency below.\n    exclude(\"javax.inject\", \"javax.inject\")\n  }\n  implementation(\"javax.inject:javax.inject:1\")\n}\n```", "committedDate": "2020-08-17T16:01:43Z", "type": "forcePushed"}, {"oid": "acff7b6d231e664393566e830f7cf84814e9614a", "url": "https://github.com/firebase/firebase-android-sdk/commit/acff7b6d231e664393566e830f7cf84814e9614a", "message": "Fix dep", "committedDate": "2020-08-17T16:54:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNDEyMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1821#discussion_r472414120", "bodyText": "what's this comment code for?", "author": "rlazo", "createdAt": "2020-08-18T18:59:00Z", "path": "buildSrc/src/main/java/com/google/firebase/gradle/plugins/VendorPlugin.kt", "diffHunk": "@@ -0,0 +1,260 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.gradle.plugins\n+\n+import com.android.build.api.transform.Format\n+import com.android.build.api.transform.QualifiedContent\n+import com.android.build.api.transform.Transform\n+import com.android.build.api.transform.TransformInvocation\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.LibraryPlugin\n+import java.io.BufferedInputStream\n+import java.io.BufferedOutputStream\n+import java.io.File\n+import java.io.FileInputStream\n+import java.io.FileOutputStream\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipFile\n+import java.util.zip.ZipOutputStream\n+import org.gradle.api.GradleException\n+import org.gradle.api.Plugin\n+import org.gradle.api.Project\n+import org.gradle.api.artifacts.Configuration\n+import org.gradle.api.logging.Logger\n+\n+class VendorPlugin : Plugin<Project> {\n+    override fun apply(project: Project) {\n+        project.plugins.all {\n+            when (this) {\n+                is LibraryPlugin -> configureAndroid(project)\n+            }\n+        }\n+    }\n+\n+    fun configureAndroid(project: Project) {\n+\n+        val vendor = project.configurations.create(\"vendor\")\n+        project.configurations.all {\n+            when (name) {\n+                \"compileOnly\", \"testImplementation\", \"androidTestImplementation\" -> extendsFrom(vendor)\n+            }\n+        }\n+\n+        val jarJar = project.configurations.create(\"firebaseJarJarArtifact\")\n+        project.dependencies.add(\"firebaseJarJarArtifact\", \"org.pantsbuild:jarjar:1.7.2\")\n+\n+        val android = project.extensions.getByType(LibraryExtension::class.java)\n+\n+        android.registerTransform(VendorTransform(\n+                android,\n+                vendor,\n+                JarJarTransformer(\n+                        parentPackageProvider = {\n+                            android.libraryVariants.find { it.name == \"release\" }!!.applicationId\n+                        },\n+                        jarJarProvider = { jarJar.resolve() },\n+                        project = project,\n+                        logger = project.logger),\n+                logger = project.logger))\n+    }\n+}\n+\n+interface JarTransformer {\n+    fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>)\n+}\n+\n+class JarJarTransformer(\n+    private val parentPackageProvider: () -> String,\n+    private val jarJarProvider: () -> Collection<File>,\n+    private val project: Project,\n+    private val logger: Logger\n+) : JarTransformer {\n+    override fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>) {\n+        val parentPackage = parentPackageProvider()\n+        val rulesFile = File.createTempFile(parentPackage, \".jarjar\")\n+        rulesFile.printWriter().use {\n+            for (externalPackageName in packagesToVendor) {\n+                it.println(\"rule $externalPackageName.** $parentPackage.@0\")\n+            }\n+        }\n+        logger.info(\"The following JarJar configuration will be used:\\n ${rulesFile.readText()}\")\n+\n+        project.javaexec {\n+            main = \"org.pantsbuild.jarjar.Main\"\n+            classpath = project.files(jarJarProvider())\n+            // jvmArgs = listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\")", "originalCommit": "acff7b6d231e664393566e830f7cf84814e9614a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzODk5Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1821#discussion_r472438996", "bodyText": "debugging leftovers :)\nremoved", "author": "vkryachko", "createdAt": "2020-08-18T19:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNDEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNTI3Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1821#discussion_r472415277", "bodyText": "maybe upgrade it to warning? I think it's more likely that devs forgot to include the lib to vendor than that they forgot to remove the unnecessary plugin.", "author": "rlazo", "createdAt": "2020-08-18T19:01:07Z", "path": "buildSrc/src/main/java/com/google/firebase/gradle/plugins/VendorPlugin.kt", "diffHunk": "@@ -0,0 +1,260 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.gradle.plugins\n+\n+import com.android.build.api.transform.Format\n+import com.android.build.api.transform.QualifiedContent\n+import com.android.build.api.transform.Transform\n+import com.android.build.api.transform.TransformInvocation\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.LibraryPlugin\n+import java.io.BufferedInputStream\n+import java.io.BufferedOutputStream\n+import java.io.File\n+import java.io.FileInputStream\n+import java.io.FileOutputStream\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipFile\n+import java.util.zip.ZipOutputStream\n+import org.gradle.api.GradleException\n+import org.gradle.api.Plugin\n+import org.gradle.api.Project\n+import org.gradle.api.artifacts.Configuration\n+import org.gradle.api.logging.Logger\n+\n+class VendorPlugin : Plugin<Project> {\n+    override fun apply(project: Project) {\n+        project.plugins.all {\n+            when (this) {\n+                is LibraryPlugin -> configureAndroid(project)\n+            }\n+        }\n+    }\n+\n+    fun configureAndroid(project: Project) {\n+\n+        val vendor = project.configurations.create(\"vendor\")\n+        project.configurations.all {\n+            when (name) {\n+                \"compileOnly\", \"testImplementation\", \"androidTestImplementation\" -> extendsFrom(vendor)\n+            }\n+        }\n+\n+        val jarJar = project.configurations.create(\"firebaseJarJarArtifact\")\n+        project.dependencies.add(\"firebaseJarJarArtifact\", \"org.pantsbuild:jarjar:1.7.2\")\n+\n+        val android = project.extensions.getByType(LibraryExtension::class.java)\n+\n+        android.registerTransform(VendorTransform(\n+                android,\n+                vendor,\n+                JarJarTransformer(\n+                        parentPackageProvider = {\n+                            android.libraryVariants.find { it.name == \"release\" }!!.applicationId\n+                        },\n+                        jarJarProvider = { jarJar.resolve() },\n+                        project = project,\n+                        logger = project.logger),\n+                logger = project.logger))\n+    }\n+}\n+\n+interface JarTransformer {\n+    fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>)\n+}\n+\n+class JarJarTransformer(\n+    private val parentPackageProvider: () -> String,\n+    private val jarJarProvider: () -> Collection<File>,\n+    private val project: Project,\n+    private val logger: Logger\n+) : JarTransformer {\n+    override fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>) {\n+        val parentPackage = parentPackageProvider()\n+        val rulesFile = File.createTempFile(parentPackage, \".jarjar\")\n+        rulesFile.printWriter().use {\n+            for (externalPackageName in packagesToVendor) {\n+                it.println(\"rule $externalPackageName.** $parentPackage.@0\")\n+            }\n+        }\n+        logger.info(\"The following JarJar configuration will be used:\\n ${rulesFile.readText()}\")\n+\n+        project.javaexec {\n+            main = \"org.pantsbuild.jarjar.Main\"\n+            classpath = project.files(jarJarProvider())\n+            // jvmArgs = listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\")\n+            args = listOf(\"process\", rulesFile.absolutePath, inputJar.absolutePath, outputJar.absolutePath)\n+            systemProperties = mapOf(\"verbose\" to \"true\", \"misplacedClassStrategy\" to \"FATAL\")\n+        }.assertNormalExitValue()\n+    }\n+}\n+\n+class VendorTransform(\n+    private val android: LibraryExtension,\n+    private val configuration: Configuration,\n+    private val jarTransformer: JarTransformer,\n+    private val logger: Logger\n+) :\n+        Transform() {\n+    override fun getName() = \"firebaseVendorTransform\"\n+\n+    override fun getInputTypes(): MutableSet<QualifiedContent.ContentType> {\n+        return mutableSetOf(QualifiedContent.DefaultContentType.CLASSES)\n+    }\n+\n+    override fun isIncremental() = false\n+\n+    override fun getScopes(): MutableSet<in QualifiedContent.Scope> {\n+        return mutableSetOf(QualifiedContent.Scope.PROJECT)\n+    }\n+\n+    override fun getReferencedScopes(): MutableSet<in QualifiedContent.Scope> {\n+        return mutableSetOf(QualifiedContent.Scope.PROJECT)\n+    }\n+\n+    override fun transform(transformInvocation: TransformInvocation) {\n+        if (configuration.resolve().isEmpty()) {\n+            logger.info(\"Nothing to vendor. \" +", "originalCommit": "acff7b6d231e664393566e830f7cf84814e9614a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "30db30bba8be112203a62834e1e7d6378c58af51", "url": "https://github.com/firebase/firebase-android-sdk/commit/30db30bba8be112203a62834e1e7d6378c58af51", "message": "Address review comments.", "committedDate": "2020-08-18T19:45:47Z", "type": "commit"}]}