{"pr_number": 1377, "pr_title": "Improve coverage report format in GitHub pull requests.", "pr_createdAt": "2020-03-20T16:33:24Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1377", "timeline": [{"oid": "63c88cfca72cf661175b1a4e753d27352ac6d5d4", "url": "https://github.com/firebase/firebase-android-sdk/commit/63c88cfca72cf661175b1a4e753d27352ac6d5d4", "message": "Improve coverage report format in GitHub pull requests.\n\nCalculate and upload coverage reports to our own Metrics Service instead\nof Codecov.", "committedDate": "2020-03-24T05:18:55Z", "type": "commit"}, {"oid": "1366c0c7b7c8952934d6af4fcb333d31a48dc15e", "url": "https://github.com/firebase/firebase-android-sdk/commit/1366c0c7b7c8952934d6af4fcb333d31a48dc15e", "message": "Coverage parsing and uploading in fireci.", "committedDate": "2020-03-24T18:12:34Z", "type": "commit"}, {"oid": "1366c0c7b7c8952934d6af4fcb333d31a48dc15e", "url": "https://github.com/firebase/firebase-android-sdk/commit/1366c0c7b7c8952934d6af4fcb333d31a48dc15e", "message": "Coverage parsing and uploading in fireci.", "committedDate": "2020-03-24T18:12:34Z", "type": "forcePushed"}, {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510", "url": "https://github.com/firebase/firebase-android-sdk/commit/964a6a1febaf1c7ad3d231f14d356caf49269510", "message": "Revert changes in the uploader.", "committedDate": "2020-03-24T18:24:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjM3Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397502376", "bodyText": "Pls add:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE)\n          \n          \n            \n              result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE, check=True)\n          \n      \n    \n    \n  \n\nOtherwise you won't know if gcloud fails", "author": "vkryachko", "createdAt": "2020-03-24T22:34:10Z", "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')\n+  endpoint = construct_request_endpoint()\n+  headers = construct_request_header()\n+\n+  print('Posting to the metrics service ...')\n+  print(f'Request endpoint: {endpoint}')\n+  print(f'Request data: {data}')\n+  result = requests.post(f'{metrics_service_url}{endpoint}', data=data, headers=headers)\n+  print(f'Response: {result.text}')\n+\n+\n+def construct_request_header():\n+  result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE)", "originalCommit": "964a6a1febaf1c7ad3d231f14d356caf49269510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzIyMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397507221", "bodyText": "additionally, this seems a good candidate for a cli flag as well with a default that makes the subprocess call, that way if one has a token it can be passed in without an additonal call to gcloud", "author": "vkryachko", "createdAt": "2020-03-24T22:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNDg1OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398004858", "bodyText": "Done.", "author": "yifanyang", "createdAt": "2020-03-25T16:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjkyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397502926", "bodyText": "pls use logging.getLogger('fireci.coverage') throughout.", "author": "vkryachko", "createdAt": "2020-03-24T22:35:30Z", "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')\n+  endpoint = construct_request_endpoint()\n+  headers = construct_request_header()\n+\n+  print('Posting to the metrics service ...')", "originalCommit": "964a6a1febaf1c7ad3d231f14d356caf49269510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNTEwMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398005102", "bodyText": "Done.", "author": "yifanyang", "createdAt": "2020-03-25T16:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTUzMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397505533", "bodyText": "Consider making this a flag and have its default point to this function.", "author": "vkryachko", "createdAt": "2020-03-24T22:42:20Z", "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():", "originalCommit": "964a6a1febaf1c7ad3d231f14d356caf49269510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNTUzMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398005532", "bodyText": "Done.", "author": "yifanyang", "createdAt": "2020-03-25T16:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397506482", "bodyText": "consider making this an option with envvar=\"METRICS_SERVICE_URL\"", "author": "vkryachko", "createdAt": "2020-03-24T22:44:37Z", "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')", "originalCommit": "964a6a1febaf1c7ad3d231f14d356caf49269510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTE4NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397515185", "bodyText": "By \"option\", do you mean a @click.option?", "author": "yifanyang", "createdAt": "2020-03-24T23:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM0NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397522345", "bodyText": "Oh, I get it.\nhttps://click.palletsprojects.com/en/7.x/arguments/#environment-variables", "author": "yifanyang", "createdAt": "2020-03-24T23:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNTU5Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398005597", "bodyText": "Done.", "author": "yifanyang", "createdAt": "2020-03-25T16:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg=="}], "type": "inlineReview"}, {"oid": "ed32d1b971b711c27812f1a9b8c81766f3d968c9", "url": "https://github.com/firebase/firebase-android-sdk/commit/ed32d1b971b711c27812f1a9b8c81766f3d968c9", "message": "Do not fail fast on coverage tasks.", "committedDate": "2020-03-24T22:47:36Z", "type": "commit"}, {"oid": "aa1370d605ef3ce7edf78eb0fec6f9df693e046a", "url": "https://github.com/firebase/firebase-android-sdk/commit/aa1370d605ef3ce7edf78eb0fec6f9df693e046a", "message": "Address feedback.", "committedDate": "2020-03-25T11:29:39Z", "type": "commit"}]}