{"pr_number": 1260, "pr_title": "Remove guava usage from firestore.", "pr_createdAt": "2020-02-20T16:06:27Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1260", "timeline": [{"oid": "1f12cea13c8d0f10dfc6c303f434b85f70041edd", "url": "https://github.com/firebase/firebase-android-sdk/commit/1f12cea13c8d0f10dfc6c303f434b85f70041edd", "message": "Replace guava Preconditions class", "committedDate": "2020-02-19T15:17:58Z", "type": "commit"}, {"oid": "374e2b25d4de3192a70f30154e8f04759b5dfe58", "url": "https://github.com/firebase/firebase-android-sdk/commit/374e2b25d4de3192a70f30154e8f04759b5dfe58", "message": "Replace guava Function and Splitter", "committedDate": "2020-02-19T15:57:03Z", "type": "commit"}, {"oid": "0cb59b8a531600f6dca1851ad3cb46bd64d7e51a", "url": "https://github.com/firebase/firebase-android-sdk/commit/0cb59b8a531600f6dca1851ad3cb46bd64d7e51a", "message": "Replace Lists.", "committedDate": "2020-02-20T15:44:58Z", "type": "commit"}, {"oid": "e327a46014f78f2e21b4e26a6424c87001999050", "url": "https://github.com/firebase/firebase-android-sdk/commit/e327a46014f78f2e21b4e26a6424c87001999050", "message": "Replace MoreObjects.", "committedDate": "2020-02-20T15:59:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzODEyOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382138129", "bodyText": "Please mention the source of this file somewhere (preferably a GitHub link to the Guava sources)", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:10:44Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static com.google.firebase.firestore.util.Strings.lenientFormat;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+public class Preconditions {", "originalCommit": "1f12cea13c8d0f10dfc6c303f434b85f70041edd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyOTM4Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382629383", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T15:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzODEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzOTUwOA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382139508", "bodyText": "If I read this comment correctly, we should be able to drop this method and replace its usage by String.format, reducing the size of this PR. The risk that String.format crashes seems minuscule given our usage.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:13:14Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Strings.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static java.util.logging.Level.WARNING;\n+\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+public class Strings {\n+  /**\n+   * Returns the given {@code template} string with each occurrence of {@code \"%s\"} replaced with\n+   * the corresponding argument value from {@code args}; or, if the placeholder and argument counts\n+   * do not match, returns a best-effort form of that string. Will not throw an exception under\n+   * normal conditions.\n+   *\n+   * <p><b>Note:</b> For most string-formatting needs, use {@link String#format String.format},\n+   * {@link java.io.PrintWriter#format PrintWriter.format}, and related methods. These support the\n+   * full range of <a\n+   * href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Formatter.html#syntax\">format\n+   * specifiers</a>, and alert you to usage errors by throwing {@link\n+   * java.util.IllegalFormatException}.\n+   *\n+   * <p>In certain cases, such as outputting debugging information or constructing a message to be\n+   * used for another unchecked exception, an exception during string formatting would serve little\n+   * purpose except to supplant the real information you were trying to provide. These are the cases\n+   * this method is made for; it instead generates a best-effort string with all supplied argument\n+   * values present. This method is also useful in environments such as GWT where {@code\n+   * String.format} is not available. As an example, method implementations of the {@link\n+   * Preconditions} class use this formatter, for both of the reasons just discussed.\n+   *\n+   * <p><b>Warning:</b> Only the exact two-character placeholder sequence {@code \"%s\"} is\n+   * recognized.\n+   *\n+   * @param template a string containing zero or more {@code \"%s\"} placeholder sequences. {@code\n+   *     null} is treated as the four-character string {@code \"null\"}.\n+   * @param args the arguments to be substituted into the message template. The first argument\n+   *     specified is substituted for the first occurrence of {@code \"%s\"} in the template, and so\n+   *     forth. A {@code null} argument is converted to the four-character string {@code \"null\"};\n+   *     non-null values are converted to strings using {@link Object#toString()}.\n+   * @since 25.1\n+   */\n+  public static String lenientFormat(@Nullable String template, @Nullable Object... args) {", "originalCommit": "1f12cea13c8d0f10dfc6c303f434b85f70041edd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyOTI5OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382629299", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T15:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzOTUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MTUwNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382141504", "bodyText": "Nit: You can just inline the call to new ArrayList, which would remove all those generic parameters.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:16:50Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/core/SyncEngine.java", "diffHunk": "@@ -461,11 +460,12 @@ public void registerPendingWritesTask(TaskCompletionSource<Void> userTask) {\n       return;\n     }\n \n-    if (pendingWritesCallbacks.containsKey(largestPendingBatchId)) {\n-      pendingWritesCallbacks.get(largestPendingBatchId).add(userTask);\n-    } else {\n-      pendingWritesCallbacks.put(largestPendingBatchId, Lists.newArrayList(userTask));\n+    if (!pendingWritesCallbacks.containsKey(largestPendingBatchId)) {\n+      List<TaskCompletionSource<Void>> tasks = new ArrayList();\n+      pendingWritesCallbacks.put(largestPendingBatchId, tasks);", "originalCommit": "0cb59b8a531600f6dca1851ad3cb46bd64d7e51a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMTc1Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382621753", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T14:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MTUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDQ3MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382144470", "bodyText": "Nit: This is a private method. I don't think we need to do null-checks here. rightPath and leftPath would only be null if the Proto is invalid, in which case leftPath.split() would throw the same NPE that you are checking for manually.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:22:03Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/Values.java", "diffHunk": "@@ -264,8 +265,11 @@ private static int compareTimestamps(Timestamp left, Timestamp right) {\n   }\n \n   private static int compareReferences(String leftPath, String rightPath) {\n-    List<String> leftSegments = Splitter.on('/').splitToList(leftPath);\n-    List<String> rightSegments = Splitter.on('/').splitToList(rightPath);\n+    checkNotNull(leftPath);\n+    checkNotNull(rightPath);\n+    List<String> leftSegments = Lists.newArrayList(leftPath.split(\"/\"));", "originalCommit": "374e2b25d4de3192a70f30154e8f04759b5dfe58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMjgyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382332826", "bodyText": "For background: checkNotNull is only useful if you're retaining an argument in a method but not actually using it there. The best example is if you're taking a constructor argument and assigning it to an instance variable without using it. The idea is to force the NPE to happen at the point where the caller is apparent.", "author": "wilhuff", "createdAt": "2020-02-21T00:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDg4Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382144882", "bodyText": "Consider copying the class JavaDoc.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:22:49Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static com.google.firebase.firestore.util.Strings.lenientFormat;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+", "originalCommit": "e327a46014f78f2e21b4e26a6424c87001999050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyNjk0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382626948", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T14:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NDg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NTA3NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382145074", "bodyText": "Please mention somewhere that this is a copy and link to its source.", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:23:08Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Determines an output value based on an input value; a pre-Java-8 version of {@link\n+ * java.util.function.Function java.util.function.Function}.\n+ *\n+ * <p>See the Guava User Guide article on <a\n+ * href=\"https://github.com/google/guava/wiki/FunctionalExplained\">the use of {@code Function}</a>.\n+ *\n+ * <h3>For Java 8+ users</h3>\n+ *\n+ * <p>This interface is now a legacy type. Use {@code java.util.function.Function} (or the\n+ * appropriate primitive specialization such as {@code ToIntFunction}) instead whenever possible.\n+ * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions\n+ * or method references instead of classes, leaving your code easier to migrate in the future.\n+ *\n+ * <p>To use an existing function (say, named {@code function}) in a context where the <i>other\n+ * type</i> of function is expected, use the method reference {@code function::apply}. A future\n+ * version of {@code com.google.firebase.firestore.util.Function} will be made to <i>extend</i>\n+ * {@code java.util.function.Function}, making conversion code necessary only in one direction. At\n+ * that time, this interface will be officially discouraged.\n+ *\n+ * @author Kevin Bourrillion\n+ * @since 2.0\n+ */\n+public interface Function<F, T> {", "originalCommit": "374e2b25d4de3192a70f30154e8f04759b5dfe58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyNDU0NQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382624545", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T14:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NTA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NzAxMQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382147011", "bodyText": "Please replace the only usage of this class with a custom toString() implementation (as we have done in almost all other places of the code base).", "author": "schmidt-sebastian", "createdAt": "2020-02-20T17:26:41Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/MoreObjects.java", "diffHunk": "@@ -0,0 +1,358 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore.util;\n+\n+import static com.google.firebase.firestore.util.Preconditions.checkNotNull;\n+\n+import com.google.errorprone.annotations.CanIgnoreReturnValue;\n+import java.util.Arrays;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Helper functions that operate on any {@code Object}, and are not already provided in {@link\n+ * java.util.Objects}.\n+ *\n+ * <p>See the Guava User Guide on <a\n+ * href=\"https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained\">writing {@code Object}\n+ * methods with {@code MoreObjects}</a>.\n+ *\n+ * @author Laurence Gonsalves\n+ * @since 18.0 (since 2.0 as {@code Objects})\n+ */\n+public final class MoreObjects {", "originalCommit": "e327a46014f78f2e21b4e26a6424c87001999050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNTU5Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382635597", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T15:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0NzAxMQ=="}], "type": "inlineReview"}, {"oid": "ad09d488d082b21c53af1fca3214b31d3f72404b", "url": "https://github.com/firebase/firebase-android-sdk/commit/ad09d488d082b21c53af1fca3214b31d3f72404b", "message": "Address comments.", "committedDate": "2020-02-21T15:20:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzgzMg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382737832", "bodyText": "Nit: This is a somewhat strange combination of StringBuilder and String.format. Do you mind using the pattern used here: \n  \n    \n      firebase-android-sdk/firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java\n    \n    \n         Line 108\n      in\n      8409ac4\n    \n    \n    \n    \n\n        \n          \n           public String toString() { \n        \n    \n  \n\n\nPlease also take a look here:\nhttps://stackoverflow.com/questions/1532461/stringbuilder-vs-string-concatenation-in-tostring-in-java\nTL/DR: The Java compiler will generate the same code for you.", "author": "schmidt-sebastian", "createdAt": "2020-02-21T18:30:03Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/FirebaseFirestoreSettings.java", "diffHunk": "@@ -221,12 +220,17 @@ public int hashCode() {\n   @Override\n   @NonNull\n   public String toString() {\n-    return MoreObjects.toStringHelper(this)\n-        .add(\"host\", host)\n-        .add(\"sslEnabled\", sslEnabled)\n-        .add(\"persistenceEnabled\", persistenceEnabled)\n-        .add(\"timestampsInSnapshotsEnabled\", timestampsInSnapshotsEnabled)\n-        .toString();\n+    StringBuilder builder = new StringBuilder(\"FirebaseFirestoreSettings{\");\n+\n+    builder.append(String.format(\"host=%s, \", host));\n+    builder.append(String.format(\"sslEnabled=%s, \", sslEnabled));\n+    builder.append(String.format(\"persistenceEnabled=%s, \", persistenceEnabled));\n+    builder.append(\n+        String.format(\"timestampsInSnapshotsEnabled=%s, \", timestampsInSnapshotsEnabled));\n+    builder.append(String.format(\"cacheSizeBytes=%s\", cacheSizeBytes));\n+", "originalCommit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2OTgxOQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382769819", "bodyText": "Done. Thanks.", "author": "wu-hui", "createdAt": "2020-02-21T19:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODM0OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382738348", "bodyText": "Please move this outside the class JavaDoc, as you likely don't want this to be the summary of this API. I would recommend just moving this above in // style comment.", "author": "schmidt-sebastian", "createdAt": "2020-02-21T18:31:07Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Function.java", "diffHunk": "@@ -17,7 +17,10 @@\n import javax.annotation.Nullable;\n \n /**\n- * Determines an output value based on an input value; a pre-Java-8 version of {@link\n+ * This is a copy of", "originalCommit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MDI0Ng==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382770246", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T19:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODQ1OQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382738459", "bodyText": "Same comment regarding the placement of this.", "author": "schmidt-sebastian", "createdAt": "2020-02-21T18:31:24Z", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Preconditions.java", "diffHunk": "@@ -14,11 +14,87 @@\n \n package com.google.firebase.firestore.util;\n \n-import static com.google.firebase.firestore.util.Strings.lenientFormat;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+/**\n+ * This is an adaptation of\n+ * https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Preconditions.java.", "originalCommit": "ad09d488d082b21c53af1fca3214b31d3f72404b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MTgyMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1260#discussion_r382771823", "bodyText": "Done.", "author": "wu-hui", "createdAt": "2020-02-21T19:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczODQ1OQ=="}], "type": "inlineReview"}, {"oid": "3d6fceffc07fd3188b55cf8f241945719c851d0a", "url": "https://github.com/firebase/firebase-android-sdk/commit/3d6fceffc07fd3188b55cf8f241945719c851d0a", "message": "Address comments 2.", "committedDate": "2020-02-21T19:45:28Z", "type": "commit"}]}