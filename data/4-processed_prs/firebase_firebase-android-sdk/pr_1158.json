{"pr_number": 1158, "pr_title": "Adding test utilities to create Value types", "pr_createdAt": "2020-01-23T16:58:43Z", "pr_url": "https://github.com/firebase/firebase-android-sdk/pull/1158", "timeline": [{"oid": "5d3f44dbe37c5ef91bb90e4ad6fbf9e71e68f2d3", "url": "https://github.com/firebase/firebase-android-sdk/commit/5d3f44dbe37c5ef91bb90e4ad6fbf9e71e68f2d3", "message": "Adding Proto-based equality and comparison\n\nThis will be used (and tested) in the follow-up CL that adds the FieldValue tpes.", "committedDate": "2020-01-23T16:50:09Z", "type": "commit"}, {"oid": "5d006f0d59f7fa8df29414201376a61e1b54a355", "url": "https://github.com/firebase/firebase-android-sdk/commit/5d006f0d59f7fa8df29414201376a61e1b54a355", "message": "Adding test utilities to create Value types\n\nThis exposes a similar interface as wrap() and allows me to change the existing FieldValue test to use Value protos", "committedDate": "2020-01-23T16:57:17Z", "type": "commit"}, {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "url": "https://github.com/firebase/firebase-android-sdk/commit/8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "message": "Merge branch 'mrschmidt/comparisons' into mrschmidt/testhelpers", "committedDate": "2020-01-23T18:01:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDMyMA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370284320", "bodyText": "I'm not a huge fan of classes named with \"Util\" or \"Helper\". How about just Values? This is a convention found in Guava, where e.g. helpers for creating/manipulating lists are in Lists.", "author": "wilhuff", "createdAt": "2020-01-23T18:31:07Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {", "originalCommit": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxODg5NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370318894", "bodyText": "ValueHelperUtil it is :)\nI renamed it to Values. FWIW, in most APIs that use this convention, the helper library and the main library sit in the same package, which we can't do here.", "author": "schmidt-sebastian", "createdAt": "2020-01-23T19:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MzQ5Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370443497", "bodyText": "Lists is a great example because it's a collection of Guava utilities about java.util.List. In other cases where the library has a class and static utilities for dealing with it, it makes sense that they'd colocate them. I don't think that invalidates the static utilities as plurals convention.\nSee go/java-practices/utility-classes.md.", "author": "wilhuff", "createdAt": "2020-01-24T01:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzkwNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370287904", "bodyText": "The rest of this class doesn't really have much to do with wrapping, but does create values. How about refValue or something like that?", "author": "wilhuff", "createdAt": "2020-01-23T18:38:46Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())\n+          .build());\n+    } else if (o instanceof GeoPoint) {\n+      GeoPoint geoPoint = (GeoPoint) o;\n+      return (Value.newBuilder()\n+          .setGeoPointValue(\n+              LatLng.newBuilder()\n+                  .setLatitude(geoPoint.getLatitude())\n+                  .setLongitude(geoPoint.getLongitude())\n+                  .build())\n+          .build());\n+    } else if (o instanceof Blob) {\n+      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n+    } else if (o instanceof DocumentReference) {\n+      return (Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/projectId/databases/(default)/documents/\"\n+                  + ((DocumentReference) o).getPath())\n+          .build());\n+    } else if (o instanceof List) {\n+      ArrayValue.Builder list = ArrayValue.newBuilder();\n+      for (Object element : (List) o) {\n+        list.addValues(valueOf(element));\n+      }\n+      return (Value.newBuilder().setArrayValue(list).build());\n+    } else if (o == null) {\n+      return (Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build());\n+    }\n+\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public static Value map(Object... entries) {\n+    com.google.firestore.v1.MapValue.Builder builder =\n+        com.google.firestore.v1.MapValue.newBuilder();\n+    for (int i = 0; i < entries.length; i += 2) {\n+      builder.putFields((String) entries[i], valueOf(entries[i + 1]));\n+    }\n+    return Value.newBuilder().setMapValue(builder).build();\n+  }\n+\n+  public static Value wrapRef(DatabaseId dbId, DocumentKey key) {", "originalCommit": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDU5Nw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370320597", "bodyText": "Done", "author": "schmidt-sebastian", "createdAt": "2020-01-23T19:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODE0Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370288143", "bodyText": "Extra parens, here and throughout.", "author": "wilhuff", "createdAt": "2020-01-23T18:39:18Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());", "originalCommit": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxOTY2OA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370319668", "bodyText": "Removed. Sorry, I was quite certain googleJavaFormat would do this for me.", "author": "schmidt-sebastian", "createdAt": "2020-01-23T19:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODYwMw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370288603", "bodyText": "This inner build() is unnecessary. Proto setters take messages or builders and automatically call build() for you.", "author": "wilhuff", "createdAt": "2020-01-23T18:40:21Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())", "originalCommit": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxOTg5MA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370319890", "bodyText": "Removed here and for GeoPoint.", "author": "schmidt-sebastian", "createdAt": "2020-01-23T19:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTA5Mw==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370289093", "bodyText": "projectId isn't a valid project identifier. Elsewhere we've just used \"project\", FWIW.", "author": "wilhuff", "createdAt": "2020-01-23T18:41:23Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())\n+          .build());\n+    } else if (o instanceof GeoPoint) {\n+      GeoPoint geoPoint = (GeoPoint) o;\n+      return (Value.newBuilder()\n+          .setGeoPointValue(\n+              LatLng.newBuilder()\n+                  .setLatitude(geoPoint.getLatitude())\n+                  .setLongitude(geoPoint.getLongitude())\n+                  .build())\n+          .build());\n+    } else if (o instanceof Blob) {\n+      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n+    } else if (o instanceof DocumentReference) {\n+      return (Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/projectId/databases/(default)/documents/\"", "originalCommit": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDI4MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370320281", "bodyText": "I stole this from somewhere (SQLiteSchemaTest) and fixed it there as well.", "author": "schmidt-sebastian", "createdAt": "2020-01-23T19:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDA1Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370290052", "bodyText": "Note that you currently only need this for tests, but eventually, won't the UserDataConverter need this as well? Maybe put this in with regular sources?", "author": "wilhuff", "createdAt": "2020-01-23T18:43:23Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC", "originalCommit": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxODM2MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370318361", "bodyText": "I'd like to punt on this for now to figure out how much of this code I will need in UserDataConverter and where to put it. I added a TODO.", "author": "schmidt-sebastian", "createdAt": "2020-01-23T19:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MjMzNA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370442334", "bodyText": "FWIW, I think it's nice that this is a separate class that just has these static, simple functions. Moving it into the UserDataConverter would muddy that considerably. I was proposing just moving the class wholesale into the same package, or maybe even merging with/renaming ProtoValues and putting it in model.\nIn any case, no action required for this PR for sure.", "author": "wilhuff", "createdAt": "2020-01-24T01:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDA1Mg=="}], "type": "inlineReview"}, {"oid": "c315cdceb0a40023ddfcd0d966171b06c42e888d", "url": "https://github.com/firebase/firebase-android-sdk/commit/c315cdceb0a40023ddfcd0d966171b06c42e888d", "message": "Address feeback", "committedDate": "2020-01-23T19:14:44Z", "type": "commit"}, {"oid": "a6f880ae8b4e4b11b91dfaeaec5b1ae86e40f12c", "url": "https://github.com/firebase/firebase-android-sdk/commit/a6f880ae8b4e4b11b91dfaeaec5b1ae86e40f12c", "message": "Address feeback", "committedDate": "2020-01-23T19:40:29Z", "type": "commit"}, {"oid": "529881b881c7c9c40a6a01bb9151e298086074f4", "url": "https://github.com/firebase/firebase-android-sdk/commit/529881b881c7c9c40a6a01bb9151e298086074f4", "message": "Merge branch 'mrschmidt/comparisons' into mrschmidt/testhelpers", "committedDate": "2020-01-23T19:41:14Z", "type": "commit"}, {"oid": "c8d1ce8f68fe2cca448d4965bf6ec5272b057c91", "url": "https://github.com/firebase/firebase-android-sdk/commit/c8d1ce8f68fe2cca448d4965bf6ec5272b057c91", "message": "Review feedback", "committedDate": "2020-01-23T19:53:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0Mzg3MQ==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370443871", "bodyText": "nit: excess newline.", "author": "wilhuff", "createdAt": "2020-01-24T01:51:58Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "diffHunk": "@@ -22,62 +22,71 @@\n import com.google.protobuf.NullValue;\n import com.google.type.LatLng;\n import java.util.List;\n+import java.util.Map;\n \n /** Test helper to create Firestore Value protos from Java types. */\n-public class ValueHelper {\n+public class Values {\n \n+  // TODO(mrschmidt): Move into UserDataConverter\n   public static Value valueOf(Object o) {\n     if (o instanceof Value) {\n       return (Value) o;\n-    } else if (o instanceof String) {\n-      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o == null) {\n+      return Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build();\n+    } else if (o instanceof Boolean) {\n+      return Value.newBuilder().setBooleanValue((Boolean) o).build();\n     } else if (o instanceof Integer) {\n-      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+      return Value.newBuilder().setIntegerValue((Integer) o).build();\n     } else if (o instanceof Long) {\n-      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+      return Value.newBuilder().setIntegerValue((Long) o).build();\n     } else if (o instanceof Double) {\n-      return (Value.newBuilder().setDoubleValue((Double) o).build());\n-    } else if (o instanceof Boolean) {\n-      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+      return Value.newBuilder().setDoubleValue((Double) o).build();\n     } else if (o instanceof Timestamp) {\n       Timestamp timestamp = (Timestamp) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setTimestampValue(\n               com.google.protobuf.Timestamp.newBuilder()\n                   .setSeconds(timestamp.getSeconds())\n-                  .setNanos(timestamp.getNanoseconds())\n-                  .build())\n-          .build());\n+                  .setNanos(timestamp.getNanoseconds()))\n+          .build();\n+    } else if (o instanceof String) {\n+      return Value.newBuilder().setStringValue((String) o).build();\n+    } else if (o instanceof Blob) {\n+      return Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build();\n+", "originalCommit": "c8d1ce8f68fe2cca448d4965bf6ec5272b057c91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MDc5NA==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370740794", "bodyText": "Sorry - I forgot to address this before merging. I fixed it in the follow up PR.", "author": "schmidt-sebastian", "createdAt": "2020-01-24T17:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0Mzg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NDAyNg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370444026", "bodyText": "nit: import MapValue?", "author": "wilhuff", "createdAt": "2020-01-24T01:52:42Z", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "diffHunk": "@@ -22,62 +22,71 @@\n import com.google.protobuf.NullValue;\n import com.google.type.LatLng;\n import java.util.List;\n+import java.util.Map;\n \n /** Test helper to create Firestore Value protos from Java types. */\n-public class ValueHelper {\n+public class Values {\n \n+  // TODO(mrschmidt): Move into UserDataConverter\n   public static Value valueOf(Object o) {\n     if (o instanceof Value) {\n       return (Value) o;\n-    } else if (o instanceof String) {\n-      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o == null) {\n+      return Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build();\n+    } else if (o instanceof Boolean) {\n+      return Value.newBuilder().setBooleanValue((Boolean) o).build();\n     } else if (o instanceof Integer) {\n-      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+      return Value.newBuilder().setIntegerValue((Integer) o).build();\n     } else if (o instanceof Long) {\n-      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+      return Value.newBuilder().setIntegerValue((Long) o).build();\n     } else if (o instanceof Double) {\n-      return (Value.newBuilder().setDoubleValue((Double) o).build());\n-    } else if (o instanceof Boolean) {\n-      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+      return Value.newBuilder().setDoubleValue((Double) o).build();\n     } else if (o instanceof Timestamp) {\n       Timestamp timestamp = (Timestamp) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setTimestampValue(\n               com.google.protobuf.Timestamp.newBuilder()\n                   .setSeconds(timestamp.getSeconds())\n-                  .setNanos(timestamp.getNanoseconds())\n-                  .build())\n-          .build());\n+                  .setNanos(timestamp.getNanoseconds()))\n+          .build();\n+    } else if (o instanceof String) {\n+      return Value.newBuilder().setStringValue((String) o).build();\n+    } else if (o instanceof Blob) {\n+      return Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build();\n+\n+    } else if (o instanceof DocumentReference) {\n+      return Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/project/databases/(default)/documents/\" + ((DocumentReference) o).getPath())\n+          .build();\n     } else if (o instanceof GeoPoint) {\n       GeoPoint geoPoint = (GeoPoint) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setGeoPointValue(\n               LatLng.newBuilder()\n                   .setLatitude(geoPoint.getLatitude())\n-                  .setLongitude(geoPoint.getLongitude())\n-                  .build())\n-          .build());\n-    } else if (o instanceof Blob) {\n-      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n-    } else if (o instanceof DocumentReference) {\n-      return (Value.newBuilder()\n-          .setReferenceValue(\n-              \"projects/projectId/databases/(default)/documents/\"\n-                  + ((DocumentReference) o).getPath())\n-          .build());\n+                  .setLongitude(geoPoint.getLongitude()))\n+          .build();\n+\n     } else if (o instanceof List) {\n       ArrayValue.Builder list = ArrayValue.newBuilder();\n       for (Object element : (List) o) {\n         list.addValues(valueOf(element));\n       }\n-      return (Value.newBuilder().setArrayValue(list).build());\n-    } else if (o == null) {\n-      return (Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build());\n+      return Value.newBuilder().setArrayValue(list).build();\n+    } else if (o instanceof Map) {\n+      com.google.firestore.v1.MapValue.Builder builder =", "originalCommit": "c8d1ce8f68fe2cca448d4965bf6ec5272b057c91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3OTY5Mg==", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370479692", "bodyText": "Done", "author": "schmidt-sebastian", "createdAt": "2020-01-24T05:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NDAyNg=="}], "type": "inlineReview"}, {"oid": "02c0e78fc28843d95ce7f74dd5d8f111129af1b7", "url": "https://github.com/firebase/firebase-android-sdk/commit/02c0e78fc28843d95ce7f74dd5d8f111129af1b7", "message": "Merge branch 'mrschmidt/rewritefieldvalue' into mrschmidt/testhelpers", "committedDate": "2020-01-24T05:31:33Z", "type": "commit"}, {"oid": "e8c299ac9d17aa06c9ed088b0f6cb9b7fbafd6c0", "url": "https://github.com/firebase/firebase-android-sdk/commit/e8c299ac9d17aa06c9ed088b0f6cb9b7fbafd6c0", "message": "Fix merge", "committedDate": "2020-01-24T05:33:22Z", "type": "commit"}, {"oid": "063a2566e4a9dbf22ed39e10db0dff6aa18d27e5", "url": "https://github.com/firebase/firebase-android-sdk/commit/063a2566e4a9dbf22ed39e10db0dff6aa18d27e5", "message": "feedback", "committedDate": "2020-01-24T05:34:31Z", "type": "commit"}]}