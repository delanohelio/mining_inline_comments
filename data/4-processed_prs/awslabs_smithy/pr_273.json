{"pr_number": 273, "pr_title": "Make protocol and auth traits", "pr_createdAt": "2020-02-05T05:14:19Z", "pr_url": "https://github.com/awslabs/smithy/pull/273", "timeline": [{"oid": "a5e7f526f87e94fadc8366f681a689da5dd2abc9", "url": "https://github.com/awslabs/smithy/commit/a5e7f526f87e94fadc8366f681a689da5dd2abc9", "message": "Make protocol and auth into meta traits\n\nThis commit starts the process of converting protocol and auth\ndefinitinions into meta-traits that are attached to other traits. This\nchange leans into the idea of \"traits are just shapes\" and takes that a\nstep further by making auth and protocol applications into normal\ntraits. This removes the need for a custom model layer that we had\npreviously which required things like custom Smithy build transforms and\nlinters.", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "ed94e5d9b0ec3c0ed9f82ac2c501646b982298c9", "url": "https://github.com/awslabs/smithy/commit/ed94e5d9b0ec3c0ed9f82ac2c501646b982298c9", "message": "Remove no longer needed protocol linters", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "502454d4cf0257860d77eb1851a6e2cc1f840157", "url": "https://github.com/awslabs/smithy/commit/502454d4cf0257860d77eb1851a6e2cc1f840157", "message": "Remove no longer needed auth/protocol transforms\n\nThese were needed when protocol and auth applications weren't real\ntraits. Now that they're traits, they can be added and removed just like\nany other trait.", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "c7f3a3237270c15d4025d8580da53fa0f16dafba", "url": "https://github.com/awslabs/smithy/commit/c7f3a3237270c15d4025d8580da53fa0f16dafba", "message": "Remove no longer needed protocol/auth diff rule", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "b95b9666961c3a39d35f3635c122f4e277eb1783", "url": "https://github.com/awslabs/smithy/commit/b95b9666961c3a39d35f3635c122f4e277eb1783", "message": "Update docs to use more shape IDs", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "9f50617336a0a378e54c174835dc64bea9df96bb", "url": "https://github.com/awslabs/smithy/commit/9f50617336a0a378e54c174835dc64bea9df96bb", "message": "Fix spotbugs false positive", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "a7d61657706f2712228b9444429048b2539dae51", "url": "https://github.com/awslabs/smithy/commit/a7d61657706f2712228b9444429048b2539dae51", "message": "Migrate MQTT protocol to a trait", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "f33ce9d0285e23ff52e2d122959658d59e875ce2", "url": "https://github.com/awslabs/smithy/commit/f33ce9d0285e23ff52e2d122959658d59e875ce2", "message": "Add AWS auth and protocol traits", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "7318439f2c43ee3a4ae8275cbb6368ad7f9a3233", "url": "https://github.com/awslabs/smithy/commit/7318439f2c43ee3a4ae8275cbb6368ad7f9a3233", "message": "Update protocol test traits to use shape IDs\n\nThe auth and protocol settings for protocol tests now use shape IDs with\nidRef traits rather than raw strings. This provides more validation of\nprotocol test trait definitions.", "committedDate": "2020-02-05T05:06:32Z", "type": "commit"}, {"oid": "92b470c2bc0fbc2774e07467e178bbc623a3b527", "url": "https://github.com/awslabs/smithy/commit/92b470c2bc0fbc2774e07467e178bbc623a3b527", "message": "Update aws protocol tests", "committedDate": "2020-02-05T05:06:33Z", "type": "commit"}, {"oid": "b8290c4d58412ee8fe640266c66fe529357e9229", "url": "https://github.com/awslabs/smithy/commit/b8290c4d58412ee8fe640266c66fe529357e9229", "message": "Fix JSON schema protocol test", "committedDate": "2020-02-05T05:06:33Z", "type": "commit"}, {"oid": "175ef6dba6993bed0a25f2b1ea5bbdb4f8d1d639", "url": "https://github.com/awslabs/smithy/commit/175ef6dba6993bed0a25f2b1ea5bbdb4f8d1d639", "message": "Update openapi converters to use typed traits\n\nOpenAPI conversion now uses the protocol auth traits. Further, Context\nand security scheme converters are now generic over the protocol/auth\ntrait they convert, making them easier to implement.", "committedDate": "2020-02-05T05:06:33Z", "type": "commit"}, {"oid": "06138f6421c55652193a1e90fee3ec3c28891ca0", "url": "https://github.com/awslabs/smithy/commit/06138f6421c55652193a1e90fee3ec3c28891ca0", "message": "Update apigateway int. to protocol/auth traits", "committedDate": "2020-02-05T05:06:33Z", "type": "commit"}, {"oid": "943ed0989c8ba8f131453aeea2e7f89485742be8", "url": "https://github.com/awslabs/smithy/commit/943ed0989c8ba8f131453aeea2e7f89485742be8", "message": "Remove singleEncodeCanonicalPath from S3\n\nThis should really just be a known customization to implement when\nwriting an S3 client. It isn't really something I think any other team\nwould ever repeat.", "committedDate": "2020-02-06T00:18:12Z", "type": "commit"}, {"oid": "248a9a430ab78a30dc0bf7b5b3cce285c1e65ea2", "url": "https://github.com/awslabs/smithy/commit/248a9a430ab78a30dc0bf7b5b3cce285c1e65ea2", "message": "Remove cookie support (at least for now)", "committedDate": "2020-02-06T00:51:22Z", "type": "commit"}, {"oid": "2afe42ac8a7c70b7b6a87a0f0c744f0f760ec725", "url": "https://github.com/awslabs/smithy/commit/2afe42ac8a7c70b7b6a87a0f0c744f0f760ec725", "message": "Update auth traits so they can only apply to services", "committedDate": "2020-02-06T00:51:47Z", "type": "commit"}, {"oid": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "url": "https://github.com/awslabs/smithy/commit/cfcbdf41e1824ef317b7e93535257cd99f910ac0", "message": "Update documentation for auth and protocol traits", "committedDate": "2020-02-06T01:09:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3NjY3Nw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375976677", "bodyText": "These names are flagged as not meeting Java conventions, but we need to carry the version numbers in the generated class.", "author": "mtdowling", "createdAt": "2020-02-06T17:29:06Z", "path": "config/checkstyle/suppressions.xml", "diffHunk": "@@ -20,4 +20,5 @@\n <suppressions>\n     <suppress checks=\"EqualsHashCode\" files=\"shapes/*\"/>\n     <suppress checks=\"InnerAssignment\" files=\"StringUtils\"/>\n+    <suppress checks=\"TypeName\" files=\"AwsJson1_0Trait.java|AwsJson1_1Trait.java\"/>", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3Njk2NA==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375976964", "bodyText": "These are no longer needed since they're just normal traits. You can include/exclude traits using includeTraits, excludeTraits, etc", "author": "mtdowling", "createdAt": "2020-02-06T17:29:41Z", "path": "docs/source/guides/building-models/build-config.rst", "diffHunk": "@@ -437,54 +437,6 @@ orphaned shapes.\n     This transformer does not remove shapes from the prelude.\n \n \n-.. _includeAuth-transform:", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3NzMyNA==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375977324", "bodyText": "We decided to use restJson1 rather than just restJson since we eventually plan to ship an improved REST+JSON protocol.", "author": "mtdowling", "createdAt": "2020-02-06T17:30:25Z", "path": "docs/source/guides/converting-to-openapi.rst", "diffHunk": "@@ -114,7 +114,7 @@ The Smithy Gradle plugin relies on a ``smithy-build.json`` file found at the\n root of a project to define the actual process of building the OpenAPI\n specification. The following example defines a ``smithy-build.json`` file\n that builds an OpenAPI specification from a service for the\n-``smithy.example#Weather`` service using the ``aws.rest-json-1.1`` protocol:\n+``smithy.example#Weather`` service using the ``aws.protocols#restJson1`` protocol:", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3OTY5NA==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375979694", "bodyText": "Like protocols, I broke authentication traits into their own doc. Unlike protocols, I didn't give each trait it's own page. We could consider doing that if we perhaps add more extensive sigv4 documentation (for example, we may want to recreate the sigv4 test suite to be Smithy protocol tests).", "author": "mtdowling", "createdAt": "2020-02-06T17:34:40Z", "path": "docs/source/spec/aws-auth.rst", "diffHunk": "@@ -0,0 +1,125 @@\n+.. _aws-authentication:", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MDQ3Ng==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375980476", "bodyText": "TODO: this is required, so it should be documented as required", "author": "mtdowling", "createdAt": "2020-02-06T17:35:58Z", "path": "docs/source/spec/aws-auth.rst", "diffHunk": "@@ -0,0 +1,125 @@\n+.. _aws-authentication:\n+\n+=========================\n+AWS Authentication Traits\n+=========================\n+\n+This document defines AWS authentication schemes.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+.. _aws.auth#sigv4-trait:\n+\n+``aws.auth#sigv4`` trait\n+========================\n+\n+Trait summary\n+    The ``aws.auth#sigv4`` trait adds support for `AWS signature version 4`_\n+    to a service.\n+Trait selector\n+    ``service``\n+Trait value\n+    An ``object`` that supports the following properties:\n+\n+    .. list-table::\n+        :header-rows: 1\n+        :widths: 10 20 70\n+\n+        * - Property\n+          - Type\n+          - Description\n+        * - name\n+          - ``string``\n+          - **Required**. The signature version 4 service signing name to use\n+            in the `credential scope`_ when signing requests. This value\n+            SHOULD match the ``arnNamespace`` property of the\n+            :ref:`aws.api#service-trait`.\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        namespace aws.fooBaz\n+\n+        use aws.api#service\n+        use aws.auth#sigv4\n+        use aws.protocols#restJson1\n+\n+        @service(sdkId: \"Some Value\")\n+        @sigv4(name: \"foobaz\")\n+        @restJson1\n+        service FooBaz {\n+            version: \"2018-03-17\",\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"aws.fooBaz#FooBaz\": {\n+                    \"type\": \"service\",\n+                    \"version\": \"2018-03-17\",\n+                    \"traits\": {\n+                        \"aws.protocols#restJson1\": true,\n+                        \"aws.api#service\": {\n+                            \"sdkId\": \"Some Value\"\n+                        },\n+                        \"aws.auth#sigv4\": {\n+                            \"name\": \"foobaz\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+\n+.. _aws.auth#cognitoUserPools-trait:\n+\n+aws.auth#cognitoUserPools\n+=========================\n+\n+Trait summary\n+    The ``aws.auth#cognitoUserPools`` trait adds support for\n+    `Amazon Cognito User Pools`_ to a service.\n+Trait selector\n+    ``service``\n+Trait value\n+    An ``object`` that supports the following properties:\n+\n+    .. list-table::\n+        :header-rows: 1\n+        :widths: 10 20 70\n+\n+        * - Property\n+          - Type\n+          - Description\n+        * - providerArns\n+          - ``[string]``\n+          - A list of the Amazon Cognito user pool ARNs. Each element is", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MTA4Nw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375981087", "bodyText": "The protocol docs are very incomplete at this point. We need to circle back to them and fill in the details on how they work. This can be based on the accompanying protocol tests: https://github.com/awslabs/smithy/tree/master/smithy-aws-protocol-tests/model", "author": "mtdowling", "createdAt": "2020-02-06T17:37:04Z", "path": "docs/source/spec/aws-json-protocols.rst", "diffHunk": "@@ -0,0 +1,103 @@\n+.. _aws-json-protocols:", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMDgzNQ==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r376110835", "bodyText": "For now could you at least link to the accompanying protocol tests? Maybe in a see-also type section", "author": "JordonPhillips", "createdAt": "2020-02-06T22:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MTA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MTc1Ng==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375981756", "bodyText": "Even though the namespace has aws in it, I think it's a good idea to keep aws in the trait name so it's more easily discerned from other JSON traits when using use statements.", "author": "mtdowling", "createdAt": "2020-02-06T17:38:22Z", "path": "docs/source/spec/aws-json-protocols.rst", "diffHunk": "@@ -0,0 +1,103 @@\n+.. _aws-json-protocols:\n+\n+==================\n+AWS JSON protocols\n+==================\n+\n+This specification defines the ``aws.protocols#awsJson1_0`` and", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MjM1MA==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375982350", "bodyText": "TODO: this should only attach to a service not operations", "author": "mtdowling", "createdAt": "2020-02-06T17:39:38Z", "path": "docs/source/spec/aws-query-protocol.rst", "diffHunk": "@@ -0,0 +1,103 @@\n+.. _aws-query-protocol:\n+\n+==================\n+AWS query protocol\n+==================\n+\n+This specification defines the ``aws.protocols#awsQuery`` protocol.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+.. _aws.protocols#awsQuery-trait:\n+\n+--------------------------------\n+``aws.protocols#awsQuery`` trait\n+--------------------------------\n+\n+Summary\n+    Adds support for an HTTP protocol that sends requests in the query\n+    string and responses in XML documents.\n+Trait selector\n+    ``operation``", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MjQwNw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375982407", "bodyText": "TODO: this should only attach to a service not operations", "author": "mtdowling", "createdAt": "2020-02-06T17:39:44Z", "path": "docs/source/spec/aws-query-protocol.rst", "diffHunk": "@@ -0,0 +1,103 @@\n+.. _aws-query-protocol:\n+\n+==================\n+AWS query protocol\n+==================\n+\n+This specification defines the ``aws.protocols#awsQuery`` protocol.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+.. _aws.protocols#awsQuery-trait:\n+\n+--------------------------------\n+``aws.protocols#awsQuery`` trait\n+--------------------------------\n+\n+Summary\n+    Adds support for an HTTP protocol that sends requests in the query\n+    string and responses in XML documents.\n+Trait selector\n+    ``operation``\n+Value type\n+    Annotation trait.\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        namespace smithy.example\n+\n+        use aws.protocols#awsQuery\n+\n+        @awsQuery\n+        service MyService {\n+            version: \"2020-02-05\"\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#MyService\": {\n+                    \"type\": \"service\",\n+                    \"version\": \"2020-02-05\",\n+                    \"traits\": {\n+                        \"aws.protocols#awsQuery\": true\n+                    }\n+                }\n+            }\n+        }\n+\n+*TODO: Add specifications, protocol examples, etc.*\n+\n+\n+.. _aws.protocols#ec2Query-trait:\n+\n+--------------------------------\n+``aws.protocols#ec2Query`` trait\n+--------------------------------\n+\n+Summary\n+    Adds support for an HTTP protocol that sends request in the query\n+    string and responses in XML documents. This protocol is an\n+    Amazon EC2-specific extension of the ``awsQuery`` protocol.\n+Trait selector\n+    ``operation``", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MjQ2Mg==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375982462", "bodyText": "TODO: this should only attach to a service not operations", "author": "mtdowling", "createdAt": "2020-02-06T17:39:51Z", "path": "docs/source/spec/aws-json-protocols.rst", "diffHunk": "@@ -0,0 +1,103 @@\n+.. _aws-json-protocols:\n+\n+==================\n+AWS JSON protocols\n+==================\n+\n+This specification defines the ``aws.protocols#awsJson1_0`` and\n+``aws.protocols#awsJson1_1`` protocols.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+.. _aws.protocols#awsJson1_0-trait:\n+\n+----------------------------------\n+``aws.protocols#awsJson1_0`` trait\n+----------------------------------\n+\n+Summary\n+    Adds support for an HTTP protocol that sends POST requests and\n+    responses with JSON documents.\n+Trait selector\n+    ``operation``", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MjU0MA==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375982540", "bodyText": "TODO: this should only attach to a service not operations", "author": "mtdowling", "createdAt": "2020-02-06T17:39:59Z", "path": "docs/source/spec/aws-json-protocols.rst", "diffHunk": "@@ -0,0 +1,103 @@\n+.. _aws-json-protocols:\n+\n+==================\n+AWS JSON protocols\n+==================\n+\n+This specification defines the ``aws.protocols#awsJson1_0`` and\n+``aws.protocols#awsJson1_1`` protocols.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+.. _aws.protocols#awsJson1_0-trait:\n+\n+----------------------------------\n+``aws.protocols#awsJson1_0`` trait\n+----------------------------------\n+\n+Summary\n+    Adds support for an HTTP protocol that sends POST requests and\n+    responses with JSON documents.\n+Trait selector\n+    ``operation``\n+Value type\n+    Annotation trait.\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        namespace smithy.example\n+\n+        use aws.protocols#awsJson1_0\n+\n+        @awsJson1_0\n+        service MyService {\n+            version: \"2020-02-05\"\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#MyService\": {\n+                    \"type\": \"service\",\n+                    \"version\": \"2020-02-05\",\n+                    \"traits\": {\n+                        \"aws.protocols#awsJson1_0\": true\n+                    }\n+                }\n+            }\n+        }\n+\n+*TODO: Add specifications, protocol examples, etc.*\n+\n+\n+.. _aws.protocols#awsJson1_1-trait:\n+\n+----------------------------------\n+``aws.protocols#awsJson1_1`` trait\n+----------------------------------\n+\n+Summary\n+    Adds support for an HTTP protocol that sends POST requests and\n+    responses with JSON documents.\n+Trait selector\n+    ``operation``", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MjYxMw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375982613", "bodyText": "TODO: this should only attach to a service not operations", "author": "mtdowling", "createdAt": "2020-02-06T17:40:07Z", "path": "docs/source/spec/aws-restjson1-protocol.rst", "diffHunk": "@@ -0,0 +1,57 @@\n+.. _aws-restjson1-protocol:\n+\n+======================\n+AWS restJson1 protocol\n+======================\n+\n+This specification defines the ``aws.protocols#restJson1`` protocol.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+.. _aws.protocols#restJson1-trait:\n+\n+---------------------------------\n+``aws.protocols#restJson1`` trait\n+---------------------------------\n+\n+Summary\n+    Adds support for an HTTP-based protocol that sends JSON requests and\n+    responses with configurable HTTP bindings.\n+Trait selector\n+    ``operation``", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MjY1Mw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375982653", "bodyText": "TODO: this should only attach to a service not operations", "author": "mtdowling", "createdAt": "2020-02-06T17:40:13Z", "path": "docs/source/spec/aws-restxml-protocol.rst", "diffHunk": "@@ -0,0 +1,57 @@\n+.. _aws-restxml-protocol:\n+\n+====================\n+AWS restXml protocol\n+====================\n+\n+This specification defines the ``aws.protocols#restXml`` protocol.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+.. _aws.protocols#restXml-trait:\n+\n+-------------------------------\n+``aws.protocols#restXml`` trait\n+-------------------------------\n+\n+Summary\n+    Adds support for an HTTP-based protocol that sends XML requests and\n+    responses.\n+Trait selector\n+    ``operation``", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MzI1Mg==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375983252", "bodyText": "TODO: Capitalize this sentence", "author": "mtdowling", "createdAt": "2020-02-06T17:41:27Z", "path": "docs/source/spec/index.rst", "diffHunk": "@@ -93,7 +98,17 @@ AWS-specific specifications are defined below.\n \n     * - :doc:`aws-core`\n       - Defines core traits used to integrate Smithy models with AWS.\n+    * - :doc:`aws-auth`\n+      - defines AWS authentication schemes.", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MzU2OQ==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375983569", "bodyText": "These validators are no longer needed. You can just mark a protocol or auth trait as deprecated to get the same effect.", "author": "mtdowling", "createdAt": "2020-02-06T17:42:04Z", "path": "docs/source/spec/validation.rst", "diffHunk": "@@ -556,98 +556,6 @@ Default severity\n Best practice validators\n ========================\n \n-.. _DeprecatedAuthSchemes:", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4Mzg1OQ==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375983859", "bodyText": "Note: the Context that's passed around is now generic over the protocol trait being converted. For things where this doesn't matter, we use <? extends Trait>.\nThe other thing to keep in mind: the changes to the OpenAPI converters and API Gateway converters should result in almost identical OpenAPI schemas (the only thing that changes is the arbitrary names given to auth schemes)", "author": "mtdowling", "createdAt": "2020-02-06T17:42:39Z", "path": "smithy-aws-apigateway-openapi/src/main/java/software/amazon/smithy/aws/apigateway/openapi/AddApiKeySource.java", "diffHunk": "@@ -26,7 +27,7 @@\n     private static final Logger LOGGER = Logger.getLogger(AddApiKeySource.class.getName());\n \n     @Override\n-    public OpenApi after(Context context, OpenApi openApi) {\n+    public OpenApi after(Context<? extends Trait> context, OpenApi openApi) {", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NTA1Mg==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375985052", "bodyText": "Note: this became an auth trait, cognitoUserPools, and removes the need for a separate configuration trait.", "author": "mtdowling", "createdAt": "2020-02-06T17:44:59Z", "path": "smithy-aws-apigateway-openapi/src/main/java/software/amazon/smithy/aws/apigateway/openapi/CognitoUserPoolsConverter.java", "diffHunk": "@@ -28,32 +28,24 @@\n /**\n  * An authentication scheme converter that adds Cognito User Pool based\n  * authentication ({@code cognito_user_pools} to an OpenAPI model when the\n- * {@code aws.cognito-user-pools} authentication scheme is found on", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NTQzOQ==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375985439", "bodyText": "This is handled by normal trait validation now", "author": "mtdowling", "createdAt": "2020-02-06T17:45:47Z", "path": "smithy-aws-apigateway-openapi/src/test/java/software/amazon/smithy/aws/apigateway/openapi/CognitoUserPoolsConverterTest.java", "diffHunk": "@@ -27,15 +27,13 @@ public void addsAwsV4() {\n \n     @Test\n     public void requiresProviderArns() {\n-        Exception thrown = Assertions.assertThrows(OpenApiException.class, () -> {\n+        Assertions.assertThrows(ValidatedResultException.class, () -> {\n             Model model = Model.assembler(getClass().getClassLoader())\n                     .discoverModels(getClass().getClassLoader())\n                     .addImport(getClass().getResource(\"invalid-cognito-user-pools-security.json\"))\n                     .assemble()\n                     .unwrap();\n             OpenApiConverter.create().convert(model, ShapeId.from(\"smithy.example#Service\"));\n         });\n-\n-        Assertions.assertTrue(thrown.getMessage().contains(\"Missing required\"));", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NTY0Nw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375985647", "bodyText": "\"name\" is required (at least for now). This makes the sigv4 signing name much more explicit.", "author": "mtdowling", "createdAt": "2020-02-06T17:46:11Z", "path": "smithy-aws-apigateway-openapi/src/test/resources/software/amazon/smithy/aws/apigateway/openapi/authorizers.json", "diffHunk": "@@ -5,18 +5,14 @@\n             \"type\": \"service\",\n             \"version\": \"2018-03-17\",\n             \"traits\": {\n-                \"smithy.api#protocols\": [\n-                    {\n-                        \"name\": \"aws.rest-json\",\n-                        \"auth\": [\n-                            \"aws.v4\"\n-                        ]\n-                    }\n-                ],\n+                \"aws.protocols#restJson1\": {},\n+                \"aws.auth#sigv4\": {\n+                    \"name\": \"someservice\"", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NjYzMA==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375986630", "bodyText": "I renamed these tests to take a page from JPMS modules about split packages. It probably doesn't matter nor ever will, but just in case...", "author": "mtdowling", "createdAt": "2020-02-06T17:48:05Z", "path": "smithy-aws-protocol-tests/model/ec2-query/empty-input-output.smithy", "diffHunk": "@@ -3,8 +3,9 @@\n \n $version: \"0.5.0\"\n \n-namespace aws.protocols.tests.ec2\n+namespace aws.protocoltests.ec2", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NzQ3Nw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375987477", "bodyText": "Authorizers now reference auth scheme shape IDs rather than arbitrary names", "author": "mtdowling", "createdAt": "2020-02-06T17:49:46Z", "path": "smithy-aws-traits/src/main/java/software/amazon/smithy/aws/traits/apigateway/AuthorizerDefinition.java", "diffHunk": "@@ -47,7 +49,7 @@\n             SCHEME_KEY, TYPE_KEY, AUTH_TYPE_KEY, URI_KEY, CREDENTIALS_KEY, IDENTITY_SOURCE_KEY,\n             IDENTITY_VALIDATION_EXPRESSION_KEY, RESULT_TTL_IN_SECONDS);\n \n-    private final String scheme;\n+    private final ShapeId scheme;", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4ODE3Nw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375988177", "bodyText": "TODO: just service", "author": "mtdowling", "createdAt": "2020-02-06T17:51:02Z", "path": "smithy-aws-traits/src/main/resources/META-INF/smithy/aws.auth.json", "diffHunk": "@@ -0,0 +1,57 @@\n+{\n+    \"smithy\": \"0.5.0\",\n+    \"shapes\": {\n+        \"aws.auth#sigv4\": {\n+            \"type\": \"structure\",\n+            \"members\": {\n+                \"name\": {\n+                    \"target\": \"smithy.api#String\",\n+                    \"traits\": {\n+                        \"smithy.api#required\": true,\n+                        \"smithy.api#documentation\": \"The signature version 4 service signing name to use in the credential scope when signing requests. This value SHOULD match the `arnNamespace` property of the `aws.api#service-trait`.\",\n+                        \"smithy.api#externalDocumentation\": \"https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\"\n+                    }\n+                }\n+            },\n+            \"traits\": {\n+                \"smithy.api#trait\": {\n+                    \"selector\": \":test(service, operation)\"", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4ODk0Ng==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r375988946", "bodyText": "Since we're using dependencies now in tests, we need to use model discovery.", "author": "mtdowling", "createdAt": "2020-02-06T17:52:30Z", "path": "smithy-openapi/src/test/java/software/amazon/smithy/openapi/fromsmithy/security/HttpDigestTest.java", "diffHunk": "@@ -13,6 +13,7 @@\n     public void addsHttpDigestAuth() {\n         Model model = Model.assembler()\n                 .addImport(getClass().getResource(\"http-digest-security.json\"))\n+                .discoverModels()", "originalCommit": "cfcbdf41e1824ef317b7e93535257cd99f910ac0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0cdc69a8f7e4e0bded958375913d7f3e3a80c283", "url": "https://github.com/awslabs/smithy/commit/0cdc69a8f7e4e0bded958375913d7f3e3a80c283", "message": "Address minor PR issues", "committedDate": "2020-02-06T18:06:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMzcyNg==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r376113726", "bodyText": "The selector for this should select a trait, the trait it's targeting should select a service.", "author": "JordonPhillips", "createdAt": "2020-02-06T22:17:52Z", "path": "docs/source/spec/core.rst", "diffHunk": "@@ -5134,13 +4904,366 @@ Smithy defines the following built-in timestamp formats:\n .. important::\n \n     This trait SHOULD NOT be used unless the intended serialization format of\n-    a timestmap differs from the default protocol format. Using this trait too\n+    a timestamp differs from the default protocol format. Using this trait too\n     liberally can cause other tooling to improperly interpret the timestamp.\n \n See :ref:`timestamp-serialization-format` for information on how to\n determine the serialization format of a timestamp.\n \n \n+.. _authentication-traits:\n+\n+Authentication traits\n+=====================\n+\n+.. _authDefinition-trait:\n+\n+``authDefinition`` trait\n+------------------------\n+\n+Summary\n+    A meta-trait that marks a trait as an authentication scheme. Traits\n+    that are marked with this trait are applied to service shapes to\n+    indicate how a client can authenticate with the service.\n+Trait selector\n+    ``service``", "originalCommit": "0cdc69a8f7e4e0bded958375913d7f3e3a80c283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODQyMA==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r376118420", "bodyText": "How does the optionalAuth trait fit here?", "author": "JordonPhillips", "createdAt": "2020-02-06T22:30:04Z", "path": "docs/source/spec/core.rst", "diffHunk": "@@ -5134,13 +4904,366 @@ Smithy defines the following built-in timestamp formats:\n .. important::\n \n     This trait SHOULD NOT be used unless the intended serialization format of\n-    a timestmap differs from the default protocol format. Using this trait too\n+    a timestamp differs from the default protocol format. Using this trait too\n     liberally can cause other tooling to improperly interpret the timestamp.\n \n See :ref:`timestamp-serialization-format` for information on how to\n determine the serialization format of a timestamp.\n \n \n+.. _authentication-traits:\n+\n+Authentication traits\n+=====================\n+\n+.. _authDefinition-trait:\n+\n+``authDefinition`` trait\n+------------------------\n+\n+Summary\n+    A meta-trait that marks a trait as an authentication scheme. Traits\n+    that are marked with this trait are applied to service shapes to\n+    indicate how a client can authenticate with the service.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+Every operation in the closure of a service is expected to support the\n+authentication schemes applied to a service unless the service or operation\n+is marked with the :ref:`auth-trait`, which is used to change the set of\n+supported authentication schemes.\n+\n+The following example defines a service that supports both ``httpBasicAuth``\n+and the hypothetical ``fooExample`` authentication scheme.\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        namespace smithy.example\n+\n+        @authDefinition\n+        @trait(selector: \"service\")\n+        structure fooExample {}\n+\n+        @fooExample\n+        @httpBasicAuth\n+        service WeatherService {\n+            version: \"2017-02-11\",\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#WeatherService\": {\n+                    \"type\": \"service\",\n+                    \"version\": \"2017-02-11\",\n+                    \"traits\": {\n+                        \"smithy.example#fooExample\": {},\n+                        \"smithy.api#httpBasicAuth\": {}\n+                    }\n+                },\n+                \"smithy.example#fooExample\": {\n+                    \"type\": \"structure\",\n+                    \"traits\": {\n+                        \"smithy.api#authDefinition\": true,\n+                        \"smithy.api#trait\": {\n+                            \"selector\": \"service\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+Because authentication scheme definitions are just specialized shapes, they\n+can also support configuration settings.\n+\n+.. code-block:: smithy\n+\n+    namespace smithy.example\n+\n+    @authDefinition\n+    @trait(selector: \"service\")\n+    structure algorithmAuth {\n+        algorithm: AlgorithmAuthAlgorithm,\n+    }\n+\n+    @private\n+    @enum(\"SHA-2\": {})\n+    string AlgorithmAuthAlgorithm\n+\n+    @algorithmAuth(algorithm: \"SHA-2\")\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpBasicAuth-trait:\n+\n+``httpBasicAuth`` trait\n+-----------------------\n+\n+Summary\n+    Indicates that a service supports HTTP Basic Authentication as\n+    defined in :rfc:`2617`.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+.. code-block:: smithy\n+\n+    @httpBasicAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpDigestAuth-trait:\n+\n+``httpDigestAuth`` trait\n+------------------------\n+\n+Summary\n+    Indicates that a service supports HTTP Digest Authentication as defined\n+    in :rfc:`2617`.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+.. code-block:: smithy\n+\n+    @httpDigestAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpBearerAuth-trait:\n+\n+``httpBearerAuth`` trait\n+------------------------\n+\n+Summary\n+    Indicates that a service supports HTTP Bearer Authentication as defined\n+    in :rfc:`6750`.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+.. code-block:: smithy\n+\n+    @httpBearerAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpApiKeyAuth-trait:\n+\n+``httpApiKeyAuth`` trait\n+------------------------\n+\n+Summary\n+    Indicates that a service supports HTTP-specific authentication using an\n+    API key sent in a header or query string parameter.\n+Trait selector\n+    ``service``\n+Value type\n+    Object\n+\n+The ``httpApiKeyAuth`` trait is an object that supports the following\n+properties:\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 10 80\n+\n+    * - Property\n+      - Type\n+      - Description\n+    * - name\n+      - ``string``\n+      - **Required**. Defines the name of the HTTP header or query string\n+        parameter that contains the API key.\n+    * - in\n+      - ``string``\n+      - **Required**. Defines the location of where the key is serialized.\n+        This value can be set to ``header`` or ``query``.\n+\n+The following example defines a service that accepts an API key in the \"X-Api-Key\"\n+HTTP header:\n+\n+.. code-block:: smithy\n+\n+    @httpApiKeyAuth(name: \"X-Api-Key\", in: \"header\")\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _optionalAuth-trait:\n+\n+``optionalAuth`` trait\n+----------------------\n+\n+Summary\n+    Indicates that an operation MAY be invoked without authentication,\n+    regardless of any authentication traits applied to the operation.\n+Trait selector\n+    ``operation``\n+Value type\n+    Annotation trait.\n+\n+The following example defines a service that uses HTTP digest authentication,\n+and bound to the service is an operation that supports unauthenticated access.\n+\n+.. code-block:: smithy\n+\n+    @httpDigestAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+        operations: [PingServer]\n+    }\n+\n+    @optionalAuth\n+    operation PingServer {}\n+\n+The following example defines an operation that does not support\n+*any* authentication. This kind of operation does not require the\n+``optionalAuth`` trait.\n+\n+.. code-block:: smithy\n+\n+    @auth([])\n+    operation SomeUnauthenticatedOperation {}\n+\n+\n+.. _auth-trait:\n+\n+``auth`` trait\n+--------------\n+\n+Summary\n+    Defines the priority ordered authentication schemes supported by a service\n+    or operation. When applied to a service, it defines the default\n+    authentication schemes of every operation in the service. When applied\n+    to an operation, it defines the list of all authentication schemes\n+    supported by the operation, overriding any ``auth`` trait specified\n+    on a service.\n+Trait selector\n+    ``:test(service, operation)``\n+\n+    *Service or operation shapes*\n+Value type\n+    This trait contains a priority ordered list of string values that\n+    reference authentication scheme shape IDs defined on a service\n+    shape.\n+\n+Operations that are not annotated with the ``auth`` trait inherit the ``auth``\n+trait of the service they are bound to, and if the service is not annotated\n+with the ``auth`` trait, then the operation is expected to support each of\n+the :ref:`authentication scheme traits <authDefinition-trait>` applied to the\n+service. Each entry in the ``auth`` trait is a shape ID that MUST refer to an\n+authentication scheme trait applied to the service in which it is bound.\n+\n+The following example defines two operations:\n+\n+* OperationA defines an explicit list of the authentication schemes it\n+  supports using the ``auth`` trait.\n+* OperationB is not annotated with the ``auth`` trait, so the schemes\n+  supported by this operation inherit all of the authentication schemes\n+  applied to the service.\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @httpBasicAuth\n+        @httpDigestAuth\n+        @auth([httpBasicAuth])\n+        service AuthenticatedService {\n+            version: \"2017-02-11\",\n+            operations: [OperationA, OperationB]\n+        }\n+\n+        // This operation is configured to only support httpDigestAuth.\n+        // It is not expected to support httpBasicAuth.\n+        @auth([httpDigestAuth])\n+        operation OperationA {}\n+\n+        // This operation defines no auth trait, so it is expected to\n+        // support the effective authentication schemes of the service:\n+        // httpBasicAuth and httpDigestAuth.\n+        operation OperationB {}\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#AuthenticatedService\": {\n+                    \"type\": \"service\",\n+                    \"version\": \"2017-02-11\",\n+                    \"operations\": [\n+                        {\n+                            \"target\": \"smithy.example#OperationA\"\n+                        },\n+                        {\n+                            \"target\": \"smithy.example#OperationB\"\n+                        }\n+                    ],\n+                    \"traits\": {\n+                        \"smithy.api#httpBasicAuth\": true,\n+                        \"smithy.api#httpDigestAuth\": true,\n+                        \"smithy.api#auth\": [\n+                            \"smithy.api#httpBasicAuth\"\n+                        ]\n+                    }\n+                },\n+                \"smithy.example#OperationA\": {\n+                    \"type\": \"operation\",\n+                    \"traits\": {\n+                        \"smithy.api#auth\": [\n+                            \"smithy.api#httpDigestAuth\"\n+                        ]\n+                    }\n+                },\n+                \"smithy.example#OperationB\": {\n+                    \"type\": \"operation\"\n+                }\n+            }\n+        }\n+\n+The following ``auth`` trait is invalid because it references an\n+authentication scheme trait that is not applied to the service:\n+\n+.. code-block:: smithy\n+\n+    @httpDigestAuth\n+    @auth([httpBasicAuth]) // <-- Invalid!\n+    service InvalidExample {\n+        version: \"2017-02-11\"\n+    }\n+\n+The following operation ``auth`` trait is invalid because it references an\n+authentication scheme trait that is not applied to the service:", "originalCommit": "0cdc69a8f7e4e0bded958375913d7f3e3a80c283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNzYwNQ==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r376627605", "bodyText": "It has no bearing here. optionalAuth isn't an auth scheme per se, it's an indication that authentication is not required.", "author": "mtdowling", "createdAt": "2020-02-07T21:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODczMg==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r376118732", "bodyText": "Does this need to be a priority ordered list, or can it be a set?", "author": "JordonPhillips", "createdAt": "2020-02-06T22:30:46Z", "path": "docs/source/spec/core.rst", "diffHunk": "@@ -5134,13 +4904,366 @@ Smithy defines the following built-in timestamp formats:\n .. important::\n \n     This trait SHOULD NOT be used unless the intended serialization format of\n-    a timestmap differs from the default protocol format. Using this trait too\n+    a timestamp differs from the default protocol format. Using this trait too\n     liberally can cause other tooling to improperly interpret the timestamp.\n \n See :ref:`timestamp-serialization-format` for information on how to\n determine the serialization format of a timestamp.\n \n \n+.. _authentication-traits:\n+\n+Authentication traits\n+=====================\n+\n+.. _authDefinition-trait:\n+\n+``authDefinition`` trait\n+------------------------\n+\n+Summary\n+    A meta-trait that marks a trait as an authentication scheme. Traits\n+    that are marked with this trait are applied to service shapes to\n+    indicate how a client can authenticate with the service.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+Every operation in the closure of a service is expected to support the\n+authentication schemes applied to a service unless the service or operation\n+is marked with the :ref:`auth-trait`, which is used to change the set of\n+supported authentication schemes.\n+\n+The following example defines a service that supports both ``httpBasicAuth``\n+and the hypothetical ``fooExample`` authentication scheme.\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        namespace smithy.example\n+\n+        @authDefinition\n+        @trait(selector: \"service\")\n+        structure fooExample {}\n+\n+        @fooExample\n+        @httpBasicAuth\n+        service WeatherService {\n+            version: \"2017-02-11\",\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#WeatherService\": {\n+                    \"type\": \"service\",\n+                    \"version\": \"2017-02-11\",\n+                    \"traits\": {\n+                        \"smithy.example#fooExample\": {},\n+                        \"smithy.api#httpBasicAuth\": {}\n+                    }\n+                },\n+                \"smithy.example#fooExample\": {\n+                    \"type\": \"structure\",\n+                    \"traits\": {\n+                        \"smithy.api#authDefinition\": true,\n+                        \"smithy.api#trait\": {\n+                            \"selector\": \"service\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+Because authentication scheme definitions are just specialized shapes, they\n+can also support configuration settings.\n+\n+.. code-block:: smithy\n+\n+    namespace smithy.example\n+\n+    @authDefinition\n+    @trait(selector: \"service\")\n+    structure algorithmAuth {\n+        algorithm: AlgorithmAuthAlgorithm,\n+    }\n+\n+    @private\n+    @enum(\"SHA-2\": {})\n+    string AlgorithmAuthAlgorithm\n+\n+    @algorithmAuth(algorithm: \"SHA-2\")\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpBasicAuth-trait:\n+\n+``httpBasicAuth`` trait\n+-----------------------\n+\n+Summary\n+    Indicates that a service supports HTTP Basic Authentication as\n+    defined in :rfc:`2617`.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+.. code-block:: smithy\n+\n+    @httpBasicAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpDigestAuth-trait:\n+\n+``httpDigestAuth`` trait\n+------------------------\n+\n+Summary\n+    Indicates that a service supports HTTP Digest Authentication as defined\n+    in :rfc:`2617`.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+.. code-block:: smithy\n+\n+    @httpDigestAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpBearerAuth-trait:\n+\n+``httpBearerAuth`` trait\n+------------------------\n+\n+Summary\n+    Indicates that a service supports HTTP Bearer Authentication as defined\n+    in :rfc:`6750`.\n+Trait selector\n+    ``service``\n+Value type\n+    Annotation trait.\n+\n+.. code-block:: smithy\n+\n+    @httpBearerAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _httpApiKeyAuth-trait:\n+\n+``httpApiKeyAuth`` trait\n+------------------------\n+\n+Summary\n+    Indicates that a service supports HTTP-specific authentication using an\n+    API key sent in a header or query string parameter.\n+Trait selector\n+    ``service``\n+Value type\n+    Object\n+\n+The ``httpApiKeyAuth`` trait is an object that supports the following\n+properties:\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 10 80\n+\n+    * - Property\n+      - Type\n+      - Description\n+    * - name\n+      - ``string``\n+      - **Required**. Defines the name of the HTTP header or query string\n+        parameter that contains the API key.\n+    * - in\n+      - ``string``\n+      - **Required**. Defines the location of where the key is serialized.\n+        This value can be set to ``header`` or ``query``.\n+\n+The following example defines a service that accepts an API key in the \"X-Api-Key\"\n+HTTP header:\n+\n+.. code-block:: smithy\n+\n+    @httpApiKeyAuth(name: \"X-Api-Key\", in: \"header\")\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+    }\n+\n+\n+.. _optionalAuth-trait:\n+\n+``optionalAuth`` trait\n+----------------------\n+\n+Summary\n+    Indicates that an operation MAY be invoked without authentication,\n+    regardless of any authentication traits applied to the operation.\n+Trait selector\n+    ``operation``\n+Value type\n+    Annotation trait.\n+\n+The following example defines a service that uses HTTP digest authentication,\n+and bound to the service is an operation that supports unauthenticated access.\n+\n+.. code-block:: smithy\n+\n+    @httpDigestAuth\n+    service WeatherService {\n+        version: \"2017-02-11\",\n+        operations: [PingServer]\n+    }\n+\n+    @optionalAuth\n+    operation PingServer {}\n+\n+The following example defines an operation that does not support\n+*any* authentication. This kind of operation does not require the\n+``optionalAuth`` trait.\n+\n+.. code-block:: smithy\n+\n+    @auth([])\n+    operation SomeUnauthenticatedOperation {}\n+\n+\n+.. _auth-trait:\n+\n+``auth`` trait\n+--------------\n+\n+Summary\n+    Defines the priority ordered authentication schemes supported by a service", "originalCommit": "0cdc69a8f7e4e0bded958375913d7f3e3a80c283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNjU1Mw==", "url": "https://github.com/awslabs/smithy/pull/273#discussion_r376626553", "bodyText": "I have it as a priority ordered list in case order ever matters. I did add a uniqueItems trait to the list, but I didn't document it as such. Will do now.", "author": "mtdowling", "createdAt": "2020-02-07T21:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODczMg=="}], "type": "inlineReview"}, {"oid": "4410be0d1f54b8aaa436d61ad347795f818359ab", "url": "https://github.com/awslabs/smithy/commit/4410be0d1f54b8aaa436d61ad347795f818359ab", "message": "Rename protocol tests to match new names", "committedDate": "2020-02-07T21:53:11Z", "type": "commit"}, {"oid": "2bcad8b2f463dd095402061773f1e7f736930b7c", "url": "https://github.com/awslabs/smithy/commit/2bcad8b2f463dd095402061773f1e7f736930b7c", "message": "Update docs to address feedback", "committedDate": "2020-02-07T22:06:11Z", "type": "commit"}]}