{"pr_number": 474, "pr_title": "Add document validation and fix their HTTP binding", "pr_createdAt": "2020-06-24T17:50:25Z", "pr_url": "https://github.com/awslabs/smithy/pull/474", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwMzEyMw==", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445103123", "bodyText": "Should this support blobs, since @httpHeader does?", "author": "kstich", "createdAt": "2020-06-24T18:53:49Z", "path": "docs/source/1.0/spec/core/http-traits.rst", "diffHunk": "@@ -688,9 +687,11 @@ Trait selector\n     .. code-block:: none\n \n         structure > member\n-        :test(> map > member[id|member=value] > :test(simpleType, collection > member > simpleType))\n+        :test(> map > member[id|member=value] > :test(\n+            boolean, number, string, timestamp,\n+            collection > member > :test(boolean, number, string, timestamp)))", "originalCommit": "49961e58b5741aa63bf3326a5cf9521308ac6564", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MzA3Mw==", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445153073", "bodyText": "Blobs aren't supported in headers either, though the spec errantly described how blobs are serialized. Fixing.", "author": "mtdowling", "createdAt": "2020-06-24T20:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwMzEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNDAzNQ==", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445104035", "bodyText": "This should be reworded a bit for clarity, I think. Some options:\n\n\"non-document simple types\" in both places.\nreplace with \"both for simple types that are not documents\".", "author": "kstich", "createdAt": "2020-06-24T18:55:25Z", "path": "docs/source/1.0/spec/core/http-traits.rst", "diffHunk": "@@ -762,9 +763,11 @@ Summary\n Trait selector\n     .. code-block:: none\n \n-        structure > :test(member > :test(simpleType, collection > member > simpleType))\n+        structure > member\n+        :test(> simpleType:not(document),\n+              > collection > member > simpleType:not(document)))\n \n-    *Structure members that target simple types or lists/sets of simple types*\n+    *Structure members that target simple types or lists/sets of simple types, but not documents*", "originalCommit": "49961e58b5741aa63bf3326a5cf9521308ac6564", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTY3Nw==", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445105677", "bodyText": "Should be applied to InlineDocumentAsPayload.", "author": "kstich", "createdAt": "2020-06-24T18:58:20Z", "path": "smithy-aws-protocol-tests/model/restJson1/documents.smithy", "diffHunk": "@@ -0,0 +1,128 @@\n+// This file defines test cases that serialize inline documents.\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+// Define some shapes shared throughout these test cases.\n+document Document\n+\n+/// This example serializes an inline document as part of the payload.\n+@idempotent\n+@http(uri: \"/InlineDocument\", method: \"PUT\")\n+operation InlineDocument {\n+    input: InlineDocumentInputOutput,\n+    output: InlineDocumentInputOutput\n+}\n+\n+structure InlineDocumentInputOutput {\n+    stringValue: String,\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([\n+    {\n+        id: \"InlineDocumentInput\",\n+        documentation: \"Serializes inline documents as part of the JSON request payload with no escaping.\",\n+        protocol: restJson1,\n+        method: \"PUT\",\n+        uri: \"/InlineDocument\",\n+        body: \"\"\"\n+              {\n+                  \"stringValue\": \"string\",\n+                  \"documentValue\": {\n+                      \"foo\": \"bar\"\n+                  }\n+              }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+apply InlineDocument @httpResponseTests([\n+    {\n+        id: \"InlineDocumentOutput\",\n+        documentation: \"Serializes inline documents as part of the JSON response payload with no escaping.\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\"\"\n+            {\n+                \"stringValue\": \"string\",\n+                \"documentValue\": {\n+                    \"foo\": \"bar\"\n+                }\n+            }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+/// This example serializes an inline document as the entire HTTP payload.\n+@idempotent\n+@http(uri: \"/InlineDocumentAsPayload\", method: \"PUT\")\n+operation InlineDocumentAsPayload {\n+    input: InlineDocumentAsPayloadInputOutput,\n+    output: InlineDocumentAsPayloadInputOutput\n+}\n+\n+structure InlineDocumentAsPayloadInputOutput {\n+    @httpPayload\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([", "originalCommit": "49961e58b5741aa63bf3326a5cf9521308ac6564", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTY5OA==", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445105698", "bodyText": "Should be applied to InlineDocumentAsPayload.", "author": "kstich", "createdAt": "2020-06-24T18:58:23Z", "path": "smithy-aws-protocol-tests/model/restJson1/documents.smithy", "diffHunk": "@@ -0,0 +1,128 @@\n+// This file defines test cases that serialize inline documents.\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+// Define some shapes shared throughout these test cases.\n+document Document\n+\n+/// This example serializes an inline document as part of the payload.\n+@idempotent\n+@http(uri: \"/InlineDocument\", method: \"PUT\")\n+operation InlineDocument {\n+    input: InlineDocumentInputOutput,\n+    output: InlineDocumentInputOutput\n+}\n+\n+structure InlineDocumentInputOutput {\n+    stringValue: String,\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([\n+    {\n+        id: \"InlineDocumentInput\",\n+        documentation: \"Serializes inline documents as part of the JSON request payload with no escaping.\",\n+        protocol: restJson1,\n+        method: \"PUT\",\n+        uri: \"/InlineDocument\",\n+        body: \"\"\"\n+              {\n+                  \"stringValue\": \"string\",\n+                  \"documentValue\": {\n+                      \"foo\": \"bar\"\n+                  }\n+              }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+apply InlineDocument @httpResponseTests([\n+    {\n+        id: \"InlineDocumentOutput\",\n+        documentation: \"Serializes inline documents as part of the JSON response payload with no escaping.\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\"\"\n+            {\n+                \"stringValue\": \"string\",\n+                \"documentValue\": {\n+                    \"foo\": \"bar\"\n+                }\n+            }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+/// This example serializes an inline document as the entire HTTP payload.\n+@idempotent\n+@http(uri: \"/InlineDocumentAsPayload\", method: \"PUT\")\n+operation InlineDocumentAsPayload {\n+    input: InlineDocumentAsPayloadInputOutput,\n+    output: InlineDocumentAsPayloadInputOutput\n+}\n+\n+structure InlineDocumentAsPayloadInputOutput {\n+    @httpPayload\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([\n+    {\n+        id: \"InlineDocumentAsPayloadInput\",\n+        documentation: \"Serializes an inline document as the target of the httpPayload trait.\",\n+        protocol: restJson1,\n+        method: \"PUT\",\n+        uri: \"/InlineDocumentAsPayload\",\n+        body: \"\"\"\n+              {\n+                  \"foo\": \"bar\"\n+              }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+apply InlineDocument @httpResponseTests([", "originalCommit": "49961e58b5741aa63bf3326a5cf9521308ac6564", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f86f1fd4ddb13782224b9ceb4fb314c07f7faa90", "url": "https://github.com/awslabs/smithy/commit/f86f1fd4ddb13782224b9ceb4fb314c07f7faa90", "message": "Add document validation and fix their HTTP binding\n\nHTTP binding traits used invalid selectors that aren't actually\nsupported, particularly around document types. Document types today can\nonly be bound in the payload of an HTTP request. This change also add a\nflag to protocol trait definitions that defines if the protocol supports\ninline document types (along with built-in validation to detect when a\nprotcool says it doesn't support document types but a service uses\ndocument types with the protocol). HTTP bindings previously stated that\nonly \"application/json\" media types found in HTTP headers are base64\nencoded, however any string with a mediaType needs to be base64 encoded.", "committedDate": "2020-06-24T20:33:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1Njg2MA==", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445156860", "bodyText": "Missing a \"types\" at the end.", "author": "kstich", "createdAt": "2020-06-24T20:36:50Z", "path": "docs/source/1.0/spec/core/http-traits.rst", "diffHunk": "@@ -762,9 +762,11 @@ Summary\n Trait selector\n     .. code-block:: none\n \n-        structure > :test(member > :test(simpleType, collection > member > simpleType))\n+        structure > member\n+        :test(> simpleType:not(document),\n+              > collection > member > simpleType:not(document)))\n \n-    *Structure members that target simple types or lists/sets of simple types*\n+    *Structure members that target non-document simple types or collections of non-document simple*", "originalCommit": "f86f1fd4ddb13782224b9ceb4fb314c07f7faa90", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a28f2333265bb8a7ba32894b6191c2f44578c6f2", "url": "https://github.com/awslabs/smithy/commit/a28f2333265bb8a7ba32894b6191c2f44578c6f2", "message": "Add document validation and fix their HTTP binding\n\nHTTP binding traits used invalid selectors that aren't actually\nsupported, particularly around document types. Document types today can\nonly be bound in the payload of an HTTP request. This change also add a\nflag to protocol trait definitions that defines if the protocol supports\ninline document types (along with built-in validation to detect when a\nprotcool says it doesn't support document types but a service uses\ndocument types with the protocol). HTTP bindings previously stated that\nonly \"application/json\" media types found in HTTP headers are base64\nencoded, however any string with a mediaType needs to be base64 encoded.", "committedDate": "2020-06-24T20:38:49Z", "type": "commit"}, {"oid": "a28f2333265bb8a7ba32894b6191c2f44578c6f2", "url": "https://github.com/awslabs/smithy/commit/a28f2333265bb8a7ba32894b6191c2f44578c6f2", "message": "Add document validation and fix their HTTP binding\n\nHTTP binding traits used invalid selectors that aren't actually\nsupported, particularly around document types. Document types today can\nonly be bound in the payload of an HTTP request. This change also add a\nflag to protocol trait definitions that defines if the protocol supports\ninline document types (along with built-in validation to detect when a\nprotcool says it doesn't support document types but a service uses\ndocument types with the protocol). HTTP bindings previously stated that\nonly \"application/json\" media types found in HTTP headers are base64\nencoded, however any string with a mediaType needs to be base64 encoded.", "committedDate": "2020-06-24T20:38:49Z", "type": "forcePushed"}]}