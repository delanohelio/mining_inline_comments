{"pr_number": 403, "pr_title": "Rewrite selectors to be push-based with more features", "pr_createdAt": "2020-04-30T00:09:49Z", "pr_url": "https://github.com/awslabs/smithy/pull/403", "timeline": [{"oid": "da096153864666785e0607e381b7284cf1544c96", "url": "https://github.com/awslabs/smithy/commit/da096153864666785e0607e381b7284cf1544c96", "message": "Rewrite selectors spec and impl to be push-based\n\nSelectors are now push-based. A shape is pushed through a selector, one\nat a time, and a terminal listener is used to receive the matched shapes\n(e.g., put them in a set, react on matches, etc). This simplifies how\nselectors are implemented and opens up lots of possibilities like\ndistributing the work of matching a selector to a model across threads.\n\nNew selector features were added too:\n\n1. Projection comparators\n2. Selector$Runner to build more complex evaluations\n3. Selector variables", "committedDate": "2020-04-30T00:04:15Z", "type": "commit"}, {"oid": "54b3b19835c6dd818279a3a51438e070b6d52992", "url": "https://github.com/awslabs/smithy/commit/54b3b19835c6dd818279a3a51438e070b6d52992", "message": "Add reverse neighbors, remove `:of`\n\nThis commit adds support for reverse undirected neighbors, reverse\ndirected neighbors, and removes the `:of` selector since it's behavior\nis now obsolete from reverse neighbors.", "committedDate": "2020-04-30T00:04:15Z", "type": "commit"}, {"oid": "784f43e85a557a8cef5be85472d0664b83a98466", "url": "https://github.com/awslabs/smithy/commit/784f43e85a557a8cef5be85472d0664b83a98466", "message": "Update selectors changelog", "committedDate": "2020-04-30T00:08:32Z", "type": "commit"}, {"oid": "9c924dfd54ebd4bd8378eed384abfcada2e80209", "url": "https://github.com/awslabs/smithy/commit/9c924dfd54ebd4bd8378eed384abfcada2e80209", "message": "Add JMH benchmarks and some optimizations\n\nI was able to figure out that things I thought were improving selector\nperformance but weren't (like unrolling the AndSelector), and I was able to\nidentify things that significantly improve selector performance (like\ndetecting when the first internal selector is a shape type filter and\nusing `Model#shapes(Class<? extends Shape>)` to reduce the number of\nshapes that need to be pushed through a selector).", "committedDate": "2020-04-30T05:59:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1ODgzMQ==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418258831", "bodyText": "I don't see that this file is used anymore.", "author": "kstich", "createdAt": "2020-04-30T20:07:25Z", "path": "smithy-model/src/jmh/resources/software/amazon/smithy/model/jmh/auth-model.smithy", "diffHunk": "@@ -0,0 +1,47 @@\n+namespace smithy.example", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1OTQ4MQ==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418259481", "bodyText": "Is this supposed to have parens in the selector?", "author": "kstich", "createdAt": "2020-04-30T20:08:45Z", "path": "CHANGELOG.md", "diffHunk": "@@ -68,6 +68,10 @@ keys, was added.\n * The `(length)` function property was added. ([#391](https://github.com/awslabs/smithy/pull/391))\n * Attribute selectors now support CSV values, allowing matching on one or more target values.\n * The `:each` selector is now `:is` for clarity. [BC]\n+* The `:of` selector is now removed. Use reverse neighbors instead (e.g., `member (< structure)`). [BC]", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwOTc1Mg==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418309752", "bodyText": "There's no equivalent createsIdValue() test. We should probably validate it for the defaulting behavior on member.", "author": "kstich", "createdAt": "2020-04-30T21:51:42Z", "path": "smithy-model/src/test/java/software/amazon/smithy/model/selector/AttributeValueTest.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package software.amazon.smithy.model.selector;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.shapes.ServiceShape;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.traits.DocumentationTrait;\n+import software.amazon.smithy.model.traits.TagsTrait;\n+import software.amazon.smithy.utils.ListUtils;\n+import software.amazon.smithy.utils.MapUtils;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+public class AttributeValueTest {\n+    @Test\n+    public void checksProjectionSubsetEquality() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue b = AttributeValue.literal(\"b\");\n+        AttributeValue c = AttributeValue.literal(\"c\");\n+\n+        AttributeValue p1 = AttributeValue.projection(ListUtils.of(b));\n+        AttributeValue p2 = AttributeValue.projection(ListUtils.of(b, c));\n+        AttributeValue p3 = AttributeValue.projection(ListUtils.of(a, b, c));\n+        AttributeValue p4 = AttributeValue.projection(ListUtils.of(a));\n+        AttributeComparator comparator = AttributeComparator.SUBSET;\n+\n+        assertThat(comparator.compare(p1, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p3, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p2, false), equalTo(false));\n+        assertThat(comparator.compare(p4, p2, false), equalTo(false));\n+        assertThat(comparator.compare(p1, AttributeValue.literal(\"hi\"), false), equalTo(false));\n+    }\n+\n+    @Test\n+    public void checksProjectionProperSubsetEquality() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue b = AttributeValue.literal(\"b\");\n+        AttributeValue c = AttributeValue.literal(\"c\");\n+\n+        AttributeValue p1 = AttributeValue.projection(ListUtils.of(b));\n+        AttributeValue p2 = AttributeValue.projection(ListUtils.of(b, c));\n+        AttributeValue p3 = AttributeValue.projection(ListUtils.of(a, b, c));\n+        AttributeValue p4 = AttributeValue.projection(ListUtils.of(a));\n+        AttributeComparator comparator = AttributeComparator.PROPER_SUBSET;\n+\n+        assertThat(comparator.compare(p1, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p3, false), equalTo(false));\n+        assertThat(comparator.compare(p3, p2, false), equalTo(false));\n+        assertThat(comparator.compare(p4, p2, false), equalTo(false));\n+        assertThat(comparator.compare(p1, AttributeValue.literal(\"hi\"), false), equalTo(false));\n+    }\n+\n+    @Test\n+    public void checksProjectionEquality() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue b = AttributeValue.literal(\"b\");\n+        AttributeValue c = AttributeValue.literal(\"c\");\n+\n+        AttributeValue p1 = AttributeValue.projection(ListUtils.of(b));\n+        AttributeValue p2 = AttributeValue.projection(ListUtils.of(b, c));\n+        AttributeValue p3 = AttributeValue.projection(ListUtils.of(a, b, c));\n+        AttributeValue p4 = AttributeValue.projection(ListUtils.of(a));\n+        AttributeComparator comparator = AttributeComparator.PROJECTION_EQUALS;\n+\n+        assertThat(comparator.compare(p1, p2, false), equalTo(false));\n+        assertThat(comparator.compare(p3, p3, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p2, false), equalTo(false));\n+        assertThat(comparator.compare(p4, p2, false), equalTo(false));\n+        assertThat(comparator.compare(p1, AttributeValue.literal(\"hi\"), false), equalTo(false));\n+    }\n+\n+    @Test\n+    public void checksProjectionInequality() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue b = AttributeValue.literal(\"b\");\n+        AttributeValue c = AttributeValue.literal(\"c\");\n+\n+        AttributeValue p1 = AttributeValue.projection(ListUtils.of(b));\n+        AttributeValue p2 = AttributeValue.projection(ListUtils.of(b, c));\n+        AttributeValue p3 = AttributeValue.projection(ListUtils.of(a, b, c));\n+        AttributeValue p4 = AttributeValue.projection(ListUtils.of(a));\n+        AttributeComparator comparator = AttributeComparator.PROJECTION_NOT_EQUALS;\n+\n+        assertThat(comparator.compare(p1, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p3, false), equalTo(false));\n+        assertThat(comparator.compare(p3, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p4, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p1, AttributeValue.literal(\"hi\"), false), equalTo(true));\n+    }\n+\n+    @Test\n+    public void checksProjectionEqualityWithEquals() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue b = AttributeValue.literal(\"b\");\n+        AttributeValue c = AttributeValue.literal(\"c\");\n+\n+        AttributeValue p1 = AttributeValue.projection(ListUtils.of(b));\n+        AttributeValue p2 = AttributeValue.projection(ListUtils.of(b, c));\n+        AttributeValue p3 = AttributeValue.projection(ListUtils.of(a, b, c));\n+        AttributeValue p4 = AttributeValue.projection(ListUtils.of(a));\n+        AttributeComparator comparator = AttributeComparator.EQUALS;\n+\n+        assertThat(comparator.compare(p1, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p3, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p4, p2, false), equalTo(false));\n+    }\n+\n+    @Test\n+    public void checksProjectionNotEquality() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue b = AttributeValue.literal(\"b\");\n+        AttributeValue c = AttributeValue.literal(\"c\");\n+\n+        AttributeValue p1 = AttributeValue.projection(ListUtils.of(b));\n+        AttributeValue p2 = AttributeValue.projection(ListUtils.of(b, c));\n+        AttributeValue p3 = AttributeValue.projection(ListUtils.of(a, b, c));\n+        AttributeValue p4 = AttributeValue.projection(ListUtils.of(a));\n+        AttributeComparator comparator = AttributeComparator.NOT_EQUALS;\n+\n+        // != is a bit useless for projections. It just states if any\n+        // value is not equal to any other value. It doesn't tell you\n+        // if one is a subset, one is a superset, etc.\n+        assertThat(comparator.compare(p1, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p3, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p4, p2, false), equalTo(true));\n+\n+        // This tells us that all the elements of both projections are\n+        // the same, so it returns false.\n+        assertThat(comparator.compare(p4, p4, false), equalTo(false));\n+    }\n+\n+    @Test\n+    public void checksProjectionContains() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue b = AttributeValue.literal(\"b\");\n+        AttributeValue c = AttributeValue.literal(\"c\");\n+\n+        AttributeValue p1 = AttributeValue.projection(ListUtils.of(b));\n+        AttributeValue p2 = AttributeValue.projection(ListUtils.of(b, c));\n+        AttributeValue p3 = AttributeValue.projection(ListUtils.of(a, b, c));\n+        AttributeValue p4 = AttributeValue.projection(ListUtils.of(a));\n+        AttributeComparator comparator = AttributeComparator.CONTAINS;\n+\n+        assertThat(comparator.compare(p1, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p3, false), equalTo(true));\n+        assertThat(comparator.compare(p3, p2, false), equalTo(true));\n+        assertThat(comparator.compare(p4, p2, false), equalTo(false));\n+    }\n+\n+    @Test\n+    public void projectionsExistIfTheyHaveValues() {\n+        AttributeComparator comparator = AttributeComparator.EXISTS;\n+        AttributeValue trueValue = AttributeValue.literal(\"true\");\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+\n+        assertThat(comparator.compare(AttributeValue.projection(ListUtils.of(a)), trueValue, false), equalTo(true));\n+        assertThat(comparator.compare(AttributeValue.projection(ListUtils.of()), trueValue, false), equalTo(false));\n+    }\n+\n+    @Test\n+    public void projectionsReturnsFirstValue() {\n+        AttributeValue a = AttributeValue.literal(\"a\");\n+        AttributeValue projection = AttributeValue.projection(ListUtils.of(a));\n+\n+        assertThat(projection.getProperty(\"(first)\").toString(), equalTo(a.toString()));\n+    }\n+\n+    @Test\n+    public void projectionsFirstValueReturnsEmptyWhenEmpty() {\n+        AttributeValue projection = AttributeValue.projection(ListUtils.of());\n+\n+        assertThat(projection.getProperty(\"(first)\"), is(AttributeValue.emptyValue()));\n+    }\n+\n+    @Test\n+    public void projectionReturnsResultOfEachContainedValue() {\n+        AttributeValue a = AttributeValue.node(Node.objectNode().withMember(\"foo\", 1));\n+        AttributeValue b = AttributeValue.node(Node.objectNode().withMember(\"foo\", 2));\n+        AttributeValue c = AttributeValue.node(Node.objectNode().withMember(\"foo\", 3));\n+        AttributeValue projection = AttributeValue.projection(ListUtils.of(a, b, c));\n+        Collection<? extends AttributeValue> values = projection.getProperty(\"foo\").getFlattenedValues();\n+        List<String> strings = values.stream().map(AttributeValue::toString).collect(Collectors.toList());\n+\n+        assertThat(strings, contains(\"1\", \"2\", \"3\"));\n+    }\n+\n+    @Test\n+    public void createsServiceValue() {", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMjIxMQ==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418312211", "bodyText": "List selector comment is incorrect in this file in both locations in comparison to the code that tests it.", "author": "kstich", "createdAt": "2020-04-30T21:57:16Z", "path": "smithy-model/src/test/resources/software/amazon/smithy/model/selector/not-test.smithy", "diffHunk": "@@ -0,0 +1,52 @@\n+namespace smithy.example\n+\n+// Does not match - :not(string) :(float)\n+// Matches string - :not([trait|length]) :not([trait|pattern])\n+string MyString\n+\n+// Matches - :not(string)\n+// Does not match - :not(string) :not(float)\n+float MyFloat\n+\n+// does not match - :not(list > member > string)", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNTc4MA==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418325780", "bodyText": "Comment seems wrong, these enums aren't empty in the model.", "author": "kstich", "createdAt": "2020-04-30T22:30:46Z", "path": "smithy-model/src/test/java/software/amazon/smithy/model/selector/SpecIntegTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package software.amazon.smithy.model.selector;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.Model;\n+\n+/**\n+ * This is a kind of integration test of the examples in the\n+ * specification.\n+ *\n+ * Each test \"category\" is prefixed with \"[name]_\" to group them.\n+ *\n+ * TODO: It would be great to consolidate other tests from SelectorTest here to better organize tests.\n+ */\n+public class SpecIntegTest {\n+\n+    private static Model allowedTagsModel;\n+    private static Model attributeExistenceModel;\n+\n+    @BeforeAll\n+    public static void before() {\n+        attributeExistenceModel =  Model.assembler()\n+                .addImport(SelectorTest.class.getResource(\"attribute-existence.smithy\"))\n+                .assemble()\n+                .unwrap();\n+        allowedTagsModel = Model.assembler()\n+                .addImport(SelectorTest.class.getResource(\"allowed-tags-example.smithy\"))\n+                .assemble()\n+                .unwrap();\n+    }\n+\n+    @Test\n+    public void attributeExistence_MatchesShapesWithTrait() {\n+        // Simple existence check.\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|deprecated]\"),\n+                   containsInAnyOrder(\"smithy.example#DeprecatedString\"));\n+\n+        // Empty tags traits still exist.\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|tags]\"),\n+                   containsInAnyOrder(\"smithy.example#MyString2\"));\n+\n+        // Empty enum traits still exist.", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjI2MQ==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418326261", "bodyText": "Does this model need to contain a string with an enum that has an empty tags array in its definition to properly test this?", "author": "kstich", "createdAt": "2020-04-30T22:32:05Z", "path": "smithy-model/src/test/java/software/amazon/smithy/model/selector/SpecIntegTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package software.amazon.smithy.model.selector;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.Model;\n+\n+/**\n+ * This is a kind of integration test of the examples in the\n+ * specification.\n+ *\n+ * Each test \"category\" is prefixed with \"[name]_\" to group them.\n+ *\n+ * TODO: It would be great to consolidate other tests from SelectorTest here to better organize tests.\n+ */\n+public class SpecIntegTest {\n+\n+    private static Model allowedTagsModel;\n+    private static Model attributeExistenceModel;\n+\n+    @BeforeAll\n+    public static void before() {\n+        attributeExistenceModel =  Model.assembler()\n+                .addImport(SelectorTest.class.getResource(\"attribute-existence.smithy\"))\n+                .assemble()\n+                .unwrap();\n+        allowedTagsModel = Model.assembler()\n+                .addImport(SelectorTest.class.getResource(\"allowed-tags-example.smithy\"))\n+                .assemble()\n+                .unwrap();\n+    }\n+\n+    @Test\n+    public void attributeExistence_MatchesShapesWithTrait() {\n+        // Simple existence check.\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|deprecated]\"),\n+                   containsInAnyOrder(\"smithy.example#DeprecatedString\"));\n+\n+        // Empty tags traits still exist.\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|tags]\"),\n+                   containsInAnyOrder(\"smithy.example#MyString2\"));\n+\n+        // Empty enum traits still exist.\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|enum]\"),\n+                   containsInAnyOrder(\"smithy.example#MyString3\",\n+                                      \"smithy.example#MyString4\",\n+                                      \"smithy.example#MyString5\"));\n+    }\n+\n+    @Test\n+    public void attributeExistence_MatchesShapesWithProjection() {\n+        // Empty projections don't exist.\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|tags|(values)]\"), empty());\n+\n+        // An empty projection does not exist.\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|enum|(values)]\"),\n+                   containsInAnyOrder(\"smithy.example#MyString3\",\n+                                      \"smithy.example#MyString4\",\n+                                      \"smithy.example#MyString5\"));\n+\n+        assertThat(SelectorTest.exampleIds(attributeExistenceModel, \"[trait|enum|(values)|tags]\"),\n+                   containsInAnyOrder(\"smithy.example#MyString5\"));\n+\n+        // An empty projection does not exist.", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4MDU5Ng==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418380596", "bodyText": "Eh, this is a grey area -- lots of traits will omit an array if the array is empty, meaning that it's not going to match a selector.", "author": "mtdowling", "createdAt": "2020-05-01T01:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNzg4NA==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418337884", "bodyText": "This caption syntax and phrasing doesn't match the blocks in the section for String comparators.", "author": "kstich", "createdAt": "2020-04-30T23:06:15Z", "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -106,62 +177,136 @@ Attribute comparison\n \n An attribute selector with a :token:`comparator <selector_comparator>`\n checks for the existence of an attribute and compares the resolved\n-attribute values to a comma separated list of values.\n+attribute value to a comma separated list of possible values. The\n+resolved attribute value on the left hand side of the comparator MUST\n+match one or more of the comma separated values on the right hand\n+side of the comparator.\n \n-The following selector matches shapes that have the :ref:`documentation-trait`\n-with a value set to an empty string:\n+There are three kinds of comparators:\n \n-.. code-block:: none\n+* :ref:`String comparators <string-comparators>`\n+* :ref:`Numeric comparators <numeric-comparators>`\n+* :ref:`Projection comparators <projection-comparators>`\n \n-    [trait|documentation=\"\"]\n \n-Multiple values can be provided using a comma separated list. One or more\n-resolved attribute values MUST match one or more provided values.\n+.. _string-comparators:\n \n-The following selector matches shapes that have the :ref:`tags-trait` in\n-which one or more tags matches either \"foo\" or \"baz\".\n+String comparators\n+------------------\n \n-.. code-block:: none\n+:token:`String comparators <selector_string_comparator>` are used to compare\n+the string representation of values. Attributes that do not have a string\n+representation are treated as an empty string when these comparisons are\n+performed.\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n+\n+    * - Comparator\n+      - Description\n+    * - ``=``\n+      - Matches if the attribute value is equal to the comparison value.\n+        This comparator never matches if either value does not exist.\n+\n+\n+        The following selector matches shapes in the \"smithy.example\"\n+        namespace.\n+\n+        .. code-block:: none\n+\n+            [id|namespace = 'smithy.example']\n+\n+        The following selector matches shapes that have the :ref:`since-trait`\n+        with a value of ``2019`` or ``2020``:\n \n-    [trait|tags|(values)=foo, baz]\n+        .. code-block:: none\n \n-Attribute comparisons can be made case-insensitive by preceding the closing\n+            [trait|since = 2019, 2020]\n+    * - ``!=``\n+      - Matches if the attribute value is not equal to the comparison value.\n+        This comparator never matches if either value does not exist.\n+\n+        The following selector matches shapes that are not in the\n+        \"smithy.example\" namespace.\n+\n+        .. code-block:: none\n+\n+            [id|namespace != 'smithy.example']\n+    * - ``^=``\n+      - Matches if the attribute value starts with the comparison value.\n+        This comparator never matches if either value does not exist.\n+\n+        The following selector matches shapes where the name starts with \"_\".\n+\n+        .. code-block:: none\n+\n+            [id|name ^= '_']\n+    * - ``$=``\n+      - Matches if the attribute value ends with the comparison value.\n+        This comparator never matches if either value does not exist.\n+\n+        The following selector matches shapes where the name ends with \"_\".\n+\n+        .. code-block:: none\n+\n+            [trait|required $= '_']\n+    * - ``*=``\n+      - Matches if the attribute value contains the comparison value.\n+        This comparator never matches if either value does not exist.\n+\n+        The following selector matches shapes where the name contains \"_\".\n+\n+        .. code-block:: none\n+\n+            [id|name *= '_']\n+    * - ``?=``\n+      - Matches based on the existence of a value. This comparator uses the\n+        same rules defined in :ref:`attribute-existence`. The comparator\n+        matches if the value exists and the right hand side of the comparator\n+        is ``true``, or if the value does not exist and the right hand side\n+        of the comparator is set to ``false``. This selector is most useful\n+        in :ref:`scoped attribute selectors <scoped-attribute-selectors>`.\n+\n+        The following selector matches shapes marked as ``required``.\n+\n+        .. code-block:: none\n+\n+            [trait|required ?= true]\n+\n+String comparisons can be made case-insensitive by preceding the closing\n bracket with ``i``.\n \n The following selector matches shapes that have a :ref:`httpQuery-trait`\n that case-insensitively contains the word \"token\":\n \n .. code-block:: none\n \n-    [trait|httpQuery*=token i]\n+    [trait|httpQuery *= token i]\n \n \n-Attribute comparators\n----------------------\n+.. _numeric-comparators:\n \n-Attribute selectors support the following\n-:token:`comparators <selector_comparator>`:\n+Numeric comparators\n+-------------------\n+\n+Relative comparators only match if both values being compared contain valid\n+:token:`number` productions when converted to a string.\n \n .. list-table::\n     :header-rows: 1\n     :widths: 10 90\n \n     * - Comparator\n       - Description\n-    * - ``=``\n-      - Matches if the attribute value is equal to the comparison value.\n-    * - ``!=``\n-      - Matches if the attribute value is not equal to the comparison value.\n-        Note that this comparator is never matched if the resolved attribute\n-        does not exist.\n-    * - ``^=``\n-      - Matches if the attribute value starts with the comparison value.\n-    * - ``$=``\n-      - Matches if the attribute value ends with the comparison value.\n-    * - ``*=``\n-      - Matches if the attribute value contains with the comparison value.\n     * - ``>``\n       - Matches if the attribute value is greater than the comparison value.\n+\n+        .. code-block:: none", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDg1Mw==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418340853", "bodyText": "Last bit of this reads a little oddly with the rest of the sentence, maybe \"when attempting to access any properties\"?", "author": "kstich", "createdAt": "2020-04-30T23:15:26Z", "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -170,126 +315,149 @@ Attribute selectors support the following\n     * - ``<=``\n       - Matches if the attribute value is less than or equal to the\n         comparison value.\n-    * - ``?=``\n-      - Matches if the attribute value on the left hand side of the comparator\n-        *exists* and matches the existence assertion on the right hand side.\n-        This comparator uses the same rules defined in :ref:`attribute-existence`.\n-        The comparator matches if the value exists and the right hand side of\n-        the comparator is ``true``, or if the value does not exist and the\n-        right hand side of the comparator is set to ``false``.\n \n+If either value is not a valid number, then the selector does not match.\n \n-Relative comparators\n-~~~~~~~~~~~~~~~~~~~~\n+The following selector does not match any shapes because the comparison value\n+is not a valid number:\n \n-The ``<``, ``<=``, ``>``, ``>=`` comparators only match if both the attribute\n-value and comparison value contain valid :token:`number` productions. If\n-either is not a number, then the selector does not match.\n+.. code-block:: none\n \n-The following selector matches shapes that have an :ref:`httpError-trait`\n-value that is greater than or equal to `500`:\n+    [trait|httpError >= \"not a number!\"]\n \n-.. code-block:: none\n \n-    [trait|httpError >= 500]\n+.. _selector-attributes:\n \n-The following selector is equivalent:\n+Attributes\n+==========\n \n-.. code-block:: none\n+Selector attributes return objects that MAY have nested properties. Objects\n+returned from selectors MAY be available to cast to a string. Shapes support\n+the following attributes:\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n \n-    [trait|httpError >= '500']\n+    * - Attribute\n+      - Description\n+    * - :ref:`id <id-attribute>`\n+      - Returns an object that contains the shape ID of a shape.\n+    * - :ref:`trait <trait-attribute>`\n+      - Returns an object that contains the traits applied to a shape.\n+    * - :ref:`service <service-attribute>`\n+      - Returns an object that contains information about service shapes.\n+    * - :ref:`var <var-attribute>`\n+      - Returns an object that contains the\n+        :ref:`variables <selector-variables>` currently in scope.\n+\n+Nested properties of an attribute object can be selected using subsequent\n+pipe (``|``) delimited property names.\n \n-The following selector does not match any shapes because the comparison value\n-is not a valid number:\n+The following selector matches shapes that have a :ref:`range-trait`\n+with a ``min`` property set to ``1``:\n \n .. code-block:: none\n \n-    [trait|httpError >= \"not a number!\"]\n+    [trait|range|min = 1]\n \n+Whitespace is insignificant. The following selector is equivalent to the\n+above selector:\n \n-.. _selector-attributes:\n+.. code-block:: none\n \n-Attributes\n-==========\n+    [trait | range\n+        | min = 1 ]\n \n-Selector attributes return objects that MAY have nested properties. Objects\n-returned from selectors MAY be available to cast to a string. Attempting\n-to select a :ref:`values-projection`, :ref:`keys-projection`, or\n-:ref:`(length) attribute function <attribute-function-properties>`\n-directly from a shape will return no result.\n+Accessing an attribute or nested attribute property that does not exist\n+returns an *empty value*. An empty value does not satisfy existence checks,\n+returns an empty string when used with string comparators, and returns an\n+empty value when attempting to access properties of an empty value.", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDI2Nw==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418344267", "bodyText": "Should mention an empty value is returned if a trait is not found, like is done with id|member.", "author": "kstich", "createdAt": "2020-04-30T23:26:18Z", "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -301,258 +469,396 @@ The following selector matches all service shapes:\n \n     [service]\n \n-The intent of the above selector is more clearly stated using the following\n-selector:\n+However, the intent of the above selector is more clearly stated using the\n+following selector:\n \n .. code-block:: none\n \n     service\n \n-When compared to a string value, the ``service`` attribute returns an\n-empty string.\n+When compared to a string value, the ``service`` attribute returns the\n+absolute shape ID of the service shape.\n \n+The following selector matches all service shapes with a shape ID of\n+``smithy.example#MyService``:\n \n-``service`` properties\n-~~~~~~~~~~~~~~~~~~~~~~\n+.. code-block:: none\n \n-The ``service`` attribute contains the following properties:\n+    [service = smithy.example#MyService]\n \n-``version`` (``string``)\n-    Gets the version property of a service shape if the shape is\n-    a service.\n+**Properties**\n \n-    The following example matches all service shapes that have a version\n+The ``service`` attribute supports the following properties:\n+\n+``id``\n+    Returns the service shape ID as an :ref:`id-attribute`.\n+``version``\n+    Gets the version property of a service shape as a string.\n+\n+    The following selector matches all service shapes that have a version\n     property that starts with ``2018-``:\n \n     .. code-block:: none\n \n-        [service|version^='2018-']\n-``(length)``\n-    Returns ``1``, the number of attribute supported by the service\n-    property.\n+        [service|version ^= '2018-']\n \n \n+.. _trait-attribute:\n+\n ``trait`` attribute\n -------------------\n \n The ``trait`` attribute returns an object that contains every trait applied\n-to a shape. Each key of the ``trait`` object is the absolute shape ID of a\n-trait applied to the shape, and each value is the value of the applied trait.\n+to a shape. The ``trait`` attribute supports the following properties:\n \n-The following example matches all shapes that have the\n-:ref:`deprecated-trait`:\n+``(keys)``\n+    The ``(keys)`` property returns a :ref:`projection <projection-attribute>`\n+    that contains the shape ID of every trait applied to a shape.\n \n-.. code-block:: none\n+    The following selector matches shapes that apply a trait from the\n+    ``smithy.example`` namespace:\n \n-    [trait|smithy.api#deprecated]\n+    .. code-block:: none\n \n-Traits in the ``smithy.api`` namespace MAY be retrieved from the ``trait``\n-object without a namespace.\n+        [trait|(keys)|namespace = 'smithy.example']\n+``(values)``\n+    The ``(values)`` property returns a :ref:`projection <projection-attribute>`\n+    that contains every trait attached to a shape as a\n+    :ref:`node value <node-attribute>`.\n \n-.. code-block:: none\n+    The following selector matches shapes that apply a trait that\n+    contains a top-level structure member named ``tags``:\n \n-    [trait|deprecated]\n+    .. code-block:: none\n \n-Traits are converted to their serialized :token:`node <node_value>` form\n-when matching against their values. Only string, Boolean, and numeric\n-values can be compared with an expected value. Boolean values are converted\n-to \"true\" or \"false\". Numeric values are converted to their string\n-representation.\n+        [trait|(values)|tags]\n+``(length)``\n+    The ``(length)`` property returns the number of traits applied to a\n+    shape.\n \n-The following selector matches all shapes with the :ref:`error-trait` set to\n-``client``:\n+    The following selector matches shapes with more than 10 traits\n+    applied to it:\n \n-.. code-block:: none\n+    .. code-block:: none\n \n-    [trait|error=client]\n+        [trait|(length) > 10]\n+``*``\n+    Other values are treated as shape IDs, where a relative shape ID is\n+    resolved to the ``smithy.api`` namespace. If a matching trait with the\n+    given shape ID is attached to the shape, it's :ref:`node value <node-attribute>`\n+    is returned.", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0NDU0Ng==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418344546", "bodyText": "The pluralizing in this sentence is mixed.", "author": "kstich", "createdAt": "2020-04-30T23:27:07Z", "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -301,258 +469,396 @@ The following selector matches all service shapes:\n \n     [service]\n \n-The intent of the above selector is more clearly stated using the following\n-selector:\n+However, the intent of the above selector is more clearly stated using the\n+following selector:\n \n .. code-block:: none\n \n     service\n \n-When compared to a string value, the ``service`` attribute returns an\n-empty string.\n+When compared to a string value, the ``service`` attribute returns the\n+absolute shape ID of the service shape.\n \n+The following selector matches all service shapes with a shape ID of\n+``smithy.example#MyService``:\n \n-``service`` properties\n-~~~~~~~~~~~~~~~~~~~~~~\n+.. code-block:: none\n \n-The ``service`` attribute contains the following properties:\n+    [service = smithy.example#MyService]\n \n-``version`` (``string``)\n-    Gets the version property of a service shape if the shape is\n-    a service.\n+**Properties**\n \n-    The following example matches all service shapes that have a version\n+The ``service`` attribute supports the following properties:\n+\n+``id``\n+    Returns the service shape ID as an :ref:`id-attribute`.\n+``version``\n+    Gets the version property of a service shape as a string.\n+\n+    The following selector matches all service shapes that have a version\n     property that starts with ``2018-``:\n \n     .. code-block:: none\n \n-        [service|version^='2018-']\n-``(length)``\n-    Returns ``1``, the number of attribute supported by the service\n-    property.\n+        [service|version ^= '2018-']\n \n \n+.. _trait-attribute:\n+\n ``trait`` attribute\n -------------------\n \n The ``trait`` attribute returns an object that contains every trait applied\n-to a shape. Each key of the ``trait`` object is the absolute shape ID of a\n-trait applied to the shape, and each value is the value of the applied trait.\n+to a shape. The ``trait`` attribute supports the following properties:\n \n-The following example matches all shapes that have the\n-:ref:`deprecated-trait`:\n+``(keys)``\n+    The ``(keys)`` property returns a :ref:`projection <projection-attribute>`\n+    that contains the shape ID of every trait applied to a shape.\n \n-.. code-block:: none\n+    The following selector matches shapes that apply a trait from the\n+    ``smithy.example`` namespace:\n \n-    [trait|smithy.api#deprecated]\n+    .. code-block:: none\n \n-Traits in the ``smithy.api`` namespace MAY be retrieved from the ``trait``\n-object without a namespace.\n+        [trait|(keys)|namespace = 'smithy.example']\n+``(values)``\n+    The ``(values)`` property returns a :ref:`projection <projection-attribute>`\n+    that contains every trait attached to a shape as a\n+    :ref:`node value <node-attribute>`.\n \n-.. code-block:: none\n+    The following selector matches shapes that apply a trait that\n+    contains a top-level structure member named ``tags``:\n \n-    [trait|deprecated]\n+    .. code-block:: none\n \n-Traits are converted to their serialized :token:`node <node_value>` form\n-when matching against their values. Only string, Boolean, and numeric\n-values can be compared with an expected value. Boolean values are converted\n-to \"true\" or \"false\". Numeric values are converted to their string\n-representation.\n+        [trait|(values)|tags]\n+``(length)``\n+    The ``(length)`` property returns the number of traits applied to a\n+    shape.\n \n-The following selector matches all shapes with the :ref:`error-trait` set to\n-``client``:\n+    The following selector matches shapes with more than 10 traits\n+    applied to it:\n \n-.. code-block:: none\n+    .. code-block:: none\n \n-    [trait|error=client]\n+        [trait|(length) > 10]\n+``*``\n+    Other values are treated as shape IDs, where a relative shape ID is\n+    resolved to the ``smithy.api`` namespace. If a matching trait with the\n+    given shape ID is attached to the shape, it's :ref:`node value <node-attribute>`\n+    is returned.\n \n-The following selector matches all shapes with the :ref:`error-trait`, but\n-the trait is not set to ``client``:\n+    The following selector matches shapes that have the\n+    :ref:`deprecated-trait`:\n \n-.. code-block:: none\n+    .. code-block:: none\n \n-    [trait|error!=client]\n+        [trait|smithy.api#deprecated]\n \n-The following selector matches all shapes with the :ref:`documentation-trait`\n-that have a value that contains \"TODO\" or \"FIXME\":\n+    Traits in the ``smithy.api`` namespace MAY be retrieved from the ``trait``\n+    attribute without a namespace.\n \n-.. code-block:: none\n+    .. code-block:: none\n \n-    [trait|documentation *= TODO, FIXME]\n+        [trait|deprecated]\n \n-.. note::\n+    Traits are converted to their serialized :token:`node <node_value>` form\n+    when matching against their values. Only string, boolean, and numeric\n+    values can be compared using a :ref:`string comparator <string-comparators>`.\n+    Boolean values are converted to \"true\" or \"false\". Numeric values are\n+    converted to their string representation.\n \n-    When converted to a string, the ``trait`` attribute returns an\n-    empty string.\n+    The following selector matches shapes with the :ref:`error-trait` set to\n+    ``client``:\n \n-The ``(length)`` attribute function returns the number of traits applied to a\n-shape.\n+    .. code-block:: none\n \n-The following example matches all shapes with more than 10 traits applied to it:\n+        [trait|error = client]\n \n-.. code-block:: none\n+    The following selector matches shapes that have the :ref:`error-trait`\n+    where its value is not ``client``:\n \n-    [trait|(length) > 10]\n+    .. code-block:: none\n \n+        [trait|error != client]\n \n-Nested attribute properties\n----------------------------\n+    The following selector matches shapes with the :ref:`documentation-trait`\n+    with a value that contains \"TODO\" or \"FIXME\":\n \n-Nested properties of an object attribute can be selected using subsequent\n-pipe (``|``) delimited property names.\n+    .. code-block:: none\n \n-The following example matches all shapes that have a :ref:`range-trait`\n-with a ``min`` property set to ``1``:\n+        [trait|documentation *= TODO, FIXME]\n \n-.. code-block:: none\n+.. note::\n \n-    [trait|range|min=1]\n+    The ``trait`` attribute returns an empty string when compared with\n+    a string comparator.\n \n \n-.. _attribute-function-properties:\n+.. _node-attribute:\n \n-Attribute function properties\n------------------------------\n+Node attribute\n+--------------\n+\n+A *node attribute* is created by retrieving nested values from a ``trait``\n+attribute. The node value created from a trait is defined in :ref:`trait-node-values`.\n+A node that contains a string, number, or boolean value are converted to", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1Mjk0NQ==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418352945", "bodyText": "s/predicates/predicate", "author": "kstich", "createdAt": "2020-04-30T23:55:47Z", "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -864,83 +1228,83 @@ The table below lists the labeled directed relationships from each shape.\n .. important::\n \n     Implementations MUST tolerate parsing unknown relationship types. When\n-    evaluated, the directed traversal of unknown relationship types matches\n+    evaluated, the directed traversal of unknown relationship types yields\n     no shapes.\n \n \n Functions\n =========\n \n-Functions are used to filter shapes. Functions always start with ``:``.\n+Functions are used to filter and yield shapes using a variadic argument\n+list of selectors separated by a comma (``,``). Functions always start with\n+a colon (``:``).\n \n .. important::\n \n     Implementations MUST tolerate parsing unknown function names. When\n-    evaluated, the unknown function matches no shapes.\n+    evaluated, an unknown function yields no shapes.\n \n \n+.. _test-function:\n+\n ``:test``\n ---------\n \n-The ``:test`` function is used to test if a shape is contained within any of\n-the provided predicate selector return values without changing the current\n-shape.\n+The ``:test`` function is used to test if a shape is matched by any of the\n+provided predicate selectors. The ``:test`` function stops testing predicates\n+and yields the current shape as soon as the first predicates in its argument", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NDgwNw==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418354807", "bodyText": "Great work on the flow of this documentation. Selectors are now a highly complex topic and these docs help reveal that complexity properly.", "author": "kstich", "createdAt": "2020-05-01T00:02:37Z", "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -5,59 +5,130 @@ Selectors\n =========\n \n A :dfn:`Smithy selector` is a domain specific language (DSL) used to match\n-specific shapes within a model. Selectors are used to build custom\n+shapes within a model. Selectors are used to build custom\n :ref:`validators <EmitEachSelector>` and to specify where it is valid to\n-apply a trait.\n+apply a :ref:`trait <trait-shape-properties>`.\n \n .. contents:: Table of contents\n-    :depth: 2\n+    :depth: 1\n     :local:\n     :backlinks: none\n \n \n Introduction", "originalCommit": "933fedd8edd3821e0c42b31151d5ed5766b6488d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f30ea4ee1e37657a0f8b6062f8f2b3aadb89a272", "url": "https://github.com/awslabs/smithy/commit/f30ea4ee1e37657a0f8b6062f8f2b3aadb89a272", "message": "Optimize AndSelector and clean up JMH\n\nThe benchmark wasn't previously actually matching any shapes, som that's\nbeen addressed. Further, I found that unrolling cases of the AndSelector\nwhen it's created resulted in a 40% performance improvement.", "committedDate": "2020-05-01T00:42:52Z", "type": "commit"}, {"oid": "6ca7d78045562b9ef9ae6393428eca6452c8f8eb", "url": "https://github.com/awslabs/smithy/commit/6ca7d78045562b9ef9ae6393428eca6452c8f8eb", "message": "Address selector CR feedback, cache toString\n\nThic commit addresses Selector CR feedback and also caches converting an\nAttributeValue to a String or to a message string (renamed debugString\nto toMessageString). This commit also further cuts down the kinds of\nvalues that can be converted to a message string (e.g., a\nVariableAttribute now returns \"\" instead of the JSON representation to\nmake this easier to specify later when we add support for templated\nerror messages in EmitEachSelector).", "committedDate": "2020-05-01T02:27:24Z", "type": "commit"}, {"oid": "6ca7d78045562b9ef9ae6393428eca6452c8f8eb", "url": "https://github.com/awslabs/smithy/commit/6ca7d78045562b9ef9ae6393428eca6452c8f8eb", "message": "Address selector CR feedback, cache toString\n\nThic commit addresses Selector CR feedback and also caches converting an\nAttributeValue to a String or to a message string (renamed debugString\nto toMessageString). This commit also further cuts down the kinds of\nvalues that can be converted to a message string (e.g., a\nVariableAttribute now returns \"\" instead of the JSON representation to\nmake this easier to specify later when we add support for templated\nerror messages in EmitEachSelector).", "committedDate": "2020-05-01T02:27:24Z", "type": "forcePushed"}, {"oid": "1ec65379714ba22df31f440cedac4789a5680781", "url": "https://github.com/awslabs/smithy/commit/1ec65379714ba22df31f440cedac4789a5680781", "message": "Make JMH selector comparisons more fair\n\nThe updated selector now avoids needing to capture an intermediate\nvariable and use projection scoped attribute comparisons.", "committedDate": "2020-05-01T02:52:16Z", "type": "commit"}, {"oid": "90c35765a7b60899744960601b0a4ed52b7a2719", "url": "https://github.com/awslabs/smithy/commit/90c35765a7b60899744960601b0a4ed52b7a2719", "message": "Terminate predicates on the first result\n\nSelectors weren't terminating :not and :test selector predicates early when\nthey matched their first result. They don't care about more than one result,\nbut previously, their predicates could continue to emit shapes even after\nthe first match. InternalSelectors now return false to instruct senders\nthat they no longer need additional shapes.", "committedDate": "2020-05-01T04:05:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxOTYzMQ==", "url": "https://github.com/awslabs/smithy/pull/403#discussion_r418619631", "bodyText": "Should this be final and non-public?", "author": "kstich", "createdAt": "2020-05-01T16:29:19Z", "path": "smithy-model/src/main/java/software/amazon/smithy/model/selector/VariableStoreSelector.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.selector;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import software.amazon.smithy.model.shapes.Shape;\n+\n+/**\n+ * Stores a variable in the {@link Context} object using a selector.\n+ *\n+ * <p>The result of evaluating the selector is stored in the {@code Context}\n+ * using the given variable name. This selector is much like the ':test()'\n+ * function in that it does not change the current node. Selectors run after\n+ * a {@code VariableStoreSelector} start processing shapes from the same\n+ * point that the variable capture occurred.\n+ */\n+public class VariableStoreSelector implements InternalSelector {", "originalCommit": "90c35765a7b60899744960601b0a4ed52b7a2719", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "52c7d39b4a381653ab59b094f20c6b6d1e19f89f", "url": "https://github.com/awslabs/smithy/commit/52c7d39b4a381653ab59b094f20c6b6d1e19f89f", "message": "Make VariableStoreSelector package-private final", "committedDate": "2020-05-01T17:02:37Z", "type": "commit"}]}