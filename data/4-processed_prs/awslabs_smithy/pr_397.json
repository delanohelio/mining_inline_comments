{"pr_number": 397, "pr_title": "Move validators into core spec, rethink suppressions", "pr_createdAt": "2020-04-23T23:39:55Z", "pr_url": "https://github.com/awslabs/smithy/pull/397", "timeline": [{"oid": "5b197cc97715413b74ae2cbff662c3a24f6089e1", "url": "https://github.com/awslabs/smithy/commit/5b197cc97715413b74ae2cbff662c3a24f6089e1", "message": "Move validation into core\n\nThis commit moves model validation and suppressions into the core.\nEmitEachSelector and EmitNoneSelector are now part of smithy-model and\nwere removed from smithy-linters. The `@suppress` trait was added to\nsuppress validaation events on specific shapes. The `validators`\nmetadata property was updated so that it now only take `id`,\n`namespace`, and `reason`, where `namespace` can be set to `*` to\nsuppress a validation event for all namespaces or validation events that\naren't specific to a single shape.\n\nThe ability to add custom suppressions to the ModeAssembler has been\nremoved.", "committedDate": "2020-04-23T23:35:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyMDg5NQ==", "url": "https://github.com/awslabs/smithy/pull/397#discussion_r414220895", "bodyText": "Suppresses validation events*", "author": "kstich", "createdAt": "2020-04-24T00:57:32Z", "path": "smithy-model/src/main/resources/software/amazon/smithy/model/loader/prelude-traits.smithy", "diffHunk": "@@ -627,3 +627,11 @@ structure endpoint {\n @trait(selector: \":test(member:of(structure)[trait|required] > string)\")\n @tags([\"diff.error.const\"])\n structure hostLabel {}\n+\n+/// Suppresses a validation event by ID for a given shape.", "originalCommit": "07a5c8233dec9e49c1f04704e6b1979b9a85fab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyMzEzNQ==", "url": "https://github.com/awslabs/smithy/pull/397#discussion_r414223135", "bodyText": "This comment seems off, service suppressions is what's throwing me. Also, if \"service\" is supposed to be namespace, the precedence listed is incorrect.", "author": "kstich", "createdAt": "2020-04-24T01:05:35Z", "path": "smithy-model/src/main/java/software/amazon/smithy/model/loader/ModelValidator.java", "diffHunk": "@@ -151,18 +142,97 @@ private void assembleValidators(List<ValidatorDefinition> definitions) {\n             result.getResult().ifPresent(validators::add);\n             events.addAll(result.getValidationEvents());\n             if (result.getValidationEvents().isEmpty() && !result.getResult().isPresent()) {\n-                events.add(unknownValidatorError(val.name, val.sourceLocation));\n+                events.add(suppressEvent(unknownValidatorError(val.name, val.sourceLocation)));\n             }\n         }\n     }\n \n+    // Unknown validators don't fail the build!\n     private ValidationEvent unknownValidatorError(String name, SourceLocation location) {\n         return ValidationEvent.builder()\n-                // Per the spec, the eventID is \"UnknownValidator.<validatorName>\".\n-                .eventId(\"UnknownValidator.\" + name)\n+                // Per the spec, the eventID is \"UnknownValidator_<validatorName>\".\n+                .eventId(\"UnknownValidator_\" + name)\n                 .severity(Severity.WARNING)\n                 .sourceLocation(location)\n                 .message(\"Unable to locate a validator named `\" + name + \"`\")\n                 .build();\n     }\n+\n+    // Find all namespace suppressions.\n+    private void assembleNamespaceSuppressions() {\n+        model.getMetadataProperty(SUPPRESSIONS).ifPresent(value -> {\n+            List<ObjectNode> values = value.expectArrayNode().getElementsAs(ObjectNode.class);\n+            for (ObjectNode rule : values) {\n+                rule.warnIfAdditionalProperties(SUPPRESSION_KEYS);\n+                String id = rule.expectStringMember(ID).getValue();\n+                String namespace = rule.expectStringMember(NAMESPACE).getValue();\n+                String reason = rule.getStringMemberOrDefault(REASON, EMPTY_REASON);\n+                namespaceSuppressions.computeIfAbsent(id, i -> new HashMap<>()).put(namespace, reason);\n+            }\n+        });\n+    }\n+\n+    private ValidationEvent suppressEvent(ValidationEvent event) {\n+        // ERROR and SUPPRESSED events cannot be suppressed.\n+        if (!event.getSeverity().canSuppress()) {\n+            return event;\n+        }\n+\n+        String reason = resolveReason(event);\n+\n+        // The event is not suppressed, return as-is.\n+        if (reason == null) {\n+            return event;\n+        }\n+\n+        // The event was suppressed so change the severity and reason.\n+        ValidationEvent.Builder builder = event.toBuilder();\n+        builder.severity(Severity.SUPPRESSED);\n+        if (!reason.equals(EMPTY_REASON)) {\n+            builder.suppressionReason(reason);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    // Get the reason as a String if it is suppressed, or null otherwise.\n+    private String resolveReason(ValidationEvent event) {\n+        return event.getShapeId()\n+                .flatMap(model::getShape)\n+                .flatMap(shape -> matchSuppression(shape, event.getEventId()))\n+                // This is always evaluated if a reason hasn't been found.\n+                .orElseGet(() -> matchWildcardNamespaceSuppressions(event.getEventId()));\n+    }\n+\n+    private Optional<String> matchSuppression(Shape shape, String eventId) {\n+        // Check namespace-wide suppressions.\n+        if (namespaceSuppressions.containsKey(eventId)) {\n+            Map<String, String> namespaces = namespaceSuppressions.get(eventId);\n+            if (namespaces.containsKey(shape.getId().getNamespace())) {\n+                return Optional.of(namespaces.get(shape.getId().getNamespace()));\n+            }\n+        }\n+\n+        // Traits take precedent over service suppressions.", "originalCommit": "07a5c8233dec9e49c1f04704e6b1979b9a85fab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MjMyMg==", "url": "https://github.com/awslabs/smithy/pull/397#discussion_r414682322", "bodyText": "s/linter/validator", "author": "kstich", "createdAt": "2020-04-24T15:53:00Z", "path": "docs/source/guides/model-linters.rst", "diffHunk": "@@ -696,174 +510,199 @@ Configuration\n            represent time.\n \n \n-.. _UnreferencedShape:\n+-------------------------\n+Writing custom validators\n+-------------------------\n \n-UnreferencedShape\n------------------\n+Custom validators can be written in Java to apply more advanced model validation.\n+Writing a custom validator involves writing an implementation of a\n+Smithy validator in Java, creating a JAR, and making the JAR available on the\n+classpath.\n \n-Looks for shapes that are not connected to from any service shape within\n-the model.\n+Custom validators are implementations of the\n+``software.amazon.smithy.model.validation.Validator`` interface. Most linters\n+should extend from ``software.amazon.smithy.model.validation.AbstractValidator``.\n \n-Rationale\n-    Unreferenced shapes are good candidates for removal from a model.\n+The following linter emits a ``ValidationEvent`` for every shape in the", "originalCommit": "07a5c8233dec9e49c1f04704e6b1979b9a85fab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MjQxNQ==", "url": "https://github.com/awslabs/smithy/pull/397#discussion_r414682415", "bodyText": "s/linters/validators", "author": "kstich", "createdAt": "2020-04-24T15:53:07Z", "path": "docs/source/guides/model-linters.rst", "diffHunk": "@@ -696,174 +510,199 @@ Configuration\n            represent time.\n \n \n-.. _UnreferencedShape:\n+-------------------------\n+Writing custom validators\n+-------------------------\n \n-UnreferencedShape\n------------------\n+Custom validators can be written in Java to apply more advanced model validation.\n+Writing a custom validator involves writing an implementation of a\n+Smithy validator in Java, creating a JAR, and making the JAR available on the\n+classpath.\n \n-Looks for shapes that are not connected to from any service shape within\n-the model.\n+Custom validators are implementations of the\n+``software.amazon.smithy.model.validation.Validator`` interface. Most linters", "originalCommit": "07a5c8233dec9e49c1f04704e6b1979b9a85fab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5MzMyMw==", "url": "https://github.com/awslabs/smithy/pull/397#discussion_r414693323", "bodyText": "s/a validation event/validation event(s)", "author": "kstich", "createdAt": "2020-04-24T16:09:02Z", "path": "docs/source/spec/core/model-validation.rst", "diffHunk": "@@ -0,0 +1,442 @@\n+.. _validation:\n+\n+================\n+Model validation\n+================\n+\n+Smithy provides a customizable validation system that can be used by\n+API designers and organizations to ensure that their APIs adhere to their\n+own standards and best practices.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+------------\n+Introduction\n+------------\n+\n+APIs require a great deal of care and discipline to ensure that they provide\n+a coherent interface to customers, particularly after an API is released and\n+new features are added. This specification defines metadata that is used to\n+validate a model against configurable validator definitions, ensuring that\n+developers adhere to an organization's API standards.\n+\n+Tools like Checkstyle and Findbugs help to ensure that developers avoid common\n+bugs and pitfalls when writing code. This is a very powerful concept,\n+particularly for developers that are new to a programming language. This\n+concept is even more powerful when teams use the configurability of these\n+tools to communicate the coding standards of an organization and automate\n+their enforcement. This validation standard allows the same level of\n+conformity and rigor to be applied to Smithy models and API definitions.\n+\n+\n+.. _validator-definition:\n+\n+----------\n+Validators\n+----------\n+\n+The ``validators`` metadata property contains an array of validator\n+objects that are used to constrain a model. Each object in the\n+``validators`` array supports the following properties:\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 20 20 60\n+\n+    * - Property\n+      - Type\n+      - Description\n+    * - name\n+      - ``string``\n+      - **Required**. The name of the validator to apply. This name is used in\n+        implementations to find and configure the appropriate validator\n+        implementation. Validators only take effect if a Smithy processor\n+        implements the validator.\n+    * - id\n+      - ``string``\n+      - Defines a custom identifier for the validator.\n+\n+        Multiple instances of a single validator can be configured for a model.\n+        Providing an ``id`` allows suppressions to suppress a specific instance\n+        of a validator.\n+\n+        If ``id`` is not specified, it will default to the ``name`` property of\n+        the validator definition.\n+    * - message\n+      - ``string``\n+      - Provides a custom message to use when emitting validation events. The\n+        special ``{super}`` string can be added to a custom message to inject\n+        the original error message of the validation event into the custom\n+        message.\n+    * - severity\n+      - ``string``\n+      - Provides a custom :ref:`severity <severity-definition>` level to use\n+        when a validation event occurs. If no severity is provided, then the\n+        default severity of the validator is used.\n+\n+        .. note::\n+\n+              The severity of user-defined validators cannot be set to ERROR.\n+    * - namespaces\n+      - [ ``string`` ]\n+      - Provides a list of the namespaces that are targeted by the validator.\n+        The validator will ignore any validation events encountered that are\n+        not specific to the given namespaces.\n+    * - selector\n+      - ``string``\n+      - A valid :ref:`selector <selectors>` that causes the validator to only\n+        validate shapes that match the selector. The validator will ignore any\n+        validation events encountered that do not satisfy the selector.\n+    * - configuration\n+      - ``object``\n+      - Object that provides validator configuration. The available properties\n+        are defined by each validator. Validators MAY require that specific\n+        configuration properties are provided.\n+\n+The following Smithy document applies a custom validator named \"SomeValidator\":\n+\n+.. code-block:: smithy\n+\n+    $version: \"1.0.0\"\n+\n+    metadata validators = [\n+        {\n+            // The name of the validator.\n+            name: \"SomeValidator\",\n+            // Uses a custom event ID for each validation event emitted.\n+            id: \"CustomEventId\",\n+            // Uses a custom message that also includes the default message.\n+            message: \"My custom message name. {super}\",\n+            // Applies the rule only to the following namespaces.\n+            namespaces: [\"foo.baz\", \"bar.qux\"],\n+            // The following properties are specific to the validator.\n+            configuration: {\n+              \"someProperty\": \"foo\",\n+            }\n+        }\n+    ]\n+\n+    namespace smithy.example\n+\n+    // shapes are defined here...\n+\n+\n+.. _missing-validators:\n+\n+Missing validators\n+==================\n+\n+The actual implementation of a validator is defined in code and is\n+not defined in the Smithy model itself. If a Smithy implementation does not\n+have an implementation for a specific validator by name, the Smithy\n+implementation MUST emit a WARNING validation event with an event ID that is\n+the concatenation of ``UnknownValidator_`` and the ``name`` property of the\n+validator that could not be found. For example, given a custom validator\n+that could not be found named ``Foo``, the implementation MUST emit a\n+validation event with an event ID of ``UnknownValidator_Foo`` and a\n+severity of WARNING.\n+\n+\n+.. _severity-definition:\n+\n+--------\n+Severity\n+--------\n+\n+When a model is in violation of a validator, a *validation event* is emitted.\n+This validation event contains metadata about the violation, including the\n+optional shape that was in violation, the validator ID, and the severity of\n+the violation. *Severity* is used to define the importance or impact of\n+a violation.\n+\n+**ERROR**\n+    Indicates that something is structurally wrong with the model and cannot\n+    be suppressed.\n+\n+    Validation events with a severity of ERROR are reserved for enforcing that\n+    models adhere to the Smithy specification. Validators cannot emit a\n+    validation event with a severity of ERROR.\n+\n+**DANGER**\n+    Indicates that something is very likely wrong with the model. Unsuppressed\n+    DANGER validation events indicate that a model is invalid.\n+\n+**WARNING**\n+    Indicates that something might be wrong with the model.\n+\n+**NOTE**\n+    Informational message that does not imply anything is wrong with the model.\n+\n+\n+.. _suppression-definition:\n+\n+------------\n+Suppressions\n+------------\n+\n+Suppressions are used to suppress specific validation events.\n+Suppressions are created using the :ref:`suppression-trait` and\n+:ref:`suppressions metadata <suppressions-metadata>`.\n+\n+\n+.. _suppression-trait:\n+\n+``suppression`` trait\n+=====================\n+\n+Summary\n+    The suppression trait is used to suppress a validation event for a", "originalCommit": "07a5c8233dec9e49c1f04704e6b1979b9a85fab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5MzUxMw==", "url": "https://github.com/awslabs/smithy/pull/397#discussion_r414693513", "bodyText": "s/is the/is a", "author": "kstich", "createdAt": "2020-04-24T16:09:21Z", "path": "docs/source/spec/core/model-validation.rst", "diffHunk": "@@ -0,0 +1,442 @@\n+.. _validation:\n+\n+================\n+Model validation\n+================\n+\n+Smithy provides a customizable validation system that can be used by\n+API designers and organizations to ensure that their APIs adhere to their\n+own standards and best practices.\n+\n+.. contents:: Table of contents\n+    :depth: 2\n+    :local:\n+    :backlinks: none\n+\n+\n+------------\n+Introduction\n+------------\n+\n+APIs require a great deal of care and discipline to ensure that they provide\n+a coherent interface to customers, particularly after an API is released and\n+new features are added. This specification defines metadata that is used to\n+validate a model against configurable validator definitions, ensuring that\n+developers adhere to an organization's API standards.\n+\n+Tools like Checkstyle and Findbugs help to ensure that developers avoid common\n+bugs and pitfalls when writing code. This is a very powerful concept,\n+particularly for developers that are new to a programming language. This\n+concept is even more powerful when teams use the configurability of these\n+tools to communicate the coding standards of an organization and automate\n+their enforcement. This validation standard allows the same level of\n+conformity and rigor to be applied to Smithy models and API definitions.\n+\n+\n+.. _validator-definition:\n+\n+----------\n+Validators\n+----------\n+\n+The ``validators`` metadata property contains an array of validator\n+objects that are used to constrain a model. Each object in the\n+``validators`` array supports the following properties:\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 20 20 60\n+\n+    * - Property\n+      - Type\n+      - Description\n+    * - name\n+      - ``string``\n+      - **Required**. The name of the validator to apply. This name is used in\n+        implementations to find and configure the appropriate validator\n+        implementation. Validators only take effect if a Smithy processor\n+        implements the validator.\n+    * - id\n+      - ``string``\n+      - Defines a custom identifier for the validator.\n+\n+        Multiple instances of a single validator can be configured for a model.\n+        Providing an ``id`` allows suppressions to suppress a specific instance\n+        of a validator.\n+\n+        If ``id`` is not specified, it will default to the ``name`` property of\n+        the validator definition.\n+    * - message\n+      - ``string``\n+      - Provides a custom message to use when emitting validation events. The\n+        special ``{super}`` string can be added to a custom message to inject\n+        the original error message of the validation event into the custom\n+        message.\n+    * - severity\n+      - ``string``\n+      - Provides a custom :ref:`severity <severity-definition>` level to use\n+        when a validation event occurs. If no severity is provided, then the\n+        default severity of the validator is used.\n+\n+        .. note::\n+\n+              The severity of user-defined validators cannot be set to ERROR.\n+    * - namespaces\n+      - [ ``string`` ]\n+      - Provides a list of the namespaces that are targeted by the validator.\n+        The validator will ignore any validation events encountered that are\n+        not specific to the given namespaces.\n+    * - selector\n+      - ``string``\n+      - A valid :ref:`selector <selectors>` that causes the validator to only\n+        validate shapes that match the selector. The validator will ignore any\n+        validation events encountered that do not satisfy the selector.\n+    * - configuration\n+      - ``object``\n+      - Object that provides validator configuration. The available properties\n+        are defined by each validator. Validators MAY require that specific\n+        configuration properties are provided.\n+\n+The following Smithy document applies a custom validator named \"SomeValidator\":\n+\n+.. code-block:: smithy\n+\n+    $version: \"1.0.0\"\n+\n+    metadata validators = [\n+        {\n+            // The name of the validator.\n+            name: \"SomeValidator\",\n+            // Uses a custom event ID for each validation event emitted.\n+            id: \"CustomEventId\",\n+            // Uses a custom message that also includes the default message.\n+            message: \"My custom message name. {super}\",\n+            // Applies the rule only to the following namespaces.\n+            namespaces: [\"foo.baz\", \"bar.qux\"],\n+            // The following properties are specific to the validator.\n+            configuration: {\n+              \"someProperty\": \"foo\",\n+            }\n+        }\n+    ]\n+\n+    namespace smithy.example\n+\n+    // shapes are defined here...\n+\n+\n+.. _missing-validators:\n+\n+Missing validators\n+==================\n+\n+The actual implementation of a validator is defined in code and is\n+not defined in the Smithy model itself. If a Smithy implementation does not\n+have an implementation for a specific validator by name, the Smithy\n+implementation MUST emit a WARNING validation event with an event ID that is\n+the concatenation of ``UnknownValidator_`` and the ``name`` property of the\n+validator that could not be found. For example, given a custom validator\n+that could not be found named ``Foo``, the implementation MUST emit a\n+validation event with an event ID of ``UnknownValidator_Foo`` and a\n+severity of WARNING.\n+\n+\n+.. _severity-definition:\n+\n+--------\n+Severity\n+--------\n+\n+When a model is in violation of a validator, a *validation event* is emitted.\n+This validation event contains metadata about the violation, including the\n+optional shape that was in violation, the validator ID, and the severity of\n+the violation. *Severity* is used to define the importance or impact of\n+a violation.\n+\n+**ERROR**\n+    Indicates that something is structurally wrong with the model and cannot\n+    be suppressed.\n+\n+    Validation events with a severity of ERROR are reserved for enforcing that\n+    models adhere to the Smithy specification. Validators cannot emit a\n+    validation event with a severity of ERROR.\n+\n+**DANGER**\n+    Indicates that something is very likely wrong with the model. Unsuppressed\n+    DANGER validation events indicate that a model is invalid.\n+\n+**WARNING**\n+    Indicates that something might be wrong with the model.\n+\n+**NOTE**\n+    Informational message that does not imply anything is wrong with the model.\n+\n+\n+.. _suppression-definition:\n+\n+------------\n+Suppressions\n+------------\n+\n+Suppressions are used to suppress specific validation events.\n+Suppressions are created using the :ref:`suppression-trait` and\n+:ref:`suppressions metadata <suppressions-metadata>`.\n+\n+\n+.. _suppression-trait:\n+\n+``suppression`` trait\n+=====================\n+\n+Summary\n+    The suppression trait is used to suppress a validation event for a\n+    specific shape. Each value in the suppression trait is the", "originalCommit": "07a5c8233dec9e49c1f04704e6b1979b9a85fab7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "url": "https://github.com/awslabs/smithy/commit/1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "message": "Move validation into core spec\n\nThis commit moves validation concepts into the core Smithy spec while\nleaving more specific linters in a linters guide.", "committedDate": "2020-04-24T16:47:01Z", "type": "commit"}, {"oid": "1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "url": "https://github.com/awslabs/smithy/commit/1c92a0ddd529ddc913b085a40fbcbcce87ac3e75", "message": "Move validation into core spec\n\nThis commit moves validation concepts into the core Smithy spec while\nleaving more specific linters in a linters guide.", "committedDate": "2020-04-24T16:47:01Z", "type": "forcePushed"}]}