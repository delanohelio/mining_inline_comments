{"pr_number": 506, "pr_title": "Add TraceFile data objects and validation", "pr_createdAt": "2020-07-22T00:14:56Z", "pr_url": "https://github.com/awslabs/smithy/pull/506", "timeline": [{"oid": "920c9d5e04deee7d94c12ee074676fd350833f6d", "url": "https://github.com/awslabs/smithy/commit/920c9d5e04deee7d94c12ee074676fd350833f6d", "message": "Add TraceFile data objects and validation\n\nSmithy currently lacks the ability to link\ncode-generated artifacts back to the original\nmodel code. These data objects represent a trace file\nthat provides this functionality. They contain\nmethods for serializing, deserializing and validating\ntrace files.", "committedDate": "2020-07-22T16:08:05Z", "type": "forcePushed"}, {"oid": "d279bbaa5b9631ff033ae20787ea29177b20c4d1", "url": "https://github.com/awslabs/smithy/commit/d279bbaa5b9631ff033ae20787ea29177b20c4d1", "message": "Add TraceFile data objects and validation\n\nSmithy currently lacks the ability to link\ncode-generated artifacts back to the original\nmodel code. These data objects represent a trace file\nthat provides this functionality. They contain\nmethods for serializing, deserializing and validating\ntrace files.", "committedDate": "2020-07-22T17:28:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODAyNw==", "url": "https://github.com/awslabs/smithy/pull/506#discussion_r459778027", "bodyText": "Nit: , should be on the end of the previous line.", "author": "kstich", "createdAt": "2020-07-23T23:13:24Z", "path": "smithy-codegen-core/src/test/java/software/amazon/smithy/codegen/core/ShapeLinkTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package software.amazon.smithy.codegen.core;\n+\n+import java.util.ArrayList;\n+import java.util.Optional;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.ObjectNode;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+class ShapeLinkTest {\n+\n+    @Test\n+    void assertsToNodeWorksWithAllFields() {\n+        ShapeLink shapeLink = ShapeLink.builder()\n+                .addTag(\"tag\")\n+                .file(\"file\")\n+                .id(\"id\")\n+                .type(\"type\")\n+                .line(1)\n+                .column(2)\n+                .build();\n+\n+\n+        ObjectNode node = shapeLink.toNode();\n+\n+        assertThat(node.getStringMember(ShapeLink.TYPE_TEXT).get().getValue(), equalTo(\"type\"));\n+        assertThat(node.getNumberMember(ShapeLink.LINE_TEXT).get().getValue(), equalTo(1));\n+        assertThat(node.getArrayMember(ShapeLink.TAGS_TEXT)\n+                        .get()\n+                        .get(0)\n+                        .get()\n+                        .expectStringNode()\n+                        .getValue()\n+                , equalTo(\"tag\"));", "originalCommit": "d279bbaa5b9631ff033ae20787ea29177b20c4d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODE4NA==", "url": "https://github.com/awslabs/smithy/pull/506#discussion_r459778184", "bodyText": "Should this be uncommented?", "author": "kstich", "createdAt": "2020-07-23T23:13:59Z", "path": "smithy-codegen-core/src/test/java/software/amazon/smithy/codegen/core/TraceFileTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+package software.amazon.smithy.codegen.core;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.build.MockManifest;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ExpectationNotMetException;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+class TraceFileTest {\n+    /**\n+     * Correct TraceFile use tests\n+     * Test creating, parsing, validating and writing a TraceFile from scratch.\n+     * Test parse and write functionality combined on a correct trace file\n+     * Test parse and write functionality with nodes with single children instead of arrays of children\n+     * Test parse and write functionality combined on a correct trace file without the optional definitions section\n+     */\n+\n+    @Test\n+    void assertWriteTraceFileFromScratchWorks() throws IOException, URISyntaxException {\n+        /**\n+         * Building ArtifactMetadata - this builder uses setTimestampAsNow, but you can also use a different\n+         * builder constructor to specify a custom timestamp.\n+         * The required fields are id, version, type, timestamp.\n+         */\n+\n+        String id = \"software.amazon.awssdk.services:snowball:2.10.79\";\n+        String version = \"2.10.79\";\n+        String type = \"Java\";\n+        String typeVersion = \"1.8\";\n+        String homepage = \"https://github.com/aws/aws-sdk-java-v2/\";\n+        ArtifactMetadata artifactMetadata = ArtifactMetadata.builder()\n+                .id(id)\n+                .version(version)\n+                .type(type)\n+                .setTimestampAsNow()\n+                .homepage(homepage)\n+                .typeVersion(typeVersion)\n+                .build();\n+\n+        /**\n+         * Building Definitions - this example uses addTag and addType to add individual key value pairs.\n+         * There's another builder constructor that allows you to add the entire tags/types Map<String,String> without\n+         * having to add them individually.\n+         */\n+        ArtifactDefinitions artifactDefinitions = ArtifactDefinitions.builder()\n+                .addTag(\"service\", \"Service client\")\n+                .addTag(\"request\", \"AWS SDK request type\")\n+                .addTag(\"requestBuilder\", \"AWS SDK request builder\")\n+                .addType(\"TYPE\", \"Class, interface (including annotation type), or enum declaration\")\n+                .build();\n+\n+        /**\n+         * Building TraceFile - build the trace file by passing the different objects to the builder\n+         * You can either construct the shapes map yourself, and add it to TraceFile, or you can add each shape\n+         * individually as shown below.\n+         * SmithyTrace is a constant in my code set to 1.0 for this version, so you don't have to worry about\n+         * setting it.\n+         */\n+        TraceFile.Builder traceFileBuilder = TraceFile.builder()\n+                .artifact(artifactMetadata)\n+                .definitions(artifactDefinitions);\n+\n+        //adding one ShapeLink to TraceFile\n+        type = \"TYPE\";\n+        id = \"software.amazon.awssdk.services.snowball.SnowballClient\";\n+        traceFileBuilder.addShapeLink(\"com.amazonaws.snowball#Snowball\",\n+                ShapeLink.builder()\n+                        .type(type)\n+                        .id(id)\n+                        .addTag(\"service\")\n+                        .build());\n+\n+        //adding multiple ShapeLinks for the same ShapeId; can also add a List<ShapeLink>\n+        type = \"TYPE\";\n+        id = \"software.amazon.awssdk.services.snowball.model.ListClusterJobsRequest$Builder\";\n+        traceFileBuilder.addShapeLink(\"com.amazonaws.snowball#ListClustersRequest\",\n+                ShapeLink.builder()\n+                        .type(type)\n+                        .id(id)\n+                        .addTag(\"requestBuilder\")\n+                        .build());\n+        type = \"TYPE\";\n+        id = \"software.amazon.awssdk.services.snowball.model.ListClusterJobsRequest\";\n+        traceFileBuilder.addShapeLink(\"com.amazonaws.snowball#ListClustersRequest\",\n+                ShapeLink.builder()\n+                        .type(type)\n+                        .id(id)\n+                        .addTag(\"request\")\n+                        .build());\n+\n+        //finally, build the TraceFile\n+        TraceFile traceFile = traceFileBuilder.build();\n+\n+        /**\n+         * After creating a TraceFile, you may want to validate it.\n+         * 1) You can validate whether all your types/tags in ShapeLink are in the definitions object\n+         * 2) You can validate whether all your TraceFile matches your model by checking if all the ShapeIds\n+         * in a model file are in the TraceFile and all the ShapeIds in a model file are in the TraceFile\n+         */\n+\n+        //types/tags validation\n+        traceFile.validateTypesAndTags();\n+\n+        /**\n+         * model validation, see the correctValidateModel test for another example, I don't have the actual model for\n+         * this trace file, so cannot validate it.\n+         */\n+        //traceFile.validateModel(assembleModelTestHelper((\"Your model resource path here\");", "originalCommit": "d279bbaa5b9631ff033ae20787ea29177b20c4d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1ODM5Ng==", "url": "https://github.com/awslabs/smithy/pull/506#discussion_r459858396", "bodyText": "No, because we do not have a Smithy model for the TraceFile that is being created in this example. I added a comment that explains this and points users to look at the actual model validation tests to see a complete example. The purpose of including this here was to give a more complete example test for Ali to show him what he would need to do/anyone creating a TraceFile from scratch.", "author": "et22", "createdAt": "2020-07-24T05:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3ODY5Mg==", "url": "https://github.com/awslabs/smithy/pull/506#discussion_r459778692", "bodyText": "Nit: the outer .build() should be on its own line.\ntraceFile = traceFile.toBuilder()\n        .addShapeLink(\"com.amazonaws.snowball#Snowball\",\n                ShapeLink.builder()\n                        .id(\"id\")\n                        .type(\"TYPE\")\n                        .addTag(\"fake_tag\")\n                        .build())\n        .build();", "author": "kstich", "createdAt": "2020-07-23T23:15:30Z", "path": "smithy-codegen-core/src/test/java/software/amazon/smithy/codegen/core/TraceFileTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+package software.amazon.smithy.codegen.core;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.build.MockManifest;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ExpectationNotMetException;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+class TraceFileTest {\n+    /**\n+     * Correct TraceFile use tests\n+     * Test creating, parsing, validating and writing a TraceFile from scratch.\n+     * Test parse and write functionality combined on a correct trace file\n+     * Test parse and write functionality with nodes with single children instead of arrays of children\n+     * Test parse and write functionality combined on a correct trace file without the optional definitions section\n+     */\n+\n+    @Test\n+    void assertWriteTraceFileFromScratchWorks() throws IOException, URISyntaxException {\n+        /**\n+         * Building ArtifactMetadata - this builder uses setTimestampAsNow, but you can also use a different\n+         * builder constructor to specify a custom timestamp.\n+         * The required fields are id, version, type, timestamp.\n+         */\n+\n+        String id = \"software.amazon.awssdk.services:snowball:2.10.79\";\n+        String version = \"2.10.79\";\n+        String type = \"Java\";\n+        String typeVersion = \"1.8\";\n+        String homepage = \"https://github.com/aws/aws-sdk-java-v2/\";\n+        ArtifactMetadata artifactMetadata = ArtifactMetadata.builder()\n+                .id(id)\n+                .version(version)\n+                .type(type)\n+                .setTimestampAsNow()\n+                .homepage(homepage)\n+                .typeVersion(typeVersion)\n+                .build();\n+\n+        /**\n+         * Building Definitions - this example uses addTag and addType to add individual key value pairs.\n+         * There's another builder constructor that allows you to add the entire tags/types Map<String,String> without\n+         * having to add them individually.\n+         */\n+        ArtifactDefinitions artifactDefinitions = ArtifactDefinitions.builder()\n+                .addTag(\"service\", \"Service client\")\n+                .addTag(\"request\", \"AWS SDK request type\")\n+                .addTag(\"requestBuilder\", \"AWS SDK request builder\")\n+                .addType(\"TYPE\", \"Class, interface (including annotation type), or enum declaration\")\n+                .build();\n+\n+        /**\n+         * Building TraceFile - build the trace file by passing the different objects to the builder\n+         * You can either construct the shapes map yourself, and add it to TraceFile, or you can add each shape\n+         * individually as shown below.\n+         * SmithyTrace is a constant in my code set to 1.0 for this version, so you don't have to worry about\n+         * setting it.\n+         */\n+        TraceFile.Builder traceFileBuilder = TraceFile.builder()\n+                .artifact(artifactMetadata)\n+                .definitions(artifactDefinitions);\n+\n+        //adding one ShapeLink to TraceFile\n+        type = \"TYPE\";\n+        id = \"software.amazon.awssdk.services.snowball.SnowballClient\";\n+        traceFileBuilder.addShapeLink(\"com.amazonaws.snowball#Snowball\",\n+                ShapeLink.builder()\n+                        .type(type)\n+                        .id(id)\n+                        .addTag(\"service\")\n+                        .build());\n+\n+        //adding multiple ShapeLinks for the same ShapeId; can also add a List<ShapeLink>\n+        type = \"TYPE\";\n+        id = \"software.amazon.awssdk.services.snowball.model.ListClusterJobsRequest$Builder\";\n+        traceFileBuilder.addShapeLink(\"com.amazonaws.snowball#ListClustersRequest\",\n+                ShapeLink.builder()\n+                        .type(type)\n+                        .id(id)\n+                        .addTag(\"requestBuilder\")\n+                        .build());\n+        type = \"TYPE\";\n+        id = \"software.amazon.awssdk.services.snowball.model.ListClusterJobsRequest\";\n+        traceFileBuilder.addShapeLink(\"com.amazonaws.snowball#ListClustersRequest\",\n+                ShapeLink.builder()\n+                        .type(type)\n+                        .id(id)\n+                        .addTag(\"request\")\n+                        .build());\n+\n+        //finally, build the TraceFile\n+        TraceFile traceFile = traceFileBuilder.build();\n+\n+        /**\n+         * After creating a TraceFile, you may want to validate it.\n+         * 1) You can validate whether all your types/tags in ShapeLink are in the definitions object\n+         * 2) You can validate whether all your TraceFile matches your model by checking if all the ShapeIds\n+         * in a model file are in the TraceFile and all the ShapeIds in a model file are in the TraceFile\n+         */\n+\n+        //types/tags validation\n+        traceFile.validateTypesAndTags();\n+\n+        /**\n+         * model validation, see the correctValidateModel test for another example, I don't have the actual model for\n+         * this trace file, so cannot validate it.\n+         */\n+        //traceFile.validateModel(assembleModelTestHelper((\"Your model resource path here\");\n+\n+\n+        //Then write the TraceFile, just specify path/filename string.\n+\n+        String filename = \"trace-file-output.json\";\n+        MockManifest manifest = writeTraceFileTestHelper(traceFile, filename);\n+\n+        /**\n+         * Then parse the trace file, specify the files URI for parsing\n+         * Parsing fills all required fields and checks that they're filled\n+         */\n+\n+        TraceFile traceFile2 = parseTraceFileFromManifest(manifest, filename);\n+\n+        //few assorted checks\n+        assertThat(traceFile2.getArtifactMetadata().getId(), equalTo(\"software.amazon.awssdk.services:snowball:2.10.79\"));\n+        assertThat(traceFile2.getArtifactDefinitions().get().getTags().keySet(), containsInAnyOrder(\"service\", \"request\",\n+                \"requestBuilder\"));\n+        assertThat(traceFile2.getShapes().get(ShapeId.from(\"com.amazonaws.snowball#Snowball\")).get(0).getType(),\n+                equalTo(\"TYPE\"));\n+        assertThat(traceFile2.getSmithyTrace(), equalTo(\"1.0\"));\n+    }\n+\n+    @Test\n+    void assertsParseTraceFileWorksWithCorrectTraceFile() throws URISyntaxException, FileNotFoundException {\n+        TraceFile traceFile = parseTraceFileFromFile(getClass().getResource(\"trace-file.json\").toURI());\n+\n+        assertThat(traceFile.getArtifactMetadata().getId(), equalTo(\"software.amazon.awssdk.services:snowball:2.10.79\"));\n+        assertThat(traceFile.getArtifactDefinitions().get().getTags().keySet(), containsInAnyOrder(\"service\", \"request\",\n+                \"response\", \"requestBuilder\", \"responseBuilder\"));\n+        assertThat(traceFile.getShapes().get(ShapeId.from(\"com.amazonaws.snowball#Snowball\")).get(0).getType(),\n+                equalTo(\"TYPE\"));\n+        assertThat(traceFile.getSmithyTrace(), equalTo(\"1.0\"));\n+    }\n+\n+    @Test\n+    void assertsWriteTraceFileWorksWithCorrectTraceFile() throws URISyntaxException, IOException {\n+        TraceFile traceFile = parseTraceFileFromFile(getClass().getResource(\"trace-file.json\").toURI());\n+        MockManifest manifest = writeTraceFileTestHelper(traceFile, \"trace-file-output.json\");\n+        TraceFile traceFile2 = parseTraceFileFromManifest(manifest, \"trace-file-output.json\");\n+\n+        assertThat(traceFile2.getArtifactMetadata().getId(), equalTo(\"software.amazon.awssdk.services:snowball:2.10.79\"));\n+        assertThat(traceFile2.getArtifactDefinitions().get().getTags().keySet(), containsInAnyOrder(\"service\", \"request\",\n+                \"response\", \"requestBuilder\", \"responseBuilder\"));\n+        assertThat(traceFile2.getShapes().get(ShapeId.from(\"com.amazonaws.snowball#Snowball\")).get(0).getType(),\n+                equalTo(\"TYPE\"));\n+        assertThat(traceFile2.getSmithyTrace(), equalTo(\"1.0\"));\n+    }\n+\n+    @Test\n+    void assertParseWriteWorksWithoutDefinitions() throws IOException, URISyntaxException {\n+        TraceFile traceFile = parseTraceFileFromFile(getClass().getResource(\"trace-file.json\").toURI());\n+\n+        //set definitions to null before writing and parsing again\n+        traceFile = traceFile.toBuilder().definitions(null).build();\n+\n+        MockManifest manifest = writeTraceFileTestHelper(traceFile, \"trace-file-output.json\");\n+        TraceFile traceFile2 = parseTraceFileFromManifest(manifest, \"trace-file-output.json\");\n+\n+        assertThat(traceFile.getArtifactMetadata().getId(), equalTo(\"software.amazon.awssdk.services:snowball:2.10.79\"));\n+        assertThat(traceFile.getShapes().get(ShapeId.from(\"com.amazonaws.snowball#Snowball\")).get(0).getType(),\n+                equalTo(\"TYPE\"));\n+        assertThat(traceFile.getSmithyTrace(), equalTo(\"1.0\"));\n+    }\n+\n+    /**\n+     * Validate TraceFile use tests\n+     * validateTypesOrTags works with valid input, throws with invalid type, and throws with invalid tags\n+     * validateModel works with valid input, throws with invalid model/trace file pair\n+     */\n+    @Test\n+    void validateTypesOrTagsDoesNotThrowOnValidTypesAndTags() throws ExpectationNotMetException {\n+        Assertions.assertDoesNotThrow(() -> {\n+            TraceFile traceFile = parseTraceFileFromFile(getClass().getResource(\"trace-file.json\").toURI());\n+            traceFile.validateTypesAndTags();\n+        });\n+    }\n+\n+    @Test\n+    void validateTypesOrTagsThrowsOnInvalidType() throws ExpectationNotMetException {\n+        Assertions.assertThrows(ExpectationNotMetException.class, () -> {\n+            TraceFile traceFile = parseTraceFileFromFile(getClass().getResource(\"trace-file.json\").toURI());\n+            traceFile = traceFile.toBuilder()\n+                    .addShapeLink(\"com.amazonaws.snowball#Snowball\", ShapeLink\n+                            .builder()\n+                            .id(\"id\")\n+                            .type(\"fake_type\")\n+                            .build()).build();\n+            traceFile.validateTypesAndTags();\n+        });\n+    }\n+\n+    @Test\n+    void validateTypesOrTagsThrowsOnInvalidTag() throws ExpectationNotMetException {\n+        Assertions.assertThrows(ExpectationNotMetException.class, () -> {\n+            TraceFile traceFile = parseTraceFileFromFile(getClass().getResource(\"trace-file.json\").toURI());\n+            traceFile = traceFile.toBuilder()\n+                    .addShapeLink(\"com.amazonaws.snowball#Snowball\", ShapeLink\n+                            .builder()\n+                            .id(\"id\")\n+                            .type(\"TYPE\")\n+                            .addTag(\"fake_tag\")\n+                            .build()).build();", "originalCommit": "d279bbaa5b9631ff033ae20787ea29177b20c4d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3OTc3Mg==", "url": "https://github.com/awslabs/smithy/pull/506#discussion_r459779772", "bodyText": "Should this validation be private and automatically run after setting the properties on this object in the constructor? Otherwise, it's possible for an invalid TraceFile instance to be used.\nprivate TraceFile(Builder builder) {\n    smithyTrace = SmithyBuilder.requiredState(SMITHY_TRACE_TEXT, builder.smithyTrace);\n    artifactMetadata = SmithyBuilder.requiredState(ARTIFACT_TEXT, builder.artifactMetadata);\n    if (builder.shapes.isEmpty()) {\n        throw new IllegalStateException(\"TraceFile's shapes field must not be empty to build it.\");\n    }\n    shapes = MapUtils.copyOf(builder.shapes);\n    artifactDefinitions = builder.artifactDefinitions;\n\n    // Validate we received a well-formed TraceFile\n    validateTypesAndTags();\n}", "author": "kstich", "createdAt": "2020-07-23T23:18:58Z", "path": "smithy-codegen-core/src/main/java/software/amazon/smithy/codegen/core/TraceFile.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.codegen.core;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.SourceLocation;\n+import software.amazon.smithy.model.loader.Prelude;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.ExpectationNotMetException;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.node.ToNode;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.MapUtils;\n+import software.amazon.smithy.utils.SmithyBuilder;\n+import software.amazon.smithy.utils.ToSmithyBuilder;\n+\n+/**\n+ * Class that represents the contents of a Smithy trace file.\n+ * TraceFile's require a smithyTrace file version number, {@link ArtifactMetadata}, and\n+ * {@link Map} from {@link ShapeId} to a List of {@link ShapeLink} objects. TraceFile's\n+ * optionally have a {@link ArtifactDefinitions} object. TraceFile handles parsing, serialization\n+ * and deserialization of a Smithy trace file.\n+ */\n+public final class TraceFile implements ToNode, ToSmithyBuilder<TraceFile> {\n+    public static final String SMITHY_TRACE_TEXT = \"smithyTrace\";\n+    public static final String ARTIFACT_TEXT = \"artifact\";\n+    public static final String DEFINITIONS_TEXT = \"definitions\";\n+    public static final String SHAPES_TEXT = \"shapes\";\n+    public static final String SMITHY_TRACE_VERSION = \"1.0\";\n+\n+    private String smithyTrace;\n+    private ArtifactMetadata artifactMetadata;\n+    private ArtifactDefinitions artifactDefinitions; //Optional\n+    private Map<ShapeId, List<ShapeLink>> shapes;\n+    private SourceLocation sl = new SourceLocation(\"\");\n+\n+    private TraceFile(Builder builder) {\n+        smithyTrace = SmithyBuilder.requiredState(SMITHY_TRACE_TEXT, builder.smithyTrace);\n+        artifactMetadata = SmithyBuilder.requiredState(ARTIFACT_TEXT, builder.artifactMetadata);\n+        if (builder.shapes.isEmpty()) {\n+            throw new IllegalStateException(\"TraceFile's shapes field must not be empty to build it.\");\n+        }\n+        shapes = MapUtils.copyOf(builder.shapes);\n+        artifactDefinitions = builder.artifactDefinitions;\n+    }\n+\n+    /**\n+     * Converts ObjectNode into TraceFile.\n+     *\n+     * @param value an ObjectNode that represents the entire trace file.\n+     */\n+    public static TraceFile fromNode(Node value) {\n+        ObjectNode node = value.expectObjectNode();\n+        Builder builder = builder()\n+                .smithyTrace(node.expectStringMember(SMITHY_TRACE_TEXT).getValue())\n+                .artifact(ArtifactMetadata.fromNode(node.expectObjectMember(ARTIFACT_TEXT)));\n+\n+        //parse shapes\n+        Map<StringNode, Node> shapeMap = node.expectObjectMember(SHAPES_TEXT).getMembers();\n+        for (Map.Entry<StringNode, Node> entry : shapeMap.entrySet()) {\n+            for (Node linkNode : (entry.getValue().expectArrayNode()).getElements()) {\n+                builder.addShapeLink(entry.getKey().getValue(), ShapeLink.fromNode(linkNode));\n+            }\n+        }\n+\n+        //parse definitions\n+        if (node.containsMember(DEFINITIONS_TEXT)) {\n+            builder.definitions(ArtifactDefinitions.fromNode(node.expectObjectMember(DEFINITIONS_TEXT)));\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Converts TraceFile instance variables into an\n+     * ObjectNode.\n+     *\n+     * @return ObjectNode representation of a TraceFile.\n+     */\n+    @Override\n+    public ObjectNode toNode() {\n+        //constructing shapes ObjectNode map\n+        ObjectNode.Builder shapesBuilder = ObjectNode.objectNodeBuilder();\n+        for (Map.Entry<ShapeId, List<ShapeLink>> entry : shapes.entrySet()) {\n+            String shapeId = entry.getKey().toString();\n+            ArrayNode shapeListNode = entry.getValue() //get list of ShapeLinks\n+                    .stream()\n+                    .map(ShapeLink::toNode) //convert each ShapeLink to an ObjectNode\n+                    .collect(ArrayNode.collect()); //collect each ObjectNode in an ArrayNode\n+            shapesBuilder.withMember(shapeId, shapeListNode);\n+        }\n+\n+        //returning ObjectNode for TraceFile\n+        return ObjectNode.objectNodeBuilder()\n+                .withMember(SMITHY_TRACE_TEXT, smithyTrace)\n+                .withMember(ARTIFACT_TEXT, artifactMetadata)\n+                .withOptionalMember(DEFINITIONS_TEXT, getArtifactDefinitions())\n+                .withMember(SHAPES_TEXT, shapesBuilder.build())\n+                .build();\n+    }\n+\n+    /**\n+     * Throws an error if any ShapeLink object contains a tag or type that is not in artifactDefinition's.\n+     * This method should be called after creating a TraceFile object to verify that all the types and tags\n+     * in shapes have been defined in artifactDefinition's. This TraceFile's ArtifactDefinitions object\n+     * MUST be defined prior to calling this method.\n+     *\n+     * @throws ExpectationNotMetException if a type or tag in shapes is not in artifactDefinitions, or if\n+     *                                    artifactDefinitions is not defined when the method is called.\n+     */\n+    public void validateTypesAndTags() {", "originalCommit": "d279bbaa5b9631ff033ae20787ea29177b20c4d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a99f4b39e7c4f276392a77dc3a93648ab42905f", "url": "https://github.com/awslabs/smithy/commit/7a99f4b39e7c4f276392a77dc3a93648ab42905f", "message": "Add TraceFile data objects and validation\n\nSmithy currently lacks the ability to link\ncode-generated artifacts back to the original\nmodel code. These data objects represent a trace file\nthat provides this functionality. They contain\nmethods for serializing, deserializing and validating\ntrace files.", "committedDate": "2020-07-24T05:42:14Z", "type": "commit"}, {"oid": "7a99f4b39e7c4f276392a77dc3a93648ab42905f", "url": "https://github.com/awslabs/smithy/commit/7a99f4b39e7c4f276392a77dc3a93648ab42905f", "message": "Add TraceFile data objects and validation\n\nSmithy currently lacks the ability to link\ncode-generated artifacts back to the original\nmodel code. These data objects represent a trace file\nthat provides this functionality. They contain\nmethods for serializing, deserializing and validating\ntrace files.", "committedDate": "2020-07-24T05:42:14Z", "type": "forcePushed"}]}