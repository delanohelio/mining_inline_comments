{"pr_number": 2581, "pr_title": "SOAP Add-on Sites Tree Fix", "pr_createdAt": "2020-10-22T12:16:30Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2581", "timeline": [{"oid": "c414aa96efcfacf33fcb79aefc0d1b3da932a28f", "url": "https://github.com/zaproxy/zap-extensions/commit/c414aa96efcfacf33fcb79aefc0d1b3da932a28f", "message": "SOAP Add-on Updates\n\n- Add node names in the sites tree via\n a variant script.\n- Fix a bug where some classes were not\n being loaded correctly with Java 9+.\n\nSigned-off-by: ricekot <ricekot@gmail.com>", "committedDate": "2020-10-29T07:04:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MjcwMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r515442703", "bodyText": "I'd suggest SOAP_support.js or even soap_support.js", "author": "kingthorin", "createdAt": "2020-10-31T02:01:18Z", "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/ExtensionImportWSDL.java", "diffHunk": "@@ -164,6 +183,37 @@ public void fileUrlWSDLImport(final File file) {\n         parser.extFileWSDLImport(file, THREAD_PREFIX + threadId++);\n     }\n \n+    private void addScript() throws IOException {\n+        ExtensionScript extScript =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+        String scriptName = \"SOAP Support.js\";", "originalCommit": "c414aa96efcfacf33fcb79aefc0d1b3da932a28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3NTY3Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517275673", "bodyText": "Okay. I went with Soap Support.js for consistency, because the GraphQL script is called GraphQL Support.js...", "author": "ricekot", "createdAt": "2020-11-04T11:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MjcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MjU5Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517282596", "bodyText": "Oh okay, stick with it then.", "author": "kingthorin", "createdAt": "2020-11-04T11:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MjcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MjgzNg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r515442836", "bodyText": "@thc202 @psiinon do we need to think of a more generic way to do this? In a few Java revisions nashorn won't be available and we might be dependent on graalvm or something else. Should the script extension have a way to state engines for languages? (Something like getEngineForLanguage(\"javascript\") )", "author": "kingthorin", "createdAt": "2020-10-31T02:03:06Z", "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/ExtensionImportWSDL.java", "diffHunk": "@@ -164,6 +183,37 @@ public void fileUrlWSDLImport(final File file) {\n         parser.extFileWSDLImport(file, THREAD_PREFIX + threadId++);\n     }\n \n+    private void addScript() throws IOException {\n+        ExtensionScript extScript =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+        String scriptName = \"SOAP Support.js\";\n+        if (extScript != null && extScript.getScript(scriptName) == null) {\n+            ScriptType variantType =\n+                    extScript.getScriptType(ExtensionActiveScan.SCRIPT_TYPE_VARIANT);\n+            ScriptEngineWrapper engine = extScript.getEngineWrapper(\"Oracle Nashorn\");", "originalCommit": "c414aa96efcfacf33fcb79aefc0d1b3da932a28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzODk5Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517938996", "bodyText": "It's more reliable to use a specific engine as there are no guarantees that the other engines will support what the script is doing (while GraalVM JavaScript provides compatibility with Nashorn it might not work always).\n(Latest Java version no longer include Nashorn.)", "author": "thc202", "createdAt": "2020-11-05T10:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MjgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MzEwOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r515443108", "bodyText": "Should there be some sort of logged message here. Would it be better or safer to return empty string vs. null?", "author": "kingthorin", "createdAt": "2020-10-31T02:06:21Z", "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/SitesTreeHelper.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.soap;\n+\n+import java.io.IOException;\n+import javax.xml.soap.SOAPException;\n+import javax.xml.soap.SOAPMessage;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.w3c.dom.NodeList;\n+\n+public class SitesTreeHelper {\n+\n+    public static String getNodeName(HttpMessage message) {\n+        try {\n+            SOAPMessage soapMsg =\n+                    SoapMessageFactory.createMessage(message.getRequestBody().getBytes());\n+            if (soapMsg == null) {\n+                return null;\n+            }\n+            NodeList nodeList = soapMsg.getSOAPBody().getChildNodes();\n+            StringBuilder leafName = new StringBuilder();\n+            for (int i = 0; i < nodeList.getLength(); i++) {\n+                if (nodeList.item(i).getLocalName() != null) {\n+                    leafName.append(nodeList.item(i).getLocalName()).append(\", \");\n+                }\n+            }\n+            // Remove the extra \", \" at the end.\n+            leafName.setLength(leafName.length() - 2);\n+            // Append SOAP Version.\n+            leafName.append(\n+                    message.getRequestHeader().getHeader(\"SOAPAction\") == null\n+                            ? \" (v1.2)\"\n+                            : \" (v1.1)\");\n+            return leafName.toString();\n+        } catch (SOAPException | IOException e) {\n+            return null;\n+        }", "originalCommit": "c414aa96efcfacf33fcb79aefc0d1b3da932a28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3ODI0OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517278249", "bodyText": "Good question. We could return an empty string too, but in case that is not checked by the caller it could result in an empty site node. Still, it will certainly be safer to use an empty string. Is there a middle ground ;)?", "author": "ricekot", "createdAt": "2020-11-04T11:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MzEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MzY1Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517283652", "bodyText": "@psiinon @thc202 thoughts on this?", "author": "kingthorin", "createdAt": "2020-11-04T11:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MzEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MDczMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517940732", "bodyText": "If an empty name is not a valid name, then empty is better, but what matters most is that the behaviour is documented.\nRe the exception being logged, I guess it could be logged as warn if that's not expected to happen frequently, otherwise debug.", "author": "thc202", "createdAt": "2020-11-05T10:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MzEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MzM0Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r515443346", "bodyText": "Should this have a </xml>?", "author": "kingthorin", "createdAt": "2020-10-31T02:09:25Z", "path": "addOns/soap/src/test/java/org/zaproxy/zap/extension/soap/Sample.java", "diffHunk": "@@ -149,4 +149,27 @@ public static HttpMessage setInvalidFormatResponse(HttpMessage msg) {\n                         + \"</soapenv:Envelope>\");\n         return msg;\n     }\n+\n+    public static HttpMessage setSoapVersionTwoRequest(HttpMessage msg)\n+            throws HttpMalformedHeaderException {\n+        msg.setRequestHeader(\n+                \"POST https://www.example.com/Soap12Endpoint/ HTTP/1.1\"\n+                        + \"User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0;)\"\n+                        + \"Pragma: no-cache\"\n+                        + \"Cache-Control: no-cache\"\n+                        + \"Content-Length: 275\"\n+                        + \"Content-Type: application/soap+xml; charset=UTF-8; action= https://www.example.com/xml/sayHelloWorld\"\n+                        + \"Host: www.example.com\");\n+        msg.setRequestBody(\n+                \"<?xml version='1.0' encoding= 'UTF-8' ?>\"\n+                        + \"<s12:Envelope xmlns:s12='http://www.w3.org/2003/05/soap-envelope'>\"\n+                        + \"<s12:Body>\"\n+                        + \"<ns:sayHelloWorld xmlns:ns='http://main.soaptest.org'>\"\n+                        + \"<ns:args0>paramValue</ns:args0>\"\n+                        + \"</ns:sayHelloWorld>\"\n+                        + \"</s12:Body>\"\n+                        + \"</s12:Envelope>\");", "originalCommit": "c414aa96efcfacf33fcb79aefc0d1b3da932a28f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3OTQxOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517279418", "bodyText": "There's a note over here that says,\n\nNote: The XML prolog does not have a closing tag! This is not an error. The prolog is not a part of the XML document.", "author": "ricekot", "createdAt": "2020-11-04T11:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MzM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MzIyNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r517283227", "bodyText": "Perfect, thanks!", "author": "kingthorin", "createdAt": "2020-11-04T11:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MzM0Ng=="}], "type": "inlineReview"}, {"oid": "15c1ace2b0b09c204341da78faf725b510ddf1ec", "url": "https://github.com/zaproxy/zap-extensions/commit/15c1ace2b0b09c204341da78faf725b510ddf1ec", "message": "SOAP Add-on Updates\n\n- Add node names in the sites tree via\n a variant script.\n- Fix a bug where some classes were not\n being loaded correctly with Java 9+.\n\nSigned-off-by: ricekot <ricekot@gmail.com>", "committedDate": "2020-11-06T12:19:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4NDA1NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r519784054", "bodyText": "Are either of these actually used? I don't see any imports or occurrences of \"saaj\" or \"soap-api\".", "author": "kingthorin", "createdAt": "2020-11-09T12:52:50Z", "path": "addOns/soap/soap.gradle.kts", "diffHunk": "@@ -17,7 +17,8 @@ zapAddOn {\n \n dependencies {\n     implementation(\"com.predic8:soa-model-core:1.6.0\")\n-    implementation(\"com.sun.xml.ws:jaxws-rt:2.3.2\")\n+    implementation(\"jakarta.xml.soap:jakarta.xml.soap-api:1.4.2\")\n+    implementation(\"com.sun.xml.messaging.saaj:saaj-impl:1.5.2\")", "originalCommit": "15c1ace2b0b09c204341da78faf725b510ddf1ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxMTY1NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r519811655", "bodyText": "Yup, the javax.xml.soap.* imports require the jakarta.xml.soap-api package because these modules were removed with the release of Java 11 (see https://stackoverflow.com/a/54574003/5511659). The saaj-impl package is required for similar reasons (see https://stackoverflow.com/a/52349146/5511659).", "author": "ricekot", "createdAt": "2020-11-09T13:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4NDA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ5MzYxMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2581#discussion_r520493613", "bodyText": "byte[] bytes \u2192 String content, String charset to avoid creating a String again.", "author": "thc202", "createdAt": "2020-11-10T11:32:17Z", "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/SoapMessageFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.soap;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import javax.xml.soap.MessageFactory;\n+import javax.xml.soap.SOAPConstants;\n+import javax.xml.soap.SOAPException;\n+import javax.xml.soap.SOAPMessage;\n+\n+public class SoapMessageFactory {\n+\n+    public static SOAPMessage createMessage(byte[] bytes) throws IOException, SOAPException {", "originalCommit": "15c1ace2b0b09c204341da78faf725b510ddf1ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "917ff7e7b72947da18dfd0ec3513aa1e9f3d7fc0", "url": "https://github.com/zaproxy/zap-extensions/commit/917ff7e7b72947da18dfd0ec3513aa1e9f3d7fc0", "message": "SOAP Add-on Updates\n\n- Add node names in the sites tree via\n a variant script.\n- Fix a bug where some classes were not\n being loaded correctly with Java 9+.\n\nSigned-off-by: ricekot <ricekot@gmail.com>", "committedDate": "2020-11-12T15:39:12Z", "type": "commit"}, {"oid": "917ff7e7b72947da18dfd0ec3513aa1e9f3d7fc0", "url": "https://github.com/zaproxy/zap-extensions/commit/917ff7e7b72947da18dfd0ec3513aa1e9f3d7fc0", "message": "SOAP Add-on Updates\n\n- Add node names in the sites tree via\n a variant script.\n- Fix a bug where some classes were not\n being loaded correctly with Java 9+.\n\nSigned-off-by: ricekot <ricekot@gmail.com>", "committedDate": "2020-11-12T15:39:12Z", "type": "forcePushed"}]}