{"pr_number": 2317, "pr_title": "Add passive scan rule for dangerous js functions", "pr_createdAt": "2020-02-29T09:23:53Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2317", "timeline": [{"oid": "a93c3c244f44901e389298f988acf2953b6d1e5b", "url": "https://github.com/zaproxy/zap-extensions/commit/a93c3c244f44901e389298f988acf2953b6d1e5b", "message": "Draft implementation of pscan rule\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-29T09:18:30Z", "type": "commit"}, {"oid": "11a66a3139ff77f11375eda962c7ffbd167a686e", "url": "https://github.com/zaproxy/zap-extensions/commit/11a66a3139ff77f11375eda962c7ffbd167a686e", "message": "Finalised initial implementation\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-29T11:15:51Z", "type": "commit"}, {"oid": "c867368b1242ed890dbbb1ab4e5bb2b7b5a20e0e", "url": "https://github.com/zaproxy/zap-extensions/commit/c867368b1242ed890dbbb1ab4e5bb2b7b5a20e0e", "message": "Remove unused import\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-02-29T11:19:46Z", "type": "commit"}, {"oid": "34b050666023b208e9c395e989b60fc459c1ac1a", "url": "https://github.com/zaproxy/zap-extensions/commit/34b050666023b208e9c395e989b60fc459c1ac1a", "message": "Remove unnecessary call to getOtherInfo()\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-01T05:01:09Z", "type": "commit"}, {"oid": "68238d11904705259903ff3b977c4b51c0e11298", "url": "https://github.com/zaproxy/zap-extensions/commit/68238d11904705259903ff3b977c4b51c0e11298", "message": "Edit comments in raiseAlert method for clarity\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-01T05:04:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODU3OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386138578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n          \n          \n            \n                public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n          \n          \n            \n                    if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "author": "kingthorin", "createdAt": "2020-03-01T20:37:16Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTk4Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139986", "bodyText": "You should add unit tests to check this behavior.", "author": "kingthorin", "createdAt": "2020-03-01T20:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODY1Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386138657", "bodyText": "At this point you'll need to check if it is a JavaScript file and use msg.getResponseBody().toString() or if it's HTML and use the loop through script elements as you already have.", "author": "kingthorin", "createdAt": "2020-03-01T20:38:24Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isText()) {\n+            StringBuilder evidence = new StringBuilder();\n+            // Check the scripts\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODc1NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386138755", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java\">JSFunctionPassiveScanner.java</a>\n          \n          \n            \n            Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java\">JSFunctionPassiveScanner.java</a>", "author": "kingthorin", "createdAt": "2020-03-01T20:39:51Z", "path": "addOns/pscanrulesAlpha/src/main/javahelp/org/zaproxy/zap/extension/pscanrulesAlpha/resources/help/contents/pscanalpha.html", "diffHunk": "@@ -83,5 +83,11 @@ <H2>Sub Resource Integrity Attribute Missing</H2>\n <p>\n Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SubResourceIntegrityAttributeScanner.java\">SubResourceIntegrityAttributeScanner.java</a>\n \n+<H2>Dangerous JS Functions</H2>\n+This scanner checks for any dangerous JS functions present in a site response.<br>\n+For more details see: https://github.com/zaproxy/zaproxy/issues/5673\n+<p>\n+ Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java\">JSFunctionPassiveScanner.java</a>", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTIxOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139218", "bodyText": "Please use specific imports not wildcard.", "author": "kingthorin", "createdAt": "2020-03-01T20:46:01Z", "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.*;", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTMzOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            pscanalpha.jsfunction.soln=\n          \n          \n            \n            pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.", "author": "kingthorin", "createdAt": "2020-03-01T20:47:33Z", "path": "addOns/pscanrulesAlpha/src/main/resources/org/zaproxy/zap/extension/pscanrulesAlpha/resources/Messages.properties", "diffHunk": "@@ -81,3 +81,8 @@ pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing\n pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. \n pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.\n pscanalpha.sri-integrity.refs=https://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity\n+\n+pscanalpha.jsfunction.name=Dangerous JS Functions\n+pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.\n+pscanalpha.jsfunction.soln=", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTE2Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386141163", "bodyText": "Or something more specific if you can think of it..... \"Consider whether this code handles input in a manner which might lead to XSS, XSSI, Open Redirect, etc or rewrite it in a manner which does not require the use of unsafe functions\"", "author": "kingthorin", "createdAt": "2020-03-01T21:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTczMQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139731", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            pscanalpha.jsfunction.refs=https://github.com/danielmiessler/SecLists/issues/367\n          \n          \n            \n            pscanalpha.jsfunction.refs=https://angular.io/guide/security", "author": "kingthorin", "createdAt": "2020-03-01T20:52:54Z", "path": "addOns/pscanrulesAlpha/src/main/resources/org/zaproxy/zap/extension/pscanrulesAlpha/resources/Messages.properties", "diffHunk": "@@ -81,3 +81,8 @@ pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing\n pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. \n pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.\n pscanalpha.sri-integrity.refs=https://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity\n+\n+pscanalpha.jsfunction.name=Dangerous JS Functions\n+pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.\n+pscanalpha.jsfunction.soln=\n+pscanalpha.jsfunction.refs=https://github.com/danielmiessler/SecLists/issues/367", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139856", "bodyText": "This seems limited to Angular functions.\nIt could include eval() (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) and likely functions from other major frameworks as well.", "author": "kingthorin", "createdAt": "2020-03-01T20:54:55Z", "path": "addOns/pscanrulesAlpha/src/main/zapHomeFiles/xml/js-function-list.txt", "diffHunk": "@@ -0,0 +1,9 @@\n+# This file lists all dangerous JS functions being scanned for\n+bypassSecurityTrustHtml\n+bypassSecurityTrustScript\n+bypassSecurityTrustStyle\n+bypassSecurityTrustUrl\n+bypassSecurityTrustResourceUrl\n+trustAsHtml\n+$eval\n+$evalAsync", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODAwOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386418009", "bodyText": "I added eval but I'm not too familiar with JS so I don't really know what dangerous functions from other frameworks are. I tried a little googling but only came across document.write() and even then I'm not too sure if it's dangerous in the same sense as these others (e.g. for XSS).\nIt's why I put the list as a file so it can easily be added to later on without any need to understand the scanner. If you have any good places for me to learn more I'm very willing :)", "author": "madanalogy", "createdAt": "2020-03-02T14:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMTk0NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386431945", "bodyText": "Do you feel like adding support for Custom Payloads? Then users can add things right within ZAP and not have to even edit files. (If you're up for it, I can find an example PR you can follow.)", "author": "kingthorin", "createdAt": "2020-03-02T14:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1Njg5MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386456890", "bodyText": "I could give it a shot yea, if I get lost I'll try asking around somewhere \ud83d\udc4d", "author": "madanalogy", "createdAt": "2020-03-02T15:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2MTYxMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386461613", "bodyText": "Here's a few you can refer to:\n\nhttps://github.com/zaproxy/zap-extensions/pull/2287/files\nhttps://github.com/zaproxy/zap-extensions/pull/2215/files\nhttps://github.com/zaproxy/zap-extensions/pull/2213/files\n\nDefinitely let us know if you have any trouble.", "author": "kingthorin", "createdAt": "2020-03-02T15:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NTUxNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386465517", "bodyText": "Definitely let us know if you have any trouble.\n\nJust curious actually, do you guys have any preferred channel for help seekers? Between the slack, IRC, and google dev group I don't really know which channel is appropriate haha", "author": "madanalogy", "createdAt": "2020-03-02T15:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NDc3NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386474775", "bodyText": "If you want \"live\" assistance your best bet is to try IRC.\nhttps://zaproxy.org/irc/\nIf you have questions on use or development that might need more group consensus etc then the Dev group.\n(For my 2 cents anyway, I think the others will agree though.)", "author": "kingthorin", "createdAt": "2020-03-02T15:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2ODYxNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386968617", "bodyText": "I took a look at the PRs and am wondering whether to create an ExtensionPayloader in  pscanAlpha or import as a dependency the one from pscanrules? If I do the latter however I will instead then need to import into pscanrules my extension which would require an additional dependency import regardless, so I'm guessing I should go with the former?", "author": "madanalogy", "createdAt": "2020-03-03T11:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3NTY3Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386975676", "bodyText": "Yes, better to create the ExtensionPayloader.", "author": "thc202", "createdAt": "2020-03-03T12:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTk0OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139948", "bodyText": "You should add a test for one of the functions that has a leading $ since that is a significant regex char.", "author": "kingthorin", "createdAt": "2020-03-01T20:55:52Z", "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.*;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(\n+                testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustScript\", \"trustAsHtml\"));", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNTkxMQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386505911", "bodyText": "While testing for this I realised that a search on $eval() using the regex pattern taken from the functions list $eval will fail but a match will be found if I used eval as the regex pattern instead. I have decided to amend the function list as such (refer to most recent commit).\nWould like your opinion on whether this is the right direction to take, or whether I should relook at how my regex is formed, thanks!", "author": "madanalogy", "createdAt": "2020-03-02T16:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNzM2MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386507360", "bodyText": "I think that's ok (doing it without the leading $)", "author": "kingthorin", "createdAt": "2020-03-02T16:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDQ4Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386140482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            0, // CWE Id - return 0 if no relevant one\n          \n          \n            \n                            749, // CWE-749: Exposed Dangerous Method or Function\n          \n      \n    \n    \n  \n\nOr maybe: CWE-676: Use of Potentially Dangerous Function ?", "author": "kingthorin", "createdAt": "2020-03-01T21:02:43Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isText()) {\n+            StringBuilder evidence = new StringBuilder();\n+            // Check the scripts\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+            if (evidence.length() > 0) {\n+                this.raiseAlert(msg, id, evidence.toString());\n+            }\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert =\n+                new Alert(getPluginId(), Alert.RISK_MEDIUM, Alert.CONFIDENCE_MEDIUM, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                0, // CWE Id - return 0 if no relevant one", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDY1Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386140652", "bodyText": "Do we really feel this is Alert.RISK_MEDIUM we're not checking or suggesting that they're using user input. It's probably more realistic to put it as Alert.RISK_LOW or Alert.RISK_INFO and even Alert.CONFIDENCE_LOW", "author": "kingthorin", "createdAt": "2020-03-01T21:04:28Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isText()) {\n+            StringBuilder evidence = new StringBuilder();\n+            // Check the scripts\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+            if (evidence.length() > 0) {\n+                this.raiseAlert(msg, id, evidence.toString());\n+            }\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert =\n+                new Alert(getPluginId(), Alert.RISK_MEDIUM, Alert.CONFIDENCE_MEDIUM, getName());", "originalCommit": "68238d11904705259903ff3b977c4b51c0e11298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5Nzc4MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386397780", "bodyText": "Mmm what about Alert.RISK_INFO and Alert.CONFIDENCE_MEDIUM? Since it's informational but a matching pattern is very likely a function name since we only check the js?", "author": "madanalogy", "createdAt": "2020-03-02T13:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMTU2Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386411562", "bodyText": "Mmm what about Alert.RISK_INFO and Alert.CONFIDENCE_MEDIUM? Since it's informational but a matching pattern is very likely a function name since we only check the js?\n\nOkay nevermind after adding eval and taking another look I realised some of the words might give false positive to function names so I'll switch to CONFIDENCE_LOW and RISK_LOW :)", "author": "madanalogy", "createdAt": "2020-03-02T14:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMTgzNA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386411834", "bodyText": "Sounds good.", "author": "kingthorin", "createdAt": "2020-03-02T14:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDY1Mg=="}], "type": "inlineReview"}, {"oid": "0b5fbc6a0e2d3fa75811c1ccdab55103aed36544", "url": "https://github.com/zaproxy/zap-extensions/commit/0b5fbc6a0e2d3fa75811c1ccdab55103aed36544", "message": "Apply suggestions from code review\n\nCo-Authored-By: kingthorin <kingthorin@users.noreply.github.com>", "committedDate": "2020-03-02T13:37:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NzcyNQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386397725", "bodyText": "This should be added to scanners.md", "author": "thc202", "createdAt": "2020-03-02T13:40:42Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;", "originalCommit": "0b5fbc6a0e2d3fa75811c1ccdab55103aed36544", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa179cb3e68996041d3d93bf5216ad8867f8b796", "url": "https://github.com/zaproxy/zap-extensions/commit/aa179cb3e68996041d3d93bf5216ad8867f8b796", "message": "Updated CHANGELOG.md and js-function-list.txt\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-02T14:19:34Z", "type": "commit"}, {"oid": "5cb72cf60978a7b5d24f86bec2a1c537a8cfdcc1", "url": "https://github.com/zaproxy/zap-extensions/commit/5cb72cf60978a7b5d24f86bec2a1c537a8cfdcc1", "message": "Add js file checker and adjust alert\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-02T14:33:22Z", "type": "commit"}, {"oid": "addd136e349b37f8d23d65d8e3fd408e39d5deb2", "url": "https://github.com/zaproxy/zap-extensions/commit/addd136e349b37f8d23d65d8e3fd408e39d5deb2", "message": "Add test cases to unit test and renamed functions in list\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-02T16:31:22Z", "type": "commit"}, {"oid": "72fbe6ef017cedfa98721ab39602fcdb96c4ab25", "url": "https://github.com/zaproxy/zap-extensions/commit/72fbe6ef017cedfa98721ab39602fcdb96c4ab25", "message": "Add ExtensionPayloader to pscanrulesAlpha for use in JSFunctionPassiveScanner\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-03T12:32:21Z", "type": "commit"}, {"oid": "b6f2047782e0f629fd1127d84fbbad00a065af20", "url": "https://github.com/zaproxy/zap-extensions/commit/b6f2047782e0f629fd1127d84fbbad00a065af20", "message": "Add unit test for custom payload\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-03T12:44:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMDg1OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r387000858", "bodyText": "You'll need to modify the pscanrulesAlpha Messages.properties to setup these keys/values.", "author": "kingthorin", "createdAt": "2020-03-03T12:56:43Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/payloader/ExtensionPayloader.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha.payloader;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.Extension;\n+import org.parosproxy.paros.extension.ExtensionAdaptor;\n+import org.parosproxy.paros.extension.ExtensionHook;\n+import org.zaproxy.zap.extension.custompayloads.ExtensionCustomPayloads;\n+import org.zaproxy.zap.extension.custompayloads.PayloadCategory;\n+import org.zaproxy.zap.extension.pscanrulesAlpha.JSFunctionPassiveScanner;\n+\n+public class ExtensionPayloader extends ExtensionAdaptor {\n+\n+    public static final String NAME = \"ExtensionPayloaderPscanRulesAlphaRelease\";\n+    private static final List<Class<? extends Extension>> DEPENDENCIES;\n+    private static ExtensionCustomPayloads ecp;\n+    private PayloadCategory jsFuncCategory;\n+\n+    static {\n+        List<Class<? extends Extension>> dependencies = new ArrayList<>(1);\n+        dependencies.add(ExtensionCustomPayloads.class);\n+        DEPENDENCIES = Collections.unmodifiableList(dependencies);\n+    }\n+\n+    public ExtensionPayloader() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void hook(ExtensionHook extensionHook) {\n+        super.hook(extensionHook);\n+\n+        ecp =\n+                Control.getSingleton()\n+                        .getExtensionLoader()\n+                        .getExtension(ExtensionCustomPayloads.class);\n+        jsFuncCategory =\n+                new PayloadCategory(\n+                        JSFunctionPassiveScanner.JS_FUNCTION_PAYLOAD_CATEGORY,\n+                        JSFunctionPassiveScanner.DEFAULT_FUNCTIONS);\n+        ecp.addPayloadCategory(jsFuncCategory);\n+        JSFunctionPassiveScanner.setPayloadProvider(() -> jsFuncCategory.getPayloadsIterator());\n+    }\n+\n+    @Override\n+    public boolean canUnload() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void unload() {\n+        JSFunctionPassiveScanner.setPayloadProvider(null);\n+        ecp.removePayloadCategory(jsFuncCategory);\n+    }\n+\n+    @Override\n+    public List<Class<? extends Extension>> getDependencies() {\n+        return DEPENDENCIES;\n+    }\n+\n+    @Override\n+    public String getAuthor() {\n+        return Constant.ZAP_TEAM;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return Constant.messages.getString(\"pscanrules.payloader.desc\");\n+    }\n+\n+    @Override\n+    public String getUIName() {\n+        return Constant.messages.getString(\"pscanrules.payloader.name\");\n+    }\n+}", "originalCommit": "b6f2047782e0f629fd1127d84fbbad00a065af20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMTYwNg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r387001606", "bodyText": "Ah okay gotcha, I had this nagging feeling I was forgetting something, thanks!", "author": "madanalogy", "createdAt": "2020-03-03T12:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMDg1OA=="}], "type": "inlineReview"}, {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "url": "https://github.com/zaproxy/zap-extensions/commit/2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "message": "Add ExtensionPayloader key/value to Messages.properties\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-03T13:03:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4OTIxOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390889219", "bodyText": "This is misleading, the method already initialises the patterns. Might be better to change to createPatterns and not assign there.", "author": "thc202", "createdAt": "2020-03-11T10:53:51Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5Mjg2MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390892861", "bodyText": "The evidence field should not contain extraneous characters, it should match exactly what was found in the HTTP message. (It shouldn't be needed anyway, it's just using the first find.)", "author": "thc202", "createdAt": "2020-03-11T11:00:33Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5Mzg0NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390893845", "bodyText": "The length check could be added to the first if statement.", "author": "thc202", "createdAt": "2020-03-11T11:02:22Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDE2NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390894164", "bodyText": "Minimised files will/might not have newlines, we should ensure the line is not too big when adding to the evidence.", "author": "thc202", "createdAt": "2020-03-11T11:03:01Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMzM3Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390913376", "bodyText": "And in the case it has many lines it might lead too much memory usage, might be better to find the whole content and just get chunks around the function found?", "author": "thc202", "createdAt": "2020-03-11T11:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxOTUyOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391819529", "bodyText": "You mean rather than initialise and iterate through lines, to just perform the pattern search on the raw text, i.e. remove call to split(\\n)?", "author": "madanalogy", "createdAt": "2020-03-12T18:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NzU2NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391897565", "bodyText": "Right.", "author": "thc202", "createdAt": "2020-03-12T21:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDM3OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390894378", "bodyText": "Same comment regarding the evidence (this might be better for the other info field too).", "author": "thc202", "createdAt": "2020-03-11T11:03:26Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");\n+            for (String line : lines) {\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(line).find()) {\n+                        evidence.append(", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNjEyNg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391826126", "bodyText": "You mean split the call to Constant.messages.getString(MESSAGE_PREFIX + \"otherinfo\", pattern, line)); into a  separate variable to be displayed as other info rather than have it in the evidence?", "author": "madanalogy", "createdAt": "2020-03-12T18:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NzgyMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391897823", "bodyText": "Yeah, but we could still use part of the \"line\" as evidence.", "author": "thc202", "createdAt": "2020-03-12T21:15:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0NDQyMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r392644422", "bodyText": "I decided on removing the  \"otherinfo\" altogether as I didn't think it was necessary", "author": "madanalogy", "createdAt": "2020-03-15T06:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDU3NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390894574", "bodyText": "Needs update.", "author": "thc202", "createdAt": "2020-03-11T11:03:44Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");\n+            for (String line : lines) {\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(line).find()) {\n+                        evidence.append(\n+                                Constant.messages.getString(\n+                                        MESSAGE_PREFIX + \"otherinfo\", pattern, line));\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this line once\n+                    }\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static List<Pattern> getPatterns() {\n+        if (patterns == null) {\n+            patterns = new ArrayList<>();\n+\n+            try {\n+                File f =\n+                        new File(\n+                                Constant.getZapHome()\n+                                        + File.separator\n+                                        + FUNC_LIST_DIR\n+                                        + File.separator\n+                                        + FUNC_LIST_FILE);\n+                if (!f.exists()) {\n+                    throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+                }\n+                try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                    String line;\n+                    while ((line = reader.readLine()) != null) {\n+                        line = line.trim();\n+                        if (!line.startsWith(\"#\") && line.length() > 0) {\n+                            patterns.add(\n+                                    Pattern.compile(\n+                                            \"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));\n+                        }\n+                    }\n+                }\n+            } catch (IOException e) {\n+                LOGGER.error(\n+                        \"Error on opening/reading suspicious comments file: \"", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTUzOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390899538", "bodyText": "Ideally this should be handled outside this method, otherwise the scanner will miss changes done to the payloads once the patterns is initialised.", "author": "thc202", "createdAt": "2020-03-11T11:13:26Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");\n+            for (String line : lines) {\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(line).find()) {\n+                        evidence.append(\n+                                Constant.messages.getString(\n+                                        MESSAGE_PREFIX + \"otherinfo\", pattern, line));\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this line once\n+                    }\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static List<Pattern> getPatterns() {\n+        if (patterns == null) {\n+            patterns = new ArrayList<>();\n+\n+            try {\n+                File f =\n+                        new File(\n+                                Constant.getZapHome()\n+                                        + File.separator\n+                                        + FUNC_LIST_DIR\n+                                        + File.separator\n+                                        + FUNC_LIST_FILE);\n+                if (!f.exists()) {\n+                    throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+                }\n+                try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                    String line;\n+                    while ((line = reader.readLine()) != null) {\n+                        line = line.trim();\n+                        if (!line.startsWith(\"#\") && line.length() > 0) {\n+                            patterns.add(\n+                                    Pattern.compile(\n+                                            \"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));\n+                        }\n+                    }\n+                }\n+            } catch (IOException e) {\n+                LOGGER.error(\n+                        \"Error on opening/reading suspicious comments file: \"\n+                                + File.separator\n+                                + FUNC_LIST_DIR\n+                                + File.separator\n+                                + FUNC_LIST_FILE\n+                                + \" Error: \"\n+                                + e.getMessage());\n+            }\n+            for (String payload : getJsFunctionPayloads().get()) {", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyODI3OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391828279", "bodyText": "Just wondering actually, how does the passive scan rule get notified when a new payload is uploaded? I didn't see an observer pattern anywhere and am largely basing my current payload implementation on what I could learn from other passive scan rules so I don't really understand it fully yet :\")", "author": "madanalogy", "createdAt": "2020-03-12T18:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTUzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMjE3NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391902174", "bodyText": "There's no notification, the provider always returns the latest payloads. It would be useful to tell that to cache the Patterns, but that will require changes in the Custom Payloads add-on.", "author": "thc202", "createdAt": "2020-03-12T21:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTUzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwMjcyNA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r392002724", "bodyText": "Hmm would it be possible then at every scan to check whether the payload has changed? Is there any built in change detection in Custom Payloads? If not I can just do a manual check", "author": "madanalogy", "createdAt": "2020-03-13T02:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTUzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDQ5MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r392164491", "bodyText": "There isn't, it would have to be done here. But for the first iteration I'd not add the check, just create the Patterns each time.", "author": "thc202", "createdAt": "2020-03-13T11:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTUzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTc2MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390899760", "bodyText": "We should provide the details here instead (if needed), in other alert descriptions we don't link to the issues.", "author": "thc202", "createdAt": "2020-03-11T11:13:50Z", "path": "addOns/pscanrulesAlpha/src/main/javahelp/org/zaproxy/zap/extension/pscanrulesAlpha/resources/help/contents/pscanalpha.html", "diffHunk": "@@ -83,5 +83,13 @@ <H2>Sub Resource Integrity Attribute Missing</H2>\n <p>\n Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SubResourceIntegrityAttributeScanner.java\">SubResourceIntegrityAttributeScanner.java</a>\n \n+<H2>Dangerous JS Functions</H2>\n+This scanner checks for any dangerous JS functions present in a site response.<br>\n+For more details see: https://github.com/zaproxy/zaproxy/issues/5673", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTkzMA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390899930", "bodyText": "Is the regex part relevant? That seems to be an implementation detail, or you mean these are to be interpreted as regular expressions as well? If the former we should quote the strings when creating the Pattern otherwise we should catch the exception when the regular expression is invalid.", "author": "thc202", "createdAt": "2020-03-11T11:14:15Z", "path": "addOns/pscanrulesAlpha/src/main/zapHomeFiles/xml/js-function-list.txt", "diffHunk": "@@ -0,0 +1,10 @@\n+# This file lists all dangerous JS functions being scanned for.\n+# Searching is done via regex per whole word match on each line item [e.g. 'eval' will match with '$eval()'].", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyMzIwNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391823207", "bodyText": "Hmm I think we can omit the word \"regex\", I wasn't intending for user defined regex expressions in the payload. I just wanted to be more verbose with explaining how the searching would happen.", "author": "madanalogy", "createdAt": "2020-03-12T18:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5ODYzNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391898637", "bodyText": "OK.", "author": "thc202", "createdAt": "2020-03-12T21:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwNDQwMQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390904401", "bodyText": "I'd not add these, the test would fail anyway.", "author": "thc202", "createdAt": "2020-03-11T11:23:20Z", "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustHtml\", \"eval\"));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInJavaScriptResponse()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$eval()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInHtmlScriptElements()\n+            throws HttpMalformedHeaderException, URIException {\n+\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Some Html Element bypassSecurityTrustHtml()</script></h1>\\n\"\n+                        + \"<b>No script here</b>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        assertTrue(msg.getResponseHeader().isText());", "originalCommit": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyNDQxNQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391824415", "bodyText": "I don't quite get what you mean by this, are you referring to the test case or the specific assert method in this line?", "author": "madanalogy", "createdAt": "2020-03-12T18:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwNDQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5ODYxMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r391898612", "bodyText": "These (this line and following) specific assertions.", "author": "thc202", "createdAt": "2020-03-12T21:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwNDQwMQ=="}], "type": "inlineReview"}, {"oid": "ebc60906a9d8ddd7c8d39338feceb027eade4b40", "url": "https://github.com/zaproxy/zap-extensions/commit/ebc60906a9d8ddd7c8d39338feceb027eade4b40", "message": "Redesign pattern creation logic\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-15T06:28:32Z", "type": "commit"}, {"oid": "1da7ed5458350bc2ce161cb92c18390f950d6fe3", "url": "https://github.com/zaproxy/zap-extensions/commit/1da7ed5458350bc2ce161cb92c18390f950d6fe3", "message": "Rephrase scanner help info\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-15T06:29:31Z", "type": "commit"}, {"oid": "f7795d783b2729fe2b71f31218413575a52579f6", "url": "https://github.com/zaproxy/zap-extensions/commit/f7795d783b2729fe2b71f31218413575a52579f6", "message": "Add test cases\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-15T06:29:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MTY5Mg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395141692", "bodyText": "Set", "author": "thc202", "createdAt": "2020-03-19T16:06:15Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjEzMQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395142131", "bodyText": "defaultPatterns? (And rename createPatterns to createDefaultPatterns?)", "author": "thc202", "createdAt": "2020-03-19T16:06:53Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjM4NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395142384", "bodyText": "Worth extracting a method to have the same behaviour in both cases (also reduce some duplication).", "author": "thc202", "createdAt": "2020-03-19T16:07:13Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0Mjg1Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395142853", "bodyText": "This will include the \\bs also, we can use the group() from the Matcher which would return just the name of the function.", "author": "thc202", "createdAt": "2020-03-19T16:07:52Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzE0OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395143148", "bodyText": "This should be extracted to a method, same for file and payloads.\nThe line needs to be quoted (Pattern#quote) to handle special regular expressions chars (worth adding a test for the file and custom payloads).", "author": "thc202", "createdAt": "2020-03-19T16:08:14Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);\n+                    break; // Only need to record one instance of vulnerability\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createPatterns() {\n+        patterns = new HashSet<>();\n+        defaultPatterns = new HashSet<>();\n+        try {\n+            File f =\n+                    new File(\n+                            Constant.getZapHome()\n+                                    + File.separator\n+                                    + FUNC_LIST_DIR\n+                                    + File.separator\n+                                    + FUNC_LIST_FILE);\n+            if (!f.exists()) {\n+                throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+            }\n+            try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    line = line.trim();\n+                    if (!line.startsWith(\"#\") && line.length() > 0) {\n+                        defaultPatterns.add(\n+                                Pattern.compile(\"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyNTY1OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395425658", "bodyText": "During testing I noticed that it works so long as the special characters are not at the start or the end of the function names. For example, b$dFunction as an input pattern will match @b$dFunction() but $badFunction will not match $badFunction(). I'm thinking it should be fine as long as the behaviour is documented in the help page?\nAlternatively I could just remove the word boundary \\b during pattern compilation. I'm in favour of this implementation as it gives greater control to the user payload in exchange for a higher false positive rate which should be fine since the alert confidence is low.", "author": "madanalogy", "createdAt": "2020-03-20T03:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NDAxOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395544019", "bodyText": "Sounds good.", "author": "thc202", "createdAt": "2020-03-20T10:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzM0OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395143349", "bodyText": "Was this meant to be patterns = new HashSet(defaultPatterns);? Otherwise it will change the defaultPatterns.", "author": "thc202", "createdAt": "2020-03-19T16:08:30Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);\n+                    break; // Only need to record one instance of vulnerability\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createPatterns() {\n+        patterns = new HashSet<>();\n+        defaultPatterns = new HashSet<>();\n+        try {\n+            File f =\n+                    new File(\n+                            Constant.getZapHome()\n+                                    + File.separator\n+                                    + FUNC_LIST_DIR\n+                                    + File.separator\n+                                    + FUNC_LIST_FILE);\n+            if (!f.exists()) {\n+                throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+            }\n+            try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    line = line.trim();\n+                    if (!line.startsWith(\"#\") && line.length() > 0) {\n+                        defaultPatterns.add(\n+                                Pattern.compile(\"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOGGER.error(\n+                    \"Error on opening/reading js functions file: \"\n+                            + File.separator\n+                            + FUNC_LIST_DIR\n+                            + File.separator\n+                            + FUNC_LIST_FILE\n+                            + \" Error: \"\n+                            + e.getMessage());\n+        }\n+    }\n+\n+    private static void loadPayload() {\n+        patterns = defaultPatterns;", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxMzAwOA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395413008", "bodyText": "Yes it was sorry, thanks for catching that!", "author": "madanalogy", "createdAt": "2020-03-20T02:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzgxNg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395143816", "bodyText": "We should assert the evidence as well to make sure it's the expected.", "author": "thc202", "createdAt": "2020-03-19T16:09:09Z", "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustHtml\", \"eval\"));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInJavaScriptResponse()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$eval()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NDc2NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395144764", "bodyText": "This could be removed since it's being assigned later.", "author": "thc202", "createdAt": "2020-03-19T16:10:36Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);\n+                    break; // Only need to record one instance of vulnerability\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createPatterns() {\n+        patterns = new HashSet<>();", "originalCommit": "f7795d783b2729fe2b71f31218413575a52579f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96f9a4ee4ed9201742304a669e213ce8bf752cec", "url": "https://github.com/zaproxy/zap-extensions/commit/96f9a4ee4ed9201742304a669e213ce8bf752cec", "message": "Extract methods for pattern creation and search\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-20T03:40:37Z", "type": "commit"}, {"oid": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3", "url": "https://github.com/zaproxy/zap-extensions/commit/f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3", "message": "Remove word boundary regex pattern\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-20T08:41:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NDY1Mw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395544653", "bodyText": "Should be singular, just adding one.", "author": "thc202", "createdAt": "2020-03-20T10:19:43Z", "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static Set<Pattern> defaultPatterns = null;\n+    private static Set<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (defaultPatterns == null) {\n+            createDefaultPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                searchPatterns(evidence, elStr);\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            searchPatterns(evidence, content);\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void searchPatterns(StringBuilder evidence, String data) {\n+        for (Pattern pattern : patterns) {\n+            Matcher matcher = pattern.matcher(data);\n+            if (matcher.find()) {\n+                evidence.append(matcher.group());\n+                break; // Only need to record one instance of vulnerability\n+            }\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createDefaultPatterns() {\n+        defaultPatterns = new HashSet<>();\n+        try {\n+            File f =\n+                    new File(\n+                            Constant.getZapHome()\n+                                    + File.separator\n+                                    + FUNC_LIST_DIR\n+                                    + File.separator\n+                                    + FUNC_LIST_FILE);\n+            if (!f.exists()) {\n+                throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+            }\n+            try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    line = line.trim();\n+                    if (!line.startsWith(\"#\") && line.length() > 0) {\n+                        addPatterns(line, defaultPatterns);\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOGGER.error(\n+                    \"Error on opening/reading js functions file: \"\n+                            + File.separator\n+                            + FUNC_LIST_DIR\n+                            + File.separator\n+                            + FUNC_LIST_FILE\n+                            + \" Error: \"\n+                            + e.getMessage());\n+        }\n+    }\n+\n+    private static void loadPayload() {\n+        patterns = new HashSet<>(defaultPatterns);\n+        for (String line : getJsFunctionPayloads().get()) {\n+            addPatterns(line, patterns);\n+        }\n+    }\n+\n+    private static void addPatterns(String line, Set<Pattern> set) {", "originalCommit": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NTg2Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395545866", "bodyText": "Could assert the evidence here too (and following test).", "author": "thc202", "createdAt": "2020-03-20T10:22:09Z", "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustHtml\", \"eval\"));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInJavaScriptResponse()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$eval()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"eval\");\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInHtmlScriptElements()\n+            throws HttpMalformedHeaderException, URIException {\n+\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Some Html Element bypassSecurityTrustHtml()</script></h1>\\n\"\n+                        + \"<b>No script here</b>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"bypassSecurityTrustHtml\");\n+    }\n+\n+    @Test\n+    public void shouldNotAlertGivenNoMatch() throws URIException, HttpMalformedHeaderException {\n+        // Given\n+        String body = \"Some text <script>innocentFunction()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, empty());\n+    }\n+\n+    @Test\n+    public void shouldNotAlertGivenEmptyBody() throws HttpMalformedHeaderException, URIException {\n+\n+        // Given\n+        String body = \"\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, empty());\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenCustomPayloadFunctionMatch()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$badFunction()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+        List<String> functions = Collections.singletonList(\"$badFunction\");\n+        JSFunctionPassiveScanner.setPayloadProvider(() -> functions);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"$badFunction\");\n+    }\n+\n+    @Test\n+    public void shouldNotAlertGivenMatchOutsideScript()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Something innocent happening here</script></h1>\\n\"\n+                        + \"<b>You should not use bypassSecurityTrustHtml()</b>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, empty());\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenMatchInSecondScript()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Something innocent happening here</script></h1>\\n\"\n+                        + \"<p><b>Just some words going on</b>\\n\"\n+                        + \"<script>$eval()</script></p>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"eval\");\n+    }\n+\n+    @Test\n+    public void shouldAlertOnceGivenMultipleMatchesHTML()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>eval()</script></h1>\\n\"\n+                        + \"<p><b>Just some words going on</b>\\n\"\n+                        + \"<script>bypassSecurityTrustHtml()</script></p>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));", "originalCommit": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNDk0Nw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395634947", "bodyText": "Tests revealed a problem with the html search logic. Added a check when cycling through HTML elements that if evidence is not empty to break.", "author": "madanalogy", "createdAt": "2020-03-20T13:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NTg2Ng=="}], "type": "inlineReview"}, {"oid": "2c9f92305dceb62eab29961189a15caef0f41eb6", "url": "https://github.com/zaproxy/zap-extensions/commit/2c9f92305dceb62eab29961189a15caef0f41eb6", "message": "Add evidence check after html pattern search\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-20T13:29:02Z", "type": "commit"}, {"oid": "c13f440b3565bafe984bc96c3d95b97a948b93c3", "url": "https://github.com/zaproxy/zap-extensions/commit/c13f440b3565bafe984bc96c3d95b97a948b93c3", "message": "Fix failing test\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-20T13:38:37Z", "type": "commit"}, {"oid": "4ddbb550b5dd6615c8c7706a4feba507bbc10b10", "url": "https://github.com/zaproxy/zap-extensions/commit/4ddbb550b5dd6615c8c7706a4feba507bbc10b10", "message": "Add check for hash set non-deterministic iteration\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-20T13:54:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjY5OQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395672699", "bodyText": "We could also use a list? I doubt we'll have many duplications that we require a set.", "author": "thc202", "createdAt": "2020-03-20T14:27:38Z", "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -185,7 +186,9 @@ public void shouldAlertOnceGivenMultipleMatchesHTML()\n \n         // Then\n         assertThat(alertsRaised, hasSize(1));\n-        assertEquals(alertsRaised.get(0).getEvidence(), \"eval\");\n+        assertTrue(\n+                alertsRaised.get(0).getEvidence().equals(\"bypassSecurityTrustHtml\")", "originalCommit": "4ddbb550b5dd6615c8c7706a4feba507bbc10b10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5OTk0NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395699945", "bodyText": "I'd rather stick to a Set for scalability, I feel that it's a worthy tradeoff since the only downside over using a List is non-deterministic iteration which only affects testing. I addressed that in my latest commit so am thinking it should be fine?", "author": "madanalogy", "createdAt": "2020-03-20T15:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcwMjA3MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395702071", "bodyText": "What do you mean by scalability?", "author": "thc202", "createdAt": "2020-03-20T15:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcxMTE4OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395711188", "bodyText": "If the function list grows or if the payload gets very big.", "author": "madanalogy", "createdAt": "2020-03-20T15:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyMzg1OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395723858", "bodyText": "That shouldn't be a problem, the file/payloads will not have millions of entries.", "author": "thc202", "createdAt": "2020-03-20T15:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyNjc0MQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395726741", "bodyText": "Gotcha, will switch to using a List then :)", "author": "madanalogy", "createdAt": "2020-03-20T15:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjY5OQ=="}], "type": "inlineReview"}, {"oid": "4ba659a69d44a9cf69b98c4ba9b5343ed5744555", "url": "https://github.com/zaproxy/zap-extensions/commit/4ba659a69d44a9cf69b98c4ba9b5343ed5744555", "message": "Refactor HashSet to ArrayList\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>", "committedDate": "2020-03-20T15:56:29Z", "type": "commit"}]}