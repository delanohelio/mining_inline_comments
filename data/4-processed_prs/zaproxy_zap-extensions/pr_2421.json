{"pr_number": 2421, "pr_title": "Fix handling of other HTTP message locations when fuzzing", "pr_createdAt": "2020-06-01T21:46:37Z", "pr_url": "https://github.com/zaproxy/zap-extensions/pull/2421", "timeline": [{"oid": "bbb1644ea47b100e9998e789b62d43dace4c5ba9", "url": "https://github.com/zaproxy/zap-extensions/commit/bbb1644ea47b100e9998e789b62d43dace4c5ba9", "message": "Modifying HttpFuzzer for making it extensible", "committedDate": "2020-06-01T21:32:00Z", "type": "commit"}, {"oid": "463e16b56d25a71d454ff2b600da7c31a934fec9", "url": "https://github.com/zaproxy/zap-extensions/commit/463e16b56d25a71d454ff2b600da7c31a934fec9", "message": "Spotless Apply", "committedDate": "2020-06-01T21:41:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxODgwMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433918802", "bodyText": "fuzzLocations.get(0).getMessageLocation().getClass()", "author": "thc202", "createdAt": "2020-06-02T14:25:46Z", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +152,7 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(HttpMessage.class, this.getMessageLocationClass());", "originalCommit": "463e16b56d25a71d454ff2b600da7c31a934fec9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzODE4NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433938185", "bodyText": "hmm makes sense. Will update this in HttpFuzzerHandler.", "author": "preetkaran20", "createdAt": "2020-06-02T14:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxODgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzOTUyNw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433939527", "bodyText": "Do i need to Overrider this method ? or it is ok to have same fuzzer name ?", "author": "preetkaran20", "createdAt": "2020-06-02T14:54:21Z", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -176,7 +181,7 @@ private HttpFuzzer createFuzzer(\n                 processors);\n     }\n \n-    private String createFuzzerName(HttpMessage message) {\n+    protected String createFuzzerName(HttpMessage message) {", "originalCommit": "463e16b56d25a71d454ff2b600da7c31a934fec9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0MzgwMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433943803", "bodyText": "It's fine to have the default name, but if you think it would be better to show a custom one we can allow to specify one when showing the dialogue.", "author": "thc202", "createdAt": "2020-06-02T14:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzOTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1MzkzMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433953932", "bodyText": "I think then it is ok to have same name for now.", "author": "preetkaran20", "createdAt": "2020-06-02T15:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzOTUyNw=="}], "type": "inlineReview"}, {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7", "url": "https://github.com/zaproxy/zap-extensions/commit/e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7", "message": "Incorporating review comments", "committedDate": "2020-06-02T19:04:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MTM2MA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434141360", "bodyText": "Why is this (and following) being changed?", "author": "thc202", "createdAt": "2020-06-02T19:58:12Z", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -239,15 +240,15 @@ public HttpMessage getMessage(MessageContainer<HttpMessage> messageContainer) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T1 extends HttpFuzzerMessageProcessor, T2 extends HttpFuzzerMessageProcessorUI<T1>>\n+    public <T1 extends HttpFuzzerMessageProcessor, T2 extends HttpFuzzerMessageProcessorUI<T1>>", "originalCommit": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjY1OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434166658", "bodyText": "I think these are not needed now. will change it.", "author": "preetkaran20", "createdAt": "2020-06-02T20:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434166484", "bodyText": "Hi @thc202 ,\nI found that this has breaked the existing fuzzer reason being that fuzzLocations.get(0).getMessageLocation().getClass() returns the concrete instance class i.e. in case of HttpFuzzer DefaultHttpTextMessageLocation but HttpFuzzer registers the  TextHttpMessageLocationReplacerFactory which returns target class as interface and hence while getting replacer code fails.\nplease suggets.", "author": "preetkaran20", "createdAt": "2020-06-02T20:48:22Z", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "originalCommit": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2OTc3OA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434169778", "bodyText": "Did the above change to fix the issue. Please suggest.", "author": "preetkaran20", "createdAt": "2020-06-02T20:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NDg1Ng==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434474856", "bodyText": "It's preferable (more extensible) to change MessageLocationReplacers to walk the class hierarchy of the message location when getting the factory, e.g.:\n--- a/addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/messagelocations/MessageLocationReplacers.java\n+++ b/addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/messagelocations/MessageLocationReplacers.java\n@@ -84,10 +84,35 @@ public class MessageLocationReplacers {\n         if (replacers != null) {\n             @SuppressWarnings(\"unchecked\")\n             MessageLocationReplacerFactory<T> replacerFactory =\n-                    (MessageLocationReplacerFactory<T>) replacers.get(messageLocationClass);\n+                    (MessageLocationReplacerFactory<T>) getFactory(replacers, messageLocationClass);\n             return replacerFactory.createReplacer();\n         }\n \n         return null;\n     }\n+\n+    private static <T> T getFactory(\n+            Map<Class<? extends MessageLocation>, T> factories, Class<?> clazz) {\n+        if (!MessageLocation.class.isAssignableFrom(clazz)) {\n+            return null;\n+        }\n+\n+        T factory = factories.get(clazz);\n+        if (factory != null) {\n+            return factory;\n+        }\n+\n+        factory = getFactory(factories, clazz.getSuperclass());\n+        if (factory != null) {\n+            return factory;\n+        }\n+\n+        for (Class<?> interfaceClazz : clazz.getInterfaces()) {\n+            factory = getFactory(factories, interfaceClazz);\n+            if (factory != null) {\n+                return factory;\n+            }\n+        }\n+        return null;\n+    }\n }", "author": "thc202", "createdAt": "2020-06-03T10:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTc4NQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434515785", "bodyText": "hmm I was also thinking about it but then i looked at the method name and it is  getTargetMessageLocation\nand from this it seems like it should be the target class. But makes sense if we do this way then there are no changes required in HttpFuzzer.\nthanks,\nKaran", "author": "preetkaran20", "createdAt": "2020-06-03T12:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyNDYwNA==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434524604", "bodyText": "And it is, TextHttpMessageLocationReplacerFactory is targeting TextHttpMessageLocation (an interface), so it should handle any implementation of said location.\nDo you mean HttpFuzzerHandler? (There are no changes in HttpFuzzer.)", "author": "thc202", "createdAt": "2020-06-03T12:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMTAzMw==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434531033", "bodyText": "Yes yes, i mean HttpFuzzerHandler", "author": "preetkaran20", "createdAt": "2020-06-03T12:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjEzOQ==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434532139", "bodyText": "That change is still needed though, the one in ExtensionHttpFuzzer would no longer be.", "author": "thc202", "createdAt": "2020-06-03T12:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1MDExMg==", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434550112", "bodyText": "oh sorry, i got the point. just misplaced the names.", "author": "preetkaran20", "createdAt": "2020-06-03T13:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}], "type": "inlineReview"}, {"oid": "02dbddb7ed96d26241751bd464eb9174caa8d31e", "url": "https://github.com/zaproxy/zap-extensions/commit/02dbddb7ed96d26241751bd464eb9174caa8d31e", "message": "Small Changes", "committedDate": "2020-06-02T20:53:47Z", "type": "commit"}, {"oid": "f64f1ed081c0f73c2bde32960cb6577cdd9775ab", "url": "https://github.com/zaproxy/zap-extensions/commit/f64f1ed081c0f73c2bde32960cb6577cdd9775ab", "message": "Incorporating review comments", "committedDate": "2020-06-03T20:03:33Z", "type": "commit"}, {"oid": "24d2e9f733d4f0f4b07ca9131ab8f195ea9b3a2c", "url": "https://github.com/zaproxy/zap-extensions/commit/24d2e9f733d4f0f4b07ca9131ab8f195ea9b3a2c", "message": "Adding changelog", "committedDate": "2020-06-05T14:43:59Z", "type": "commit"}]}