{"pr_number": 2093, "pr_title": "Servicepack Migration: Remember Settings", "pr_createdAt": "2020-04-02T16:12:54Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2093", "timeline": [{"oid": "ef597e5f5cae1760b39d2bc97b762bac8c33047c", "url": "https://github.com/uyuni-project/uyuni/commit/ef597e5f5cae1760b39d2bc97b762bac8c33047c", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-06T08:25:52Z", "type": "forcePushed"}, {"oid": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "url": "https://github.com/uyuni-project/uyuni/commit/cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-06T08:34:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNzY5NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r404607694", "bodyText": "I'd choose a better-fitting name for this method. It's not a \"read-only\" get, I think its intent is to populate the request based on given action, so maybe populateRequestFromAction, setupRequestFromAction, ... would be better.\n\n\nThe logic is non-trivial and the reader should get some idea, what's going on, when the aid has been passed (which happens, when we're forwarding from the action page, IIUC). That's why I'd suggest:\n\na comment in that if block from which this method is called\na javadoc for this method\nboth", "author": "hustodemon", "createdAt": "2020-04-07T07:52:29Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -444,4 +459,39 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         }\n         return channelIDs;\n     }\n+\n+    private String getActionDetails(HttpServletRequest request, RequestContext ctx) {", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNDk3NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405424974", "bodyText": "You are right I should add some comments about whats going on here", "author": "parlt91", "createdAt": "2020-04-08T10:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNzY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxNzE2Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r404617162", "bodyText": "Nit: you could use a shortcut here: Channel.isBaseChannel().", "author": "hustodemon", "createdAt": "2020-04-07T08:08:35Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -444,4 +459,39 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         }\n         return channelIDs;\n     }\n+\n+    private String getActionDetails(HttpServletRequest request, RequestContext ctx) {\n+        Long aid = ctx.getParamAsLong(\"aid\");\n+\n+        DistUpgradeAction action = (DistUpgradeAction) ActionFactory.lookupById(aid);\n+        DistUpgradeActionDetails details = action.getDetails();\n+        List<Channel> channels = details.getChannelTasks().stream()\n+                .filter(channel -> channel.getTask() == DistUpgradeChannelTask.SUBSCRIBE)\n+                .map(DistUpgradeChannelTask::getChannel)\n+                .collect(Collectors.toList());\n+\n+        Set<Channel> baseChannelSet = channels.stream()\n+                .map(Channel::getParentChannel)", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMTM0Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r404621347", "bodyText": "IIUC, the addon products of this product set will always be empty, which means empty list will be passed to the request on line 490. Is this intention?", "author": "hustodemon", "createdAt": "2020-04-07T08:15:08Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -444,4 +459,39 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         }\n         return channelIDs;\n     }\n+\n+    private String getActionDetails(HttpServletRequest request, RequestContext ctx) {\n+        Long aid = ctx.getParamAsLong(\"aid\");\n+\n+        DistUpgradeAction action = (DistUpgradeAction) ActionFactory.lookupById(aid);\n+        DistUpgradeActionDetails details = action.getDetails();\n+        List<Channel> channels = details.getChannelTasks().stream()\n+                .filter(channel -> channel.getTask() == DistUpgradeChannelTask.SUBSCRIBE)\n+                .map(DistUpgradeChannelTask::getChannel)\n+                .collect(Collectors.toList());\n+\n+        Set<Channel> baseChannelSet = channels.stream()\n+                .map(Channel::getParentChannel)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toSet());\n+\n+        if (baseChannelSet.size() != 1) {\n+            return TARGET;\n+        }\n+\n+        Channel baseChannel = baseChannelSet.iterator().next();\n+        List<Long> channelIds = channels.stream().map(Channel::getId).collect(Collectors.toList());\n+        List<EssentialChannelDto> childChannels = getChannelDTOs(ctx, baseChannel, channelIds);\n+        SUSEProduct baseProduct = SUSEProductFactory.lookupByChannelName(baseChannel.getName()).get(0).getRootProduct();\n+        SUSEProductSet targetProductSet = createProductSet(baseProduct.getId(), new Long[0]);", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2ODIyNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r406268225", "bodyText": "AddonProducts are handled properly now", "author": "parlt91", "createdAt": "2020-04-09T14:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMTM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMzgxNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r404623817", "bodyText": "Nit: I think camelCase would be more readable.", "author": "hustodemon", "createdAt": "2020-04-07T08:18:57Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/sdc/SystemHistoryEventAction.java", "diffHunk": "@@ -93,13 +94,21 @@ public ActionForward execute(ActionMapping mapping,\n                 serverAction.getStatus().equals(ActionFactory.STATUS_FAILED));\n         request.setAttribute(\"pickedup\",\n                 serverAction.getStatus().equals(ActionFactory.STATUS_PICKEDUP));\n+        request.setAttribute(\"completed\",\n+                serverAction.getStatus().equals(ActionFactory.STATUS_COMPLETED));\n+        request.setAttribute(\"typedistupgradedryrun\",", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTEyMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r404629120", "bodyText": "Nit: I think the comparison to true is not needed, just requestScope.completed && requestScope.typedistupgradedryrun  should do fine.", "author": "hustodemon", "createdAt": "2020-04-07T08:27:17Z", "path": "java/code/webapp/WEB-INF/pages/systems/sdc/history_event.jsp", "diffHunk": "@@ -91,7 +91,17 @@\n   </div>\n </c:if>\n \n-<rhn:icon type=\"nav-up\" title=\"system.event.returnIcon\"/><a href=\"${referrerLink}?sid=${system.id}\"><bean:message key=\"${linkLabel}\" arg0=\"${fn:escapeXml(system.name)}\" /></a>\n+  <c:if test=\"${requestScope.completed == true && requestScope.typedistupgradedryrun == true}\">", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMDQ0Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405430447", "bodyText": "You are right and I wouldn't have done it. But I wanted to stick to the style the rest of the file uses", "author": "parlt91", "createdAt": "2020-04-08T10:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyOTEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzkzMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405323932", "bodyText": "The confirm sounds very general given its task (forwarding to SPMigration). I'd be favor in a specific name (spmigration).", "author": "hustodemon", "createdAt": "2020-04-08T07:48:09Z", "path": "java/code/webapp/WEB-INF/struts-config.xml", "diffHunk": "@@ -3232,6 +3232,8 @@\n                  path=\"/WEB-INF/pages/systems/sdc/history_event.jsp\"/>\n         <forward name=\"continue\"\n                  path=\"/systems/details/history/History.do\"/>\n+        <forward name=\"confirm\"", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMTM3Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405431372", "bodyText": "Agreed. In the beginning I thought it would need to be confirm, since the forward in the SPMigrationAction is also called confirm, but that isn't the case.\nSo I will change it to spmigration", "author": "parlt91", "createdAt": "2020-04-08T10:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTA5Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405325096", "bodyText": "Would it be possible to check for STATUS_COMPLETED && typedistupgradedryrun to restrict the forward to SP Migration only to the cases when the action is completed and we deal with dry run?", "author": "hustodemon", "createdAt": "2020-04-08T07:50:11Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/sdc/SystemHistoryEventAction.java", "diffHunk": "@@ -93,13 +94,21 @@ public ActionForward execute(ActionMapping mapping,\n                 serverAction.getStatus().equals(ActionFactory.STATUS_FAILED));\n         request.setAttribute(\"pickedup\",\n                 serverAction.getStatus().equals(ActionFactory.STATUS_PICKEDUP));\n+        request.setAttribute(\"completed\",\n+                serverAction.getStatus().equals(ActionFactory.STATUS_COMPLETED));\n+        request.setAttribute(\"typedistupgradedryrun\",\n+                action.getActionType().equals(ActionFactory.TYPE_DIST_UPGRADE) &&\n+                        ((DistUpgradeAction) action).getDetails().isDryRun());\n         if (!serverAction.getStatus().equals(ActionFactory.STATUS_COMPLETED) &&\n                 !serverAction.getStatus().equals(ActionFactory.STATUS_FAILED)) {\n             request.setAttribute(\"referrerLink\", \"Pending.do\");\n             request.setAttribute(\"linkLabel\", \"system.event.pendingReturn\");\n             request.setAttribute(\"headerLabel\", \"system.event.pendingHeader\");\n         }\n         if (isSubmitted((DynaActionForm)formIn)) {\n+            if (serverAction.getStatus().equals(ActionFactory.STATUS_COMPLETED)) {", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMjA1OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405432059", "bodyText": "Well the button wouldn't show otherwise and that code would not be executed anyway, but for consistency I will add the check here as well. \ud83d\udc4d", "author": "parlt91", "createdAt": "2020-04-08T10:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzAyNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405327026", "bodyText": "Could this condition be simplified? ${!requestScope.completed}.", "author": "hustodemon", "createdAt": "2020-04-08T07:53:29Z", "path": "java/code/webapp/WEB-INF/pages/systems/spmigration/spmigration-confirm.jsp", "diffHunk": "@@ -60,20 +60,24 @@\n       </div>\n     </div>\n     <hr />\n-    <div class=\"alert alert-danger\">\n-      <rhn:icon type=\"system-crit\" />\n-      <bean:message key=\"spmigration.jsp.confirm.note\" />\n-    </div>\n+    <c:if test=\"${!requestScope.completed == true}\">", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMjY4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405432685", "bodyText": "Ya and I double checked the rest of the file does it as well in this case.", "author": "parlt91", "createdAt": "2020-04-08T10:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzA4OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r405327088", "bodyText": "Same here.", "author": "hustodemon", "createdAt": "2020-04-08T07:53:34Z", "path": "java/code/webapp/WEB-INF/pages/systems/spmigration/spmigration-confirm.jsp", "diffHunk": "@@ -60,20 +60,24 @@\n       </div>\n     </div>\n     <hr />\n-    <div class=\"alert alert-danger\">\n-      <rhn:icon type=\"system-crit\" />\n-      <bean:message key=\"spmigration.jsp.confirm.note\" />\n-    </div>\n+    <c:if test=\"${!requestScope.completed == true}\">\n+      <div class=\"alert alert-danger\">\n+        <rhn:icon type=\"system-crit\" />\n+        <bean:message key=\"spmigration.jsp.confirm.note\" />\n+      </div>\n+    </c:if>\n     <div>\n       <div class=\"pull-left\">\n         <html:submit styleClass=\"btn btn-default\" property=\"dispatch\">\n           <bean:message key=\"spmigration.jsp.confirm.back\" />\n         </html:submit>\n       </div>\n       <div class=\"pull-right\">\n-        <html:submit styleClass=\"btn btn-success\" property=\"dispatch\">\n-          <bean:message key=\"spmigration.jsp.confirm.submit.dry-run\" />\n-        </html:submit>\n+        <c:if test=\"${!requestScope.completed == true}\">", "originalCommit": "cb3093edb8b024ccb0b98f97f12a9b02f2a54a62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "315a75e976cf08e0b5b18c8a476502d54170fc80", "url": "https://github.com/uyuni-project/uyuni/commit/315a75e976cf08e0b5b18c8a476502d54170fc80", "message": "Add suggested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-09T14:55:15Z", "type": "forcePushed"}, {"oid": "ee1778d3e0d62c5c764cae85f187ee22e7cc3d5a", "url": "https://github.com/uyuni-project/uyuni/commit/ee1778d3e0d62c5c764cae85f187ee22e7cc3d5a", "message": "Add suggested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-14T08:00:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDcyNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r408200725", "bodyText": "The getMigrationTargets evokes something that doesn't have side-effects. I think that at least a comment in javadoc about populating that MISSING_SUCCESSOR_EXTENSIONS attribute would be good.", "author": "hustodemon", "createdAt": "2020-04-14T14:53:23Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -469,7 +460,38 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         return channelIDs;\n     }\n \n-    private String getActionDetails(HttpServletRequest request, RequestContext ctx) {\n+    /**\n+     * Gets list of available migration targets for given ProductSet\n+     *\n+     * @param request\n+     * @param ctx\n+     * @param server\n+     * @param installedProducts\n+     * @return\n+     */\n+    private List<SUSEProductSet> getMigrationTargets(HttpServletRequest request, RequestContext ctx, Server server,", "originalCommit": "ee1778d3e0d62c5c764cae85f187ee22e7cc3d5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMzUxNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r408203516", "bodyText": "I'd suggest being more specific in the method arguments:\n\ninstead of ctx you can pass the user directly,\ninstead of the server, you can pass channelArch directly.\n\nPassing more specific params makes their purpose more clear here.", "author": "hustodemon", "createdAt": "2020-04-14T14:56:31Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -469,7 +460,38 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         return channelIDs;\n     }\n \n-    private String getActionDetails(HttpServletRequest request, RequestContext ctx) {\n+    /**\n+     * Gets list of available migration targets for given ProductSet\n+     *\n+     * @param request\n+     * @param ctx\n+     * @param server\n+     * @param installedProducts\n+     * @return\n+     */\n+    private List<SUSEProductSet> getMigrationTargets(HttpServletRequest request, RequestContext ctx, Server server,", "originalCommit": "ee1778d3e0d62c5c764cae85f187ee22e7cc3d5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMzYzMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r408203632", "bodyText": "One last thing: it'd be nice to mention that the installedProducts parameter is \"OUT\" (see removeIncompatibleTargets).", "author": "hustodemon", "createdAt": "2020-04-14T14:56:39Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -469,7 +460,38 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         return channelIDs;\n     }\n \n-    private String getActionDetails(HttpServletRequest request, RequestContext ctx) {\n+    /**\n+     * Gets list of available migration targets for given ProductSet\n+     *\n+     * @param request\n+     * @param ctx\n+     * @param server\n+     * @param installedProducts\n+     * @return\n+     */\n+    private List<SUSEProductSet> getMigrationTargets(HttpServletRequest request, RequestContext ctx, Server server,", "originalCommit": "ee1778d3e0d62c5c764cae85f187ee22e7cc3d5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwNDk1NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r408204955", "bodyText": "Please complete the javadoc.", "author": "hustodemon", "createdAt": "2020-04-14T14:58:14Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -469,7 +460,38 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         return channelIDs;\n     }\n \n-    private String getActionDetails(HttpServletRequest request, RequestContext ctx) {\n+    /**\n+     * Gets list of available migration targets for given ProductSet\n+     *\n+     * @param request\n+     * @param ctx\n+     * @param server\n+     * @param installedProducts\n+     * @return", "originalCommit": "ee1778d3e0d62c5c764cae85f187ee22e7cc3d5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMzA0NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2093#discussion_r408213045", "bodyText": "Can it be that there are multiple valid migration target with the same base product? Is selecting the first one the right thing to do?", "author": "hustodemon", "createdAt": "2020-04-14T15:08:17Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/SPMigrationAction.java", "diffHunk": "@@ -454,4 +459,78 @@ private SUSEProductSet createProductSet(Long baseProduct, Long[] addonProducts)\n         }\n         return channelIDs;\n     }\n+\n+    /**\n+     * Gets list of available migration targets for given ProductSet\n+     *\n+     * @param request\n+     * @param ctx\n+     * @param server\n+     * @param installedProducts\n+     * @return\n+     */\n+    private List<SUSEProductSet> getMigrationTargets(HttpServletRequest request, RequestContext ctx, Server server,\n+                                                     Optional<SUSEProductSet> installedProducts) {\n+        List<SUSEProductSet> allMigrationTargets = DistUpgradeManager.\n+                getTargetProductSets(installedProducts,\n+                        server.getServerArch().getCompatibleChannelArch(),\n+                        ctx.getCurrentUser());\n+\n+        Optional<Set<String>> missingSuccessorExtensions = Optional.of(new HashSet<String>());\n+        List<SUSEProductSet> migrationTargets = DistUpgradeManager.removeIncompatibleTargets(installedProducts,\n+                allMigrationTargets, missingSuccessorExtensions);\n+        request.setAttribute(MISSING_SUCCESSOR_EXTENSIONS,\n+                missingSuccessorExtensions.orElse(new HashSet<String>()));\n+        return migrationTargets;\n+    }\n+\n+    /**\n+     * Populate the request attributes from a given action\n+     *\n+     * @param request the HttpServletRequest\n+     * @param ctx the RequestContext\n+     * @return String containing the ActionForward target\n+     */\n+    private String populateRequestFromAction(HttpServletRequest request, RequestContext ctx) {\n+        Long aid = ctx.getParamAsLong(\"aid\");\n+\n+        DistUpgradeAction action = (DistUpgradeAction) ActionFactory.lookupById(aid);\n+        DistUpgradeActionDetails details = action.getDetails();\n+        List<Channel> channels = details.getChannelTasks().stream()\n+                .filter(channel -> channel.getTask() == DistUpgradeChannelTask.SUBSCRIBE)\n+                .map(DistUpgradeChannelTask::getChannel)\n+                .collect(Collectors.toList());\n+\n+        Set<Channel> baseChannelSet = channels.stream()\n+                .filter(Channel::isBaseChannel)\n+                .collect(Collectors.toSet());\n+\n+        if (baseChannelSet.size() != 1) {\n+            return TARGET;\n+        }\n+\n+        Channel baseChannel = baseChannelSet.iterator().next();\n+        List<Long> channelIds = channels.stream().map(Channel::getId).collect(Collectors.toList());\n+        List<EssentialChannelDto> childChannels = getChannelDTOs(ctx, baseChannel, channelIds);\n+\n+        SUSEProduct baseProduct = SUSEProductFactory.lookupByChannelName(baseChannel.getName()).get(0).getRootProduct();\n+\n+        Server server = ctx.lookupAndBindServer();\n+        Optional<SUSEProductSet> installedProducts = server.getInstalledProductSet();\n+        Optional<SUSEProductSet> targetProductSet = getMigrationTargets(request, ctx, server, installedProducts)\n+                .stream().filter(productSet -> productSet.getBaseProduct().equals(baseProduct)).findFirst();", "originalCommit": "ee1778d3e0d62c5c764cae85f187ee22e7cc3d5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef59a8153ca5e430d770e239afba6b2a508fbc0b", "url": "https://github.com/uyuni-project/uyuni/commit/ef59a8153ca5e430d770e239afba6b2a508fbc0b", "message": "Add suggested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-17T09:16:20Z", "type": "forcePushed"}, {"oid": "5c7ab4fba1519ef03d8ebda00c4b77600b1736e1", "url": "https://github.com/uyuni-project/uyuni/commit/5c7ab4fba1519ef03d8ebda00c4b77600b1736e1", "message": "Add logging output\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-22T10:38:46Z", "type": "forcePushed"}, {"oid": "f4c5146041e186def762add74174ac05f8c4c8f8", "url": "https://github.com/uyuni-project/uyuni/commit/f4c5146041e186def762add74174ac05f8c4c8f8", "message": "Add logging output\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-22T15:28:11Z", "type": "forcePushed"}, {"oid": "42e8f509e69b375d37ccdb9c186b2229999b6590", "url": "https://github.com/uyuni-project/uyuni/commit/42e8f509e69b375d37ccdb9c186b2229999b6590", "message": "Servicepack Migration: Remember Settings\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-23T07:40:37Z", "type": "commit"}, {"oid": "e4717fd3a677c43988da8b7f0f34ade287bb7f8e", "url": "https://github.com/uyuni-project/uyuni/commit/e4717fd3a677c43988da8b7f0f34ade287bb7f8e", "message": "Add changelog\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-23T07:40:37Z", "type": "commit"}, {"oid": "51a442d54f4666bfa1025ab6863b297498390f26", "url": "https://github.com/uyuni-project/uyuni/commit/51a442d54f4666bfa1025ab6863b297498390f26", "message": "Add suggested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-23T07:40:37Z", "type": "commit"}, {"oid": "470e1bade2e1852edd8c7c350b71c0c7a5de3745", "url": "https://github.com/uyuni-project/uyuni/commit/470e1bade2e1852edd8c7c350b71c0c7a5de3745", "message": "Add logging output\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-23T07:40:37Z", "type": "commit"}, {"oid": "470e1bade2e1852edd8c7c350b71c0c7a5de3745", "url": "https://github.com/uyuni-project/uyuni/commit/470e1bade2e1852edd8c7c350b71c0c7a5de3745", "message": "Add logging output\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-23T07:40:37Z", "type": "forcePushed"}]}