{"pr_number": 2162, "pr_title": "Reposync speedup part 3", "pr_createdAt": "2020-04-25T12:16:06Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2162", "timeline": [{"oid": "a138e07980c2cd12c1bfea179317289f6015f5aa", "url": "https://github.com/uyuni-project/uyuni/commit/a138e07980c2cd12c1bfea179317289f6015f5aa", "message": "refactoring: avoid returning and using counts from executemany\n\npsycopg2.extras.execute_batch does not guarantee rowcount is correct,\nand we do nothing but logging those anyway.", "committedDate": "2020-04-25T12:27:46Z", "type": "commit"}, {"oid": "01d321c377ecb56532802ea31bf4efd66a76c3d3", "url": "https://github.com/uyuni-project/uyuni/commit/01d321c377ecb56532802ea31bf4efd66a76c3d3", "message": "reposync speedup: use fast execution helper in executemany\n\n\"The current implementation of executemany() is (using an extremely\ncharitable understatement) not particularly performing. These functions\ncan be used to speed up the repeated execution of a statement against a\nset of parameters. By reducing the number of server roundtrips the\nperformance can be orders of magnitude better than using executemany().\"\n\nhttps://www.psycopg.org/docs/extras.html#fast-exec", "committedDate": "2020-04-25T12:27:46Z", "type": "commit"}, {"oid": "1bb6b88cf846d49810428245fa54f17044a396d9", "url": "https://github.com/uyuni-project/uyuni/commit/1bb6b88cf846d49810428245fa54f17044a396d9", "message": "reposync speedup: use execute_values for INSERTS of generic tables\n\nexecutemany() is replaced with a fast execution helper, in particular\nexecute_values() which benchmarks better than execute_batch when it\nis applicable.\n\n\"The current implementation of executemany() is (using an extremely\ncharitable understatement) not particularly performing. These functions\ncan be used to speed up the repeated execution of a statement against a\nset of parameters. By reducing the number of server roundtrips the\nperformance can be orders of magnitude better than using executemany().\"\n\nhttps://www.psycopg.org/docs/extras.html#fast-exec", "committedDate": "2020-04-25T12:27:46Z", "type": "commit"}, {"oid": "e3774a4ab160e01fa44bad9614b3fa6e86e48140", "url": "https://github.com/uyuni-project/uyuni/commit/e3774a4ab160e01fa44bad9614b3fa6e86e48140", "message": "refactoring: avoid chunking in executeStatement\n\nexecutemany implements that already via psycopg2's execute_batch.", "committedDate": "2020-04-25T12:27:46Z", "type": "commit"}, {"oid": "9e4251a81a7d7c69f15774a133891ccc00f0f641", "url": "https://github.com/uyuni-project/uyuni/commit/9e4251a81a7d7c69f15774a133891ccc00f0f641", "message": "refactoring: kill execute_bulk\n\nexecutemany implements chunking already via psycopg2's execute_batch.", "committedDate": "2020-04-25T12:27:46Z", "type": "commit"}, {"oid": "9e4251a81a7d7c69f15774a133891ccc00f0f641", "url": "https://github.com/uyuni-project/uyuni/commit/9e4251a81a7d7c69f15774a133891ccc00f0f641", "message": "refactoring: kill execute_bulk\n\nexecutemany implements chunking already via psycopg2's execute_batch.", "committedDate": "2020-04-25T12:27:46Z", "type": "forcePushed"}, {"oid": "0d702cd75cd1759abaeadce38e4820d1d95de2be", "url": "https://github.com/uyuni-project/uyuni/commit/0d702cd75cd1759abaeadce38e4820d1d95de2be", "message": "backend: require newer psycopg2\n\nRequirement comes from the new fetch_result parameter added to\nexecute_values:\n\nhttps://github.com/psycopg/psycopg2/commit/9a8d7d5a6ad5f24e1cbc529e98dd61ad9424b9ed", "committedDate": "2020-04-25T12:51:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjU1MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2162#discussion_r415056551", "bodyText": "Is the _ underscore in the page_size value a typo?", "author": "mcalmer", "createdAt": "2020-04-25T12:49:32Z", "path": "backend/server/importlib/backendLib.py", "diffHunk": "@@ -432,31 +432,27 @@ class TableInsert(TableUpdate):\n \n     def __init__(self, table, dbmodule):\n         TableUpdate.__init__(self, table, dbmodule)\n-        self.queryTemplate = \"insert into %s (%s) values (%s)\"\n-        self.count = 1000\n+        self.queryTemplate = \"insert into %s (%s) values %%s\"\n \n         self.insert_fields = self.pks + self.otherfields + self.blob_fields\n-        self.insert_values = [':%s' % x for x in self.pks + self.otherfields + self.blob_fields]\n \n     def _buildQuery(self, key):\n-        q = self.queryTemplate % (self.table.name,\n-                                  ', '.join(self.insert_fields),\n-                                  ', '.join(self.insert_values))\n+        q = self.queryTemplate % (self.table.name, ', '.join(self.insert_fields))\n         return q\n \n     def query(self, values):\n         if self.blob_fields:\n-            chunksize = 1\n             blob_map = {}\n             for f in self.blob_fields:\n                 blob_map[f] = f\n         else:\n-            chunksize = self.count\n             blob_map = None\n \n         # Do the insert\n         statement = self._getCachedQuery(None, blob_map=blob_map)\n-        executeStatement(statement, values, chunksize)\n+        l = len(values[self.insert_fields[0]])\n+        value_list = [[values[f][i] for f in self.insert_fields] for i in range(l)]\n+        statement.execute_values(self._buildQuery(None), value_list, fetch=False, page_size=10_000)", "originalCommit": "1bb6b88cf846d49810428245fa54f17044a396d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NzMxOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2162#discussion_r415057319", "bodyText": "No, it's just a Python big-number legibility facility:\nhttps://www.python.org/dev/peps/pep-0515/", "author": "moio", "createdAt": "2020-04-25T12:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1ODY2NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2162#discussion_r415058664", "bodyText": "oh :-)", "author": "mcalmer", "createdAt": "2020-04-25T13:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjU1MQ=="}], "type": "inlineReview"}]}