{"pr_number": 1868, "pr_title": "CLM: Module filters for RHEL modular repository support", "pr_createdAt": "2020-02-05T14:27:13Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/1868", "timeline": [{"oid": "b37aafeddc2d2e12a7c6f84d813104fb99a5b3f4", "url": "https://github.com/uyuni-project/uyuni/commit/b37aafeddc2d2e12a7c6f84d813104fb99a5b3f4", "message": "Implement type-specific UI for AppStream filters", "committedDate": "2020-02-05T14:47:53Z", "type": "forcePushed"}, {"oid": "45eb680aeb86c37f69393c2e6223082a9cb1b7f6", "url": "https://github.com/uyuni-project/uyuni/commit/45eb680aeb86c37f69393c2e6223082a9cb1b7f6", "message": "Implement type-specific UI for AppStream filters", "committedDate": "2020-02-05T15:39:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NDk4Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r375574987", "bodyText": "why to call this if the return is not used?", "author": "mcalmer", "createdAt": "2020-02-05T23:57:15Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/PackageFilter.java", "diffHunk": "@@ -61,7 +60,10 @@ public boolean test(Package pack) {\n             case \"nevr\":\n                 return type.cast(pack.getNameEvr());\n             case \"nevra\":\n-                return type.cast(pack.getNameEvra());\n+                pack.getNameEvra();", "originalCommit": "45eb680aeb86c37f69393c2e6223082a9cb1b7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyMzcwNg==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377123706", "bodyText": "Oops, that line shouldn't be there.", "author": "cbbayburt", "createdAt": "2020-02-10T15:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NDk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjM0NA==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r375576344", "bodyText": "this(null) : is this something special I do not know?", "author": "mcalmer", "createdAt": "2020-02-06T00:02:17Z", "path": "java/code/src/com/redhat/rhn/manager/contentmgmt/ContentManager.java", "diffHunk": "@@ -81,9 +85,23 @@\n public class ContentManager {\n \n     private static final String DELIMITER = \"-\";\n+    private static final Logger LOG = Logger.getLogger(ContentManager.class);\n+    private ModulemdApi modulemdApi;\n \n-    // forbid instantiation\n-    private ContentManager() { }\n+    /**\n+     * Initialize a new instance\n+     */\n+    public ContentManager() {\n+        this(null);", "originalCommit": "45eb680aeb86c37f69393c2e6223082a9cb1b7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEyNzM1OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377127359", "bodyText": "It just calls the second constructor with a null as the modulemdApi parameter.\nSince the initialization is in the second one, I just chained constructors.", "author": "cbbayburt", "createdAt": "2020-02-10T15:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5MzA2MA==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377193060", "bodyText": "ok", "author": "mcalmer", "createdAt": "2020-02-10T17:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg4NzIzOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r375887239", "bodyText": "I gave it a try and if I just enter a fake name without any : in the value, it breaks the filters list page (it does not show anything but the error page) because it cannot return and Array of 3 values. We need to make sure the field is populated with valid values.", "author": "ncounter", "createdAt": "2020-02-06T15:05:22Z", "path": "web/html/src/manager/content-management/list-filters/filter.utils.js", "diffHunk": "@@ -126,6 +129,12 @@ export function mapResponseToFilterForm(filtersResponse: Array<FilterServerType>\n         filterForm.release = release;\n         filterForm.architecture = architecture;\n       }\n+    } else if(filterResponse.criteriaKey === clmFilterOptions.STREAM.key) {\n+      if(!_isEmpty(filterResponse.criteriaValue)) {\n+        const [, module, stream] = filterResponse.criteriaValue.match(/(.*)(?::(.*))/);", "originalCommit": "45eb680aeb86c37f69393c2e6223082a9cb1b7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5MDQwNw==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r375890407", "bodyText": "Looks like the missing : scenario can be reproduced bycreating a module filter with an empty stream (which should be valid iiuc).", "author": "hustodemon", "createdAt": "2020-02-06T15:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg4NzIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5ODgyMw==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377198823", "bodyText": "Right, sorry, my bad \ud83d\ude2c\nThis part was not unit tested. Fixed and added tests now.", "author": "cbbayburt", "createdAt": "2020-02-10T17:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg4NzIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNTQyMA==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377535420", "bodyText": "I'm wondering: how is the mgr-libmod utility going to be distributed? Is this going to be a python script in the SUMA codebase, or a separate RPM? This must be clarified before releasing.", "author": "hustodemon", "createdAt": "2020-02-11T09:59:59Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.modulemd;\n+\n+import com.google.gson.FieldNamingPolicy;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import com.redhat.rhn.common.conf.Config;\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.domain.channel.Channel;\n+import com.redhat.rhn.domain.channel.Modules;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * modulemd Python API service\n+ */\n+public class ModulemdApi {\n+\n+    private static final String MOUNT_POINT_PATH = Config.get().getString(ConfigDefaults.MOUNT_POINT);\n+    private static final String API_EXE = \"mgr-libmod\";", "originalCommit": "145ef8f08a11b03021a6a87047d1f1cdb83bdad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1Nzk2MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377557961", "bodyText": "It's going to be a new standalone package. I'll add it as a dependency to the spacewalk-java spec file.", "author": "cbbayburt", "createdAt": "2020-02-11T10:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNTQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNTgxOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377535819", "bodyText": "Is this method used?", "author": "hustodemon", "createdAt": "2020-02-11T10:00:54Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.modulemd;\n+\n+import com.google.gson.FieldNamingPolicy;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import com.redhat.rhn.common.conf.Config;\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.domain.channel.Channel;\n+import com.redhat.rhn.domain.channel.Modules;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * modulemd Python API service\n+ */\n+public class ModulemdApi {\n+\n+    private static final String MOUNT_POINT_PATH = Config.get().getString(ConfigDefaults.MOUNT_POINT);\n+    private static final String API_EXE = \"mgr-libmod\";\n+    public static final Gson GSON =\n+            new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();\n+\n+    /**\n+     * Get all defined modules in a channel's metadata\n+     *\n+     * @param channel the modular channel\n+     * @return a map of module name to module/stream objects\n+     */\n+    public Map<String, List<Module>> getAllModulesInChannel(Channel channel) {", "originalCommit": "145ef8f08a11b03021a6a87047d1f1cdb83bdad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1NzMxOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377557319", "bodyText": "It's just a placeholder for one of the next steps mentioned here: SUSE/spacewalk#10098\nThe corresponding mgr-libmod endpoint is already implemented.", "author": "cbbayburt", "createdAt": "2020-02-11T10:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNTgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNzk4Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377537983", "bodyText": "Just a question: Is stripping the metadata from the \"target\" channel something that needs to be done (to overcome some errors), or is it just for clarity (cloned channels shouldn't be modular).", "author": "hustodemon", "createdAt": "2020-02-11T10:05:27Z", "path": "java/code/src/com/redhat/rhn/manager/contentmgmt/ContentManager.java", "diffHunk": "@@ -642,9 +660,38 @@ private static void alignEnvironment(ContentEnvironment env, Channel baseChannel\n                 .sorted((t1, t2) -> Boolean.compare(t1.getChannel().isBaseChannel(), t2.getChannel().isBaseChannel()))\n                 .forEach(toRemove -> ContentProjectFactory.purgeTarget(toRemove));\n \n-        // align the contents\n-        newSrcTgtPairs.forEach(srcTgt ->\n-                alignEnvironmentTarget(srcTgt.getLeft(), srcTgt.getRight(), filters, async, user));\n+        // Strip modules metadata from the modular repositories if any modular filter is present", "originalCommit": "145ef8f08a11b03021a6a87047d1f1cdb83bdad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1OTE3Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377559176", "bodyText": "I'd say it's for both. Since we're filtering out the unselected modules, the existing metadata is not valid and would confuse the clients. This is to prevent dnf from treating the channel as modular.", "author": "cbbayburt", "createdAt": "2020-02-11T10:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNzk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0MDkzNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377540935", "bodyText": "Is DEBUG enough here? I think the log threshold is set to INFO in regular setups - i.e. this message would be silenced. With my current understanding of the PR, this line shouldn't get hit on a correctly set-up project, so I'd be in favor of using at least INFO here.", "author": "hustodemon", "createdAt": "2020-02-11T10:11:07Z", "path": "java/code/src/com/redhat/rhn/manager/contentmgmt/ContentManager.java", "diffHunk": "@@ -642,9 +660,38 @@ private static void alignEnvironment(ContentEnvironment env, Channel baseChannel\n                 .sorted((t1, t2) -> Boolean.compare(t1.getChannel().isBaseChannel(), t2.getChannel().isBaseChannel()))\n                 .forEach(toRemove -> ContentProjectFactory.purgeTarget(toRemove));\n \n-        // align the contents\n-        newSrcTgtPairs.forEach(srcTgt ->\n-                alignEnvironmentTarget(srcTgt.getLeft(), srcTgt.getRight(), filters, async, user));\n+        // Strip modules metadata from the modular repositories if any modular filter is present\n+        if (filters.stream().anyMatch(f -> f.asModuleFilter().isPresent())) {\n+            newSrcTgtPairs.stream().map(p -> p.getRight().getChannel()).forEach(this::stripModuleMetadata);\n+        }\n+\n+        // Resolve filters for dependencies\n+        try {\n+            DependencyResolver resolver = new DependencyResolver(env.getContentProject(), this.modulemdApi);\n+            List<ContentFilter> resolvedFilters = resolver.resolveFilters(filters);\n+\n+            // align the contents\n+            newSrcTgtPairs.forEach(srcTgt ->\n+                    alignEnvironmentTarget(srcTgt.getLeft(), srcTgt.getRight(), resolvedFilters, async, user));\n+        }\n+        catch (DependencyResolutionException e) {\n+            if (e.getCause() instanceof ModuleNotFoundException) {\n+                ModuleNotFoundException cause = (ModuleNotFoundException) e.getCause();\n+                LOG.debug(String.format(\"Module '%s:%s' not found.\", cause.getModule().getName(),", "originalCommit": "145ef8f08a11b03021a6a87047d1f1cdb83bdad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcwOTQ4Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377709483", "bodyText": "A more sophisticated error handling is also one of the next steps for the epic (SUSE/spacewalk#10099), but I agree, I'm changing to INFO for now.", "author": "cbbayburt", "createdAt": "2020-02-11T15:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0MDkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0MjQwNA==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377542404", "bodyText": "I'm not sure getting all sources of a project in this situation is the right thing. I think we should filter out DETACHED sources, i.e. the sources flagged for removal after the project build. We had a similar situation in past for filters (they also support \"soft-delete\" mechanism) and for this purpose, we implemented a helper method ContentProject.getActiveFilters. Maybe we need something similar for the sources.", "author": "hustodemon", "createdAt": "2020-02-11T10:13:59Z", "path": "java/code/src/com/redhat/rhn/manager/contentmgmt/DependencyResolver.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.manager.contentmgmt;\n+\n+import com.redhat.rhn.domain.channel.Channel;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ConflictingStreamsException;\n+import com.redhat.rhn.domain.contentmgmt.ContentFilter;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.FilterCriteria;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.Module;\n+import com.redhat.rhn.domain.contentmgmt.ModuleFilter;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModuleNotFoundException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulemdApi;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulePackagesResponse;\n+import com.redhat.rhn.domain.contentmgmt.PackageFilter;\n+import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import static com.suse.utils.Opt.stream;\n+import static java.util.stream.Collectors.toList;\n+\n+/**\n+ * Resolves dependencies in a content management project\n+ *\n+ * At the moment, dependency resolution only works with module filters and modular dependencies. This class can be\n+ * enhanced to resolve package dependencies as well.\n+ *\n+ * The resolution process takes the complete list of filters as input and queries the libmodulemd API with all the\n+ * module streams in filters. A module filter represents a selected module in one of the modular sources (filter rules\n+ * have no effect for module filters). The API returns all the related packages that must be allowed/denied as per\n+ * current module selection. In return, all module filters are translated into a collection of package filters by the\n+ * following rules:\n+ *\n+ * 1. All modular packages are denied (deny by nevra)\n+ * 2. For each package publicly provided by a module, all the packages from other sources with the same package name\n+ *    are denied. As a result, a specific package is only provided exclusively by the module to prevent any conflicts\n+ *    (deny by name).\n+ * 3. Modular packages from selected modules are overridden to be allowed (allow by nevra)\n+ *\n+ * This algorithm only runs if there are any module filters in the input list. Otherwise the process is bypassed and no\n+ * filter transformation is done.\n+ *\n+ * TODO: Resolve deny-allow override problem:\n+ * One problem with this approach is that the allow filters will override any further deny filters defined by the user\n+ * on those packages. We need to figure out if this is an important case and if so, come up with a different solution.\n+ *\n+ * @see com.redhat.rhn.manager.contentmgmt.test.DependencyResolverTest#testModuleFiltersForeignPackagesSelected\n+ * @see com.redhat.rhn.manager.contentmgmt.test.DependencyResolverTest#testModuleFiltersForeignPackagesConflicting\n+ *\n+ */\n+public class DependencyResolver {\n+\n+    private ContentProject project;\n+    private ModulemdApi modulemdApi;\n+\n+    /**\n+     * Initialize a new instance with a content project and a {@link ModulemdApi} instance\n+     *\n+     * @param projectIn the content project\n+     * @param modulemdApiIn the libmodulemd API instance\n+     */\n+    public DependencyResolver(ContentProject projectIn, ModulemdApi modulemdApiIn) {\n+        this.project = projectIn;\n+        this.modulemdApi = Objects.requireNonNullElseGet(modulemdApiIn, ModulemdApi::new);\n+    }\n+\n+    /**\n+     * Enhances the list of filters with dependency filters by looking up the dependencies in the sources\n+     *\n+     * @param filters the complete list of filters to be included in the project\n+     * @return the updated list of filters\n+     * @throws DependencyResolutionException if dependency resolution fails for some reason\n+     */\n+    public List<ContentFilter> resolveFilters(List<ContentFilter> filters) throws DependencyResolutionException {\n+\n+        List<ModuleFilter> moduleFilters = filters.stream()\n+                .flatMap(f -> stream((Optional<ModuleFilter>) f.asModuleFilter()))\n+                .collect(toList());\n+\n+        List<ContentFilter> updatedFilters = new ArrayList<>(filters);\n+\n+        // Transform module filters to package filters\n+        // If no module filters are attached, no modular package should be filtered out\n+        if (moduleFilters.size() > 0) {\n+            List<PackageFilter> modulePkgFilters = resolveModularDependencies(moduleFilters);\n+            updatedFilters.addAll(modulePkgFilters);\n+            updatedFilters.removeAll(moduleFilters);\n+        }\n+\n+        // Any other dependency filters (e.g. package dependencies) can be appended here\n+        // TODO: This module can also be called at setup time to provide feedback using DependencyResolutionException\n+\n+        return updatedFilters;\n+    }\n+\n+    /**\n+     * Resolves modular dependencies and convert all module filters to package filters\n+     *\n+     * @param filters the list of module filters to be included in the project\n+     * @return a list of package filters derived from the module filters, including dependencies\n+     */\n+    private List<PackageFilter> resolveModularDependencies(List<ModuleFilter> filters)\n+            throws DependencyResolutionException {\n+        List<Channel> sources = this.getSources();\n+        List<Module> modules = filters.stream().map(ModuleFilter::getModule).collect(toList());\n+        ModulePackagesResponse modPkgList;\n+        try {\n+            modPkgList = modulemdApi.getPackagesForModules(sources, modules);\n+        }\n+        catch (ConflictingStreamsException | ModuleNotFoundException e) {\n+            throw new DependencyResolutionException(\"Failed to resolve modular dependencies.\", e);\n+        }\n+\n+        // 1. Modular packages to be denied\n+        Stream<PackageFilter> pkgDenyFilters = modulemdApi.getAllPackages(sources).stream()\n+                .map((String nevra) -> initFilterFromPackageNevra(nevra, ContentFilter.Rule.DENY));\n+\n+        // 2. Non-modular packages to be denied by name\n+        Stream<PackageFilter> providedRpmApiFilters = modPkgList.getRpmApis().stream().map(\n+                DependencyResolver::initFilterFromPackageName);\n+\n+        // 3. Modular packages to be allowed\n+        Stream<PackageFilter> pkgAllowFilters = modPkgList.getRpmPackages().stream()\n+                .map((String nevra) -> initFilterFromPackageNevra(nevra, ContentFilter.Rule.ALLOW));\n+\n+        // Concatenate filter streams into a list\n+        return Stream.of(pkgDenyFilters, providedRpmApiFilters, pkgAllowFilters).flatMap(s -> s).collect(toList());\n+    }\n+\n+\n+    private static PackageFilter initFilterFromPackageNevra(String nevra, ContentFilter.Rule rule) {\n+        FilterCriteria criteria = new FilterCriteria(FilterCriteria.Matcher.EQUALS, \"nevra\", nevra);\n+        PackageFilter filter = new PackageFilter();\n+        filter.setRule(rule);\n+        filter.setCriteria(criteria);\n+        return filter;\n+    }\n+\n+    private static PackageFilter initFilterFromPackageName(String name) {\n+        FilterCriteria criteria = new FilterCriteria(FilterCriteria.Matcher.MATCHES, \"name\", name);\n+        PackageFilter filter = new PackageFilter();\n+        filter.setRule(ContentFilter.Rule.DENY);\n+        filter.setCriteria(criteria);\n+        return filter;\n+    }\n+\n+    /**\n+     * Get a list of modular channels among the sources\n+     * @return the list of modular channels\n+     */\n+    private List<Channel> getSources() {\n+        return project.getSources().stream()", "originalCommit": "145ef8f08a11b03021a6a87047d1f1cdb83bdad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzAzMA==", "url": "https://github.com/uyuni-project/uyuni/pull/1868#discussion_r377723030", "bodyText": "That's a good point. I added ContentProject.getActiveSources, filtering out the detached ones.", "author": "cbbayburt", "createdAt": "2020-02-11T15:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0MjQwNA=="}], "type": "inlineReview"}, {"oid": "c01c27496f2d443267c397ff92075cd15d36fe3c", "url": "https://github.com/uyuni-project/uyuni/commit/c01c27496f2d443267c397ff92075cd15d36fe3c", "message": "fixup! Implement module filtering logic and dependency resolution", "committedDate": "2020-02-11T15:58:07Z", "type": "forcePushed"}, {"oid": "289e0a2f661a13ec4b2cd15791f7deeae523abc6", "url": "https://github.com/uyuni-project/uyuni/commit/289e0a2f661a13ec4b2cd15791f7deeae523abc6", "message": "Add module stream filter type", "committedDate": "2020-02-12T14:49:51Z", "type": "commit"}, {"oid": "369e1cabd24a59937c2b845031fda4fde2668680", "url": "https://github.com/uyuni-project/uyuni/commit/369e1cabd24a59937c2b845031fda4fde2668680", "message": "Implement module filtering logic and dependency resolution", "committedDate": "2020-02-12T14:49:52Z", "type": "commit"}, {"oid": "a49e5c1024ee2209a3c70b62b11f5f70a3a5739b", "url": "https://github.com/uyuni-project/uyuni/commit/a49e5c1024ee2209a3c70b62b11f5f70a3a5739b", "message": "Strip module metadata from modular repositories", "committedDate": "2020-02-12T14:49:52Z", "type": "commit"}, {"oid": "a338fe0aaae7b0ae59b76c2004cf307a47f5a261", "url": "https://github.com/uyuni-project/uyuni/commit/a338fe0aaae7b0ae59b76c2004cf307a47f5a261", "message": "Convert ContentManager into a non-static class for easier testing", "committedDate": "2020-02-12T14:49:52Z", "type": "commit"}, {"oid": "0a8da4bffedd98f38bb3b7d94b22a9d5d5e7334d", "url": "https://github.com/uyuni-project/uyuni/commit/0a8da4bffedd98f38bb3b7d94b22a9d5d5e7334d", "message": "Add ContentManager test scenarios with module filters", "committedDate": "2020-02-12T14:49:53Z", "type": "commit"}, {"oid": "99e64f16641a74c7d103466e1fa7ef7baccccb5b", "url": "https://github.com/uyuni-project/uyuni/commit/99e64f16641a74c7d103466e1fa7ef7baccccb5b", "message": "Implement type-specific UI for AppStream filters", "committedDate": "2020-02-12T14:49:53Z", "type": "commit"}, {"oid": "99e64f16641a74c7d103466e1fa7ef7baccccb5b", "url": "https://github.com/uyuni-project/uyuni/commit/99e64f16641a74c7d103466e1fa7ef7baccccb5b", "message": "Implement type-specific UI for AppStream filters", "committedDate": "2020-02-12T14:49:53Z", "type": "forcePushed"}]}