{"pr_number": 2372, "pr_title": "Maintenance schedules system assignment UI", "pr_createdAt": "2020-06-30T19:28:14Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2372", "timeline": [{"oid": "0bfb6f90105d53d811416bc2645b5ef182759fe5", "url": "https://github.com/uyuni-project/uyuni/commit/0bfb6f90105d53d811416bc2645b5ef182759fe5", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-02T22:23:29Z", "type": "forcePushed"}, {"oid": "3af64cffde8822641a2f53b0138a431b78983e85", "url": "https://github.com/uyuni-project/uyuni/commit/3af64cffde8822641a2f53b0138a431b78983e85", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-02T22:49:27Z", "type": "forcePushed"}, {"oid": "34654eddf4266a4710a3d729b1f993ca324c93ad", "url": "https://github.com/uyuni-project/uyuni/commit/34654eddf4266a4710a3d729b1f993ca324c93ad", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-03T00:01:18Z", "type": "forcePushed"}, {"oid": "1e3a88b51504ad877854d8eeac7a23e3eb66ed85", "url": "https://github.com/uyuni-project/uyuni/commit/1e3a88b51504ad877854d8eeac7a23e3eb66ed85", "message": "fixup! Add maintenance schedule form controls to system properties edit page", "committedDate": "2020-07-06T16:46:50Z", "type": "forcePushed"}, {"oid": "4bd7aedfa3dd11b39022b5709d7f567c6e69107d", "url": "https://github.com/uyuni-project/uyuni/commit/4bd7aedfa3dd11b39022b5709d7f567c6e69107d", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-06T16:48:45Z", "type": "forcePushed"}, {"oid": "19737707dddee6f7f983d1c7ff21e46084380dde", "url": "https://github.com/uyuni-project/uyuni/commit/19737707dddee6f7f983d1c7ff21e46084380dde", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-07T11:13:43Z", "type": "forcePushed"}, {"oid": "cffde60a4ac510bde5186882e23122c2c48b5fb9", "url": "https://github.com/uyuni-project/uyuni/commit/cffde60a4ac510bde5186882e23122c2c48b5fb9", "message": "Remove Hibernate rollback when reschedule strategies fail", "committedDate": "2020-07-08T18:17:21Z", "type": "forcePushed"}, {"oid": "1975f5ef71a23d3d058f8b19ed704e2a2f9c698b", "url": "https://github.com/uyuni-project/uyuni/commit/1975f5ef71a23d3d058f8b19ed704e2a2f9c698b", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-08T18:30:59Z", "type": "forcePushed"}, {"oid": "3260e542a9aebef65ef62a035cb58ddcc5ee0468", "url": "https://github.com/uyuni-project/uyuni/commit/3260e542a9aebef65ef62a035cb58ddcc5ee0468", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-09T11:29:33Z", "type": "forcePushed"}, {"oid": "1dd053988f6b0387b7f4798426b6dbf5a927566a", "url": "https://github.com/uyuni-project/uyuni/commit/1dd053988f6b0387b7f4798426b6dbf5a927566a", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-09T12:51:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MTg1MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452061850", "bodyText": "Instead of propagating the error message directly, I would prefer to have a custom message that can be translated (I just realized I need to adapt this in one place as well)", "author": "parlt91", "createdAt": "2020-07-09T08:46:43Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -233,6 +240,59 @@ public static String deleteSchedule(Request request, Response response, User use\n         return json(response, ResultJson.success());\n     }\n \n+    private class SystemAssignmentRequest {\n+        private List<Long> systemIds;\n+        private boolean cancelActions;\n+    }\n+\n+    /**\n+     * Assign a schedule to systems\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String assignSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        SystemAssignmentRequest reqData = GSON.fromJson(request.body(), SystemAssignmentRequest.class);\n+        List<Long> systemIds = reqData.systemIds;\n+\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MM.lookupScheduleByUserAndId(user, scheduleId).ifPresentOrElse(\n+                schedule -> {\n+                    try {\n+                        MM.assignScheduleToSystems(user, schedule, new HashSet<>(systemIds), reqData.cancelActions);\n+                    }\n+                    catch (LookupException | IllegalArgumentException e) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));", "originalCommit": "e5baf9023bb2b48acdc8d6ffa1d8f60b2c6e731a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjAxNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452062015", "bodyText": "Same here", "author": "parlt91", "createdAt": "2020-07-09T08:46:58Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -233,6 +240,59 @@ public static String deleteSchedule(Request request, Response response, User use\n         return json(response, ResultJson.success());\n     }\n \n+    private class SystemAssignmentRequest {\n+        private List<Long> systemIds;\n+        private boolean cancelActions;\n+    }\n+\n+    /**\n+     * Assign a schedule to systems\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String assignSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        SystemAssignmentRequest reqData = GSON.fromJson(request.body(), SystemAssignmentRequest.class);\n+        List<Long> systemIds = reqData.systemIds;\n+\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MM.lookupScheduleByUserAndId(user, scheduleId).ifPresentOrElse(\n+                schedule -> {\n+                    try {\n+                        MM.assignScheduleToSystems(user, schedule, new HashSet<>(systemIds), reqData.cancelActions);\n+                    }\n+                    catch (LookupException | IllegalArgumentException e) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));\n+                    }\n+                },\n+                () -> Spark.halt(HttpStatus.SC_NOT_FOUND)\n+        );\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Unassign a schedule from systems\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String unassignSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        List<Long> systemIds = Arrays.asList(GSON.fromJson(request.body(), Long[].class));\n+        try {\n+            MM.retractScheduleFromSystems(user, new HashSet<>(systemIds));\n+        }\n+        catch (LookupException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));", "originalCommit": "e5baf9023bb2b48acdc8d6ffa1d8f60b2c6e731a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTE2Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452205167", "bodyText": "I wonder whether we should move this one to the SsmController instead. At least that's where I would expect this to be found.", "author": "parlt91", "createdAt": "2020-07-09T13:10:49Z", "path": "java/code/src/com/suse/manager/webui/controllers/maintenance/MaintenanceScheduleController.java", "diffHunk": "@@ -115,6 +118,22 @@ public static ModelAndView maintenanceSchedules(Request request, Response respon\n         return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n     }\n \n+    /**\n+     * Handler for the SSM schedule assignment page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView ssmSchedules(Request request, Response response, User user) {", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5NTcyOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455695729", "bodyText": "SSM is generally structured as a collection of operations from various domains and every domain adds it's own functionality from it's own namespace. For example: ssm/highstate is served from MinionController.", "author": "cbbayburt", "createdAt": "2020-07-16T10:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwNTE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIwOTg5Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452209897", "bodyText": "Same thought here maybe move the code in maintenance/ssm to systems/ssm? On the other hand I am not against having everything maintenance window related in maintenance/. I'd like to hear some of your opinions about this.", "author": "parlt91", "createdAt": "2020-07-09T13:18:00Z", "path": "web/html/src/manager/maintenance/ssm/schedule-picker.js", "diffHunk": "@@ -0,0 +1,148 @@\n+// @flow\n+\n+import React, {useState, useEffect, useContext} from \"react\";\n+\n+import {AsyncButton} from \"components/buttons\";\n+import {ModalButton} from \"components/dialog/ModalButton\";\n+import {Form, FormContext} from \"components/input/Form\";\n+import {Select} from \"components/input/Select\";\n+import {Check} from \"components/input/Check\";\n+import {Utils as MessagesUtils} from \"components/messages\";\n+\n+import CancelActionsDialog from \"../shared/cancel-actions-dialog\";\n+\n+import type {Node} from 'react';\n+import type {MessageType} from \"components/messages\";\n+\n+const Network = require(\"utils/network\");\n+\n+type ScheduleType = {\n+  scheduleId: number,\n+  scheduleName: string\n+};\n+\n+type WithMaintenanceSchedulesProps = {\n+  systems: string[],\n+  onMessage: (messages: MessageType[]) => void,\n+  children: (\n+    schedules: ScheduleType[],\n+    onAssign: (scheduleId: number, cancelActions: boolean) => Promise<any>\n+  ) => Node\n+};\n+\n+export function WithMaintenanceSchedules(props: WithMaintenanceSchedulesProps) {", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYxMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452810612", "bodyText": "Does this not affect existing usages in a bad way?", "author": "hustodemon", "createdAt": "2020-07-10T12:25:55Z", "path": "web/html/src/components/buttons.js", "diffHunk": "@@ -65,7 +65,7 @@ export class AsyncButton extends _ButtonBase {\n     let style = \"btn \";\n     switch (this.state.value) {\n         case \"failure\": style += \"btn-danger\"; break;\n-        case \"waiting\": style += \"btn-default\"; break;\n+        case \"waiting\":", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NzMzMQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452967331", "bodyText": "If any, it'd fix more cases.\nInitially, this was used only with \"default\" style buttons so we didn't hit the bug.", "author": "cbbayburt", "createdAt": "2020-07-10T17:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNTU3Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r454125577", "bodyText": "ah, good! \ud83d\ude04", "author": "hustodemon", "createdAt": "2020-07-14T06:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTEyMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452811122", "bodyText": "The line 15 suggests, that this prop is optional. Shouldn't this be reflected in the props as well?", "author": "hustodemon", "createdAt": "2020-07-10T12:27:02Z", "path": "web/html/src/components/dialog/DangerDialog.js", "diffHunk": "@@ -72,4 +73,5 @@ DangerDialog.propTypes = {\n     onConfirmAsync: PropTypes.func,\n     submitText: PropTypes.string,\n     submitIcon: PropTypes.string,\n+    btnClass: PropTypes.string", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NjAwMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452966000", "bodyText": "All these declarations are optional. With PropTypes, required ones are declared like:\nbtnClass: PropTypes.string.isRequired\n\nI know, weird \ud83d\ude1c\nThese older components need a Flow refactoring still.", "author": "cbbayburt", "createdAt": "2020-07-10T17:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNTg4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r454125885", "bodyText": "I see. I should study react a bit. Thanks for explaining.", "author": "hustodemon", "createdAt": "2020-07-14T06:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MjcxNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r452852714", "bodyText": "Nit: Maybe debug would be more fitting in these 3 scenarios?", "author": "hustodemon", "createdAt": "2020-07-10T13:44:44Z", "path": "java/code/src/com/redhat/rhn/frontend/action/systems/sdc/SystemDetailsEditAction.java", "diffHunk": "@@ -167,6 +175,31 @@ else if (selectedEnt.equals(UNENTITLE)) {\n         s.getLocation().setRoom(daForm.getString(ROOM));\n         s.getLocation().setRack(daForm.getString(RACK));\n \n+        // Assign maintenance schedule\n+        Long scheduleId = (Long) daForm.get(MAINTENANCE_SCHEDULE);\n+\n+        if (scheduleId != null && scheduleId != 0) {\n+            // Assign schedule\n+            MaintenanceSchedule schedule = maintenanceManager.lookupScheduleByUserAndId(user, scheduleId).get();\n+            boolean cancelAffected = Boolean.TRUE.equals(daForm.get(MAINTENANCE_CANCEL_AFFECTED));\n+            try {\n+                maintenanceManager.assignScheduleToSystems(user, schedule, Collections.singleton(s.getId()),\n+                        cancelAffected);\n+                log.info(String.format(\"System %s assigned to schedule %s.\", s.getId(), schedule.getName()));", "originalCommit": "bfe79d976f4f18e851329a28f21e6aea08fc28ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1OTUwNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455359505", "bodyText": "Just  to make sure: no restriction for all the type of user right?", "author": "ncounter", "createdAt": "2020-07-15T21:22:00Z", "path": "java/code/webapp/WEB-INF/pages/ssm/ssmindex.jsp", "diffHunk": "@@ -173,6 +173,7 @@\n                         <rhn:require acl=\"all_systems_in_set_have_feature(ftr_package_refresh)\">\n                             <li><bean:message key=\"ssm.overview.misc.packageprofiles\"/></li>\n                         </rhn:require>\n+                        <li><bean:message key=\"ssm.overview.schedule.assign\"/></li>", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNjk1MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455636951", "bodyText": "IIUC, yes. But as the authors of the RFC, maybe @mcalmer or @hustodemon have some other opinion?", "author": "cbbayburt", "createdAt": "2020-07-16T09:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1OTUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDI4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455360285", "bodyText": "Woah, sounds new to me. What's the scenario did you experienced it?", "author": "ncounter", "createdAt": "2020-07-15T21:23:43Z", "path": "web/html/src/core/spa/spa-renderer.js", "diffHunk": "@@ -26,7 +26,10 @@ function hasReactApp() {\n   return window.pageRenderers.spa.reactAppsName.length > 0;\n }\n \n-function renderGlobalReact(element: ReactElement<any>, container: Element) {\n+function renderGlobalReact(element: ReactElement<any>, container: ?Element) {\n+  if (container == null) {", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzOTY3MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455639670", "bodyText": "We don't hit that case in real-life, but theoretically, this is usually called with document.getElementById(). getElementById can return null if the id does not exist and Flow knows about this. So basically, this is to satisfy Flow. I made the check in a single place here so we won't have to check wherever we call getElementById.", "author": "cbbayburt", "createdAt": "2020-07-16T09:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDY2MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455664660", "bodyText": "Awesome, thanks for the explanation.", "author": "ncounter", "createdAt": "2020-07-16T09:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MjY5Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455362692", "bodyText": "Checkstyle: else should go to a new line", "author": "ncounter", "createdAt": "2020-07-15T21:28:33Z", "path": "web/html/src/manager/maintenance/ssm/schedule-picker.js", "diffHunk": "@@ -0,0 +1,148 @@\n+// @flow\n+\n+import React, {useState, useEffect, useContext} from \"react\";\n+\n+import {AsyncButton} from \"components/buttons\";\n+import {ModalButton} from \"components/dialog/ModalButton\";\n+import {Form, FormContext} from \"components/input/Form\";\n+import {Select} from \"components/input/Select\";\n+import {Check} from \"components/input/Check\";\n+import {Utils as MessagesUtils} from \"components/messages\";\n+\n+import CancelActionsDialog from \"../shared/cancel-actions-dialog\";\n+\n+import type {Node} from 'react';\n+import type {MessageType} from \"components/messages\";\n+\n+const Network = require(\"utils/network\");\n+\n+type ScheduleType = {\n+  scheduleId: number,\n+  scheduleName: string\n+};\n+\n+type WithMaintenanceSchedulesProps = {\n+  systems: string[],\n+  onMessage: (messages: MessageType[]) => void,\n+  children: (\n+    schedules: ScheduleType[],\n+    onAssign: (scheduleId: number, cancelActions: boolean) => Promise<any>\n+  ) => Node\n+};\n+\n+export function WithMaintenanceSchedules(props: WithMaintenanceSchedulesProps) {\n+  const [schedules, setSchedules] = useState([]);\n+\n+  const onAssign = (scheduleId: number, cancelActions: boolean): Promise<any> => {\n+    let uri;\n+    let data;\n+    let successMsg;\n+    if (scheduleId === 0) {\n+      uri = \"/rhn/manager/api/maintenance/schedule/unassign\";\n+      successMsg = t(\"Maintenance schedule has been cleared\");\n+      data = props.systems;\n+    } else {", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2NDQzNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455364436", "bodyText": "Is the TODO still something missing? I'd either address it or drop it.", "author": "ncounter", "createdAt": "2020-07-15T21:31:01Z", "path": "web/html/src/manager/maintenance/ssm/system-assignment.js", "diffHunk": "@@ -0,0 +1,40 @@\n+// @flow\n+\n+import React, {useState} from \"react\";\n+import SpaRenderer from \"core/spa/spa-renderer\";\n+\n+import {Messages} from \"components/messages\";\n+import {BootstrapPanel} from \"components/panels/BootstrapPanel\";\n+\n+import {SchedulePickerForm, WithMaintenanceSchedules} from \"./schedule-picker\";\n+\n+function SystemAssignment(props: {systems: string[]}) {\n+  // TODO: Add proper info text", "originalCommit": "3abd5e7e85ac9cc4fef4514c1e507b498ce434d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NTc0NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455645745", "bodyText": "Yes, I need some fancy text to put in here :) I'll take care of it before merging. Suggestions welcome (check out the panel header in the Assignment from SSM screenshot)", "author": "cbbayburt", "createdAt": "2020-07-16T09:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2NDQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2OTIzMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2372#discussion_r455369233", "bodyText": "Maybe better to check first if it is null and then by comparing by schedule_id just for the sake of performance?", "author": "ncounter", "createdAt": "2020-07-15T21:36:04Z", "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/System_queries.xml", "diffHunk": "@@ -2419,6 +2419,17 @@ ORDER BY UPPER(COALESCE(X.SERVER_NAME, '(none)')), X.ID\n   <elaborator name=\"entitlements\" />\n </mode>\n \n+<mode name=\"target_systems_for_maintenance_schedule\" class=\"com.redhat.rhn.frontend.dto.EssentialServerDto\">\n+    <query params=\"user_id, schedule_id\">\n+        SELECT s.id, s.name\n+        FROM rhnServer s JOIN rhnUserServerPerms usp on s.id = usp.server_id\n+        WHERE usp.user_id = :user_id\n+            AND (s.maintenance_schedule_id != :schedule_id", "originalCommit": "1dd053988f6b0387b7f4798426b6dbf5a927566a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "034969bffe7eef78c6340a505bff4f4a014bc721", "url": "https://github.com/uyuni-project/uyuni/commit/034969bffe7eef78c6340a505bff4f4a014bc721", "message": "Change execution order in the 'assignScheduleToSystemWithPendingActions' test", "committedDate": "2020-07-16T11:13:36Z", "type": "commit"}, {"oid": "acc5fb6da54e236aeb0840784fc147b9b92cf768", "url": "https://github.com/uyuni-project/uyuni/commit/acc5fb6da54e236aeb0840784fc147b9b92cf768", "message": "Add option to cancel affected actions when assigning schedules to systems", "committedDate": "2020-07-16T11:13:37Z", "type": "commit"}, {"oid": "49f915529cce85633dc35d233c0728798910539f", "url": "https://github.com/uyuni-project/uyuni/commit/49f915529cce85633dc35d233c0728798910539f", "message": "Add reschedule strategy parameter to the system assignment XMLRPC endpoint", "committedDate": "2020-07-16T11:13:37Z", "type": "commit"}, {"oid": "6a6ff46e861a494bd658fe1d16545ad2def7a28f", "url": "https://github.com/uyuni-project/uyuni/commit/6a6ff46e861a494bd658fe1d16545ad2def7a28f", "message": "API endpoints for assigning maintenance schedules to systems", "committedDate": "2020-07-16T11:16:09Z", "type": "commit"}, {"oid": "076c5a3eb377f15596cb720a86060af7f08a50a4", "url": "https://github.com/uyuni-project/uyuni/commit/076c5a3eb377f15596cb720a86060af7f08a50a4", "message": "Add maintenance schedule assignment page under 'Misc' tab to SSM", "committedDate": "2020-07-16T11:17:59Z", "type": "commit"}, {"oid": "7dea483034f532ed652b20cbbbe763c548f03d98", "url": "https://github.com/uyuni-project/uyuni/commit/7dea483034f532ed652b20cbbbe763c548f03d98", "message": "Show currently assigned maintenance schedule in system properties panel", "committedDate": "2020-07-16T11:18:00Z", "type": "commit"}, {"oid": "a3c0e450312f87e0ff16b5a377d572af1b50d88e", "url": "https://github.com/uyuni-project/uyuni/commit/a3c0e450312f87e0ff16b5a377d572af1b50d88e", "message": "Add maintenance schedule form controls to system properties edit page", "committedDate": "2020-07-16T11:18:00Z", "type": "commit"}, {"oid": "d2ad16d06db90bbef60b454a52b8d1c433575533", "url": "https://github.com/uyuni-project/uyuni/commit/d2ad16d06db90bbef60b454a52b8d1c433575533", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-16T11:38:28Z", "type": "commit"}, {"oid": "d2ad16d06db90bbef60b454a52b8d1c433575533", "url": "https://github.com/uyuni-project/uyuni/commit/d2ad16d06db90bbef60b454a52b8d1c433575533", "message": "Add system assignment tab to maintenance schedule details page", "committedDate": "2020-07-16T11:38:28Z", "type": "forcePushed"}]}