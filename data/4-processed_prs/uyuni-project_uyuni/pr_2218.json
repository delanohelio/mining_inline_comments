{"pr_number": 2218, "pr_title": "Check for maintenance windows when scheduling actions", "pr_createdAt": "2020-05-15T07:51:15Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2218", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTcwMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425645700", "bodyText": "See com/redhat/rhn/frontend/xmlrpc/exception_ranges.txt and enhace it please.\nWe could choose now also smaller numbers, but there was a \"SUSE Exceptions\" rage.\nNot sure if it would be better to take a number from there.", "author": "mcalmer", "createdAt": "2020-05-15T08:26:54Z", "path": "java/code/src/com/suse/manager/maintenance/NotInMaintenanceModeException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.maintenance;\n+\n+import com.redhat.rhn.FaultException;\n+\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An {@link RuntimeException} bearing a set of {@link MaintenanceSchedule}s.\n+ *\n+ * Typically thrown, when scheduling an action at the date that doesn't fit to Maintenance window of\n+ * some systems.\n+ *\n+ * This exception also serves as a XMLRPC Fault\n+ */\n+public class NotInMaintenanceModeException extends FaultException {\n+\n+    /**\n+     * Standard constructor\n+     *\n+     * @param schedules the {@link MaintenanceSchedule}s\n+     * @param date the scheduling date\n+     */\n+    public NotInMaintenanceModeException(Set<MaintenanceSchedule> schedules, Date date) {\n+        super(1334,", "originalCommit": "8ac95299f92b76e04f50b67b93a5e82a8ef4afee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyMDEyMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425720123", "bodyText": "I actually checked this file, but I messed the code up. I wanted to place it under \"system exceptions\", but I see it's already quite crowded there. So I'll probably move it to SUSE Exceptions, as you're suggesting.", "author": "hustodemon", "createdAt": "2020-05-15T10:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NjM4MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425646381", "bodyText": "Seems all fault exceptions use \"camel case\". Please do the same.", "author": "mcalmer", "createdAt": "2020-05-15T08:28:08Z", "path": "java/code/src/com/suse/manager/maintenance/NotInMaintenanceModeException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.maintenance;\n+\n+import com.redhat.rhn.FaultException;\n+\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An {@link RuntimeException} bearing a set of {@link MaintenanceSchedule}s.\n+ *\n+ * Typically thrown, when scheduling an action at the date that doesn't fit to Maintenance window of\n+ * some systems.\n+ *\n+ * This exception also serves as a XMLRPC Fault\n+ */\n+public class NotInMaintenanceModeException extends FaultException {\n+\n+    /**\n+     * Standard constructor\n+     *\n+     * @param schedules the {@link MaintenanceSchedule}s\n+     * @param date the scheduling date\n+     */\n+    public NotInMaintenanceModeException(Set<MaintenanceSchedule> schedules, Date date) {\n+        super(1334,\n+                \"not_in_maintenance\",", "originalCommit": "8ac95299f92b76e04f50b67b93a5e82a8ef4afee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0ODA1Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425648052", "bodyText": "In most cases \"Fault\" exceptions are only thrown from inside of XMLRPC Handler classes. There are a few\nexceptions, but it seems some where from \"us\" and others have a special case where \"Command\" classes which may be used everywhere throw such exceptions.\nOn the other hand I do not see a big benefit in writing 2 Exceptions and convert one into the other.\nMaybe we need to discuss it with the team?", "author": "mcalmer", "createdAt": "2020-05-15T08:31:06Z", "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -93,6 +97,66 @@ public static MaintenanceManager instance() {\n         return instance;\n     }\n \n+    /**\n+     * Check if an action of given type can be scheduled at given date for given systems.\n+     * If some systems have a {@link MaintenanceSchedule} and are outside of their maintenance windows,\n+     * throw the {@link NotInMaintenanceModeException} that bears the offending schedules.\n+     *\n+     * @param systemIds the system IDs to check\n+     * @param date the schedule date of the action\n+     * @param actionType the type of action\n+     * @throws NotInMaintenanceModeException when some systems are outside of maintenance window\n+     */\n+    public void checkMaintenanceWindows(Set<Long> systemIds, Date date, ActionType actionType) {\n+        if (actionType.isMaintenancemodeOnly()) {\n+            Set<MaintenanceSchedule> offendingSchedules = listSystemSchedulesNotMachingDate(systemIds, date);\n+            if (!offendingSchedules.isEmpty()) {\n+                throw new NotInMaintenanceModeException(offendingSchedules, date);", "originalCommit": "8ac95299f92b76e04f50b67b93a5e82a8ef4afee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyMzgzNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425723836", "bodyText": "I know that this is not kosher, but I did this as a kind of compromise.  By declaring the exception as a Fault I don't need to care about the Exception -> Fault translation on the Handler side. Not doing this, I'd need to visit all the methods, that have something to do with action scheduling (in multiple handlers). Moreover, when somebody adds a xmlrpc method that schedules an action in the future, he/she will need to take care of proper translation. I think declaring that exception as a Fault is a small price to pay for the benefits. I also couldn't think of more drawbacks of doing this.", "author": "hustodemon", "createdAt": "2020-05-15T10:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0ODA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNzc0Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425727747", "bodyText": "yes, this is a good point.", "author": "mcalmer", "createdAt": "2020-05-15T11:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0ODA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDcyOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r426454729", "bodyText": "So, after the discussion, I removed the dependency on the fault from the backend. This makes total sense. On top of that, I implemented handling of NotInMaintModeException in a general sense, so that it doesn't need to be handled case-by-case.", "author": "hustodemon", "createdAt": "2020-05-18T08:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0ODA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1MDYwNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425650604", "bodyText": "I think the message is hard to understand. Not optimal, but maybe better:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String.format(\"Schedules '%s' are not matching date %s \",\n          \n          \n            \n                                    scheduleNames(schedules), date));\n          \n          \n            \n                            String.format(\"Systems assigned to these schedules (%s) do not have a maintenance window at %s\" ,\n          \n          \n            \n                                    scheduleNames(schedules), date));", "author": "mcalmer", "createdAt": "2020-05-15T08:35:51Z", "path": "java/code/src/com/suse/manager/maintenance/NotInMaintenanceModeException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.maintenance;\n+\n+import com.redhat.rhn.FaultException;\n+\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An {@link RuntimeException} bearing a set of {@link MaintenanceSchedule}s.\n+ *\n+ * Typically thrown, when scheduling an action at the date that doesn't fit to Maintenance window of\n+ * some systems.\n+ *\n+ * This exception also serves as a XMLRPC Fault\n+ */\n+public class NotInMaintenanceModeException extends FaultException {\n+\n+    /**\n+     * Standard constructor\n+     *\n+     * @param schedules the {@link MaintenanceSchedule}s\n+     * @param date the scheduling date\n+     */\n+    public NotInMaintenanceModeException(Set<MaintenanceSchedule> schedules, Date date) {\n+        super(1334,\n+                \"not_in_maintenance\",\n+                String.format(\"Schedules '%s' are not matching date %s \",\n+                        scheduleNames(schedules), date));", "originalCommit": "8ac95299f92b76e04f50b67b93a5e82a8ef4afee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNDEyMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r425724123", "bodyText": "Hm, that sounds better!", "author": "hustodemon", "createdAt": "2020-05-15T10:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1MDYwNA=="}], "type": "inlineReview"}, {"oid": "300b7f658a4137e0f502fd43444a29adee5145d7", "url": "https://github.com/uyuni-project/uyuni/commit/300b7f658a4137e0f502fd43444a29adee5145d7", "message": "Refactor: Extract exception-to-fault translation to a separate class", "committedDate": "2020-05-18T08:32:00Z", "type": "forcePushed"}, {"oid": "c936021117784e4654562cb76aeaf81fabc51039", "url": "https://github.com/uyuni-project/uyuni/commit/c936021117784e4654562cb76aeaf81fabc51039", "message": "Fix Javadoc", "committedDate": "2020-05-18T08:39:08Z", "type": "commit"}, {"oid": "cd90e9fd835a178302d7cb8febd64064e6bf79c6", "url": "https://github.com/uyuni-project/uyuni/commit/cd90e9fd835a178302d7cb8febd64064e6bf79c6", "message": "Extract function for getting events at given time", "committedDate": "2020-05-18T08:39:08Z", "type": "commit"}, {"oid": "7aec05c69a35761505a7dc29ea7cac308c850948", "url": "https://github.com/uyuni-project/uyuni/commit/7aec05c69a35761505a7dc29ea7cac308c850948", "message": "Extract function for parsing calendar from string", "committedDate": "2020-05-18T08:39:08Z", "type": "commit"}, {"oid": "423315d7bd4df3c5371b8933f6c73690e01ad5ab", "url": "https://github.com/uyuni-project/uyuni/commit/423315d7bd4df3c5371b8933f6c73690e01ad5ab", "message": "Support checking for maintenance windows when scheduling actions", "committedDate": "2020-05-18T08:39:09Z", "type": "commit"}, {"oid": "058824c167c149861602cb39c6c538a75fb06659", "url": "https://github.com/uyuni-project/uyuni/commit/058824c167c149861602cb39c6c538a75fb06659", "message": "Check for maintenance windows when scheduling actions", "committedDate": "2020-05-18T08:39:09Z", "type": "commit"}, {"oid": "e31b14ddcf67e30ef0129b01ed7fc203669957e9", "url": "https://github.com/uyuni-project/uyuni/commit/e31b14ddcf67e30ef0129b01ed7fc203669957e9", "message": "Test checking for maintenance windows when scheduling actions", "committedDate": "2020-05-18T08:39:09Z", "type": "commit"}, {"oid": "3aeb8780bdc0beaf7a27688ec4cad737d42939ac", "url": "https://github.com/uyuni-project/uyuni/commit/3aeb8780bdc0beaf7a27688ec4cad737d42939ac", "message": "Minor: Rename function", "committedDate": "2020-05-18T08:39:09Z", "type": "commit"}, {"oid": "4899e84edf5715648dea032d9a13cd7781d2c397", "url": "https://github.com/uyuni-project/uyuni/commit/4899e84edf5715648dea032d9a13cd7781d2c397", "message": "Address review comments", "committedDate": "2020-05-18T08:39:09Z", "type": "commit"}, {"oid": "e1a6108d653c88e6a9479be2ab6dc3fe4d50bda2", "url": "https://github.com/uyuni-project/uyuni/commit/e1a6108d653c88e6a9479be2ab6dc3fe4d50bda2", "message": "Checkstyle", "committedDate": "2020-05-18T08:39:09Z", "type": "commit"}, {"oid": "2ce3b51a69c7d82772f2bed000e194b16b31ae90", "url": "https://github.com/uyuni-project/uyuni/commit/2ce3b51a69c7d82772f2bed000e194b16b31ae90", "message": "Don't make backend dependant on XMLRPC, handle the exception translation on XMLRPC side", "committedDate": "2020-05-18T08:39:09Z", "type": "commit"}, {"oid": "5c414df748ea3a098fd29d3dff76349c2e15b117", "url": "https://github.com/uyuni-project/uyuni/commit/5c414df748ea3a098fd29d3dff76349c2e15b117", "message": "Refactor: Extract exception-to-fault translation to a separate class", "committedDate": "2020-05-18T08:39:10Z", "type": "commit"}, {"oid": "5c414df748ea3a098fd29d3dff76349c2e15b117", "url": "https://github.com/uyuni-project/uyuni/commit/5c414df748ea3a098fd29d3dff76349c2e15b117", "message": "Refactor: Extract exception-to-fault translation to a separate class", "committedDate": "2020-05-18T08:39:10Z", "type": "forcePushed"}, {"oid": "1153ad770395ea6d2a4372f02dd23ab6591284ed", "url": "https://github.com/uyuni-project/uyuni/commit/1153ad770395ea6d2a4372f02dd23ab6591284ed", "message": "Fix tests", "committedDate": "2020-05-18T13:44:24Z", "type": "commit"}, {"oid": "88e8077bb44bdbcafaf64bfb2fd4c849e712a7f2", "url": "https://github.com/uyuni-project/uyuni/commit/88e8077bb44bdbcafaf64bfb2fd4c849e712a7f2", "message": "Only check actions with no pre-requisites when checking for maintenance mode\n\n(i.e. don't check dependent actions in action chains)", "committedDate": "2020-05-18T13:47:46Z", "type": "commit"}, {"oid": "88e8077bb44bdbcafaf64bfb2fd4c849e712a7f2", "url": "https://github.com/uyuni-project/uyuni/commit/88e8077bb44bdbcafaf64bfb2fd4c849e712a7f2", "message": "Only check actions with no pre-requisites when checking for maintenance mode\n\n(i.e. don't check dependent actions in action chains)", "committedDate": "2020-05-18T13:47:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NTY1NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2218#discussion_r426665654", "bodyText": "It is now impossible to create actions in the wrong window. So we can ignore this test.", "author": "mcalmer", "createdAt": "2020-05-18T14:25:39Z", "path": "java/code/src/com/suse/manager/maintenance/test/MaintenanceManagerTest.java", "diffHunk": "@@ -381,17 +381,15 @@ public void testScheduleChangeMultiWithCancel() throws Exception {\n         Action sapAction1 = createActionForServerAt(ActionFactory.TYPE_ERRATA, sapServer, \"2020-04-13T08:15:00+02:00\"); //moved\n         Action sapActionEx = createActionForServerAt(ActionFactory.TYPE_VIRTUALIZATION_START, sapServer, \"2020-04-13T08:15:00+02:00\"); //moved\n         Action sapAction2 = createActionForServerAt(ActionFactory.TYPE_ERRATA, sapServer, \"2020-04-27T08:15:00+02:00\"); //stay\n-        Action sapAction3 = createActionForServerAt(ActionFactory.TYPE_ERRATA, sapServer, \"2020-04-30T09:15:00+02:00\"); //wrong window (Core)\n         Action coreAction1 = createActionForServerAt(ActionFactory.TYPE_ERRATA, coreServer, \"2020-04-30T09:15:00+02:00\"); //stay\n         Action coreActionEx = createActionForServerAt(ActionFactory.TYPE_VIRTUALIZATION_START, coreServer, \"2020-05-21T09:15:00+02:00\"); //moved\n         Action coreAction2 = createActionForServerAt(ActionFactory.TYPE_ERRATA, coreServer, \"2020-05-21T09:15:00+02:00\"); //moved\n-        Action coreAction3 = createActionForServerAt(ActionFactory.TYPE_ERRATA, coreServer, \"2020-04-27T08:15:00+02:00\"); //wrong window (SAP)", "originalCommit": "88e8077bb44bdbcafaf64bfb2fd4c849e712a7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9323a9f3630427915e1deb9bdde5f3a04b9b95d", "url": "https://github.com/uyuni-project/uyuni/commit/f9323a9f3630427915e1deb9bdde5f3a04b9b95d", "message": "Fix tests\n\nThe ServerActionTest was failing because the \"mocked\" actions weren't\nsufficiently populated for maintenance windows checking.", "committedDate": "2020-05-19T06:34:28Z", "type": "commit"}]}