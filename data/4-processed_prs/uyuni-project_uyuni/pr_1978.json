{"pr_number": 1978, "pr_title": "Recurring Actions feature", "pr_createdAt": "2020-03-04T16:58:21Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/1978", "timeline": [{"oid": "48de17956aac652ab1b1bb6145c4c3efb271a015", "url": "https://github.com/uyuni-project/uyuni/commit/48de17956aac652ab1b1bb6145c4c3efb271a015", "message": "Changelog", "committedDate": "2020-03-04T17:00:57Z", "type": "forcePushed"}, {"oid": "644c34355523ca146fb085ce2d609f7ada63e4ad", "url": "https://github.com/uyuni-project/uyuni/commit/644c34355523ca146fb085ce2d609f7ada63e4ad", "message": "Changelog", "committedDate": "2020-03-05T11:44:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NDQ1Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388384452", "bodyText": "This means every months will have only 28 days right? I'd like to add a note about this, like a tooltip contained in an * or something that explains (maybe syncing with doc guys) that days a limited to 28 in order to have a recurring schedule available for all the months\nNote: this can be improved later btw", "author": "ncounter", "createdAt": "2020-03-05T15:52:18Z", "path": "web/html/src/components/recurring-event-picker.js", "diffHunk": "@@ -0,0 +1,380 @@\n+/* eslint-disable */\n+// @flow\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+\n+const {DateTimePicker} = require(\"./datetimepicker\");\n+const {Combobox} = require(\"./combobox\");\n+import type {ComboboxItem} from \"./combobox\";\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const Functions = require(\"../utils/functions\");\n+\n+type RecurringEventPickerProps = {\n+    timezone: string,\n+    scheduleName: string,\n+    type: string,\n+    cron: string,\n+    cronTimes: Hash<string, string>,\n+    onScheduleNameChanged: (scheduleName: string) => void,\n+    onTypeChanged: (type: string) => void,\n+    onCronTimesChanged: (cronTimes: Hash<string, string>) => void,\n+    onCronChanged: (cron: string) => void\n+};\n+\n+type RecurringEventPickerState = {\n+    scheduleName: string,\n+    type: \"hourly\" | \"daily\" | \"weekly\" | \"monthly\" | \"cron\",\n+    time: Date,\n+    minutes: ComboboxItem,\n+    weekDay: ComboboxItem,\n+    monthDay: ComboboxItem,\n+};\n+\n+class RecurringEventPicker extends React.Component<RecurringEventPickerProps, RecurringEventPickerState> {\n+\n+    minutes = Array.from(Array(60).keys()).map(id => ({id: Number(id), text: (id).toString()}));\n+\n+    weekDays = [{id: Number(1), text: 'Sunday'},\n+        {id: Number(2), text: 'Monday'},\n+        {id: Number(3), text: 'Tuesday'},\n+        {id: Number(4), text: 'Wednesday'},\n+        {id: Number(5), text: 'Thursday'},\n+        {id: Number(6), text: 'Friday'},\n+        {id: Number(7), text: 'Saturday'}];\n+\n+    monthDays = Array.from(Array(28).keys()).map(id => ({id: Number(id + 1), text: (id + 1).toString()}));", "originalCommit": "d5dbd762dec81d4642e201621af52967d7816d80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzM4MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388413381", "bodyText": "We should not merge todo code", "author": "ncounter", "createdAt": "2020-03-05T16:34:29Z", "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;\n+    };\n+\n+    onEdit = () => {\n+        this.props.onEdit({\n+            targetId: this.state.targetId,\n+            recurringActionId: this.state.recurringActionId,\n+            //minionNames: this.state.minions.map(minion => minion.name), // todo", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzQwMQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388413401", "bodyText": "We should not merge todo code", "author": "ncounter", "createdAt": "2020-03-05T16:34:29Z", "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxNDMxNA==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388414314", "bodyText": "We should not merge todo code", "author": "ncounter", "createdAt": "2020-03-05T16:35:51Z", "path": "web/html/src/manager/state/recurring-states-details.js", "diffHunk": "@@ -0,0 +1,170 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+const {Messages} = require(\"components/messages\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+\n+class RecurringStatesDetails extends React.Component {\n+\n+    weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            messages: [],\n+            minions: props.minions\n+        };\n+    }\n+\n+    getExecutionText(data) {\n+        if (data.type !== \"cron\") {\n+            return (\n+                <tr>\n+                    <td>{t(\"Execution time\")}:</td>\n+                    {data.type === \"daily\" ?\n+                        <td>\n+                            {\"Every day at \"}\n+                            <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                        </td>\n+                        : data.type === \"weekly\" ?\n+                            <td>\n+                                {\"Every \"}\n+                                <b>{this.weekDays[data.cronTimes.dayOfWeek - 1]}</b>\n+                                {\" at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td> :\n+                            <td>\n+                                {\"Every \"}\n+                                <b>\n+                                    {data.cronTimes.dayOfMonth + (\n+                                        data.cronTimes.dayOfMonth === \"1\" ? \"st \"\n+                                            : data.cronTimes.dayOfMonth === \"2\" ? \"nd \"\n+                                            : data.cronTimes.dayOfMonth === \"3\" ? \"rd \"\n+                                                : \"th \")}\n+                                </b>\n+                                {\"of the month at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td>\n+                    }\n+                </tr>\n+            );\n+        } else {\n+            /* TODO: Get execution text from custom cron string */", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODY0OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418649", "bodyText": "We should not merge commented code.", "author": "ncounter", "createdAt": "2020-03-05T16:42:23Z", "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODc1Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418752", "bodyText": "We should not merge commented code.", "author": "ncounter", "createdAt": "2020-03-05T16:42:33Z", "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODgzMA==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418830", "bodyText": "We should not merge commented code.", "author": "ncounter", "createdAt": "2020-03-05T16:42:41Z", "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}\n+                />\n+            </div>\n+        ];\n+        const targetType = this.props.disableCreate ? <th className=\"text-center\">{t(\"Target Type\")}</th> : null;\n+\n+        return (\n+            <div>\n+                <InnerPanel title={t(\"Recurring States\")} icon=\"spacewalk-icon-salt\" buttons={this.props.disableCreate ? null : createButton}>\n+                    <div className=\"panel panel-default\">\n+                        <div className=\"panel-heading\">\n+                            <div>\n+                                <h3>Schedules</h3>\n+                            </div>\n+                        </div>\n+                        <div className=\"panel-body\">\n+                            <table className=\"table table-striped\">\n+                                <thead>\n+                                <tr>\n+                                    <th>{t(\"Active\")}</th>\n+                                    <th className=\"text-center\">{t(\"Schedule Name\")}</th>\n+                                    <th className=\"text-center\">{t(\"Frequency\")}</th>\n+                                    { /* <th className=\"text-center\">{t(\"Created at\")}</th> */}", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODg4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388418885", "bodyText": "We should not merge commented code.", "author": "ncounter", "createdAt": "2020-03-05T16:42:47Z", "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}\n+                />\n+            </div>\n+        ];\n+        const targetType = this.props.disableCreate ? <th className=\"text-center\">{t(\"Target Type\")}</th> : null;\n+\n+        return (\n+            <div>\n+                <InnerPanel title={t(\"Recurring States\")} icon=\"spacewalk-icon-salt\" buttons={this.props.disableCreate ? null : createButton}>\n+                    <div className=\"panel panel-default\">\n+                        <div className=\"panel-heading\">\n+                            <div>\n+                                <h3>Schedules</h3>\n+                            </div>\n+                        </div>\n+                        <div className=\"panel-body\">\n+                            <table className=\"table table-striped\">\n+                                <thead>\n+                                <tr>\n+                                    <th>{t(\"Active\")}</th>\n+                                    <th className=\"text-center\">{t(\"Schedule Name\")}</th>\n+                                    <th className=\"text-center\">{t(\"Frequency\")}</th>\n+                                    { /* <th className=\"text-center\">{t(\"Created at\")}</th> */}\n+                                    {targetType}\n+                                    { /* <th className=\"text-center\">{t(\"Skip Next\")}</th> */ }", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxOTg3OA==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388419878", "bodyText": "We should not merge commented and todo code.\nBtw yes, I don't really like the inferEntityParams() function. It hides too much the endpoint we are going to use. Better to have different and clear call instead. If you want to extract that from here, I'd say the function should return the full URL to use then: in this case I'd be okay with it.", "author": "ncounter", "createdAt": "2020-03-05T16:44:19Z", "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;\n+    };\n+\n+    getRecurringScheduleList = () => {\n+        // todo create different endpoints for each use case (\"/rhn/manager/api/recurringactions/group/id\")", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzM0NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388433345", "bodyText": "I am worried about this obscure magic \ud83d\ude04\nI understand the reason of the logic, but since it is already extracted in a separate method, I'd really explain more the logic in a different way. I can't imagine debugging or understanding this from a new pair of eyes.", "author": "ncounter", "createdAt": "2020-03-05T17:05:05Z", "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzU2Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388433562", "bodyText": "We should not merge todo code.", "author": "ncounter", "createdAt": "2020-03-05T17:05:29Z", "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"MINION\", // todo create a human readable representations\n+                targetId: minions[0].id\n+            });\n+        } else if (search.match(\"\\\\?sgid\")) {\n+            Object.assign(this.state, {\n+                targetType: \"GROUP\",\n+                targetId: groupId\n+            });\n+        } else {\n+            Object.assign(this.state, {\n+                targetType: \"ORG\",\n+                targetId: orgId\n+            });\n+        }\n+    };\n+\n+    isEdit = () => {\n+        return !!this.props.schedule;\n+    };\n+\n+    onEdit = () => {\n+        this.props.onEdit({\n+            targetId: this.state.targetId,\n+            recurringActionId: this.state.recurringActionId,\n+            //minionNames: this.state.minions.map(minion => minion.name), // todo\n+            scheduleName: this.state.scheduleName,\n+            active: this.state.active,\n+            type: this.state.type,\n+            targetType: this.state.targetType,\n+            cronTimes: this.state.cronTimes,\n+            cron: this.state.cron,\n+            test: this.state.test\n+        });\n+    };\n+\n+    onScheduleNameChanged = (scheduleName) => {\n+        this.setState({scheduleName: scheduleName});\n+    };\n+\n+    onToggleActive = (active) => {\n+        this.setState({active: active});\n+    };\n+\n+    onTypeChanged = (type) => {\n+        this.setState({type: type});\n+    };\n+\n+    onCronTimesChanged = (cronTimes) => {\n+        this.setState({cronTimes: cronTimes});\n+    };\n+\n+    onCustomCronChanged = (cron) => {\n+        this.setState({cron: cron});\n+    };\n+\n+    toggleTestState = () => {\n+        this.setState({test: !this.state.test});\n+    };\n+\n+    resetFields = () => {\n+        /* TODO: Write implementation */", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNTM0Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388435347", "bodyText": "Do we really need the { wrapping the function body?\nhandler={() => this.props.onSelect(row)}\nAnd there are others below this", "author": "ncounter", "createdAt": "2020-03-05T17:07:36Z", "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0Nzg2Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388847866", "bodyText": "Done.", "author": "hustodemon", "createdAt": "2020-03-06T11:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNTM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNzA5Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388437092", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-03-05T17:10:18Z", "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzODk1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388438957", "bodyText": "Why do we need this check?\nI also believe the checkstyle would complain about it. It should be:\nif (!item) { return false; }", "author": "ncounter", "createdAt": "2020-03-05T17:13:32Z", "path": "web/html/src/manager/state/recurring-states.js", "diffHunk": "@@ -0,0 +1,236 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesDetails} = require(\"./recurring-states-details\");\n+const {RecurringStatesList} = require(\"./recurring-states-list\");\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+const Utils = require(\"utils/functions\").Utils;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+// HACK: infer entity type and id based on the globals set\n+function inferEntityParams() {\n+    if (window.groupId !== undefined) {\n+        return \"/GROUP/\" + window.groupId;\n+    } else if (window.orgId !== undefined) {\n+        return \"/ORG/\" + window.orgId;\n+    } else if (minions.length > 0) {\n+        return \"/MINION/\" + minions[0].id;\n+    }\n+    return \"\";\n+}\n+\n+class RecurringStates extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"deleteSchedule\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+        \"onMessageChanged\", \"updateSchedule\", \"toggleActive\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            messages: [],\n+            minionIds: minions.length > 0 && minions[0].id ? minions.map(minion => minion.id) : undefined,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if ((action === \"edit\" || action === \"details\") && id) {\n+            this.getScheduleDetails(id, action);\n+        } else if (!action) {\n+            this.getRecurringScheduleList();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    isFiltered = () => {\n+        return !!this.state.minionIds;\n+    };\n+\n+    getRecurringScheduleList = () => {\n+        // todo create different endpoints for each use case (\"/rhn/manager/api/recurringactions/group/id\")\n+        const entityParams = inferEntityParams();\n+        const endpoint = \"/rhn/manager/api/recurringactions\" + entityParams;\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(schedules => {\n+                this.setState({\n+                    action: undefined,\n+                    selected: undefined,\n+                    schedules: schedules.data\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getScheduleDetails(row, action) {\n+        this.setState({selected: row, action: action});\n+    }\n+\n+    handleDetailsAction(row) {\n+        this.getScheduleDetails(row, \"details\");\n+        history.pushState(null, null, \"#/details/\" + row.recurringActionId);\n+    }\n+\n+    handleEditAction(row) {\n+        this.getScheduleDetails(row, \"edit\");\n+        history.pushState(null, null, \"#/edit/\" + row.recurringActionId);\n+    }\n+\n+    toggleActive(schedule) {\n+        Object.assign(schedule, {\n+            active: !(schedule.active)\n+        });\n+        this.updateSchedule(schedule);\n+    }\n+\n+    skipNext(item) {\n+        /* Write implementation to skip next run */\n+        this.handleForwardAction();\n+    }\n+\n+    updateSchedule(schedule) {\n+        return Network.post(\n+            \"/rhn/manager/api/recurringactions/save\",\n+            JSON.stringify(schedule),\n+            \"application/json\"\n+        ).promise.then((data) => {\n+            // HACK: propagate the errors from messages to the UI\n+            let newMsgs = [];\n+            if (data.messages === undefined || data.messages.length === 0) { // no errors from the server\n+                newMsgs = MessagesUtils.info(<span>{t(\"Schedule successully created.\")}</span>);\n+            } else {\n+                const decorator = data.success ? MessagesUtils.info : MessagesUtils.error;\n+                newMsgs = decorator.apply(null, data.messages);\n+            }\n+\n+            const msgs = this.state.messages.concat(newMsgs);\n+\n+            while (msgs.length > messagesCounterLimit) {\n+                msgs.shift();\n+            }\n+\n+            this.onMessageChanged(msgs);\n+            this.setState({\n+                messages: msgs\n+            });\n+\n+            if (data.success) {\n+                this.handleForwardAction();\n+            } else {\n+                this.handleResponseError();\n+            }\n+\n+        }).catch(this.handleResponseError);\n+    }\n+\n+    deleteSchedule(item) {\n+        if (!item) return false;", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MDY5Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388440696", "bodyText": "I'd like to have a field or a property populated from the backend instead, relying on a slice of the URL is not really robust from my POV, the URL could also change at any time.", "author": "ncounter", "createdAt": "2020-03-05T17:16:22Z", "path": "web/html/src/manager/state/recurring-states-edit.js", "diffHunk": "@@ -0,0 +1,137 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {RecurringEventPicker} = require(\"components/recurring-event-picker\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Button = require(\"components/buttons\").Button;\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+\n+class RecurringStatesEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            minions: minions,\n+            active: true\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        } else {\n+            this.getTargetType();\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+    };\n+\n+    getTargetType = () => {\n+        const search = window.location.search;\n+        if (search.match(\"\\\\?sid\")) {", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTIwOA==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388441208", "bodyText": "We should not merge commented code.", "author": "ncounter", "createdAt": "2020-03-05T17:17:20Z", "path": "web/html/src/manager/state/recurring-states-details.js", "diffHunk": "@@ -0,0 +1,170 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+const {Messages} = require(\"components/messages\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+\n+class RecurringStatesDetails extends React.Component {\n+\n+    weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            messages: [],\n+            minions: props.minions\n+        };\n+    }\n+\n+    getExecutionText(data) {\n+        if (data.type !== \"cron\") {\n+            return (\n+                <tr>\n+                    <td>{t(\"Execution time\")}:</td>\n+                    {data.type === \"daily\" ?\n+                        <td>\n+                            {\"Every day at \"}\n+                            <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                        </td>\n+                        : data.type === \"weekly\" ?\n+                            <td>\n+                                {\"Every \"}\n+                                <b>{this.weekDays[data.cronTimes.dayOfWeek - 1]}</b>\n+                                {\" at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td> :\n+                            <td>\n+                                {\"Every \"}\n+                                <b>\n+                                    {data.cronTimes.dayOfMonth + (\n+                                        data.cronTimes.dayOfMonth === \"1\" ? \"st \"\n+                                            : data.cronTimes.dayOfMonth === \"2\" ? \"nd \"\n+                                            : data.cronTimes.dayOfMonth === \"3\" ? \"rd \"\n+                                                : \"th \")}\n+                                </b>\n+                                {\"of the month at \"}\n+                                <b>{data.cronTimes.hour + \":\" + data.cronTimes.minute}</b>\n+                            </td>\n+                    }\n+                </tr>\n+            );\n+        } else {\n+            /* TODO: Get execution text from custom cron string */\n+            return (\n+                <tr>\n+                    <td>{\"Type\"}:</td>\n+                    <td>{\"Custom Quartz string\"}</td>\n+                </tr>\n+            );\n+        }\n+\n+    }\n+\n+    showScheduleDetails(data) {\n+        data.cronTimes.hour = data.cronTimes.hour.padStart(2, \"0\");\n+        data.cronTimes.minute = data.cronTimes.minute.padStart(2, \"0\");\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"State:\")}</td>\n+                            <td>{data.active === \"true\" ? t(\"active\") : <b>{t(\"disabled\")}</b>}</td>\n+                        </tr>\n+                        { data.test === \"true\" &&\n+                        <tr>\n+                            <td>{t(\"Test\")}:</td>\n+                            <td>{t(\"True\")}</td>\n+                        </tr>\n+                        }\n+                        <tr>\n+                            <td>{t(\"Target type\")}:</td>\n+                            <td>{data.targetType}</td>\n+                        </tr>\n+                        { data.targetType === \"Group\" &&\n+                        <tr>\n+                            <td>{t(\"Group name\")}:</td>\n+                            <td>{data.groupName}</td>\n+                        </tr>\n+                        }\n+                        { /* data.minionNames.length < 20 &&", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTg0MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388441841", "bodyText": "Please, remove the { wrapping the function call", "author": "ncounter", "createdAt": "2020-03-05T17:18:25Z", "path": "web/html/src/manager/state/recurring-states-list.js", "diffHunk": "@@ -0,0 +1,146 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const {Toggler} = require(\"components/toggler\");\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+\n+class RecurringStatesList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            itemsToDelete: []\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    tableBody = () => {\n+        const elements = [];\n+        const data = this.props.data;\n+        if (data !== undefined) {\n+            data.map(row => {\n+                elements.push(\n+                    <tr>\n+                        <td>\n+                            <Toggler value={row.active} className=\"btn\" handler={() => {this.props.onToggleActive(row)}} />\n+                        </td>\n+                        <td className=\"text-center\">{row.scheduleName}</td>\n+                        <td className=\"text-center\">{row.cron}</td>\n+                        {/*<td className=\"text-center\">{row.createdAt + \" \" + timezone}</td>*/}\n+                        {this.props.disableCreate ? <td className=\"text-center\">{row.targetType}</td> : null}\n+                        {/*<td className=\"text-center\">\n+                         <input type=\"checkbox\" className=\"checkbox btn-group\" checked={row.skipNext === \"true\"} onChange={() => {this.props.onSkip(row)}}/>\n+                         </td> } */ }\n+                        <td className=\"text-right\">\n+                            <div className=\"btn-group\">\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Details\")}\n+                                    icon=\"fa-list\"\n+                                    handler={() => {\n+                                        this.props.onSelect(row)\n+                                    }}\n+                                />\n+                                <Button\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Edit\")}\n+                                    icon=\"fa-edit\"\n+                                    handler={() => {\n+                                        this.props.onEdit(row)\n+                                    }}\n+                                />\n+                                <ModalButton\n+                                    className=\"btn-default btn-sm\"\n+                                    title={t(\"Delete\")}\n+                                    icon=\"fa-trash\"\n+                                    target=\"delete-modal\"\n+                                    item={row}\n+                                    onClick={i => this.selectToDelete(i)}\n+                                />\n+                            </div>\n+                        </td>\n+                    </tr>\n+                );\n+            });\n+        }\n+\n+        return (\n+            <tbody className=\"table-content\">\n+            {elements.length > 0 ? elements :\n+                <tr>\n+                    <td colSpan=\"4\">\n+                        <div>{t(\"No schedules created.\" + (this.props.disableCreate ? \"\" : \" Use Create to add a schedule.\"))}</div>\n+                    </td>\n+                </tr>\n+            }\n+            </tbody>\n+        );\n+    };\n+\n+    render() {\n+        const createButton = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    className=\"btn-default\"\n+                    icon=\"fa-plus\"\n+                    text={t(\"Create\")}\n+                    title=\"Schedule a new Recurring States Action\"\n+                    handler={() => {this.props.onActionChanged(\"create\")}}", "originalCommit": "2c28644c262d213ca203a2b35605096d3e6099df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NzY0NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388847645", "bodyText": "Done.", "author": "hustodemon", "createdAt": "2020-03-06T11:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MzE5MA==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388443190", "bodyText": "I'd not rely on the URL, better to have a field from the backend", "author": "ncounter", "createdAt": "2020-03-05T17:20:45Z", "path": "web/html/src/manager/highstate/highstate.js", "diffHunk": "@@ -77,20 +80,50 @@ class Highstate extends React.Component {\n         this.setState({actionChain: actionChain})\n     };\n \n+    onMessageChanged = (message) => {\n+        this.setState({messages: message});\n+    };\n+\n+    handleForwardAction = (action) => {\n+        const loc = window.location;\n+        if(action === \"back\") {\n+            history.pushState(null, null, loc.pathname + loc.search);\n+            this.setState({\n+               action: undefined\n+            });\n+        } else {\n+            const pathname = loc.pathname.replace(\"highstate\", \"states/schedules\");\n+            Functions.Utils.urlBounce(pathname + loc.search);\n+        }\n+    };\n+\n     toggleTestState = () => {\n         this.setState({test: !this.state.test})\n     };\n \n+    isSSM = () => {\n+        return !!window.location.pathname.match(\"/ssm/\");", "originalCommit": "16867ab3c979eca3529624035702e12024efc79a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MzkzMw==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388443933", "bodyText": "Indentation to be fixed", "author": "ncounter", "createdAt": "2020-03-05T17:22:06Z", "path": "java/code/src/com/suse/manager/webui/menu/MenuTree.java", "diffHunk": "@@ -74,6 +74,7 @@\n                     .addChild(new MenuItem(\"Organization Trusts\").withPrimaryUrl(\"/rhn/multiorg/Organizations.do\")\n                         .withAltUrl(\"/rhn/multiorg/OrgTrustDetails.do\").withAltUrl(\"/rhn/multiorg/channels/Consumed.do\")\n                         .withAltUrl(\"/rhn/multiorg/channels/Provided.do\").withVisibility(adminRoles.get(\"org\")))\n+                     .addChild(new MenuItem(\"Recurring States\").withPrimaryUrl(\"/rhn/manager/yourorg/recurring-states\").withVisibility(adminRoles.get(\"org\")))", "originalCommit": "4a315c69a32cd87fd7a137b348c674200d039e29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODcyNw==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388448727", "bodyText": "So we don't receive any feedback from the server if everything went well? As I see we have a success flag, I'd better check the flag first and depending on it we can look into messages or not.", "author": "ncounter", "createdAt": "2020-03-05T17:30:44Z", "path": "web/html/src/manager/state/highstate.js", "diffHunk": "@@ -0,0 +1,198 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import {Button} from \"components/buttons\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const {DisplayHighstate} = require(\"./display-highstate\");\n+const Messages = require(\"components/messages\").Messages;\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const {ActionSchedule} = require(\"components/action-schedule\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const {Toggler} = require(\"components/toggler\");\n+const Network = require(\"utils/network\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const {RecurringStatesEdit} =  require(\"./recurring-states-edit\");\n+const Functions = require(\"utils/functions\");\n+const Formats = Functions.Formats;\n+const {ActionLink, ActionChainLink} = require(\"components/links\");\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 3;\n+\n+function msg(severityIn, textIn) {\n+    return {severity: severityIn, text: textIn};\n+}\n+\n+class Highstate extends React.Component {\n+    constructor(props) {\n+        super(props);\n+        var state = {\n+            messages: [],\n+            earliest: Functions.Utils.dateWithTimezone(localTime),\n+            test: false\n+        };\n+        this.state = state;\n+    }\n+\n+    applyHighstate = () => {\n+        const request = Network.post(\n+            \"/rhn/manager/api/states/applyall\",\n+            JSON.stringify({\n+                ids: minions.map(m => m.id),\n+                earliest: Formats.LocalDateTime(this.state.earliest),\n+                actionChain: this.state.actionChain ? this.state.actionChain.text : null,\n+                test: this.state.test\n+            }),\n+            \"application/json\"\n+        ).promise.then(data => {\n+            const msg = MessagesUtils.info(this.state.actionChain ?\n+                    <span>{t(\"Action has been successfully added to the \")}<ActionChainLink id={data}>{this.state.actionChain ? this.state.actionChain.text : \"\"}</ActionChainLink></span> :\n+                    <span>{t(\"Applying the highstate has been \")}<ActionLink id={data}>{t(\"scheduled.\")}</ActionLink></span>);\n+\n+            const msgs = this.state.messages.concat(msg);\n+\n+            // Do not spam UI showing old messages\n+            while (msgs.length > messagesCounterLimit) {\n+              msgs.shift();\n+            }\n+\n+            this.setState({\n+                messages: msgs\n+            });\n+        }).catch(this.handleResponseError);\n+\n+        return request;\n+    };\n+\n+    handleResponseError = (jqXHR) => {\n+      this.setState({\n+           messages: Network.responseErrorMessage(jqXHR)\n+      });\n+    };\n+\n+    onDateTimeChanged = (date) => {\n+        this.setState({\"earliest\": date});\n+    };\n+\n+    onActionChainChanged = (actionChain) => {\n+        this.setState({actionChain: actionChain})\n+    };\n+\n+    onMessageChanged = (message) => {\n+        this.setState({messages: message});\n+    };\n+\n+    handleForwardAction = (action) => {\n+        const loc = window.location;\n+        if(action === \"back\") {\n+            history.pushState(null, null, loc.pathname + loc.search);\n+            this.setState({\n+               action: undefined\n+            });\n+        } else {\n+            const pathname = loc.pathname.replace(\"highstate\", \"states/schedules\");\n+            Functions.Utils.urlBounce(pathname + loc.search);\n+        }\n+    };\n+\n+    toggleTestState = () => {\n+        this.setState({test: !this.state.test})\n+    };\n+\n+    isSSM = () => {\n+        return !!window.location.pathname.match(\"/ssm/\");\n+    };\n+\n+    updateSchedule =(schedule) => {\n+        return Network.post(\n+            \"/rhn/manager/api/recurringactions/save\",\n+            JSON.stringify(schedule),\n+            \"application/json\"\n+        ).promise.then((data) => {\n+            // HACK: propagate the errors from messages to the UI\n+            let newMsgs = [];\n+            if (data.messages === undefined || data.messages.length === 0) { // no errors from the server\n+                newMsgs = MessagesUtils.info(<span>{t(\"Schedule successully created.\")}</span>);", "originalCommit": "788de161657e4d18ad0c35f745b3e05843b21253", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxOTM2OA==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388819368", "bodyText": "Fixed.", "author": "hustodemon", "createdAt": "2020-03-06T10:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwOTIxMA==", "url": "https://github.com/uyuni-project/uyuni/pull/1978#discussion_r388809210", "bodyText": "(Thou shalt not copypaste)", "author": "hustodemon", "createdAt": "2020-03-06T09:54:30Z", "path": "web/html/src/manager/state/highstate.js", "diffHunk": "@@ -105,6 +105,41 @@ class Highstate extends React.Component {\n         return !!window.location.pathname.match(\"/ssm/\");\n     };\n \n+    updateSchedule =(schedule) => {", "originalCommit": "788de161657e4d18ad0c35f745b3e05843b21253", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "86bdf9c1b070570e490f19a20b37b39326742adb", "url": "https://github.com/uyuni-project/uyuni/commit/86bdf9c1b070570e490f19a20b37b39326742adb", "message": "Fix text when updating/disabling state", "committedDate": "2020-03-06T10:46:48Z", "type": "forcePushed"}, {"oid": "a57da63e5fbd14c6ab6521430b65bae86031e648", "url": "https://github.com/uyuni-project/uyuni/commit/a57da63e5fbd14c6ab6521430b65bae86031e648", "message": "Remove unnecessary check in deleteSchedule", "committedDate": "2020-03-06T11:43:18Z", "type": "forcePushed"}, {"oid": "3076b93bf6a284aea39aeb86a303cf5da97f3f75", "url": "https://github.com/uyuni-project/uyuni/commit/3076b93bf6a284aea39aeb86a303cf5da97f3f75", "message": "Schema: Taskomatic job", "committedDate": "2020-03-06T12:17:09Z", "type": "commit"}, {"oid": "dab847ec97ee63fe26b76deba09127538584468b", "url": "https://github.com/uyuni-project/uyuni/commit/dab847ec97ee63fe26b76deba09127538584468b", "message": "Schema: Hibernate entity", "committedDate": "2020-03-06T12:17:09Z", "type": "commit"}, {"oid": "171c8a21934ae128f05bd983b1408dba1470fb3c", "url": "https://github.com/uyuni-project/uyuni/commit/171c8a21934ae128f05bd983b1408dba1470fb3c", "message": "Schema: Migrations + Changelog", "committedDate": "2020-03-06T12:17:09Z", "type": "commit"}, {"oid": "db4fc28a9af7b46d7edc3632b5b794dcec8b9884", "url": "https://github.com/uyuni-project/uyuni/commit/db4fc28a9af7b46d7edc3632b5b794dcec8b9884", "message": "Backend: Hibernate entity + Factory", "committedDate": "2020-03-06T12:17:09Z", "type": "commit"}, {"oid": "88958634c00b014cc5ef0546c37a679a6a93d675", "url": "https://github.com/uyuni-project/uyuni/commit/88958634c00b014cc5ef0546c37a679a6a93d675", "message": "Backend: Factory test", "committedDate": "2020-03-06T12:17:10Z", "type": "commit"}, {"oid": "499b41d1d58f4750c581889d6355ae1b3a919aa2", "url": "https://github.com/uyuni-project/uyuni/commit/499b41d1d58f4750c581889d6355ae1b3a919aa2", "message": "Backend: Manager", "committedDate": "2020-03-06T12:17:10Z", "type": "commit"}, {"oid": "d8c848049e0bced301492f8afe97651ee56f15d7", "url": "https://github.com/uyuni-project/uyuni/commit/d8c848049e0bced301492f8afe97651ee56f15d7", "message": "Backend: Manager test", "committedDate": "2020-03-06T12:17:10Z", "type": "commit"}, {"oid": "b1e54d13c2e6feaa6789a5033d43fdc330b9033e", "url": "https://github.com/uyuni-project/uyuni/commit/b1e54d13c2e6feaa6789a5033d43fdc330b9033e", "message": "Taskomatic: Job for executing Recurring Actions", "committedDate": "2020-03-06T12:17:10Z", "type": "commit"}, {"oid": "acedd9879dac67ad037dd029d2ead0aa19deb504", "url": "https://github.com/uyuni-project/uyuni/commit/acedd9879dac67ad037dd029d2ead0aa19deb504", "message": "Backend: Adjust picker component\n\n- add the \"hourly\" option\n- make it possible for the picker to be prepopulated with a map\n  containing picker configuration", "committedDate": "2020-03-06T12:17:10Z", "type": "commit"}, {"oid": "d723c590ff6cc9e9970260d8206cb9fb71dffb74", "url": "https://github.com/uyuni-project/uyuni/commit/d723c590ff6cc9e9970260d8206cb9fb71dffb74", "message": "Backend: Spark controller for Recurring Actions API", "committedDate": "2020-03-06T12:17:10Z", "type": "commit"}, {"oid": "b41238ccbbd879f58bd3f1513919d727738ef7da", "url": "https://github.com/uyuni-project/uyuni/commit/b41238ccbbd879f58bd3f1513919d727738ef7da", "message": "Frontend + Backend: Static pages + their endpoints", "committedDate": "2020-03-06T12:17:10Z", "type": "commit"}, {"oid": "815bb74535a1c5e8943502ab0fde14efed2cbae7", "url": "https://github.com/uyuni-project/uyuni/commit/815bb74535a1c5e8943502ab0fde14efed2cbae7", "message": "Frontend: String resources", "committedDate": "2020-03-06T12:17:11Z", "type": "commit"}, {"oid": "25378e70551980568c6564b6f0476d20ed27366d", "url": "https://github.com/uyuni-project/uyuni/commit/25378e70551980568c6564b6f0476d20ed27366d", "message": "Frontend: Allow hiding date/time in the datetimepicker", "committedDate": "2020-03-06T12:17:11Z", "type": "commit"}, {"oid": "b2e77461e4ad86e09419b214c320a70049408444", "url": "https://github.com/uyuni-project/uyuni/commit/b2e77461e4ad86e09419b214c320a70049408444", "message": "Frontend: Allow buttons on the left side of the InnerPanel", "committedDate": "2020-03-06T12:17:11Z", "type": "commit"}, {"oid": "9ab63c8414979d5d126ccefa3f96b5fa3c21ca9b", "url": "https://github.com/uyuni-project/uyuni/commit/9ab63c8414979d5d126ccefa3f96b5fa3c21ca9b", "message": "Frontend: Cron-expression picker for Recurring Actions", "committedDate": "2020-03-06T12:17:11Z", "type": "commit"}, {"oid": "26d9a897212c8369d3212c3cc49a83cdc8250833", "url": "https://github.com/uyuni-project/uyuni/commit/26d9a897212c8369d3212c3cc49a83cdc8250833", "message": "Frontend: Components for Recurring Actions scheduling", "committedDate": "2020-03-06T12:17:11Z", "type": "commit"}, {"oid": "4da37672706277e30cee57e57ca0b9a10b5ab526", "url": "https://github.com/uyuni-project/uyuni/commit/4da37672706277e30cee57e57ca0b9a10b5ab526", "message": "Frontend: Extract a component for displaying highstate", "committedDate": "2020-03-06T12:17:11Z", "type": "commit"}, {"oid": "f2136839c40cedd8e4d3a97aa1f730a6936ba5f4", "url": "https://github.com/uyuni-project/uyuni/commit/f2136839c40cedd8e4d3a97aa1f730a6936ba5f4", "message": "Frontend: Integrate the Recurring State component in the Highstate component", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "61284cf7cd3bb24c716bee9adacd5cb6add6c032", "url": "https://github.com/uyuni-project/uyuni/commit/61284cf7cd3bb24c716bee9adacd5cb6add6c032", "message": "Frontend: Fix the components paths", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "6b0608a19c508a9b666fdcb25315b601e4e545c2", "url": "https://github.com/uyuni-project/uyuni/commit/6b0608a19c508a9b666fdcb25315b601e4e545c2", "message": "Frontend: Attach Recurring Actions pages to SUMA pages", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "83f1eb5a27f14aa098a753ab5d82fb800fcdf117", "url": "https://github.com/uyuni-project/uyuni/commit/83f1eb5a27f14aa098a753ab5d82fb800fcdf117", "message": "Changelog", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "fac9f61a73a3a15c75ec20e75f7150a6684b3c89", "url": "https://github.com/uyuni-project/uyuni/commit/fac9f61a73a3a15c75ec20e75f7150a6684b3c89", "message": "Remove 'Reset fields' button\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "73a9c65e72db8ba5e4c864fa4722ad5e0e0edc75", "url": "https://github.com/uyuni-project/uyuni/commit/73a9c65e72db8ba5e4c864fa4722ad5e0e0edc75", "message": "Fix: When editing an action data is lost on reload\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "45be3a1af79be0840b55b2b14ae97e0239347ad7", "url": "https://github.com/uyuni-project/uyuni/commit/45be3a1af79be0840b55b2b14ae97e0239347ad7", "message": "Fix: 'Create' button does not show on empty group/org\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "d3c2c3ae95c2671abe61613b80e386adaae24c5c", "url": "https://github.com/uyuni-project/uyuni/commit/d3c2c3ae95c2671abe61613b80e386adaae24c5c", "message": "Fix: schedule Creation in highstate not working\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "73bcdf9e70e6c424bb5c0420c4327743b4b4e251", "url": "https://github.com/uyuni-project/uyuni/commit/73bcdf9e70e6c424bb5c0420c4327743b4b4e251", "message": "Add hourly cron translation to the details\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:12Z", "type": "commit"}, {"oid": "b6e2d22f27c533cb370f75391214b1f9d0c9b3a7", "url": "https://github.com/uyuni-project/uyuni/commit/b6e2d22f27c533cb370f75391214b1f9d0c9b3a7", "message": "Remove skip Next todos and commented code\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "07980bdf2bf4152323412904f1cdca81ba956948", "url": "https://github.com/uyuni-project/uyuni/commit/07980bdf2bf4152323412904f1cdca81ba956948", "message": "Inject entityType instead of relying on the URLs\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "3489732e582414cb91fc59356e04dca9afd86b3b", "url": "https://github.com/uyuni-project/uyuni/commit/3489732e582414cb91fc59356e04dca9afd86b3b", "message": "Frontend: Use the 'success' flag of the backend response in the user action feedback", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "b21c8c02b526fccc2d513bd7e49e53333ba9ec89", "url": "https://github.com/uyuni-project/uyuni/commit/b21c8c02b526fccc2d513bd7e49e53333ba9ec89", "message": "Some cosmetic fixes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "43c9a03f6b32beabb20a9e183fd89395c1151cea", "url": "https://github.com/uyuni-project/uyuni/commit/43c9a03f6b32beabb20a9e183fd89395c1151cea", "message": "Fix: List of all schedules only fetching data on reload\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "7ddd4ecbd4d3e15e16ab38b8c827a7fed877a6c0", "url": "https://github.com/uyuni-project/uyuni/commit/7ddd4ecbd4d3e15e16ab38b8c827a7fed877a6c0", "message": "Frontend: Human representation of MINION/GROUP/ORG in Recurring Actions list and details", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "da8db6e541bd9edd2e5ed9d0136b15ac6f0e34f9", "url": "https://github.com/uyuni-project/uyuni/commit/da8db6e541bd9edd2e5ed9d0136b15ac6f0e34f9", "message": "Fixed text and shows correctly if action is active/inactive", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "2a49cc3ca9d9b56877ee40d0c6535f08d2432fd7", "url": "https://github.com/uyuni-project/uyuni/commit/2a49cc3ca9d9b56877ee40d0c6535f08d2432fd7", "message": "Fix wording on recurring state page", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "cc815e72f8f96fe6fc0bd499e81c71f665833dae", "url": "https://github.com/uyuni-project/uyuni/commit/cc815e72f8f96fe6fc0bd499e81c71f665833dae", "message": "Fix text when updating/disabling state", "committedDate": "2020-03-06T12:17:13Z", "type": "commit"}, {"oid": "232375c6e00a3d29c6a915649dbd78f76f726ad7", "url": "https://github.com/uyuni-project/uyuni/commit/232375c6e00a3d29c6a915649dbd78f76f726ad7", "message": "Remove unrelated comment", "committedDate": "2020-03-06T12:17:14Z", "type": "commit"}, {"oid": "345871eddbf8d994690c455b3bc36530e52966aa", "url": "https://github.com/uyuni-project/uyuni/commit/345871eddbf8d994690c455b3bc36530e52966aa", "message": "Reduce the number of curly braces", "committedDate": "2020-03-06T12:17:14Z", "type": "commit"}, {"oid": "94ee7e1383f9a86caa08ebecc6a9c8d85f6fb7a7", "url": "https://github.com/uyuni-project/uyuni/commit/94ee7e1383f9a86caa08ebecc6a9c8d85f6fb7a7", "message": "Add tooltip to the monthly picker that days are limited to 28\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:14Z", "type": "commit"}, {"oid": "451aadc07e3a88d792f5d5a4e4543f5428fd319b", "url": "https://github.com/uyuni-project/uyuni/commit/451aadc07e3a88d792f5d5a4e4543f5428fd319b", "message": "Removed addressed todo\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:14Z", "type": "commit"}, {"oid": "e740da302349cb888b03ab60a51268c658be03e5", "url": "https://github.com/uyuni-project/uyuni/commit/e740da302349cb888b03ab60a51268c658be03e5", "message": "Remove unnecessary check in deleteSchedule", "committedDate": "2020-03-06T12:17:14Z", "type": "commit"}, {"oid": "a4649bf2aacca47e43f6f4236be6c89ab1a24383", "url": "https://github.com/uyuni-project/uyuni/commit/a4649bf2aacca47e43f6f4236be6c89ab1a24383", "message": "Add tooltip to the monthly picker that days are limited to 28\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:14Z", "type": "commit"}, {"oid": "a4649bf2aacca47e43f6f4236be6c89ab1a24383", "url": "https://github.com/uyuni-project/uyuni/commit/a4649bf2aacca47e43f6f4236be6c89ab1a24383", "message": "Add tooltip to the monthly picker that days are limited to 28\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-03-06T12:17:14Z", "type": "forcePushed"}]}