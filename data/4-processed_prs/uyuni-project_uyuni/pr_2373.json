{"pr_number": 2373, "pr_title": "Speedup System Groups page (bsc#1172839)", "pr_createdAt": "2020-06-30T22:04:26Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2373", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MTE4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2373#discussion_r448281185", "bodyText": "The name advisoryTypes or groupAdvisoryTypes would be more accurate here.", "author": "cbbayburt", "createdAt": "2020-07-01T10:51:48Z", "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/SystemGroup_queries.xml", "diffHunk": "@@ -79,24 +66,50 @@ ORDER BY UPPER(NAME)\n     ) x\n     ORDER BY UPPER(NAME)\n   </query>\n-    <elaborator name=\"most_severe_errata\" />\n+  <elaborator name=\"most_severe_errata\" />\n </mode>\n <query name=\"most_severe_errata\" params=\"\">\n-    SELECT sgm.server_group_id AS id,\n-        CASE MAX(CASE e.advisory_type\n-            WHEN 'Security Advisory' THEN 3\n-            WHEN 'Bug Fix Advisory' THEN 2\n-            WHEN 'Product Enhancement Advisory' THEN 1 END)\n-            WHEN 3 THEN 'Security Advisory'\n-            WHEN 2 THEN 'Bug Fix Advisory'\n-            WHEN 1 THEN 'Product Enhancement Advisory'\n-        END AS most_severe_errata\n-    FROM rhnErrata e\n-        INNER JOIN rhnServerNeededCache snpc ON e.id = snpc.errata_id\n-        INNER JOIN rhnServerGroupMembers sgm ON sgm.server_id = snpc.server_id\n-        INNER JOIN rhnServerFeaturesView sfv ON sgm.server_id = sfv.server_id\n-    WHERE sgm.server_group_id IN (%s) AND sfv.label = 'ftr_system_grouping'\n-    GROUP BY server_group_id\n+    WITH groupTypes AS NOT MATERIALIZED (", "originalCommit": "916d890cb3b8fefe6250342a7988d32f44445577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MTQ2OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2373#discussion_r448281468", "bodyText": "I think ELSE NULL is redundant because it's the default behavior anyway.", "author": "cbbayburt", "createdAt": "2020-07-01T10:52:26Z", "path": "java/code/src/com/redhat/rhn/common/db/datasource/xml/SystemGroup_queries.xml", "diffHunk": "@@ -79,24 +66,50 @@ ORDER BY UPPER(NAME)\n     ) x\n     ORDER BY UPPER(NAME)\n   </query>\n-    <elaborator name=\"most_severe_errata\" />\n+  <elaborator name=\"most_severe_errata\" />\n </mode>\n <query name=\"most_severe_errata\" params=\"\">\n-    SELECT sgm.server_group_id AS id,\n-        CASE MAX(CASE e.advisory_type\n-            WHEN 'Security Advisory' THEN 3\n-            WHEN 'Bug Fix Advisory' THEN 2\n-            WHEN 'Product Enhancement Advisory' THEN 1 END)\n-            WHEN 3 THEN 'Security Advisory'\n-            WHEN 2 THEN 'Bug Fix Advisory'\n-            WHEN 1 THEN 'Product Enhancement Advisory'\n-        END AS most_severe_errata\n-    FROM rhnErrata e\n-        INNER JOIN rhnServerNeededCache snpc ON e.id = snpc.errata_id\n-        INNER JOIN rhnServerGroupMembers sgm ON sgm.server_id = snpc.server_id\n-        INNER JOIN rhnServerFeaturesView sfv ON sgm.server_id = sfv.server_id\n-    WHERE sgm.server_group_id IN (%s) AND sfv.label = 'ftr_system_grouping'\n-    GROUP BY server_group_id\n+    WITH groupTypes AS NOT MATERIALIZED (\n+        SELECT sgm.server_group_id, e.advisory_type\n+          FROM rhnServerNeededCache snpc\n+              INNER JOIN rhnServerGroupMembers sgm ON sgm.server_id = snpc.server_id\n+              INNER JOIN rhnServerFeaturesView sfv ON sgm.server_id = sfv.server_id\n+              LEFT JOIN rhnErrata e ON e.id = snpc.errata_id\n+          WHERE sfv.label = 'ftr_system_grouping'\n+    )\n+    SELECT rhnServerGroup.id,\n+        CASE (\n+            SELECT EXISTS (SELECT 1\n+                FROM groupTypes gt\n+                    WHERE gt.server_group_id = rhnServerGroup.id\n+                    AND gt.advisory_type = 'Security Advisory')\n+        )\n+        WHEN TRUE THEN 'Security Advisory'\n+        ELSE CASE (\n+            SELECT EXISTS (SELECT 1\n+                FROM groupTypes gt\n+                    WHERE gt.server_group_id = rhnServerGroup.id\n+                    AND gt.advisory_type = 'Bug Fix Advisory')\n+        )\n+        WHEN TRUE THEN 'Bug Fix Advisory'\n+        ELSE CASE (\n+            SELECT EXISTS (SELECT 1\n+                FROM groupTypes gt\n+                    WHERE gt.server_group_id = rhnServerGroup.id\n+                    AND gt.advisory_type = 'Product Enhancement Advisory')\n+        )\n+        WHEN TRUE THEN 'Product Enhancement Advisory'\n+        ELSE CASE (\n+            SELECT EXISTS (SELECT 1\n+                FROM groupTypes gt\n+                    WHERE gt.server_group_id = rhnServerGroup.id\n+                    AND gt.advisory_type IS NULL)\n+        )\n+        WHEN TRUE THEN 'Outdated Packages'\n+        ELSE NULL", "originalCommit": "916d890cb3b8fefe6250342a7988d32f44445577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f385d89309ae14fcb7fd0882457a697e03bb1d9", "url": "https://github.com/uyuni-project/uyuni/commit/0f385d89309ae14fcb7fd0882457a697e03bb1d9", "message": "Dry code up, use faster elaborator query", "committedDate": "2020-07-10T16:10:55Z", "type": "forcePushed"}, {"oid": "5b15d08fa6d89b1133b3202b422f1eb5a8ed37f8", "url": "https://github.com/uyuni-project/uyuni/commit/5b15d08fa6d89b1133b3202b422f1eb5a8ed37f8", "message": "Improve System Group page performance (bsc#1172839)\n\nThe change here is about not using an aggregate (`GROUP BY`/`MAX`) to\nfind out whether a certain group has at least one system with at least\none critical/bugfix/feature applicable errata. Merely scanning the index\nof `rhnServerNeededCache`, which in the case I was looking at contained\nmore than 5M rows, takes 10-20 seconds. This solution is not\nparticularly elegant SQL-wise, but it allows not to visit the entire\ntable/index, stopping at the first useful row match, thereby saving a\nlot of time.", "committedDate": "2020-07-13T07:16:43Z", "type": "commit"}, {"oid": "77c03e6729142ba318078976a20db8fc1877334a", "url": "https://github.com/uyuni-project/uyuni/commit/77c03e6729142ba318078976a20db8fc1877334a", "message": "Dry code up, use faster elaborator query", "committedDate": "2020-07-13T07:16:43Z", "type": "forcePushed"}, {"oid": "2da64ff35cc761387712ab5f2622a2cb52b5fe80", "url": "https://github.com/uyuni-project/uyuni/commit/2da64ff35cc761387712ab5f2622a2cb52b5fe80", "message": "Dry code up, use faster elaborator query", "committedDate": "2020-07-13T09:01:02Z", "type": "commit"}, {"oid": "2da64ff35cc761387712ab5f2622a2cb52b5fe80", "url": "https://github.com/uyuni-project/uyuni/commit/2da64ff35cc761387712ab5f2622a2cb52b5fe80", "message": "Dry code up, use faster elaborator query", "committedDate": "2020-07-13T09:01:02Z", "type": "forcePushed"}]}