{"pr_number": 2169, "pr_title": "Frontend for configuring Maintenance Windows", "pr_createdAt": "2020-04-28T08:23:34Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2169", "timeline": [{"oid": "d479ab993ab002f922cd2e590d77b79a06a4e0b3", "url": "https://github.com/uyuni-project/uyuni/commit/d479ab993ab002f922cd2e590d77b79a06a4e0b3", "message": "Add details view for schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-04-30T15:17:27Z", "type": "forcePushed"}, {"oid": "18c1fb2b9d227d492af77337d80e3e63712a8cb4", "url": "https://github.com/uyuni-project/uyuni/commit/18c1fb2b9d227d492af77337d80e3e63712a8cb4", "message": "Controller save method\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-05-14T16:26:14Z", "type": "forcePushed"}, {"oid": "023327d3cae12b9e2bbd96677ab500ca15bb9474", "url": "https://github.com/uyuni-project/uyuni/commit/023327d3cae12b9e2bbd96677ab500ca15bb9474", "message": "Get detailed schedule info\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-05-19T11:15:14Z", "type": "forcePushed"}, {"oid": "96b21e7e8c966ee0ada155e656ee3ae799a05159", "url": "https://github.com/uyuni-project/uyuni/commit/96b21e7e8c966ee0ada155e656ee3ae799a05159", "message": "Add missing javadoc, fix checkstyle\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-05-27T09:01:11Z", "type": "forcePushed"}, {"oid": "eea876c7beb50d086a4beaeaa26f9f6adc018c86", "url": "https://github.com/uyuni-project/uyuni/commit/eea876c7beb50d086a4beaeaa26f9f6adc018c86", "message": "Handle reschedule strategy\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-02T16:26:01Z", "type": "forcePushed"}, {"oid": "a1af066a5ab3b6f3b19ab8d1ce1c8d5666f91ef5", "url": "https://github.com/uyuni-project/uyuni/commit/a1af066a5ab3b6f3b19ab8d1ce1c8d5666f91ef5", "message": "Support refreshing calendars from url\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-05T13:13:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMTc3Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437421772", "bodyText": "I find this confusing. When the 'Fail' strategy kicks in, it does not mean that an error occured. I'd put here something more general: \"Couldn't perform the operation as there are scheduled actions on systems.\" - something like this.", "author": "hustodemon", "createdAt": "2020-06-09T13:36:02Z", "path": "java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml", "diffHunk": "@@ -8876,6 +8876,39 @@ Alternatively, you will want to download &lt;strong&gt;Incremental Channel Conte\n       <trans-unit id=\"notification.stateapplyfailed\">\n         <source>Error running state.apply on: &lt;a href=\"/rhn/systems/details/history/Event.do?sid={0}&amp;aid={1}\"&gt;{2}&lt;/a&gt;</source>\n       </trans-unit>\n+      <trans-unit id=\"maintenance.calendar.name.empty\">\n+        <source>Calendar name required</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.schedule.name.empty\">\n+        <source>Schedule name required</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.calendar.name.invalid\">\n+        <source>Invalid calendar name provided. Choose a different name</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.calendar.data.empty\">\n+        <source>Calendar data required</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.calendar.exists\">\n+        <source>Calendar '{0}' already exists</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.calendar.fetch.error\">\n+        <source>Error fetching calendar data from '{0}'</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.calendar.not.exists\">\n+        <source>Calendar '{0}' does not exist</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.schedule.id.not.exists\">\n+        <source>Schedule with id '{0}' does not exist</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.calendar.id.not.exists\">\n+        <source>Calendar with id '{0}' does not exist</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.action.reschedule.error.cancel\">\n+        <source>An error occured trying to cancel affected actions for schedule '{0}'</source>\n+      </trans-unit>\n+      <trans-unit id=\"maintenance.action.reschedule.error.fail\">\n+        <source>An error occured. There are remaining actions managed by schedule '{0}'. Please cancel all actions affected by your changes</source>", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMzE0Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437423143", "bodyText": "Looks like this comment has been copy-pasted all over the codebase, but it's wrong in many cases (including this one :) ).", "author": "hustodemon", "createdAt": "2020-06-09T13:37:52Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDQzNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437424436", "bodyText": "Later todo suggestion (as per our talk): Splitting this to MaintenanceScheduleController and MaintenanceCalendarController would be nicer.", "author": "hustodemon", "createdAt": "2020-06-09T13:39:42Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNTA3NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437425075", "bodyText": "The name for this endpoint should reflect its intent: maybe /manager/api/maintenance/calendar-names would be better?", "author": "hustodemon", "createdAt": "2020-06-09T13:40:25Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODI2OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437428268", "bodyText": "In general, using Optional.get is discouraged, unless there is a very good reason for using it.\nI think this could be improved by using orElseThrow above:\nMaintenanceSchedule schedule = MM.lookupM.....(...)\n    .orElseThrow(() -> Spark.halt(\n        HttpStatus.SC_BAD_REQUEST,\n        GSON.toJson(ResultJson.error(LOCAL.getMessage(\"maintenance.schedule.id.not.exists\", scheduleId)))));\nThis way you get unwrapped MaintenanceSchedule.", "author": "hustodemon", "createdAt": "2020-06-09T13:43:27Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTI4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437429285", "bodyText": "Same as above.", "author": "hustodemon", "createdAt": "2020-06-09T13:44:26Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMDIwNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437430206", "bodyText": "There is nothing wrong with this, but if you want to be less verbose, you can use this notation:\nMap.of(\n    \"id\", schedule.getId().toString(),\n    \"name\", schedule.getName());", "author": "hustodemon", "createdAt": "2020-06-09T13:45:20Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMjk0NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437432945", "bodyText": "I don't like the fact, that <None> is handled as a special value here. I believe this is something that should be handled internally by the frontend (and if user selects <None> from the combobox, null should be sent to the backend). Is there anything preventing us from using null?\nThis is related to all <None> occurences in here and in the js files.", "author": "hustodemon", "createdAt": "2020-06-09T13:47:56Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNDg4MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437434881", "bodyText": "In which situations is this check needed? Can you remove it? When we lookup the calendar from the database, it will always have null (the only exception would be, when the entity is not persisted yet, but I believe this is not the case here).", "author": "hustodemon", "createdAt": "2020-06-09T13:49:49Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.invalid\"\n+            ))));\n+        }\n+        else if (json.getCalendarUrl().isBlank() && json.getCalendarData() == null) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.data.empty\"\n+            ))));\n+        }\n+\n+        MM.lookupCalendarByUserAndLabel(user, json.getCalendarName()).ifPresentOrElse(\n+                /* update existing calendar */\n+                calendar -> {\n+                    if (json.getCalendarId() == null) {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNTkwMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440025903", "bodyText": "Yes we need it. This case happens, when the user tries to create a new calendar with a name that already exists. Without it you could override an existing calendar by creating a new one with the same name.", "author": "parlt91", "createdAt": "2020-06-15T08:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNDg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNjg4Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440716886", "bodyText": "Ok, that makes sense.", "author": "hustodemon", "createdAt": "2020-06-16T09:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNDg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNTc0OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437435749", "bodyText": "Please move this declaration & assignment to line 298.", "author": "hustodemon", "createdAt": "2020-06-09T13:50:35Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.invalid\"\n+            ))));\n+        }\n+        else if (json.getCalendarUrl().isBlank() && json.getCalendarData() == null) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.data.empty\"\n+            ))));\n+        }\n+\n+        MM.lookupCalendarByUserAndLabel(user, json.getCalendarName()).ifPresentOrElse(\n+                /* update existing calendar */\n+                calendar -> {\n+                    if (json.getCalendarId() == null) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.exists\", json.getCalendarName()\n+                        ))));\n+                    }\n+                    Map<String, String> details = new HashMap<>();\n+                    String rescheduleStrategy = json.getRescheduleStrategy();", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNjI1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437436257", "bodyText": "Please remove this line.", "author": "hustodemon", "createdAt": "2020-06-09T13:51:03Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.invalid\"\n+            ))));\n+        }\n+        else if (json.getCalendarUrl().isBlank() && json.getCalendarData() == null) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.data.empty\"\n+            ))));\n+        }\n+\n+        MM.lookupCalendarByUserAndLabel(user, json.getCalendarName()).ifPresentOrElse(\n+                /* update existing calendar */\n+                calendar -> {\n+                    if (json.getCalendarId() == null) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.exists\", json.getCalendarName()\n+                        ))));\n+                    }\n+                    Map<String, String> details = new HashMap<>();\n+                    String rescheduleStrategy = json.getRescheduleStrategy();\n+                    details.put(\"label\", calendar.getLabel());\n+                    if (!json.getCalendarUrl().isBlank()) {\n+                        details.put(\"url\", json.getCalendarUrl());\n+                    }\n+                    else {\n+                        details.put(\"ical\", json.getCalendarData());\n+                    }\n+\n+                    try {\n+                        List<RescheduleResult> results = MM.updateCalendar(user, calendar.getLabel(), details,\n+                                MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy))\n+                        );\n+                        handleRescheduleResult(results, rescheduleStrategy);\n+                    }\n+                    catch (DownloadException e) {\n+                        Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                        ))));\n+                    }\n+                },\n+                /* Create new calendar */\n+                () -> {\n+                    if (json.getCalendarData() == null) {\n+                        try {\n+                            MM.createMaintenanceCalendarWithUrl(user, json.getCalendarName(), json.getCalendarUrl());\n+                        }\n+                        catch (DownloadException e) {\n+                            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                            ))));\n+                        }\n+                    }\n+                    else {\n+                        MM.createMaintenanceCalendar(user, json.getCalendarName(), json.getCalendarData());\n+                    }\n+                }\n+        );\n+        return json(response, ResultJson.success());\n+    }\n+\n+    private static void createOrUpdateSchedule(User user, MaintenanceWindowJson json) {\n+        try {\n+            if (json.getScheduleId() == null) {\n+                Optional<MaintenanceCalendar> calendar = Optional.empty();\n+                if (!json.getCalendarName().equals(\"<None>\")) {\n+                    /* Lookup calendar */\n+                    calendar = Optional.of(MM.lookupCalendarByUserAndLabel(user, json.getCalendarName())\n+                            .orElseThrow(() -> new EntityNotExistsException(LOCAL.getMessage(\n+                                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+                            )))\n+                    );\n+                }\n+                /* Create new schedule */\n+                MM.createMaintenanceSchedule(\n+                        user,\n+                        json.getScheduleName(),\n+                        MaintenanceSchedule.ScheduleType.lookupByLabel(json.getScheduleType().toLowerCase()),\n+                        calendar\n+                );\n+            }\n+            else {\n+                /* Update existing schedule */\n+                String rescheduleStrategy = json.getRescheduleStrategy();\n+                Map<String, String> details = new HashMap<>();\n+                details.put(\"type\", json.getScheduleType().toLowerCase());\n+                //details.put(\"name\", json.getScheduleName());", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTU2OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437439569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (schedule.isPresent()) {\n          \n          \n            \n                        MM.remove(user, schedule.get());\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        Spark.halt(HttpStatus.SC_BAD_REQUEST);\n          \n          \n            \n                    }\n          \n          \n            \n            schedule.ifPresentOrElse(                                                                                                                       \n          \n          \n            \n                s -> MM.remove(user, s),                                                                                                                \n          \n          \n            \n                () -> Spark.halt(HttpStatus.SC_BAD_REQUEST));", "author": "hustodemon", "createdAt": "2020-06-09T13:54:00Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.invalid\"\n+            ))));\n+        }\n+        else if (json.getCalendarUrl().isBlank() && json.getCalendarData() == null) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.data.empty\"\n+            ))));\n+        }\n+\n+        MM.lookupCalendarByUserAndLabel(user, json.getCalendarName()).ifPresentOrElse(\n+                /* update existing calendar */\n+                calendar -> {\n+                    if (json.getCalendarId() == null) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.exists\", json.getCalendarName()\n+                        ))));\n+                    }\n+                    Map<String, String> details = new HashMap<>();\n+                    String rescheduleStrategy = json.getRescheduleStrategy();\n+                    details.put(\"label\", calendar.getLabel());\n+                    if (!json.getCalendarUrl().isBlank()) {\n+                        details.put(\"url\", json.getCalendarUrl());\n+                    }\n+                    else {\n+                        details.put(\"ical\", json.getCalendarData());\n+                    }\n+\n+                    try {\n+                        List<RescheduleResult> results = MM.updateCalendar(user, calendar.getLabel(), details,\n+                                MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy))\n+                        );\n+                        handleRescheduleResult(results, rescheduleStrategy);\n+                    }\n+                    catch (DownloadException e) {\n+                        Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                        ))));\n+                    }\n+                },\n+                /* Create new calendar */\n+                () -> {\n+                    if (json.getCalendarData() == null) {\n+                        try {\n+                            MM.createMaintenanceCalendarWithUrl(user, json.getCalendarName(), json.getCalendarUrl());\n+                        }\n+                        catch (DownloadException e) {\n+                            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                            ))));\n+                        }\n+                    }\n+                    else {\n+                        MM.createMaintenanceCalendar(user, json.getCalendarName(), json.getCalendarData());\n+                    }\n+                }\n+        );\n+        return json(response, ResultJson.success());\n+    }\n+\n+    private static void createOrUpdateSchedule(User user, MaintenanceWindowJson json) {\n+        try {\n+            if (json.getScheduleId() == null) {\n+                Optional<MaintenanceCalendar> calendar = Optional.empty();\n+                if (!json.getCalendarName().equals(\"<None>\")) {\n+                    /* Lookup calendar */\n+                    calendar = Optional.of(MM.lookupCalendarByUserAndLabel(user, json.getCalendarName())\n+                            .orElseThrow(() -> new EntityNotExistsException(LOCAL.getMessage(\n+                                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+                            )))\n+                    );\n+                }\n+                /* Create new schedule */\n+                MM.createMaintenanceSchedule(\n+                        user,\n+                        json.getScheduleName(),\n+                        MaintenanceSchedule.ScheduleType.lookupByLabel(json.getScheduleType().toLowerCase()),\n+                        calendar\n+                );\n+            }\n+            else {\n+                /* Update existing schedule */\n+                String rescheduleStrategy = json.getRescheduleStrategy();\n+                Map<String, String> details = new HashMap<>();\n+                details.put(\"type\", json.getScheduleType().toLowerCase());\n+                //details.put(\"name\", json.getScheduleName());\n+                String label = json.getCalendarName();\n+                details.put(\"calendar\", label.equals(\"<None>\") ? \"\" : label);\n+                RescheduleResult result = MM.updateMaintenanceSchedule(user, json.getScheduleName(), details,\n+                        MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy)));\n+                handleRescheduleResult(List.of(result), rescheduleStrategy);\n+            }\n+        }\n+        catch (EntityNotExistsException | EntityExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));\n+        }\n+    }\n+\n+    /**\n+     * Refresh calendar data from url\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String refreshCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        try {\n+            String strategy = json.getRescheduleStrategy();\n+            List<RescheduleResult> results = MM.refreshCalendar(\n+                    user,\n+                    json.getCalendarName(),\n+                    MM.mapRescheduleStrategyStrings(List.of(strategy))\n+            );\n+            handleRescheduleResult(results, strategy);\n+        }\n+        catch (EntityNotExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+            ))));\n+        }\n+        catch (DownloadException e) {\n+            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+            ))));\n+        }\n+\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Deletes a given schedule\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorzed user\n+     * @return the result JSON object\n+     */\n+    public static String deleteSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        String name = json.getScheduleName();\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndName(user, name);\n+        if (schedule.isPresent()) {\n+            MM.remove(user, schedule.get());\n+        }\n+        else {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MDE4Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437440186", "bodyText": "Could be simplified as well ^^^.", "author": "hustodemon", "createdAt": "2020-06-09T13:54:37Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.invalid\"\n+            ))));\n+        }\n+        else if (json.getCalendarUrl().isBlank() && json.getCalendarData() == null) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.data.empty\"\n+            ))));\n+        }\n+\n+        MM.lookupCalendarByUserAndLabel(user, json.getCalendarName()).ifPresentOrElse(\n+                /* update existing calendar */\n+                calendar -> {\n+                    if (json.getCalendarId() == null) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.exists\", json.getCalendarName()\n+                        ))));\n+                    }\n+                    Map<String, String> details = new HashMap<>();\n+                    String rescheduleStrategy = json.getRescheduleStrategy();\n+                    details.put(\"label\", calendar.getLabel());\n+                    if (!json.getCalendarUrl().isBlank()) {\n+                        details.put(\"url\", json.getCalendarUrl());\n+                    }\n+                    else {\n+                        details.put(\"ical\", json.getCalendarData());\n+                    }\n+\n+                    try {\n+                        List<RescheduleResult> results = MM.updateCalendar(user, calendar.getLabel(), details,\n+                                MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy))\n+                        );\n+                        handleRescheduleResult(results, rescheduleStrategy);\n+                    }\n+                    catch (DownloadException e) {\n+                        Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                        ))));\n+                    }\n+                },\n+                /* Create new calendar */\n+                () -> {\n+                    if (json.getCalendarData() == null) {\n+                        try {\n+                            MM.createMaintenanceCalendarWithUrl(user, json.getCalendarName(), json.getCalendarUrl());\n+                        }\n+                        catch (DownloadException e) {\n+                            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                            ))));\n+                        }\n+                    }\n+                    else {\n+                        MM.createMaintenanceCalendar(user, json.getCalendarName(), json.getCalendarData());\n+                    }\n+                }\n+        );\n+        return json(response, ResultJson.success());\n+    }\n+\n+    private static void createOrUpdateSchedule(User user, MaintenanceWindowJson json) {\n+        try {\n+            if (json.getScheduleId() == null) {\n+                Optional<MaintenanceCalendar> calendar = Optional.empty();\n+                if (!json.getCalendarName().equals(\"<None>\")) {\n+                    /* Lookup calendar */\n+                    calendar = Optional.of(MM.lookupCalendarByUserAndLabel(user, json.getCalendarName())\n+                            .orElseThrow(() -> new EntityNotExistsException(LOCAL.getMessage(\n+                                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+                            )))\n+                    );\n+                }\n+                /* Create new schedule */\n+                MM.createMaintenanceSchedule(\n+                        user,\n+                        json.getScheduleName(),\n+                        MaintenanceSchedule.ScheduleType.lookupByLabel(json.getScheduleType().toLowerCase()),\n+                        calendar\n+                );\n+            }\n+            else {\n+                /* Update existing schedule */\n+                String rescheduleStrategy = json.getRescheduleStrategy();\n+                Map<String, String> details = new HashMap<>();\n+                details.put(\"type\", json.getScheduleType().toLowerCase());\n+                //details.put(\"name\", json.getScheduleName());\n+                String label = json.getCalendarName();\n+                details.put(\"calendar\", label.equals(\"<None>\") ? \"\" : label);\n+                RescheduleResult result = MM.updateMaintenanceSchedule(user, json.getScheduleName(), details,\n+                        MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy)));\n+                handleRescheduleResult(List.of(result), rescheduleStrategy);\n+            }\n+        }\n+        catch (EntityNotExistsException | EntityExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));\n+        }\n+    }\n+\n+    /**\n+     * Refresh calendar data from url\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String refreshCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        try {\n+            String strategy = json.getRescheduleStrategy();\n+            List<RescheduleResult> results = MM.refreshCalendar(\n+                    user,\n+                    json.getCalendarName(),\n+                    MM.mapRescheduleStrategyStrings(List.of(strategy))\n+            );\n+            handleRescheduleResult(results, strategy);\n+        }\n+        catch (EntityNotExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+            ))));\n+        }\n+        catch (DownloadException e) {\n+            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+            ))));\n+        }\n+\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Deletes a given schedule\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorzed user\n+     * @return the result JSON object\n+     */\n+    public static String deleteSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        String name = json.getScheduleName();\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndName(user, name);\n+        if (schedule.isPresent()) {\n+            MM.remove(user, schedule.get());\n+        }\n+        else {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Deletes a given calendar\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorzed user\n+     * @return the result JSON object\n+     */\n+    public static String deleteCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        String name = json.getCalendarName();\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndLabel(user, name);\n+        if (calendar.isPresent()) {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MTIxOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437441218", "bodyText": "I'm not sure here: Do we want to report the first unsuccessful result, or all of them? In case of the latter, we might need something like this:\n        // maybe we want to report unsuccessful results?                                                                                                \n        String message = results.stream()                                                                                                               \n                .filter(r -> !r.isSuccess())                                                                                                            \n                .map(r -> LOCAL.getMessage(strategy.equals(\"Cancel\") ?                                                                                  \n                                \"maintenance.action.reschedule.error.cancel\" :                                                                          \n                                \"maintenance.action.reschedule.error.fail\",                                                                             \n                        r.getScheduleName()))                                                                                                           \n                .collect(Collectors.joining(\", \"));                                                                                                     \n                                                                                                                                                        \n        if (!message.isEmpty()) {                                                                                                                       \n            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(message)));                                                              \n        }", "author": "hustodemon", "createdAt": "2020-06-09T13:55:46Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.invalid\"\n+            ))));\n+        }\n+        else if (json.getCalendarUrl().isBlank() && json.getCalendarData() == null) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.data.empty\"\n+            ))));\n+        }\n+\n+        MM.lookupCalendarByUserAndLabel(user, json.getCalendarName()).ifPresentOrElse(\n+                /* update existing calendar */\n+                calendar -> {\n+                    if (json.getCalendarId() == null) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.exists\", json.getCalendarName()\n+                        ))));\n+                    }\n+                    Map<String, String> details = new HashMap<>();\n+                    String rescheduleStrategy = json.getRescheduleStrategy();\n+                    details.put(\"label\", calendar.getLabel());\n+                    if (!json.getCalendarUrl().isBlank()) {\n+                        details.put(\"url\", json.getCalendarUrl());\n+                    }\n+                    else {\n+                        details.put(\"ical\", json.getCalendarData());\n+                    }\n+\n+                    try {\n+                        List<RescheduleResult> results = MM.updateCalendar(user, calendar.getLabel(), details,\n+                                MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy))\n+                        );\n+                        handleRescheduleResult(results, rescheduleStrategy);\n+                    }\n+                    catch (DownloadException e) {\n+                        Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                        ))));\n+                    }\n+                },\n+                /* Create new calendar */\n+                () -> {\n+                    if (json.getCalendarData() == null) {\n+                        try {\n+                            MM.createMaintenanceCalendarWithUrl(user, json.getCalendarName(), json.getCalendarUrl());\n+                        }\n+                        catch (DownloadException e) {\n+                            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                            ))));\n+                        }\n+                    }\n+                    else {\n+                        MM.createMaintenanceCalendar(user, json.getCalendarName(), json.getCalendarData());\n+                    }\n+                }\n+        );\n+        return json(response, ResultJson.success());\n+    }\n+\n+    private static void createOrUpdateSchedule(User user, MaintenanceWindowJson json) {\n+        try {\n+            if (json.getScheduleId() == null) {\n+                Optional<MaintenanceCalendar> calendar = Optional.empty();\n+                if (!json.getCalendarName().equals(\"<None>\")) {\n+                    /* Lookup calendar */\n+                    calendar = Optional.of(MM.lookupCalendarByUserAndLabel(user, json.getCalendarName())\n+                            .orElseThrow(() -> new EntityNotExistsException(LOCAL.getMessage(\n+                                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+                            )))\n+                    );\n+                }\n+                /* Create new schedule */\n+                MM.createMaintenanceSchedule(\n+                        user,\n+                        json.getScheduleName(),\n+                        MaintenanceSchedule.ScheduleType.lookupByLabel(json.getScheduleType().toLowerCase()),\n+                        calendar\n+                );\n+            }\n+            else {\n+                /* Update existing schedule */\n+                String rescheduleStrategy = json.getRescheduleStrategy();\n+                Map<String, String> details = new HashMap<>();\n+                details.put(\"type\", json.getScheduleType().toLowerCase());\n+                //details.put(\"name\", json.getScheduleName());\n+                String label = json.getCalendarName();\n+                details.put(\"calendar\", label.equals(\"<None>\") ? \"\" : label);\n+                RescheduleResult result = MM.updateMaintenanceSchedule(user, json.getScheduleName(), details,\n+                        MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy)));\n+                handleRescheduleResult(List.of(result), rescheduleStrategy);\n+            }\n+        }\n+        catch (EntityNotExistsException | EntityExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));\n+        }\n+    }\n+\n+    /**\n+     * Refresh calendar data from url\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String refreshCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        try {\n+            String strategy = json.getRescheduleStrategy();\n+            List<RescheduleResult> results = MM.refreshCalendar(\n+                    user,\n+                    json.getCalendarName(),\n+                    MM.mapRescheduleStrategyStrings(List.of(strategy))\n+            );\n+            handleRescheduleResult(results, strategy);\n+        }\n+        catch (EntityNotExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+            ))));\n+        }\n+        catch (DownloadException e) {\n+            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+            ))));\n+        }\n+\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Deletes a given schedule\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorzed user\n+     * @return the result JSON object\n+     */\n+    public static String deleteSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        String name = json.getScheduleName();\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndName(user, name);\n+        if (schedule.isPresent()) {\n+            MM.remove(user, schedule.get());\n+        }\n+        else {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Deletes a given calendar\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorzed user\n+     * @return the result JSON object\n+     */\n+    public static String deleteCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        String name = json.getCalendarName();\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndLabel(user, name);\n+        if (calendar.isPresent()) {\n+            String strategy = json.getRescheduleStrategy();\n+            handleRescheduleResult(MM.remove(user, calendar.get(), strategy.equals(\"Cancel\")), strategy);\n+        }\n+        else {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+        return json(response, ResultJson.success());\n+    }\n+\n+    private static void handleRescheduleResult(List<RescheduleResult> results, String strategy) {\n+        results.forEach(result -> {\n+            if (!result.isSuccess()) {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMDA0OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440020048", "bodyText": "We definitely want to display all of the failed results, but due to the lack of time I chose the minimalist approach. We cannot use a simple notification message to display multiple failures on the frontend, so we need to come up with something else here.", "author": "parlt91", "createdAt": "2020-06-15T08:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzA1MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437443051", "bodyText": "Later todo: As discussed, this might be a good place for a specialized JPQL query. Moreover, it'd be great if we had a query that can handle multiple entities instead of calling this method N-times.", "author": "hustodemon", "createdAt": "2020-06-09T13:57:38Z", "path": "java/code/src/com/suse/manager/webui/controllers/MaintenanceController.java", "diffHunk": "@@ -0,0 +1,498 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.suse.manager.webui.controllers;\n+\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.json;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withCsrfToken;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUser;\n+import static com.suse.manager.webui.utils.SparkApplicationHelper.withUserPreferences;\n+import static spark.Spark.delete;\n+import static spark.Spark.get;\n+import static spark.Spark.post;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.common.util.download.DownloadException;\n+import com.redhat.rhn.domain.user.User;\n+import com.redhat.rhn.manager.EntityExistsException;\n+import com.redhat.rhn.manager.EntityNotExistsException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.suse.manager.maintenance.MaintenanceManager;\n+import com.suse.manager.maintenance.RescheduleResult;\n+import com.suse.manager.model.maintenance.MaintenanceCalendar;\n+import com.suse.manager.model.maintenance.MaintenanceSchedule;\n+import com.suse.manager.webui.utils.gson.MaintenanceWindowJson;\n+import com.suse.manager.webui.utils.gson.ResultJson;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import spark.ModelAndView;\n+import spark.Request;\n+import spark.Response;\n+import spark.Spark;\n+import spark.template.jade.JadeTemplateEngine;\n+\n+/**\n+ * Controller class providing the backend for API calls to work with maintenance windows.\n+ */\n+public class MaintenanceController {\n+\n+    private static final Gson GSON = new GsonBuilder().create();\n+    private static final MaintenanceManager MM = MaintenanceManager.instance();\n+    private static final LocalizationService LOCAL = LocalizationService.getInstance();\n+\n+    private MaintenanceController() { }\n+\n+    /**\n+     * Invoked from Router. Initialize routes for Systems Views.\n+     *\n+     * @param jade the template engine\n+     */\n+    public static void initRoutes(JadeTemplateEngine jade) {\n+        get(\"/manager/schedule/maintenance/schedules\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceSchedules))),\n+                jade);\n+        get(\"/manager/schedule/maintenance/calendars\",\n+                withUserPreferences(withCsrfToken(withUser(MaintenanceController::maintenanceCalendars))),\n+                jade);\n+        get(\"/manager/api/maintenance/schedule/list\", withUser(MaintenanceController::listSchedules));\n+        get(\"/manager/api/maintenance/calendar/list\", withUser(MaintenanceController::listCalendars));\n+        get(\"/manager/api/maintenance/schedule/:id/details\", withUser(MaintenanceController::getScheduleDetails));\n+        get(\"/manager/api/maintenance/calendar/:id/details\", withUser(MaintenanceController::getCalendarDetails));\n+        get(\"/manager/api/maintenance/calendar\", withUser(MaintenanceController::getCalendarNames));\n+        post(\"/manager/api/maintenance/schedule/save\", withUser(MaintenanceController::saveSchedule));\n+        post(\"/manager/api/maintenance/calendar/save\", withUser(MaintenanceController::saveCalendar));\n+        post(\"/manager/api/maintenance/calendar/refresh\", withUser(MaintenanceController::refreshCalendar));\n+        delete(\"/manager/api/maintenance/schedule/delete\", withUser(MaintenanceController::deleteSchedule));\n+        delete(\"/manager/api/maintenance/calendar/delete\", withUser(MaintenanceController::deleteCalendar));\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Schedules page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceSchedules(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"schedule\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Handler for the Maintenance Calendars page.\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the current user\n+     * @return the ModelAndView object to render the page\n+     */\n+    public static ModelAndView maintenanceCalendars(Request request, Response response, User user) {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"type\", \"calendar\");\n+        return new ModelAndView(params, \"templates/schedule/maintenance-windows.jade\");\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Schedules visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listSchedules(Request request, Response response, User user) {\n+        List<MaintenanceSchedule> schedules = MM.listMaintenanceSchedulesByUser(user);\n+        return json(response, schedulesToJson(schedules));\n+    }\n+\n+    /**\n+     * Processes a GET request to get a list of all Maintenance Calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String listCalendars(Request request, Response response, User user) {\n+        List<MaintenanceCalendar> calendars = MM.listCalendarsByUser(user);\n+        return json(response, calendarsToJson(user, calendars));\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a schedule identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getScheduleDetails(Request request, Response response, User user) {\n+        Long scheduleId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndId(user, scheduleId);\n+        if (schedule.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.id.not.exists\", scheduleId\n+            ))));\n+        }\n+        json.setScheduleId(schedule.get().getId());\n+        json.setScheduleName(schedule.get().getName());\n+        json.setScheduleType(schedule.get().getScheduleType().toString());\n+\n+        schedule.get().getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+            json.setCalendarData(maintenanceCalendar.getIcal());\n+            maintenanceCalendar.getUrlOpt().ifPresent(json::setCalendarUrl);\n+        });\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the details of a calendar identified by its id\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarDetails(Request request, Response response, User user) {\n+        Long calendarId = Long.parseLong(request.params(\"id\"));\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndId(user, calendarId);\n+        if (calendar.isEmpty()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.id.not.exists\", calendarId\n+            ))));\n+        }\n+        json.setCalendarId(calendar.get().getId());\n+        json.setCalendarName(calendar.get().getLabel());\n+        json.setCalendarData(calendar.get().getIcal());\n+        calendar.get().getUrlOpt().ifPresent(json::setCalendarUrl);\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar.get()).stream().map(\n+                schedule -> Map.ofEntries(\n+                        Map.entry(\"id\", schedule.getId().toString()),\n+                        Map.entry(\"name\", schedule.getName())\n+                )\n+        ).collect(Collectors.toList()));\n+\n+        return json(response, json);\n+    }\n+\n+    /**\n+     * Processes a GET request to get the names of all calendars visible to given user\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorized user\n+     * @return the result JSON object\n+     */\n+    public static String getCalendarNames(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+\n+        List<String> calendarNames = new ArrayList<>();\n+        calendarNames.add(\"<None>\");\n+        calendarNames.addAll(MM.listCalendarLabelsByUser(user));\n+\n+        return json(response, calendarNames);\n+    }\n+\n+    /**\n+     * Create or update a schedule\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getScheduleName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.schedule.name.empty\"\n+            ))));\n+        }\n+        createOrUpdateSchedule(user, json);\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Create or update a calendar\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String saveCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        if (json.getCalendarName().isBlank()) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.empty\"\n+            ))));\n+        }\n+        else if (json.getCalendarName().equals(\"<None>\")) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.name.invalid\"\n+            ))));\n+        }\n+        else if (json.getCalendarUrl().isBlank() && json.getCalendarData() == null) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.data.empty\"\n+            ))));\n+        }\n+\n+        MM.lookupCalendarByUserAndLabel(user, json.getCalendarName()).ifPresentOrElse(\n+                /* update existing calendar */\n+                calendar -> {\n+                    if (json.getCalendarId() == null) {\n+                        Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.exists\", json.getCalendarName()\n+                        ))));\n+                    }\n+                    Map<String, String> details = new HashMap<>();\n+                    String rescheduleStrategy = json.getRescheduleStrategy();\n+                    details.put(\"label\", calendar.getLabel());\n+                    if (!json.getCalendarUrl().isBlank()) {\n+                        details.put(\"url\", json.getCalendarUrl());\n+                    }\n+                    else {\n+                        details.put(\"ical\", json.getCalendarData());\n+                    }\n+\n+                    try {\n+                        List<RescheduleResult> results = MM.updateCalendar(user, calendar.getLabel(), details,\n+                                MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy))\n+                        );\n+                        handleRescheduleResult(results, rescheduleStrategy);\n+                    }\n+                    catch (DownloadException e) {\n+                        Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                        ))));\n+                    }\n+                },\n+                /* Create new calendar */\n+                () -> {\n+                    if (json.getCalendarData() == null) {\n+                        try {\n+                            MM.createMaintenanceCalendarWithUrl(user, json.getCalendarName(), json.getCalendarUrl());\n+                        }\n+                        catch (DownloadException e) {\n+                            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+                            ))));\n+                        }\n+                    }\n+                    else {\n+                        MM.createMaintenanceCalendar(user, json.getCalendarName(), json.getCalendarData());\n+                    }\n+                }\n+        );\n+        return json(response, ResultJson.success());\n+    }\n+\n+    private static void createOrUpdateSchedule(User user, MaintenanceWindowJson json) {\n+        try {\n+            if (json.getScheduleId() == null) {\n+                Optional<MaintenanceCalendar> calendar = Optional.empty();\n+                if (!json.getCalendarName().equals(\"<None>\")) {\n+                    /* Lookup calendar */\n+                    calendar = Optional.of(MM.lookupCalendarByUserAndLabel(user, json.getCalendarName())\n+                            .orElseThrow(() -> new EntityNotExistsException(LOCAL.getMessage(\n+                                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+                            )))\n+                    );\n+                }\n+                /* Create new schedule */\n+                MM.createMaintenanceSchedule(\n+                        user,\n+                        json.getScheduleName(),\n+                        MaintenanceSchedule.ScheduleType.lookupByLabel(json.getScheduleType().toLowerCase()),\n+                        calendar\n+                );\n+            }\n+            else {\n+                /* Update existing schedule */\n+                String rescheduleStrategy = json.getRescheduleStrategy();\n+                Map<String, String> details = new HashMap<>();\n+                details.put(\"type\", json.getScheduleType().toLowerCase());\n+                //details.put(\"name\", json.getScheduleName());\n+                String label = json.getCalendarName();\n+                details.put(\"calendar\", label.equals(\"<None>\") ? \"\" : label);\n+                RescheduleResult result = MM.updateMaintenanceSchedule(user, json.getScheduleName(), details,\n+                        MM.mapRescheduleStrategyStrings(List.of(rescheduleStrategy)));\n+                handleRescheduleResult(List.of(result), rescheduleStrategy);\n+            }\n+        }\n+        catch (EntityNotExistsException | EntityExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(e.getMessage())));\n+        }\n+    }\n+\n+    /**\n+     * Refresh calendar data from url\n+     *\n+     * @param request the request object\n+     * @param response the response obejct\n+     * @param user the authorized user\n+     * @return string containing the JSON response\n+     */\n+    public static String refreshCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        try {\n+            String strategy = json.getRescheduleStrategy();\n+            List<RescheduleResult> results = MM.refreshCalendar(\n+                    user,\n+                    json.getCalendarName(),\n+                    MM.mapRescheduleStrategyStrings(List.of(strategy))\n+            );\n+            handleRescheduleResult(results, strategy);\n+        }\n+        catch (EntityNotExistsException e) {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.not.exists\", json.getCalendarName()\n+            ))));\n+        }\n+        catch (DownloadException e) {\n+            Spark.halt(HttpStatus.SC_INTERNAL_SERVER_ERROR, GSON.toJson(ResultJson.error(LOCAL.getMessage(\n+                    \"maintenance.calendar.fetch.error\", json.getCalendarUrl()\n+            ))));\n+        }\n+\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Deletes a given schedule\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorzed user\n+     * @return the result JSON object\n+     */\n+    public static String deleteSchedule(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        String name = json.getScheduleName();\n+        Optional<MaintenanceSchedule> schedule = MM.lookupMaintenanceScheduleByUserAndName(user, name);\n+        if (schedule.isPresent()) {\n+            MM.remove(user, schedule.get());\n+        }\n+        else {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+        return json(response, ResultJson.success());\n+    }\n+\n+    /**\n+     * Deletes a given calendar\n+     *\n+     * @param request the request object\n+     * @param response the response object\n+     * @param user the authorzed user\n+     * @return the result JSON object\n+     */\n+    public static String deleteCalendar(Request request, Response response, User user) {\n+        response.type(\"application/json\");\n+        MaintenanceWindowJson json = GSON.fromJson(request.body(), MaintenanceWindowJson.class);\n+\n+        String name = json.getCalendarName();\n+        Optional<MaintenanceCalendar> calendar = MM.lookupCalendarByUserAndLabel(user, name);\n+        if (calendar.isPresent()) {\n+            String strategy = json.getRescheduleStrategy();\n+            handleRescheduleResult(MM.remove(user, calendar.get(), strategy.equals(\"Cancel\")), strategy);\n+        }\n+        else {\n+            Spark.halt(HttpStatus.SC_BAD_REQUEST);\n+        }\n+        return json(response, ResultJson.success());\n+    }\n+\n+    private static void handleRescheduleResult(List<RescheduleResult> results, String strategy) {\n+        results.forEach(result -> {\n+            if (!result.isSuccess()) {\n+                String affectedSchedule = result.getScheduleName();\n+                String message = LOCAL.getMessage(strategy.equals(\"Cancel\") ?\n+                        \"maintenance.action.reschedule.error.cancel\" :\n+                        \"maintenance.action.reschedule.error.fail\",\n+                        affectedSchedule);\n+                Spark.halt(HttpStatus.SC_BAD_REQUEST, GSON.toJson(ResultJson.error(message)));\n+            }\n+        });\n+    }\n+\n+    private static List<MaintenanceWindowJson> schedulesToJson(List<MaintenanceSchedule> schedules) {\n+        return schedules.stream().map(MaintenanceController::scheduleToJson).collect(Collectors.toList());\n+    }\n+\n+    private static List<MaintenanceWindowJson> calendarsToJson(User user, List<MaintenanceCalendar> calendars) {\n+        return calendars.stream().map(calendar -> calendarToJson(user, calendar)).collect(Collectors.toList());\n+    }\n+\n+    private static MaintenanceWindowJson scheduleToJson(MaintenanceSchedule schedule) {\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        json.setScheduleId(schedule.getId());\n+        json.setScheduleName(schedule.getName());\n+        schedule.getCalendarOpt().ifPresent(maintenanceCalendar -> {\n+            json.setCalendarId(maintenanceCalendar.getId());\n+            json.setCalendarName(maintenanceCalendar.getLabel());\n+        });\n+\n+        return json;\n+    }\n+\n+    private static MaintenanceWindowJson calendarToJson(User user, MaintenanceCalendar calendar) {\n+        MaintenanceWindowJson json = new MaintenanceWindowJson();\n+\n+        json.setCalendarId(calendar.getId());\n+        json.setCalendarName(calendar.getLabel());\n+\n+        json.setScheduleNames(MM.listMaintenanceSchedulesByCalendar(user, calendar).stream().map(", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDA3OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437444079", "bodyText": "Long-term todo: As we discussed, maybe this could be split into Schedule and Calendar object.", "author": "hustodemon", "createdAt": "2020-06-09T13:58:39Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/MaintenanceWindowJson.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.utils.gson;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JSON representation of the Maintenance Window scheduling\n+ */\n+public class MaintenanceWindowJson {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDY4MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437444680", "bodyText": "Nit: formatting.", "author": "hustodemon", "createdAt": "2020-06-09T13:59:22Z", "path": "web/html/src/manager/maintenance/maintenance-windows.css", "diffHunk": "@@ -0,0 +1,14 @@\n+:global(.list-tag-link) {\n+      display: inline-block;", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzQwMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437447403", "bodyText": "Is this annotation needed?", "author": "hustodemon", "createdAt": "2020-06-09T14:02:58Z", "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -246,6 +246,34 @@ protected void save(MaintenanceCalendar calendar) {\n             .list();\n     }\n \n+    /**\n+     * List Maintenance Schedules belonging to the given User\n+     * @param user the user\n+     * @return a list of Maintenance Schedules\n+     */\n+    @SuppressWarnings(\"unchecked\")", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxMjM3OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440012379", "bodyText": "All the other queries in this file added by mc also seem to have it. And it gets rid of annoying warnings", "author": "parlt91", "createdAt": "2020-06-15T08:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxODQ3Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440718477", "bodyText": "What warnings? I don't see any.", "author": "hustodemon", "createdAt": "2020-06-16T09:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0MjkzNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r441342934", "bodyText": "It displays a unchecked assignment warning if removed.\nAnyway I am not opposed to removing it, but we should stay consistent.\nEither remove or add it everywhere.", "author": "parlt91", "createdAt": "2020-06-17T07:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzODY3NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437538675", "bodyText": "Just questioning to make sure: all users are allowed to reach these pages right? If so, then this is fine.", "author": "ncounter", "createdAt": "2020-06-09T15:51:48Z", "path": "java/code/src/com/suse/manager/webui/menu/MenuTree.java", "diffHunk": "@@ -288,6 +288,9 @@\n                 .addChild(new MenuItem(\"Action Chains\").withPrimaryUrl(\"/rhn/schedule/ActionChains.do\")\n                     .withAltUrl(\"/rhn/schedule/ActionChain.do\"))\n                 .addChild(new MenuItem(\"Recurring States\").withPrimaryUrl(\"/rhn/manager/schedule/recurring-states\"))\n+                .addChild(new MenuItem(\"Maintenance Windows\").withDir(\"/rhn/manager/schedule/maintenance\")", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxMDExMQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440010111", "bodyText": "I am not sure actually. 'normal' users are not allowed to edit/delete, but I don't know about viewing schedules/calendars. I will clarify this.", "author": "parlt91", "createdAt": "2020-06-15T08:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTc4Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r441675786", "bodyText": "Restricted destructive operations to OrgAdmin user only as discussed", "author": "parlt91", "createdAt": "2020-06-17T16:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzODY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MDMyNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437540324", "bodyText": "I'd better drop possible values of a filed: what if in the future the set change? This comment would be outdated but not easy to catch.", "author": "ncounter", "createdAt": "2020-06-09T15:53:59Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/MaintenanceWindowJson.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.utils.gson;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * JSON representation of the Maintenance Window scheduling\n+ */\n+public class MaintenanceWindowJson {\n+\n+    /** schedule ID */\n+    private Long scheduleId;\n+\n+    /** Name of the schedule */\n+    private String scheduleName;\n+\n+    /** Type of the schedule\n+     * Either SINGLE or MULTI", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1MTA2OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437551069", "bodyText": "I see a pattern here where you just want to return the String with the first letter capitalized only.\nWhat about using lodash lib? I think we have it in our modules.\nhttps://lodash.com/docs#capitalize\n_.capitalize(\"THE STriNG you waNT TO return\") -> \"The string you want to return\"", "author": "ncounter", "createdAt": "2020-06-09T16:09:53Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1MzY3MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437553671", "bodyText": "Wow! this is nice but very implicit. I'd rather have something more clear in terms of code-flow, or at least write a comment to clarify what and why you are doing this, like explaining the logic behind.", "author": "ncounter", "createdAt": "2020-06-09T16:13:52Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxOTA4NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437719084", "bodyText": "You can omit brackets to wrap a ternary operator. We are not used to do it :)", "author": "ncounter", "createdAt": "2020-06-09T20:59:25Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjQ5OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437722498", "bodyText": "IIRC @mcalmer already caught me in this pattern: we cannot parametrize values inside the t() function because texts will be extracted and translated before runtime, do I remember correctly @mcalmer ? If so, we should receive a translated text value from the backend first.\nAnyway, I am afraid I am a bit lost in this: is this a field value that the user populate so we should not translate at all or? It would be nice if you can add even some rough and wip screenshot in this PR to get a picture of what we are talking about. Thank you in advance :)", "author": "ncounter", "createdAt": "2020-06-09T21:05:55Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwNDYyNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440004625", "bodyText": "Right this value is populated by the user, so it's not translated.", "author": "parlt91", "createdAt": "2020-06-15T08:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjc5NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437722794", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:06:31Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Assigned Calendar\")}:</td>\n+                            <td>{t(data.calendarName)}</td>", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwNDcyMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440004722", "bodyText": "Same as above", "author": "parlt91", "createdAt": "2020-06-15T08:16:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjg4OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437722889", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:06:43Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Assigned Calendar\")}:</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Schedule Type\")}:</td>\n+                            <td>{t(scheduleTypeToString(data.scheduleType))}</td>", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwNjAxMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440006010", "bodyText": "I am not sure about this one. Schedule types are Single and Multi. If those are going to be translated, we need to to something about it.", "author": "parlt91", "createdAt": "2020-06-15T08:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNTIzNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437725235", "bodyText": "It works nice, but I would rephrase just to be less redundant:\nThis will remove the current schedule from all the systems assigned to it.", "author": "ncounter", "createdAt": "2020-06-09T21:11:31Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Assigned Calendar\")}:</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Schedule Type\")}:</td>\n+                            <td>{t(scheduleTypeToString(data.scheduleType))}</td>\n+                        </tr>\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance schedule\")}\n+                              content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                                  \"Deleting the schedule will unassign all systems from this schedule.\")}", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNjE3Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437726176", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:13:37Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Assigned Calendar\")}:</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Schedule Type\")}:</td>\n+                            <td>{t(scheduleTypeToString(data.scheduleType))}</td>\n+                        </tr>\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance schedule\")}\n+                              content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                                  \"Deleting the schedule will unassign all systems from this schedule.\")}\n+                              onConfirm={() => this.props.onDelete(this.props.data)}\n+                />\n+            </BootstrapPanel>\n+        );\n+    }\n+\n+    renderCalendarDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Calendar Name\")}</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Used by schedule\")}:</td>\n+                            <td>{t(data.scheduleNames.map(name => name.name).join(\", \"))}</td>\n+                        </tr>\n+                        {data.calendarUrl &&\n+                        <tr>\n+                            <td>{t(\"Url\")}:</td>\n+                            <td>{t(data.calendarUrl)}</td>\n+                        </tr>\n+                        }\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance calendar\")}\n+                              content={\n+                                  <Form model={{strategy: this.state.strategy}} onChange={this.setCheck}>\n+                                      <div>{t(\"Are you sure you want to delete the selected item?\")}</div>\n+                                      <div>{t(\"Deleting this calendar will unassign all schedules from this calendar.\")}</div>", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNzE3MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437727170", "bodyText": "Code alignment style:\n{\n  data.calendarUrl &&\n      <tr>....\n      </tr>\n}", "author": "ncounter", "createdAt": "2020-06-09T21:15:45Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Assigned Calendar\")}:</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Schedule Type\")}:</td>\n+                            <td>{t(scheduleTypeToString(data.scheduleType))}</td>\n+                        </tr>\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance schedule\")}\n+                              content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                                  \"Deleting the schedule will unassign all systems from this schedule.\")}\n+                              onConfirm={() => this.props.onDelete(this.props.data)}\n+                />\n+            </BootstrapPanel>\n+        );\n+    }\n+\n+    renderCalendarDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Calendar Name\")}</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Used by schedule\")}:</td>\n+                            <td>{t(data.scheduleNames.map(name => name.name).join(\", \"))}</td>\n+                        </tr>\n+                        {data.calendarUrl &&\n+                        <tr>\n+                            <td>{t(\"Url\")}:</td>\n+                            <td>{t(data.calendarUrl)}</td>\n+                        </tr>\n+                        }", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyODc0OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437728748", "bodyText": "It can stay in a single line I guess. Anyway, isn't the Messages component able to digest items = null? It would be nice to get rid of the check here.", "author": "ncounter", "createdAt": "2020-06-09T21:19:07Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Assigned Calendar\")}:</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Schedule Type\")}:</td>\n+                            <td>{t(scheduleTypeToString(data.scheduleType))}</td>\n+                        </tr>\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance schedule\")}\n+                              content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                                  \"Deleting the schedule will unassign all systems from this schedule.\")}\n+                              onConfirm={() => this.props.onDelete(this.props.data)}\n+                />\n+            </BootstrapPanel>\n+        );\n+    }\n+\n+    renderCalendarDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Calendar Name\")}</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Used by schedule\")}:</td>\n+                            <td>{t(data.scheduleNames.map(name => name.name).join(\", \"))}</td>\n+                        </tr>\n+                        {data.calendarUrl &&\n+                        <tr>\n+                            <td>{t(\"Url\")}:</td>\n+                            <td>{t(data.calendarUrl)}</td>\n+                        </tr>\n+                        }\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance calendar\")}\n+                              content={\n+                                  <Form model={{strategy: this.state.strategy}} onChange={this.setCheck}>\n+                                      <div>{t(\"Are you sure you want to delete the selected item?\")}</div>\n+                                      <div>{t(\"Deleting this calendar will unassign all schedules from this calendar.\")}</div>\n+                                      <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions?\")}</b>} divClass=\"col-md-6\" />\n+                                  </Form>\n+                              }\n+                              onConfirm={() => this.props.onDelete(this.addStrategy())}\n+                />\n+            </BootstrapPanel>\n+        );\n+    }\n+\n+    render() {\n+        const buttons = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    text={t(\"Back\")}\n+                    icon=\"fa-chevron-left\"\n+                    title={t(\"Back\")}\n+                    className=\"btn-default\"\n+                    handler={() => this.props.onCancel(\"back\")}\n+                />\n+                <Button\n+                    text={t(\"Edit\")}\n+                    icon=\"fa-edit\"\n+                    title={t(\"Edit\")}\n+                    className=\"btn-default\"\n+                    handler={() => this.props.onEdit(\n+                        this.state.type === \"schedule\" ? this.props.data.scheduleId : this.props.data.calendarId\n+                    )}\n+                />\n+                <ModalButton\n+                    text={t(\"Delete\")}\n+                    icon=\"fa-trash\"\n+                    title={t(\"Delete\")}\n+                    target=\"delete-modal\"\n+                    className=\"btn-default\"\n+                />\n+            </div>\n+        ];\n+\n+        return (\n+            <TopPanel\n+                title={this.props.data.scheduleName}\n+                icon=\"spacewalk-icon-salt\"\n+                helpUrl=\"\"\n+                button={buttons}\n+            >\n+                { this.state.messages ?\n+                    <Messages items={this.state.messages}/> : null }", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMDE5NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437730194", "bodyText": "Empty line", "author": "ncounter", "createdAt": "2020-06-09T21:22:10Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -0,0 +1,178 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const {Button} = require(\"components/buttons\");\n+const {ModalButton} = require(\"components/dialog/ModalButton\");\n+const {DeleteDialog} = require(\"components/dialog/DeleteDialog\");\n+const { TopPanel } = require('components/panels/TopPanel');\n+const {Messages} = require(\"components/messages\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const { BootstrapPanel } = require('components/panels/BootstrapPanel');\n+\n+const scheduleTypeToString = (scheduleType) => {\n+    switch (scheduleType) {\n+        case \"MULTI\":\n+            return \"Multi\";\n+        case \"SINGLE\":\n+            return \"Single\";\n+    }\n+    return null;\n+}\n+\n+class MaintenanceWindowsDetails extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarData: this.props.data.calendarData,\n+            messages: [],\n+        };\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.props.data;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Schedule Name\")}</td>\n+                            <td>{t(data.scheduleName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Assigned Calendar\")}:</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Schedule Type\")}:</td>\n+                            <td>{t(scheduleTypeToString(data.scheduleType))}</td>\n+                        </tr>\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance schedule\")}\n+                              content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                                  \"Deleting the schedule will unassign all systems from this schedule.\")}\n+                              onConfirm={() => this.props.onDelete(this.props.data)}\n+                />\n+            </BootstrapPanel>\n+        );\n+    }\n+\n+    renderCalendarDetails(data) {\n+        return (\n+            <BootstrapPanel title={t(\"Schedule Details\")}>\n+                <div className=\"table-responsive\">\n+                    <table className=\"table\">\n+                        <tbody>\n+                        <tr>\n+                            <td>{t(\"Calendar Name\")}</td>\n+                            <td>{t(data.calendarName)}</td>\n+                        </tr>\n+                        <tr>\n+                            <td>{t(\"Used by schedule\")}:</td>\n+                            <td>{t(data.scheduleNames.map(name => name.name).join(\", \"))}</td>\n+                        </tr>\n+                        {data.calendarUrl &&\n+                        <tr>\n+                            <td>{t(\"Url\")}:</td>\n+                            <td>{t(data.calendarUrl)}</td>\n+                        </tr>\n+                        }\n+                        </tbody>\n+                    </table>\n+                </div>\n+                <DeleteDialog id=\"delete-modal\"\n+                              title={t(\"Delete maintenance calendar\")}\n+                              content={\n+                                  <Form model={{strategy: this.state.strategy}} onChange={this.setCheck}>\n+                                      <div>{t(\"Are you sure you want to delete the selected item?\")}</div>\n+                                      <div>{t(\"Deleting this calendar will unassign all schedules from this calendar.\")}</div>\n+                                      <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions?\")}</b>} divClass=\"col-md-6\" />\n+                                  </Form>\n+                              }\n+                              onConfirm={() => this.props.onDelete(this.addStrategy())}\n+                />\n+            </BootstrapPanel>\n+        );\n+    }\n+\n+    render() {\n+        const buttons = [\n+            <div className=\"btn-group pull-right\">\n+                <Button\n+                    text={t(\"Back\")}\n+                    icon=\"fa-chevron-left\"\n+                    title={t(\"Back\")}\n+                    className=\"btn-default\"\n+                    handler={() => this.props.onCancel(\"back\")}\n+                />\n+                <Button\n+                    text={t(\"Edit\")}\n+                    icon=\"fa-edit\"\n+                    title={t(\"Edit\")}\n+                    className=\"btn-default\"\n+                    handler={() => this.props.onEdit(\n+                        this.state.type === \"schedule\" ? this.props.data.scheduleId : this.props.data.calendarId\n+                    )}\n+                />\n+                <ModalButton\n+                    text={t(\"Delete\")}\n+                    icon=\"fa-trash\"\n+                    title={t(\"Delete\")}\n+                    target=\"delete-modal\"\n+                    className=\"btn-default\"\n+                />\n+            </div>\n+        ];\n+\n+        return (\n+            <TopPanel\n+                title={this.props.data.scheduleName}\n+                icon=\"spacewalk-icon-salt\"\n+                helpUrl=\"\"\n+                button={buttons}\n+            >\n+                { this.state.messages ?\n+                    <Messages items={this.state.messages}/> : null }\n+                {this.state.type === \"schedule\" ? this.renderScheduleDetails(this.props.data)\n+                    : this.renderCalendarDetails(this.props.data)}\n+                {this.props.data.calendarData &&\n+                <div className=\"panel panel-default\">\n+                    <div className=\"panel-heading\">\n+                        <h4>\n+                            {this.props.data.calendarName}\n+                        </h4>\n+                    </div>\n+                    <div className=\"panel-body\">\n+                        <pre>\n+                            {this.props.data.calendarData}\n+                        </pre>\n+                    </div>\n+                </div>\n+                }\n+", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMzgxMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437733813", "bodyText": "this.state should be treated as immutable. Depending on the data shape maybe you can use something like this.setState({schedule})?", "author": "ncounter", "createdAt": "2020-06-09T21:30:13Z", "path": "web/html/src/manager/maintenance/maintenance-windows-edit.js", "diffHunk": "@@ -0,0 +1,287 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+\n+const ReactDOM = require(\"react-dom\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DangerDialog = require(\"components/dialog/DangerDialog\").DangerDialog;\n+const { Combobox } = require(\"components/combobox\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const { Radio } = require('components/input/Radio');\n+const { Check } = require('components/input/Check');\n+\n+class MaintenanceWindowsEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarDataText: \"\",\n+            selectedCalendar: 0\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDEwNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437734104", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:30:47Z", "path": "web/html/src/manager/maintenance/maintenance-windows-edit.js", "diffHunk": "@@ -0,0 +1,287 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+\n+const ReactDOM = require(\"react-dom\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DangerDialog = require(\"components/dialog/DangerDialog\").DangerDialog;\n+const { Combobox } = require(\"components/combobox\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const { Radio } = require('components/input/Radio');\n+const { Check } = require('components/input/Check');\n+\n+class MaintenanceWindowsEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarDataText: \"\",\n+            selectedCalendar: 0\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+        this.state.calendarDataText = schedule.calendarUrl;\n+        Object.assign(this.state, {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDE3Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437734173", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:30:54Z", "path": "web/html/src/manager/maintenance/maintenance-windows-edit.js", "diffHunk": "@@ -0,0 +1,287 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+\n+const ReactDOM = require(\"react-dom\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DangerDialog = require(\"components/dialog/DangerDialog\").DangerDialog;\n+const { Combobox } = require(\"components/combobox\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const { Radio } = require('components/input/Radio');\n+const { Check } = require('components/input/Check');\n+\n+class MaintenanceWindowsEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarDataText: \"\",\n+            selectedCalendar: 0\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+        this.state.calendarDataText = schedule.calendarUrl;\n+        Object.assign(this.state, {\n+            calendarAdded: schedule.calendarName ? true : false\n+        })\n+        if (this.state.type === \"schedule\" && this.props.calendarNames.length > 1 && this.props.schedule.calendarName) {\n+            Object.assign(this.state, {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNjY2Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437736667", "bodyText": "Nothing really dangerous but I am against inline style. Much better if you use a className to maybe just to the one line CSS rule. If it does not exist you can just create a new one in susemanager-theme.less maybe.", "author": "ncounter", "createdAt": "2020-06-09T21:36:27Z", "path": "web/html/src/manager/maintenance/maintenance-windows-edit.js", "diffHunk": "@@ -0,0 +1,287 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+\n+const ReactDOM = require(\"react-dom\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DangerDialog = require(\"components/dialog/DangerDialog\").DangerDialog;\n+const { Combobox } = require(\"components/combobox\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const { Radio } = require('components/input/Radio');\n+const { Check } = require('components/input/Check');\n+\n+class MaintenanceWindowsEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarDataText: \"\",\n+            selectedCalendar: 0\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+        this.state.calendarDataText = schedule.calendarUrl;\n+        Object.assign(this.state, {\n+            calendarAdded: schedule.calendarName ? true : false\n+        })\n+        if (this.state.type === \"schedule\" && this.props.calendarNames.length > 1 && this.props.schedule.calendarName) {\n+            Object.assign(this.state, {\n+                selectedCalendar: this.props.calendarNames.filter(name => name.text === this.props.schedule.calendarName)[0].id\n+            });\n+        }\n+    };\n+\n+    setCalendarName = () => {\n+        return this.state.type === \"schedule\" ?\n+            ((this.state.calendarAdded && this.state.calendarName) ? this.state.calendarName : \"<None>\")\n+            : this.state.calendarName;\n+    };\n+\n+    isEdit = () => {\n+        return this.props.schedule ? true : false;\n+    };\n+\n+    onEdit = () => {\n+        return this.props.onEdit({\n+            scheduleId: this.state.scheduleId,\n+            scheduleName: this.state.scheduleName,\n+            scheduleType: this.state.scheduleType,\n+            calendarId: this.state.calendarId,\n+            calendarName: this.setCalendarName(),\n+            calendarData: this.state.calendarData,\n+            calendarUrl: (!this.isEdit() && this.state.calendarData) ? \"\" : this.state.calendarDataText,\n+            /* Reschedule strategy. false == 'FAIL', true == 'CANCEL' */\n+            strategy: this.state.strategy ? \"Cancel\" : \"Fail\"\n+        });\n+    };\n+\n+    onFormChanged = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    onCalendarDataTextChanged = (event) => {\n+        this.setState({\n+            calendarDataText: event.target.value\n+        });\n+    };\n+\n+    onIcalFileAttach = (event) => {\n+        this.setState({\n+            icalLoading: true\n+        });\n+        const reader = new FileReader();\n+        reader.onload = (e) => this.icalFileLoaded(e.target.result);\n+        reader.readAsText(event.target.files[0]);\n+        this.setState({\n+            calendarDataText: event.target.files[0].name\n+        });\n+    };\n+\n+    onIcalFileRemove = () => {\n+        document.getElementById(\"ical-data-upload\").value = \"\";\n+        this.setState({\n+            calendarData: undefined,\n+            calendarDataText: \"\",\n+        });\n+    };\n+\n+    handleFileAttach = () => {\n+        document.getElementById(\"ical-data-upload\").click();\n+    };\n+\n+    icalFileLoaded = (fileString) => {\n+        this.setState({\n+            calendarData: fileString,\n+            icalLoading: false\n+        });\n+    };\n+\n+    onSelectCalendar = (item) => {\n+        this.setState({\n+            selectedCalendar: item.id,\n+            calendarName: item.text\n+        })\n+    };\n+\n+    renderScheduleEdit() {\n+        const model = {\n+            scheduleName: this.state.scheduleName,\n+            scheduleType: this.state.scheduleType,\n+            calendarName: this.state.calendarName,\n+            strategy: this.state.strategy,\n+        }\n+        return (\n+            <Form onChange={this.onFormChanged} model={model}>\n+                <Text name=\"scheduleName\" required type=\"text\" label={t(\"Schedule Name\")}\n+                      labelClass=\"col-sm-3\" divClass=\"col-sm-6\"\n+                      disabled={this.isEdit()} />\n+                <Radio defaultValue=\"SINGLE\" name=\"scheduleType\" inline={true} label={t('Type')} labelClass=\"col-md-3\" divClass=\"col-md-6\"\n+                       items={[\n+                           {label: <b>{t('Single')}</b>, value: 'SINGLE'},\n+                           {label: <b>{t('Multi')}</b>, value: 'MULTI'},\n+                       ]}\n+                />\n+                {this.isEdit() &&\n+                <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions\")}</b>} divClass=\"col-md-6 col-md-offset-3\" />\n+                }\n+                <div className=\"form-group\">\n+                    <div className=\"col-md-6 col-md-offset-3\">\n+                        {!this.state.calendarAdded ?\n+                            <Button className=\"btn-default\" text=\"Add Calendar\" icon=\"fa-chevron-down \"\n+                                    handler={() => this.setState({calendarAdded: !this.state.calendarAdded})} />\n+                            :\n+                            <div className=\"panel panel-default\">\n+                                <div className=\"panel-heading\" style={{padding: \"0px\"}}>\n+                                    <Button text=\"Add Calendar\" icon=\"fa-chevron-up\"\n+                                            handler={() => this.setState({calendarAdded: !this.state.calendarAdded})} />\n+                                </div>\n+                                <div className=\"panel-body\">\n+                                    <div className=\"form-horizontal\">\n+                                        <div className=\"form-group\">\n+                                            <label className=\"col-md-3 control-label\">{t(\"Calendar\")}:</label>\n+                                            <div className=\"col-md-7\">\n+                                                <Combobox id=\"calendarSelect\" name=\"calendarSelect\"\n+                                                          data={this.props.calendarNames}\n+                                                          selectedId={this.state.selectedCalendar}\n+                                                          onSelect={this.onSelectCalendar}\n+                                                />\n+                                            </div>\n+                                        </div>\n+                                    </div>\n+                                </div>\n+                            </div>\n+                        }\n+                    </div>\n+                </div>\n+            </Form>\n+        )\n+    }\n+\n+    renderCalendarEdit() {\n+        const model = {\n+            calendarName: this.state.calendarName,\n+            strategy: this.state.strategy\n+        }\n+        return (\n+            <Form onChange={model => this.onFormChanged(model)} model={model}>\n+                <Text name=\"calendarName\" required type=\"text\" label={t(\"Calendar Name\")}\n+                      labelClass=\"col-md-3\" divClass=\"col-md-6\" disabled={this.isEdit()}/>\n+                {(this.isEdit() && !this.state.calendarUrl) &&\n+                <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions\")}</b>} divClass=\"col-md-6 col-md-offset-3\" />\n+                }\n+                <div className=\"form-horizontal\">\n+                    <div className=\"form-group\">\n+                        <label className=\"col-md-3 control-label\">{t(\"Calendar data\")}:</label>\n+                        {(!this.isEdit() || this.state.calendarUrl) &&\n+                        <div className={\"align-center col-md-\" + (this.isEdit() ? \"5\" : \"4\")} >\n+                            <input type=\"text\" className=\"form-control\"\n+                                   style={{textOverflow: \"ellipsis\"}}", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwODkxOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440008918", "bodyText": "It does definitely not exists in the .less file. But this only seems to be used here.\nSo I would move everything that's unique to this file to it's own css file and the stuff that might be reusable to susemanager-theme.less", "author": "parlt91", "createdAt": "2020-06-15T08:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNjY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNjkwNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437736906", "bodyText": "Same as before for the inline style.\nPossible hint: if you need just some space between pieces, you can use &nbsp;", "author": "ncounter", "createdAt": "2020-06-09T21:37:04Z", "path": "web/html/src/manager/maintenance/maintenance-windows-edit.js", "diffHunk": "@@ -0,0 +1,287 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+\n+const ReactDOM = require(\"react-dom\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DangerDialog = require(\"components/dialog/DangerDialog\").DangerDialog;\n+const { Combobox } = require(\"components/combobox\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const { Radio } = require('components/input/Radio');\n+const { Check } = require('components/input/Check');\n+\n+class MaintenanceWindowsEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarDataText: \"\",\n+            selectedCalendar: 0\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+        this.state.calendarDataText = schedule.calendarUrl;\n+        Object.assign(this.state, {\n+            calendarAdded: schedule.calendarName ? true : false\n+        })\n+        if (this.state.type === \"schedule\" && this.props.calendarNames.length > 1 && this.props.schedule.calendarName) {\n+            Object.assign(this.state, {\n+                selectedCalendar: this.props.calendarNames.filter(name => name.text === this.props.schedule.calendarName)[0].id\n+            });\n+        }\n+    };\n+\n+    setCalendarName = () => {\n+        return this.state.type === \"schedule\" ?\n+            ((this.state.calendarAdded && this.state.calendarName) ? this.state.calendarName : \"<None>\")\n+            : this.state.calendarName;\n+    };\n+\n+    isEdit = () => {\n+        return this.props.schedule ? true : false;\n+    };\n+\n+    onEdit = () => {\n+        return this.props.onEdit({\n+            scheduleId: this.state.scheduleId,\n+            scheduleName: this.state.scheduleName,\n+            scheduleType: this.state.scheduleType,\n+            calendarId: this.state.calendarId,\n+            calendarName: this.setCalendarName(),\n+            calendarData: this.state.calendarData,\n+            calendarUrl: (!this.isEdit() && this.state.calendarData) ? \"\" : this.state.calendarDataText,\n+            /* Reschedule strategy. false == 'FAIL', true == 'CANCEL' */\n+            strategy: this.state.strategy ? \"Cancel\" : \"Fail\"\n+        });\n+    };\n+\n+    onFormChanged = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    onCalendarDataTextChanged = (event) => {\n+        this.setState({\n+            calendarDataText: event.target.value\n+        });\n+    };\n+\n+    onIcalFileAttach = (event) => {\n+        this.setState({\n+            icalLoading: true\n+        });\n+        const reader = new FileReader();\n+        reader.onload = (e) => this.icalFileLoaded(e.target.result);\n+        reader.readAsText(event.target.files[0]);\n+        this.setState({\n+            calendarDataText: event.target.files[0].name\n+        });\n+    };\n+\n+    onIcalFileRemove = () => {\n+        document.getElementById(\"ical-data-upload\").value = \"\";\n+        this.setState({\n+            calendarData: undefined,\n+            calendarDataText: \"\",\n+        });\n+    };\n+\n+    handleFileAttach = () => {\n+        document.getElementById(\"ical-data-upload\").click();\n+    };\n+\n+    icalFileLoaded = (fileString) => {\n+        this.setState({\n+            calendarData: fileString,\n+            icalLoading: false\n+        });\n+    };\n+\n+    onSelectCalendar = (item) => {\n+        this.setState({\n+            selectedCalendar: item.id,\n+            calendarName: item.text\n+        })\n+    };\n+\n+    renderScheduleEdit() {\n+        const model = {\n+            scheduleName: this.state.scheduleName,\n+            scheduleType: this.state.scheduleType,\n+            calendarName: this.state.calendarName,\n+            strategy: this.state.strategy,\n+        }\n+        return (\n+            <Form onChange={this.onFormChanged} model={model}>\n+                <Text name=\"scheduleName\" required type=\"text\" label={t(\"Schedule Name\")}\n+                      labelClass=\"col-sm-3\" divClass=\"col-sm-6\"\n+                      disabled={this.isEdit()} />\n+                <Radio defaultValue=\"SINGLE\" name=\"scheduleType\" inline={true} label={t('Type')} labelClass=\"col-md-3\" divClass=\"col-md-6\"\n+                       items={[\n+                           {label: <b>{t('Single')}</b>, value: 'SINGLE'},\n+                           {label: <b>{t('Multi')}</b>, value: 'MULTI'},\n+                       ]}\n+                />\n+                {this.isEdit() &&\n+                <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions\")}</b>} divClass=\"col-md-6 col-md-offset-3\" />\n+                }\n+                <div className=\"form-group\">\n+                    <div className=\"col-md-6 col-md-offset-3\">\n+                        {!this.state.calendarAdded ?\n+                            <Button className=\"btn-default\" text=\"Add Calendar\" icon=\"fa-chevron-down \"\n+                                    handler={() => this.setState({calendarAdded: !this.state.calendarAdded})} />\n+                            :\n+                            <div className=\"panel panel-default\">\n+                                <div className=\"panel-heading\" style={{padding: \"0px\"}}>\n+                                    <Button text=\"Add Calendar\" icon=\"fa-chevron-up\"\n+                                            handler={() => this.setState({calendarAdded: !this.state.calendarAdded})} />\n+                                </div>\n+                                <div className=\"panel-body\">\n+                                    <div className=\"form-horizontal\">\n+                                        <div className=\"form-group\">\n+                                            <label className=\"col-md-3 control-label\">{t(\"Calendar\")}:</label>\n+                                            <div className=\"col-md-7\">\n+                                                <Combobox id=\"calendarSelect\" name=\"calendarSelect\"\n+                                                          data={this.props.calendarNames}\n+                                                          selectedId={this.state.selectedCalendar}\n+                                                          onSelect={this.onSelectCalendar}\n+                                                />\n+                                            </div>\n+                                        </div>\n+                                    </div>\n+                                </div>\n+                            </div>\n+                        }\n+                    </div>\n+                </div>\n+            </Form>\n+        )\n+    }\n+\n+    renderCalendarEdit() {\n+        const model = {\n+            calendarName: this.state.calendarName,\n+            strategy: this.state.strategy\n+        }\n+        return (\n+            <Form onChange={model => this.onFormChanged(model)} model={model}>\n+                <Text name=\"calendarName\" required type=\"text\" label={t(\"Calendar Name\")}\n+                      labelClass=\"col-md-3\" divClass=\"col-md-6\" disabled={this.isEdit()}/>\n+                {(this.isEdit() && !this.state.calendarUrl) &&\n+                <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions\")}</b>} divClass=\"col-md-6 col-md-offset-3\" />\n+                }\n+                <div className=\"form-horizontal\">\n+                    <div className=\"form-group\">\n+                        <label className=\"col-md-3 control-label\">{t(\"Calendar data\")}:</label>\n+                        {(!this.isEdit() || this.state.calendarUrl) &&\n+                        <div className={\"align-center col-md-\" + (this.isEdit() ? \"5\" : \"4\")} >\n+                            <input type=\"text\" className=\"form-control\"\n+                                   style={{textOverflow: \"ellipsis\"}}\n+                                   placeholder={t(\"Enter Url to ical file\")}\n+                                   value={this.state.calendarDataText}\n+                                   disabled={this.state.calendarData && !this.state.calendarUrl}\n+                                   onChange={this.onCalendarDataTextChanged}/>\n+                            {!this.state.calendarData && <b style={{paddingLeft: \"25px\"}}>or</b>}", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNzc5Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437737792", "bodyText": "Rephrase: Refreshing the calendar will reschedule all the affected actions", "author": "ncounter", "createdAt": "2020-06-09T21:39:15Z", "path": "web/html/src/manager/maintenance/maintenance-windows-edit.js", "diffHunk": "@@ -0,0 +1,287 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+\n+const ReactDOM = require(\"react-dom\");\n+const AsyncButton = require(\"components/buttons\").AsyncButton;\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DangerDialog = require(\"components/dialog/DangerDialog\").DangerDialog;\n+const { Combobox } = require(\"components/combobox\");\n+const { InnerPanel } = require(\"components/panels/InnerPanel\");\n+const { Form } = require('components/input/Form');\n+const { Text } = require('components/input/Text');\n+const { Radio } = require('components/input/Radio');\n+const { Check } = require('components/input/Check');\n+\n+class MaintenanceWindowsEdit extends React.Component {\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            calendarDataText: \"\",\n+            selectedCalendar: 0\n+        };\n+\n+        if(this.isEdit()) {\n+            this.setSchedule(this.props.schedule);\n+        }\n+    }\n+\n+    setSchedule = (schedule) => {\n+        Object.assign(this.state, schedule);\n+        this.state.calendarDataText = schedule.calendarUrl;\n+        Object.assign(this.state, {\n+            calendarAdded: schedule.calendarName ? true : false\n+        })\n+        if (this.state.type === \"schedule\" && this.props.calendarNames.length > 1 && this.props.schedule.calendarName) {\n+            Object.assign(this.state, {\n+                selectedCalendar: this.props.calendarNames.filter(name => name.text === this.props.schedule.calendarName)[0].id\n+            });\n+        }\n+    };\n+\n+    setCalendarName = () => {\n+        return this.state.type === \"schedule\" ?\n+            ((this.state.calendarAdded && this.state.calendarName) ? this.state.calendarName : \"<None>\")\n+            : this.state.calendarName;\n+    };\n+\n+    isEdit = () => {\n+        return this.props.schedule ? true : false;\n+    };\n+\n+    onEdit = () => {\n+        return this.props.onEdit({\n+            scheduleId: this.state.scheduleId,\n+            scheduleName: this.state.scheduleName,\n+            scheduleType: this.state.scheduleType,\n+            calendarId: this.state.calendarId,\n+            calendarName: this.setCalendarName(),\n+            calendarData: this.state.calendarData,\n+            calendarUrl: (!this.isEdit() && this.state.calendarData) ? \"\" : this.state.calendarDataText,\n+            /* Reschedule strategy. false == 'FAIL', true == 'CANCEL' */\n+            strategy: this.state.strategy ? \"Cancel\" : \"Fail\"\n+        });\n+    };\n+\n+    onFormChanged = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    onCalendarDataTextChanged = (event) => {\n+        this.setState({\n+            calendarDataText: event.target.value\n+        });\n+    };\n+\n+    onIcalFileAttach = (event) => {\n+        this.setState({\n+            icalLoading: true\n+        });\n+        const reader = new FileReader();\n+        reader.onload = (e) => this.icalFileLoaded(e.target.result);\n+        reader.readAsText(event.target.files[0]);\n+        this.setState({\n+            calendarDataText: event.target.files[0].name\n+        });\n+    };\n+\n+    onIcalFileRemove = () => {\n+        document.getElementById(\"ical-data-upload\").value = \"\";\n+        this.setState({\n+            calendarData: undefined,\n+            calendarDataText: \"\",\n+        });\n+    };\n+\n+    handleFileAttach = () => {\n+        document.getElementById(\"ical-data-upload\").click();\n+    };\n+\n+    icalFileLoaded = (fileString) => {\n+        this.setState({\n+            calendarData: fileString,\n+            icalLoading: false\n+        });\n+    };\n+\n+    onSelectCalendar = (item) => {\n+        this.setState({\n+            selectedCalendar: item.id,\n+            calendarName: item.text\n+        })\n+    };\n+\n+    renderScheduleEdit() {\n+        const model = {\n+            scheduleName: this.state.scheduleName,\n+            scheduleType: this.state.scheduleType,\n+            calendarName: this.state.calendarName,\n+            strategy: this.state.strategy,\n+        }\n+        return (\n+            <Form onChange={this.onFormChanged} model={model}>\n+                <Text name=\"scheduleName\" required type=\"text\" label={t(\"Schedule Name\")}\n+                      labelClass=\"col-sm-3\" divClass=\"col-sm-6\"\n+                      disabled={this.isEdit()} />\n+                <Radio defaultValue=\"SINGLE\" name=\"scheduleType\" inline={true} label={t('Type')} labelClass=\"col-md-3\" divClass=\"col-md-6\"\n+                       items={[\n+                           {label: <b>{t('Single')}</b>, value: 'SINGLE'},\n+                           {label: <b>{t('Multi')}</b>, value: 'MULTI'},\n+                       ]}\n+                />\n+                {this.isEdit() &&\n+                <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions\")}</b>} divClass=\"col-md-6 col-md-offset-3\" />\n+                }\n+                <div className=\"form-group\">\n+                    <div className=\"col-md-6 col-md-offset-3\">\n+                        {!this.state.calendarAdded ?\n+                            <Button className=\"btn-default\" text=\"Add Calendar\" icon=\"fa-chevron-down \"\n+                                    handler={() => this.setState({calendarAdded: !this.state.calendarAdded})} />\n+                            :\n+                            <div className=\"panel panel-default\">\n+                                <div className=\"panel-heading\" style={{padding: \"0px\"}}>\n+                                    <Button text=\"Add Calendar\" icon=\"fa-chevron-up\"\n+                                            handler={() => this.setState({calendarAdded: !this.state.calendarAdded})} />\n+                                </div>\n+                                <div className=\"panel-body\">\n+                                    <div className=\"form-horizontal\">\n+                                        <div className=\"form-group\">\n+                                            <label className=\"col-md-3 control-label\">{t(\"Calendar\")}:</label>\n+                                            <div className=\"col-md-7\">\n+                                                <Combobox id=\"calendarSelect\" name=\"calendarSelect\"\n+                                                          data={this.props.calendarNames}\n+                                                          selectedId={this.state.selectedCalendar}\n+                                                          onSelect={this.onSelectCalendar}\n+                                                />\n+                                            </div>\n+                                        </div>\n+                                    </div>\n+                                </div>\n+                            </div>\n+                        }\n+                    </div>\n+                </div>\n+            </Form>\n+        )\n+    }\n+\n+    renderCalendarEdit() {\n+        const model = {\n+            calendarName: this.state.calendarName,\n+            strategy: this.state.strategy\n+        }\n+        return (\n+            <Form onChange={model => this.onFormChanged(model)} model={model}>\n+                <Text name=\"calendarName\" required type=\"text\" label={t(\"Calendar Name\")}\n+                      labelClass=\"col-md-3\" divClass=\"col-md-6\" disabled={this.isEdit()}/>\n+                {(this.isEdit() && !this.state.calendarUrl) &&\n+                <Check name=\"strategy\" label={<b>{t(\"Cancel affected actions\")}</b>} divClass=\"col-md-6 col-md-offset-3\" />\n+                }\n+                <div className=\"form-horizontal\">\n+                    <div className=\"form-group\">\n+                        <label className=\"col-md-3 control-label\">{t(\"Calendar data\")}:</label>\n+                        {(!this.isEdit() || this.state.calendarUrl) &&\n+                        <div className={\"align-center col-md-\" + (this.isEdit() ? \"5\" : \"4\")} >\n+                            <input type=\"text\" className=\"form-control\"\n+                                   style={{textOverflow: \"ellipsis\"}}\n+                                   placeholder={t(\"Enter Url to ical file\")}\n+                                   value={this.state.calendarDataText}\n+                                   disabled={this.state.calendarData && !this.state.calendarUrl}\n+                                   onChange={this.onCalendarDataTextChanged}/>\n+                            {!this.state.calendarData && <b style={{paddingLeft: \"25px\"}}>or</b>}\n+                        </div>\n+                        }\n+                        {!(this.isEdit() && this.state.calendarUrl) ? (\n+                                !this.state.calendarData ?\n+                                    <div className=\"col-md-1\">\n+                                        <Button id=\"ical-upload-btn\" className=\"btn-default\"\n+                                                text={t(\"Attach file\")}\n+                                                handler={this.handleFileAttach}\n+                                        />\n+                                    </div>\n+                                    :\n+                                    <div className=\"col-md-1\">\n+                                        <Button id=\"ical-rm-btn\" className=\"btn-default\" text={t(\"Remove file\")}\n+                                                handler={this.onIcalFileRemove}/>\n+                                    </div>\n+                            ) :\n+                            <div className=\"col-md-1\">\n+                                <ModalButton id=\"url-refresh-btn\"\n+                                             className=\"btn-default btn-sm\"\n+                                             icon=\"fa-refresh\"\n+                                             target=\"confirm-modal\"\n+                                             title={t(\"Refresh data from url\")}\n+                                             disabled={this.state.calendarUrl !== this.state.calendarDataText}\n+                                />\n+                                <DangerDialog id=\"confirm-modal\"\n+                                              title=\"Confirm calendar refresh\"\n+                                              content={\n+                                                  <div>\n+                                                      <div>{t(\"Refreshing the calendar causes affected actions to be rescheduled.\")}</div>", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczODU1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437738557", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:40:55Z", "path": "web/html/src/manager/maintenance/maintenance-windows-list.js", "diffHunk": "@@ -0,0 +1,210 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+const {Column} = require(\"components/table/Column\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const {Table} = require(\"components/table/Table\");\n+\n+class MaintenanceWindowsList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            itemToDelete: {}\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.state.itemToDelete;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleTable() {\n+        return <div>\n+            <Table\n+                data={this.props.data}\n+                identifier={row => row.scheduleId}\n+                initialItemsPerPage={userPrefPageSize}\n+                emptyText={t(\"No schedules created. Use Create to add a schedule.\")}\n+            >\n+                <Column\n+                    columnKey=\"scheduleName\"\n+                    header={t('Schedule Name')}\n+                    cell={(row) => row.scheduleName}\n+                />\n+                <Column\n+                    columnClass=\"text-center\"\n+                    headerClass=\"text-center\"\n+                    columnKey=\"calendarName\"\n+                    header={t('Calendar')}\n+                    cell={(row) =>\n+                        <a className=\"list-tag-link\"\n+                           href={t(\"/rhn/manager/schedule/maintenance/calendars#/details/\" + row.calendarId)}>\n+                            {row.calendarName}\n+                        </a>\n+                    }\n+                />\n+                <Column\n+                    columnClass=\"text-right\"\n+                    headerClass=\"text-right\"\n+                    header={t('Actions')}\n+                    cell={(row) =>\n+                        <div className=\"btn-group\">\n+                            <Button\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Details\")}\n+                                icon=\"fa-list\"\n+                                handler={() => {this.props.onSelect(row.scheduleId)}}\n+                            />\n+                            <Button\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Edit\")}\n+                                icon=\"fa-edit\"\n+                                handler={() => {this.props.onEdit(row.scheduleId)}}\n+                            />\n+                            <ModalButton\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Delete\")}\n+                                icon=\"fa-trash\"\n+                                target=\"delete-modal\"\n+                                item={row}\n+                                onClick={i => this.selectToDelete(i)}\n+                            />\n+                        </div>\n+                    }\n+                />\n+            </Table>\n+            <DeleteDialog id=\"delete-modal\"\n+                          title={t(\"Delete maintenance schedule\")}\n+                          content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                              \"Deleting the schedule will unassign all systems from this schedule.\")}", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczODc5OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437738799", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:41:28Z", "path": "web/html/src/manager/maintenance/maintenance-windows-list.js", "diffHunk": "@@ -0,0 +1,210 @@\n+/* eslint-disable */\n+'use strict';\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const { InnerPanel } = require('components/panels/InnerPanel');\n+const Button = require(\"components/buttons\").Button;\n+const ModalButton = require(\"components/dialog/ModalButton\").ModalButton;\n+const DeleteDialog = require(\"components/dialog/DeleteDialog\").DeleteDialog;\n+const {Column} = require(\"components/table/Column\");\n+const {Form} = require(\"components/input/Form\");\n+const {Check} = require(\"components/input/Check\");\n+const {Table} = require(\"components/table/Table\");\n+\n+class MaintenanceWindowsList extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        this.state = {\n+            type: props.type,\n+            itemToDelete: {}\n+        };\n+    }\n+\n+    selectToDelete(item) {\n+        this.setState({\n+            itemToDelete: item\n+        });\n+    }\n+\n+    setCheck = (model) => {\n+        model.strategy === \"\" && (model.strategy = false);\n+        this.setState(model);\n+    };\n+\n+    addStrategy = () => {\n+        const item = this.state.itemToDelete;\n+        item.strategy = (this.state.strategy ? \"Cancel\" : \"Fail\");\n+        return item;\n+    };\n+\n+    renderScheduleTable() {\n+        return <div>\n+            <Table\n+                data={this.props.data}\n+                identifier={row => row.scheduleId}\n+                initialItemsPerPage={userPrefPageSize}\n+                emptyText={t(\"No schedules created. Use Create to add a schedule.\")}\n+            >\n+                <Column\n+                    columnKey=\"scheduleName\"\n+                    header={t('Schedule Name')}\n+                    cell={(row) => row.scheduleName}\n+                />\n+                <Column\n+                    columnClass=\"text-center\"\n+                    headerClass=\"text-center\"\n+                    columnKey=\"calendarName\"\n+                    header={t('Calendar')}\n+                    cell={(row) =>\n+                        <a className=\"list-tag-link\"\n+                           href={t(\"/rhn/manager/schedule/maintenance/calendars#/details/\" + row.calendarId)}>\n+                            {row.calendarName}\n+                        </a>\n+                    }\n+                />\n+                <Column\n+                    columnClass=\"text-right\"\n+                    headerClass=\"text-right\"\n+                    header={t('Actions')}\n+                    cell={(row) =>\n+                        <div className=\"btn-group\">\n+                            <Button\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Details\")}\n+                                icon=\"fa-list\"\n+                                handler={() => {this.props.onSelect(row.scheduleId)}}\n+                            />\n+                            <Button\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Edit\")}\n+                                icon=\"fa-edit\"\n+                                handler={() => {this.props.onEdit(row.scheduleId)}}\n+                            />\n+                            <ModalButton\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Delete\")}\n+                                icon=\"fa-trash\"\n+                                target=\"delete-modal\"\n+                                item={row}\n+                                onClick={i => this.selectToDelete(i)}\n+                            />\n+                        </div>\n+                    }\n+                />\n+            </Table>\n+            <DeleteDialog id=\"delete-modal\"\n+                          title={t(\"Delete maintenance schedule\")}\n+                          content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                              \"Deleting the schedule will unassign all systems from this schedule.\")}\n+                          onConfirm={() => this.props.onDelete(this.state.itemToDelete)}\n+                          onClosePopUp={() => this.selectToDelete({})}\n+            />\n+        </div>\n+    }\n+\n+    renderCalendarTable() {\n+        return <div>\n+            <Table\n+                data={this.props.data}\n+                identifier={row => row.calendarName}\n+                initialItemsPerPage={userPrefPageSize}\n+                emptyText={t(\"No calendars created. Use Create to add a calendar.\")}\n+            >\n+                <Column\n+                    columnKey=\"calendarName\"\n+                    header={t('Calendar Name')}\n+                    cell={(row) => row.calendarName}\n+                />\n+                <Column\n+                    columnClass=\"text-center\"\n+                    headerClass=\"text-center\"\n+                    columnKey=\"usedBySchedule\"\n+                    header={t('Used by Schedule')}\n+                    cell={(row) => row.scheduleNames.map(name =>\n+                        <a className=\"list-tag-link\"\n+                           href={\"/rhn/manager/schedule/maintenance/schedules#/details/\" + name.id}>\n+                            {name.name}\n+                        </a>\n+                    )}\n+                />\n+                <Column\n+                    columnClass=\"text-right\"\n+                    headerClass=\"text-right\"\n+                    header={t('Actions')}\n+                    cell={(row) =>\n+                        <div className=\"btn-group\">\n+                            <Button\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Details\")}\n+                                icon=\"fa-list\"\n+                                handler={() => {this.props.onSelect(row.calendarId)}}\n+                            />\n+                            <Button\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Edit\")}\n+                                icon=\"fa-edit\"\n+                                handler={() => {this.props.onEdit(row.calendarId)}}\n+                            />\n+                            <ModalButton\n+                                className=\"btn-default btn-sm\"\n+                                title={t(\"Delete\")}\n+                                icon=\"fa-trash\"\n+                                target=\"delete-modal\"\n+                                item={row}\n+                                onClick={i => this.selectToDelete(i)}\n+                            />\n+                        </div>\n+                    }\n+                />\n+            </Table>\n+            <DeleteDialog id=\"delete-modal\"\n+                          title={t(\"Delete maintenance calendar\")}\n+                          content={\n+                              <Form model={{strategy: this.state.strategy}} onChange={this.setCheck}>\n+                                  <div>{t(\"Are you sure you want to delete the selected item?\")}</div>\n+                                  <div>{t(\"Deleting this calendar will unassign all schedules from this calendar.\")}</div>", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0MDM1NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437740354", "bodyText": "Generic comment about style: please use classes defined in .less files in the /branding/css/* package as much as you can, especially when it comes to colors. As you know the branding can change from time to time and it would be very hard to go through all the customized CSS files in the codebase. Use dedicated CSS files only when it is really necessary for some specific and not reused behavior, otherwise better to create classes and reuse them, so the style of the whole application is consistent. Thanks", "author": "ncounter", "createdAt": "2020-06-09T21:45:20Z", "path": "web/html/src/manager/maintenance/maintenance-windows.css", "diffHunk": "@@ -0,0 +1,14 @@\n+:global(.list-tag-link) {", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0MjExMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437742112", "bodyText": "What about to extract the fetching data from the rest of the page? Maybe you can create a maintenance-windows-api.js where to collect all the api enpoint calls to fetch data. In case we need to fetch the same data from anywhere else, this could be reused easily.", "author": "ncounter", "createdAt": "2020-06-09T21:49:35Z", "path": "web/html/src/manager/maintenance/maintenance-windows.js", "diffHunk": "@@ -0,0 +1,249 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import \"./maintenance-windows.css\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const {MaintenanceWindowsDetails} = require(\"./maintenance-windows-details\");\n+const {MaintenanceWindowsList} = require(\"./maintenance-windows-list\");\n+const {MaintenanceWindowsEdit} =  require(\"./maintenance-windows-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+class MaintenanceWindows extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"delete\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+            \"update\", \"refreshCalendar\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            type: type,\n+            messages: [],\n+            schedules: [],\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        this.state.type === \"schedule\" && this.getCalendarNames();\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if (action === \"details\" && id) {\n+            this.getDetails(id, \"details\");\n+        } else if (id || !action) {\n+            this.handleForwardAction();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    getMaintenanceSchedules = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/list\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(schedules => {\n+                this.setState({\n+                    action: undefined,\n+                    selected: undefined,\n+                    schedules: schedules\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getCalendarNames = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/calendar\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(calendarNames => {\n+                this.setState({\n+                    calendarNames: Array.from(Array(calendarNames.length).keys()).map(id => ({id: Number(id), text: calendarNames[id]}))\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getDetails(row, action) {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/\" + row + \"/details\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(item => {\n+                this.setState({\n+                    selected: item,\n+                    action: action\n+                });\n+                history.pushState(null, null, \"#/\" + action + \"/\" +\n+                    (this.state.type === \"schedule\" ? item.scheduleId : item.calendarId));\n+            }).catch(this.handleResponseError);\n+    }", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0MzA4Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437743086", "bodyText": "What about slicing the array? https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Array/slice", "author": "ncounter", "createdAt": "2020-06-09T21:51:44Z", "path": "web/html/src/manager/maintenance/maintenance-windows.js", "diffHunk": "@@ -0,0 +1,249 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import \"./maintenance-windows.css\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const {MaintenanceWindowsDetails} = require(\"./maintenance-windows-details\");\n+const {MaintenanceWindowsList} = require(\"./maintenance-windows-list\");\n+const {MaintenanceWindowsEdit} =  require(\"./maintenance-windows-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+class MaintenanceWindows extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"delete\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+            \"update\", \"refreshCalendar\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            type: type,\n+            messages: [],\n+            schedules: [],\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        this.state.type === \"schedule\" && this.getCalendarNames();\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if (action === \"details\" && id) {\n+            this.getDetails(id, \"details\");\n+        } else if (id || !action) {\n+            this.handleForwardAction();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    getMaintenanceSchedules = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/list\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(schedules => {\n+                this.setState({\n+                    action: undefined,\n+                    selected: undefined,\n+                    schedules: schedules\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getCalendarNames = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/calendar\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(calendarNames => {\n+                this.setState({\n+                    calendarNames: Array.from(Array(calendarNames.length).keys()).map(id => ({id: Number(id), text: calendarNames[id]}))\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getDetails(row, action) {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/\" + row + \"/details\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(item => {\n+                this.setState({\n+                    selected: item,\n+                    action: action\n+                });\n+                history.pushState(null, null, \"#/\" + action + \"/\" +\n+                    (this.state.type === \"schedule\" ? item.scheduleId : item.calendarId));\n+            }).catch(this.handleResponseError);\n+    }\n+\n+    handleDetailsAction(row) {\n+        this.getDetails(row, \"details\");\n+    }\n+\n+    handleEditAction(row) {\n+        this.getDetails(row, \"edit\");\n+    }\n+\n+    toggleActive(schedule) {\n+        Object.assign(schedule, {\n+            active: !(schedule.active)\n+        });\n+        this.updateSchedule(schedule);\n+    }\n+\n+    update(item) {\n+        return Network.post(\n+            \"/rhn/manager/api/maintenance/\" + this.state.type + \"/save\",\n+            JSON.stringify(item),\n+            \"application/json\"\n+        ).promise.then((_) => {\n+            const successMsg = <span>{t(\n+                (this.state.type === \"schedule\" ? \"Schedule \" : \"Calendar \") +\n+                \"successfully\" + (this.state.action === \"create\" ? \" created.\" : \" updated.\"))}</span>\n+            const msgs = this.state.messages.concat(MessagesUtils.info(successMsg));\n+\n+            while (msgs.length > messagesCounterLimit) {\n+                msgs.shift();\n+            }", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0MzI2MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437743260", "bodyText": "Same as before", "author": "ncounter", "createdAt": "2020-06-09T21:52:10Z", "path": "web/html/src/manager/maintenance/maintenance-windows.js", "diffHunk": "@@ -0,0 +1,249 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import \"./maintenance-windows.css\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const {MaintenanceWindowsDetails} = require(\"./maintenance-windows-details\");\n+const {MaintenanceWindowsList} = require(\"./maintenance-windows-list\");\n+const {MaintenanceWindowsEdit} =  require(\"./maintenance-windows-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+class MaintenanceWindows extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"delete\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+            \"update\", \"refreshCalendar\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            type: type,\n+            messages: [],\n+            schedules: [],\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        this.state.type === \"schedule\" && this.getCalendarNames();\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if (action === \"details\" && id) {\n+            this.getDetails(id, \"details\");\n+        } else if (id || !action) {\n+            this.handleForwardAction();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    getMaintenanceSchedules = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/list\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(schedules => {\n+                this.setState({\n+                    action: undefined,\n+                    selected: undefined,\n+                    schedules: schedules\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getCalendarNames = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/calendar\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(calendarNames => {\n+                this.setState({\n+                    calendarNames: Array.from(Array(calendarNames.length).keys()).map(id => ({id: Number(id), text: calendarNames[id]}))\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getDetails(row, action) {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/\" + row + \"/details\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(item => {\n+                this.setState({\n+                    selected: item,\n+                    action: action\n+                });\n+                history.pushState(null, null, \"#/\" + action + \"/\" +\n+                    (this.state.type === \"schedule\" ? item.scheduleId : item.calendarId));\n+            }).catch(this.handleResponseError);\n+    }\n+\n+    handleDetailsAction(row) {\n+        this.getDetails(row, \"details\");\n+    }\n+\n+    handleEditAction(row) {\n+        this.getDetails(row, \"edit\");\n+    }\n+\n+    toggleActive(schedule) {\n+        Object.assign(schedule, {\n+            active: !(schedule.active)\n+        });\n+        this.updateSchedule(schedule);\n+    }\n+\n+    update(item) {\n+        return Network.post(\n+            \"/rhn/manager/api/maintenance/\" + this.state.type + \"/save\",\n+            JSON.stringify(item),\n+            \"application/json\"\n+        ).promise.then((_) => {\n+            const successMsg = <span>{t(\n+                (this.state.type === \"schedule\" ? \"Schedule \" : \"Calendar \") +\n+                \"successfully\" + (this.state.action === \"create\" ? \" created.\" : \" updated.\"))}</span>\n+            const msgs = this.state.messages.concat(MessagesUtils.info(successMsg));\n+\n+            while (msgs.length > messagesCounterLimit) {\n+                msgs.shift();\n+            }\n+\n+            this.setState({\n+                messages: msgs\n+            });\n+\n+            this.handleForwardAction();\n+        }).catch(this.handleResponseError);\n+    }\n+\n+    delete(item) {\n+        return Network.del(\"/rhn/manager/api/maintenance/\" + this.state.type + \"/delete\",\n+            JSON.stringify(item),\n+            \"application/json\")\n+            .promise.then((_) => {\n+                this.setState({\n+                    messages: MessagesUtils.info(\n+                        (this.state.type === \"schedule\" ? \"Schedule \" : \"Calendar \") +\n+                        \"\\'\" + (this.state.type === \"schedule\" ? item.scheduleName : item.calendarName) +\n+                        \"\\' has been deleted.\"\n+                    )\n+                });\n+                this.handleForwardAction();\n+            })\n+            .catch(data => {\n+                const errorMsg = MessagesUtils.error(\n+                    t(\"Error when deleting the \" + this.state.type));\n+                let messages = (data && data.status === 400)\n+                    ? errorMsg\n+                    : Network.responseErrorMessage(jqXHR);\n+                this.setState({\n+                    messages: messages\n+                });\n+            });\n+    }\n+\n+    refreshCalendar(item) {\n+        return Network.post(\n+            \"/rhn/manager/api/maintenance/calendar/refresh\",\n+            JSON.stringify(item),\n+            \"application/json\"\n+        ).promise.then((_) => {\n+            const successMsg = <span>{t(\"Calendar successfully refreshed\")}</span>\n+            const msgs = this.state.messages.concat(MessagesUtils.info(successMsg));\n+\n+            while (msgs.length > messagesCounterLimit) {\n+                msgs.shift();\n+            }", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0NTI3Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r437745272", "bodyText": "So we are not receiving any data back from the backend? Nothing about the correctness of the action completed?\nAnyway, I'd do this in one line only: MessagesUtils.info(t(\"Calendar successfully refreshed\"))", "author": "ncounter", "createdAt": "2020-06-09T21:56:50Z", "path": "web/html/src/manager/maintenance/maintenance-windows.js", "diffHunk": "@@ -0,0 +1,249 @@\n+/* eslint-disable */\n+'use strict';\n+\n+import \"./maintenance-windows.css\";\n+\n+const React = require(\"react\");\n+const ReactDOM = require(\"react-dom\");\n+const Messages = require(\"components/messages\").Messages;\n+const Network = require(\"utils/network\");\n+const {MaintenanceWindowsDetails} = require(\"./maintenance-windows-details\");\n+const {MaintenanceWindowsList} = require(\"./maintenance-windows-list\");\n+const {MaintenanceWindowsEdit} =  require(\"./maintenance-windows-edit\");\n+const MessagesUtils = require(\"components/messages\").Utils;\n+const SpaRenderer  = require(\"core/spa/spa-renderer\").default;\n+\n+const messagesCounterLimit = 1;\n+const hashUrlRegex = /^#\\/([^\\/]*)(?:\\/(.+))?$/;\n+\n+\n+function getHashId() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[2] : undefined;\n+}\n+\n+function getHashAction() {\n+    const match = window.location.hash.match(hashUrlRegex);\n+    return match ? match[1] : undefined;\n+}\n+\n+class MaintenanceWindows extends React.Component {\n+\n+    constructor(props) {\n+        super(props);\n+\n+        [\"delete\", \"handleForwardAction\", \"handleDetailsAction\", \"handleEditAction\", \"handleResponseError\",\n+            \"update\", \"refreshCalendar\"]\n+            .forEach(method => this[method] = this[method].bind(this));\n+        this.state = {\n+            type: type,\n+            messages: [],\n+            schedules: [],\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.updateView(getHashAction(), getHashId());\n+        this.state.type === \"schedule\" && this.getCalendarNames();\n+        window.addEventListener(\"popstate\", () => {\n+            this.updateView(getHashAction(), getHashId());\n+        });\n+    }\n+\n+    updateView(action, id) {\n+        if (action === \"details\" && id) {\n+            this.getDetails(id, \"details\");\n+        } else if (id || !action) {\n+            this.handleForwardAction();\n+        } else {\n+            this.setState({action: action});\n+        }\n+        this.clearMessages();\n+    }\n+\n+    getMaintenanceSchedules = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/list\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(schedules => {\n+                this.setState({\n+                    action: undefined,\n+                    selected: undefined,\n+                    schedules: schedules\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getCalendarNames = () => {\n+        const endpoint = \"/rhn/manager/api/maintenance/calendar\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(calendarNames => {\n+                this.setState({\n+                    calendarNames: Array.from(Array(calendarNames.length).keys()).map(id => ({id: Number(id), text: calendarNames[id]}))\n+                });\n+            }).catch(this.handleResponseError);\n+    };\n+\n+    getDetails(row, action) {\n+        const endpoint = \"/rhn/manager/api/maintenance/\" + this.state.type + \"/\" + row + \"/details\";\n+        return Network.get(endpoint, \"application/json\").promise\n+            .then(item => {\n+                this.setState({\n+                    selected: item,\n+                    action: action\n+                });\n+                history.pushState(null, null, \"#/\" + action + \"/\" +\n+                    (this.state.type === \"schedule\" ? item.scheduleId : item.calendarId));\n+            }).catch(this.handleResponseError);\n+    }\n+\n+    handleDetailsAction(row) {\n+        this.getDetails(row, \"details\");\n+    }\n+\n+    handleEditAction(row) {\n+        this.getDetails(row, \"edit\");\n+    }\n+\n+    toggleActive(schedule) {\n+        Object.assign(schedule, {\n+            active: !(schedule.active)\n+        });\n+        this.updateSchedule(schedule);\n+    }\n+\n+    update(item) {\n+        return Network.post(\n+            \"/rhn/manager/api/maintenance/\" + this.state.type + \"/save\",\n+            JSON.stringify(item),\n+            \"application/json\"\n+        ).promise.then((_) => {\n+            const successMsg = <span>{t(\n+                (this.state.type === \"schedule\" ? \"Schedule \" : \"Calendar \") +\n+                \"successfully\" + (this.state.action === \"create\" ? \" created.\" : \" updated.\"))}</span>\n+            const msgs = this.state.messages.concat(MessagesUtils.info(successMsg));\n+\n+            while (msgs.length > messagesCounterLimit) {\n+                msgs.shift();\n+            }\n+\n+            this.setState({\n+                messages: msgs\n+            });\n+\n+            this.handleForwardAction();\n+        }).catch(this.handleResponseError);\n+    }\n+\n+    delete(item) {\n+        return Network.del(\"/rhn/manager/api/maintenance/\" + this.state.type + \"/delete\",\n+            JSON.stringify(item),\n+            \"application/json\")\n+            .promise.then((_) => {\n+                this.setState({\n+                    messages: MessagesUtils.info(\n+                        (this.state.type === \"schedule\" ? \"Schedule \" : \"Calendar \") +\n+                        \"\\'\" + (this.state.type === \"schedule\" ? item.scheduleName : item.calendarName) +\n+                        \"\\' has been deleted.\"\n+                    )\n+                });\n+                this.handleForwardAction();\n+            })\n+            .catch(data => {\n+                const errorMsg = MessagesUtils.error(\n+                    t(\"Error when deleting the \" + this.state.type));\n+                let messages = (data && data.status === 400)\n+                    ? errorMsg\n+                    : Network.responseErrorMessage(jqXHR);\n+                this.setState({\n+                    messages: messages\n+                });\n+            });\n+    }\n+\n+    refreshCalendar(item) {\n+        return Network.post(\n+            \"/rhn/manager/api/maintenance/calendar/refresh\",\n+            JSON.stringify(item),\n+            \"application/json\"\n+        ).promise.then((_) => {\n+            const successMsg = <span>{t(\"Calendar successfully refreshed\")}</span>\n+            const msgs = this.state.messages.concat(MessagesUtils.info(successMsg));", "originalCommit": "fad7e771e35a0934287854b648845d8e45d17550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMjU1OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r440002559", "bodyText": "Yes we do, the calendar data will be updated. This message will only be displayed in case everything went right. If not we receive an error message from the backend.", "author": "parlt91", "createdAt": "2020-06-15T08:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0NTI3Mg=="}], "type": "inlineReview"}, {"oid": "6a1ac4fea475de12ad0c122cfee1ef94c3a26546", "url": "https://github.com/uyuni-project/uyuni/commit/6a1ac4fea475de12ad0c122cfee1ef94c3a26546", "message": "Add controller class\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:53:33Z", "type": "commit"}, {"oid": "34c7ffa04e688a3cf004983b12dd6d512d1e0218", "url": "https://github.com/uyuni-project/uyuni/commit/34c7ffa04e688a3cf004983b12dd6d512d1e0218", "message": "Add controller to the Router\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "7830e6a7ffad5f43c913db6c010163a60be9cc96", "url": "https://github.com/uyuni-project/uyuni/commit/7830e6a7ffad5f43c913db6c010163a60be9cc96", "message": "Add jade file\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "89a68df73e8cda44e7f71c2ac4721b5620bac116", "url": "https://github.com/uyuni-project/uyuni/commit/89a68df73e8cda44e7f71c2ac4721b5620bac116", "message": "Add Json class for maintenance schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "23bb872d4b3d82e926df04d1c78d9576221136ec", "url": "https://github.com/uyuni-project/uyuni/commit/23bb872d4b3d82e926df04d1c78d9576221136ec", "message": "Create MenuTree item\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "e55b7d02a125d4c597e4964403506de41fd8b78a", "url": "https://github.com/uyuni-project/uyuni/commit/e55b7d02a125d4c597e4964403506de41fd8b78a", "message": "Add maintenance schedules index\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "c8505882c2e8a5d151560cb834d85bb31f8a5c76", "url": "https://github.com/uyuni-project/uyuni/commit/c8505882c2e8a5d151560cb834d85bb31f8a5c76", "message": "Add maintenance schedule base class\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "68206de2c3938cf4763c01a26a4aad4436f915a2", "url": "https://github.com/uyuni-project/uyuni/commit/68206de2c3938cf4763c01a26a4aad4436f915a2", "message": "Add ui for listing maintenance schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "acfd8ba635af3bc9ec6be784223f4f8519819e96", "url": "https://github.com/uyuni-project/uyuni/commit/acfd8ba635af3bc9ec6be784223f4f8519819e96", "message": "Add ui page for creating/editing schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "61a8d0f48c0cb6cbc40ad97dbfc060e22f9f7505", "url": "https://github.com/uyuni-project/uyuni/commit/61a8d0f48c0cb6cbc40ad97dbfc060e22f9f7505", "message": "Add details view for schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "8abfe8352759118cc7aa98048969e7d1c3bef008", "url": "https://github.com/uyuni-project/uyuni/commit/8abfe8352759118cc7aa98048969e7d1c3bef008", "message": "Controller save method\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "70428e1dc85d962f754b17de3a6dd2e337cb81de", "url": "https://github.com/uyuni-project/uyuni/commit/70428e1dc85d962f754b17de3a6dd2e337cb81de", "message": "Make 'Add Calendar' button instead of checkbox\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "c6bb6c6227ed1251fe984b9e6843c37710262170", "url": "https://github.com/uyuni-project/uyuni/commit/c6bb6c6227ed1251fe984b9e6843c37710262170", "message": "Add Calendar column in schedule list\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "2b0558ff9b9a422ce1e8b2c4329fa8ffabba805d", "url": "https://github.com/uyuni-project/uyuni/commit/2b0558ff9b9a422ce1e8b2c4329fa8ffabba805d", "message": "Fix details view not rendering\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "c0eb71f4a9d780607cc4497000e2b53d88977efd", "url": "https://github.com/uyuni-project/uyuni/commit/c0eb71f4a9d780607cc4497000e2b53d88977efd", "message": "Add deleting of schedules\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "e8ff6eaaa29bce7c96221465bd43adafe947940e", "url": "https://github.com/uyuni-project/uyuni/commit/e8ff6eaaa29bce7c96221465bd43adafe947940e", "message": "Get detailed schedule info\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "59b65698458620b58c1149ba449c81a56f90d37f", "url": "https://github.com/uyuni-project/uyuni/commit/59b65698458620b58c1149ba449c81a56f90d37f", "message": "Rename maintenance-schedules.jade -> maintenance-windows.jade\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:10Z", "type": "commit"}, {"oid": "dc86231dd68ca2d9cf07aaaa2afa45e220c50357", "url": "https://github.com/uyuni-project/uyuni/commit/dc86231dd68ca2d9cf07aaaa2afa45e220c50357", "message": "Update MenuTree, add translation strings\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "e1a5686378751272e9e3f6b44d2d84a4d82cef4e", "url": "https://github.com/uyuni-project/uyuni/commit/e1a5686378751272e9e3f6b44d2d84a4d82cef4e", "message": "Add type to distinguish between calendar and schedule in UI\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "28393778459bed891c23e8b7ad473e5e5fa2e2fa", "url": "https://github.com/uyuni-project/uyuni/commit/28393778459bed891c23e8b7ad473e5e5fa2e2fa", "message": "Rename maintenance-schedules -> maintenance-windows\n\nSince these components will handle both schedules and calendar\nmaintenance-windows seems to be a more adequate name.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "53b6fe538367a42ddf9ccef880a0003203a91f66", "url": "https://github.com/uyuni-project/uyuni/commit/53b6fe538367a42ddf9ccef880a0003203a91f66", "message": "Rename MaintenanceScheduleJson -> MaintenanceWindowJson\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "a1bd2bbfdf079cd7de1e72e77da27b29f65b724d", "url": "https://github.com/uyuni-project/uyuni/commit/a1bd2bbfdf079cd7de1e72e77da27b29f65b724d", "message": "Adapt controller class to handle schedules/calendars individually\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "be62705601a12a6df135a4511c23a9a47a5e15a5", "url": "https://github.com/uyuni-project/uyuni/commit/be62705601a12a6df135a4511c23a9a47a5e15a5", "message": "Change webui to reflect controller changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "29307ae0f98bb4cb8309c38950b5f33bdb9d2989", "url": "https://github.com/uyuni-project/uyuni/commit/29307ae0f98bb4cb8309c38950b5f33bdb9d2989", "message": "Add missing javadoc, fix checkstyle\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "87d1d3dd3a48079470839a5e7e22e891057015dc", "url": "https://github.com/uyuni-project/uyuni/commit/87d1d3dd3a48079470839a5e7e22e891057015dc", "message": "Display ical file in details, distinguish between schedule/calendar\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "a74a24ed1adfa6d0f57cbd3172830a0f254df6a3", "url": "https://github.com/uyuni-project/uyuni/commit/a74a24ed1adfa6d0f57cbd3172830a0f254df6a3", "message": "Handle reschedule strategy\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "d5cee2cace92759f154264316f1df0583d456f8d", "url": "https://github.com/uyuni-project/uyuni/commit/d5cee2cace92759f154264316f1df0583d456f8d", "message": "Support refreshing calendars from url\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "50c03dce6350a53599cc131a4b1a81cb438e7282", "url": "https://github.com/uyuni-project/uyuni/commit/50c03dce6350a53599cc131a4b1a81cb438e7282", "message": "Create links to calendar/schedule details in list\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "31aa0d16e49186c0cafae67102bde46a48114e89", "url": "https://github.com/uyuni-project/uyuni/commit/31aa0d16e49186c0cafae67102bde46a48114e89", "message": "Add queries to get schedule/calendar objects\n\nRename listScheduleNamesByCalendar -> listMaintenanceSchedulesByCalendar\nto clarify the behavior.\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:54:11Z", "type": "commit"}, {"oid": "b75484f87a00eb1210aae53a26ffbd46896606e9", "url": "https://github.com/uyuni-project/uyuni/commit/b75484f87a00eb1210aae53a26ffbd46896606e9", "message": "Add localization to the controller\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:55:51Z", "type": "commit"}, {"oid": "89b61c2a23603511459b9ec9687ae0b8ec4c4d72", "url": "https://github.com/uyuni-project/uyuni/commit/89b61c2a23603511459b9ec9687ae0b8ec4c4d72", "message": "Fix calendar data refresh\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:55:51Z", "type": "commit"}, {"oid": "7ef882c4b967e2885edfd14bf2f3fb79abfab93e", "url": "https://github.com/uyuni-project/uyuni/commit/7ef882c4b967e2885edfd14bf2f3fb79abfab93e", "message": "Move styling to its own css file\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-15T14:55:51Z", "type": "commit"}, {"oid": "eaf1d9911b21394aa97d5b235146f90307901e8c", "url": "https://github.com/uyuni-project/uyuni/commit/eaf1d9911b21394aa97d5b235146f90307901e8c", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-16T07:32:13Z", "type": "forcePushed"}, {"oid": "fea7795d3938893af6bc10ea8cd92697c9c1012d", "url": "https://github.com/uyuni-project/uyuni/commit/fea7795d3938893af6bc10ea8cd92697c9c1012d", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-16T16:20:39Z", "type": "forcePushed"}, {"oid": "2a9c70a4713f7a17118b803af8cb0840dbd0ea0a", "url": "https://github.com/uyuni-project/uyuni/commit/2a9c70a4713f7a17118b803af8cb0840dbd0ea0a", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-17T09:38:37Z", "type": "forcePushed"}, {"oid": "057260017842f4807c0b0a04706ef3d5297149cd", "url": "https://github.com/uyuni-project/uyuni/commit/057260017842f4807c0b0a04706ef3d5297149cd", "message": "Fix: Remove empty box displayed in schedule list if no calendar assigned\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-17T16:26:12Z", "type": "forcePushed"}, {"oid": "e9e49c2292695fc30271fee1c836e69f049aa653", "url": "https://github.com/uyuni-project/uyuni/commit/e9e49c2292695fc30271fee1c836e69f049aa653", "message": "Add requested changes\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-17T16:37:34Z", "type": "commit"}, {"oid": "70eef68b15725ecc9b578e8da6c57dc10db882c9", "url": "https://github.com/uyuni-project/uyuni/commit/70eef68b15725ecc9b578e8da6c57dc10db882c9", "message": "Display upcoming maintenance windows in schedule details view\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-17T16:37:37Z", "type": "commit"}, {"oid": "5e0992585eaf4c2d432f36bd7a49451d88c79eb2", "url": "https://github.com/uyuni-project/uyuni/commit/5e0992585eaf4c2d432f36bd7a49451d88c79eb2", "message": "Fix: Remove empty box displayed in schedule list if no calendar assigned\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-17T16:37:37Z", "type": "commit"}, {"oid": "5e0992585eaf4c2d432f36bd7a49451d88c79eb2", "url": "https://github.com/uyuni-project/uyuni/commit/5e0992585eaf4c2d432f36bd7a49451d88c79eb2", "message": "Fix: Remove empty box displayed in schedule list if no calendar assigned\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-17T16:37:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMzcwOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r442233709", "bodyText": "Would it be possible to use some existing component for the table (Table.js)? Actually, in this PR i see quite some table crafting, maybe it'd make sense to re-use something either. @ncounter What's the general advice here? Re-use components (even for simple tables), or craft tables on-the-fly?", "author": "hustodemon", "createdAt": "2020-06-18T13:40:30Z", "path": "web/html/src/manager/maintenance/maintenance-windows-details.js", "diffHunk": "@@ -38,59 +38,103 @@ class MaintenanceWindowsDetails extends React.Component {\n \n     renderScheduleDetails(data) {\n         return (\n-            <BootstrapPanel title={t(\"Schedule Details\")}>\n-                <div className=\"table-responsive\">\n-                    <table className=\"table\">\n-                        <tbody>\n-                        <tr>\n-                            <td>{t(\"Schedule Name\")}</td>\n-                            <td>{data.scheduleName}</td>\n-                        </tr>\n-                        <tr>\n-                            <td>{t(\"Assigned Calendar\")}:</td>\n-                            <td>{data.calendarName}</td>\n-                        </tr>\n-                        <tr>\n-                            <td>{t(\"Schedule Type\")}:</td>\n-                            <td>{data.scheduleType === \"SINGLE\" ? t(\"Single\") : t(\"Multi\")}</td>\n-                        </tr>\n-                        </tbody>\n-                    </table>\n-                </div>\n-                <DeleteDialog id=\"delete-modal\"\n-                              title={t(\"Delete maintenance schedule\")}\n-                              content={t(\"Are you sure you want to delete the selected item? \\n\" +\n-                                  \"This will remove the current schedule from all the systems assigned to it.\")}\n-                              onConfirm={() => this.props.onDelete(this.props.data)}\n-                />\n-            </BootstrapPanel>\n+            <div>\n+                <BootstrapPanel title={t(\"Schedule Details\")}>\n+                    <div className=\"table-responsive\">\n+                        <table className=\"table\">\n+                            <tbody>\n+                            <tr>\n+                                <td>{t(\"Schedule Name\")}</td>\n+                                <td>{data.scheduleName}</td>\n+                            </tr>\n+                            <tr>\n+                                <td>{t(\"Assigned Calendar\")}:</td>\n+                                <td>{data.calendarName}</td>\n+                            </tr>\n+                            <tr>\n+                                <td>{t(\"Schedule Type\")}:</td>\n+                                <td>{data.scheduleType === \"SINGLE\" ? t(\"Single\") : t(\"Multi\")}</td>\n+                            </tr>\n+                            </tbody>\n+                        </table>\n+                    </div>\n+                    <DeleteDialog id=\"delete-modal\"\n+                                  title={t(\"Delete maintenance schedule\")}\n+                                  content={t(\"Are you sure you want to delete the selected item? \\n\" +\n+                                      \"This will remove the current schedule from all the systems assigned to it.\")}\n+                                  onConfirm={() => this.props.onDelete(this.props.data)}\n+                    />\n+                </BootstrapPanel>\n+                {\n+                    data.maintenanceWindows !== undefined && data.maintenanceWindows.length > 0 &&\n+                    <BootstrapPanel title={t(\"Upcoming Maintenance Windows\")}>\n+                        <div className=\"table-responsive\">\n+                            <table className=\"table\">", "originalCommit": "70eef68b15725ecc9b578e8da6c57dc10db882c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MTgxNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r442251814", "bodyText": "I believe I kind of overlooked at this, I remember we discussed with @parlt91 but then we never got back on this. Probably in this case it will be a bit of overengineering work to use the existing component, but we really should. User will never need to use Table.js component feature (ordering by column, comparing values, etc) but it is important to keep every table look&feel fetching structure from the same piece of code.\n@parlt91 if you need any help to adapt and make use of the existing table component, just ping me. I think we really should do this now that we have \"a bit of time\" \ud83d\ude09\nThanks @hustodemon for pointing it out", "author": "ncounter", "createdAt": "2020-06-18T14:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMzcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5ODIxOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2169#discussion_r442298218", "bodyText": "Aright. I will look into this. The component seems to work without the headers it's just that there is some empty area remaining where the headers are supposed to be.\nI will have to see how it looks. Maybe I need to do some adjustments to the Table component but let's see.", "author": "parlt91", "createdAt": "2020-06-18T15:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMzcwOQ=="}], "type": "inlineReview"}, {"oid": "fbb4c4f98a963b7093582dbe94c3bad1c14fbaac", "url": "https://github.com/uyuni-project/uyuni/commit/fbb4c4f98a963b7093582dbe94c3bad1c14fbaac", "message": "Use the Table component for the details view\n\nSigned-off-by: Pascal Arlt <parlt@suse.com>", "committedDate": "2020-06-18T16:25:24Z", "type": "commit"}]}