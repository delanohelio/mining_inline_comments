{"pr_number": 163, "pr_title": "Reusing copier for AVRO schemas", "pr_createdAt": "2020-01-22T10:49:20Z", "pr_url": "https://github.com/ExpediaGroup/circus-train/pull/163", "timeline": [{"oid": "6d8b33bcef4ee800d594255a4c1de5281bae20dc", "url": "https://github.com/ExpediaGroup/circus-train/commit/6d8b33bcef4ee800d594255a4c1de5281bae20dc", "message": "Reusing copier for AVRO schemas", "committedDate": "2020-01-22T10:45:48Z", "type": "commit"}, {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "url": "https://github.com/ExpediaGroup/circus-train/commit/1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "message": "fixing nameService a bit", "committedDate": "2020-01-22T11:03:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5Njc5Ng==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369496796", "bodyText": "@abhimanyugupta07  does this seem correct to you?", "author": "patduin", "createdAt": "2020-01-22T11:05:07Z", "path": "circus-train-avro/src/test/java/com/hotels/bdp/circustrain/avro/util/FileSystemPathResolverTest.java", "diffHunk": "@@ -73,7 +81,7 @@ public void resolveNameServicesAddsAuthorityToPathWithoutScheme() {\n     setDfsPaths(\"foo\");\n     Path input = new Path(\"/etl/test/avsc/schema.avsc\");\n     Path result = resolver.resolveNameServices(input);\n-    Path expected = new Path(\"/foo/etl/test/avsc/schema.avsc\");\n+    Path expected = new Path(\"/etl/test/avsc/schema.avsc\");", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMzYxNw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369523617", "bodyText": "I guess previously if there was no schema it would assume that HDFS was in use whereas s3 paths always start with s3. I think this is usually the case with our on-prem setup so I'm not sure if the change you made to always check hdfs will work for those cases...", "author": "massdosage", "createdAt": "2020-01-22T12:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMzQ2Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369613462", "bodyText": "it does this test tests the two methods separately but in our code we actually always add the schema and then add the name. So we won't call it with \"/\" it will be hdfs:// or file:// depending on the HiveConf.\nI think the code as it is now where we only add the name node if and only if we're certain that we're on hdfs makes more sense.", "author": "patduin", "createdAt": "2020-01-22T15:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5Njc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5ODAzNQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369498035", "bodyText": "This test is broken I'll fix it...", "author": "patduin", "createdAt": "2020-01-22T11:07:54Z", "path": "circus-train-avro/src/test/java/com/hotels/bdp/circustrain/avro/util/SchemaCopierTest.java", "diffHunk": "@@ -26,21 +26,39 @@\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.conf.HiveConf;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n+import com.hotels.bdp.circustrain.api.copier.CopierFactoryManager;\n+import com.hotels.bdp.circustrain.api.copier.CopierOptions;\n+import com.hotels.bdp.circustrain.api.event.EventTableReplication;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public class SchemaCopierTest {", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5ODMyOQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369498329", "bodyText": "mocking a Map, madness!", "author": "patduin", "createdAt": "2020-01-22T11:08:41Z", "path": "circus-train-s3-mapreduce-cp-copier/src/test/java/com/hotels/bdp/circustrain/s3mapreducecpcopier/S3MapReduceCpCopierTest.java", "diffHunk": "@@ -104,23 +106,41 @@ public void tableArgsAndConfiguration() throws Exception {\n     assertThat(options.getCredentialsProvider(), is(credentialsProvider));\n   }\n \n+  @Test\n+  public void tableArgsAndConfigurationOneFileCopy() throws Exception {\n+    Path sourceDataBaseFile = new Path(\"hdfs://source/data.txt\");\n+    Path replicaDataFile = new Path(\"s3://target/data.txt\");\n+    copierOptions.put(CopierOptions.COPY_DESTINATION_IS_FILE, \"true\");\n+    S3MapReduceCpCopier copier = new S3MapReduceCpCopier(conf, sourceDataBaseFile, Collections.<Path>emptyList(),\n+        replicaDataFile, copierOptions, executor, metricRegistry);\n+    Metrics metrics = copier.copy();\n+    assertThat(metrics, not(nullValue()));\n+\n+    verify(executor).exec(confCaptor.capture(), optionsCaptor.capture());\n+\n+    S3MapReduceCpOptions options = optionsCaptor.getValue();\n+    assertThat(options.getSources(), is(Arrays.asList(sourceDataBaseFile)));\n+    assertThat(options.getTarget(), is(replicaDataFile.toUri()));\n+    assertThat(options.getCredentialsProvider(), is(credentialsProvider));\n+  }\n+\n   @Test\n   public void overwriteAllCopierOptions() throws Exception {\n-    when(copierOptions.get(CREDENTIAL_PROVIDER)).thenReturn(\"jceks://hdfs/foo/bar.jceks\");\n-    when(copierOptions.get(MULTIPART_UPLOAD_CHUNK_SIZE)).thenReturn(\"1234\");\n-    when(copierOptions.get(S3_SERVER_SIDE_ENCRYPTION)).thenReturn(\"true\");\n-    when(copierOptions.get(STORAGE_CLASS)).thenReturn(\"reduced_redundancy\");\n-    when(copierOptions.get(TASK_BANDWIDTH)).thenReturn(\"567\");\n-    when(copierOptions.get(NUMBER_OF_WORKERS_PER_MAP)).thenReturn(\"89\");\n-    when(copierOptions.get(MULTIPART_UPLOAD_THRESHOLD)).thenReturn(\"123456\");\n-    when(copierOptions.get(MAX_MAPS)).thenReturn(\"78\");\n-    when(copierOptions.get(COPY_STRATEGY)).thenReturn(\"the-strategy\");\n-    when(copierOptions.get(LOG_PATH)).thenReturn(\"hdfs://path/to/logs/\");\n-    when(copierOptions.get(REGION)).thenReturn(\"us-east-1\");\n-    when(copierOptions.get(IGNORE_FAILURES)).thenReturn(\"true\");\n-    when(copierOptions.get(CANNED_ACL)).thenReturn(CannedAccessControlList.BucketOwnerFullControl.toString());\n-\n-    S3MapReduceCpCopier copier = new S3MapReduceCpCopier(conf, sourceDataBaseLocation, Collections.<Path> emptyList(),\n+    copierOptions.put(CREDENTIAL_PROVIDER, \"jceks://hdfs/foo/bar.jceks\");", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNTEyNA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369525124", "bodyText": ":)", "author": "massdosage", "createdAt": "2020-01-22T12:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5ODMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUxOTIwMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369519200", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Change the way the AVRO Schema Copier works, reusing normal 'data' copier. See [#162](https://github.com/HotelsDotCom/circus-train/issues/162). \n          \n          \n            \n            * AVRO Schema Copier now re-uses the normal 'data' copier instead of its own. See [#162](https://github.com/HotelsDotCom/circus-train/issues/162).", "author": "massdosage", "createdAt": "2020-01-22T11:57:42Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,8 @@\n-## [15.0.0] - 2019-11-12\n+## TBD - TBD\n+### Changed\n+* Change the way the AVRO Schema Copier works, reusing normal 'data' copier. See [#162](https://github.com/HotelsDotCom/circus-train/issues/162). ", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDA4MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369520080", "bodyText": "Should we document this in the README somewhere?", "author": "massdosage", "createdAt": "2020-01-22T11:59:49Z", "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/copier/CopierOptions.java", "diffHunk": "@@ -21,6 +21,10 @@\n \n   String IGNORE_MISSING_PARTITION_FOLDER_ERRORS = \"ignore-missing-partition-folder-errors\";\n \n+  // internal option used to track if the destination of the replication should be treated as a folder or file. Value\n+  // can be parsed with Boolean.parseValue. If not set a folder is assumed.\n+  String COPY_DESTINATION_IS_FILE = \"copy-destination-is-file\";", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNTQyNw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369525427", "bodyText": "Or is this only used internally so we wouldn't want to advertise it?", "author": "massdosage", "createdAt": "2020-01-22T12:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMTk4OA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369611988", "bodyText": "internal only", "author": "patduin", "createdAt": "2020-01-22T15:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDgzMg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369520832", "bodyText": "remove blank line", "author": "massdosage", "createdAt": "2020-01-22T12:01:39Z", "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/transformation/AbstractAvroSerDeTransformation.java", "diffHunk": "@@ -85,8 +91,15 @@ public void tableReplicationStart(EventTableReplication tableReplication, String\n   }\n \n   @Override\n-  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {}\n+  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {\n+    this.eventId = null;\n+    this.tableReplication = null;\n+  }\n \n   @Override\n-  public void tableReplicationFailure(EventTableReplication tableReplication, String eventId, Throwable t) {}\n+  public void tableReplicationFailure(EventTableReplication tableReplication, String eventId, Throwable t) {\n+    this.eventId = null;\n+    this.tableReplication = null;\n+", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMTgwNg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369521806", "bodyText": "NABD but you could consider moving these out of the if statement and then re-using them in both the if() clause and here.", "author": "massdosage", "createdAt": "2020-01-22T12:04:09Z", "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/FileSystemPathResolver.java", "diffHunk": "@@ -58,21 +58,22 @@ public Path resolveScheme(Path path) {\n   }\n \n   public Path resolveNameServices(Path path) {\n-    String nameService = configuration.get(DFSConfigKeys.DFS_NAMESERVICES);\n-    if (isNotBlank(nameService)) {\n-      URI uri = path.toUri();\n-      String scheme = uri.getScheme();\n-      String url = uri.getPath();\n-      final String original = path.toString();\n-      if (isBlank(scheme)) {\n-        url = String.format(\"/%s%s\", nameService, path);\n-        path = new Path(url);\n-      } else {\n-        path = new Path(scheme, nameService, url);\n+    if (\"hdfs\".equalsIgnoreCase(path.toUri().getScheme())) {\n+      String nameService = configuration.get(DFSConfigKeys.DFS_NAMESERVICES);\n+      if (isNotBlank(nameService)) {\n+        URI uri = path.toUri();", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMjA2NQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369522065", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication\n          \n          \n            \n                Map<String, Object> mergedCopierOptions = new HashMap<>(TableReplication", "author": "massdosage", "createdAt": "2020-01-22T12:04:49Z", "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java", "diffHunk": "@@ -41,64 +44,42 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SchemaCopier.class);\n \n   private final Configuration sourceHiveConf;\n-  private final Configuration replicaHiveConf;\n+  private final CopierFactoryManager copierFactoryManager;\n+  private final CopierOptions globalCopierOptions;\n \n   @Autowired\n-  public SchemaCopier(Configuration sourceHiveConf, Configuration replicaHiveConf) {\n+  public SchemaCopier(\n+      Configuration sourceHiveConf,\n+      CopierFactoryManager copierFactoryManager,\n+      CopierOptions globalCopierOptions) {\n     this.sourceHiveConf = sourceHiveConf;\n-    this.replicaHiveConf = replicaHiveConf;\n+    this.copierFactoryManager = copierFactoryManager;\n+    this.globalCopierOptions = globalCopierOptions;\n   }\n \n-  public Path copy(String source, String destination) {\n+  public Path copy(String source, String destination, EventTableReplication eventTableReplication, String eventId) {\n     checkNotNull(source, \"source cannot be null\");\n     checkNotNull(destination, \"destinationFolder cannot be null\");\n \n-    java.nio.file.Path temporaryDirectory = createTempDirectory();\n-\n     FileSystemPathResolver sourceFileSystemPathResolver = new FileSystemPathResolver(sourceHiveConf);\n     Path sourceLocation = new Path(source);\n     sourceLocation = sourceFileSystemPathResolver.resolveScheme(sourceLocation);\n     sourceLocation = sourceFileSystemPathResolver.resolveNameServices(sourceLocation);\n-    Path localLocation = new Path(temporaryDirectory.toString(), fileName(source));\n-    copyToLocal(sourceLocation, localLocation);\n-\n-    Path destinationLocation = new Path(destination, fileName(source));\n-    copyToRemote(localLocation, destinationLocation);\n-\n-    LOG.info(\"Avro schema has been copied from '{}' to '{}'\", sourceLocation, destinationLocation);\n-    return destinationLocation;\n-  }\n-\n-  private java.nio.file.Path createTempDirectory() {\n-    java.nio.file.Path temporaryDirectory = null;\n-    try {\n-      temporaryDirectory = Files.createTempDirectory(\"avro-schema-download-folder\");\n-      temporaryDirectory.toFile().deleteOnExit();\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't create temporaryDirectory in the default temporary directory\", e);\n-    }\n-    return temporaryDirectory;\n-  }\n-\n-  private void copyToLocal(Path sourceLocation, Path localLocation) {\n-    try {\n-      FileSystem sourceFileSystem;\n-      sourceFileSystem = sourceLocation.getFileSystem(sourceHiveConf);\n-      sourceFileSystem.copyToLocalFile(false, sourceLocation, localLocation);\n-      LOG.info(\"Copy from {} to {} succeeded\", sourceLocation, localLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + sourceLocation + \" to \" + localLocation, e);\n-    }\n-  }\n \n-  private void copyToRemote(Path localLocation, Path remoteDestinationLocation) {\n-    FileSystem destinationFileSystem;\n-    try {\n-      destinationFileSystem = remoteDestinationLocation.getFileSystem(replicaHiveConf);\n-      destinationFileSystem.copyFromLocalFile(localLocation, remoteDestinationLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + localLocation + \" to \" + remoteDestinationLocation,\n-          e);\n-    }\n+    Path destinationSchemaFile = new Path(destination, sourceLocation.getName());\n+\n+    Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMjI3OA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369522278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG.info(\"Going to replicate the Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);\n          \n          \n            \n                LOG.info(\"Replicating Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);", "author": "massdosage", "createdAt": "2020-01-22T12:05:19Z", "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java", "diffHunk": "@@ -41,64 +44,42 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SchemaCopier.class);\n \n   private final Configuration sourceHiveConf;\n-  private final Configuration replicaHiveConf;\n+  private final CopierFactoryManager copierFactoryManager;\n+  private final CopierOptions globalCopierOptions;\n \n   @Autowired\n-  public SchemaCopier(Configuration sourceHiveConf, Configuration replicaHiveConf) {\n+  public SchemaCopier(\n+      Configuration sourceHiveConf,\n+      CopierFactoryManager copierFactoryManager,\n+      CopierOptions globalCopierOptions) {\n     this.sourceHiveConf = sourceHiveConf;\n-    this.replicaHiveConf = replicaHiveConf;\n+    this.copierFactoryManager = copierFactoryManager;\n+    this.globalCopierOptions = globalCopierOptions;\n   }\n \n-  public Path copy(String source, String destination) {\n+  public Path copy(String source, String destination, EventTableReplication eventTableReplication, String eventId) {\n     checkNotNull(source, \"source cannot be null\");\n     checkNotNull(destination, \"destinationFolder cannot be null\");\n \n-    java.nio.file.Path temporaryDirectory = createTempDirectory();\n-\n     FileSystemPathResolver sourceFileSystemPathResolver = new FileSystemPathResolver(sourceHiveConf);\n     Path sourceLocation = new Path(source);\n     sourceLocation = sourceFileSystemPathResolver.resolveScheme(sourceLocation);\n     sourceLocation = sourceFileSystemPathResolver.resolveNameServices(sourceLocation);\n-    Path localLocation = new Path(temporaryDirectory.toString(), fileName(source));\n-    copyToLocal(sourceLocation, localLocation);\n-\n-    Path destinationLocation = new Path(destination, fileName(source));\n-    copyToRemote(localLocation, destinationLocation);\n-\n-    LOG.info(\"Avro schema has been copied from '{}' to '{}'\", sourceLocation, destinationLocation);\n-    return destinationLocation;\n-  }\n-\n-  private java.nio.file.Path createTempDirectory() {\n-    java.nio.file.Path temporaryDirectory = null;\n-    try {\n-      temporaryDirectory = Files.createTempDirectory(\"avro-schema-download-folder\");\n-      temporaryDirectory.toFile().deleteOnExit();\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't create temporaryDirectory in the default temporary directory\", e);\n-    }\n-    return temporaryDirectory;\n-  }\n-\n-  private void copyToLocal(Path sourceLocation, Path localLocation) {\n-    try {\n-      FileSystem sourceFileSystem;\n-      sourceFileSystem = sourceLocation.getFileSystem(sourceHiveConf);\n-      sourceFileSystem.copyToLocalFile(false, sourceLocation, localLocation);\n-      LOG.info(\"Copy from {} to {} succeeded\", sourceLocation, localLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + sourceLocation + \" to \" + localLocation, e);\n-    }\n-  }\n \n-  private void copyToRemote(Path localLocation, Path remoteDestinationLocation) {\n-    FileSystem destinationFileSystem;\n-    try {\n-      destinationFileSystem = remoteDestinationLocation.getFileSystem(replicaHiveConf);\n-      destinationFileSystem.copyFromLocalFile(localLocation, remoteDestinationLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + localLocation + \" to \" + remoteDestinationLocation,\n-          e);\n-    }\n+    Path destinationSchemaFile = new Path(destination, sourceLocation.getName());\n+\n+    Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication\n+        .getMergedCopierOptions(globalCopierOptions.getCopierOptions(), eventTableReplication.getCopierOptions()));\n+    mergeCopierOptions.put(CopierOptions.COPY_DESTINATION_IS_FILE, \"true\");\n+    CopierFactory copierFactory = copierFactoryManager\n+        .getCopierFactory(sourceLocation, destinationSchemaFile, mergeCopierOptions);\n+    LOG.info(\"Going to replicate the Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMjYyOA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369522628", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .info(\"Avro schema '{} byes' has been copied from '{}' to '{}'\", metrics.getBytesReplicated(), sourceLocation,\n          \n          \n            \n                    .info(\"Avro schema '{} bytes' has been copied from '{}' to '{}'\", metrics.getBytesReplicated(), sourceLocation,", "author": "massdosage", "createdAt": "2020-01-22T12:06:18Z", "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java", "diffHunk": "@@ -41,64 +44,42 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SchemaCopier.class);\n \n   private final Configuration sourceHiveConf;\n-  private final Configuration replicaHiveConf;\n+  private final CopierFactoryManager copierFactoryManager;\n+  private final CopierOptions globalCopierOptions;\n \n   @Autowired\n-  public SchemaCopier(Configuration sourceHiveConf, Configuration replicaHiveConf) {\n+  public SchemaCopier(\n+      Configuration sourceHiveConf,\n+      CopierFactoryManager copierFactoryManager,\n+      CopierOptions globalCopierOptions) {\n     this.sourceHiveConf = sourceHiveConf;\n-    this.replicaHiveConf = replicaHiveConf;\n+    this.copierFactoryManager = copierFactoryManager;\n+    this.globalCopierOptions = globalCopierOptions;\n   }\n \n-  public Path copy(String source, String destination) {\n+  public Path copy(String source, String destination, EventTableReplication eventTableReplication, String eventId) {\n     checkNotNull(source, \"source cannot be null\");\n     checkNotNull(destination, \"destinationFolder cannot be null\");\n \n-    java.nio.file.Path temporaryDirectory = createTempDirectory();\n-\n     FileSystemPathResolver sourceFileSystemPathResolver = new FileSystemPathResolver(sourceHiveConf);\n     Path sourceLocation = new Path(source);\n     sourceLocation = sourceFileSystemPathResolver.resolveScheme(sourceLocation);\n     sourceLocation = sourceFileSystemPathResolver.resolveNameServices(sourceLocation);\n-    Path localLocation = new Path(temporaryDirectory.toString(), fileName(source));\n-    copyToLocal(sourceLocation, localLocation);\n-\n-    Path destinationLocation = new Path(destination, fileName(source));\n-    copyToRemote(localLocation, destinationLocation);\n-\n-    LOG.info(\"Avro schema has been copied from '{}' to '{}'\", sourceLocation, destinationLocation);\n-    return destinationLocation;\n-  }\n-\n-  private java.nio.file.Path createTempDirectory() {\n-    java.nio.file.Path temporaryDirectory = null;\n-    try {\n-      temporaryDirectory = Files.createTempDirectory(\"avro-schema-download-folder\");\n-      temporaryDirectory.toFile().deleteOnExit();\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't create temporaryDirectory in the default temporary directory\", e);\n-    }\n-    return temporaryDirectory;\n-  }\n-\n-  private void copyToLocal(Path sourceLocation, Path localLocation) {\n-    try {\n-      FileSystem sourceFileSystem;\n-      sourceFileSystem = sourceLocation.getFileSystem(sourceHiveConf);\n-      sourceFileSystem.copyToLocalFile(false, sourceLocation, localLocation);\n-      LOG.info(\"Copy from {} to {} succeeded\", sourceLocation, localLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + sourceLocation + \" to \" + localLocation, e);\n-    }\n-  }\n \n-  private void copyToRemote(Path localLocation, Path remoteDestinationLocation) {\n-    FileSystem destinationFileSystem;\n-    try {\n-      destinationFileSystem = remoteDestinationLocation.getFileSystem(replicaHiveConf);\n-      destinationFileSystem.copyFromLocalFile(localLocation, remoteDestinationLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + localLocation + \" to \" + remoteDestinationLocation,\n-          e);\n-    }\n+    Path destinationSchemaFile = new Path(destination, sourceLocation.getName());\n+\n+    Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication\n+        .getMergedCopierOptions(globalCopierOptions.getCopierOptions(), eventTableReplication.getCopierOptions()));\n+    mergeCopierOptions.put(CopierOptions.COPY_DESTINATION_IS_FILE, \"true\");\n+    CopierFactory copierFactory = copierFactoryManager\n+        .getCopierFactory(sourceLocation, destinationSchemaFile, mergeCopierOptions);\n+    LOG.info(\"Going to replicate the Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);\n+    Copier copier = copierFactory.newInstance(eventId, sourceLocation, destinationSchemaFile, mergeCopierOptions);\n+    Metrics metrics = copier.copy();\n+\n+    LOG\n+        .info(\"Avro schema '{} byes' has been copied from '{}' to '{}'\", metrics.getBytesReplicated(), sourceLocation,", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMzg5MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369523891", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CopierFactoryManager CopierFactoryManager,\n          \n          \n            \n                  CopierFactoryManager copierFactoryManager,", "author": "massdosage", "createdAt": "2020-01-22T12:09:46Z", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/ReplicationFactoryImpl.java", "diffHunk": "@@ -50,13 +47,13 @@\n   public ReplicationFactoryImpl(\n       SourceFactory sourceFactory,\n       ReplicaFactory replicaFactory,\n-      CopierFactoryManager copierFactoryManager,\n+      CopierFactoryManager CopierFactoryManager,", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDI4Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369524282", "bodyText": "Not sure why GH is moaning about no newline here?", "author": "massdosage", "createdAt": "2020-01-22T12:10:50Z", "path": "circus-train-integration-tests/src/test/data/com/hotels/bdp/circustrain/integration/CircusTrainHdfsS3IntegrationTest/unpartitioned-single-table-avro-schema.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+table-replications:\n+  - source-table:\n+      database-name: ${circus-train-runner.database-name}\n+      table-name: ct_table_u\n+    replica-table:\n+      table-name: ct_table_u_copy\n+      table-location: s3a://replica/${circus-train-runner.database-name}/ct_table_u_copy\n+security:\n+  credential-provider: jceks://file/${config-location}/aws.jceks\n+      ", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNjM0Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370126342", "bodyText": "I think there was some trailing whitespace.", "author": "patduin", "createdAt": "2020-01-23T13:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQxOA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369524418", "bodyText": "Is there a reason we are using s3a here rather than just s3?", "author": "massdosage", "createdAt": "2020-01-22T12:11:15Z", "path": "circus-train-integration-tests/src/test/data/com/hotels/bdp/circustrain/integration/CircusTrainHdfsS3IntegrationTest/unpartitioned-single-table-avro-schema.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+table-replications:\n+  - source-table:\n+      database-name: ${circus-train-runner.database-name}\n+      table-name: ct_table_u\n+    replica-table:\n+      table-name: ct_table_u_copy\n+      table-location: s3a://replica/${circus-train-runner.database-name}/ct_table_u_copy", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMTEzNg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369611136", "bodyText": "I have no clue but it doesn't work if I use s3, so I stuck with the going examples. I suspect something in s3Proxy test framework. Not ideal haven't explored it further.", "author": "patduin", "createdAt": "2020-01-22T15:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NjE0MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370266141", "bodyText": "OK, weird, let's leave it like this for now then.", "author": "massdosage", "createdAt": "2020-01-23T17:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQ1Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369524452", "bodyText": "Ditto", "author": "massdosage", "createdAt": "2020-01-22T12:11:21Z", "path": "circus-train-integration-tests/src/test/data/com/hotels/bdp/circustrain/integration/CircusTrainS3S3IntegrationTest/unpartitioned-single-table-avro-schema.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+table-replications:\n+  - source-table:\n+      database-name: ${circus-train-runner.database-name}\n+      table-name: ct_table_u\n+    replica-table:\n+      table-name: ct_table_u_copy\n+      table-location: s3a://replica/${circus-train-runner.database-name}/ct_table_u_copy", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyOTIwNQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370129205", "bodyText": "see above I suspect s3proxy", "author": "patduin", "createdAt": "2020-01-23T13:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3NzI1Nw==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369577257", "bodyText": "A general question: is there a reason to prefer the generic assertThat to more specific methods, like assertNotNull in this case?", "author": "nvitucci", "createdAt": "2020-01-22T14:05:32Z", "path": "circus-train-api/src/test/java/com/hotels/bdp/circustrain/api/conf/TableReplicationTest.java", "diffHunk": "@@ -89,4 +93,26 @@ public void nullTableLocation() throws Exception {\n     assertThat(violations.size(), is(1));\n   }\n \n+  @Test\n+  public void mergeNullOptions() {\n+    Map<String, Object> mergedCopierOptions = tableReplication.getMergedCopierOptions(null);\n+    assertThat(mergedCopierOptions, is(not(nullValue())));", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYxMTUzNQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369611535", "bodyText": "We prefer hamcrest. I'm ambivalent either way. This was copy paste since the code was moved I moved the test code as well.", "author": "patduin", "createdAt": "2020-01-22T15:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3NzI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3NzY0NA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369577644", "bodyText": "Ditto: why not assertEquals?", "author": "nvitucci", "createdAt": "2020-01-22T14:06:13Z", "path": "circus-train-api/src/test/java/com/hotels/bdp/circustrain/api/conf/TableReplicationTest.java", "diffHunk": "@@ -89,4 +93,26 @@ public void nullTableLocation() throws Exception {\n     assertThat(violations.size(), is(1));\n   }\n \n+  @Test\n+  public void mergeNullOptions() {\n+    Map<String, Object> mergedCopierOptions = tableReplication.getMergedCopierOptions(null);\n+    assertThat(mergedCopierOptions, is(not(nullValue())));\n+    assertThat(mergedCopierOptions.isEmpty(), is(true));\n+  }\n+\n+  @Test\n+  public void mergeOptions() {\n+    Map<String, Object> globalOptions = new HashMap<>();\n+    globalOptions.put(\"one\", Integer.valueOf(1));\n+    globalOptions.put(\"two\", Integer.valueOf(2));\n+    Map<String, Object> overrideOptions = new HashMap<>();\n+    overrideOptions.put(\"two\", \"two\");\n+    overrideOptions.put(\"three\", \"three\");\n+    tableReplication.setCopierOptions(overrideOptions);\n+    Map<String, Object> mergedCopierOptions = tableReplication.getMergedCopierOptions(globalOptions);\n+    assertThat((Integer) mergedCopierOptions.get(\"one\"), is(Integer.valueOf(1)));", "originalCommit": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e75ca74e314e1f3f8479bcf87d63df8f5c5bdf6c", "url": "https://github.com/ExpediaGroup/circus-train/commit/e75ca74e314e1f3f8479bcf87d63df8f5c5bdf6c", "message": "Update CHANGELOG.md\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>", "committedDate": "2020-01-22T15:02:47Z", "type": "commit"}, {"oid": "ec92fbd560c3a50cc14e95e2d4bc26bbfb90a42f", "url": "https://github.com/ExpediaGroup/circus-train/commit/ec92fbd560c3a50cc14e95e2d4bc26bbfb90a42f", "message": "Update circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>", "committedDate": "2020-01-22T15:05:27Z", "type": "commit"}, {"oid": "bc35c2c9ae0ed6078d6e09b1637f857f2761b54f", "url": "https://github.com/ExpediaGroup/circus-train/commit/bc35c2c9ae0ed6078d6e09b1637f857f2761b54f", "message": "Update circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/ReplicationFactoryImpl.java\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>", "committedDate": "2020-01-22T15:05:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjA5MQ==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369662091", "bodyText": "Why was this changed ?", "author": "abhimanyugupta07", "createdAt": "2020-01-22T16:23:01Z", "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/transformation/AbstractAvroSerDeTransformation.java", "diffHunk": "@@ -85,8 +91,15 @@ public void tableReplicationStart(EventTableReplication tableReplication, String\n   }\n \n   @Override\n-  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {}\n+  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {\n+    this.eventId = null;", "originalCommit": "bc35c2c9ae0ed6078d6e09b1637f857f2761b54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAxNjkzMA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370016930", "bodyText": "Just resetting the values after a completed replication. Once the replication is done these value are not valid anymore another replication might come in. This state should be refreshed for every replication.", "author": "patduin", "createdAt": "2020-01-23T09:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMzY2Mg==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370123662", "bodyText": "I stand corrected I shouldn't have changed this all the tests started failing. I've put this back I guess it's ok that we override on start.", "author": "patduin", "createdAt": "2020-01-23T13:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjA5MQ=="}], "type": "inlineReview"}, {"oid": "4099685cd0e25d45de2408a79d16f0c5d247a957", "url": "https://github.com/ExpediaGroup/circus-train/commit/4099685cd0e25d45de2408a79d16f0c5d247a957", "message": "Fixed test, fixed some naming", "committedDate": "2020-01-22T16:35:37Z", "type": "commit"}, {"oid": "a560b779926207da92981a444830df179b3a275c", "url": "https://github.com/ExpediaGroup/circus-train/commit/a560b779926207da92981a444830df179b3a275c", "message": "constant", "committedDate": "2020-01-22T16:39:29Z", "type": "commit"}, {"oid": "83641af2c9109618b70d527dd1b52602c6872cdb", "url": "https://github.com/ExpediaGroup/circus-train/commit/83641af2c9109618b70d527dd1b52602c6872cdb", "message": "header", "committedDate": "2020-01-23T11:30:29Z", "type": "commit"}, {"oid": "8d2746fe60045f44ca57fdc2fa91158ab125b7e1", "url": "https://github.com/ExpediaGroup/circus-train/commit/8d2746fe60045f44ca57fdc2fa91158ab125b7e1", "message": "reverted null assigments and fixed tests", "committedDate": "2020-01-23T13:38:53Z", "type": "commit"}, {"oid": "4a97963de94be6393a18f510ce5659595d247200", "url": "https://github.com/ExpediaGroup/circus-train/commit/4a97963de94be6393a18f510ce5659595d247200", "message": "Apply suggestions from code review\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>", "committedDate": "2020-01-23T13:46:44Z", "type": "commit"}, {"oid": "803b72af77907422f896d30cbcc7f71e738026ee", "url": "https://github.com/ExpediaGroup/circus-train/commit/803b72af77907422f896d30cbcc7f71e738026ee", "message": "refactored", "committedDate": "2020-01-23T13:47:10Z", "type": "commit"}, {"oid": "35cc000860bda846085d0b680b7c119fde13eac0", "url": "https://github.com/ExpediaGroup/circus-train/commit/35cc000860bda846085d0b680b7c119fde13eac0", "message": "Merge branch 'issue-162' of github.com:HotelsDotCom/circus-train into issue-162", "committedDate": "2020-01-23T13:47:20Z", "type": "commit"}, {"oid": "5448f7b91aad292e267926024e904107c5330942", "url": "https://github.com/ExpediaGroup/circus-train/commit/5448f7b91aad292e267926024e904107c5330942", "message": "formatting", "committedDate": "2020-01-23T13:53:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MjQ1NA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370262454", "bodyText": "Should we consider this a 15.1.0 release? It's somewhere between a bug fix and a feature...", "author": "massdosage", "createdAt": "2020-01-23T17:44:08Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,8 @@\n-## [15.0.0] - 2019-11-12\n+## TBD - TBD", "originalCommit": "5448f7b91aad292e267926024e904107c5330942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxNTU4NA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370315584", "bodyText": "ah yes forgot to bring that up. I'm for 15.1.0 as well.", "author": "patduin", "createdAt": "2020-01-23T19:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MjQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzg3MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370263870", "bodyText": "CopierFactoryFactory ;)", "author": "massdosage", "createdAt": "2020-01-23T17:47:21Z", "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/copier/CopierFactoryManager.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.copier;\n+\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+public interface CopierFactoryManager {", "originalCommit": "5448f7b91aad292e267926024e904107c5330942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxNTI4MA==", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370315280", "bodyText": "I know let's not :)", "author": "patduin", "createdAt": "2020-01-23T19:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzg3MA=="}], "type": "inlineReview"}, {"oid": "025dea4bd20c0db1ae8362d763ae66600713c783", "url": "https://github.com/ExpediaGroup/circus-train/commit/025dea4bd20c0db1ae8362d763ae66600713c783", "message": "bumped version", "committedDate": "2020-01-23T19:44:11Z", "type": "commit"}]}