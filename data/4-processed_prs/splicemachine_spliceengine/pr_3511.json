{"pr_number": 3511, "pr_title": "DB-9428 DB Pipeline to cloud", "pr_createdAt": "2020-05-01T16:08:59Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3511", "timeline": [{"oid": "e56836e2bd75eae0c55528ae1b0a583d735068bf", "url": "https://github.com/splicemachine/spliceengine/commit/e56836e2bd75eae0c55528ae1b0a583d735068bf", "message": "DB-9428 K8S Test pipeline", "committedDate": "2020-04-29T09:19:36Z", "type": "commit"}, {"oid": "2d3f48830a462ec1ec0a91d6fe83882d2e66514f", "url": "https://github.com/splicemachine/spliceengine/commit/2d3f48830a462ec1ec0a91d6fe83882d2e66514f", "message": "Put pipeline intro try catch", "committedDate": "2020-04-29T10:31:57Z", "type": "commit"}, {"oid": "19613790f16652029ebda19ca5dd8b9a02e62c67", "url": "https://github.com/splicemachine/spliceengine/commit/19613790f16652029ebda19ca5dd8b9a02e62c67", "message": "Improve pipeline speed", "committedDate": "2020-05-12T10:21:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MzQ2Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3511#discussion_r460943462", "bodyText": "DB-9133-3.0? that should maybe be a variable, no?", "author": "martinrupp", "createdAt": "2020-07-27T14:44:18Z", "path": "pipelines/k8s-test/Jenkinsfile", "diffHunk": "@@ -0,0 +1,250 @@\n+def parcel_url = \"\"\n+def folder_name = \"\"\n+def scmVars = \"\"\n+def BUILD_USER_EMAIL=\"build@splicemachine.com\"\n+String[] clusters = [\"aks-dev1\",\"aks-dev2\",\"aks-dev3\",\"aks-dev4\",\"aks-dev5\",\"aks-dev6\",\"aks-dev7\",\"aks-dev8\"]\n+def vaultSecrets = [\n+[$class: 'VaultSecret', path: \"secret/azure/service_principals/8777b2db-3764-422b-a302-7aefb352399f\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'secret_app_id', vaultKey: 'app_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_subscription_id', vaultKey: 'subscription_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_object_id', vaultKey: 'object_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_secret', vaultKey: 'secret'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_tenant', vaultKey: 'tenant']]],\n+[$class: 'VaultSecret', path: \"secret/aws/service_accounts/jenkins-build\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'secret_key_id', vaultKey: 'access_key_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_key', vaultKey: 'access_key']]],\n+[$class: 'VaultSecret', path: \"secret/aws/jenkins/colo_jenkins\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'jenkins_user', vaultKey: 'user'],\n+    [$class: 'VaultSecretValue', envVar: 'jenkins_pass', vaultKey: 'pass']]],\n+[$class: 'VaultSecret', path: \"secret/aws/jenkins/slack\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'bot_token', vaultKey: 'oauth']]],\n+[$class: 'VaultSecret', path: \"secret/aws/jenkins/splicemachine\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'aws_splice_access', vaultKey: 'access'],\n+    [$class: 'VaultSecretValue', envVar: 'aws_splice_secret', vaultKey: 'secret']]]\n+]\n+\n+\n+node('splice-standalone'){\n+    def region = \"us-east-1\"\n+    stage('Checkout Spliceengine') {\n+        // Get some code from a GitHub repository\n+        scmVars = checkout scm\n+        checkout([  \n+            $class: 'GitSCM', \n+            branches: [[name: 'refs/heads/'+scmVars.GIT_BRANCH]], \n+            doGenerateSubmoduleConfigurations: false, \n+            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], \n+            submoduleCfg: [], \n+            userRemoteConfigs: [[credentialsId: 'cloudspliceci_ssh', url: 'https://github.com/splicemachine/spliceengine.git']]\n+        ])\n+        checkout([  \n+            $class: 'GitSCM', \n+            branches: [[name: 'refs/heads/'+scmVars.GIT_BRANCH]], \n+            doGenerateSubmoduleConfigurations: false, \n+            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], \n+            submoduleCfg: [], \n+            userRemoteConfigs: [[credentialsId: 'cloudspliceci_ssh', url: 'https://github.com/splicemachine/spliceengine-ee.git']]\n+        ])\n+    }\n+    stage('Login') {\n+        wrap([$class: 'VaultBuildWrapper', vaultSecrets: vaultSecrets]) {\n+        sh \"aws configure set aws_access_key_id $aws_splice_access\"\n+        sh \"aws configure set aws_secret_access_key $aws_splice_secret\"\n+        sh \"aws configure set region $region\"\n+        }\n+    }\n+    stage(\"Build/Test\"){\n+        // Run Maven on a Unix agent.\n+        dir('spliceengine'){\n+            sh \"mvn -Dmaven.test.failure.ignore=true -q -B -e --fail-at-end clean install -Pcore,cdh6.3.0,ee,parcel -DskipTests\"\n+            parcel_url = sh(script:\"aws s3 sync assembly/target/parcels/ s3://splice-snapshots/dev//master/ --acl public-read --no-progress | grep el7 | cut -d ' ' -f 4-100 | cut -c 6- | awk '{\\$1=\\$1};1' | xargs echo -n\", returnStdout: true)\n+            folder_name = sh(script:\"echo '${parcel_url}' | cut -d/ -f 5 | cut -d- -f-3 | awk '{\\$1=\\$1};1' | xargs echo -n\", returnStdout: true)\n+            parcel_url=\"https://s3.amazonaws.com/${parcel_url}\"\n+        }\n+    }\n+    stage(\"Docker Build Dev\"){\n+        echo \"${parcel_url}\"\n+        echo \"${folder_name}\"\n+        build job: '../PDImageBuilds/pd-hbase-spark-docker-build/master', parameters: [\n+                [$class: 'StringParameterValue', name: 'ParcelLocationAndName', value: parcel_url],\n+                [$class: 'StringParameterValue', name: 'ExtractedFolderName', value: folder_name],\n+                [$class: 'StringParameterValue', name: 'DockerTag', value: scmVars.GIT_BRANCH]\n+            ]\n+    }\n+    stage('Checkout dbaas-infrastructure') {\n+        // Get some code from a GitHub repository\n+        checkout([  \n+            $class: 'GitSCM', \n+            branches: [[name: 'refs/heads/master']], \n+            doGenerateSubmoduleConfigurations: false, \n+            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'dbaas-infrastructure']], \n+            submoduleCfg: [], \n+            userRemoteConfigs: [[credentialsId: 'cloudspliceci_ssh', url: 'https://github.com/splicemachine/dbaas-infrastructure.git']]\n+        ])\n+    }\n+    stage(\"Setup New Splice Image Tags\"){\n+        dir(\"dbaas-infrastructure\"){\n+            sh \"sed -i 's/repository:\\\\ splicemachine\\\\/sm_k8_spark-3.0.0:.*/repository:\\\\ splicemachine\\\\/sm_k8_spark-3.0.0:master/' kubernetes/charts/splice/values.yaml\"\n+            sh \"sed -i 's/repository:\\\\ splicemachine\\\\/sm_k8_hbase-3.0.0:.*/repository:\\\\ splicemachine\\\\/sm_k8_hbase-3.0.0:master/' kubernetes/charts/splice/values.yaml\"\n+        }\n+    }\n+}\n+node('splice-standalone'){\n+    try{\n+    stage('Login') {\n+    wrap([$class: 'VaultBuildWrapper', vaultSecrets: vaultSecrets]) {\n+        sh \"az login --service-principal --username $secret_app_id --password $secret_secret --tenant $secret_tenant\"\n+        sh \"aws configure set aws_access_key_id $secret_key_id\"\n+        sh \"aws configure set aws_secret_access_key $secret_key\"\n+        }\n+    }\n+    stage('Select Avaliable Cluster') {\n+        def unavailable = sh (script:\"az aks list | grep 'resourceGroup\\\": \\\"aks-' | cut -d '\\\"' -f 4\", returnStdout: true).split()\n+        clusters = clusters - unavailable\n+        target_cluster = clusters[Math.abs( new Random().nextInt() % (0 - clusters.size()) )]\n+    }\n+\n+    stage('Create Cluster') {\n+        build job: '../Kubernetes/KubernetesDeploy/azure/master', parameters: [\n+            [$class: 'StringParameterValue', name: 'action', value: \"create\"],\n+            [$class: 'StringParameterValue', name: 'environment', value: target_cluster],\n+            [$class: 'StringParameterValue', name: 'kubernetes_version', value: \"1.14.8\"],\n+            [$class: 'StringParameterValue', name: 'enable_cloud_manager', value: \"true\"],\n+            [$class: 'StringParameterValue', name: 'enable_tick', value: \"true\"],\n+            [$class: 'StringParameterValue', name: 'enable_elastic_stack', value: \"true\"],\n+            [$class: 'StringParameterValue', name: 'core_vmsize', value: \"Standard_D4s_v3\"],\n+            [$class: 'StringParameterValue', name: 'core_max_vmcount', value: \"3\"],\n+            [$class: 'StringParameterValue', name: 'db_vmsize', value: \"Standard_D16s_v3\"],\n+            [$class: 'StringParameterValue', name: 'meta_max_vmcount', value: \"3\"],\n+            [$class: 'StringParameterValue', name: 'meta_vmsize', value: \"Standard_D8s_v3\"],\n+            [$class: 'StringParameterValue', name: 'db_max_vmcount', value: \"12\"],\n+            [$class: 'StringParameterValue', name: 'tag_creator', value: scmVars.GIT_BRANCH]\n+        ]\n+    }\n+    stage('Create Splice-DB') {\n+        dir ('dbaas-infrastructure/kubernetes/') {\n+            sh \"ls\"\n+            sh \"az aks get-credentials --resource-group ${target_cluster} --name ${target_cluster}\"\n+            sh \"helm init --client-only\"\n+            sh \"kubectl get pods -A\"\n+            sh \"./create-splice-operator.sh ${target_cluster} az default\"\n+            sh \"kubectl get splicedbclusters\"\n+            sh \"kubectl get po -n test\"\n+        }\n+    }\n+    stage('Run Integration Tests') {\n+        wrap([$class: 'VaultBuildWrapper', vaultSecrets: vaultSecrets]) {\n+            dir ('dbaas-infrastructure/kubernetes/') {\n+                checkSpliceDB()\n+                def jdbc_ip = sh (script:\"kubectl get svc -A | grep 'LoadBalancer.*1527' | awk '{\\$1=\\$1};1' | cut -d \\\" \\\" -f 5 | xargs echo -n\", returnStdout: true)\n+                if ( jdbc_ip == \"\") {\n+                    throw exception(\"JDBC URL not found/initialized\")\n+                }\n+                sh \"helm install --name integration-test charts/integration-tests --namespace test --set jdbc_url='jdbc:splice://$jdbc_ip:1527/splicedb;ssl=basic;password=admin;' --set splice_release='DB-9133_3.0' --set artifact_user='$jenkins_user' --set artifact_password='$jenkins_pass'\"", "originalCommit": "19613790f16652029ebda19ca5dd8b9a02e62c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyNjQ1OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3511#discussion_r469826458", "bodyText": "Updated it to set the release to the current branch that its pulling from. At the time, DB-9133 was the only branch that had working remote-it's.", "author": "bklo94", "createdAt": "2020-08-13T09:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MzQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgzODYzNg==", "url": "https://github.com/splicemachine/spliceengine/pull/3511#discussion_r481838636", "bodyText": "\ud83d\udc4d", "author": "martinrupp", "createdAt": "2020-09-02T07:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0MzQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NDczMg==", "url": "https://github.com/splicemachine/spliceengine/pull/3511#discussion_r460944732", "bodyText": "shouldn't this be defined in the requirements e.g. Dockerfile?\nRUN apt-get update && apt-get install -y netcat", "author": "martinrupp", "createdAt": "2020-07-27T14:45:59Z", "path": "pipelines/k8s-test/Jenkinsfile", "diffHunk": "@@ -0,0 +1,250 @@\n+def parcel_url = \"\"\n+def folder_name = \"\"\n+def scmVars = \"\"\n+def BUILD_USER_EMAIL=\"build@splicemachine.com\"\n+String[] clusters = [\"aks-dev1\",\"aks-dev2\",\"aks-dev3\",\"aks-dev4\",\"aks-dev5\",\"aks-dev6\",\"aks-dev7\",\"aks-dev8\"]\n+def vaultSecrets = [\n+[$class: 'VaultSecret', path: \"secret/azure/service_principals/8777b2db-3764-422b-a302-7aefb352399f\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'secret_app_id', vaultKey: 'app_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_subscription_id', vaultKey: 'subscription_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_object_id', vaultKey: 'object_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_secret', vaultKey: 'secret'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_tenant', vaultKey: 'tenant']]],\n+[$class: 'VaultSecret', path: \"secret/aws/service_accounts/jenkins-build\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'secret_key_id', vaultKey: 'access_key_id'],\n+    [$class: 'VaultSecretValue', envVar: 'secret_key', vaultKey: 'access_key']]],\n+[$class: 'VaultSecret', path: \"secret/aws/jenkins/colo_jenkins\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'jenkins_user', vaultKey: 'user'],\n+    [$class: 'VaultSecretValue', envVar: 'jenkins_pass', vaultKey: 'pass']]],\n+[$class: 'VaultSecret', path: \"secret/aws/jenkins/slack\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'bot_token', vaultKey: 'oauth']]],\n+[$class: 'VaultSecret', path: \"secret/aws/jenkins/splicemachine\", secretValues: [\n+    [$class: 'VaultSecretValue', envVar: 'aws_splice_access', vaultKey: 'access'],\n+    [$class: 'VaultSecretValue', envVar: 'aws_splice_secret', vaultKey: 'secret']]]\n+]\n+\n+\n+node('splice-standalone'){\n+    def region = \"us-east-1\"\n+    stage('Checkout Spliceengine') {\n+        // Get some code from a GitHub repository\n+        scmVars = checkout scm\n+        checkout([  \n+            $class: 'GitSCM', \n+            branches: [[name: 'refs/heads/'+scmVars.GIT_BRANCH]], \n+            doGenerateSubmoduleConfigurations: false, \n+            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], \n+            submoduleCfg: [], \n+            userRemoteConfigs: [[credentialsId: 'cloudspliceci_ssh', url: 'https://github.com/splicemachine/spliceengine.git']]\n+        ])\n+        checkout([  \n+            $class: 'GitSCM', \n+            branches: [[name: 'refs/heads/'+scmVars.GIT_BRANCH]], \n+            doGenerateSubmoduleConfigurations: false, \n+            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], \n+            submoduleCfg: [], \n+            userRemoteConfigs: [[credentialsId: 'cloudspliceci_ssh', url: 'https://github.com/splicemachine/spliceengine-ee.git']]\n+        ])\n+    }\n+    stage('Login') {\n+        wrap([$class: 'VaultBuildWrapper', vaultSecrets: vaultSecrets]) {\n+        sh \"aws configure set aws_access_key_id $aws_splice_access\"\n+        sh \"aws configure set aws_secret_access_key $aws_splice_secret\"\n+        sh \"aws configure set region $region\"\n+        }\n+    }\n+    stage(\"Build/Test\"){\n+        // Run Maven on a Unix agent.\n+        dir('spliceengine'){\n+            sh \"mvn -Dmaven.test.failure.ignore=true -q -B -e --fail-at-end clean install -Pcore,cdh6.3.0,ee,parcel -DskipTests\"\n+            parcel_url = sh(script:\"aws s3 sync assembly/target/parcels/ s3://splice-snapshots/dev//master/ --acl public-read --no-progress | grep el7 | cut -d ' ' -f 4-100 | cut -c 6- | awk '{\\$1=\\$1};1' | xargs echo -n\", returnStdout: true)\n+            folder_name = sh(script:\"echo '${parcel_url}' | cut -d/ -f 5 | cut -d- -f-3 | awk '{\\$1=\\$1};1' | xargs echo -n\", returnStdout: true)\n+            parcel_url=\"https://s3.amazonaws.com/${parcel_url}\"\n+        }\n+    }\n+    stage(\"Docker Build Dev\"){\n+        echo \"${parcel_url}\"\n+        echo \"${folder_name}\"\n+        build job: '../PDImageBuilds/pd-hbase-spark-docker-build/master', parameters: [\n+                [$class: 'StringParameterValue', name: 'ParcelLocationAndName', value: parcel_url],\n+                [$class: 'StringParameterValue', name: 'ExtractedFolderName', value: folder_name],\n+                [$class: 'StringParameterValue', name: 'DockerTag', value: scmVars.GIT_BRANCH]\n+            ]\n+    }\n+    stage('Checkout dbaas-infrastructure') {\n+        // Get some code from a GitHub repository\n+        checkout([  \n+            $class: 'GitSCM', \n+            branches: [[name: 'refs/heads/master']], \n+            doGenerateSubmoduleConfigurations: false, \n+            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'dbaas-infrastructure']], \n+            submoduleCfg: [], \n+            userRemoteConfigs: [[credentialsId: 'cloudspliceci_ssh', url: 'https://github.com/splicemachine/dbaas-infrastructure.git']]\n+        ])\n+    }\n+    stage(\"Setup New Splice Image Tags\"){\n+        dir(\"dbaas-infrastructure\"){\n+            sh \"sed -i 's/repository:\\\\ splicemachine\\\\/sm_k8_spark-3.0.0:.*/repository:\\\\ splicemachine\\\\/sm_k8_spark-3.0.0:master/' kubernetes/charts/splice/values.yaml\"\n+            sh \"sed -i 's/repository:\\\\ splicemachine\\\\/sm_k8_hbase-3.0.0:.*/repository:\\\\ splicemachine\\\\/sm_k8_hbase-3.0.0:master/' kubernetes/charts/splice/values.yaml\"\n+        }\n+    }\n+}\n+node('splice-standalone'){\n+    try{\n+    stage('Login') {\n+    wrap([$class: 'VaultBuildWrapper', vaultSecrets: vaultSecrets]) {\n+        sh \"az login --service-principal --username $secret_app_id --password $secret_secret --tenant $secret_tenant\"\n+        sh \"aws configure set aws_access_key_id $secret_key_id\"\n+        sh \"aws configure set aws_secret_access_key $secret_key\"\n+        }\n+    }\n+    stage('Select Avaliable Cluster') {\n+        def unavailable = sh (script:\"az aks list | grep 'resourceGroup\\\": \\\"aks-' | cut -d '\\\"' -f 4\", returnStdout: true).split()\n+        clusters = clusters - unavailable\n+        target_cluster = clusters[Math.abs( new Random().nextInt() % (0 - clusters.size()) )]\n+    }\n+\n+    stage('Create Cluster') {\n+        build job: '../Kubernetes/KubernetesDeploy/azure/master', parameters: [\n+            [$class: 'StringParameterValue', name: 'action', value: \"create\"],\n+            [$class: 'StringParameterValue', name: 'environment', value: target_cluster],\n+            [$class: 'StringParameterValue', name: 'kubernetes_version', value: \"1.14.8\"],\n+            [$class: 'StringParameterValue', name: 'enable_cloud_manager', value: \"true\"],\n+            [$class: 'StringParameterValue', name: 'enable_tick', value: \"true\"],\n+            [$class: 'StringParameterValue', name: 'enable_elastic_stack', value: \"true\"],\n+            [$class: 'StringParameterValue', name: 'core_vmsize', value: \"Standard_D4s_v3\"],\n+            [$class: 'StringParameterValue', name: 'core_max_vmcount', value: \"3\"],\n+            [$class: 'StringParameterValue', name: 'db_vmsize', value: \"Standard_D16s_v3\"],\n+            [$class: 'StringParameterValue', name: 'meta_max_vmcount', value: \"3\"],\n+            [$class: 'StringParameterValue', name: 'meta_vmsize', value: \"Standard_D8s_v3\"],\n+            [$class: 'StringParameterValue', name: 'db_max_vmcount', value: \"12\"],\n+            [$class: 'StringParameterValue', name: 'tag_creator', value: scmVars.GIT_BRANCH]\n+        ]\n+    }\n+    stage('Create Splice-DB') {\n+        dir ('dbaas-infrastructure/kubernetes/') {\n+            sh \"ls\"\n+            sh \"az aks get-credentials --resource-group ${target_cluster} --name ${target_cluster}\"\n+            sh \"helm init --client-only\"\n+            sh \"kubectl get pods -A\"\n+            sh \"./create-splice-operator.sh ${target_cluster} az default\"\n+            sh \"kubectl get splicedbclusters\"\n+            sh \"kubectl get po -n test\"\n+        }\n+    }\n+    stage('Run Integration Tests') {\n+        wrap([$class: 'VaultBuildWrapper', vaultSecrets: vaultSecrets]) {\n+            dir ('dbaas-infrastructure/kubernetes/') {\n+                checkSpliceDB()\n+                def jdbc_ip = sh (script:\"kubectl get svc -A | grep 'LoadBalancer.*1527' | awk '{\\$1=\\$1};1' | cut -d \\\" \\\" -f 5 | xargs echo -n\", returnStdout: true)\n+                if ( jdbc_ip == \"\") {\n+                    throw exception(\"JDBC URL not found/initialized\")\n+                }\n+                sh \"helm install --name integration-test charts/integration-tests --namespace test --set jdbc_url='jdbc:splice://$jdbc_ip:1527/splicedb;ssl=basic;password=admin;' --set splice_release='DB-9133_3.0' --set artifact_user='$jenkins_user' --set artifact_password='$jenkins_pass'\"\n+                sh \"sleep 5m\"\n+                sh \"kubectl logs -l job-name=integration-tests --follow -n test\"\n+                sh \"touch it.log\"\n+                sh \"kubectl logs -l job-name=integration-tests --tail=10000 -n test >> it.log\"\n+                try {\n+                    def failures = sh (script:\"cat it.log | grep 'FAILURE!'\", returnStdout: true)\n+                    if (!failures.isEmpty()){\n+                        currentBuild.result = 'FAILED'\n+                        currentStage.result = 'FAILURE'\n+                    } else {\n+                        currentBuild.result = 'SUCCESS'\n+                    }\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILED'\n+                    currentStage.result = 'FAILURE'\n+                }\n+                def log_file = sh (script:\"kubectl logs -l job-name=integration-tests --tail=2000 -n default | grep maven.out | cut -c 112-300\", returnStdout: true)\n+                }\n+            }\n+        }\n+    } \n+    catch (any) {\n+        // if there was an exception thrown, the build failed\n+        currentBuild.result = \"FAILED\"\n+        throw any\n+\n+    } finally {\n+        stage('Delete Cluster') {\n+            build job: '../Kubernetes/KubernetesDeploy/azure/master', parameters: [\n+                [$class: 'StringParameterValue', name: 'action', value: \"destroy\"],\n+                [$class: 'StringParameterValue', name: 'environment', value: target_cluster],\n+                [$class: 'StringParameterValue', name: 'destroy_confirmation', value: target_cluster],\n+                [$class: 'StringParameterValue', name: 'kubernetes_version', value: \"1.14.8\"],\n+                [$class: 'StringParameterValue', name: 'enable_cloud_manager', value: \"true\"],\n+                [$class: 'StringParameterValue', name: 'enable_tick', value: \"true\"],\n+                [$class: 'StringParameterValue', name: 'enable_elastic_stack', value: \"true\"],\n+                [$class: 'StringParameterValue', name: 'core_vmsize', value: \"Standard_D4s_v3\"],\n+                [$class: 'StringParameterValue', name: 'core_max_vmcount', value: \"3\"],\n+                [$class: 'StringParameterValue', name: 'db_vmsize', value: \"Standard_D16s_v3\"],\n+                [$class: 'StringParameterValue', name: 'meta_max_vmcount', value: \"3\"],\n+                [$class: 'StringParameterValue', name: 'meta_vmsize', value: \"Standard_D8s_v3\"],\n+                [$class: 'StringParameterValue', name: 'db_max_vmcount', value: \"12\"],\n+                [$class: 'StringParameterValue', name: 'tag_creator', value: scmVars.GIT_BRANCH]\n+            ]\n+            }\n+        }\n+        notifyBuild(currentBuild.result)\n+}\n+\n+//scheck for external IP to show and if ingress is accepting connections\n+def checkSpliceDB() {\n+    sh '''wget http://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz", "originalCommit": "19613790f16652029ebda19ca5dd8b9a02e62c67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyODE2Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/3511#discussion_r469828163", "bodyText": "I ran into errors where netcat wasn't found in the docker image. I tried putting the package into the docker image as an apk install(base is alpine), but I kept getting an error about application not found. I also tried exporting the path inside the docker image without success. The only way I managed to get it working was just to install it as a part of the pipeline as a stage.", "author": "bklo94", "createdAt": "2020-08-13T09:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NDczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgzNzg4Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3511#discussion_r481837882", "bodyText": "ok", "author": "martinrupp", "createdAt": "2020-09-02T07:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk0NDczMg=="}], "type": "inlineReview"}, {"oid": "6bce2de22f5317d47a9933ba3b497c0ec6c0c84a", "url": "https://github.com/splicemachine/spliceengine/commit/6bce2de22f5317d47a9933ba3b497c0ec6c0c84a", "message": "Update pipeline to current job parameters", "committedDate": "2020-08-13T09:36:38Z", "type": "commit"}, {"oid": "3696dcdfb317d8ba6079dba5e404ee3b656fce59", "url": "https://github.com/splicemachine/spliceengine/commit/3696dcdfb317d8ba6079dba5e404ee3b656fce59", "message": "Merge branch 'master' into DB-9428", "committedDate": "2020-09-10T08:42:11Z", "type": "commit"}, {"oid": "b116de3ccdd850d4a3a361f0529ae49652e59c3d", "url": "https://github.com/splicemachine/spliceengine/commit/b116de3ccdd850d4a3a361f0529ae49652e59c3d", "message": "Merge branch 'DB-9428' of https://github.com/splicemachine/spliceengine into DB-9428", "committedDate": "2020-09-10T08:43:29Z", "type": "commit"}]}