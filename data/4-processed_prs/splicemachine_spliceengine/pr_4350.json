{"pr_number": 4350, "pr_title": "DB-10562 Refactor SpliceTransactionResourceImpl.getMarshallTransaction ", "pr_createdAt": "2020-10-22T15:00:40Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4350", "timeline": [{"oid": "46aa2d296998a393398a204e4dff33d06676204a", "url": "https://github.com/splicemachine/spliceengine/commit/46aa2d296998a393398a204e4dff33d06676204a", "message": "DB-10562 Refactor SpliceTransactionResourceImpl.getMarshallTransaction", "committedDate": "2020-10-22T14:55:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MDkwNw==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512570907", "bodyText": "Returning the LCC here seems wrong. Rework that class a bit to not have to return a LCC whose contextmanager got closed", "author": "arnaud-splice", "createdAt": "2020-10-27T10:23:50Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/index/IndexTransformer.java", "diffHunk": "@@ -707,18 +707,12 @@ public int getMaxBaseColumnPosition() {\n     }\n \n     private LanguageConnectionContext getLcc(DDLMessage.TentativeIndex tentativeIndex) throws StandardException {\n-        boolean prepared = false;\n-        SpliceTransactionResourceImpl transactionResource = null;\n-        try {\n-            TxnView txn = DDLUtils.getLazyTransaction(tentativeIndex.getTxnId());\n-            transactionResource = new SpliceTransactionResourceImpl();\n-            prepared = transactionResource.marshallTransaction(txn);\n+        TxnView txn = DDLUtils.getLazyTransaction(tentativeIndex.getTxnId());", "originalCommit": "46aa2d296998a393398a204e4dff33d06676204a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NzA2Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512997067", "bodyText": "lcc is only used in getExecutableIndexExpression(). You can refactor to marshall transactions there only when it is being used", "author": "jyuanca", "createdAt": "2020-10-27T20:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxNjc4Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r514416783", "bodyText": "There is a dedicated jira for this specific issue: DB-10485. Zhen is currently working on it, so I would prefer not modify this further.", "author": "arnaud-splice", "createdAt": "2020-10-29T16:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MDkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NjY1NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512566655", "bodyText": "Looks like an additional logic besides refactoring right? Could you explain why this is necessary?", "author": "hatyo", "createdAt": "2020-10-27T10:17:04Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLUtils.java", "diffHunk": "@@ -376,36 +367,45 @@ public static void preAlterStats(DDLMessage.DDLChange change, DataDictionary dd,\n     public static void preDropSchema(DDLMessage.DDLChange change, DataDictionary dd, DependencyManager dm) throws StandardException {\n         if (LOG.isDebugEnabled())\n             SpliceLogUtils.debug(LOG,\"preDropSchema with change=%s\",change);\n-        dd.getDataDictionaryCache().schemaCacheRemove(change.getDropSchema().getSchemaName());\n-        dd.getDataDictionaryCache().oidSchemaCacheRemove(ProtoUtil.getDerbyUUID(change.getDropSchema().getSchemaUUID()));\n+        DDLMessage.DropSchema dropSchema = change.getDropSchema();\n+        UUID schemaId = ProtoUtil.getDerbyUUID(dropSchema.getSchemaUUID());\n+        try {\n+            try (SpliceTransactionResourceImpl transactionResource = new SpliceTransactionResourceImpl()) {\n+                TxnView txn = DDLUtils.getLazyTransaction(change.getTxnId());\n+                transactionResource.marshallTransaction(txn);\n+                SchemaDescriptor sd = dd.getSchemaDescriptor(schemaId, transactionResource.getLcc().getTransactionExecute());\n+                if(sd==null) // Schema Descriptor transaction never committed\n+                    return;\n+                dm.invalidateFor(sd,DependencyManager.DROP_SCHEMA,transactionResource.getLcc());", "originalCommit": "46aa2d296998a393398a204e4dff33d06676204a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0Mjc0Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512742747", "bodyText": "This is true. We found out with Daniel that the code in preDropSchema did not invalidate potential dependencies to that schema. In a pre multidb world, it probably does not matter, but we should do in preDropSchema what we do in preDropTable anyway", "author": "arnaud-splice", "createdAt": "2020-10-27T14:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NjY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzNzE1Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512837152", "bodyText": "OK, thanks for the clarification.", "author": "hatyo", "createdAt": "2020-10-27T16:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NjY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk4NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512571985", "bodyText": "the method sets the updated to true and is public, so it is possible that it is called twice from the outside (which was permissible in the previous version)\nI think it is better to return immediately and maybe issue a log.WARN(\"unexpected\") or even throw an exception.\nI would also add more documentation about the intended usage of this method, and mark the class SpliceTransactionResourceImpl as thread-unsafe.", "author": "hatyo", "createdAt": "2020-10-27T10:25:28Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java", "diffHunk": "@@ -79,17 +80,17 @@ public SpliceTransactionResourceImpl(String url,Properties info) throws SQLExcep\n         }\n     }\n \n-    public boolean marshallTransaction(TxnView txn) throws StandardException, SQLException {\n-        return this.marshallTransaction(txn, null);\n+    public void marshallTransaction(TxnView txn) throws StandardException, SQLException {\n+        this.marshallTransaction(txn, null);\n     }\n \n-    public boolean marshallTransaction(TxnView txn, ManagedCache<String, Optional<String>> propertyCache) throws StandardException, SQLException {\n-        return this.marshallTransaction(txn, propertyCache, null, null, null);\n+    public void marshallTransaction(TxnView txn, ManagedCache<String, Optional<String>> propertyCache) throws StandardException, SQLException {\n+        this.marshallTransaction(txn, propertyCache, null, null, null);\n     }\n \n-    public boolean marshallTransaction(TxnView txn, ManagedCache<String, Optional<String>> propertyCache,\n+    public void marshallTransaction(TxnView txn, ManagedCache<String, Optional<String>> propertyCache,\n                                        TransactionController reuseTC, String localUserName, Integer sessionNumber) throws StandardException, SQLException{\n-        boolean updated = false;\n+        assert !updated;", "originalCommit": "46aa2d296998a393398a204e4dff33d06676204a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0MDcyOA==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512740728", "bodyText": "Done", "author": "arnaud-splice", "createdAt": "2020-10-27T14:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzODMwMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4350#discussion_r512838301", "bodyText": "Great", "author": "hatyo", "createdAt": "2020-10-27T16:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MTk4NQ=="}], "type": "inlineReview"}, {"oid": "2944fe6b4e8d59c694917f7d409346d1a5e0c770", "url": "https://github.com/splicemachine/spliceengine/commit/2944fe6b4e8d59c694917f7d409346d1a5e0c770", "message": "DB-10562 Address review comments", "committedDate": "2020-10-27T16:01:02Z", "type": "commit"}]}