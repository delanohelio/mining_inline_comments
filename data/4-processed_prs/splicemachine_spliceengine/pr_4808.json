{"pr_number": 4808, "pr_title": "DB-10819 Fix inconsistent results with substr between spark and native spark ", "pr_createdAt": "2020-12-08T17:34:31Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4808", "timeline": [{"oid": "a56be03456669be42aeaa8f51537c9828ef93019", "url": "https://github.com/splicemachine/spliceengine/commit/a56be03456669be42aeaa8f51537c9828ef93019", "message": "DB-10819 Fix inconsistent results with substr between spark and native spark", "committedDate": "2020-12-08T17:33:12Z", "type": "commit"}, {"oid": "1f6f5957f6fa127610e09803273551b9969c2c07", "url": "https://github.com/splicemachine/spliceengine/commit/1f6f5957f6fa127610e09803273551b9969c2c07", "message": "DB-10819 Add more tests", "committedDate": "2020-12-08T18:05:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NDg2Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4808#discussion_r538764867", "bodyText": "Is there a comma missing here in the parameter list?", "author": "msirek", "createdAt": "2020-12-08T19:58:04Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/OperatorToString.java", "diffHunk": "@@ -679,23 +679,26 @@ else if (vars.buildExpressionTree)\n                 }\n                 else if (operand.getClass() == TernaryOperatorNode.class) {\n                     vars.relationalOpDepth.increment();\n-                    if (top.getOperator().equals(\"LOCATE\") ||\n-                        top.getOperator().equals(\"replace\") ||\n-                        (top.getOperator().equals(\"substring\") && top.getRightOperand() != null)) {\n-\n+                    if (top.getOperator().equals(\"LOCATE\") || top.getOperator().equals(\"replace\")) {\n                         vars.relationalOpDepth.decrement();\n                         String retval = format(\"%s(%s, %s, %s) \", top.getOperator(), opToString2(top.getReceiver(), vars),\n                                 opToString2(top.getLeftOperand(), vars), opToString2(top.getRightOperand(), vars));\n                         vars.relationalOpDepth.decrement();\n                         return retval;\n                     } else if (top.getOperator().equals(\"substring\")) {\n-                        assert top.getRightOperand() == null;\n                         vars.relationalOpDepth.decrement();\n-                        String retval = format(\"%s(%s, %s) \", top.getOperator(), opToString2(top.getReceiver(), vars),\n-                                opToString2(top.getLeftOperand(), vars));\n+                        String retval = format(\"%s(%s, %s %s)\",", "originalCommit": "1f6f5957f6fa127610e09803273551b9969c2c07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NzU5MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4808#discussion_r538797590", "bodyText": "No, the comma is added if a third parameter is necessary, see below.", "author": "arnaud-splice", "createdAt": "2020-12-08T20:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NDg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk4MTUyOA==", "url": "https://github.com/splicemachine/spliceengine/pull/4808#discussion_r538981528", "bodyText": "OK, I see.  Thanks.", "author": "msirek", "createdAt": "2020-12-09T03:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NDg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NTU1Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4808#discussion_r539185557", "bodyText": "This logic is available as firstRowContainsQuery() in the same file. But it's just a minor issue and should not prevent the change from being merged.", "author": "ascend1", "createdAt": "2020-12-09T10:24:45Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -1195,6 +1195,21 @@ protected void checkBooleanExpression(String input, boolean output, TestConnecti\n             rs.next();\n             Assert.assertEquals(output, rs.getBoolean(1));\n         }\n+    }\n+\n+    protected void checkExpressionType(String input, String expectedType, TestConnection conn) throws SQLException {\n+        String sql = format(\"select typeof(%s)\", input);\n+        try(ResultSet rs = conn.query(sql)) {\n+            rs.next();\n+            Assert.assertEquals(expectedType, rs.getString(1));\n+        }", "originalCommit": "1f6f5957f6fa127610e09803273551b9969c2c07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NTk4OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4808#discussion_r539185989", "bodyText": "Ditto.", "author": "ascend1", "createdAt": "2020-12-09T10:25:22Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -1195,6 +1195,21 @@ protected void checkBooleanExpression(String input, boolean output, TestConnecti\n             rs.next();\n             Assert.assertEquals(output, rs.getBoolean(1));\n         }\n+    }\n+\n+    protected void checkExpressionType(String input, String expectedType, TestConnection conn) throws SQLException {\n+        String sql = format(\"select typeof(%s)\", input);\n+        try(ResultSet rs = conn.query(sql)) {\n+            rs.next();\n+            Assert.assertEquals(expectedType, rs.getString(1));\n+        }\n+    }\n \n+    protected void checkStringExpression(String input, String expectedOutput, TestConnection conn) throws SQLException {\n+        String sql = format(\"select %s\", input);\n+        try(ResultSet rs = conn.query(sql)) {\n+            rs.next();\n+            Assert.assertEquals(expectedOutput, rs.getString(1));\n+        }", "originalCommit": "1f6f5957f6fa127610e09803273551b9969c2c07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}