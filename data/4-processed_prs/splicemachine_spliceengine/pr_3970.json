{"pr_number": 3970, "pr_title": "DB-10002 Add system schema SYSIBMADM and system views SNAPAPPL, SNAPAPPL_INFO, and APPLICATIONS", "pr_createdAt": "2020-08-11T20:06:59Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3970", "timeline": [{"oid": "2b83bdae1a491efb216dd1c7e994ffe1eda210fe", "url": "https://github.com/splicemachine/spliceengine/commit/2b83bdae1a491efb216dd1c7e994ffe1eda210fe", "message": "DB-10002 Add SYSIBMADM schema and administrative table MON_GET_CONNECTION\n\n- MON_GET_CONNECTION is a table function in DB2. We make it a system\n  table in this change for compatibility and we may need to implement\n  it correctly later.", "committedDate": "2020-08-10T17:23:53Z", "type": "commit"}, {"oid": "8bd7019f0221483ecf712313e67dc03a4c62cae0", "url": "https://github.com/splicemachine/spliceengine/commit/8bd7019f0221483ecf712313e67dc03a4c62cae0", "message": "DB-10002 Add system views SNAPAPPL, SNAPAPPL_INFO, and APPLICATIONS", "committedDate": "2020-08-11T18:35:11Z", "type": "commit"}, {"oid": "90ba9f5c555291f7768583b5ca2ec9a9151cd3d2", "url": "https://github.com/splicemachine/spliceengine/commit/90ba9f5c555291f7768583b5ca2ec9a9151cd3d2", "message": "DB-10002 Add upgrade script for SYSIBMADM schema", "committedDate": "2020-08-11T20:04:13Z", "type": "commit"}, {"oid": "655ddc9dd400ffbe64561482bfdad1878db19a46", "url": "https://github.com/splicemachine/spliceengine/commit/655ddc9dd400ffbe64561482bfdad1878db19a46", "message": "DB-10002 Fix SpotBugs", "committedDate": "2020-08-11T20:24:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0NTMwNg==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r468845306", "bodyText": "We have to do this because the maximum number of arguments of a method in Java is 255.", "author": "ascend1", "createdAt": "2020-08-11T20:28:04Z", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/MonGetConnectionDescriptor.java", "diffHunk": "@@ -0,0 +1,416 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ */\n+\n+package com.splicemachine.db.iapi.sql.dictionary;\n+\n+import org.joda.time.DateTime;\n+\n+/**\n+ * Created by zli on 8/10/20.\n+ */\n+\n+public class MonGetConnectionDescriptor extends TupleDescriptor\n+{\n+    public static final class MonGetConnectionFields {", "originalCommit": "655ddc9dd400ffbe64561482bfdad1878db19a46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "121ee1a68e5b7103ffca15f4628fe07e51c499b7", "url": "https://github.com/splicemachine/spliceengine/commit/121ee1a68e5b7103ffca15f4628fe07e51c499b7", "message": "DB-10002 Fix test failure", "committedDate": "2020-08-12T15:34:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2OTI1Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470169256", "bodyText": "Can we add SYS as a prefix for this factory, so that it is consistent with system row factories?", "author": "yxia92", "createdAt": "2020-08-13T18:43:04Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/MONGETCONNECTIONRowFactory.java", "diffHunk": "@@ -0,0 +1,2429 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ */\n+\n+package com.splicemachine.db.impl.sql.catalog;\n+\n+import com.splicemachine.db.catalog.UUID;\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.services.sanity.SanityManager;\n+import com.splicemachine.db.iapi.services.uuid.UUIDFactory;\n+import com.splicemachine.db.iapi.sql.dictionary.*;\n+import com.splicemachine.db.iapi.sql.execute.ExecRow;\n+import com.splicemachine.db.iapi.sql.execute.ExecutionFactory;\n+import com.splicemachine.db.iapi.types.*;\n+import org.spark_project.guava.collect.Lists;\n+\n+import java.sql.Types;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Created by zli on 8/10/20.\n+ */\n+public class MONGETCONNECTIONRowFactory extends CatalogRowFactory", "originalCommit": "121ee1a68e5b7103ffca15f4628fe07e51c499b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDQ2NA==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470190464", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-08-13T19:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2OTI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MDIzNA==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470170234", "bodyText": "Is APPLICATION_HANDLE unique?", "author": "yxia92", "createdAt": "2020-08-13T18:44:44Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/MONGETCONNECTIONRowFactory.java", "diffHunk": "@@ -0,0 +1,2429 @@\n+/*\n+ * Copyright (c) 2012 - 2020 Splice Machine, Inc.\n+ *\n+ * This file is part of Splice Machine.\n+ * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the\n+ * GNU Affero General Public License as published by the Free Software Foundation, either\n+ * version 3, or (at your option) any later version.\n+ * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Affero General Public License for more details.\n+ * You should have received a copy of the GNU Affero General Public License along with Splice Machine.\n+ * If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ */\n+\n+package com.splicemachine.db.impl.sql.catalog;\n+\n+import com.splicemachine.db.catalog.UUID;\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.services.sanity.SanityManager;\n+import com.splicemachine.db.iapi.services.uuid.UUIDFactory;\n+import com.splicemachine.db.iapi.sql.dictionary.*;\n+import com.splicemachine.db.iapi.sql.execute.ExecRow;\n+import com.splicemachine.db.iapi.sql.execute.ExecutionFactory;\n+import com.splicemachine.db.iapi.types.*;\n+import org.spark_project.guava.collect.Lists;\n+\n+import java.sql.Types;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Created by zli on 8/10/20.\n+ */\n+public class MONGETCONNECTIONRowFactory extends CatalogRowFactory\n+{\n+    public static final String\t\tTABLENAME_STRING = \"MON_GET_CONNECTION\";\n+    public static final String      MONGETCONNECTION_UUID = \"51d833f1-b166-4fe0-b86b-da5e2e77edf0\";\n+\n+    protected static final int\t\tCOLUMN_COUNT = 378;\n+\n+    protected static final int      APPLICATION_HANDLE = 1;\n+    protected static final int      APPLICATION_NAME = 2;\n+    protected static final int      APPLICATION_ID = 3;\n+    protected static final int      MEMBER = 4;\n+    protected static final int      CLIENT_WRKSTNNAME = 5;\n+    protected static final int      CLIENT_ACCTNG = 6;\n+    protected static final int      CLIENT_USERID = 7;\n+    protected static final int      CLIENT_APPLNAME = 8;\n+    protected static final int      CLIENT_PID = 9;\n+    protected static final int      CLIENT_PRDID = 10;\n+    protected static final int      CLIENT_PLATFORM = 11;\n+    protected static final int      CLIENT_PROTOCOL = 12;\n+    protected static final int      SYSTEM_AUTH_ID = 13;\n+    protected static final int      SESSION_AUTH_ID = 14;\n+    protected static final int      COORD_MEMBER = 15;\n+    protected static final int      CONNECTION_START_TIME = 16;\n+    protected static final int      ACT_ABORTED_TOTAL = 17;\n+    protected static final int      ACT_COMPLETED_TOTAL = 18;\n+    protected static final int      ACT_REJECTED_TOTAL = 19;\n+    protected static final int      AGENT_WAIT_TIME = 20;\n+    protected static final int      AGENT_WAITS_TOTAL = 21;\n+    protected static final int      POOL_DATA_L_READS = 22;\n+    protected static final int      POOL_INDEX_L_READS = 23;\n+    protected static final int      POOL_TEMP_DATA_L_READS = 24;\n+    protected static final int      POOL_TEMP_INDEX_L_READS = 25;\n+    protected static final int      POOL_TEMP_XDA_L_READS = 26;\n+    protected static final int      POOL_XDA_L_READS = 27;\n+    protected static final int      POOL_DATA_P_READS = 28;\n+    protected static final int      POOL_INDEX_P_READS = 29;\n+    protected static final int      POOL_TEMP_DATA_P_READS = 30;\n+    protected static final int      POOL_TEMP_INDEX_P_READS = 31;\n+    protected static final int      POOL_TEMP_XDA_P_READS = 32;\n+    protected static final int      POOL_XDA_P_READS = 33;\n+    protected static final int      POOL_DATA_WRITES = 34;\n+    protected static final int      POOL_INDEX_WRITES = 35;\n+    protected static final int      POOL_XDA_WRITES = 36;\n+    protected static final int      POOL_READ_TIME = 37;\n+    protected static final int      POOL_WRITE_TIME = 38;\n+    protected static final int      CLIENT_IDLE_WAIT_TIME = 39;\n+    protected static final int      DEADLOCKS = 40;\n+    protected static final int      DIRECT_READS = 41;\n+    protected static final int      DIRECT_READ_TIME = 42;\n+    protected static final int      DIRECT_WRITES = 43;\n+    protected static final int      DIRECT_WRITE_TIME = 44;\n+    protected static final int      DIRECT_READ_REQS = 45;\n+    protected static final int      DIRECT_WRITE_REQS = 46;\n+    protected static final int      FCM_RECV_VOLUME = 47;\n+    protected static final int      FCM_RECVS_TOTAL = 48;\n+    protected static final int      FCM_SEND_VOLUME = 49;\n+    protected static final int      FCM_SENDS_TOTAL = 50;\n+    protected static final int      FCM_RECV_WAIT_TIME = 51;\n+    protected static final int      FCM_SEND_WAIT_TIME = 52;\n+    protected static final int      IPC_RECV_VOLUME = 53;\n+    protected static final int      IPC_RECV_WAIT_TIME = 54;\n+    protected static final int      IPC_RECVS_TOTAL = 55;\n+    protected static final int      IPC_SEND_VOLUME = 56;\n+    protected static final int      IPC_SEND_WAIT_TIME = 57;\n+    protected static final int      IPC_SENDS_TOTAL = 58;\n+    protected static final int      LOCK_ESCALS = 59;\n+    protected static final int      LOCK_TIMEOUTS = 60;\n+    protected static final int      LOCK_WAIT_TIME = 61;\n+    protected static final int      LOCK_WAITS = 62;\n+    protected static final int      LOG_BUFFER_WAIT_TIME = 63;\n+    protected static final int      NUM_LOG_BUFFER_FULL = 64;\n+    protected static final int      LOG_DISK_WAIT_TIME = 65;\n+    protected static final int      LOG_DISK_WAITS_TOTAL = 66;\n+    protected static final int      NUM_LOCKS_HELD = 67;\n+    protected static final int      RQSTS_COMPLETED_TOTAL = 68;\n+    protected static final int      ROWS_MODIFIED = 69;\n+    protected static final int      ROWS_READ = 70;\n+    protected static final int      ROWS_RETURNED = 71;\n+    protected static final int      TCPIP_RECV_VOLUME = 72;\n+    protected static final int      TCPIP_SEND_VOLUME = 73;\n+    protected static final int      TCPIP_RECV_WAIT_TIME = 74;\n+    protected static final int      TCPIP_RECVS_TOTAL = 75;\n+    protected static final int      TCPIP_SEND_WAIT_TIME = 76;\n+    protected static final int      TCPIP_SENDS_TOTAL = 77;\n+    protected static final int      TOTAL_APP_RQST_TIME = 78;\n+    protected static final int      TOTAL_RQST_TIME = 79;\n+    protected static final int      WLM_QUEUE_TIME_TOTAL = 80;\n+    protected static final int      WLM_QUEUE_ASSIGNMENTS_TOTAL = 81;\n+    protected static final int      TOTAL_CPU_TIME = 82;\n+    protected static final int      TOTAL_WAIT_TIME = 83;\n+    protected static final int      APP_RQSTS_COMPLETED_TOTAL = 84;\n+    protected static final int      TOTAL_SECTION_SORT_TIME = 85;\n+    protected static final int      TOTAL_SECTION_SORT_PROC_TIME = 86;\n+    protected static final int      TOTAL_SECTION_SORTS = 87;\n+    protected static final int      TOTAL_SORTS = 88;\n+    protected static final int      POST_THRESHOLD_SORTS = 89;\n+    protected static final int      POST_SHRTHRESHOLD_SORTS = 90;\n+    protected static final int      SORT_OVERFLOWS = 91;\n+    protected static final int      TOTAL_COMPILE_TIME = 92;\n+    protected static final int      TOTAL_COMPILE_PROC_TIME = 93;\n+    protected static final int      TOTAL_COMPILATIONS = 94;\n+    protected static final int      TOTAL_IMPLICIT_COMPILE_TIME = 95;\n+    protected static final int      TOTAL_IMPLICIT_COMPILE_PROC_TIME = 96;\n+    protected static final int      TOTAL_IMPLICIT_COMPILATIONS = 97;\n+    protected static final int      TOTAL_SECTION_TIME = 98;\n+    protected static final int      TOTAL_SECTION_PROC_TIME = 99;\n+    protected static final int      TOTAL_APP_SECTION_EXECUTIONS = 100;\n+    protected static final int      TOTAL_ACT_TIME = 101;\n+    protected static final int      TOTAL_ACT_WAIT_TIME = 102;\n+    protected static final int      ACT_RQSTS_TOTAL = 103;\n+    protected static final int      TOTAL_ROUTINE_TIME = 104;\n+    protected static final int      TOTAL_ROUTINE_INVOCATIONS = 105;\n+    protected static final int      TOTAL_COMMIT_TIME = 106;\n+    protected static final int      TOTAL_COMMIT_PROC_TIME = 107;\n+    protected static final int      TOTAL_APP_COMMITS = 108;\n+    protected static final int      INT_COMMITS = 109;\n+    protected static final int      TOTAL_ROLLBACK_TIME = 110;\n+    protected static final int      TOTAL_ROLLBACK_PROC_TIME = 111;\n+    protected static final int      TOTAL_APP_ROLLBACKS = 112;\n+    protected static final int      INT_ROLLBACKS = 113;\n+    protected static final int      TOTAL_RUNSTATS_TIME = 114;\n+    protected static final int      TOTAL_RUNSTATS_PROC_TIME = 115;\n+    protected static final int      TOTAL_RUNSTATS = 116;\n+    protected static final int      TOTAL_REORG_TIME = 117;\n+    protected static final int      TOTAL_REORG_PROC_TIME = 118;\n+    protected static final int      TOTAL_REORGS = 119;\n+    protected static final int      TOTAL_LOAD_TIME = 120;\n+    protected static final int      TOTAL_LOAD_PROC_TIME = 121;\n+    protected static final int      TOTAL_LOADS = 122;\n+    protected static final int      CAT_CACHE_INSERTS = 123;\n+    protected static final int      CAT_CACHE_LOOKUPS = 124;\n+    protected static final int      PKG_CACHE_INSERTS = 125;\n+    protected static final int      PKG_CACHE_LOOKUPS = 126;\n+    protected static final int      THRESH_VIOLATIONS = 127;\n+    protected static final int      NUM_LW_THRESH_EXCEEDED = 128;\n+    protected static final int      LOCK_WAITS_GLOBAL = 129;\n+    protected static final int      LOCK_WAIT_TIME_GLOBAL = 130;\n+    protected static final int      LOCK_TIMEOUTS_GLOBAL = 131;\n+    protected static final int      LOCK_ESCALS_MAXLOCKS = 132;\n+    protected static final int      LOCK_ESCALS_LOCKLIST = 133;\n+    protected static final int      LOCK_ESCALS_GLOBAL = 134;\n+    protected static final int      RECLAIM_WAIT_TIME = 135;\n+    protected static final int      SPACEMAPPAGE_RECLAIM_WAIT_TIME = 136;\n+    protected static final int      CF_WAITS = 137;\n+    protected static final int      CF_WAIT_TIME = 138;\n+    protected static final int      POOL_DATA_GBP_L_READS = 139;\n+    protected static final int      POOL_DATA_GBP_P_READS = 140;\n+    protected static final int      POOL_DATA_LBP_PAGES_FOUND = 141;\n+    protected static final int      POOL_DATA_GBP_INVALID_PAGES = 142;\n+    protected static final int      POOL_INDEX_GBP_L_READS = 143;\n+    protected static final int      POOL_INDEX_GBP_P_READS = 144;\n+    protected static final int      POOL_INDEX_LBP_PAGES_FOUND = 145;\n+    protected static final int      POOL_INDEX_GBP_INVALID_PAGES = 146;\n+    protected static final int      POOL_XDA_GBP_L_READS = 147;\n+    protected static final int      POOL_XDA_GBP_P_READS = 148;\n+    protected static final int      POOL_XDA_LBP_PAGES_FOUND = 149;\n+    protected static final int      POOL_XDA_GBP_INVALID_PAGES = 150;\n+    protected static final int      AUDIT_EVENTS_TOTAL = 151;\n+    protected static final int      AUDIT_FILE_WRITES_TOTAL = 152;\n+    protected static final int      AUDIT_FILE_WRITE_WAIT_TIME = 153;\n+    protected static final int      AUDIT_SUBSYSTEM_WAITS_TOTAL = 154;\n+    protected static final int      AUDIT_SUBSYSTEM_WAIT_TIME = 155;\n+    protected static final int      CLIENT_HOSTNAME = 156;\n+    protected static final int      CLIENT_PORT_NUMBER = 157;\n+    protected static final int      DIAGLOG_WRITES_TOTAL = 158;\n+    protected static final int      DIAGLOG_WRITE_WAIT_TIME = 159;\n+    protected static final int      FCM_MESSAGE_RECVS_TOTAL = 160;\n+    protected static final int      FCM_MESSAGE_RECV_VOLUME = 161;\n+    protected static final int      FCM_MESSAGE_RECV_WAIT_TIME = 162;\n+    protected static final int      FCM_MESSAGE_SENDS_TOTAL = 163;\n+    protected static final int      FCM_MESSAGE_SEND_VOLUME = 164;\n+    protected static final int      FCM_MESSAGE_SEND_WAIT_TIME = 165;\n+    protected static final int      FCM_TQ_RECVS_TOTAL = 166;\n+    protected static final int      FCM_TQ_RECV_VOLUME = 167;\n+    protected static final int      FCM_TQ_RECV_WAIT_TIME = 168;\n+    protected static final int      FCM_TQ_SENDS_TOTAL = 169;\n+    protected static final int      FCM_TQ_SEND_VOLUME = 170;\n+    protected static final int      FCM_TQ_SEND_WAIT_TIME = 171;\n+    protected static final int      LAST_EXECUTABLE_ID = 172;\n+    protected static final int      LAST_REQUEST_TYPE = 173;\n+    protected static final int      TOTAL_ROUTINE_USER_CODE_PROC_TIME = 174;\n+    protected static final int      TOTAL_ROUTINE_USER_CODE_TIME = 175;\n+    protected static final int      TQ_TOT_SEND_SPILLS = 176;\n+    protected static final int      EVMON_WAIT_TIME = 177;\n+    protected static final int      EVMON_WAITS_TOTAL = 178;\n+    protected static final int      TOTAL_EXTENDED_LATCH_WAIT_TIME = 179;\n+    protected static final int      TOTAL_EXTENDED_LATCH_WAITS = 180;\n+    protected static final int      INTRA_PARALLEL_STATE = 181;\n+    protected static final int      TOTAL_STATS_FABRICATION_TIME = 182;\n+    protected static final int      TOTAL_STATS_FABRICATION_PROC_TIME = 183;\n+    protected static final int      TOTAL_STATS_FABRICATIONS = 184;\n+    protected static final int      TOTAL_SYNC_RUNSTATS_TIME = 185;\n+    protected static final int      TOTAL_SYNC_RUNSTATS_PROC_TIME = 186;\n+    protected static final int      TOTAL_SYNC_RUNSTATS = 187;\n+    protected static final int      TOTAL_DISP_RUN_QUEUE_TIME = 188;\n+    protected static final int      TOTAL_PEDS = 189;\n+    protected static final int      DISABLED_PEDS = 190;\n+    protected static final int      POST_THRESHOLD_PEDS = 191;\n+    protected static final int      TOTAL_PEAS = 192;\n+    protected static final int      POST_THRESHOLD_PEAS = 193;\n+    protected static final int      TQ_SORT_HEAP_REQUESTS = 194;\n+    protected static final int      TQ_SORT_HEAP_REJECTIONS = 195;\n+    protected static final int      POOL_QUEUED_ASYNC_DATA_REQS = 196;\n+    protected static final int      POOL_QUEUED_ASYNC_INDEX_REQS = 197;\n+    protected static final int      POOL_QUEUED_ASYNC_XDA_REQS = 198;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_DATA_REQS = 199;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_INDEX_REQS = 200;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_XDA_REQS = 201;\n+    protected static final int      POOL_QUEUED_ASYNC_OTHER_REQS = 202;\n+    protected static final int      POOL_QUEUED_ASYNC_DATA_PAGES = 203;\n+    protected static final int      POOL_QUEUED_ASYNC_INDEX_PAGES = 204;\n+    protected static final int      POOL_QUEUED_ASYNC_XDA_PAGES = 205;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_DATA_PAGES = 206;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_INDEX_PAGES = 207;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_XDA_PAGES = 208;\n+    protected static final int      POOL_FAILED_ASYNC_DATA_REQS = 209;\n+    protected static final int      POOL_FAILED_ASYNC_INDEX_REQS = 210;\n+    protected static final int      POOL_FAILED_ASYNC_XDA_REQS = 211;\n+    protected static final int      POOL_FAILED_ASYNC_TEMP_DATA_REQS = 212;\n+    protected static final int      POOL_FAILED_ASYNC_TEMP_INDEX_REQS = 213;\n+    protected static final int      POOL_FAILED_ASYNC_TEMP_XDA_REQS = 214;\n+    protected static final int      POOL_FAILED_ASYNC_OTHER_REQS = 215;\n+    protected static final int      PREFETCH_WAIT_TIME = 216;\n+    protected static final int      PREFETCH_WAITS = 217;\n+    protected static final int      APP_ACT_COMPLETED_TOTAL = 218;\n+    protected static final int      APP_ACT_ABORTED_TOTAL = 219;\n+    protected static final int      APP_ACT_REJECTED_TOTAL = 220;\n+    protected static final int      TOTAL_CONNECT_REQUEST_TIME = 221;\n+    protected static final int      TOTAL_CONNECT_REQUEST_PROC_TIME = 222;\n+    protected static final int      TOTAL_CONNECT_REQUESTS = 223;\n+    protected static final int      TOTAL_CONNECT_AUTHENTICATION_TIME = 224;\n+    protected static final int      TOTAL_CONNECT_AUTHENTICATION_PROC_TIME = 225;\n+    protected static final int      TOTAL_CONNECT_AUTHENTICATIONS = 226;\n+    protected static final int      POOL_DATA_GBP_INDEP_PAGES_FOUND_IN_LBP = 227;\n+    protected static final int      POOL_INDEX_GBP_INDEP_PAGES_FOUND_IN_LBP = 228;\n+    protected static final int      POOL_XDA_GBP_INDEP_PAGES_FOUND_IN_LBP = 229;\n+    protected static final int      COMM_EXIT_WAIT_TIME = 230;\n+    protected static final int      COMM_EXIT_WAITS = 231;\n+    protected static final int      IDA_SEND_WAIT_TIME = 232;\n+    protected static final int      IDA_SENDS_TOTAL = 233;\n+    protected static final int      IDA_SEND_VOLUME = 234;\n+    protected static final int      IDA_RECV_WAIT_TIME = 235;\n+    protected static final int      IDA_RECVS_TOTAL = 236;\n+    protected static final int      IDA_RECV_VOLUME = 237;\n+    protected static final int      MEMBER_SUBSET_ID = 238;\n+    protected static final int      IS_SYSTEM_APPL = 239;\n+    protected static final int      LOCK_TIMEOUT_VAL = 240;\n+    protected static final int      CURRENT_ISOLATION = 241;\n+    protected static final int      NUM_LOCKS_WAITING = 242;\n+    protected static final int      UOW_CLIENT_IDLE_WAIT_TIME = 243;\n+    protected static final int      ROWS_DELETED = 244;\n+    protected static final int      ROWS_INSERTED = 245;\n+    protected static final int      ROWS_UPDATED = 246;\n+    protected static final int      TOTAL_HASH_JOINS = 247;\n+    protected static final int      TOTAL_HASH_LOOPS = 248;\n+    protected static final int      HASH_JOIN_OVERFLOWS = 249;\n+    protected static final int      HASH_JOIN_SMALL_OVERFLOWS = 250;\n+    protected static final int      POST_SHRTHRESHOLD_HASH_JOINS = 251;\n+    protected static final int      TOTAL_OLAP_FUNCS = 252;\n+    protected static final int      OLAP_FUNC_OVERFLOWS = 253;\n+    protected static final int      DYNAMIC_SQL_STMTS = 254;\n+    protected static final int      STATIC_SQL_STMTS = 255;\n+    protected static final int      FAILED_SQL_STMTS = 256;\n+    protected static final int      SELECT_SQL_STMTS = 257;\n+    protected static final int      UID_SQL_STMTS = 258;\n+    protected static final int      DDL_SQL_STMTS = 259;\n+    protected static final int      MERGE_SQL_STMTS = 260;\n+    protected static final int      XQUERY_STMTS = 261;\n+    protected static final int      IMPLICIT_REBINDS = 262;\n+    protected static final int      BINDS_PRECOMPILES = 263;\n+    protected static final int      INT_ROWS_DELETED = 264;\n+    protected static final int      INT_ROWS_INSERTED = 265;\n+    protected static final int      INT_ROWS_UPDATED = 266;\n+    protected static final int      CALL_SQL_STMTS = 267;\n+    protected static final int      POOL_COL_L_READS = 268;\n+    protected static final int      POOL_TEMP_COL_L_READS = 269;\n+    protected static final int      POOL_COL_P_READS = 270;\n+    protected static final int      POOL_TEMP_COL_P_READS = 271;\n+    protected static final int      POOL_COL_LBP_PAGES_FOUND = 272;\n+    protected static final int      POOL_COL_WRITES = 273;\n+    protected static final int      POOL_COL_GBP_L_READS = 274;\n+    protected static final int      POOL_COL_GBP_P_READS = 275;\n+    protected static final int      POOL_COL_GBP_INVALID_PAGES = 276;\n+    protected static final int      POOL_COL_GBP_INDEP_PAGES_FOUND_IN_LBP = 277;\n+    protected static final int      POOL_QUEUED_ASYNC_COL_REQS = 278;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_COL_REQS = 279;\n+    protected static final int      POOL_QUEUED_ASYNC_COL_PAGES = 280;\n+    protected static final int      POOL_QUEUED_ASYNC_TEMP_COL_PAGES = 281;\n+    protected static final int      POOL_FAILED_ASYNC_COL_REQS = 282;\n+    protected static final int      POOL_FAILED_ASYNC_TEMP_COL_REQS = 283;\n+    protected static final int      TOTAL_COL_TIME = 284;\n+    protected static final int      TOTAL_COL_PROC_TIME = 285;\n+    protected static final int      TOTAL_COL_EXECUTIONS = 286;\n+    protected static final int      CLIENT_IPADDR = 287;\n+    protected static final int      SQL_REQS_SINCE_COMMIT = 288;\n+    protected static final int      UOW_START_TIME = 289;\n+    protected static final int      UOW_STOP_TIME = 290;\n+    protected static final int      PREV_UOW_STOP_TIME = 291;\n+    protected static final int      UOW_COMP_STATUS = 292;\n+    protected static final int      NUM_ASSOC_AGENTS = 293;\n+    protected static final int      ASSOCIATED_AGENTS_TOP = 294;\n+    protected static final int      WORKLOAD_OCCURRENCE_STATE = 295;\n+    protected static final int      POST_THRESHOLD_HASH_JOINS = 296;\n+    protected static final int      POOL_DATA_CACHING_TIER_L_READS = 297;\n+    protected static final int      POOL_INDEX_CACHING_TIER_L_READS = 298;\n+    protected static final int      POOL_XDA_CACHING_TIER_L_READS = 299;\n+    protected static final int      POOL_COL_CACHING_TIER_L_READS = 300;\n+    protected static final int      POOL_DATA_CACHING_TIER_PAGE_WRITES = 301;\n+    protected static final int      POOL_INDEX_CACHING_TIER_PAGE_WRITES = 302;\n+    protected static final int      POOL_XDA_CACHING_TIER_PAGE_WRITES = 303;\n+    protected static final int      POOL_COL_CACHING_TIER_PAGE_WRITES = 304;\n+    protected static final int      POOL_DATA_CACHING_TIER_PAGE_UPDATES = 305;\n+    protected static final int      POOL_INDEX_CACHING_TIER_PAGE_UPDATES = 306;\n+    protected static final int      POOL_XDA_CACHING_TIER_PAGE_UPDATES = 307;\n+    protected static final int      POOL_COL_CACHING_TIER_PAGE_UPDATES = 308;\n+    protected static final int      POOL_CACHING_TIER_PAGE_READ_TIME = 309;\n+    protected static final int      POOL_CACHING_TIER_PAGE_WRITE_TIME = 310;\n+    protected static final int      POOL_DATA_CACHING_TIER_PAGES_FOUND = 311;\n+    protected static final int      POOL_INDEX_CACHING_TIER_PAGES_FOUND = 312;\n+    protected static final int      POOL_XDA_CACHING_TIER_PAGES_FOUND = 313;\n+    protected static final int      POOL_COL_CACHING_TIER_PAGES_FOUND = 314;\n+    protected static final int      POOL_DATA_CACHING_TIER_GBP_INVALID_PAGES = 315;\n+    protected static final int      POOL_INDEX_CACHING_TIER_GBP_INVALID_PAGES = 316;\n+    protected static final int      POOL_XDA_CACHING_TIER_GBP_INVALID_PAGES = 317;\n+    protected static final int      POOL_COL_CACHING_TIER_GBP_INVALID_PAGES = 318;\n+    protected static final int      POOL_DATA_CACHING_TIER_GBP_INDEP_PAGES_FOUND = 319;\n+    protected static final int      POOL_INDEX_CACHING_TIER_GBP_INDEP_PAGES_FOUND = 320;\n+    protected static final int      POOL_XDA_CACHING_TIER_GBP_INDEP_PAGES_FOUND = 321;\n+    protected static final int      POOL_COL_CACHING_TIER_GBP_INDEP_PAGES_FOUND = 322;\n+    protected static final int      TOTAL_HASH_GRPBYS = 323;\n+    protected static final int      HASH_GRPBY_OVERFLOWS = 324;\n+    protected static final int      POST_THRESHOLD_HASH_GRPBYS = 325;\n+    protected static final int      EXECUTION_ID = 326;\n+    protected static final int      POST_THRESHOLD_OLAP_FUNCS = 327;\n+    protected static final int      POST_THRESHOLD_COL_VECTOR_CONSUMERS = 328;\n+    protected static final int      TOTAL_COL_VECTOR_CONSUMERS = 329;\n+    protected static final int      ACTIVE_HASH_GRPBYS = 330;\n+    protected static final int      ACTIVE_HASH_JOINS = 331;\n+    protected static final int      ACTIVE_OLAP_FUNCS = 332;\n+    protected static final int      ACTIVE_PEAS = 333;\n+    protected static final int      ACTIVE_PEDS = 334;\n+    protected static final int      ACTIVE_SORT_CONSUMERS = 335;\n+    protected static final int      ACTIVE_SORTS = 336;\n+    protected static final int      ACTIVE_COL_VECTOR_CONSUMERS = 337;\n+    protected static final int      SORT_HEAP_ALLOCATED = 338;\n+    protected static final int      SORT_SHRHEAP_ALLOCATED = 339;\n+    protected static final int      TOTAL_BACKUP_TIME = 340;\n+    protected static final int      TOTAL_BACKUP_PROC_TIME = 341;\n+    protected static final int      TOTAL_BACKUPS = 342;\n+    protected static final int      TOTAL_INDEX_BUILD_TIME = 343;\n+    protected static final int      TOTAL_INDEX_BUILD_PROC_TIME = 344;\n+    protected static final int      TOTAL_INDEXES_BUILT = 345;\n+    protected static final int      EXT_TABLE_RECV_WAIT_TIME = 346;\n+    protected static final int      EXT_TABLE_RECVS_TOTAL = 347;\n+    protected static final int      EXT_TABLE_RECV_VOLUME = 348;\n+    protected static final int      EXT_TABLE_READ_VOLUME = 349;\n+    protected static final int      EXT_TABLE_SEND_WAIT_TIME = 350;\n+    protected static final int      EXT_TABLE_SENDS_TOTAL = 351;\n+    protected static final int      EXT_TABLE_SEND_VOLUME = 352;\n+    protected static final int      EXT_TABLE_WRITE_VOLUME = 353;\n+    protected static final int      FCM_TQ_RECV_WAITS_TOTAL = 354;\n+    protected static final int      FCM_MESSAGE_RECV_WAITS_TOTAL = 355;\n+    protected static final int      FCM_TQ_SEND_WAITS_TOTAL = 356;\n+    protected static final int      FCM_MESSAGE_SEND_WAITS_TOTAL = 357;\n+    protected static final int      FCM_SEND_WAITS_TOTAL = 358;\n+    protected static final int      FCM_RECV_WAITS_TOTAL = 359;\n+    protected static final int      COL_VECTOR_CONSUMER_OVERFLOWS = 360;\n+    protected static final int      TOTAL_COL_SYNOPSIS_TIME = 361;\n+    protected static final int      TOTAL_COL_SYNOPSIS_PROC_TIME = 362;\n+    protected static final int      TOTAL_COL_SYNOPSIS_EXECUTIONS = 363;\n+    protected static final int      COL_SYNOPSIS_ROWS_INSERTED = 364;\n+    protected static final int      LOB_PREFETCH_WAIT_TIME = 365;\n+    protected static final int      LOB_PREFETCH_REQS = 366;\n+    protected static final int      FED_ROWS_DELETED = 367;\n+    protected static final int      FED_ROWS_INSERTED = 368;\n+    protected static final int      FED_ROWS_UPDATED = 369;\n+    protected static final int      FED_ROWS_READ = 370;\n+    protected static final int      FED_WAIT_TIME = 371;\n+    protected static final int      FED_WAITS_TOTAL = 372;\n+    protected static final int      APPL_SECTION_INSERTS = 373;\n+    protected static final int      APPL_SECTION_LOOKUPS = 374;\n+    protected static final int      CONNECTION_REUSABILITY_STATUS = 375;\n+    protected static final int      REUSABILITY_STATUS_REASON = 376;\n+    protected static final int      ADM_OVERFLOWS = 377;\n+    protected static final int      ADM_BYPASS_ACT_TOTAL = 378;\n+\n+    private\tstatic\tfinal\tString[]\tuuids = {\n+            MONGETCONNECTION_UUID,                    // catalog UUID\n+            \"64241859-c802-4abb-8ce5-7926d7ac663a\",   // heap UUID\n+            \"3b6c9d6f-5af1-44b3-bb6f-44dfd1ffdacf\"    // MONGETCONNECTION_INDEX1_ID\n+    };\n+\n+    protected static final int MONGETCONNECTION_INDEX1_ID = 0;\n+\n+    private\tstatic\tfinal\tboolean[]\tuniqueness = {\n+            true", "originalCommit": "121ee1a68e5b7103ffca15f4628fe07e51c499b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDI5Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470190292", "bodyText": "According to DB2 documentation, it should be a system-wide unique ID. Reference: https://www.ibm.com/support/knowledgecenter/SSEPGG_10.5.0/com.ibm.db2.luw.admin.mon.doc/doc/monitor-elements-a.html#r0054410", "author": "ascend1", "createdAt": "2020-08-13T19:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MDIzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NjA2OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470176068", "bodyText": "only system table needs catalog num, not system views, I think we need to give a catalog number for SYSIBMADM.MON_GET_CONNECTION, but not the views inside it.", "author": "yxia92", "createdAt": "2020-08-13T18:54:36Z", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DataDictionary.java", "diffHunk": "@@ -245,6 +244,9 @@\n     int SYSSNAPSHOT_NUM=32;\n     int SYSTOKENS_NUM=33;\n     int SYSREPLICATION_CATALOG_NUM=34;\n+    int SNAPAPPL_CATALOG_NUM=35;", "originalCommit": "121ee1a68e5b7103ffca15f4628fe07e51c499b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NDYyMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470194621", "bodyText": "Ah, now I get it. Youssef and I had this exact question about what does the system do when creating non-core system tables, this MON_GET_CONNECTION is concurrently being created by three threads (due to three entries of views I added).", "author": "ascend1", "createdAt": "2020-08-13T19:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NjA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3ODAzNA==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470178034", "bodyText": "Same here, nonCoreNames are for tables, not views as I understand, so the views should not be listed here, instead we should just put one entry for MON_GET_CONNECTION.", "author": "yxia92", "createdAt": "2020-08-13T18:56:32Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/BaseDataDictionary.java", "diffHunk": "@@ -163,7 +165,10 @@\n \t\t\t\t\t\t\t\t\t\"SYSSNAPSHOTS\",\n \t\t\t\t\t\t\t\t\t\"SYSTOKENS\",\n                                     \"SYSDUMMY1\",\n-\t\t\t\t\t\t\t\t\t\"SYSREPLICATION\"\n+\t\t\t\t\t\t\t\t\t\"SYSREPLICATION\",", "originalCommit": "121ee1a68e5b7103ffca15f4628fe07e51c499b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NTYwOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3970#discussion_r470195609", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-08-13T19:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3ODAzNA=="}], "type": "inlineReview"}, {"oid": "75ac5de75a16aa5258a1823affee7a00dbfbb822", "url": "https://github.com/splicemachine/spliceengine/commit/75ac5de75a16aa5258a1823affee7a00dbfbb822", "message": "DB-10002 Address comments and fix non-core catalog index", "committedDate": "2020-08-13T19:39:40Z", "type": "commit"}]}