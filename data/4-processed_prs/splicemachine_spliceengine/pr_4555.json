{"pr_number": 4555, "pr_title": "DB-10525 FINAL TABLE Clause", "pr_createdAt": "2020-11-12T00:39:30Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4555", "timeline": [{"oid": "e2d66482e6f354914d37975d513dd3ce18b7fddd", "url": "https://github.com/splicemachine/spliceengine/commit/e2d66482e6f354914d37975d513dd3ce18b7fddd", "message": "DB-10525 FINAL TABLE Clause", "committedDate": "2020-11-12T00:34:43Z", "type": "commit"}, {"oid": "7df489b532d736ad44c90edca40f31c852cdad88", "url": "https://github.com/splicemachine/spliceengine/commit/7df489b532d736ad44c90edca40f31c852cdad88", "message": "DB-10525 Fix spotbugs.", "committedDate": "2020-11-12T04:30:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0MjI1OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522042259", "bodyText": "Should we document that TRIG_<kind of a UUID> are reserved names for triggers?\nSame question for NT_<>", "author": "arnaud-splice", "createdAt": "2020-11-12T11:39:37Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/sqlgrammar.jj", "diffHunk": "@@ -11599,6 +11665,115 @@ FromTable tableFactor() throws StandardException :\n                                 getContextManager());\n         return fromTable;\n     }\n+|\n+    fromTableType = fromTableType() <TABLE> <LEFT_PAREN> statement = preparableDMLDataStatement() <RIGHT_PAREN>\n+    [ optionalTableClauses = optionalTableProperties() ]  {\n+        boolean isOld = fromTableType.kind == OLD;\n+        boolean isFinalTable = fromTableType.kind == FINAL;\n+        dmlStatement = (DMLModStatementNode)statement;\n+        LanguageConnectionContext lcc = dmlStatement.getLanguageConnectionContext();\n+        tableName = dmlStatement.getTargetTableName();\n+        String uniqueId = java.util.UUID.randomUUID().toString().replaceAll(\"-\", \"_\").toUpperCase();\n+        String tempTriggerName = \"TRIG_\" + uniqueId;", "originalCommit": "7df489b532d736ad44c90edca40f31c852cdad88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0NjQ2OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522446469", "bodyText": "It doesn't matter what name we use here since the trigger and referenced table (NT_<>) are only visible to the executing query.  I could have just called these TRIGGER and NT, but having a really long name makes it clear that this is the temporary trigger, for debugging purposes.  I guess I could have used INTERNALLY_GENERATED_TRIGGER and FROM_TABLE_DML_REFERENCED_TABLE as names to make it clearer.", "author": "msirek", "createdAt": "2020-11-12T21:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0MjI1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2MDg1NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522060855", "bodyText": "Cool helper! Minor suggestion:\nif you use try(ResultSet rs = method....) {, you can remove the finally section.", "author": "arnaud-splice", "createdAt": "2020-11-12T12:13:13Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -567,6 +567,31 @@ protected void testFail(String expectedErrorCode,\n         }\n     }\n \n+    protected void testFail(String expectedErrorCode, String sqlText, SpliceWatcher methodWatcher) throws Exception {\n+        ResultSet rs = null;\n+        try {", "originalCommit": "7df489b532d736ad44c90edca40f31c852cdad88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0ODUzMA==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522448530", "bodyText": "Made the change.", "author": "msirek", "createdAt": "2020-11-12T21:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2MDg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNzI5Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522117293", "bodyText": "I'm not sure I understand the logic with the 2 phase cleanup. Can you add a comment there?", "author": "arnaud-splice", "createdAt": "2020-11-12T13:48:14Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/TriggerHandler.java", "diffHunk": "@@ -278,11 +294,15 @@ private void initConnectionContext(LanguageConnectionContext lcc) throws Standar\n     }\n \n     public void cleanup() throws StandardException {\n-        if (triggerActivator != null) {\n-            triggerActivator.cleanup(false);\n+        if (triggerActivator != null && !cleanup2Done) {", "originalCommit": "7df489b532d736ad44c90edca40f31c852cdad88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1MzAxMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522453011", "bodyText": "I've added this comment to the code:\n\n    // If an Exception is encountered, some resources may be closed more than\n    // once during unwinding of the call stack we want to make sure that\n    // full cleanup isn't indefinitely deferred, and isn't unnecessarily\n    // called multiple times, so add a cleanup1Done phase to indicate\n    // the next time around, we don't defer full cleanup any longer, and\n    // a cleanup2Done phase to indicate we've already done full cleanup\n    // and we don't accidentally try to clean already-cleaned resources.\n    // \n    // This is also needed for statements such as:\n    // SELECT * FROM FINAL TABLE (INSERT INTO t1 VALUES(1,2));\n    // The first time cleanup is called, for the DML statement,\n    // we want to retain the trigger result set for consumption\n    // by the SELECT statement, but once the SELECT completes,\n    // we want to make sure any buffers or temporary conglomerates\n    // are cleaned up.", "author": "msirek", "createdAt": "2020-11-12T22:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNzI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTUwMw==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522125503", "bodyText": "Should we log the potential error?", "author": "arnaud-splice", "createdAt": "2020-11-12T13:59:47Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java", "diffHunk": "@@ -471,8 +471,17 @@ private void dropTable(long conglomID) throws StandardException {\n     private void dropConglomerate() throws StandardException {\n         TransactionController tc = activation.getTransactionController();\n         LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n-        tc.dropConglomerate(CID);\n-        dropTable(CID);\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "originalCommit": "7df489b532d736ad44c90edca40f31c852cdad88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2MTY2Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522461667", "bodyText": "Added code to log a warning message about failure to do cleanup, indicating cleanup may have been called twice.", "author": "msirek", "createdAt": "2020-11-12T22:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjc0Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522126747", "bodyText": "Should we log errors?", "author": "arnaud-splice", "createdAt": "2020-11-12T14:01:25Z", "path": "hbase_sql/src/main/java/com/splicemachine/stream/QueryJob.java", "diffHunk": "@@ -114,11 +120,29 @@ public Void call() throws Exception {\n                 SpliceSpark.getContext().sc().cancelJobGroup(jobName);\n             throw e;\n         } finally {\n+            long tempTriggerConglomerate = dsp.getTempTriggerConglomerate();\n+            if (tempTriggerConglomerate != 0 && activation != null)\n+                dropConglomerate(tempTriggerConglomerate, activation);\n             if(resetSession)\n                 SpliceSpark.resetSession();\n             ah.close();\n         }\n \n         return null;\n     }\n+\n+    private void dropConglomerate(long CID, Activation activation) {\n+        TransactionController tc = activation.getTransactionController();\n+        LOG.trace(format(\"Dropping temporary conglomerate splice:%d\", CID));\n+        try {\n+            tc.dropConglomerate(CID);\n+        }\n+        catch (StandardException e) {", "originalCommit": "7df489b532d736ad44c90edca40f31c852cdad88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2NTk2OA==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522465968", "bodyText": "Yes, added logging here too.", "author": "msirek", "createdAt": "2020-11-12T22:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTc3MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522129771", "bodyText": "Update above comment", "author": "arnaud-splice", "createdAt": "2020-11-12T14:05:39Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TriggerExecutionContext.java", "diffHunk": "@@ -158,10 +160,13 @@ public TriggerExecutionContext(ConnectionContext cc,\n         this.cc = cc;\n \n         this.fromSparkExecution = fromSparkExecution;\n+        this.fromTableDmlSpsDescriptor = fromTableDmlSpsDescriptor;\n         // only use the local cache for spark execution\n-        if (fromSparkExecution)\n+        if (fromSparkExecution || fromTableDmlSpsDescriptor != null) {", "originalCommit": "7df489b532d736ad44c90edca40f31c852cdad88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2ODQ1Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r522468453", "bodyText": "Done.\n\n    // Only use the local cache for spark execution, or if we have a temporary\n    // trigger created for execution of a FROM FINAL TABLE clause, which\n    // does not store its SPS in the data dictionary, so needs to use\n    // a ManagedCache.", "author": "msirek", "createdAt": "2020-11-12T22:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTc3MQ=="}], "type": "inlineReview"}, {"oid": "4acb853977ec2142480af37c01b669052386985e", "url": "https://github.com/splicemachine/spliceengine/commit/4acb853977ec2142480af37c01b669052386985e", "message": "DB-10525 Address review comments", "committedDate": "2020-11-12T22:24:25Z", "type": "commit"}, {"oid": "f01debf54c47d3f512cf8ce5a78c4e3e4e751e15", "url": "https://github.com/splicemachine/spliceengine/commit/f01debf54c47d3f512cf8ce5a78c4e3e4e751e15", "message": "Merge branch 'master' into DB-10525", "committedDate": "2020-11-12T23:47:28Z", "type": "commit"}, {"oid": "2507258fae07329538305f29e6ccc93c121e3dcc", "url": "https://github.com/splicemachine/spliceengine/commit/2507258fae07329538305f29e6ccc93c121e3dcc", "message": "Merge branch 'master' into DB-10525", "committedDate": "2020-11-13T02:17:34Z", "type": "commit"}, {"oid": "6410faccc61ba5b69d6dfd0b720d354770ec93ec", "url": "https://github.com/splicemachine/spliceengine/commit/6410faccc61ba5b69d6dfd0b720d354770ec93ec", "message": "Merge branch 'master' into DB-10525", "committedDate": "2020-11-13T16:03:10Z", "type": "commit"}, {"oid": "b676eb7be47e5701a12d806af59ebf59b61e2217", "url": "https://github.com/splicemachine/spliceengine/commit/b676eb7be47e5701a12d806af59ebf59b61e2217", "message": "DB-10525 Move FINAL TABLE error checking to the parser.", "committedDate": "2020-11-13T18:40:28Z", "type": "commit"}, {"oid": "558dc4dfefbc349b247b6cc026297b4850d6543d", "url": "https://github.com/splicemachine/spliceengine/commit/558dc4dfefbc349b247b6cc026297b4850d6543d", "message": "DB-10525 Fix spotbugs", "committedDate": "2020-11-13T20:11:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMzYyNg==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523233626", "bodyText": "boundAndOptimizedStatement with lowercase B", "author": "dgomezferro", "createdAt": "2020-11-13T21:09:29Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -117,6 +118,16 @@ public PreparedStatement prepare(LanguageConnectionContext lcc) throws StandardE\n     }\n \n     public PreparedStatement prepare(LanguageConnectionContext lcc,boolean forMetaData) throws StandardException{\n+        return prepare(lcc, forMetaData, null);\n+    }\n+\n+    // If BoundAndOptimizedStatement is passed in, we don't try to\n+    // parse, bind and optimize the statement from its SQL text\n+    // before passing to code generation.\n+    // Instead we just directly compile BoundAndOptimizedStatement.\n+    public PreparedStatement prepare(LanguageConnectionContext lcc,\n+                                     boolean forMetaData,\n+                                     StatementNode BoundAndOptimizedStatement) throws StandardException{", "originalCommit": "558dc4dfefbc349b247b6cc026297b4850d6543d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDUxNg==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523234516", "bodyText": "lowercase B", "author": "dgomezferro", "createdAt": "2020-11-13T21:11:41Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -257,13 +268,21 @@ private boolean isExplainStatement(){\n         return s.startsWith(\"EXPLAIN\");\n     }\n \n+    private PreparedStatement prepMinion(LanguageConnectionContext lcc,\n+                                         boolean cacheMe,\n+                                         Object[] paramDefaults,\n+                                         SchemaDescriptor spsSchema,\n+                                         boolean internalSQL) throws StandardException{\n+        return prepMinion(lcc, cacheMe, paramDefaults, spsSchema, internalSQL, null);\n+    }\n     @SuppressFBWarnings(value = \"ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD\",\n             justification = \"the new object created at line 370 will not be put into cache and it cannot be referenced by other threads\")\n     private PreparedStatement prepMinion(LanguageConnectionContext lcc,\n                                          boolean cacheMe,\n                                          Object[] paramDefaults,\n                                          SchemaDescriptor spsSchema,\n-                                         boolean internalSQL) throws StandardException{\n+                                         boolean internalSQL,\n+                                         StatementNode BoundAndOptimizedStatement) throws StandardException{", "originalCommit": "558dc4dfefbc349b247b6cc026297b4850d6543d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTU4OA==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523235588", "bodyText": "I don't like too much using a ThreadLocal like this, at least I think it should go somewhere else other than the DataDictionaryCache (maybe on one of the Context objects?). Can you open a JIRA to revisit this sometime later?", "author": "dgomezferro", "createdAt": "2020-11-13T21:14:22Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -89,6 +89,9 @@\n     private ManagedCache<Long, Optional<String>> catalogVersionCache;\n     private ManagedCache<UUID, ConstraintDescriptorList> constraintDescriptorListCache;\n     private DataDictionary dd;\n+\n+    public static final ThreadLocal<TriggerDescriptor> fromTableTriggerDescriptor = new ThreadLocal<>();", "originalCommit": "558dc4dfefbc349b247b6cc026297b4850d6543d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3NzMzNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4555#discussion_r523277334", "bodyText": "Opened DB-10738 for this.  Can also take care of uppercased BoundAndOptimizedStatement through that Jira.", "author": "msirek", "createdAt": "2020-11-13T23:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNTU4OA=="}], "type": "inlineReview"}]}