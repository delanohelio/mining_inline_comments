{"pr_number": 3498, "pr_title": "DB-9448 Fix resurfacing rows issue in Spark", "pr_createdAt": "2020-04-29T18:18:59Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3498", "timeline": [{"oid": "811453a2528e3287934e7ade16e92fa36b70fe17", "url": "https://github.com/splicemachine/spliceengine/commit/811453a2528e3287934e7ade16e92fa36b70fe17", "message": "DB-9448 Fix resurfacing rows issue in Spark\n\nMigration to hbase2.0 created two issues:\n1. We did not use memStoreAware's lock properly anymore\n2. We did not know about compacted files when creating a HRegion from\nSpark's side\n\nThis commit addresses these two issues in the following way:\n\n1.\nSpliceCompactionRequest.setOffPeak is now hijacked to properly\nrelease the lock on memStoreAware once a compaction has completed.\nShort of modifying HBase's code to be able to use a custom\nCompactionLifeCycleTracker (only DUMMY is used outside of their tests),\nthis seems to be the only reliable solution.\n\n2.\nSpark side now RPC calls the relevant region to get a list of compacted\nfiles so that regions created on Spark side can properly exclude\ncompacted store files that pertains to a specific region.", "committedDate": "2020-05-12T17:45:04Z", "type": "commit"}, {"oid": "811453a2528e3287934e7ade16e92fa36b70fe17", "url": "https://github.com/splicemachine/spliceengine/commit/811453a2528e3287934e7ade16e92fa36b70fe17", "message": "DB-9448 Fix resurfacing rows issue in Spark\n\nMigration to hbase2.0 created two issues:\n1. We did not use memStoreAware's lock properly anymore\n2. We did not know about compacted files when creating a HRegion from\nSpark's side\n\nThis commit addresses these two issues in the following way:\n\n1.\nSpliceCompactionRequest.setOffPeak is now hijacked to properly\nrelease the lock on memStoreAware once a compaction has completed.\nShort of modifying HBase's code to be able to use a custom\nCompactionLifeCycleTracker (only DUMMY is used outside of their tests),\nthis seems to be the only reliable solution.\n\n2.\nSpark side now RPC calls the relevant region to get a list of compacted\nfiles so that regions created on Spark side can properly exclude\ncompacted store files that pertains to a specific region.", "committedDate": "2020-05-12T17:45:04Z", "type": "forcePushed"}, {"oid": "c2ef2a063363679852f99e73fd38546e78d50821", "url": "https://github.com/splicemachine/spliceengine/commit/c2ef2a063363679852f99e73fd38546e78d50821", "message": "DB-9448 Fix spotbugs", "committedDate": "2020-05-12T22:51:51Z", "type": "commit"}, {"oid": "9968c9044b37f9cf0552b64a67f116fed61c3a33", "url": "https://github.com/splicemachine/spliceengine/commit/9968c9044b37f9cf0552b64a67f116fed61c3a33", "message": "DB-9448 Remove assert", "committedDate": "2020-05-12T23:13:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTEyNw==", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424245127", "bodyText": "Now that I look at the code and the comment, the memstoreAware field already had the role of guarding against failed compactions, if compactionCountIncremented is false then memstoreAware will also be null, right? I think compactionCountIncremented is redundant.", "author": "dgomezferro", "createdAt": "2020-05-13T07:59:01Z", "path": "hbase_sql/src/main/java/com/splicemachine/compactions/SpliceCompactionRequest.java", "diffHunk": "@@ -51,19 +55,35 @@ public void preStorefilesRename() throws IOException {\n                 }\n                 continue;\n             }\n-            if(memstoreAware.compareAndSet(latest, MemstoreAware.incrementCompactionCount(latest)))\n+            if(memstoreAware.compareAndSet(latest, MemstoreAware.incrementCompactionCount(latest))) {\n+                if(LOG.isDebugEnabled()) {\n+                    SpliceLogUtils.debug(LOG, \"memstoreAware@\" + System.identityHashCode(memstoreAware) +\n+                            \" 's compactionCount incremented from \" + latest.currentCompactionCount +\n+                            \" to \" + (latest.currentCompactionCount + 1));\n+                }\n+                assert !compactionCountIncremented;\n+                compactionCountIncremented = true;\n                 break;\n+            }\n         }\n     }\n     public void afterExecute(){\n-        if (memstoreAware == null) {\n+        if (memstoreAware == null || !compactionCountIncremented) {", "originalCommit": "9968c9044b37f9cf0552b64a67f116fed61c3a33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3NDkyOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424274929", "bodyText": "I don't think so. Without compactionCountIncremented, we end up decrementing compactionCount below 0.\nThat's because we setMemstoreAware in preCompact but we call preStorefilesRename after the actual execution in SpliceDefaultCompactor.compact()", "author": "arnaud-splice", "createdAt": "2020-05-13T08:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3NzI1MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424277250", "bodyText": "That's right, I got confused and thought we were setting it in preStorefilesRename. Looks good!", "author": "dgomezferro", "createdAt": "2020-05-13T08:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTk2NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424245965", "bodyText": "These two methods can be removed since they don't change the superclass implementation.", "author": "dgomezferro", "createdAt": "2020-05-13T08:00:27Z", "path": "hbase_sql/src/main/java/com/splicemachine/compactions/SpliceCompactionRequest.java", "diffHunk": "@@ -82,4 +102,26 @@ public void setRegion(HRegion region) {\n         this.region = region;\n     }\n \n+    @Override\n+    public void setOffPeak(boolean value) {\n+        // We hijack setOffPeak because it is only called twice:\n+        // 1. set to true in SpliceDefaultCompactionPolicy before compaction happens\n+        // 2. set to false in HStore.finishCompactionRequest (hbase code)\n+        // At those points, the value passed is irrelevant and is \"only\" used for logging\n+        // purpose, so we can hijack it.\n+        super.setOffPeak(value);\n+        if (!value) {\n+            afterExecute();\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {", "originalCommit": "9968c9044b37f9cf0552b64a67f116fed61c3a33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3MDI2Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424270263", "bodyText": "Those are there as documentation to satisfy spotbugs.", "author": "arnaud-splice", "createdAt": "2020-05-13T08:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NTk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NjY5Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424246692", "bodyText": "Are there any interactions with real off-peak compactions scheduled from HBase?", "author": "dgomezferro", "createdAt": "2020-05-13T08:01:42Z", "path": "hbase_sql/src/main/java/com/splicemachine/compactions/SpliceDefaultCompactionPolicy.java", "diffHunk": "@@ -48,7 +48,9 @@ public CompactionRequestImpl selectCompaction(Collection<HStoreFile> candidateFi\n         HRegion region = store.getHRegion();\n         String storeName = store.getColumnFamilyName();\n         scr.setIsMajor(cr.isMajor(), cr.isAllFiles());\n-        scr.setOffPeak(cr.isOffPeak());\n+        // Ignoring cr.isOffPeak() and hardcoding true because SpliceCompactionRequest.setOffPeak is hijacked to run\n+        // SpliceCompactionRequest.afterExecute if isOffPeak(false) is called.\n+        scr.setOffPeak(true);", "originalCommit": "9968c9044b37f9cf0552b64a67f116fed61c3a33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwNjMwOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3498#discussion_r424306309", "bodyText": "Based on what I could see, this parameter was ignored anyway, so it should not have any impact.", "author": "arnaud-splice", "createdAt": "2020-05-13T09:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NjY5Mg=="}], "type": "inlineReview"}]}