{"pr_number": 3713, "pr_title": "DB-9575 Remove forced regionLocation refresh from AbstractSMInputFormat.getSplits", "pr_createdAt": "2020-06-23T10:48:46Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3713", "timeline": [{"oid": "b93e892fefff867e239f9559667e9288359596b9", "url": "https://github.com/splicemachine/spliceengine/commit/b93e892fefff867e239f9559667e9288359596b9", "message": "DB-9575 Remove forced regionLocation refresh", "committedDate": "2020-06-23T10:35:09Z", "type": "commit"}, {"oid": "6ec2b2b0e5efcb53236ba28cb22d4f658094de3c", "url": "https://github.com/splicemachine/spliceengine/commit/6ec2b2b0e5efcb53236ba28cb22d4f658094de3c", "message": "DB-9575 typo in error message fixed", "committedDate": "2020-06-23T10:45:51Z", "type": "commit"}, {"oid": "9f0eaa01138b382b4c3144ea0180f9c4068ef01d", "url": "https://github.com/splicemachine/spliceengine/commit/9f0eaa01138b382b4c3144ea0180f9c4068ef01d", "message": "Merge branch 'master' into DB-9575", "committedDate": "2020-06-25T08:13:04Z", "type": "commit"}, {"oid": "fb9a5206653174e6a72648e90fa2114e1e32d0f0", "url": "https://github.com/splicemachine/spliceengine/commit/fb9a5206653174e6a72648e90fa2114e1e32d0f0", "message": "DB-9575 old unit tests fixed, new added", "committedDate": "2020-06-25T10:23:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDU0Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3713#discussion_r445694547", "bodyText": "Can you add a check for the scan start/stop keys? Making sure there's no gap between the scan start key and the first split, or between the last split and the scan stop key. This check should also be made when there's only one split.", "author": "dgomezferro", "createdAt": "2020-06-25T16:42:38Z", "path": "hbase_sql/src/main/java/com/splicemachine/mrio/api/core/AbstractSMInputFormat.java", "diffHunk": "@@ -191,6 +192,39 @@\n         }\n     }\n \n+    /**\n+     * Checks the sequence of split rows. If any gap is found, the splitting has to be recalculated again.\n+     *\n+     * @param lss\n+     * @return\n+     */\n+    protected boolean isRefreshNeeded(List<InputSplit> lss) {", "originalCommit": "fb9a5206653174e6a72648e90fa2114e1e32d0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMTc2NA==", "url": "https://github.com/splicemachine/spliceengine/pull/3713#discussion_r450721764", "bodyText": "More checks are added.", "author": "ipraznik-splice", "createdAt": "2020-07-07T09:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDgzOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3713#discussion_r445694839", "bodyText": "Do we ever get something other than SMSplit? Is it just defensive programming?", "author": "dgomezferro", "createdAt": "2020-06-25T16:43:08Z", "path": "hbase_sql/src/main/java/com/splicemachine/mrio/api/core/AbstractSMInputFormat.java", "diffHunk": "@@ -191,6 +192,39 @@\n         }\n     }\n \n+    /**\n+     * Checks the sequence of split rows. If any gap is found, the splitting has to be recalculated again.\n+     *\n+     * @param lss\n+     * @return\n+     */\n+    protected boolean isRefreshNeeded(List<InputSplit> lss) {\n+        if (lss.size() < 2 || !lss.stream().allMatch(is -> (is instanceof SMSplit))) {", "originalCommit": "fb9a5206653174e6a72648e90fa2114e1e32d0f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMjExOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3713#discussion_r450722119", "bodyText": "I've changed it to assert the instanceof", "author": "ipraznik-splice", "createdAt": "2020-07-07T09:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDgzOQ=="}], "type": "inlineReview"}, {"oid": "a63e093000c6620e23aa18fd30ca4e05a8b5ea0e", "url": "https://github.com/splicemachine/spliceengine/commit/a63e093000c6620e23aa18fd30ca4e05a8b5ea0e", "message": "Merge branch 'master' into DB-9575", "committedDate": "2020-07-03T13:18:09Z", "type": "commit"}, {"oid": "0f6033846111fa253a5766a2c29619f0d549dedb", "url": "https://github.com/splicemachine/spliceengine/commit/0f6033846111fa253a5766a2c29619f0d549dedb", "message": "DB-9575 more tests and improved check for split gaps", "committedDate": "2020-07-06T09:32:32Z", "type": "commit"}, {"oid": "0c1c8959423eae5fd0be7279a2b7a1932bba9a61", "url": "https://github.com/splicemachine/spliceengine/commit/0c1c8959423eae5fd0be7279a2b7a1932bba9a61", "message": "DB-9575 condition fixed", "committedDate": "2020-07-06T12:35:19Z", "type": "commit"}, {"oid": "190a13ac878c887a295e064af7d6c233ae0c7ab5", "url": "https://github.com/splicemachine/spliceengine/commit/190a13ac878c887a295e064af7d6c233ae0c7ab5", "message": "Merge branch 'master' into DB-9575", "committedDate": "2020-07-06T15:28:17Z", "type": "commit"}, {"oid": "5c5295a8d59634c3a54b68462f59110e383fef1d", "url": "https://github.com/splicemachine/spliceengine/commit/5c5295a8d59634c3a54b68462f59110e383fef1d", "message": "unused import removed", "committedDate": "2020-07-07T09:11:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczOTAwNA==", "url": "https://github.com/splicemachine/spliceengine/pull/3713#discussion_r450739004", "bodyText": "This check is not correct, we can have a scan with start key = 1000 and the first partition might have key = 500.\nWe have to check that firstSplit.split.getStartRow() <= scanStartRow and that lastSplit.split.getEndRow() >= scanStopRow (or lastSplit.split.getEndRow().isEmpty())", "author": "dgomezferro", "createdAt": "2020-07-07T09:41:10Z", "path": "hbase_sql/src/main/java/com/splicemachine/mrio/api/core/AbstractSMInputFormat.java", "diffHunk": "@@ -191,6 +192,66 @@\n         }\n     }\n \n+    private int compareRows(byte[] left, byte[] right) {\n+        return org.apache.hadoop.hbase.util.Bytes.compareTo(left, right);\n+    }\n+\n+    private boolean splitContainsScan(SMSplit split, byte[] scanStartRow, byte[] scanStopRow) {\n+        if (scanStartRow.length == 0 && scanStopRow.length == 0) {\n+            return compareRows(split.split.getStartRow(), scanStartRow) == 0 &&\n+                    compareRows(split.split.getEndRow(), scanStopRow) == 0;\n+        } else {\n+            if (compareRows(split.split.getStartRow(), scanStartRow) < 1) {\n+                if (split.split.getEndRow().length == 0 || compareRows(split.split.getEndRow(), scanStopRow) >= 0) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Checks the sequence of split rows. If any gap between splits is found or start/stop row of scan does not\n+     * correspond to the generated splits, the splitting has to be recalculated again.\n+     *\n+     * @param inputSplits generated splits\n+     * @param scanStartRow\n+     * @param scanStopRow\n+     * @return\n+     */\n+    protected boolean isRefreshNeeded(List<InputSplit> inputSplits, byte[] scanStartRow, byte[] scanStopRow) {\n+        assert inputSplits.stream().allMatch(is -> (is instanceof SMSplit)) : \"items expected to be instanceof SMSplit\";\n+\n+        if (inputSplits.size() < 2) {\n+            return !splitContainsScan((SMSplit) inputSplits.get(0), scanStartRow, scanStopRow);\n+        } else {\n+            inputSplits.sort(new Comparator<InputSplit>() {\n+                @Override\n+                public int compare(InputSplit o1, InputSplit o2) {\n+                    SMSplit smSplit1 = (SMSplit) o1;\n+                    SMSplit smSplit2 = (SMSplit) o2;\n+\n+                    return compareRows(smSplit1.split.getStartRow(), smSplit2.split.getStartRow());\n+                }\n+            });\n+\n+            for (int i = 1; i < inputSplits.size(); i++) {\n+                byte currentStartRow[] = ((SMSplit) inputSplits.get(i)).split.getStartRow();\n+                byte prevEndRow[] = ((SMSplit) inputSplits.get(i - 1)).split.getEndRow();\n+                if (compareRows(currentStartRow, prevEndRow) != 0) {\n+                    LOG.warn(\"The gap in splits is found: current split [\" + inputSplits.get(i) + \"], previous split [\" + inputSplits.get(i - 1) + \"]\");\n+                    return true;\n+                }\n+            }\n+            SMSplit firstSplit = (SMSplit) inputSplits.get(0);\n+            SMSplit lastSplit = (SMSplit) inputSplits.get(inputSplits.size() - 1);\n+            if (compareRows(firstSplit.split.getStartRow(), scanStartRow) != 0 || compareRows(lastSplit.split.getEndRow(), scanStopRow) != 0) {", "originalCommit": "5c5295a8d59634c3a54b68462f59110e383fef1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1OTA4Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3713#discussion_r450759087", "bodyText": "it has been corrected", "author": "ipraznik-splice", "createdAt": "2020-07-07T10:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczOTAwNA=="}], "type": "inlineReview"}, {"oid": "ce8f7d1e70f53e7f5d7f39848517c5b97a0e20de", "url": "https://github.com/splicemachine/spliceengine/commit/ce8f7d1e70f53e7f5d7f39848517c5b97a0e20de", "message": "DB-9575 first/last split condition is fixed", "committedDate": "2020-07-07T10:15:00Z", "type": "commit"}]}