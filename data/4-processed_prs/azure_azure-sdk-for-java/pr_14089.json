{"pr_number": 14089, "pr_title": "Merge ADT dataplane feature branch into master.", "pr_createdAt": "2020-08-13T23:24:22Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14089", "timeline": [{"oid": "4994961d0ea4e8380bcb95773da9d3381b19e710", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4994961d0ea4e8380bcb95773da9d3381b19e710", "message": "Generate code from swagger", "committedDate": "2020-06-26T22:16:16Z", "type": "commit"}, {"oid": "940e9485ade47bf85b5ca0841b5cc0dcb7d657ef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/940e9485ade47bf85b5ca0841b5cc0dcb7d657ef", "message": "Create generate.ps1", "committedDate": "2020-06-26T22:16:55Z", "type": "commit"}, {"oid": "cb0f0032c036f0594d33ca0109a62cade68a9bbf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb0f0032c036f0594d33ca0109a62cade68a9bbf", "message": "Merge branch 'master' into feature/adt-dp", "committedDate": "2020-06-26T22:17:57Z", "type": "commit"}, {"oid": "9e6b32a1d189dc3ef6dae21c3e647164f0e85415", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e6b32a1d189dc3ef6dae21c3e647164f0e85415", "message": "change autogenerated code to make it compile", "committedDate": "2020-06-30T21:28:32Z", "type": "commit"}, {"oid": "3556d2fc2aa7b93a0c7590637fe7feaed9b8c1ad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3556d2fc2aa7b93a0c7590637fe7feaed9b8c1ad", "message": "move generated code out of the root directory.", "committedDate": "2020-06-30T21:37:37Z", "type": "commit"}, {"oid": "7f3cd43945037c8ace627dda182c6cd5538ff049", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f3cd43945037c8ace627dda182c6cd5538ff049", "message": "Got the autorest generated code build without intervention", "committedDate": "2020-07-22T14:01:47Z", "type": "commit"}, {"oid": "8a89e2e0cdcd89294d0cf7999e22e57366b6b1ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a89e2e0cdcd89294d0cf7999e22e57366b6b1ca", "message": "Generate code from swagger", "committedDate": "2020-07-22T14:03:02Z", "type": "commit"}, {"oid": "c8e5dcb77bcf8a0f6d29462148f5918afd98cdde", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8e5dcb77bcf8a0f6d29462148f5918afd98cdde", "message": "Create generate.ps1", "committedDate": "2020-07-22T14:03:02Z", "type": "commit"}, {"oid": "eba5f9f73eb5bcd0225e8192bc07ed3426ba8650", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eba5f9f73eb5bcd0225e8192bc07ed3426ba8650", "message": "change autogenerated code to make it compile", "committedDate": "2020-07-22T14:03:03Z", "type": "commit"}, {"oid": "8e0937c927f429c919799b326fbb6846b4dd3947", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e0937c927f429c919799b326fbb6846b4dd3947", "message": "move generated code out of the root directory.", "committedDate": "2020-07-22T14:03:04Z", "type": "commit"}, {"oid": "6edd45bb429f174c3101c9e8cd052a666d998424", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6edd45bb429f174c3101c9e8cd052a666d998424", "message": "Got the autorest generated code build without intervention", "committedDate": "2020-07-22T14:03:04Z", "type": "commit"}, {"oid": "e8a44676c98026b5d88f5805538a36de01cb7596", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8a44676c98026b5d88f5805538a36de01cb7596", "message": "Merge branch 'feature/adt-dp' of https://github.com/Azure/azure-sdk-for-java into feature/adt-dp", "committedDate": "2020-07-22T14:03:12Z", "type": "commit"}, {"oid": "0cb4af8944427c49090ddaa3f06ee87fa6b4f906", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0cb4af8944427c49090ddaa3f06ee87fa6b4f906", "message": "add MIT header.", "committedDate": "2020-07-22T15:55:00Z", "type": "commit"}, {"oid": "563cd445482169354d35c42f2fd8d22ceeffb865", "url": "https://github.com/Azure/azure-sdk-for-java/commit/563cd445482169354d35c42f2fd8d22ceeffb865", "message": "Use auto rest v4 to generate the code.", "committedDate": "2020-07-22T22:19:19Z", "type": "commit"}, {"oid": "8dcdb44d56a30cb6161be71d8affe873d0ddf714", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8dcdb44d56a30cb6161be71d8affe873d0ddf714", "message": "point to the parent pom file.", "committedDate": "2020-07-23T15:43:41Z", "type": "commit"}, {"oid": "36463f780df1914d87faaad0d3b5a5793a3cd0eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36463f780df1914d87faaad0d3b5a5793a3cd0eb", "message": "Run autorest off of the source instead of local build", "committedDate": "2020-08-10T16:55:00Z", "type": "commit"}, {"oid": "8866eb73c7ea6f346f8f24241728e8895305d9ef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8866eb73c7ea6f346f8f24241728e8895305d9ef", "message": "Create DigitalTwinsClient.java", "committedDate": "2020-08-10T18:25:26Z", "type": "commit"}, {"oid": "6f5bff5080bfb0cecac96696e0fa4d09670e4d3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f5bff5080bfb0cecac96696e0fa4d09670e4d3c", "message": "fix spacing", "committedDate": "2020-08-10T18:47:47Z", "type": "commit"}, {"oid": "200c74832f2f5d4a10568024f76d54226fa0850a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/200c74832f2f5d4a10568024f76d54226fa0850a", "message": "Add Readme file.", "committedDate": "2020-08-13T19:38:23Z", "type": "commit"}, {"oid": "bb58f0488d722affdde576324e3e4abc6b5b51ee", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb58f0488d722affdde576324e3e4abc6b5b51ee", "message": "Add yml files for CI and tests", "committedDate": "2020-08-13T23:15:51Z", "type": "commit"}, {"oid": "7156871b8c647e5ef02d676d6de96043a0b5e222", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7156871b8c647e5ef02d676d6de96043a0b5e222", "message": "Add builder, sync and async digital twin clients (#13990)", "committedDate": "2020-08-13T23:23:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyOTM1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470329358", "bodyText": "Versioning for libraries in the repo is expected to use the beta moniker, you'll want to change this to 1.0.0-beta.1. Additionally, this will need a version comment tag as other versions in the POM file have, in this case it'll be <!-- {x-version-update;com.azure.digitaltwins.core:azure-digitaltwins-core;current} -->. This will also require adding a new line into this file which is used to validate and update versions automatically using a script: https://github.com/Azure/azure-sdk-for-java/blob/master/eng/versioning/version_client.txt", "author": "alzimmermsft", "createdAt": "2020-08-14T00:28:56Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0-SNAPSHOT</version>", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMDA5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470330093", "bodyText": "Is Digital Twins expected to have its own group? All other client libraries are targeting the groupId of com.azure.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:30:04Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMDc0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470330747", "bodyText": "This will need a version tag comment as the dependencies above have. This may also need to use version 1.7.3 as it is what is listed in the external version management file we use: https://github.com/Azure/azure-sdk-for-java/blob/master/eng/versioning/external_dependencies.txt#L20.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:31:05Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.5.3</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.rest</groupId>\n+      <artifactId>client-runtime</artifactId>\n+      <version>1.7.4</version>", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNDY3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470734672", "bodyText": "I ended up removing this dependency as we don't really need it.", "author": "azabbasi", "createdAt": "2020-08-14T16:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMDc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMTE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470331169", "bodyText": "This will need to be versioned as well.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:31:45Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure.digitaltwins.core</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core-http-netty</artifactId>\n+      <version>1.5.3</version> <!-- {x-version-update;com.azure:azure-core-http-netty;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.rest</groupId>\n+      <artifactId>client-runtime</artifactId>\n+      <version>1.7.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+      <version>2.10.1</version>", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjE2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470332166", "bodyText": "Generally we don't want to have protected fields, instead could this be retrievable using a public getter method and this field can become private.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:33:15Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * This class provides a client for interacting asynchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsAsyncClient {\n+    protected final DigitalTwinsServiceVersion serviceVersion;", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNjk3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470736970", "bodyText": "I will make code changes after the first round of team review, I will make a note of this comment.", "author": "azabbasi", "createdAt": "2020-08-14T16:45:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMjY2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470332667", "bodyText": "Generally clients should be final as we don't normally allow them to be extended instead opting for a composition approach.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:34:06Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * This class provides a client for interacting asynchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsAsyncClient {", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMzI0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470333241", "bodyText": "Should use a package private scope (no scope keyword).", "author": "alzimmermsft", "createdAt": "2020-08-14T00:35:00Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import reactor.core.publisher.Mono;\n+\n+\n+/**\n+ * This class provides a client for interacting asynchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsAsyncClient {\n+    protected final DigitalTwinsServiceVersion serviceVersion;\n+\n+    protected final AzureDigitalTwinsAPI protocolLayer;\n+\n+    protected DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host) {", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMzQyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470333421", "bodyText": "Should be final.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:35:17Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+\n+/**\n+ * This class provides a client for interacting synchronously with an Azure Digital Twins instance.\n+ *\n+ * <p>\n+ * This client is instantiated through {@link DigitalTwinsClientBuilder}.\n+ * </p>\n+ *\n+ * <p>\n+ * This client allows for management of digital twins, their components, and their relationships. It also allows for managing\n+ * the digital twin models and event routes tied to your Azure Digital Twins instance.\n+ * </p>\n+ */\n+@ServiceClient(builder = DigitalTwinsClientBuilder.class)\n+public class DigitalTwinsClient {", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNDY1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470334651", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static String[] GetAuthorizationScopes(String endpoint) {\n          \n          \n            \n                private static String[] getAuthorizationScopes(String endpoint) {", "author": "alzimmermsft", "createdAt": "2020-08-14T00:37:21Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTk4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470335988", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.httpPipeline == null)\n          \n          \n            \n                    {\n          \n          \n            \n                    if (this.httpPipeline == null) {", "author": "alzimmermsft", "createdAt": "2020-08-14T00:39:30Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+\n+        if (this.httpPipeline == null)\n+        {", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNzU2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470337562", "bodyText": "Given this will be called a lot you may want to generate a Pattern for this.\nPattern.compile(\"(ppe|azure)\\\\.net\")\nCould also add case-insensitive flag to it if that is allowed.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:41:52Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzODIzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470338232", "bodyText": "Would this String array ever be mutated? If not let's make it a constant so a new array isn't added to the heap each time this path triggers.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:42:56Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzODQwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470338400", "bodyText": "These could be made constant at the class level.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:43:14Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzOTQxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470339410", "bodyText": "HttpLoggingPolicy allows for null HttpLogOptions to effectively be a no-op, don't think it needs to be null checked here.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:44:52Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+\n+        if (this.httpPipeline == null)\n+        {\n+            this.httpPipeline = buildPipeline(\n+                this.tokenCredential,\n+                this.endpoint,\n+                this.logOptions,\n+                this.httpClient,\n+                this.additionalPolicies,\n+                this.retryPolicy);\n+        }\n+\n+        return new DigitalTwinsAsyncClient(this.httpPipeline, this.serviceVersion, this.endpoint);\n+    }\n+\n+    /**\n+     * Set the service endpoint that the built client will communicate with. This field is mandatory to set.\n+     *\n+     * @param endpoint URL of the service.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder endpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the authentication token provider that the built client will use for all service requests. This field is\n+     * mandatory to set unless you set the http pipeline directly and that set pipeline has an authentication policy configured.\n+     *\n+     * @param tokenCredential the authentication token provider.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder tokenCredential(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link DigitalTwinsServiceVersion} that is used when making API requests.\n+     * <p>\n+     * If a service version is not provided, the service version that will be used will be the latest known service\n+     * version based on the version of the client library being used. If no service version is specified, updating to a\n+     * newer version of the client library will have the result of potentially moving to a newer service version.\n+     * <p>\n+     * Targeting a specific service version may also mean that the service will return an error for newer APIs.\n+     *\n+     * @param serviceVersion The service API version to use.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder serviceVersion(DigitalTwinsServiceVersion serviceVersion) {\n+        this.serviceVersion = serviceVersion;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpClient} to use for sending a receiving requests to and from the service.\n+     *\n+     * @param httpClient HttpClient to use for requests.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder httpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpLogOptions} for service requests.\n+     *\n+     * @param logOptions The logging configuration to use when sending and receiving HTTP requests/responses.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code logOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder httpLogOptions(HttpLogOptions logOptions) {\n+        this.logOptions = Objects.requireNonNull(logOptions, \"'logOptions' cannot be null.\");", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MDEwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470340105", "bodyText": "The other code in the builder allows for retryPolicy to be null. I would remove the null check and just document that if this is null a default RetryPolicy will be used.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:45:50Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,221 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        // Adds a \"x-ms-client-request-id\" header to each request. This header is useful for tracing requests through Azure ecosystems\n+        policies.add(new RequestIdPolicy());\n+\n+        // Only the RequestIdPolicy will take effect prior to the retry policy\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        // Adds a date header to each HTTP request for tracking purposes\n+        policies.add(new AddDatePolicy());\n+\n+        // Add authentication policy so that each HTTP request has authorization header\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+\n+        policies.addAll(additionalPolicies);\n+\n+        // Custom policies, authentication policy, and add date policy all take place after the retry policy\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+\n+        if (this.httpPipeline == null)\n+        {\n+            this.httpPipeline = buildPipeline(\n+                this.tokenCredential,\n+                this.endpoint,\n+                this.logOptions,\n+                this.httpClient,\n+                this.additionalPolicies,\n+                this.retryPolicy);\n+        }\n+\n+        return new DigitalTwinsAsyncClient(this.httpPipeline, this.serviceVersion, this.endpoint);\n+    }\n+\n+    /**\n+     * Set the service endpoint that the built client will communicate with. This field is mandatory to set.\n+     *\n+     * @param endpoint URL of the service.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder endpoint(String endpoint) {\n+        this.endpoint = endpoint;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the authentication token provider that the built client will use for all service requests. This field is\n+     * mandatory to set unless you set the http pipeline directly and that set pipeline has an authentication policy configured.\n+     *\n+     * @param tokenCredential the authentication token provider.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder tokenCredential(TokenCredential tokenCredential) {\n+        this.tokenCredential = tokenCredential;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link DigitalTwinsServiceVersion} that is used when making API requests.\n+     * <p>\n+     * If a service version is not provided, the service version that will be used will be the latest known service\n+     * version based on the version of the client library being used. If no service version is specified, updating to a\n+     * newer version of the client library will have the result of potentially moving to a newer service version.\n+     * <p>\n+     * Targeting a specific service version may also mean that the service will return an error for newer APIs.\n+     *\n+     * @param serviceVersion The service API version to use.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder serviceVersion(DigitalTwinsServiceVersion serviceVersion) {\n+        this.serviceVersion = serviceVersion;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpClient} to use for sending a receiving requests to and from the service.\n+     *\n+     * @param httpClient HttpClient to use for requests.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     */\n+    public DigitalTwinsClientBuilder httpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpLogOptions} for service requests.\n+     *\n+     * @param logOptions The logging configuration to use when sending and receiving HTTP requests/responses.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code logOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder httpLogOptions(HttpLogOptions logOptions) {\n+        this.logOptions = Objects.requireNonNull(logOptions, \"'logOptions' cannot be null.\");\n+        return this;\n+    }\n+\n+    /**\n+     * Adds a pipeline policy to apply on each request sent. The policy will be added after the retry policy. If\n+     * the method is called multiple times, all policies will be added and their order preserved.\n+     *\n+     * @param pipelinePolicy a pipeline policy\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code pipelinePolicy} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder addPolicy(HttpPipelinePolicy pipelinePolicy) {\n+        this.additionalPolicies.add(Objects.requireNonNull(pipelinePolicy, \"'pipelinePolicy' cannot be null\"));\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the request retry options for all the requests made through the client. By default, the pipeline will\n+     * use an exponential backoff retry value as detailed in {@link RetryPolicy#RetryPolicy()}.\n+     *\n+     * @param retryPolicy {@link RetryPolicy}.\n+     * @return the updated DigitalTwinsClientBuilder instance for fluent building.\n+     * @throws NullPointerException If {@code retryOptions} is {@code null}.\n+     */\n+    public DigitalTwinsClientBuilder retryOptions(RetryPolicy retryPolicy) {\n+        this.retryPolicy = Objects.requireNonNull(retryPolicy, \"'retryPolicy' cannot be null.\");", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczNjgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470736829", "bodyText": "I will make code changes after the first round of team review, I will make a note of this comment.", "author": "azabbasi", "createdAt": "2020-08-14T16:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MDEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MTExOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470341118", "bodyText": "This may need to be LIVE, can't remember if what we check is case sensitive or not.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:47:26Z", "path": "sdk/digitaltwins/tests.yml", "diffHunk": "@@ -0,0 +1,11 @@\n+trigger: none\n+\n+extends:\n+  template: ../../eng/pipelines/templates/jobs/archetype-sdk-tests.yml\n+  parameters:\n+    ServiceDirectory: digitaltwins\n+    Location: westus2\n+    SubscriptionConfiguration: $(sub-config-azure-cloud-test-resources-preview)\n+    EnvVars:\n+      # Runs live tests.\n+      AZURE_IOT_TEST_MODE: Live", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczMzUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470733534", "bodyText": "We have it lower cased in the .NET repo and it works as expected.", "author": "azabbasi", "createdAt": "2020-08-14T16:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MTExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0Mjk4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470342986", "bodyText": "You'll probably want to these triggers as well.\n- feature/*\n- hotfix/*\n- release/*\n\nThis will ensure that feature branches, release, and hotfix branches will run CI as well. This matches our goal of how to handle branching management as well.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:50:14Z", "path": "sdk/digitaltwins/ci.yml", "diffHunk": "@@ -0,0 +1,30 @@\n+# DO NOT EDIT THIS FILE\n+# This file is generated automatically and any changes will be lost.\n+trigger:\n+  branches:\n+    include:\n+      - master", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MzQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470343486", "bodyText": "This groupId is different than what is in the POM.xml, not exactly sure how that would change build but they should match.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:50:58Z", "path": "sdk/digitaltwins/ci.yml", "diffHunk": "@@ -0,0 +1,30 @@\n+# DO NOT EDIT THIS FILE\n+# This file is generated automatically and any changes will be lost.\n+trigger:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+pr:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+extends:\n+  template: ../../eng/pipelines/templates/stages/archetype-sdk-client.yml\n+  parameters:\n+    ServiceDirectory: digitaltwins\n+    Artifacts:\n+      - name: azure-digitaltwins\n+        groupId: com.azure", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0Mzk2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470343963", "bodyText": "This doesn't match the artifactId of the POM.xml, should also match.", "author": "alzimmermsft", "createdAt": "2020-08-14T00:51:39Z", "path": "sdk/digitaltwins/ci.yml", "diffHunk": "@@ -0,0 +1,30 @@\n+# DO NOT EDIT THIS FILE\n+# This file is generated automatically and any changes will be lost.\n+trigger:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+pr:\n+  branches:\n+    include:\n+      - master\n+  paths:\n+    include:\n+      - sdk/digitaltwins/\n+    exclude:\n+      - sdk/digitaltwins/mgmt-v2020_03_01_preview\n+\n+extends:\n+  template: ../../eng/pipelines/templates/stages/archetype-sdk-client.yml\n+  parameters:\n+    ServiceDirectory: digitaltwins\n+    Artifacts:\n+      - name: azure-digitaltwins", "originalCommit": "7156871b8c647e5ef02d676d6de96043a0b5e222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "206641014c7390dff27b17b1eb2d93ad880c82cb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/206641014c7390dff27b17b1eb2d93ad880c82cb", "message": "address Alan's comments.", "committedDate": "2020-08-14T16:42:56Z", "type": "commit"}, {"oid": "20939ab8bd0bed5a524bb60195d3b33101a67046", "url": "https://github.com/Azure/azure-sdk-for-java/commit/20939ab8bd0bed5a524bb60195d3b33101a67046", "message": "Address more of Alan's comments.", "committedDate": "2020-08-14T16:55:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1ODQ4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470758481", "bodyText": "Is there no global variable for package versions in the repo for java? Something like the C# global nuget versions file.", "author": "vinagesh", "createdAt": "2020-08-14T17:28:22Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/pom.xml", "diffHunk": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-client-sdk-parent</artifactId>\n+    <version>1.7.0</version> <!-- {x-version-update;com.azure:azure-client-sdk-parent;current} -->\n+    <relativePath>../../parents/azure-client-sdk-parent</relativePath>\n+  </parent>\n+\n+    <groupId>com.azure</groupId>\n+    <artifactId>azure-digitaltwins-core</artifactId>\n+    <version>1.0.0-beta.1</version><!-- {x-version-update;com.azure.digitaltwins.core:azure-digitaltwins-core;current} -->\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-core</artifactId>\n+      <version>1.6.0</version> <!-- {x-version-update;com.azure:azure-core;dependency} -->\n+    </dependency>\n+    <dependency>\n+      <!--Azure identity library has useful classes for authenticating against ADT, but isn't required in the client library. It is used in samples/tests-->\n+      <groupId>com.azure</groupId>\n+      <artifactId>azure-identity</artifactId>\n+      <version>1.0.6</version> <!-- {x-version-update;com.azure:azure-identity-service;dependency} -->", "originalCommit": "20939ab8bd0bed5a524bb60195d3b33101a67046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0ODAyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14089#discussion_r470848025", "bodyText": "There is not, they use these code comments for global package updates.", "author": "azabbasi", "createdAt": "2020-08-14T20:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1ODQ4MQ=="}], "type": "inlineReview"}]}