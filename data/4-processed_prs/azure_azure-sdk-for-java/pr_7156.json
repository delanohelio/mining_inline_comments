{"pr_number": 7156, "pr_title": "Adding retry context to diagnostics and moving to JSON format", "pr_createdAt": "2020-01-06T21:19:26Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7156", "timeline": [{"oid": "7e676dddf134fcb45b73988bfae52b1f4f72c52e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e676dddf134fcb45b73988bfae52b1f4f72c52e", "message": "Adding system information and gateway diagnostics", "committedDate": "2019-11-18T22:19:11Z", "type": "commit"}, {"oid": "51052e6b629b2b1e4b527b21070092a1650e850b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/51052e6b629b2b1e4b527b21070092a1650e850b", "message": "Adding more data for gateway", "committedDate": "2019-11-18T23:19:10Z", "type": "commit"}, {"oid": "188b588aa7cc7db9a145fa81f4c8efea72d0338f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/188b588aa7cc7db9a145fa81f4c8efea72d0338f", "message": "reverting redundant change", "committedDate": "2019-11-19T15:12:04Z", "type": "commit"}, {"oid": "eff99aa2e28e2c51f2269fd166cbd0661e91ebd3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eff99aa2e28e2c51f2269fd166cbd0661e91ebd3", "message": "renaming variable name", "committedDate": "2019-11-19T15:34:51Z", "type": "commit"}, {"oid": "583c65244ede23f9c2355e5cbd497a8536587fb3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/583c65244ede23f9c2355e5cbd497a8536587fb3", "message": "resolving comments", "committedDate": "2019-11-19T19:27:55Z", "type": "commit"}, {"oid": "4b2c53da7f82fd428c831779049ddc678d26ee81", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4b2c53da7f82fd428c831779049ddc678d26ee81", "message": "Merge branch 'feature/cosmos/v4' into users/nakumar/systemInformationInDiagnostics", "committedDate": "2019-11-22T19:56:29Z", "type": "commit"}, {"oid": "df9949edd4eaaa734bb9ae7d620d22a157346542", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df9949edd4eaaa734bb9ae7d620d22a157346542", "message": "converting diagnostics to json", "committedDate": "2019-11-25T22:41:27Z", "type": "commit"}, {"oid": "de0d0f25314db2339c7af87923e9e792c661c5dc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/de0d0f25314db2339c7af87923e9e792c661c5dc", "message": "creating OperatingSystemMXBean during class initialization", "committedDate": "2019-11-25T23:36:37Z", "type": "commit"}, {"oid": "bfbc18503ea0db0228f4d92ce84a9e88186c7286", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfbc18503ea0db0228f4d92ce84a9e88186c7286", "message": "build fix", "committedDate": "2019-11-26T20:23:40Z", "type": "commit"}, {"oid": "a6434d54740b190d069f2e64f0d06624575b8a03", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6434d54740b190d069f2e64f0d06624575b8a03", "message": "Merge branch 'feature/cosmos/v4' into users/nakumar/systemInformationInDiagnostics", "committedDate": "2019-12-03T00:26:05Z", "type": "commit"}, {"oid": "5c1a5b4e70965e9c8725b8409a0d4e345e75a680", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c1a5b4e70965e9c8725b8409a0d4e345e75a680", "message": "merging and resolving comment", "committedDate": "2019-12-03T00:37:51Z", "type": "commit"}, {"oid": "d297b789af54766960ce413945270ede6f6fbd02", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d297b789af54766960ce413945270ede6f6fbd02", "message": "Adding system information and gateway diagnostics", "committedDate": "2019-12-07T00:42:38Z", "type": "commit"}, {"oid": "18bf691cffd4d08b30dae88a2a5991dcbb221370", "url": "https://github.com/Azure/azure-sdk-for-java/commit/18bf691cffd4d08b30dae88a2a5991dcbb221370", "message": "Adding more data for gateway", "committedDate": "2019-12-07T00:42:38Z", "type": "commit"}, {"oid": "a6ae4bfdc147cb199d44c94cf1d75236617de70b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6ae4bfdc147cb199d44c94cf1d75236617de70b", "message": "reverting redundant change", "committedDate": "2019-12-07T00:42:39Z", "type": "commit"}, {"oid": "269c55ac25f21b05c95f136a0825abd18c63741b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/269c55ac25f21b05c95f136a0825abd18c63741b", "message": "renaming variable name", "committedDate": "2019-12-07T00:42:39Z", "type": "commit"}, {"oid": "7931167b9eaf8340254b362d789bf211e8146b9d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7931167b9eaf8340254b362d789bf211e8146b9d", "message": "resolving comments", "committedDate": "2019-12-07T00:42:39Z", "type": "commit"}, {"oid": "5e10545c260bdf6dcf700e5d9d28ab0608cd40ce", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e10545c260bdf6dcf700e5d9d28ab0608cd40ce", "message": "creating OperatingSystemMXBean during class initialization", "committedDate": "2019-12-07T00:42:39Z", "type": "commit"}, {"oid": "dbc6aabfff25658f2d2e5e097a929c23b2bf49cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbc6aabfff25658f2d2e5e097a929c23b2bf49cf", "message": "merging and resolving comment", "committedDate": "2019-12-07T00:42:39Z", "type": "commit"}, {"oid": "28d91257c5cf1cb008e9792ae8321ad716904108", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28d91257c5cf1cb008e9792ae8321ad716904108", "message": "resolving comments", "committedDate": "2019-12-07T00:56:57Z", "type": "commit"}, {"oid": "d9422be01337429f2e32aa32926f37528cf83c8d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d9422be01337429f2e32aa32926f37528cf83c8d", "message": "merge and resolving comment", "committedDate": "2019-12-07T01:00:57Z", "type": "commit"}, {"oid": "e00c9fb86109468f4e03de9b4890240a8f6055a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e00c9fb86109468f4e03de9b4890240a8f6055a8", "message": "Merge branch 'feature/cosmos/v4' into users/nakumar/systemInformationInDiagnostics", "committedDate": "2019-12-07T01:35:42Z", "type": "commit"}, {"oid": "e2e612fe474de3ac05e2b05162e634b612691bb4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2e612fe474de3ac05e2b05162e634b612691bb4", "message": "mearging with latest feature branch", "committedDate": "2019-12-11T17:52:24Z", "type": "commit"}, {"oid": "36236a08a38655d91f1529b584da1e959b4ab787", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36236a08a38655d91f1529b584da1e959b4ab787", "message": "merging with parent", "committedDate": "2019-12-11T17:57:23Z", "type": "commit"}, {"oid": "ddf919574a6215cea06a7dac6d86d81843d14dab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ddf919574a6215cea06a7dac6d86d81843d14dab", "message": "adding retry context to diagnostics", "committedDate": "2019-12-13T22:14:40Z", "type": "commit"}, {"oid": "c722c84e21aa4f20f9fecf4bad08d55cc47e9301", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c722c84e21aa4f20f9fecf4bad08d55cc47e9301", "message": "merging with feature v4 branch", "committedDate": "2020-01-06T18:45:24Z", "type": "commit"}, {"oid": "21c7c070f746e6303b9ac2784020d24e827d6407", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21c7c070f746e6303b9ac2784020d24e827d6407", "message": "fixing test cases", "committedDate": "2020-01-06T19:31:09Z", "type": "commit"}, {"oid": "eec380fea9d1d43ef481d5de5b69ce0118be47cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eec380fea9d1d43ef481d5de5b69ce0118be47cf", "message": "adding status and substatus code in retry context", "committedDate": "2020-01-06T21:03:53Z", "type": "commit"}, {"oid": "49f9a9b24d178e03a695f5984411af18c689874f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49f9a9b24d178e03a695f5984411af18c689874f", "message": "reverting unintentional change", "committedDate": "2020-01-06T21:14:58Z", "type": "commit"}, {"oid": "fd2432ab1b80c1d11cd217f3d0a475ce81b3f989", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd2432ab1b80c1d11cd217f3d0a475ce81b3f989", "message": "removing space", "committedDate": "2020-01-06T21:17:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4OTQ0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r363489442", "bodyText": "We could remove IRetryPolicy interface altogether and just use this abstract class as RetryPolicy", "author": "simplynaveen20", "createdAt": "2020-01-06T21:23:15Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryPolicyWithDiagnostics.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public abstract class RetryPolicyWithDiagnostics implements IRetryPolicy{", "originalCommit": "fd2432ab1b80c1d11cd217f3d0a475ce81b3f989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTI2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366379263", "bodyText": "Thoughts ?", "author": "simplynaveen20", "createdAt": "2020-01-14T14:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4OTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NzI1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366547253", "bodyText": "This provides default implementations for all APIs of IRetryPolicy.\nIf we don't plan to use IRetryPolicy altogether, then its fine, but I would suggest keeping it in the code, as it doesn't do any harm, and opens possibilities in future for more development on this if needed.", "author": "kushagraThapar", "createdAt": "2020-01-14T20:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4OTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg5MDQ3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366890478", "bodyText": "Yea it doesn't do any harm , will keep it as it is", "author": "simplynaveen20", "createdAt": "2020-01-15T14:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4OTQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5MDUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r363490532", "bodyText": "Did manual testing , also planning to add mock tests to verify all the property of RetryContext in both connection mode and on various operations.", "author": "simplynaveen20", "createdAt": "2020-01-06T21:26:07Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RetryContext.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import java.util.List;\n+\n+public class RetryContext {", "originalCommit": "fd2432ab1b80c1d11cd217f3d0a475ce81b3f989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzNzgzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366337832", "bodyText": "Added the mock tests", "author": "simplynaveen20", "createdAt": "2020-01-14T13:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5MDUzMg=="}], "type": "inlineReview"}, {"oid": "c63b91d51baad0d503c9d46f5f4975c2b6599136", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c63b91d51baad0d503c9d46f5f4975c2b6599136", "message": "adding mock tests", "committedDate": "2020-01-13T19:46:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNTY2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366005665", "bodyText": "ObjectMapper instantiation is very expensive, and this is instantiated per request.", "author": "moderakh", "createdAt": "2020-01-13T20:13:26Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -39,20 +44,25 @@\n         DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm:ss\" + \".SSS\").withLocale(Locale.US);\n     private final static OperatingSystemMXBean mbean = (com.sun.management.OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();\n \n-    private final ZonedDateTime requestStartTime;\n-    private ZonedDateTime requestEndTime;\n+    private final ObjectMapper objectMapper = new ObjectMapper();", "originalCommit": "c63b91d51baad0d503c9d46f5f4975c2b6599136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3NTMzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366375334", "bodyText": "Moved to static", "author": "simplynaveen20", "createdAt": "2020-01-14T14:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNTY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjYzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366006630", "bodyText": "toString() should not change the state of the object. This is somewhat an anti-pattern", "author": "moderakh", "createdAt": "2020-01-13T20:15:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -168,63 +183,25 @@ void recordAddressResolutionEnd(String identifier) {\n \n     @Override\n     public String toString() {\n-        StringBuilder stringBuilder = new StringBuilder();\n-\n         //  need to lock in case of concurrent operations. this should be extremely rare since toString()\n         //  should only be called at the end of request.\n         synchronized (this) {\n-\n-            //  first trace request start time, as well as total non-head/headfeed requests made.\n-            stringBuilder.append(\"RequestStartTime: \")\n-                .append(\"\\\"\").append(this.requestStartTime.format(RESPONSE_TIME_FORMATTER)).append(\"\\\"\")\n-                .append(\", \")\n-                .append(\"RequestEndTime: \")\n-                .append(\"\\\"\").append(this.requestEndTime.format(RESPONSE_TIME_FORMATTER)).append(\"\\\"\")\n-                .append(\", \")\n-                .append(\"Duration: \")\n-                .append(Duration.between(requestStartTime, requestEndTime).toMillis())\n-                .append(\" ms, \")\n-                .append(\"Connection Mode : \" + this.connectionMode.toString() + \", \")\n-                .append(\"NUMBER of regions attempted: \")\n-                .append(this.regionsContacted.isEmpty() ? 1 : this.regionsContacted.size())\n-                .append(System.lineSeparator());\n-\n-            //  take all responses here - this should be limited in number and each one contains relevant information.\n-            for (StoreResponseStatistics storeResponseStatistics : this.responseStatisticsList) {\n-                stringBuilder.append(storeResponseStatistics.toString()).append(System.lineSeparator());\n-            }\n-\n-            //  take all responses here - this should be limited in number and each one is important.\n-            for (AddressResolutionStatistics value : this.addressResolutionStatistics.values()) {\n-                stringBuilder.append(value.toString()).append(System.lineSeparator());\n-            }\n-\n+            requestLatency= getRequestLatency().toMillis();", "originalCommit": "c63b91d51baad0d503c9d46f5f4975c2b6599136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODUwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366378506", "bodyText": "Are we talking about supplementalResponseStatisticsList , where we chopping off the top 10 items? I am aware of it , did it on purpose , no logic issue in this particular case, however if we want to avoid it , then we need to come up with probably another list , which will add overhead. Lets discuss offline for better solution", "author": "simplynaveen20", "createdAt": "2020-01-14T14:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4OTY5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r369589695", "bodyText": "Moved logic out of toString() of clientSideRequestDiagnostics , and using separate serializer", "author": "simplynaveen20", "createdAt": "2020-01-22T14:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjkzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366006939", "bodyText": "failure should be logged using logger", "author": "moderakh", "createdAt": "2020-01-13T20:16:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -168,63 +183,25 @@ void recordAddressResolutionEnd(String identifier) {\n \n     @Override\n     public String toString() {\n-        StringBuilder stringBuilder = new StringBuilder();\n-\n         //  need to lock in case of concurrent operations. this should be extremely rare since toString()\n         //  should only be called at the end of request.\n         synchronized (this) {\n-\n-            //  first trace request start time, as well as total non-head/headfeed requests made.\n-            stringBuilder.append(\"RequestStartTime: \")\n-                .append(\"\\\"\").append(this.requestStartTime.format(RESPONSE_TIME_FORMATTER)).append(\"\\\"\")\n-                .append(\", \")\n-                .append(\"RequestEndTime: \")\n-                .append(\"\\\"\").append(this.requestEndTime.format(RESPONSE_TIME_FORMATTER)).append(\"\\\"\")\n-                .append(\", \")\n-                .append(\"Duration: \")\n-                .append(Duration.between(requestStartTime, requestEndTime).toMillis())\n-                .append(\" ms, \")\n-                .append(\"Connection Mode : \" + this.connectionMode.toString() + \", \")\n-                .append(\"NUMBER of regions attempted: \")\n-                .append(this.regionsContacted.isEmpty() ? 1 : this.regionsContacted.size())\n-                .append(System.lineSeparator());\n-\n-            //  take all responses here - this should be limited in number and each one contains relevant information.\n-            for (StoreResponseStatistics storeResponseStatistics : this.responseStatisticsList) {\n-                stringBuilder.append(storeResponseStatistics.toString()).append(System.lineSeparator());\n-            }\n-\n-            //  take all responses here - this should be limited in number and each one is important.\n-            for (AddressResolutionStatistics value : this.addressResolutionStatistics.values()) {\n-                stringBuilder.append(value.toString()).append(System.lineSeparator());\n-            }\n-\n+            requestLatency= getRequestLatency().toMillis();\n             //  only take last 10 responses from this list - this has potential of having large number of entries.\n             //  since this is for establishing consistency, we can make do with the last responses to paint a\n             //  meaningful picture.\n             int supplementalResponseStatisticsListCount = this.supplementalResponseStatisticsList.size();\n             int initialIndex =\n                 Math.max(supplementalResponseStatisticsListCount - MAX_SUPPLEMENTAL_REQUESTS_FOR_TO_STRING, 0);\n             if (initialIndex != 0) {\n-                stringBuilder.append(\"  -- Displaying only the last \")\n-                    .append(MAX_SUPPLEMENTAL_REQUESTS_FOR_TO_STRING)\n-                    .append(\" head/headfeed requests. Total head/headfeed requests: \")\n-                    .append(supplementalResponseStatisticsListCount);\n+                this.supplementalResponseStatisticsList.removeAll(this.supplementalResponseStatisticsList.subList(0, initialIndex));\n             }\n-            for (int i = initialIndex; i < supplementalResponseStatisticsListCount; i++) {\n-                stringBuilder.append(this.supplementalResponseStatisticsList.get(i).toString())\n-                    .append(System.lineSeparator());\n+            try {\n+                printSystemInformation();\n+                return objectMapper.writeValueAsString(this);\n+            } catch (JsonProcessingException e) {\n+                e.printStackTrace();", "originalCommit": "c63b91d51baad0d503c9d46f5f4975c2b6599136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366378591", "bodyText": "done", "author": "simplynaveen20", "createdAt": "2020-01-14T14:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwODYwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366008607", "bodyText": "please note that shouldRetry() is async and some other methods you added are not async. I don't see a specific issue here, but just please be cautious when mixing these sync vs async methods.", "author": "moderakh", "createdAt": "2020-01-13T20:20:46Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/IRetryPolicy.java", "diffHunk": "@@ -25,6 +26,20 @@\n     Mono<ShouldRetryResult> shouldRetry(Exception e);\n \n \n+    int getRetryCount();\n+\n+    void incrementRetry();\n+\n+    void captureStartTimeIfNotSet();\n+\n+    void updateEndTime();\n+\n+    Duration getRetryLatency();\n+\n+    void addStatusAndSubStatusCode(int statusCode, int subStatusCode);\n+\n+    List<int[]> getStatusAndSubStatusCodes();", "originalCommit": "c63b91d51baad0d503c9d46f5f4975c2b6599136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTA0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366379049", "bodyText": "Point noted for future reference.", "author": "simplynaveen20", "createdAt": "2020-01-14T14:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwODYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366011132", "bodyText": "please use static import for assertThat so that similar to other tests instead of Assertions.assertThat you do assertThat here and in other tests.", "author": "moderakh", "createdAt": "2020-01-13T20:27:05Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/RetryContextOnDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ConnectionPolicy;\n+import com.azure.cosmos.ConsistencyLevel;\n+import com.azure.cosmos.CosmosClientException;\n+import com.azure.cosmos.PartitionKey;\n+import com.azure.cosmos.implementation.directconnectivity.StoreResponse;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import io.reactivex.subscribers.TestSubscriber;\n+import org.assertj.core.api.Assertions;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+public class RetryContextOnDiagnosticTest extends TestSuiteBase {\n+    private final static String exceptionText = \"TestException\";\n+    private final static String responseText = \"TestResponse\";\n+    private final static String itemSelfLink = \"dbs/TestDB/colls/TestColl/docs/TestDoc\";\n+    private final static String containerSelfLink = \"dbs/TestDB/colls/TestColl\";\n+\n+    private IRetryPolicy retryPolicy;\n+    private Callable<Mono<StoreResponse>> callbackMethod;\n+    private Function<Quadruple<Boolean, Boolean, Duration, Integer>, Mono<StoreResponse>> parameterizedCallbackMethod;\n+    private Function<Quadruple<Boolean, Boolean, Duration, Integer>, Mono<StoreResponse>> inBackoffAlternateCallbackMethod;\n+    private RxDocumentServiceRequest serviceRequest;\n+\n+    @BeforeClass(groups = \"unit\")\n+    public void RetryContextTest() {\n+        callbackMethod = Mockito.mock(Callable.class);\n+        parameterizedCallbackMethod = Mockito.mock(Function.class);\n+        inBackoffAlternateCallbackMethod = Mockito.mock(Function.class);\n+    }\n+\n+    @Test(groups = {\"simple\"})\n+    public void backoffRetryUtilityExecuteRetryTest() throws Exception {\n+        serviceRequest = RxDocumentServiceRequest.create(OperationType.Read, ResourceType.Document);\n+        retryPolicy = new TestRetryPolicy();\n+        CosmosClientException exception = new CosmosClientException(410, exceptionText);\n+        Mockito.when(callbackMethod.call()).thenThrow(exception, exception, exception, exception, exception)\n+            .thenReturn(Mono.just(new StoreResponse(200, new ArrayList<>(), responseText)));\n+        Mono<StoreResponse> monoResponse = BackoffRetryUtility.executeRetry(callbackMethod, retryPolicy);\n+        StoreResponse response = validateSuccess(monoResponse);\n+\n+        Assertions.assertThat(response.getResponseBody()).isEqualTo(responseText);\n+        Assertions.assertThat(retryPolicy.getRetryCount()).isEqualTo(5);\n+        Assertions.assertThat(retryPolicy.getStatusAndSubStatusCodes().size()).isEqualTo(retryPolicy.getRetryCount());\n+    }\n+\n+    @Test(groups = {\"simple\"})\n+    public void backoffRetryUtilityExecuteRetryWithFailureTest() throws Exception {\n+        serviceRequest = RxDocumentServiceRequest.create(OperationType.Read, ResourceType.Document);\n+        retryPolicy = new TestRetryPolicy();\n+        CosmosClientException exception = new CosmosClientException(410, exceptionText);\n+        Mockito.when(callbackMethod.call()).thenThrow(exception);\n+        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+        executor.schedule(() -> {\n+            ((TestRetryPolicy) retryPolicy).noRetry = true;\n+        }, 10, TimeUnit.SECONDS);\n+        Mono<StoreResponse> monoResponse = BackoffRetryUtility.executeRetry(callbackMethod, retryPolicy);\n+        validateFailure(monoResponse);\n+\n+        Assertions.assertThat(retryPolicy.getRetryCount()).isGreaterThanOrEqualTo(5);", "originalCommit": "c63b91d51baad0d503c9d46f5f4975c2b6599136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODY1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r366378652", "bodyText": "Done", "author": "simplynaveen20", "createdAt": "2020-01-14T14:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTEzMg=="}], "type": "inlineReview"}, {"oid": "56802f665e6b76f7bdce3a8781e2d51377b6e95d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/56802f665e6b76f7bdce3a8781e2d51377b6e95d", "message": "resolving comments", "committedDate": "2020-01-14T14:39:47Z", "type": "commit"}, {"oid": "50e42cbe287709ae5155308b19c52df6351bf2b5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/50e42cbe287709ae5155308b19c52df6351bf2b5", "message": "resolving merge conflict", "committedDate": "2020-01-14T14:54:46Z", "type": "commit"}, {"oid": "90e453cbfae6809972d36d2d0cc6f8b0c8f4f0df", "url": "https://github.com/Azure/azure-sdk-for-java/commit/90e453cbfae6809972d36d2d0cc6f8b0c8f4f0df", "message": "moving test file to other package", "committedDate": "2020-01-14T15:37:05Z", "type": "commit"}, {"oid": "070ab49dcdcf41d9b786c02bfea31ed275d0e50a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/070ab49dcdcf41d9b786c02bfea31ed275d0e50a", "message": "moving test class", "committedDate": "2020-01-14T16:05:09Z", "type": "commit"}, {"oid": "8c0303f21158c61f2d5a41e92f5890e10f803113", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c0303f21158c61f2d5a41e92f5890e10f803113", "message": "moving json writer logic out of toString of lientsiderequest diagnostics", "committedDate": "2020-01-22T14:24:43Z", "type": "commit"}, {"oid": "123a907d14c5ec40e1a078e57bf7b95132873532", "url": "https://github.com/Azure/azure-sdk-for-java/commit/123a907d14c5ec40e1a078e57bf7b95132873532", "message": "resolving merge conflicts", "committedDate": "2020-01-22T15:05:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNjg2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r369726863", "bodyText": "usually errors are logged with the following pattern\nlogger.error(\"Error while parsing diagnostics\", e)\n\nany reason we are doing something else?", "author": "moderakh", "createdAt": "2020-01-22T18:25:39Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosResponseDiagnostics.java", "diffHunk": "@@ -31,7 +38,12 @@ CosmosResponseDiagnostics clientSideRequestStatistics(ClientSideRequestStatistic\n      */\n     @Override\n     public String toString() {\n-        return this.clientSideRequestStatistics.toString();\n+        try {\n+            return objectMapper.writeValueAsString(this.clientSideRequestStatistics);\n+        }catch (JsonProcessingException e) {\n+            logger.error(\"Error while parsing diagnostics \" + e.getOriginalMessage());", "originalCommit": "123a907d14c5ec40e1a078e57bf7b95132873532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczOTgyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r369739820", "bodyText": "no specific reason , just trying to avoid priting whole error stack . I will move to logger.error(\"Error while parsing diagnostics\", e) in next iteration", "author": "simplynaveen20", "createdAt": "2020-01-22T18:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyNjg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyODg5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r369728894", "bodyText": "same question which I had raised offline.\nI see that you have different way of capturing retry info in the direct mode, however here on the outer surface of the SDK we are again capturing the retry info, why do we need to capture the retry info in two different places?\nis this only applicable to GW mode if so it should be in GatewayStoreModel. no?\nsame for all other HttpMethods", "author": "moderakh", "createdAt": "2020-01-22T18:29:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -658,21 +657,31 @@ private String parentResourceLinkToQueryLink(String parentResouceLink, ResourceT\n                 retryPolicyInstance.onBeforeSendRequest(request);\n             }\n \n-            return this.delete(request).map(response -> toResourceResponse(response, DocumentCollection.class));\n+            return this.delete(request, retryPolicyInstance).map(response -> toResourceResponse(response, DocumentCollection.class));\n \n         } catch (Exception e) {\n             logger.debug(\"Failure in deleting a collection, due to [{}]\", e.getMessage(), e);\n             return Flux.error(e);\n         }\n     }\n \n-    private Flux<RxDocumentServiceResponse> delete(RxDocumentServiceRequest request) {\n+    private Flux<RxDocumentServiceResponse> delete(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n         populateHeaders(request, HttpConstants.HttpMethods.DELETE);\n+        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+            documentClientRetryPolicy.updateEndTime();\n+            request.requestContext.updateRetryContext(documentClientRetryPolicy);\n+        }\n+\n         return getStoreProxy(request).processMessage(request);\n     }\n \n-    private Flux<RxDocumentServiceResponse> read(RxDocumentServiceRequest request) {\n+    private Flux<RxDocumentServiceResponse> read(RxDocumentServiceRequest request, DocumentClientRetryPolicy documentClientRetryPolicy) {\n         populateHeaders(request, HttpConstants.HttpMethods.GET);\n+        if(request.requestContext != null && documentClientRetryPolicy.getRetryCount() > 0) {\n+            documentClientRetryPolicy.updateEndTime();\n+            request.requestContext.updateRetryContext(documentClientRetryPolicy);", "originalCommit": "123a907d14c5ec40e1a078e57bf7b95132873532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTk0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r369741948", "bodyText": "Yes above is applicable to GW mode , and retry in gateway happens via BackoffRetry.executeRetry and at that place we dont have the access to DocumentServiceRequestContext", "author": "simplynaveen20", "createdAt": "2020-01-22T18:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyODg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwOTU1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7156#discussion_r370409554", "bodyText": "Discussed offline -\n\"Lets take the example of ReadDocument()\nIn Gateway mode ReadDocument() will keep calling readDocumentInternal() based on BackOffRetryUtility.executeRetry() ,and each retry will call the readDocumentInternal() again and update\nrequest.requestContext.updateRetryContext(documentClientRetryPolicy) everytime.\nHowever in Direct mode  ReadDocument() will call readDocumentInternal(), and in case of any  direct exception (Gone) instead of call readDocumentInternal() via  BackOffRetryUtility.executeRetry(), replicate resource client will create it own retry policy and consume failure/success and response will eventually be send via StoreClient to ReadDocument , therefore the code\nrequest.requestContext.updateRetryContext(documentClientRetryPolicy) in read() in RxDocumentClientImpl will never be executed again.\"", "author": "simplynaveen20", "createdAt": "2020-01-23T23:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyODg5NA=="}], "type": "inlineReview"}, {"oid": "bc859aa53d3b3f253481fd63bbac671cce09eedc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc859aa53d3b3f253481fd63bbac671cce09eedc", "message": "inculding last success call time in retry duration", "committedDate": "2020-01-23T23:28:13Z", "type": "commit"}, {"oid": "3b84054b4501bc2015946dd4a09fbeeeac20617a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b84054b4501bc2015946dd4a09fbeeeac20617a", "message": "logging whole exception instead of message", "committedDate": "2020-01-23T23:30:20Z", "type": "commit"}, {"oid": "a3dd762f73a21f15d1005771852b0b54091457fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a3dd762f73a21f15d1005771852b0b54091457fa", "message": "fixing test failure", "committedDate": "2020-01-24T16:16:29Z", "type": "commit"}, {"oid": "914a64481d4e11cc79c0927e484f5633b7ae4fca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/914a64481d4e11cc79c0927e484f5633b7ae4fca", "message": "covering mix case of 410s and 429s", "committedDate": "2020-01-24T23:17:37Z", "type": "commit"}, {"oid": "43aa48572ce224a0ccca908867a2125ebd812ad7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43aa48572ce224a0ccca908867a2125ebd812ad7", "message": "fixing test case", "committedDate": "2020-01-25T00:26:03Z", "type": "commit"}, {"oid": "72a9ed312b815844558034cf66b8e2da5444fdd6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/72a9ed312b815844558034cf66b8e2da5444fdd6", "message": "fixing test case", "committedDate": "2020-01-25T00:36:09Z", "type": "commit"}, {"oid": "efd75445db99c4ea60ac13b7f6d614cb3fe8e00c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/efd75445db99c4ea60ac13b7f6d614cb3fe8e00c", "message": "optimizing number of interface methods", "committedDate": "2020-01-27T14:26:44Z", "type": "commit"}, {"oid": "c382cbb4492313c3e6e113f2d1f115d3e8d07383", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c382cbb4492313c3e6e113f2d1f115d3e8d07383", "message": "fixing test case", "committedDate": "2020-01-27T15:31:46Z", "type": "commit"}, {"oid": "1442c58bf2433209a4017a46e42c2d974f12a08f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1442c58bf2433209a4017a46e42c2d974f12a08f", "message": "fixing test case", "committedDate": "2020-01-27T16:37:30Z", "type": "commit"}]}