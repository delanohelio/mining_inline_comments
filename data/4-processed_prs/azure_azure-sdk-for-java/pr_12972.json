{"pr_number": 12972, "pr_title": "Readme", "pr_createdAt": "2020-07-09T18:11:26Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12972", "timeline": [{"oid": "e3629c23090f76a5a48f70400989b1fc7604a00b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e3629c23090f76a5a48f70400989b1fc7604a00b", "message": "Readme", "committedDate": "2020-07-09T18:10:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMjk5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12972#discussion_r452402994", "bodyText": "samples link goes to 404", "author": "gapra-msft", "createdAt": "2020-07-09T18:15:14Z", "path": "sdk/storage/azure-storage-blob-nio/README.md", "diffHunk": "@@ -1,5 +1,6 @@\n-# Azure Storage Java NIO Blob plugin library for Java\n-## This README is not yet updated for this project and is a skeleton copied from blobs\n+# Azure Storage Blob NIO FileSystemProvider\n+\n+This package allows you to interact with Azure Blob Storage through the standard Java NIO Filesystem APIs.\n \n [Source code][source] | [API reference documentation][docs] | [REST API documentation][rest_docs] | [Product documentation][product_docs] | [Samples][samples]", "originalCommit": "e3629c23090f76a5a48f70400989b1fc7604a00b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNDc2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12972#discussion_r452404769", "bodyText": "I'm debating whether I should add samples or if it's redundant because once you load the file system provider, it's the same thing as just using normal file apis. Thoughts? @alzimmermsft @kasobol-msft", "author": "rickle-msft", "createdAt": "2020-07-09T18:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMjk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMzA5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12972#discussion_r452413096", "bodyText": "Does NIO have some samples we could link to?", "author": "gapra-msft", "createdAt": "2020-07-09T18:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMjk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODQ2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12972#discussion_r452418467", "bodyText": "I think probably the oracle tutorials are sufficient. https://docs.oracle.com/javase/tutorial/essential/io/fileio.html", "author": "rickle-msft", "createdAt": "2020-07-09T18:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwMjk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNjcxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12972#discussion_r452406712", "bodyText": "There should be a way to make a file and add all these snippets in it to catch any errors. Let me go find a PR where I did that", "author": "gapra-msft", "createdAt": "2020-07-09T18:21:48Z", "path": "sdk/storage/azure-storage-blob-nio/README.md", "diffHunk": "@@ -76,55 +77,174 @@ b. Alternatively, get the Account SAS Token from the Azure Portal.\n \n ##### **Shared Key Credential**\n \n-a. Use Account name and Account key. Account name is your Storage Account name.\n+Use Account name and Account key. Account name is your Storage Account name.\n \n 1. Go to your Storage Account\n 2. Select `Access keys` from the menu on the left\n 3. Under `key1`/`key2` copy the contents of the `Key` field\n \n-or\n+## Key concepts\n \n-b. Use the connection string.\n+NIO on top of Blob Storage is designed for:\n+\n+- Working with Blob Storage as though it were a local file system\n+- Random access reads on large blobs without downloading the entire blob\n+- Uploading full files as blobs \n+- Creating and navigating a directory structure within an account\n+- Reading and setting attributes on blobs\n+\n+## Design Notes\n+It is important to recognize that Azure Blob Storage is not a true FileSystem, nor is it the goal of this project to \n+force Azure Blob Storage to act like a full-fledged FileSystem. While providing FileSystem APIs on top of Azure Blob \n+Storage can offer convenience and ease of access in certain cases, trying to force the Storage service to work in \n+scenarios it is not designed for is bound to introduce performance and stability problems. \n+\n+To that end, this project will only offer APIs that can be sensibly and cleanly built on top of Azure Blob Storage APIs. \n+We recognize that this will leave some scenarios unsupported indefinitely, but we would rather offer a product that \n+works predictably and reliably in its well defined scenarios than eagerly support all possible scenarios at the expense \n+of quality. Even still, supporting some fundamentally required use cases, such as directories, can result in unexpected \n+behavior due to the difference between blob storage and a file system. The javadocs on each type and method should\n+therefore be read and understood for ways in which they may diverge from the standard specified by the JDK. \n+\n+Moreover, even from within a given application, it should be remembered that using a remote FileSystem introduces higher \n+latency. Because of this, particular care must be taken when managing concurrency. Race conditions are more likely to \n+manifest, network failures occur more frequently than disk failures, and other such distributed application scenarios \n+must be considered when working with this FileSystem. While the AzureFileSystem will ensure it takes appropriate steps \n+towards robustness and reliability, the application developer must also design around these failure scenarios and have \n+fallback and retry options available.\n+\n+The view of the FileSystem from within an instance of the JVM will be consistent, but the AzureFileSystem makes no \n+guarantees on behavior or state should other processes operate on the same data. The AzureFileSystem will assume that it \n+has exclusive access to the resources stored in Azure Blob Storage and will behave without regard for potential \n+interfering applications\n+\n+Finally, this implementation has currently chosen to always read/write directly to/from Azure Storage without a local \n+cache. Our team has determined that with the tradeoffs of complexity, correctness, safety, performance, debuggability, \n+etc. one option is not inherently better than the other and that this choice most directly addresses the current known\n+use cases for this project. While this has consequences for every API, of particular note is the limitations on writing\n+data. Data may only be written as an entire file (i.e. random IO or appends are not supported), and data is not \n+committed or available to be read until the write stream is closed. \n \n-1. Go to your Storage Account\n-2. Select `Access keys` from the menu on the left\n-3. Under `key1`/`key2` copy the contents of the `Connection string` field\n+## Examples\n \n-## Key concepts\n+The following sections provide several code snippets covering some of the most common Azure Storage Blob NIO tasks, including:\n \n-Blob Storage is designed for:\n+- [Create a `FileSystem`](#create-a-filesystem)\n+- [Create a directory](#create-a-directory)\n+- [Iterate over directory contents](#iterate-over-directory-contents)\n+- [Read a file](#read-a-file)\n+- [Write to a file](#write-to-a-file)\n+- [Copy a file](#copy-a-file)\n+- [Delete a file](#delete-a-file)\n+- [Read attributes on a file](#read-attributes-on-a-file)\n+- [Write attributes to a file](#write-attributes-to-a-file)\n \n-- Serving images or documents directly to a browser\n-- Storing files for distributed access\n-- Streaming video and audio\n-- Writing to log files\n-- Storing data for backup and restore, disaster recovery, and archiving\n-- Storing data for analysis by an on-premises or Azure-hosted service\n+### Create a `FileSystem`\n \n-## Examples\n+Create a `FileSystem` using the [`shared key`](#get-credentials) retrieved above.\n+\n+Note that you can further configure the file system using constants available in `AzureFileSystem`.\n+Please see the docs for `AzureFileSystemProvider` for a full explanation of initializing and configuring a filesystem\n+\n+```java", "originalCommit": "e3629c23090f76a5a48f70400989b1fc7604a00b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMjY4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12972#discussion_r452412687", "bodyText": "#7751", "author": "gapra-msft", "createdAt": "2020-07-09T18:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNjcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzMTYyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12972#discussion_r452431626", "bodyText": "nicely written", "author": "joshfree", "createdAt": "2020-07-09T19:08:54Z", "path": "sdk/storage/azure-storage-blob-nio/README.md", "diffHunk": "@@ -76,55 +77,174 @@ b. Alternatively, get the Account SAS Token from the Azure Portal.\n \n ##### **Shared Key Credential**\n \n-a. Use Account name and Account key. Account name is your Storage Account name.\n+Use Account name and Account key. Account name is your Storage Account name.\n \n 1. Go to your Storage Account\n 2. Select `Access keys` from the menu on the left\n 3. Under `key1`/`key2` copy the contents of the `Key` field\n \n-or\n+## Key concepts\n \n-b. Use the connection string.\n+NIO on top of Blob Storage is designed for:", "originalCommit": "e3629c23090f76a5a48f70400989b1fc7604a00b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53b5998fa2d687c1d595e714562a3e9a381762d9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/53b5998fa2d687c1d595e714562a3e9a381762d9", "message": "PR feedback", "committedDate": "2020-07-09T19:24:08Z", "type": "commit"}, {"oid": "5612c42c67648f3ca125420de9c2da101654ad31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5612c42c67648f3ca125420de9c2da101654ad31", "message": "updates", "committedDate": "2020-07-09T22:43:33Z", "type": "commit"}]}