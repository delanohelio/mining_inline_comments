{"pr_number": 8901, "pr_title": "Adding distinct support", "pr_createdAt": "2020-03-10T15:54:19Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8901", "timeline": [{"oid": "32014f1e4c4c970d34abc670f23ea5789db936a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32014f1e4c4c970d34abc670f23ea5789db936a8", "message": "Adding distinct query support without continuation token", "committedDate": "2020-03-09T23:29:24Z", "type": "commit"}, {"oid": "239d36c5630e81095484faf3f2a79b439e3fd392", "url": "https://github.com/Azure/azure-sdk-for-java/commit/239d36c5630e81095484faf3f2a79b439e3fd392", "message": "Refactoring", "committedDate": "2020-03-10T15:53:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTAzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390451036", "bodyText": "Java code style for enum. If the service sends the string value of these in the query plan you can utilize the pattern I added in the ConsistencyLevel", "author": "moderakh", "createdAt": "2020-03-10T16:36:04Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctQueryType.java", "diffHunk": "@@ -0,0 +1,12 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+public enum DistinctQueryType {\n+    // This means that the query does not have DISTINCT.\n+    None,", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDA1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391170059", "bodyText": "Thankyou. Changed to follow java code style", "author": "mbhaskar", "createdAt": "2020-03-11T18:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTUzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390451538", "bodyText": "ObjectMapper instantiation is expensive.\nyou should have a static ObjectMapper instead:\nOrderedDistinctMap.OBJECT_MAPPER", "author": "moderakh", "createdAt": "2020-03-10T16:36:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+public class OrderedDistinctMap extends DistinctMap {\n+    private final ObjectMapper mapper;\n+    private String lastHash;\n+\n+    public OrderedDistinctMap(String lastHash) {\n+        mapper = new ObjectMapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDE4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391170181", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-03-11T18:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTUzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MzAyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390453027", "bodyText": "ditto, ObjectMapper instantiation is expensive. we should use a static one. You can create here UnorderedDistinctMap.OBJECT_MAMMER", "author": "moderakh", "createdAt": "2020-03-10T16:39:01Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/UnorderedDistinctMap.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.HashSet;\n+\n+public class UnorderedDistinctMap extends DistinctMap {\n+    private final ObjectMapper mapper;\n+    private final HashSet<String> resultSet;\n+\n+    public UnorderedDistinctMap() {\n+        resultSet = new HashSet<>();\n+        mapper = new ObjectMapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDM2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391170364", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-03-11T18:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MzAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NDIxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390454214", "bodyText": "use logger please", "author": "moderakh", "createdAt": "2020-03-10T16:40:47Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DistinctQueryTests.java", "diffHunk": "@@ -0,0 +1,351 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosPagedFlux;\n+import com.azure.cosmos.implementation.CosmosItemProperties;\n+import com.azure.cosmos.implementation.FeedResponseListValidator;\n+import com.azure.cosmos.implementation.FeedResponseValidator;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.UnorderedDistinctMap;\n+import com.azure.cosmos.models.FeedOptions;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.models.JsonSerializable;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DistinctQueryTests extends TestSuiteBase {\n+    private final String FIELD = \"name\";\n+    private CosmosAsyncContainer createdCollection;\n+    private ArrayList<CosmosItemProperties> docs = new ArrayList<>();\n+\n+    private CosmosAsyncClient client;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public DistinctQueryTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    private static String getRandomName(Random rand) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(\"name_\" + rand.nextInt(100));\n+\n+        return stringBuilder.toString();\n+    }\n+\n+    private static City getRandomCity(Random rand) {\n+        int index = rand.nextInt(3);\n+        switch (index) {\n+            case 0:\n+                return City.LosAngeles;\n+            case 1:\n+                return City.NewYork;\n+            case 2:\n+                return City.Seattle;\n+        }\n+\n+        return City.LosAngeles;\n+    }\n+\n+    private static double getRandomIncome(Random rand) {\n+        return rand.nextDouble() * Double.MAX_VALUE;\n+    }\n+\n+    private static int getRandomAge(Random rand) {\n+        return rand.nextInt(100);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT, dataProvider = \"queryMetricsArgProvider\")\n+    public void queryDocuments(boolean qmEnabled) {\n+        String query = \"SELECT DISTINCT c.name from c\";\n+        FeedOptions options = new FeedOptions();\n+        options.setMaxItemCount(5);\n+        options.setPopulateQueryMetrics(qmEnabled);\n+        options.setMaxDegreeOfParallelism(2);\n+        CosmosPagedFlux<CosmosItemProperties> queryObservable = createdCollection.queryItems(query, options,\n+                                                                                             CosmosItemProperties.class);\n+        \n+        List<Object> nameList = docs.stream().map(d -> d.get(FIELD)).collect(Collectors.toList());\n+        List<Object> distinctNameList = nameList.stream().distinct().collect(Collectors.toList());\n+\n+        FeedResponseListValidator<CosmosItemProperties> validator =\n+            new FeedResponseListValidator.Builder<CosmosItemProperties>()\n+                .totalSize(distinctNameList.size())\n+                .allPagesSatisfy(new FeedResponseValidator.Builder<CosmosItemProperties>()\n+                                     .requestChargeGreaterThanOrEqualTo(1.0)\n+                                     .build())\n+                .hasValidQueryMetrics(qmEnabled)\n+                .build();\n+\n+        validateQuerySuccess(queryObservable.byPage(), validator, TIMEOUT);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void queryDistinctDocuments() {\n+\n+        List<String> queries = Arrays.asList(\n+            // basic distinct queries\n+            \"SELECT %s VALUE null\",\n+            \"SELECT %s VALUE false\",\n+            \"SELECT %s VALUE true\",\n+            \"SELECT %s VALUE 1\",\n+            \"SELECT %s VALUE 'a'\",\n+            \"SELECT %s VALUE [null, true, false, 1, 'a']\",\n+            \"SELECT %s false AS p\",\n+            \"SELECT %s 1 AS p\",\n+            \"SELECT %s 'a' AS p\",\n+\n+            \"SELECT %s VALUE null FROM c\",\n+            \"SELECT %s VALUE false FROM c\",\n+            \"SELECT %s VALUE 1 FROM c\",\n+            \"SELECT %s VALUE 'a' FROM c\",\n+            \"SELECT %s null AS p FROM c\",\n+            \"SELECT %s false AS p FROM c\",\n+            \"SELECT %s 1 AS p FROM c\",\n+            \"SELECT %s 'a' AS p FROM c\",\n+\n+            // number value distinct queries\n+            \"SELECT %s VALUE c.income from c\",\n+            \"SELECT %s VALUE c.age from c\",\n+            \"SELECT %s c.income, c.income AS income2 from c\",\n+            \"SELECT %s c.income, c.age from c\",\n+\n+            // string value distinct queries\n+            \"SELECT %s  c.name from c\",\n+            \"SELECT %s VALUE c.city from c\",\n+            \"SELECT %s VALUE c.partitionKey from c\",\n+            \"SELECT %s c.name, c.name AS name2 from c\",\n+            \"SELECT %s c.name, c.city from c\",\n+\n+            // array distinct queries\n+            \"SELECT %s c.children from c\",\n+            \"SELECT %s c.children, c.children AS children2 from c\",\n+\n+            // object value distinct queries\n+            \"SELECT %s VALUE c.pet from c\",\n+            \"SELECT %s c.pet, c.pet AS pet2 from c\",\n+\n+            // scalar expressions distinct query\n+            \"SELECT %s VALUE ABS(c.age) FROM c\",\n+            \"SELECT %s VALUE LEFT(c.name, 1) FROM c\",\n+            \"SELECT %s VALUE c.name || ', ' || (c.city ?? '') FROM c\",\n+            \"SELECT %s VALUE ARRAY_LENGTH(c.children) FROM c\",\n+            \"SELECT %s VALUE IS_DEFINED(c.city) FROM c\",\n+            \"SELECT %s VALUE (c.children[0].age ?? 0) + (c.children[1].age ?? 0) FROM c\",\n+\n+            // distinct queries with order by : Value order by queries are not supported yet \n+            \"SELECT %s  c.name FROM c ORDER BY c.name ASC\",\n+            \"SELECT %s  c.age FROM c ORDER BY c.age\",\n+            \"SELECT %s  c.city FROM c ORDER BY c.city\",\n+            \"SELECT %s  c.city FROM c ORDER BY c.age\",\n+            \"SELECT %s  LEFT(c.name, 1) FROM c ORDER BY c.name\",\n+\n+            // distinct queries with top and no matching order by\n+            \"SELECT %s TOP 2147483647 VALUE c.age FROM c\",\n+\n+            // distinct queries with top and  matching order by\n+            \"SELECT %s TOP 2147483647  c.age FROM c ORDER BY c.age\",\n+\n+            // distinct queries with aggregates\n+            \"SELECT %s VALUE MAX(c.age) FROM c\",\n+\n+            // distinct queries with joins\n+            \"SELECT %s VALUE c.age FROM p JOIN c IN p.children\",\n+            \"SELECT %s p.age AS ParentAge, c.age ChildAge FROM p JOIN c IN p.children\",\n+            \"SELECT %s VALUE c.name FROM p JOIN c IN p.children\",\n+            \"SELECT %s p.name AS ParentName, c.name ChildName FROM p JOIN c IN p.children\",\n+\n+            // distinct queries in subqueries\n+            \"SELECT %s r.age, s FROM r JOIN (SELECT DISTINCT VALUE c FROM (SELECT 1 a) c) s WHERE r.age > 25\",\n+            \"SELECT %s p.name, p.age FROM (SELECT DISTINCT * FROM r) p WHERE p.age > 25\",\n+\n+            // distinct queries in scalar subqeries\n+            \"SELECT %s p.name, (SELECT DISTINCT VALUE p.age) AS Age FROM p\",\n+            \"SELECT %s p.name, p.age FROM p WHERE (SELECT DISTINCT VALUE LEFT(p.name, 1)) > 'A' AND (SELECT \" +\n+                \"DISTINCT VALUE p.age) > 21\",\n+            \"SELECT %s p.name, (SELECT DISTINCT VALUE p.age) AS Age FROM p WHERE (SELECT DISTINCT VALUE p.name) >\" +\n+                \" 'A' OR (SELECT DISTINCT VALUE p.age) > 21\",\n+\n+            //   select *\n+            \"SELECT %s * FROM c\"\n+        );\n+\n+        for (String query : queries) {\n+            FeedOptions options = new FeedOptions();\n+            options.setMaxItemCount(5);\n+            options.setMaxDegreeOfParallelism(2);\n+\n+            List<CosmosItemProperties> documentsFromWithDistinct = new ArrayList<>();\n+            List<CosmosItemProperties> documentsFromWithoutDistinct = new ArrayList<>();\n+\n+            final String queryWithDistinct = String.format(query, \"DISTINCT\");\n+            final String queryWithoutDistinct = String.format(query, \"\");\n+\n+            CosmosPagedFlux<CosmosItemProperties> queryObservable = createdCollection.queryItems(queryWithDistinct, options,\n+                                                                                                 CosmosItemProperties.class);\n+\n+\n+            Iterator<FeedResponse<CosmosItemProperties>> iterator = queryObservable.byPage().toIterable().iterator();\n+            Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+            UnorderedDistinctMap distinctMap = new UnorderedDistinctMap();\n+\n+            while (iterator.hasNext()) {\n+                FeedResponse<CosmosItemProperties> next = iterator.next();\n+                for (CosmosItemProperties document : next.getResults()) {\n+                    if (distinctMap.add(document, outHash)) {\n+                        documentsFromWithoutDistinct.add(document);\n+                    }\n+                }\n+            }\n+\n+\n+            CosmosPagedFlux<CosmosItemProperties> queryObservableWithDistinct = createdCollection\n+                                                                                    .queryItems(queryWithoutDistinct, options,\n+                                                                                                CosmosItemProperties.class);\n+\n+\n+            iterator = queryObservableWithDistinct.byPage().toIterable().iterator();\n+\n+            while (iterator.hasNext()) {\n+                FeedResponse<CosmosItemProperties> next = iterator.next();\n+                documentsFromWithDistinct.addAll(next.getResults());\n+            }\n+\n+            assertThat(documentsFromWithDistinct.size()).isEqualTo(documentsFromWithoutDistinct.size());\n+        }\n+\n+    }\n+\n+    public void bulkInsert() {\n+        generateTestData();\n+        voidBulkInsertBlocking(createdCollection, docs);\n+    }\n+\n+    public void generateTestData() {\n+\n+        Random rand = new Random();\n+        ObjectMapper mapper = new ObjectMapper();\n+        for (int i = 0; i < 40; i++) {\n+            Person person = getRandomPerson(rand);\n+            try {\n+                docs.add(new CosmosItemProperties(mapper.writeValueAsString(person)));\n+            } catch (JsonProcessingException e) {\n+                e.printStackTrace();", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDQ3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391170479", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-03-11T18:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NDIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NDgwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390454805", "bodyText": "java enum code style. take a look at ConsistencyLevel if string value of this matters.", "author": "moderakh", "createdAt": "2020-03-10T16:41:38Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DistinctQueryTests.java", "diffHunk": "@@ -0,0 +1,351 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.CosmosPagedFlux;\n+import com.azure.cosmos.implementation.CosmosItemProperties;\n+import com.azure.cosmos.implementation.FeedResponseListValidator;\n+import com.azure.cosmos.implementation.FeedResponseValidator;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.UnorderedDistinctMap;\n+import com.azure.cosmos.models.FeedOptions;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.models.JsonSerializable;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DistinctQueryTests extends TestSuiteBase {\n+    private final String FIELD = \"name\";\n+    private CosmosAsyncContainer createdCollection;\n+    private ArrayList<CosmosItemProperties> docs = new ArrayList<>();\n+\n+    private CosmosAsyncClient client;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public DistinctQueryTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    private static String getRandomName(Random rand) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(\"name_\" + rand.nextInt(100));\n+\n+        return stringBuilder.toString();\n+    }\n+\n+    private static City getRandomCity(Random rand) {\n+        int index = rand.nextInt(3);\n+        switch (index) {\n+            case 0:\n+                return City.LosAngeles;\n+            case 1:\n+                return City.NewYork;\n+            case 2:\n+                return City.Seattle;\n+        }\n+\n+        return City.LosAngeles;\n+    }\n+\n+    private static double getRandomIncome(Random rand) {\n+        return rand.nextDouble() * Double.MAX_VALUE;\n+    }\n+\n+    private static int getRandomAge(Random rand) {\n+        return rand.nextInt(100);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT, dataProvider = \"queryMetricsArgProvider\")\n+    public void queryDocuments(boolean qmEnabled) {\n+        String query = \"SELECT DISTINCT c.name from c\";\n+        FeedOptions options = new FeedOptions();\n+        options.setMaxItemCount(5);\n+        options.setPopulateQueryMetrics(qmEnabled);\n+        options.setMaxDegreeOfParallelism(2);\n+        CosmosPagedFlux<CosmosItemProperties> queryObservable = createdCollection.queryItems(query, options,\n+                                                                                             CosmosItemProperties.class);\n+        \n+        List<Object> nameList = docs.stream().map(d -> d.get(FIELD)).collect(Collectors.toList());\n+        List<Object> distinctNameList = nameList.stream().distinct().collect(Collectors.toList());\n+\n+        FeedResponseListValidator<CosmosItemProperties> validator =\n+            new FeedResponseListValidator.Builder<CosmosItemProperties>()\n+                .totalSize(distinctNameList.size())\n+                .allPagesSatisfy(new FeedResponseValidator.Builder<CosmosItemProperties>()\n+                                     .requestChargeGreaterThanOrEqualTo(1.0)\n+                                     .build())\n+                .hasValidQueryMetrics(qmEnabled)\n+                .build();\n+\n+        validateQuerySuccess(queryObservable.byPage(), validator, TIMEOUT);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void queryDistinctDocuments() {\n+\n+        List<String> queries = Arrays.asList(\n+            // basic distinct queries\n+            \"SELECT %s VALUE null\",\n+            \"SELECT %s VALUE false\",\n+            \"SELECT %s VALUE true\",\n+            \"SELECT %s VALUE 1\",\n+            \"SELECT %s VALUE 'a'\",\n+            \"SELECT %s VALUE [null, true, false, 1, 'a']\",\n+            \"SELECT %s false AS p\",\n+            \"SELECT %s 1 AS p\",\n+            \"SELECT %s 'a' AS p\",\n+\n+            \"SELECT %s VALUE null FROM c\",\n+            \"SELECT %s VALUE false FROM c\",\n+            \"SELECT %s VALUE 1 FROM c\",\n+            \"SELECT %s VALUE 'a' FROM c\",\n+            \"SELECT %s null AS p FROM c\",\n+            \"SELECT %s false AS p FROM c\",\n+            \"SELECT %s 1 AS p FROM c\",\n+            \"SELECT %s 'a' AS p FROM c\",\n+\n+            // number value distinct queries\n+            \"SELECT %s VALUE c.income from c\",\n+            \"SELECT %s VALUE c.age from c\",\n+            \"SELECT %s c.income, c.income AS income2 from c\",\n+            \"SELECT %s c.income, c.age from c\",\n+\n+            // string value distinct queries\n+            \"SELECT %s  c.name from c\",\n+            \"SELECT %s VALUE c.city from c\",\n+            \"SELECT %s VALUE c.partitionKey from c\",\n+            \"SELECT %s c.name, c.name AS name2 from c\",\n+            \"SELECT %s c.name, c.city from c\",\n+\n+            // array distinct queries\n+            \"SELECT %s c.children from c\",\n+            \"SELECT %s c.children, c.children AS children2 from c\",\n+\n+            // object value distinct queries\n+            \"SELECT %s VALUE c.pet from c\",\n+            \"SELECT %s c.pet, c.pet AS pet2 from c\",\n+\n+            // scalar expressions distinct query\n+            \"SELECT %s VALUE ABS(c.age) FROM c\",\n+            \"SELECT %s VALUE LEFT(c.name, 1) FROM c\",\n+            \"SELECT %s VALUE c.name || ', ' || (c.city ?? '') FROM c\",\n+            \"SELECT %s VALUE ARRAY_LENGTH(c.children) FROM c\",\n+            \"SELECT %s VALUE IS_DEFINED(c.city) FROM c\",\n+            \"SELECT %s VALUE (c.children[0].age ?? 0) + (c.children[1].age ?? 0) FROM c\",\n+\n+            // distinct queries with order by : Value order by queries are not supported yet \n+            \"SELECT %s  c.name FROM c ORDER BY c.name ASC\",\n+            \"SELECT %s  c.age FROM c ORDER BY c.age\",\n+            \"SELECT %s  c.city FROM c ORDER BY c.city\",\n+            \"SELECT %s  c.city FROM c ORDER BY c.age\",\n+            \"SELECT %s  LEFT(c.name, 1) FROM c ORDER BY c.name\",\n+\n+            // distinct queries with top and no matching order by\n+            \"SELECT %s TOP 2147483647 VALUE c.age FROM c\",\n+\n+            // distinct queries with top and  matching order by\n+            \"SELECT %s TOP 2147483647  c.age FROM c ORDER BY c.age\",\n+\n+            // distinct queries with aggregates\n+            \"SELECT %s VALUE MAX(c.age) FROM c\",\n+\n+            // distinct queries with joins\n+            \"SELECT %s VALUE c.age FROM p JOIN c IN p.children\",\n+            \"SELECT %s p.age AS ParentAge, c.age ChildAge FROM p JOIN c IN p.children\",\n+            \"SELECT %s VALUE c.name FROM p JOIN c IN p.children\",\n+            \"SELECT %s p.name AS ParentName, c.name ChildName FROM p JOIN c IN p.children\",\n+\n+            // distinct queries in subqueries\n+            \"SELECT %s r.age, s FROM r JOIN (SELECT DISTINCT VALUE c FROM (SELECT 1 a) c) s WHERE r.age > 25\",\n+            \"SELECT %s p.name, p.age FROM (SELECT DISTINCT * FROM r) p WHERE p.age > 25\",\n+\n+            // distinct queries in scalar subqeries\n+            \"SELECT %s p.name, (SELECT DISTINCT VALUE p.age) AS Age FROM p\",\n+            \"SELECT %s p.name, p.age FROM p WHERE (SELECT DISTINCT VALUE LEFT(p.name, 1)) > 'A' AND (SELECT \" +\n+                \"DISTINCT VALUE p.age) > 21\",\n+            \"SELECT %s p.name, (SELECT DISTINCT VALUE p.age) AS Age FROM p WHERE (SELECT DISTINCT VALUE p.name) >\" +\n+                \" 'A' OR (SELECT DISTINCT VALUE p.age) > 21\",\n+\n+            //   select *\n+            \"SELECT %s * FROM c\"\n+        );\n+\n+        for (String query : queries) {\n+            FeedOptions options = new FeedOptions();\n+            options.setMaxItemCount(5);\n+            options.setMaxDegreeOfParallelism(2);\n+\n+            List<CosmosItemProperties> documentsFromWithDistinct = new ArrayList<>();\n+            List<CosmosItemProperties> documentsFromWithoutDistinct = new ArrayList<>();\n+\n+            final String queryWithDistinct = String.format(query, \"DISTINCT\");\n+            final String queryWithoutDistinct = String.format(query, \"\");\n+\n+            CosmosPagedFlux<CosmosItemProperties> queryObservable = createdCollection.queryItems(queryWithDistinct, options,\n+                                                                                                 CosmosItemProperties.class);\n+\n+\n+            Iterator<FeedResponse<CosmosItemProperties>> iterator = queryObservable.byPage().toIterable().iterator();\n+            Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+            UnorderedDistinctMap distinctMap = new UnorderedDistinctMap();\n+\n+            while (iterator.hasNext()) {\n+                FeedResponse<CosmosItemProperties> next = iterator.next();\n+                for (CosmosItemProperties document : next.getResults()) {\n+                    if (distinctMap.add(document, outHash)) {\n+                        documentsFromWithoutDistinct.add(document);\n+                    }\n+                }\n+            }\n+\n+\n+            CosmosPagedFlux<CosmosItemProperties> queryObservableWithDistinct = createdCollection\n+                                                                                    .queryItems(queryWithoutDistinct, options,\n+                                                                                                CosmosItemProperties.class);\n+\n+\n+            iterator = queryObservableWithDistinct.byPage().toIterable().iterator();\n+\n+            while (iterator.hasNext()) {\n+                FeedResponse<CosmosItemProperties> next = iterator.next();\n+                documentsFromWithDistinct.addAll(next.getResults());\n+            }\n+\n+            assertThat(documentsFromWithDistinct.size()).isEqualTo(documentsFromWithoutDistinct.size());\n+        }\n+\n+    }\n+\n+    public void bulkInsert() {\n+        generateTestData();\n+        voidBulkInsertBlocking(createdCollection, docs);\n+    }\n+\n+    public void generateTestData() {\n+\n+        Random rand = new Random();\n+        ObjectMapper mapper = new ObjectMapper();\n+        for (int i = 0; i < 40; i++) {\n+            Person person = getRandomPerson(rand);\n+            try {\n+                docs.add(new CosmosItemProperties(mapper.writeValueAsString(person)));\n+            } catch (JsonProcessingException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    private Pet getRandomPet(Random rand) {\n+        String name = getRandomName(rand);\n+        int age = getRandomAge(rand);\n+        return new Pet(name, age);\n+    }\n+\n+    public Person getRandomPerson(Random rand) {\n+        String name = getRandomName(rand);\n+        City city = getRandomCity(rand);\n+        double income = getRandomIncome(rand);\n+        List<Person> people = new ArrayList<Person>();\n+        if (rand.nextInt(10) % 10 == 0) {\n+            for (int i = 0; i < rand.nextInt(5); i++) {\n+                people.add(getRandomPerson(rand));\n+            }\n+        }\n+\n+        int age = getRandomAge(rand);\n+        Pet pet = getRandomPet(rand);\n+        UUID guid = UUID.randomUUID();\n+        Person p = new Person(name, city, income, people, age, pet, guid);\n+        return p;\n+    }\n+\n+    @AfterClass(groups = {\"simple\"}, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        safeClose(client);\n+    }\n+\n+    @BeforeClass(groups = {\"simple\"}, timeOut = 3 * SETUP_TIMEOUT)\n+    public void beforeClass() throws Exception {\n+        client = this.clientBuilder().buildAsyncClient();\n+        createdCollection = getSharedMultiPartitionCosmosContainer(client);\n+        truncateCollection(createdCollection);\n+\n+        bulkInsert();\n+\n+        waitIfNeededForReplicasToCatchUp(clientBuilder());\n+    }\n+\n+    public enum City {\n+        NewYork,\n+        LosAngeles,\n+        Seattle", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDU4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391170585", "bodyText": "changed the test", "author": "mbhaskar", "createdAt": "2020-03-11T18:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NDgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MTcxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390481715", "bodyText": "why are these blocked?", "author": "bchong95", "createdAt": "2020-03-10T17:21:02Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,115 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BadRequestException;\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosClientException;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.models.Resource;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class DistinctDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+    private final IDocumentQueryExecutionComponent<T> component;\n+    private final DistinctMap distinctMap;\n+    private final DistinctQueryType distinctQueryType;\n+    private String lastHash;\n+\n+    public DistinctDocumentQueryExecutionContext(IDocumentQueryExecutionComponent<T> component,\n+                                                 DistinctQueryType distinctQueryType,\n+                                                 String previousHash) {\n+        if (distinctQueryType == DistinctQueryType.None) {\n+            throw new IllegalArgumentException(\"Invalid distinct query type\");\n+        }\n+\n+        if (component == null) {\n+            throw new IllegalArgumentException(\"documentQueryExecutionComponent cannot be null\");\n+        }\n+\n+        this.distinctQueryType = distinctQueryType;\n+        this.component = component;\n+        this.distinctMap = DistinctMap.create(distinctQueryType, previousHash);\n+    }\n+\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        DistinctQueryType distinctQueryType,\n+        String continuationToken) {\n+\n+        if (distinctQueryType == DistinctQueryType.Ordered) {\n+            CosmosClientException dce = new BadRequestException(\"Ordered distinct queries are not supported yet\");", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDc0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391170740", "bodyText": "Left over as part of testing! Removed this", "author": "mbhaskar", "createdAt": "2020-03-11T18:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MTcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4Mjc1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390482755", "bodyText": "This should be set in the else case of if(continuationToken != null).", "author": "bchong95", "createdAt": "2020-03-10T17:22:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,115 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BadRequestException;\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosClientException;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.models.Resource;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class DistinctDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+    private final IDocumentQueryExecutionComponent<T> component;\n+    private final DistinctMap distinctMap;\n+    private final DistinctQueryType distinctQueryType;\n+    private String lastHash;\n+\n+    public DistinctDocumentQueryExecutionContext(IDocumentQueryExecutionComponent<T> component,\n+                                                 DistinctQueryType distinctQueryType,\n+                                                 String previousHash) {\n+        if (distinctQueryType == DistinctQueryType.None) {\n+            throw new IllegalArgumentException(\"Invalid distinct query type\");\n+        }\n+\n+        if (component == null) {\n+            throw new IllegalArgumentException(\"documentQueryExecutionComponent cannot be null\");\n+        }\n+\n+        this.distinctQueryType = distinctQueryType;\n+        this.component = component;\n+        this.distinctMap = DistinctMap.create(distinctQueryType, previousHash);\n+    }\n+\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        DistinctQueryType distinctQueryType,\n+        String continuationToken) {\n+\n+        if (distinctQueryType == DistinctQueryType.Ordered) {\n+            CosmosClientException dce = new BadRequestException(\"Ordered distinct queries are not supported yet\");\n+            return Flux.error(dce);\n+        }\n+\n+        Utils.ValueHolder<DistinctContinuationToken> outDistinctcontinuationtoken = new Utils.ValueHolder<>();\n+        DistinctContinuationToken distinctContinuationToken = new DistinctContinuationToken(null /*lasthash*/,", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MjcyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391362729", "bodyText": "Initialized it early as I am using outDistinctcontinuationtoken in if condition. And distinctContinuationToken is being used even if it doesnt go into else. So initialized these here", "author": "mbhaskar", "createdAt": "2020-03-12T01:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4Mjc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4Nzg4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390487889", "bodyText": "We need a test for two objects where the property values are just shuffeled:\n{\n     \"name\" : \"John\",\n     \"age\": 24\n}\n\nvs\n{\n     \"age\": 24,\n     \"name\" : \"John\"\n}\n\nAnd they should hash to the same, since ordered of JSON properties does not matter.", "author": "bchong95", "createdAt": "2020-03-10T17:30:21Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/DistinctMapTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.DistinctMap;\n+import com.azure.cosmos.implementation.query.DistinctQueryType;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+public class DistinctMapTest {\n+    @DataProvider(name = \"distinctMapArgProvider\")\n+    public Object[][] distinctMapArgProvider() {\n+        return new Object[][] {\n+            {DistinctQueryType.Ordered},\n+            {DistinctQueryType.Unordered},\n+        };\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void integerValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 5);\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        System.out.println(\"outHash5 = \" + outHash.v);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+        resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 3);\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void stringValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \" + \"\\\"id\\\": \\\"5\\\" + \\\"}\");\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+        resource = String.format(\"{ \" + \"\\\"id\\\": \\\"6\\\" + \\\"}\");\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void objectValue(DistinctQueryType queryType) {", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4ODQ0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390488445", "bodyText": "I see that you have one.", "author": "bchong95", "createdAt": "2020-03-10T17:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4Nzg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MTU0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391181540", "bodyText": "Yeah added one for this", "author": "mbhaskar", "createdAt": "2020-03-11T18:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4Nzg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4ODgxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390488814", "bodyText": "This should be false right? since the ordering does not change the hash.", "author": "bchong95", "createdAt": "2020-03-10T17:31:44Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/DistinctMapTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.DistinctMap;\n+import com.azure.cosmos.implementation.query.DistinctQueryType;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+public class DistinctMapTest {\n+    @DataProvider(name = \"distinctMapArgProvider\")\n+    public Object[][] distinctMapArgProvider() {\n+        return new Object[][] {\n+            {DistinctQueryType.Ordered},\n+            {DistinctQueryType.Unordered},\n+        };\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void integerValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 5);\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        System.out.println(\"outHash5 = \" + outHash.v);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+        resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 3);\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void stringValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \" + \"\\\"id\\\": \\\"5\\\" + \\\"}\");\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+        resource = String.format(\"{ \" + \"\\\"id\\\": \\\"6\\\" + \\\"}\");\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void objectValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \"\n+                                            + \"\\\"id\\\": \\\"%s\\\", \"\n+                                            + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                                            + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                                            + \"}\", 117546, \"xxyyzz-abc\");\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+\n+        resource = String.format(\"{ \"\n+                                     + \"\\\"id\\\": \\\"%s\\\", \"\n+                                     + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                                     + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                                     + \"}\", 117546, \"xxy%zz-abc\");\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void nullValue(DistinctQueryType queryType) {\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(null, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(null, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void objectOrder(DistinctQueryType queryType) {\n+        String resource1 = String.format(\"{ \"\n+                                            + \"\\\"id\\\": \\\"12345\\\", \"\n+                                            + \"\\\"mypk\\\": \\\"abcde\\\"\"\n+                                            + \"} \");\n+\n+        String resource2 = String.format(\"{ \"\n+                                             + \"\\\"mypk\\\": \\\"abcde\\\",\"\n+                                             + \"\\\"id\\\": \\\"12345\\\"\"\n+                                             + \"} \");\n+\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource1, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource2, outHash);\n+        assertThat(add2).as(\"Order of objects in map should be treated same\").isTrue();", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MTgxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391181817", "bodyText": "Yeah it should be, corrected the test", "author": "mbhaskar", "createdAt": "2020-03-11T18:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4ODgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTE1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390489155", "bodyText": "We need a test for 1.0 vs 1", "author": "bchong95", "createdAt": "2020-03-10T17:32:14Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/DistinctMapTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.DistinctMap;\n+import com.azure.cosmos.implementation.query.DistinctQueryType;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+public class DistinctMapTest {\n+    @DataProvider(name = \"distinctMapArgProvider\")\n+    public Object[][] distinctMapArgProvider() {\n+        return new Object[][] {\n+            {DistinctQueryType.Ordered},\n+            {DistinctQueryType.Unordered},\n+        };\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void integerValue(DistinctQueryType queryType) {", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTUwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391361500", "bodyText": "added an integration test for this", "author": "mbhaskar", "createdAt": "2020-03-12T01:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTM1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390489357", "bodyText": "We a test for strings vs their escaped counterpart", "author": "bchong95", "createdAt": "2020-03-10T17:32:33Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/DistinctMapTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.DistinctMap;\n+import com.azure.cosmos.implementation.query.DistinctQueryType;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+public class DistinctMapTest {\n+    @DataProvider(name = \"distinctMapArgProvider\")\n+    public Object[][] distinctMapArgProvider() {\n+        return new Object[][] {\n+            {DistinctQueryType.Ordered},\n+            {DistinctQueryType.Unordered},\n+        };\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void integerValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 5);\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        System.out.println(\"outHash5 = \" + outHash.v);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+        resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 3);\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void stringValue(DistinctQueryType queryType) {", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTczOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391361739", "bodyText": "Already creating the object using escaped strings and they are eventually read as Strings by Jackson, so this should be covered", "author": "mbhaskar", "createdAt": "2020-03-12T01:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r390489577", "bodyText": "We need a test for arrays.", "author": "bchong95", "createdAt": "2020-03-10T17:32:53Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/DistinctMapTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.DistinctMap;\n+import com.azure.cosmos.implementation.query.DistinctQueryType;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+\n+public class DistinctMapTest {\n+    @DataProvider(name = \"distinctMapArgProvider\")\n+    public Object[][] distinctMapArgProvider() {\n+        return new Object[][] {\n+            {DistinctQueryType.Ordered},\n+            {DistinctQueryType.Unordered},\n+        };\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void integerValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 5);\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        System.out.println(\"outHash5 = \" + outHash.v);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+        resource = String.format(\"{ \" + \"\\\"id\\\": %d + \\\"}\", 3);\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void stringValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \" + \"\\\"id\\\": \\\"5\\\" + \\\"}\");\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+        resource = String.format(\"{ \" + \"\\\"id\\\": \\\"6\\\" + \\\"}\");\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void objectValue(DistinctQueryType queryType) {\n+        String resource = String.format(\"{ \"\n+                                            + \"\\\"id\\\": \\\"%s\\\", \"\n+                                            + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                                            + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                                            + \"}\", 117546, \"xxyyzz-abc\");\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(resource, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(resource, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+\n+        resource = String.format(\"{ \"\n+                                     + \"\\\"id\\\": \\\"%s\\\", \"\n+                                     + \"\\\"mypk\\\": \\\"%s\\\", \"\n+                                     + \"\\\"sgmts\\\": [[6519456, 1471916863], [2498434, 1455671440]]\"\n+                                     + \"}\", 117546, \"xxy%zz-abc\");\n+        boolean add3 = distinctMap.add(resource, outHash);\n+        assertThat(add3).as(\"different value should be added again\").isTrue();\n+\n+    }\n+\n+    @Test(groups = \"unit\", dataProvider = \"distinctMapArgProvider\")\n+    public void nullValue(DistinctQueryType queryType) {\n+        DistinctMap distinctMap = DistinctMap.create(queryType, null);\n+        Utils.ValueHolder<String> outHash = new Utils.ValueHolder<>();\n+        boolean add = distinctMap.add(null, outHash);\n+        assertThat(add).as(\"Value should be added first time\").isTrue();\n+        boolean add2 = distinctMap.add(null, outHash);\n+        assertThat(add2).as(\"same value should not be added again\").isFalse();\n+    }\n+", "originalCommit": "239d36c5630e81095484faf3f2a79b439e3fd392", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTU2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r391361567", "bodyText": "added test for arrays", "author": "mbhaskar", "createdAt": "2020-03-12T01:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTU3Nw=="}], "type": "inlineReview"}, {"oid": "8d1b05aa7a4c3f64ae0e7cccd5fe545d96f0667c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d1b05aa7a4c3f64ae0e7cccd5fe545d96f0667c", "message": "Implementing PR comments", "committedDate": "2020-03-11T17:34:58Z", "type": "commit"}, {"oid": "2b6f1cb3139aaa2a7bdeb79ffcfc14114b91a56e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b6f1cb3139aaa2a7bdeb79ffcfc14114b91a56e", "message": "Fixing test", "committedDate": "2020-03-11T19:11:39Z", "type": "commit"}, {"oid": "4d6ad448ce81c597b2b345fa5bf604901cfe0d3e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d6ad448ce81c597b2b345fa5bf604901cfe0d3e", "message": "Adding more tests", "committedDate": "2020-03-12T01:48:25Z", "type": "commit"}, {"oid": "abc748cb84c36a7314de3e78b73011d1da53853d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/abc748cb84c36a7314de3e78b73011d1da53853d", "message": "Merge branch 'upstream-master' into adding-distinct-support", "committedDate": "2020-03-13T17:39:41Z", "type": "commit"}, {"oid": "c65408ffdf3784be5fb443f3d10ee26b5e364466", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c65408ffdf3784be5fb443f3d10ee26b5e364466", "message": "merging master and fixing imports for exceptions", "committedDate": "2020-03-13T17:53:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NTk4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r393095984", "bodyText": "is lastHash field value needed?\nif so shouldn't this be volatile to ensure threads have consistent view on the value?", "author": "moderakh", "createdAt": "2020-03-16T15:08:54Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosClientException;\n+import com.azure.cosmos.implementation.BadRequestException;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.models.Resource;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class DistinctDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+    private final IDocumentQueryExecutionComponent<T> component;\n+    private final DistinctMap distinctMap;\n+    private final DistinctQueryType distinctQueryType;\n+    private String lastHash;", "originalCommit": "c65408ffdf3784be5fb443f3d10ee26b5e364466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNDI2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r397624261", "bodyText": "Using AtomicReference now, only the last get would be used for preparing continuation token", "author": "mbhaskar", "createdAt": "2020-03-25T05:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NTk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NjU2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r393096560", "bodyText": "is lastHash field value needed?\nif so shouldn't this be volatile to ensure threads have consistent view on the value?", "author": "moderakh", "createdAt": "2020-03-16T15:09:46Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.Resource;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+public class OrderedDistinctMap extends DistinctMap {\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);;\n+    private String lastHash;", "originalCommit": "c65408ffdf3784be5fb443f3d10ee26b5e364466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNDExOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r397624118", "bodyText": "yup, made this volatile", "author": "mbhaskar", "createdAt": "2020-03-25T05:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NjU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NzQ3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r393097474", "bodyText": "if resultSet can be accessed concurrently you should consider making this ConcurrentHashSet", "author": "moderakh", "createdAt": "2020-03-16T15:11:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/UnorderedDistinctMap.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.Resource;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.HashSet;\n+\n+public class UnorderedDistinctMap extends DistinctMap {\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);;\n+    private final HashSet<String> resultSet;", "originalCommit": "c65408ffdf3784be5fb443f3d10ee26b5e364466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNDE5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r397624198", "bodyText": "Yes, made it a ConcurrentHashSet", "author": "mbhaskar", "createdAt": "2020-03-25T05:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NzQ3NA=="}], "type": "inlineReview"}, {"oid": "a63e111e4408d551669b8023f533646b8446e902", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a63e111e4408d551669b8023f533646b8446e902", "message": "Merge remote-tracking branch 'upstream/master' into adding-distinct-support", "committedDate": "2020-03-23T20:44:56Z", "type": "commit"}, {"oid": "609054642c2b37f61f2088e062dc6f93ec8e4ea7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/609054642c2b37f61f2088e062dc6f93ec8e4ea7", "message": "Concurrency fixes\nMerging latest master", "committedDate": "2020-03-25T02:21:57Z", "type": "commit"}, {"oid": "9d11d4dd3c2dfaa5f7a1123540057fdd38f9f054", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d11d4dd3c2dfaa5f7a1123540057fdd38f9f054", "message": "Merge remote-tracking branch 'upstream/master' into adding-distinct-support", "committedDate": "2020-03-25T02:39:30Z", "type": "commit"}, {"oid": "21a04944aad0b67888706225a7bf8d671a30566c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21a04944aad0b67888706225a7bf8d671a30566c", "message": "Merging latest master\nUsing StringUtils from impl package", "committedDate": "2020-03-25T02:51:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODM2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r399368360", "bodyText": "@bchong95 sha1 is not secure. as this is only used for hashing that shouldn't be a concern. But I wonder why didn't we use other hashes?\n@mbhaskar how does this do in terms of perf?", "author": "moderakh", "createdAt": "2020-03-27T15:57:22Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctMap.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.Resource;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+public abstract class DistinctMap {\n+    private static final ObjectMapper OBJECT_MAPPER =\n+        new ObjectMapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+\n+    public static DistinctMap create(DistinctQueryType distinctQueryType, String previousHash) {\n+        switch (distinctQueryType) {\n+            case NONE:\n+                throw new IllegalArgumentException(\"distinct query type cannot be None\");\n+            case UNORDERED:\n+                return new UnorderedDistinctMap();\n+            case ORDERED:\n+                return new OrderedDistinctMap(previousHash);\n+            default:\n+                throw new IllegalArgumentException(\"Unrecognized DistinctQueryType\");\n+        }\n+    }\n+\n+    public abstract boolean add(Resource object, Utils.ValueHolder<String> outHash);\n+\n+    String getHash(Resource resource) throws JsonProcessingException,\n+                                                 NoSuchAlgorithmException {\n+        final Object obj = OBJECT_MAPPER.treeToValue(ModelBridgeInternal.getPropertyBagFromJsonSerializable(resource)\n+            , Object.class);\n+        final String sortedJson =\n+            OBJECT_MAPPER.writeValueAsString(obj);\n+        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");", "originalCommit": "21a04944aad0b67888706225a7bf8d671a30566c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMDk0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r399430947", "bodyText": "@moderakh .NET doesnt use SHA-1, they use their CosmosElement framework and then use Murmurhash3 on individual types. JS and Java use SHA-1", "author": "mbhaskar", "createdAt": "2020-03-27T17:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0ODg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r399448866", "bodyText": "Also, we can continue to work on this hash as a util function and make this stronger and robust.", "author": "mbhaskar", "createdAt": "2020-03-27T18:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MjU4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r399492583", "bodyText": "this is also used in group by, so will try to test it further and improve", "author": "mbhaskar", "createdAt": "2020-03-27T19:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODc3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r399368778", "bodyText": "shouldn't we be using utf-8 as encoding? default charset may change from one machine to another machine", "author": "moderakh", "createdAt": "2020-03-27T15:57:56Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctMap.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.Resource;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.nio.charset.Charset;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+public abstract class DistinctMap {\n+    private static final ObjectMapper OBJECT_MAPPER =\n+        new ObjectMapper().configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+\n+    public static DistinctMap create(DistinctQueryType distinctQueryType, String previousHash) {\n+        switch (distinctQueryType) {\n+            case NONE:\n+                throw new IllegalArgumentException(\"distinct query type cannot be None\");\n+            case UNORDERED:\n+                return new UnorderedDistinctMap();\n+            case ORDERED:\n+                return new OrderedDistinctMap(previousHash);\n+            default:\n+                throw new IllegalArgumentException(\"Unrecognized DistinctQueryType\");\n+        }\n+    }\n+\n+    public abstract boolean add(Resource object, Utils.ValueHolder<String> outHash);\n+\n+    String getHash(Resource resource) throws JsonProcessingException,\n+                                                 NoSuchAlgorithmException {\n+        final Object obj = OBJECT_MAPPER.treeToValue(ModelBridgeInternal.getPropertyBagFromJsonSerializable(resource)\n+            , Object.class);\n+        final String sortedJson =\n+            OBJECT_MAPPER.writeValueAsString(obj);\n+        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n+        byte[] digest = md.digest(sortedJson.getBytes(Charset.defaultCharset()));", "originalCommit": "21a04944aad0b67888706225a7bf8d671a30566c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMzU5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8901#discussion_r399433593", "bodyText": "Unless we run partial queries in different machines, this might not be a concern! but in general it might not be a good practise to use defaultCharset, will move to UTF-8 in next PR", "author": "mbhaskar", "createdAt": "2020-03-27T17:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODc3OA=="}], "type": "inlineReview"}]}