{"pr_number": 10273, "pr_title": "Update PercentEscaper to Support UTF-8", "pr_createdAt": "2020-04-16T00:19:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10273", "timeline": [{"oid": "044b3e02a3b535a6c26fdda8fd0e6c4f2d7d456e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/044b3e02a3b535a6c26fdda8fd0e6c4f2d7d456e", "message": "Update PercentEscaper to support UTF-8", "committedDate": "2020-04-16T00:18:54Z", "type": "commit"}, {"oid": "675adffbea33d938001e618734cd679a0dcfae0b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/675adffbea33d938001e618734cd679a0dcfae0b", "message": "Update test casing expectation", "committedDate": "2020-04-16T00:44:34Z", "type": "commit"}, {"oid": "1d9938bab64a751b1e1735ad6f5dd283ab6a9dc6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d9938bab64a751b1e1735ad6f5dd283ab6a9dc6", "message": "Fixed comments", "committedDate": "2020-04-16T01:08:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1OTUxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409259517", "bodyText": "We should verify that space is not in safeCharacters if  usePlusForSpace is true.", "author": "srnagar", "createdAt": "2020-04-16T03:28:15Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PercentEscaper.java", "diffHunk": "@@ -3,104 +3,225 @@\n \n package com.azure.core.http.rest;\n \n-import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n-import java.util.List;\n+import com.azure.core.util.CoreUtils;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n \n /**\n  * An escaper that escapes URL data through percent encoding.\n  */\n final class PercentEscaper {\n+    private static final char[] HEX_CHARACTERS = \"0123456789ABCDEF\".toCharArray();\n \n-    private static final String[] HEX = {\n-        \"%00\", \"%01\", \"%02\", \"%03\", \"%04\", \"%05\", \"%06\", \"%07\",\n-        \"%08\", \"%09\", \"%0a\", \"%0b\", \"%0c\", \"%0d\", \"%0e\", \"%0f\",\n-        \"%10\", \"%11\", \"%12\", \"%13\", \"%14\", \"%15\", \"%16\", \"%17\",\n-        \"%18\", \"%19\", \"%1a\", \"%1b\", \"%1c\", \"%1d\", \"%1e\", \"%1f\",\n-        \"%20\", \"%21\", \"%22\", \"%23\", \"%24\", \"%25\", \"%26\", \"%27\",\n-        \"%28\", \"%29\", \"%2a\", \"%2b\", \"%2c\", \"%2d\", \"%2e\", \"%2f\",\n-        \"%30\", \"%31\", \"%32\", \"%33\", \"%34\", \"%35\", \"%36\", \"%37\",\n-        \"%38\", \"%39\", \"%3a\", \"%3b\", \"%3c\", \"%3d\", \"%3e\", \"%3f\",\n-        \"%40\", \"%41\", \"%42\", \"%43\", \"%44\", \"%45\", \"%46\", \"%47\",\n-        \"%48\", \"%49\", \"%4a\", \"%4b\", \"%4c\", \"%4d\", \"%4e\", \"%4f\",\n-        \"%50\", \"%51\", \"%52\", \"%53\", \"%54\", \"%55\", \"%56\", \"%57\",\n-        \"%58\", \"%59\", \"%5a\", \"%5b\", \"%5c\", \"%5d\", \"%5e\", \"%5f\",\n-        \"%60\", \"%61\", \"%62\", \"%63\", \"%64\", \"%65\", \"%66\", \"%67\",\n-        \"%68\", \"%69\", \"%6a\", \"%6b\", \"%6c\", \"%6d\", \"%6e\", \"%6f\",\n-        \"%70\", \"%71\", \"%72\", \"%73\", \"%74\", \"%75\", \"%76\", \"%77\",\n-        \"%78\", \"%79\", \"%7a\", \"%7b\", \"%7c\", \"%7d\", \"%7e\", \"%7f\",\n-        \"%80\", \"%81\", \"%82\", \"%83\", \"%84\", \"%85\", \"%86\", \"%87\",\n-        \"%88\", \"%89\", \"%8a\", \"%8b\", \"%8c\", \"%8d\", \"%8e\", \"%8f\",\n-        \"%90\", \"%91\", \"%92\", \"%93\", \"%94\", \"%95\", \"%96\", \"%97\",\n-        \"%98\", \"%99\", \"%9a\", \"%9b\", \"%9c\", \"%9d\", \"%9e\", \"%9f\",\n-        \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%a6\", \"%a7\",\n-        \"%a8\", \"%a9\", \"%aa\", \"%ab\", \"%ac\", \"%ad\", \"%ae\", \"%af\",\n-        \"%b0\", \"%b1\", \"%b2\", \"%b3\", \"%b4\", \"%b5\", \"%b6\", \"%b7\",\n-        \"%b8\", \"%b9\", \"%ba\", \"%bb\", \"%bc\", \"%bd\", \"%be\", \"%bf\",\n-        \"%c0\", \"%c1\", \"%c2\", \"%c3\", \"%c4\", \"%c5\", \"%c6\", \"%c7\",\n-        \"%c8\", \"%c9\", \"%ca\", \"%cb\", \"%cc\", \"%cd\", \"%ce\", \"%cf\",\n-        \"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%d4\", \"%d5\", \"%d6\", \"%d7\",\n-        \"%d8\", \"%d9\", \"%da\", \"%db\", \"%dc\", \"%dd\", \"%de\", \"%df\",\n-        \"%e0\", \"%e1\", \"%e2\", \"%e3\", \"%e4\", \"%e5\", \"%e6\", \"%e7\",\n-        \"%e8\", \"%e9\", \"%ea\", \"%eb\", \"%ec\", \"%ed\", \"%ee\", \"%ef\",\n-        \"%f0\", \"%f1\", \"%f2\", \"%f3\", \"%f4\", \"%f5\", \"%f6\", \"%f7\",\n-        \"%f8\", \"%f9\", \"%fa\", \"%fb\", \"%fc\", \"%fd\", \"%fe\", \"%ff\"\n-    };\n+    /*\n+     * The characters in this string are always safe to use.\n+     */\n+    private static final String SAFE_CHARACTERS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \n     private final boolean usePlusForSpace;\n-\n-    private final List<Character> safeChars = new ArrayList<>();\n+    private final Set<Integer> safeCharacterPoints;\n \n     /**\n      * Creates a percent escaper.\n-     * @param safeChars a collection of characters that will not be escaped\n-     * @param usePlusForSpace escape ' ' as '+' if true, \"%20\" otherwise\n+     *\n+     * @param safeCharacters Collection of characters that won't be escaped.\n+     * @param usePlusForSpace If true {@code ' '} will be escaped as {@code '+'} instead of {@code \"%20\"}.\n      */\n-    PercentEscaper(String safeChars, boolean usePlusForSpace) {\n-        for (int i = 0; i != safeChars.length(); i++) {\n-            this.safeChars.add(safeChars.charAt(i));\n-        }\n+    PercentEscaper(String safeCharacters, boolean usePlusForSpace) {", "originalCommit": "1d9938bab64a751b1e1735ad6f5dd283ab6a9dc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTEyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409275121", "bodyText": "Good idea, will add a check for that.", "author": "alzimmermsft", "createdAt": "2020-04-16T04:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1OTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczMTgzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409731830", "bodyText": "Added", "author": "alzimmermsft", "createdAt": "2020-04-16T17:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1OTUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MjIxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409262212", "bodyText": "These would be a good test cases to include as well.\nArguments.arguments(new PercentEscaper( \"\u0939\", false),  \"\u0939\", \"\u0939\")\nnew PercentEscaper(\" \", true); // this should throw exception", "author": "srnagar", "createdAt": "2020-04-16T03:39:15Z", "path": "sdk/core/azure-core/src/test/java/com/azure/core/http/rest/PercentEscaperTests.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.rest;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+/**\n+ * Tests {@link PercentEscaper}.\n+ */\n+public class PercentEscaperTests {\n+    @ParameterizedTest\n+    @MethodSource(\"escapeSupplier\")\n+    public void escape(PercentEscaper escaper, String original, String expected) {\n+        assertEquals(expected, escaper.escape(original));\n+    }\n+\n+    private static Stream<Arguments> escapeSupplier() {\n+        PercentEscaper defaultEscaper = new PercentEscaper(null, false);\n+\n+        return Stream.of(\n+            Arguments.arguments(defaultEscaper, \"$\", \"%24\"),\n+            Arguments.arguments(defaultEscaper, \"\u00a2\", \"%C2%A2\"),\n+            Arguments.arguments(defaultEscaper, \"\u0939\", \"%E0%A4%B9\"),\n+            Arguments.arguments(defaultEscaper, \"\u20ac\", \"%E2%82%AC\"),\n+            Arguments.arguments(defaultEscaper, \"\ud55c\", \"%ED%95%9C\"),\n+            Arguments.arguments(defaultEscaper, \"\u5186\", \"%E5%86%86\"),\n+            Arguments.arguments(defaultEscaper, \"\\uD800\\uDF48\", \"%F0%90%8D%88\"),\n+            Arguments.arguments(defaultEscaper, \"\u65e5\u672c\u8a9e\", \"%E6%97%A5%E6%9C%AC%E8%AA%9E\"),\n+            Arguments.arguments(defaultEscaper, \" \", \"%20\"),\n+            Arguments.arguments(new PercentEscaper(null, true), \" \", \"+\"),\n+            Arguments.arguments(new PercentEscaper(\"$\", false), \"$\", \"$\")", "originalCommit": "1d9938bab64a751b1e1735ad6f5dd283ab6a9dc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTQwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409275409", "bodyText": "PercentEscaper is package private with public static instance available, shouldn't see these inputs, can add tests though.", "author": "alzimmermsft", "createdAt": "2020-04-16T04:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MjIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyODM1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409728358", "bodyText": "Added", "author": "alzimmermsft", "createdAt": "2020-04-16T17:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MjIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MzEzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409263138", "bodyText": "This is a semantic breaking change for users as it now encodes strings differently and requires minor version bump.", "author": "srnagar", "createdAt": "2020-04-16T03:43:02Z", "path": "sdk/core/azure-core/src/test/java/com/azure/core/http/rest/SwaggerMethodParserTests.java", "diffHunk": "@@ -331,7 +331,7 @@ public void querySubstitution(Method method, Object[] arguments, Map<String, Str\n             Arguments.of(substitution, null, null),\n             Arguments.of(substitution, toObjectArray(\"raw\", true), createExpectedParameters(\"raw\", true)),\n             Arguments.of(substitution, toObjectArray(null, true), createExpectedParameters(null, true)),\n-            Arguments.of(substitution, toObjectArray(\"{sub1}\", false), createExpectedParameters(\"%7bsub1%7d\", false)),\n+            Arguments.of(substitution, toObjectArray(\"{sub1}\", false), createExpectedParameters(\"%7Bsub1%7D\", false)),", "originalCommit": "1d9938bab64a751b1e1735ad6f5dd283ab6a9dc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTYwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10273#discussion_r409275600", "bodyText": "I believe hex characters should be invariant on casing, I just copied the hex array creation from another of our classes and it used uppercase.", "author": "alzimmermsft", "createdAt": "2020-04-16T04:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MzEzOA=="}], "type": "inlineReview"}, {"oid": "f67a6196bb58d2b9f9c614bff7be221a6e3a70f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f67a6196bb58d2b9f9c614bff7be221a6e3a70f2", "message": "Merge branch 'master' into AzStorage_JapaneseCharacterIssue", "committedDate": "2020-04-16T17:02:53Z", "type": "commit"}, {"oid": "f3ae0648eb919fc55b3bf7dd3b763ebfe410f779", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f3ae0648eb919fc55b3bf7dd3b763ebfe410f779", "message": "Added more tests, added validation to constructor, fixed handling of trailing high surrogate", "committedDate": "2020-04-16T17:35:37Z", "type": "commit"}, {"oid": "137889e7b83ece3135446279c6446312b98437d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/137889e7b83ece3135446279c6446312b98437d2", "message": "Fix small linting issue", "committedDate": "2020-04-16T17:47:34Z", "type": "commit"}]}