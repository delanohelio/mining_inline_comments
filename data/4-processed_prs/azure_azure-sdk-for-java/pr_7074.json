{"pr_number": 7074, "pr_title": "AAD sample and README revised, and correct indentation", "pr_createdAt": "2020-01-02T17:28:20Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7074", "timeline": [{"oid": "f3e2f6625a053f33f3e98c9b99d4547f06437448", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f3e2f6625a053f33f3e98c9b99d4547f06437448", "message": "revised aad sample and readme", "committedDate": "2020-01-01T23:12:08Z", "type": "commit"}, {"oid": "27b1143a9cbfd48f475f1af5549d9e039e201448", "url": "https://github.com/Azure/azure-sdk-for-java/commit/27b1143a9cbfd48f475f1af5549d9e039e201448", "message": "indentation", "committedDate": "2020-01-02T17:24:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU5ODQwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7074#discussion_r362598405", "bodyText": "Prefer to use code embedding for READMEs.", "author": "srnagar", "createdAt": "2020-01-02T19:29:29Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/README.md", "diffHunk": "@@ -135,14 +137,60 @@ ConfigurationAsyncClient client = new ConfigurationClientBuilder()\n         .buildAsyncClient();\n ```\n \n-You can also use `TokenCredential` to create a configuration client, such as an Azure Active Directory (AAD) token.\n-Unlike a connection string if you're using an AAD token you must supply the endpoint of AppConfiguration service. The\n-endpoint can be obtained by going to your App Configuration instance in the Azure portal and navigating to \"Overview\"\n-page and look for the \"Endpoint\" keyword. \n+#### Use AAD token\n+\n+Here we demonstrate using [DefaultAzureCredential][default_cred_ref]\n+to authenticate as a service principal. However, the configuration client\n+accepts any [azure-identity][azure_identity] credential. See the\n+[azure-identity][azure_identity] documentation for more information about other\n+credentials.\n+\n+##### Create a service principal (optional)\n+This [Azure CLI][azure_cli] snippet shows how to create a\n+new service principal. Before using it, replace \"your-application-name\" with\n+the appropriate name for your service principal.\n+\n+Create a service principal:\n+```Bash\n+az ad sp create-for-rbac --name http://my-application --skip-assignment\n+```\n+\n+> Output:\n+> ```json\n+> {\n+>     \"appId\": \"generated app id\",\n+>     \"displayName\": \"my-application\",\n+>     \"name\": \"http://my-application\",\n+>     \"password\": \"random password\",\n+>     \"tenant\": \"tenant id\"\n+> }\n+> ```\n+\n+Use the output to set **AZURE_CLIENT_ID** (\"appId\" above), **AZURE_CLIENT_SECRET**\n+(\"password\" above) and **AZURE_TENANT_ID** (\"tenant\" above) environment variables.\n+The following example shows a way to do this in Bash:\n+```Bash\n+export AZURE_CLIENT_ID=\"generated app id\"\n+export AZURE_CLIENT_SECRET=\"random password\"\n+export AZURE_TENANT_ID=\"tenant id\"\n+```\n+\n+Assign one of the applicable [App Configuration roles][app_config_role] to the service principal.\n+\n+##### Create a client\n+Once the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and\n+**AZURE_TENANT_ID** environment variables are set,\n+[DefaultAzureCredential][default_cred_ref] will be able to authenticate the\n+configuration client.\n+\n+Constructing the client also requires your configuration store's URL, which you can\n+get from the Azure CLI or the Azure Portal. In the Azure Portal, the URL can be found listed as the service \"Endpoint\"\n \n ```Java\n-// An example of using TokenCredential and Endpoint to create a synchronous client\n-TokenCredential credential = new DefaultAzureCredential();\n+import com.azure.identity.DefaultAzureCredential;", "originalCommit": "27b1143a9cbfd48f475f1af5549d9e039e201448", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY5NzI2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7074#discussion_r362697264", "bodyText": "updated.", "author": "mssfang", "createdAt": "2020-01-03T03:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU5ODQwNQ=="}], "type": "inlineReview"}, {"oid": "f4a1b192b78412f42356b495239c767da9203083", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f4a1b192b78412f42356b495239c767da9203083", "message": "add ReadmeSamples and update readme automatically", "committedDate": "2020-01-03T03:14:17Z", "type": "commit"}, {"oid": "5661c8f2407975640da927b58a321b0b08070813", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5661c8f2407975640da927b58a321b0b08070813", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into AAD-sample-and-readme-revised", "committedDate": "2020-01-03T03:23:31Z", "type": "commit"}, {"oid": "9da9b5a8076eb842413d400cf87f40295584d668", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9da9b5a8076eb842413d400cf87f40295584d668", "message": "fixes spotbugs", "committedDate": "2020-01-03T18:15:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxNTk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7074#discussion_r362915985", "bodyText": "I'd put this in a try-finally block, so if any errors happen, it'll always try to dispose of the connection.\ntry {\n} finally {\n    if (conn != null) {\n        conn.close();\n    }\n}", "author": "conniey", "createdAt": "2020-01-03T18:39:51Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/README.md", "diffHunk": "@@ -223,14 +223,15 @@ String url = configurationClient.getConfigurationSetting(urlKey, urlLabel).getVa\n Connection conn;\n try {\n     conn = DriverManager.getConnection(url);\n+    conn.close();", "originalCommit": "9da9b5a8076eb842413d400cf87f40295584d668", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1MzIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7074#discussion_r362953223", "bodyText": "but how do you handle the exception? Ignore the exception and throws it? like the example below:\n public void sqlExample() throws SQLException {\n        ConfigurationClient configurationClient = new ConfigurationClientBuilder()\n            .connectionString(connectionString)\n            .buildClient();\n\n        // urlLabel is optional\n        String url = configurationClient.getConfigurationSetting(urlKey, urlLabel).getValue();\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(url);\n        } finally {\n            if (conn != null) {\n                conn.close();\n            }\n        }\n    }", "author": "mssfang", "createdAt": "2020-01-03T20:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxNTk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NzQyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7074#discussion_r362957424", "bodyText": "Try-finally can have a catch block too.\nhttps://www.javatpoint.com/finally-block-in-exception-handling", "author": "conniey", "createdAt": "2020-01-03T20:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxNTk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2MjY4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7074#discussion_r362962680", "bodyText": "conn.close() throws exception as well", "author": "mssfang", "createdAt": "2020-01-03T21:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxNTk4NQ=="}], "type": "inlineReview"}, {"oid": "df123e89bf62a1654eff8cf33abfeddd9c1ae3f9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df123e89bf62a1654eff8cf33abfeddd9c1ae3f9", "message": "try catch final revised", "committedDate": "2020-01-03T21:50:42Z", "type": "commit"}]}