{"pr_number": 9866, "pr_title": "ServiceBus Track1 test migration", "pr_createdAt": "2020-04-05T17:17:04Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9866", "timeline": [{"oid": "853941f590cf95d8cd11507a49500495848bc31f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/853941f590cf95d8cd11507a49500495848bc31f", "message": "ServiceBus Track1 test migration", "committedDate": "2020-04-05T17:14:16Z", "type": "commit"}, {"oid": "f0595d29683e0d7d276eaa7d5fbdaaa3b6a5f02e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0595d29683e0d7d276eaa7d5fbdaaa3b6a5f02e", "message": "ServiceBus Track1 test migration", "committedDate": "2020-04-05T19:45:20Z", "type": "commit"}, {"oid": "e885f980cb55dc4820acb564f978c98601422ab0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e885f980cb55dc4820acb564f978c98601422ab0", "message": "ServiceBus Track1 test migration", "committedDate": "2020-04-05T23:28:26Z", "type": "commit"}, {"oid": "dbc13d442842dc985c82c9b465db4190a0a2b2d4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbc13d442842dc985c82c9b465db4190a0a2b2d4", "message": "Adding live test from track 1", "committedDate": "2020-04-05T23:31:25Z", "type": "commit"}, {"oid": "dfdf48a0ae27c40dd1586705b90fae40e894cbef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dfdf48a0ae27c40dd1586705b90fae40e894cbef", "message": "Adding live test from track 1", "committedDate": "2020-04-05T23:32:53Z", "type": "commit"}, {"oid": "c74325c595c952cbfece1fcde672d022efe398d0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c74325c595c952cbfece1fcde672d022efe398d0", "message": "Adding live test from track 1", "committedDate": "2020-04-05T23:33:57Z", "type": "commit"}, {"oid": "779346f1a70e18a24c71227394fbad0502691d7c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/779346f1a70e18a24c71227394fbad0502691d7c", "message": "Adding live test from track 1", "committedDate": "2020-04-06T03:19:00Z", "type": "commit"}, {"oid": "a326345d3c8e5c2c8fb77f5318bc889c9739b9c4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a326345d3c8e5c2c8fb77f5318bc889c9739b9c4", "message": "Fixed test", "committedDate": "2020-04-06T05:52:19Z", "type": "commit"}, {"oid": "28c64cc14d643f8ad204c922d5784b2673df1baa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28c64cc14d643f8ad204c922d5784b2673df1baa", "message": "added more test", "committedDate": "2020-04-06T07:41:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyNzkxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404227918", "bodyText": "This logic is done in MessageProcessor now.", "author": "conniey", "createdAt": "2020-04-06T16:31:42Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -393,7 +394,16 @@ public String getEntityPath() {\n     public Mono<ServiceBusReceivedMessage> receiveDeferredMessage(long sequenceNumber) {\n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n-            .flatMap(node -> node.receiveDeferredMessage(receiveMode, sequenceNumber));\n+            .flatMap(node -> node.receiveDeferredMessage(receiveMode, sequenceNumber))\n+            .map(receivedMessage -> {", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyODI4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404228288", "bodyText": "getQueueName(). When running the test if you set the right environment variables, you don't need to make these manual changes.", "author": "conniey", "createdAt": "2020-04-06T16:32:13Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -34,7 +36,7 @@\n \n     @Override\n     protected void beforeTest() {\n-        final String queueName = getQueueName();\n+        final String queueName = \"hemant-test2\"; //getQueueName();", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyODk5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404228991", "bodyText": "spelling mistake: Schedule", "author": "conniey", "createdAt": "2020-04-06T16:33:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -115,7 +124,7 @@ void peekMessage() {\n      * Verifies that we can schedule and peek a message.\n      */\n     @Test\n-    void scheduleMessage() {\n+    void testSendSceduledMessageAndReceive() {", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyOTIwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404229204", "bodyText": "Spelling mistake: schedule", "author": "conniey", "createdAt": "2020-04-06T16:33:33Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -136,11 +145,45 @@ void scheduleMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and receive multiple messages.\n+     */\n+    @Test\n+    void testSendMultipleSceduledMessageAndReceive() {", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMDk4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404230984", "bodyText": "Why prefixing with \"test\"? It's implied that \"@Test\" is a test.", "author": "conniey", "createdAt": "2020-04-06T16:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyOTIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzM4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404237380", "bodyText": "I copied these names from track1 as it is, and because did not want to miss any one of them, I kept names how it is in track 1, Let me change them now.", "author": "hemanttanwar", "createdAt": "2020-04-06T16:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyOTIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyOTgzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404229834", "bodyText": "Should be consistent about block timeouts. There is  a TIMEOUT variable in IntegrationTestBase.", "author": "conniey", "createdAt": "2020-04-06T16:34:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -136,11 +145,45 @@ void scheduleMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and receive multiple messages.\n+     */\n+    @Test\n+    void testSendMultipleSceduledMessageAndReceive() {\n+        // Arrange\n+        final String messageId1 = UUID.randomUUID().toString();\n+        final String messageId2 = UUID.randomUUID().toString();\n+        String contents = \"Some-contents\";\n+        final ServiceBusMessage message1 = TestUtils.getServiceBusMessage(contents, messageId1, 0);\n+        final ServiceBusMessage message2 = TestUtils.getServiceBusMessage(contents, messageId2, 0);\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(1);\n+\n+        sender.scheduleMessage(message1, scheduledEnqueueTime)\n+            .block();\n+        sender.scheduleMessage(message2, scheduledEnqueueTime)\n+            .block(Duration.ofSeconds(4));", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMDc1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404230754", "bodyText": "I wouldn't do this equality check. If any prior tests fail, those old messages will be in the queue, so it'll be received first. And, this test won't delete the matching messageId and fail. That's what some of our live tests are encountering.", "author": "conniey", "createdAt": "2020-04-06T16:35:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -136,11 +145,45 @@ void scheduleMessage() {\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and receive multiple messages.\n+     */\n+    @Test\n+    void testSendMultipleSceduledMessageAndReceive() {\n+        // Arrange\n+        final String messageId1 = UUID.randomUUID().toString();\n+        final String messageId2 = UUID.randomUUID().toString();\n+        String contents = \"Some-contents\";\n+        final ServiceBusMessage message1 = TestUtils.getServiceBusMessage(contents, messageId1, 0);\n+        final ServiceBusMessage message2 = TestUtils.getServiceBusMessage(contents, messageId2, 0);\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(1);\n+\n+        sender.scheduleMessage(message1, scheduledEnqueueTime)\n+            .block();\n+        sender.scheduleMessage(message2, scheduledEnqueueTime)\n+            .block(Duration.ofSeconds(4));\n+\n+        // Assert & Act\n+        String finalContents = contents;\n+        StepVerifier.create(receiveDeleteModeReceiver.receive().take(2))\n+            .assertNext(receivedMessage -> {\n+                Assertions.assertArrayEquals(finalContents.getBytes(), receivedMessage.getBody());\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+                Assertions.assertEquals(messageId1, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMTI4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404231280", "bodyText": "Same with other instances of this assertion.", "author": "conniey", "createdAt": "2020-04-06T16:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMDc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMjI3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404232272", "bodyText": "Why? Our strings are encoded as byte arrays, so I'm not sure what extra value this brings.", "author": "conniey", "createdAt": "2020-04-06T16:38:09Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/TestUtils.java", "diffHunk": "@@ -133,6 +133,17 @@ public static ServiceBusMessage getServiceBusMessage(String body, String message\n         return message;\n     }\n \n+    public static ServiceBusMessage getServiceBusMessageBinary(String messageTrackingValue, int position, int messageSize) {", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzE5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404233198", "bodyText": "This is testing the service rather than our APIs. I think we should be conscious of which service tests we bring over.", "author": "conniey", "createdAt": "2020-04-06T16:39:29Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -326,4 +369,256 @@ void autoRenewLockOnReceiveMessage() {\n             receiver.close();\n         }\n     }\n+\n+    @Test\n+    void testBasicReceiveAndDeleteWithBinaryData() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessageBinary(messageTrackingId, 0, 64);\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiveDeleteModeReceiver.receive()))\n+            .assertNext(receivedMessage ->\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+            .expectNoEvent(Duration.ofSeconds(2))\n+            .thenCancel()\n+            .verify();\n+    }\n+\n+    @Test\n+    void testBasicReceiveAndCompleteWithLargeBinaryData() {", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzI5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404237293", "bodyText": "I am not convinced that adding \"Basic\" brings any value; it makes the method name more cumbersome to read.\nreceiveAndComplete()\nreceiveAndCompleteBySequenceNumber()\nis sufficient to describe the scenario.", "author": "conniey", "createdAt": "2020-04-06T16:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzMzE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDM4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404234382", "bodyText": "This is covered by testBasicReceiveAndDeleteWithBinaryData plus we always assert we get properties back.", "author": "conniey", "createdAt": "2020-04-06T16:41:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -326,4 +369,256 @@ void autoRenewLockOnReceiveMessage() {\n             receiver.close();\n         }\n     }\n+\n+    @Test\n+    void testBasicReceiveAndDeleteWithBinaryData() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessageBinary(messageTrackingId, 0, 64);\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiveDeleteModeReceiver.receive()))\n+            .assertNext(receivedMessage ->\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+            .expectNoEvent(Duration.ofSeconds(2))\n+            .thenCancel()\n+            .verify();\n+    }\n+\n+    @Test\n+    void testBasicReceiveAndCompleteWithLargeBinaryData() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessageBinary(messageTrackingId, 0, 64 * 1024);\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiveDeleteModeReceiver.receive()))\n+            .assertNext(receivedMessage ->\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+            .expectNoEvent(Duration.ofSeconds(2))\n+            .thenCancel()\n+            .verify();\n+    }\n+\n+    @Test\n+    void testBasicReceiveAndComplete() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessageBinary(messageTrackingId, 0, 64 * 1024);\n+\n+        final ServiceBusReceivedMessage receivedMessage = sender.send(message)\n+            .then(receiverManualComplete.receive().next())\n+            .block(Duration.ofSeconds(30));\n+\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        // Assert & Act\n+        StepVerifier.create(receiverManualComplete.complete(receivedMessage))\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    void testBasicReceiveAndCompleteMessageWithProperties() {", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDU2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404234566", "bodyText": "This is covered already.", "author": "conniey", "createdAt": "2020-04-06T16:41:32Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -326,4 +369,256 @@ void autoRenewLockOnReceiveMessage() {\n             receiver.close();\n         }\n     }\n+\n+    @Test\n+    void testBasicReceiveAndDeleteWithBinaryData() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessageBinary(messageTrackingId, 0, 64);\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiveDeleteModeReceiver.receive()))\n+            .assertNext(receivedMessage ->\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+            .expectNoEvent(Duration.ofSeconds(2))\n+            .thenCancel()\n+            .verify();\n+    }\n+\n+    @Test\n+    void testBasicReceiveAndCompleteWithLargeBinaryData() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessageBinary(messageTrackingId, 0, 64 * 1024);\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiveDeleteModeReceiver.receive()))\n+            .assertNext(receivedMessage ->\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+            .expectNoEvent(Duration.ofSeconds(2))\n+            .thenCancel()\n+            .verify();\n+    }\n+\n+    @Test\n+    void testBasicReceiveAndComplete() {", "originalCommit": "28c64cc14d643f8ad204c922d5784b2673df1baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a86c29f2a5cc88334dd4e3e7664ddcb28614a72f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a86c29f2a5cc88334dd4e3e7664ddcb28614a72f", "message": "Review Comments", "committedDate": "2020-04-06T17:26:49Z", "type": "commit"}, {"oid": "83476b0ca0dafad0d4ab53d32a744d1e2831f8cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/83476b0ca0dafad0d4ab53d32a744d1e2831f8cf", "message": "Review Comments", "committedDate": "2020-04-06T17:37:35Z", "type": "commit"}, {"oid": "003513d505814f44877fffaa963c7d736e05f3d1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/003513d505814f44877fffaa963c7d736e05f3d1", "message": "updated the version", "committedDate": "2020-04-06T17:58:04Z", "type": "commit"}, {"oid": "e25439a4c4bee78354272cc6c068c9444e7ed19a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e25439a4c4bee78354272cc6c068c9444e7ed19a", "message": "undo the version change", "committedDate": "2020-04-06T18:02:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyMzMwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404323300", "bodyText": "schedule is spelt wrong.", "author": "conniey", "createdAt": "2020-04-06T19:07:14Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -131,16 +140,47 @@ void scheduleMessage() {\n             .assertNext(receivedMessage -> {\n                 Assertions.assertArrayEquals(contents.getBytes(), receivedMessage.getBody());\n                 Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n-                Assertions.assertEquals(messageId, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));\n             })\n             .verifyComplete();\n     }\n \n+    /**\n+     * Verifies that we can schedule and receive multiple messages.\n+     */\n+    @Test\n+    void sendMultipleSceduledMessageAndReceive() {\n+        // Arrange\n+        final String messageId1 = UUID.randomUUID().toString();\n+        final String messageId2 = UUID.randomUUID().toString();\n+        String contents = \"Some-contents\";\n+        final ServiceBusMessage message1 = TestUtils.getServiceBusMessage(contents, messageId1, 0);\n+        final ServiceBusMessage message2 = TestUtils.getServiceBusMessage(contents, messageId2, 0);\n+        final Instant scheduledEnqueueTime = Instant.now().plusSeconds(1);\n+\n+        sender.scheduleMessage(message1, scheduledEnqueueTime)\n+            .block(TIMEOUT);\n+        sender.scheduleMessage(message2, scheduledEnqueueTime)\n+            .block(TIMEOUT);\n+\n+        // Assert & Act\n+        String finalContents = contents;\n+        StepVerifier.create(receiveDeleteModeReceiver.receive().take(2))\n+            .assertNext(receivedMessage -> {\n+                Assertions.assertArrayEquals(finalContents.getBytes(), receivedMessage.getBody());\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+            })\n+             .assertNext(receivedMessage -> {\n+                 Assertions.assertArrayEquals(finalContents.getBytes(), receivedMessage.getBody());\n+                 Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+             })\n+            .verifyComplete();\n+    }\n+\n     /**\n      * Verifies that we can cancel a scheduled message.\n      */\n     @Test\n-    void cancelScheduleMessage() {\n+    void sceduledMessageAndCancel() {", "originalCommit": "e25439a4c4bee78354272cc6c068c9444e7ed19a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51809ba437f27f87c287fa9a28a19a76b23fa112", "url": "https://github.com/Azure/azure-sdk-for-java/commit/51809ba437f27f87c287fa9a28a19a76b23fa112", "message": "spelling correction", "committedDate": "2020-04-06T19:21:10Z", "type": "commit"}, {"oid": "0627fa78f4590bc85750789c7ce31d4a715bbc79", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0627fa78f4590bc85750789c7ce31d4a715bbc79", "message": "receiveDeferredMessage : addding locktoken in container", "committedDate": "2020-04-06T21:32:30Z", "type": "commit"}, {"oid": "d155a1284f7e8360fcb9274b1ea6df35353698a0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d155a1284f7e8360fcb9274b1ea6df35353698a0", "message": "receiveDeferredMessage : addding locktoken in container", "committedDate": "2020-04-06T21:34:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMzMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404403317", "bodyText": "It won't be zero lock token. It'll be null or empty. They had zero lock token because they used uuid before.", "author": "conniey", "createdAt": "2020-04-06T21:36:01Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -433,7 +435,15 @@ public String getEntityPath() {\n     public Mono<ServiceBusReceivedMessage> receiveDeferredMessage(long sequenceNumber) {\n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n-            .flatMap(node -> node.receiveDeferredMessage(receiveMode, sequenceNumber));\n+            .flatMap(node -> node.receiveDeferredMessage(receiveMode, sequenceNumber))\n+            .map(receivedMessage -> {\n+                if (receiveMode == ReceiveMode.PEEK_LOCK && !CoreUtils.isNullOrEmpty(receivedMessage.getLockToken())) {", "originalCommit": "d155a1284f7e8360fcb9274b1ea6df35353698a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNDI1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404404250", "bodyText": "So you don't need to do the conversion to uuid from string", "author": "conniey", "createdAt": "2020-04-06T21:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMzMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMzc3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404403774", "bodyText": "You need to format this document. Ctrl+Alt+L. The spacing is off.", "author": "conniey", "createdAt": "2020-04-06T21:36:56Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -327,4 +373,169 @@ void autoRenewLockOnReceiveMessage() {\n             receiver.close();\n         }\n     }\n+\n+    @Test\n+    void receiveAndDeleteWithBinaryData() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS, messageTrackingId, 0);\n+        final Duration timeout = Duration.ofSeconds(2);\n+        final ReceiveAsyncOptions options = new ReceiveAsyncOptions().setEnableAutoComplete(false);\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiveDeleteModeReceiver.receive(options)))\n+            .assertNext(receivedMessage ->\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID)))\n+            .expectNoEvent(timeout)\n+            .thenCancel()\n+            .verify();\n+    }\n+\n+    @Test\n+    void receiveAndAbandon() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS, messageTrackingId, 0);\n+\n+        final ServiceBusReceivedMessage receivedMessage = sender.send(message)\n+            .then(receiverManualComplete.receive().next())\n+            .block(TIMEOUT);\n+\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        // Assert & Act\n+        StepVerifier.create(receiverManualComplete.abandon(receivedMessage))\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    void receiveBySequenceNumberAndDeadletter() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS, messageTrackingId, 0);\n+        final Duration timeout = Duration.ofSeconds(2);\n+        final ReceiveAsyncOptions options = new ReceiveAsyncOptions().setEnableAutoComplete(false);\n+\n+        final ServiceBusReceivedMessage receivedMessage = sender.send(message)\n+            .then(receiverManualComplete.receive(options).next())\n+            .block(TIMEOUT);\n+\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        receiverManualComplete.defer(receivedMessage).block(TIMEOUT);\n+\n+        final ServiceBusReceivedMessage receivedDeferredMessage =  receiverManualComplete\n+            .receiveDeferredMessage(receivedMessage.getSequenceNumber()).block(TIMEOUT);\n+\n+        Assertions.assertNotNull(receivedDeferredMessage);\n+        Assertions.assertEquals(receivedMessage.getSequenceNumber(), receivedDeferredMessage.getSequenceNumber());\n+\n+        receiverManualComplete.deadLetter(receivedDeferredMessage).block(TIMEOUT);\n+\n+        // Assert & Act\n+        StepVerifier.create(receiverManualComplete.receiveDeferredMessage(receivedMessage.getSequenceNumber()))\n+            .expectNextCount(0)\n+            .thenCancel()\n+            .verify(timeout);\n+    }\n+\n+    @Test\n+    void receiveBySequenceNumberAndAbandon() {\n+        // Arrange\n+        final String messageTrackingId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(CONTENTS, messageTrackingId, 0);\n+        final Duration timeout = Duration.ofSeconds(2);\n+\n+        final ServiceBusReceivedMessage receivedMessage = sender.send(message)\n+            .then(receiverManualComplete.receive().next())\n+            .block(TIMEOUT);\n+\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        receiverManualComplete.defer(receivedMessage).block(TIMEOUT);\n+\n+        final ServiceBusReceivedMessage receivedDeferredMessage =  receiverManualComplete", "originalCommit": "d155a1284f7e8360fcb9274b1ea6df35353698a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5eb41c954a422094472dea486f9d7f04910e1330", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5eb41c954a422094472dea486f9d7f04910e1330", "message": "receiveDeferredMessage : addding locktoken in container", "committedDate": "2020-04-06T21:55:47Z", "type": "commit"}, {"oid": "258bf2990598b32193d0966da5da16c0e6e2c672", "url": "https://github.com/Azure/azure-sdk-for-java/commit/258bf2990598b32193d0966da5da16c0e6e2c672", "message": "receiveDeferredMessage : addding locktoken in container", "committedDate": "2020-04-06T21:56:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNDI3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404414271", "bodyText": "Why is this thread.sleep here?", "author": "conniey", "createdAt": "2020-04-06T21:59:26Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -64,5 +67,7 @@ public static void main(String[] args) {\n \n         // Close the receiver.\n         receiverAsyncClient.close();\n+", "originalCommit": "258bf2990598b32193d0966da5da16c0e6e2c672", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNDQ3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9866#discussion_r404414474", "bodyText": "Add a comment about why we are sleeping for 30 seconds of it is needed.", "author": "conniey", "createdAt": "2020-04-06T21:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNDI3MQ=="}], "type": "inlineReview"}, {"oid": "28b319502a4fcdfac72208f0aaffa28fd5f69a74", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28b319502a4fcdfac72208f0aaffa28fd5f69a74", "message": " fixed spacing", "committedDate": "2020-04-06T21:59:58Z", "type": "commit"}]}