{"pr_number": 11116, "pr_title": "Tracing updates", "pr_createdAt": "2020-05-13T00:52:11Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11116", "timeline": [{"oid": "9b688c639124749f511b90a4d60a7f844a306fc9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b688c639124749f511b90a4d60a7f844a306fc9", "message": "update log level in tracing lib", "committedDate": "2020-05-12T23:54:13Z", "type": "commit"}, {"oid": "21fd4bf37fb3ab27656e2bb8076971c6b47adb62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21fd4bf37fb3ab27656e2bb8076971c6b47adb62", "message": "update list of tracers to single tracer", "committedDate": "2020-05-13T00:48:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0OTc5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11116#discussion_r424549790", "bodyText": "Do we have any mechanisms available which will ensure a certain tracer is loaded if I happen to bring multiple? This can be a follow-up as it is definitely an edge case.", "author": "alzimmermsft", "createdAt": "2020-05-13T15:56:05Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerProxy.java", "diffHunk": "@@ -17,14 +17,13 @@\n  */\n public final class TracerProxy {\n \n-    private static final List<Tracer> TRACERS;\n+    private static Tracer TRACER;\n+\n     static {\n         ServiceLoader<Tracer> serviceLoader = ServiceLoader.load(Tracer.class);\n-        List<Tracer> tracers = new ArrayList<>();\n-        for (Tracer tracer : serviceLoader) {\n-            tracers.add(tracer);\n+        if (serviceLoader != null) {\n+            TRACER = serviceLoader.iterator().next();", "originalCommit": "21fd4bf37fb3ab27656e2bb8076971c6b47adb62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0ODU5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11116#discussion_r424648590", "bodyText": "Yeah, I think we could add a feature where a user preference could be preferred for a single implementation if multiple found.", "author": "samvaity", "createdAt": "2020-05-13T18:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0OTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzQyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11116#discussion_r424673429", "bodyText": "Or, if there are multiple instances of tracer implementations, should we support all of them? Create spans on each tracer implementation?", "author": "srnagar", "createdAt": "2020-05-13T19:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0OTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwOTMzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11116#discussion_r424709330", "bodyText": "There is no real use case to support multiple implementations, as users would always tie it with a single implementation of tracer to an exporter.\nIt brings in a lot of complexity for the users of the library to actually look to configure each span with a single tracer implementation and then the corresponding exporter for that tracer. As mentioned above, not a real use case and something only Java SDK was supporting.", "author": "samvaity", "createdAt": "2020-05-13T20:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0OTc5MA=="}], "type": "inlineReview"}, {"oid": "320d89a5c537d037e45465683b832c1c38c8bfbf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/320d89a5c537d037e45465683b832c1c38c8bfbf", "message": "update single tracer support amqp", "committedDate": "2020-05-13T18:55:28Z", "type": "commit"}, {"oid": "320d89a5c537d037e45465683b832c1c38c8bfbf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/320d89a5c537d037e45465683b832c1c38c8bfbf", "message": "update single tracer support amqp", "committedDate": "2020-05-13T18:55:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDE5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11116#discussion_r424674191", "bodyText": "Why does this API return Context? It's inconsistent with setAttribute() API which returns a void. Or, should setAttribute() return Context too since start() is also returning Context?", "author": "srnagar", "createdAt": "2020-05-13T19:18:18Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/tracing/TracerProxy.java", "diffHunk": "@@ -84,11 +86,9 @@ public static void end(int responseCode, Throwable error, Context context) {\n      * @return An updated {@link Context} object.\n      */\n     public static Context setSpanName(String spanName, Context context) {", "originalCommit": "320d89a5c537d037e45465683b832c1c38c8bfbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMzE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11116#discussion_r424713173", "bodyText": "start() should return a Context as we update the context to hold the span that it just created/started.\nsetAttribute()  shouldn't because we do not have anything to return. We are actually just using the span information from the provided Context.\nsetSpanName() I think this method is redundant to set the span name as we already use the provided context for that. I see it is only used in RestProxy here.", "author": "samvaity", "createdAt": "2020-05-13T20:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NDE5MQ=="}], "type": "inlineReview"}, {"oid": "1893a06a2e909c2d00201bb27bef24e4acec42f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1893a06a2e909c2d00201bb27bef24e4acec42f0", "message": "update tests", "committedDate": "2020-05-13T20:56:16Z", "type": "commit"}, {"oid": "1893a06a2e909c2d00201bb27bef24e4acec42f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1893a06a2e909c2d00201bb27bef24e4acec42f0", "message": "update tests", "committedDate": "2020-05-13T20:56:16Z", "type": "forcePushed"}, {"oid": "2fe7373b6e31599fc9c2565ec902c00ccc63e634", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2fe7373b6e31599fc9c2565ec902c00ccc63e634", "message": "update static variable name", "committedDate": "2020-05-17T19:53:18Z", "type": "commit"}]}