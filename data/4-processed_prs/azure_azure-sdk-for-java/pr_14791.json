{"pr_number": 14791, "pr_title": "Add Model API tests to ADT, fix a few ADT implementation details", "pr_createdAt": "2020-09-03T20:01:45Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14791", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMjczNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483222734", "bodyText": "@azabbasi I saw that you made this cast be for PagedResponseBase, but I had to revert that change to make this function work. Is that okay?", "author": "timtay-microsoft", "createdAt": "2020-09-03T20:02:30Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -788,7 +788,7 @@ public HttpPipeline getHttpPipeline() {\n                         objectPagedResponse.getHeaders(),\n                         convertedList,\n                         null,\n-                        ((PagedResponseBase) objectPagedResponse).getDeserializedHeaders());", "originalCommit": "ddcf2804ae87937160bf4a03efe05776e758ab4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyOTI1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483229250", "bodyText": "Just fyi - this is correct, the return type of the add model PL API is of type Response, so it needs to be cast to ResponseBase. I've had to make the same change in the samples PR as well #14781", "author": "abhipsaMisra", "createdAt": "2020-09-03T20:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMjczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MTg1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485051858", "bodyText": "This is no longer required, we have switched the return type back to List and this is now outdated.", "author": "azabbasi", "createdAt": "2020-09-08T16:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMjczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMzA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483223067", "bodyText": "(Here and below) this function will always throw a null pointer exception or something similar, so I fixed it to just always return a Mono.empty()", "author": "timtay-microsoft", "createdAt": "2020-09-03T20:03:13Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -909,7 +909,7 @@ public HttpPipeline getHttpPipeline() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Void> deleteModel(String modelId) {\n         return deleteModelWithResponse(modelId)\n-            .map(Response::getValue);", "originalCommit": "ddcf2804ae87937160bf4a03efe05776e758ab4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyOTY1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483229659", "bodyText": "+1\n.map(Response::getValue) returns null, which is not a valid return item from a Mono. So we need to map it to Mono.empty() instead.", "author": "abhipsaMisra", "createdAt": "2020-09-03T20:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMzA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMzMxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483223318", "bodyText": "Not sure if it was deliberate, but the sync client didn't have the minimal API for creating models, so I added it. @azabbasi can you comment on if we need this API or not?", "author": "timtay-microsoft", "createdAt": "2020-09-03T20:03:48Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -454,6 +454,16 @@ public void deleteRelationship(String digitalTwinId, String relationshipId) {\n     // Models APIs\n     //==================================================================================================================================================\n \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedIterable} of created models and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<ModelData> createModels(List<String> models) {\n+        return new PagedIterable<>(digitalTwinsAsyncClient.createModels(models, Context.NONE));\n+    }", "originalCommit": "ddcf2804ae87937160bf4a03efe05776e758ab4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NDg0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483294847", "bodyText": "As @azabbasi confirmed, we will need this minimal sync API", "author": "timtay-microsoft", "createdAt": "2020-09-03T22:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMzMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MjI0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485052245", "bodyText": "correct, this API is now added in master.", "author": "azabbasi", "createdAt": "2020-09-08T16:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIyMzMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzI0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483297244", "bodyText": "I am not sure I follow this - aren't the created models returned as a result of this API call - PagedFlux<ModelData>?", "author": "abhipsaMisra", "createdAt": "2020-09-03T23:01:34Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ModelsAsyncTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * Async client implementation of the model tests defined in {@link ModelsTestBase}\n+ */\n+public class ModelsAsyncTest extends ModelsTestBase {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void modelLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        // Create some models to test the lifecycle of\n+        List<ModelData> createdModels = new ArrayList<>();\n+        createModelsRunner(asyncClient, (modelsList) -> {\n+            StepVerifier.create(asyncClient.createModels(modelsList))\n+                .assertNext(createdModel -> {\n+                    // When creating models, the service will not return the model itself, so it will be manually", "originalCommit": "5e443f703e2a97a0fbe34cd53b08bec9bc972289", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzU5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483297590", "bodyText": "Or is it that ModelData.model is null?", "author": "abhipsaMisra", "createdAt": "2020-09-03T23:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNzc3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483307776", "bodyText": "ModelData.model is null when the service returns it from a createModel call. I'm reworking this code a bit", "author": "timtay-microsoft", "createdAt": "2020-09-03T23:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NzI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5ODM3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483298371", "bodyText": "I had been using org.apache.http.HttpStatus in the sample, but I like java.net.HttpURLConnection better; I'll make the switch.", "author": "abhipsaMisra", "createdAt": "2020-09-03T23:05:28Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ModelsAsyncTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * Async client implementation of the model tests defined in {@link ModelsTestBase}\n+ */\n+public class ModelsAsyncTest extends ModelsTestBase {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void modelLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        // Create some models to test the lifecycle of\n+        List<ModelData> createdModels = new ArrayList<>();\n+        createModelsRunner(asyncClient, (modelsList) -> {\n+            StepVerifier.create(asyncClient.createModels(modelsList))\n+                .assertNext(createdModel -> {\n+                    // When creating models, the service will not return the model itself, so it will be manually\n+                    // assigned here and below to make comparisons easier\n+                    createdModel.setModel(modelsList.get(0));\n+                    createdModels.add(createdModel);\n+                })\n+                .assertNext(createdModel -> {\n+                    createdModel.setModel(modelsList.get(1));\n+                    createdModels.add(createdModel);\n+                })\n+                .assertNext(createdModel -> {\n+                    createdModel.setModel(modelsList.get(2));\n+                    createdModels.add(createdModel);\n+                })\n+                .verifyComplete();\n+        });\n+\n+        for (int modelIndex = 0; modelIndex < createdModels.size(); modelIndex++) {\n+            final ModelData expected = createdModels.get(modelIndex);\n+\n+            // Get the model\n+            getModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.getModelWithResponse(modelId))\n+                    .assertNext(retrievedModel -> {\n+                        assertModelDataAreEqual(expected, retrievedModel.getValue());\n+                    })\n+                    .verifyComplete();\n+            });\n+\n+            // Decommission the model\n+            decommissionModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.decommissionModel(modelId))\n+                    .verifyComplete();\n+            });\n+\n+            // Get the model again to see if it was decommissioned as expected\n+            getModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.getModel(modelId))\n+                    .assertNext(retrievedModel -> {\n+                        assertTrue(retrievedModel.isDecommissioned());\n+                    })\n+                    .verifyComplete();\n+            });\n+\n+            // Delete the model\n+            deleteModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.deleteModel(modelId))\n+                    .verifyComplete();\n+            });\n+        }\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void getModelThrowsIfModelDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+        final String nonExistantModelId = \"urn:doesnotexist:fakemodel:1000\";\n+        StepVerifier.create(asyncClient.getModel(nonExistantModelId))\n+            .verifyErrorSatisfies(ex -> assertRestException(ex, HttpURLConnection.HTTP_NOT_FOUND));", "originalCommit": "5e443f703e2a97a0fbe34cd53b08bec9bc972289", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwNzkzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483307930", "bodyText": "I see java.net.HttpURLConnection used in the app configuration SDK code, so I'd recommend it", "author": "timtay-microsoft", "createdAt": "2020-09-03T23:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5ODM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5OTAxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483299018", "bodyText": "It might be useful to enable the logger as well.", "author": "abhipsaMisra", "createdAt": "2020-09-03T23:07:35Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ModelsAsyncTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * Async client implementation of the model tests defined in {@link ModelsTestBase}\n+ */\n+public class ModelsAsyncTest extends ModelsTestBase {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void modelLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        // Create some models to test the lifecycle of\n+        List<ModelData> createdModels = new ArrayList<>();\n+        createModelsRunner(asyncClient, (modelsList) -> {\n+            StepVerifier.create(asyncClient.createModels(modelsList))\n+                .assertNext(createdModel -> {\n+                    // When creating models, the service will not return the model itself, so it will be manually\n+                    // assigned here and below to make comparisons easier\n+                    createdModel.setModel(modelsList.get(0));\n+                    createdModels.add(createdModel);\n+                })\n+                .assertNext(createdModel -> {\n+                    createdModel.setModel(modelsList.get(1));\n+                    createdModels.add(createdModel);\n+                })\n+                .assertNext(createdModel -> {\n+                    createdModel.setModel(modelsList.get(2));\n+                    createdModels.add(createdModel);\n+                })\n+                .verifyComplete();\n+        });\n+\n+        for (int modelIndex = 0; modelIndex < createdModels.size(); modelIndex++) {\n+            final ModelData expected = createdModels.get(modelIndex);\n+\n+            // Get the model\n+            getModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.getModelWithResponse(modelId))\n+                    .assertNext(retrievedModel -> {\n+                        assertModelDataAreEqual(expected, retrievedModel.getValue());\n+                    })\n+                    .verifyComplete();\n+            });\n+\n+            // Decommission the model\n+            decommissionModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.decommissionModel(modelId))\n+                    .verifyComplete();\n+            });\n+\n+            // Get the model again to see if it was decommissioned as expected\n+            getModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.getModel(modelId))\n+                    .assertNext(retrievedModel -> {\n+                        assertTrue(retrievedModel.isDecommissioned());\n+                    })\n+                    .verifyComplete();\n+            });\n+\n+            // Delete the model\n+            deleteModelRunner(expected.getId(), (modelId) -> {\n+                StepVerifier.create(asyncClient.deleteModel(modelId))\n+                    .verifyComplete();\n+            });\n+        }\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void getModelThrowsIfModelDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+        final String nonExistantModelId = \"urn:doesnotexist:fakemodel:1000\";\n+        StepVerifier.create(asyncClient.getModel(nonExistantModelId))\n+            .verifyErrorSatisfies(ex -> assertRestException(ex, HttpURLConnection.HTTP_NOT_FOUND));\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void createModelThrowsIfModelAlreadyExists(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        final List<String> modelsToCreate = new ArrayList<>();\n+        final String wardModelId = TestAssetsHelper.getUniqueModelId(asyncClient, TestAssetDefaults.wardModelId);\n+        final String wardModelPayload = TestAssetsHelper.getWardModelPayload(wardModelId);\n+        modelsToCreate.add(wardModelPayload);\n+\n+        StepVerifier.create(asyncClient.createModels(modelsToCreate))\n+            .assertNext((modelData -> {\n+                assertNotNull(modelData);\n+            }))\n+            .verifyComplete();\n+\n+        StepVerifier.create(asyncClient.createModels(modelsToCreate))\n+            .verifyErrorSatisfies(ex -> assertRestException(ex, HttpURLConnection.HTTP_CONFLICT));\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void getModelThrowsIfModelIdInvalid(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+        final String malformedModelId = \"thisIsNotAValidModelId\";\n+        StepVerifier.create(asyncClient.getModel(malformedModelId))\n+            .verifyErrorSatisfies(ex -> assertRestException(ex, HttpURLConnection.HTTP_BAD_REQUEST));\n+    }\n+\n+    private static void createModelsRunner(DigitalTwinsAsyncClient asyncClient, Consumer<List<String>> createModelsTestRunner) {\n+        String buildingModelId = TestAssetsHelper.getUniqueModelId(asyncClient, TestAssetDefaults.buildingModelId);\n+        String floorModelId = TestAssetsHelper.getUniqueModelId(asyncClient, TestAssetDefaults.floorModelId);\n+        String hvacModelId = TestAssetsHelper.getUniqueModelId(asyncClient, TestAssetDefaults.hvacModelId);\n+        String wardModelId = TestAssetsHelper.getUniqueModelId(asyncClient, TestAssetDefaults.wardModelId);\n+\n+        createModelsRunner(buildingModelId, floorModelId, hvacModelId, wardModelId, createModelsTestRunner);\n+    }\n+\n+    private DigitalTwinsAsyncClient getAsyncClient(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        return getDigitalTwinsClientBuilder().serviceVersion(serviceVersion).httpClient(httpClient).buildAsyncClient();", "originalCommit": "5d1a7c7d881bb4908563cd3d11b6716b09fc0a93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5OTc3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483299777", "bodyText": "Should these be private static final?", "author": "abhipsaMisra", "createdAt": "2020-09-03T23:10:10Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TestAssetsHelper.java", "diffHunk": "@@ -1,67 +1,65 @@\n package com.azure.digitaltwins.core;\n \n-import com.azure.core.http.HttpResponse;\n-import com.azure.core.util.Context;\n import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n import com.azure.digitaltwins.core.util.UpdateOperationUtility;\n import org.opentest4j.AssertionFailedError;\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.HttpURLConnection;\n import java.util.List;\n import java.util.Random;\n import java.util.Scanner;\n import java.util.function.Consumer;\n-import java.util.function.Function;\n \n public class TestAssetsHelper {\n-    protected static int MaxTries = 10;\n-    protected static int MaxIdLength = 27;\n+    protected static int MAX_TRIES = 10;", "originalCommit": "5d1a7c7d881bb4908563cd3d11b6716b09fc0a93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwMDE2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483300164", "bodyText": "I see that this is an azure-core helper, so they maintain the list of http clients they test against; nice!", "author": "abhipsaMisra", "createdAt": "2020-09-03T23:11:37Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TestHelper.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static com.azure.core.test.TestBase.AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL;\n+import static com.azure.core.test.TestBase.getHttpClients;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TestHelper {\n+    public static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_DIGITALTWINS_TEST_SERVICE_VERSIONS = \"AZURE_DIGITALTWINS_TEST_SERVICE_VERSIONS\";\n+    private static final String SERVICE_VERSION_FROM_ENV =\n+        Configuration.getGlobalConfiguration().get(AZURE_DIGITALTWINS_TEST_SERVICE_VERSIONS);\n+\n+    static void assertRestException(Runnable exceptionThrower, int expectedStatusCode) {\n+        assertRestException(exceptionThrower, ErrorResponseException.class, expectedStatusCode);\n+    }\n+\n+    static void assertRestException(Runnable exceptionThrower, Class<? extends ErrorResponseException> expectedExceptionType, int expectedStatusCode) {\n+        try {\n+            exceptionThrower.run();\n+            fail();\n+        } catch (Throwable ex) {\n+            assertRestException(ex, expectedExceptionType, expectedStatusCode);\n+        }\n+    }\n+\n+    static void assertRestException(Throwable exception, int expectedStatusCode) {\n+        assertRestException(exception, ErrorResponseException.class, expectedStatusCode);\n+    }\n+\n+    static void assertRestException(Throwable exception, Class<? extends ErrorResponseException> expectedExceptionType, int expectedStatusCode) {\n+        assertEquals(expectedExceptionType, exception.getClass());\n+        assertEquals(expectedStatusCode, ((ErrorResponseException) exception).getResponse().getStatusCode());\n+    }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()", "originalCommit": "fc99a3857b65307bb4d7ea757dbbba633148ac34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzOTMzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483339335", "bodyText": "How's this logger being used?", "author": "bikamani", "createdAt": "2020-09-04T01:41:59Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ModelsTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Sync client implementation of the model tests defined in {@link ModelsTestBase}\n+ */\n+public class ModelsTest extends ModelsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ModelsTestBase.class);", "originalCommit": "cf505fb3def67c3261afb0dee2aab92839a1e50d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0OTM0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485149344", "bodyText": "For when we log statements during our tests. Currently nothing is logged, but this may be useful for later", "author": "timtay-microsoft", "createdAt": "2020-09-08T19:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzOTMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMjc1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485832756", "bodyText": "I've added a few log statements to these model tests now", "author": "timtay-microsoft", "createdAt": "2020-09-09T18:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzOTMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0Nzg3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r483347870", "bodyText": "ul?", "author": "bikamani", "createdAt": "2020-09-04T02:16:15Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TestHelper.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static com.azure.core.test.TestBase.AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL;\n+import static com.azure.core.test.TestBase.getHttpClients;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TestHelper {\n+    public static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_DIGITALTWINS_TEST_SERVICE_VERSIONS = \"AZURE_DIGITALTWINS_TEST_SERVICE_VERSIONS\";\n+    private static final String SERVICE_VERSION_FROM_ENV =\n+        Configuration.getGlobalConfiguration().get(AZURE_DIGITALTWINS_TEST_SERVICE_VERSIONS);\n+\n+    static void assertRestException(Runnable exceptionThrower, int expectedStatusCode) {\n+        assertRestException(exceptionThrower, ErrorResponseException.class, expectedStatusCode);\n+    }\n+\n+    static void assertRestException(Runnable exceptionThrower, Class<? extends ErrorResponseException> expectedExceptionType, int expectedStatusCode) {\n+        try {\n+            exceptionThrower.run();\n+            fail(\"Expected exception was not thrown\");\n+        } catch (Throwable ex) {\n+            assertRestException(ex, expectedExceptionType, expectedStatusCode);\n+        }\n+    }\n+\n+    static void assertRestException(Throwable exception, int expectedStatusCode) {\n+        assertRestException(exception, ErrorResponseException.class, expectedStatusCode);\n+    }\n+\n+    static void assertRestException(Throwable exception, Class<? extends ErrorResponseException> expectedExceptionType, int expectedStatusCode) {\n+        assertEquals(expectedExceptionType, exception.getClass());\n+        assertEquals(expectedStatusCode, ((ErrorResponseException) exception).getResponse().getStatusCode());\n+    }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(DigitalTwinsServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    /**\n+     * Returns whether the given service version match the rules of test framework.\n+     *\n+     * <ul>", "originalCommit": "cf505fb3def67c3261afb0dee2aab92839a1e50d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NDE5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485054190", "bodyText": "unordered list", "author": "azabbasi", "createdAt": "2020-09-08T16:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0Nzg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MzYzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485053637", "bodyText": "We also have this functionality in the samples project.", "author": "azabbasi", "createdAt": "2020-09-08T16:35:41Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TestAssetsHelper.java", "diffHunk": "@@ -151,51 +149,49 @@ public static String readResourceFile(String fileName)\n \n             return resourceFileContents;\n         } catch (IOException e) {\n-            throw new RuntimeException(\"Cannot find file \" + fileName, e);\n+            throw new RuntimeException(\"Cannot find file /test-assets/\" + fileName + \".json in the resources folder\", e);\n         }\n     }\n \n-    public static String GetUniqueModelId(DigitalTwinsClient dtClient, String baseName)\n+    public static String getUniqueModelId(DigitalTwinsClient dtClient, String baseName)\n     {\n-        return GetUniqueModelId(baseName, (id) -> dtClient.getModel(id));\n+        return getUniqueModelId(baseName, (id) -> dtClient.getModel(id));\n     }\n \n-    public static String GetUniqueDigitalTwinId(DigitalTwinsClient dtClient, String baseName)\n+    public static String getUniqueDigitalTwinId(DigitalTwinsClient dtClient, String baseName)\n     {\n-        return GetUniqueModelId(baseName, (id) -> dtClient.getDigitalTwin(id));\n+        return getUniqueModelId(baseName, (id) -> dtClient.getDigitalTwin(id));\n     }\n \n-    public static String GetUniqueModelId(DigitalTwinsAsyncClient dtClient, String baseName)\n+    public static String getUniqueModelId(DigitalTwinsAsyncClient dtClient, String baseName)\n     {\n-        return GetUniqueModelId(baseName, (id) -> dtClient.getModel(id).block());\n+        return getUniqueModelId(baseName, (id) -> dtClient.getModel(id).block());\n     }\n \n-    public static String GetUniqueDigitalTwinId(DigitalTwinsAsyncClient dtClient, String baseName)\n+    public static String getUniqueDigitalTwinId(DigitalTwinsAsyncClient dtClient, String baseName)\n     {\n-        return GetUniqueModelId(baseName, (id) -> dtClient.getDigitalTwin(id).block());\n+        return getUniqueModelId(baseName, (id) -> dtClient.getDigitalTwin(id).block());\n     }\n \n-    private static String GetUniqueModelId(String baseName, Consumer<String> getMethod)\n+    private static String getUniqueModelId(String baseName, Consumer<String> getMethod)", "originalCommit": "cf505fb3def67c3261afb0dee2aab92839a1e50d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e66fea69bfb6d5f3b5605a28a1d0e4f1fa4b4820", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e66fea69bfb6d5f3b5605a28a1d0e4f1fa4b4820", "message": "Add Model API tests to ADT\n\nFixed a few test assets as well. While they were accepted by the service when the context field was just one value, the service always returns a model such that the context is an array with one value instead. This makes it easier to test that models retrieved from the service match our expectations", "committedDate": "2020-09-08T19:37:59Z", "type": "forcePushed"}, {"oid": "da99f55834b136a9451dc9d5f7964e45c1ca043d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/da99f55834b136a9451dc9d5f7964e45c1ca043d", "message": "Add Model API tests to ADT\n\nFixed a few test assets as well. While they were accepted by the service when the context field was just one value, the service always returns a model such that the context is an array with one value instead. This makes it easier to test that models retrieved from the service match our expectations", "committedDate": "2020-09-09T18:27:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMzQwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485833405", "bodyText": "I had to factor out some of the unique Id generation logic to the samples and e2e tests since the e2e tests need to record the random numbers that we generate.", "author": "timtay-microsoft", "createdAt": "2020-09-09T18:39:12Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -45,11 +47,16 @@ public static void main(String[] args) throws IOException, InterruptedException\n         runModelLifecycleSample();\n     }\n \n+    public static Function<Integer, String> nameGenerator = (maxLength) -> {", "originalCommit": "d814a510ecd71309deadcea08fda74824f36e2e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTQzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485835433", "bodyText": "I'm deleting this sample test because we don't need it anymore. The model tests will serve as the sample tests for now", "author": "timtay-microsoft", "createdAt": "2020-09-09T18:42:55Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/SampleTest.java", "diffHunk": "@@ -1,42 +0,0 @@\n-package com.azure.digitaltwins.core;", "originalCommit": "6c56bc7d26af164b2e5d50ee0a245d2d15c3bc32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNjE3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485836176", "bodyText": "This logic now lives in the samples", "author": "timtay-microsoft", "createdAt": "2020-09-09T18:44:22Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/TestAssetsHelper.java", "diffHunk": "@@ -148,51 +146,7 @@ public static String readResourceFile(String fileName)\n \n             return resourceFileContents;\n         } catch (IOException e) {\n-            throw new RuntimeException(\"Cannot find file \" + fileName, e);\n-        }\n-    }\n-\n-    public static String GetUniqueModelId(DigitalTwinsClient dtClient, String baseName)", "originalCommit": "6c56bc7d26af164b2e5d50ee0a245d2d15c3bc32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0Njc3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485846774", "bodyText": "we might not to do this for-each iteration, create models does not return a pageable anymore, so the blocking call should directly complete with result.", "author": "abhipsaMisra", "createdAt": "2020-09-09T19:04:28Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ModelsTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static com.azure.digitaltwins.core.TestHelper.assertRestException;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Sync client implementation of the model tests defined in {@link ModelsTestBase}\n+ */\n+public class ModelsTest extends ModelsTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ModelsTestBase.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void modelLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        // Create some models to test the lifecycle of\n+        final List<ModelData> createdModels = new ArrayList<>();\n+        createModelsRunner(client, (modelsList) -> {\n+            List<ModelData> createdModelsResponseList = client.createModels(modelsList);\n+            createdModelsResponseList.forEach((modelData) -> {\n+                createdModels.add(modelData);\n+                logger.info(\"Created {} models successfully\", createdModelsResponseList.size());\n+            });\n+        });\n+\n+        for (int modelIndex = 0; modelIndex < createdModels.size(); modelIndex++) {\n+            final ModelData expected = createdModels.get(modelIndex);\n+\n+            // Get the model\n+            getModelRunner(expected.getId(), (modelId) -> {\n+                ModelData actual = client.getModel(modelId);\n+                assertModelDataAreEqual(expected, actual, false);\n+                logger.info(\"Model {} matched expectations\", modelId);\n+            });\n+\n+            // Decommission the model\n+            decommissionModelRunner(expected.getId(), (modelId) -> {\n+                logger.info(\"Decommissioning model {}\", modelId);\n+                client.decommissionModel(modelId);\n+            });\n+\n+            // Get the model again to see if it was decommissioned as expected\n+            getModelRunner(expected.getId(), (modelId) -> {\n+                ModelData actual = client.getModel(modelId);\n+                assertTrue(actual.isDecommissioned());\n+                logger.info(\"Model {} was decommissioned successfully\", modelId);\n+            });\n+\n+            // Delete the model\n+            deleteModelRunner(expected.getId(), (modelId) -> {\n+                logger.info(\"Deleting model {}\", modelId);\n+                client.deleteModel(modelId);\n+            });\n+        }\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void getModelThrowsIfModelDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+        final String nonExistantModelId = \"urn:doesnotexist:fakemodel:1000\";\n+        getModelRunner(nonExistantModelId, (modelId) -> {\n+            assertRestException(() -> client.getModel(modelId), HttpURLConnection.HTTP_NOT_FOUND);\n+        });\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void createModelThrowsIfModelAlreadyExists(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        final List<String> modelsToCreate = new ArrayList<>();\n+        final String wardModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.WARD_MODEL_ID, client, randomIntegerStringGenerator);\n+        final String wardModelPayload = TestAssetsHelper.getWardModelPayload(wardModelId);\n+        modelsToCreate.add(wardModelPayload);\n+\n+        List<ModelData> createdModels = client.createModels(modelsToCreate);\n+        createdModels.forEach((modelData) -> {\n+            assertNotNull(modelData);\n+        });\n+\n+        assertRestException(\n+            () -> client.createModels(modelsToCreate).forEach((modelData) -> {", "originalCommit": "a135ebd93d8e064671cfb1de4bdd8dffefc726d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTUzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485845535", "bodyText": "do we really have to set the endpoint on the playback client? it's not going to be using it.\nregardless, I think  this comment is incorrect, it doesn't \"connect\" to anything :)", "author": "azabbasi", "createdAt": "2020-09-09T19:01:58Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsTestBase.java", "diffHunk": "@@ -21,16 +27,16 @@\n         .get(\"CLIENT_ID\", \"clientId\");\n \n     protected static final String DIGITALTWINS_URL = Configuration.getGlobalConfiguration()\n-        .get(\"DIGITALTWINS_URL\", \"https://playback.api.wus2.digitaltwins.azure.net\");\n-\n-    protected DigitalTwinsClientBuilder getDigitalTwinsClientBuilder() {\n-        DigitalTwinsClientBuilder builder = new DigitalTwinsClientBuilder()\n-            .endpoint(DIGITALTWINS_URL);\n+        .get(\"DIGITALTWINS_URL\", PLAYBACK_ENDPOINT);\n \n+    protected DigitalTwinsClientBuilder getDigitalTwinsClientBuilder(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClientBuilder builder = new DigitalTwinsClientBuilder();\n         if (interceptorManager.isPlaybackMode()){\n             builder.httpClient(interceptorManager.getPlaybackClient());\n             // Use fake credentials for playback mode.\n             builder.tokenCredential(new FakeCredentials());\n+            // Connect to a special host when running tests in playback mode.", "originalCommit": "a135ebd93d8e064671cfb1de4bdd8dffefc726d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0OTU4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485849589", "bodyText": "Our builder makes it mandatory that an endpoint is specified, so my hands are tied here", "author": "timtay-microsoft", "createdAt": "2020-09-09T19:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MDQ5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485850496", "bodyText": "The previous implementation just used the playback endpoint if the environment variable for endpoint isn't set, which wasn't quite right. Now we always use the playback endpoint when the interceptorManager is in playback mode", "author": "timtay-microsoft", "createdAt": "2020-09-09T19:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NzI0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14791#discussion_r485847242", "bodyText": "you can do\nList<String> modelsList = new ArrayList<>(Arrays.asList(modelBuilding, modelHvac, modelWard))", "author": "azabbasi", "createdAt": "2020-09-09T19:05:19Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ModelsTestBase.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import org.junit.jupiter.api.Test;\n+import org.opentest4j.AssertionFailedError;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This abstract test class defines all the tests that both the sync and async model test classes need to implement. It also\n+ * houses some model test specific helper functions.\n+ */\n+public abstract class ModelsTestBase extends DigitalTwinsTestBase {\n+    @Test\n+    public abstract void modelLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void getModelThrowsIfModelDoesNotExist(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void createModelThrowsIfModelAlreadyExists(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    @Test\n+    public abstract void getModelThrowsIfModelIdInvalid(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion);\n+\n+    static void createModelsRunner(String buildingModelId, String floorModelId, String hvacModelId, String wardModelId, Consumer<List<String>> createModelsTestRunner) {\n+        String modelBuilding = TestAssetsHelper.getBuildingModelPayload(buildingModelId, hvacModelId, floorModelId);\n+        String modelHvac = TestAssetsHelper.getHvacModelPayload(hvacModelId, floorModelId);\n+        String modelWard = TestAssetsHelper.getWardModelPayload(wardModelId);\n+\n+        List<String> modelsList = new ArrayList<>();", "originalCommit": "a135ebd93d8e064671cfb1de4bdd8dffefc726d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f19be8f85737d27e66ad419694703c3774f0e350", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f19be8f85737d27e66ad419694703c3774f0e350", "message": "Add Model API tests to ADT\n\nFixed a few test assets as well. While they were accepted by the service when the context field was just one value, the service always returns a model such that the context is an array with one value instead. This makes it easier to test that models retrieved from the service match our expectations", "committedDate": "2020-09-09T19:26:59Z", "type": "commit"}, {"oid": "f19be8f85737d27e66ad419694703c3774f0e350", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f19be8f85737d27e66ad419694703c3774f0e350", "message": "Add Model API tests to ADT\n\nFixed a few test assets as well. While they were accepted by the service when the context field was just one value, the service always returns a model such that the context is an array with one value instead. This makes it easier to test that models retrieved from the service match our expectations", "committedDate": "2020-09-09T19:26:59Z", "type": "forcePushed"}, {"oid": "7ce487e463fc822bcc3afca90eb09fd546e8bd3a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ce487e463fc822bcc3afca90eb09fd546e8bd3a", "message": "fix?", "committedDate": "2020-09-09T19:29:04Z", "type": "commit"}, {"oid": "9482de760e026cf8737a18bef8641d137997b0bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9482de760e026cf8737a18bef8641d137997b0bf", "message": "fixup", "committedDate": "2020-09-09T19:46:14Z", "type": "commit"}]}