{"pr_number": 10113, "pr_title": "Correct Azure Key Vault Keys .md files content inconsistency and unclear", "pr_createdAt": "2020-04-13T04:32:02Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10113", "timeline": [{"oid": "396b965e53580b58cf8ea2be4ac963df33f53ec9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/396b965e53580b58cf8ea2be4ac963df33f53ec9", "message": "update according to issue", "committedDate": "2020-04-13T04:25:23Z", "type": "commit"}, {"oid": "b48fd3bf70b2fdb4a4b2cd932b6238bab496e8e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b48fd3bf70b2fdb4a4b2cd932b6238bab496e8e5", "message": "update according to issue", "committedDate": "2020-04-13T10:04:27Z", "type": "commit"}, {"oid": "155e65db0566297835481e5e741cb2ad1fe09fb7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/155e65db0566297835481e5e741cb2ad1fe09fb7", "message": "update according to issue", "committedDate": "2020-04-13T10:17:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU0NDg2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r407544867", "bodyText": "Oxford comma", "author": "jongio", "createdAt": "2020-04-13T15:40:19Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -59,7 +59,7 @@ Here is [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n     }\n     ```\n \n-* Use the above returned credentials information to set **AZURE_CLIENT_ID**(appId), **AZURE_CLIENT_SECRET**(password) and **AZURE_TENANT_ID**(tenant) environment variables. The following example shows a way to do this in Bash:\n+* Use the above returned credentials information to set **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password) and **AZURE_TENANT_ID** (tenantId) environment variables. The following example shows a way to do this in Bash:", "originalCommit": "b48fd3bf70b2fdb4a4b2cd932b6238bab496e8e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee092ae61020b265244730c4345c870abe396537", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee092ae61020b265244730c4345c870abe396537", "message": "update according to comment", "committedDate": "2020-04-14T02:27:25Z", "type": "commit"}, {"oid": "1525ed404c521b0a1e36d0d198aa5488334bcf2d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1525ed404c521b0a1e36d0d198aa5488334bcf2d", "message": "Merge branch 'azure-keyvault-keys' of https://github.com/FredGao-new/azure-sdk-for-java into azure-keyvault-keys", "committedDate": "2020-04-14T02:34:28Z", "type": "commit"}, {"oid": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "message": "update according to comment", "committedDate": "2020-04-14T02:35:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMjc3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414202779", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Azure Key Vault allows you to create and store keys in the Key Vault. Azure Key Vault Keys client Library supports RSA keys and elliptic curve keys, each with corresponding support in hardware security modules (HSM).\n          \n          \n            \n            Azure Key Vault allows you to create, manage and store keys in the Key Vault. The Azure Key Vault Keys client library supports RSA keys and elliptic curve keys, each with corresponding support in hardware security modules (HSM).", "author": "vcolin7", "createdAt": "2020-04-24T00:01:50Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -1,5 +1,5 @@\n # Azure Key Vault Key client library for Java\n-Azure Key Vault allows you to create and store keys in the Key Vault. Azure Key Vault client supports RSA keys and elliptic curve keys, each with corresponding support in hardware security modules (HSM).\n+Azure Key Vault allows you to create and store keys in the Key Vault. Azure Key Vault Keys client Library supports RSA keys and elliptic curve keys, each with corresponding support in hardware security modules (HSM).", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMzg1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414203856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             Multiple keys, and multiple versions of the same key, can be kept in the Key Vault. Cryptographic keys in Key Vault are represented as [JSON Web Key [JWK]](https://tools.ietf.org/html/rfc7517) objects. This library offers operations to create, retrieve, update, delete, purge, backup, restore and list the keys and its versions.\n          \n          \n            \n            Multiple keys and multiple versions of the same key can be kept in the Key Vault. Cryptographic keys in Key Vault are represented as [JSON Web Key [JWK]](https://tools.ietf.org/html/rfc7517) objects. This library offers operations to create, retrieve, update, delete, purge, backup, restore and list the keys, as well as its versions.", "author": "vcolin7", "createdAt": "2020-04-24T00:05:12Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -1,5 +1,5 @@\n # Azure Key Vault Key client library for Java\n-Azure Key Vault allows you to create and store keys in the Key Vault. Azure Key Vault client supports RSA keys and elliptic curve keys, each with corresponding support in hardware security modules (HSM).\n+Azure Key Vault allows you to create and store keys in the Key Vault. Azure Key Vault Keys client Library supports RSA keys and elliptic curve keys, each with corresponding support in hardware security modules (HSM).\n \n  Multiple keys, and multiple versions of the same key, can be kept in the Key Vault. Cryptographic keys in Key Vault are represented as [JSON Web Key [JWK]](https://tools.ietf.org/html/rfc7517) objects. This library offers operations to create, retrieve, update, delete, purge, backup, restore and list the keys and its versions.", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNzIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414207211", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Here is [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n          \n          \n            \n            Here is an [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to", "author": "vcolin7", "createdAt": "2020-04-24T00:14:29Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -32,12 +32,12 @@ Maven dependency for Azure Key Client library. Add it to your project's pom file\n     ```\n \n ### Authenticate the client\n-In order to interact with the Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client key, tenant id)** to instantiate a client object using the default `AzureCredential` examples shown in this document.\n+In order to interact with the Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `AzureCredential` examples shown in this document.\n \n The `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n \n  #### Create/Get credentials\n-To create/get client key credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_keyvault_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n+To create/get client secret credentials you can use the [Azure Portal][azure_create_application_in_portal], [Azure CLI][azure_keyvault_cli_full] or [Azure Cloud Shell](https://shell.azure.com/bash)\n \n Here is [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODA1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414208057", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use the above returned credentials information to set **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenantId) environment variables. The following example shows a way to do this in Bash:\n          \n          \n            \n            * Use the above returned credentials information to set the **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenantId) environment variables. The following example shows a way to do this in Bash:", "author": "vcolin7", "createdAt": "2020-04-24T00:16:52Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -59,7 +59,7 @@ Here is [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n     }\n     ```\n \n-* Use the above returned credentials information to set **AZURE_CLIENT_ID**(appId), **AZURE_CLIENT_SECRET**(password) and **AZURE_TENANT_ID**(tenant) environment variables. The following example shows a way to do this in Bash:\n+* Use the above returned credentials information to set **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenantId) environment variables. The following example shows a way to do this in Bash:", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODU2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414208565", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Grant the above mentioned application authorization to perform key operations on the keyvault:\n          \n          \n            \n            * Grant the aforementioned application authorization to perform key operations on the Key Vault:", "author": "vcolin7", "createdAt": "2020-04-24T00:18:24Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -70,11 +70,11 @@ Here is [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n * Grant the above mentioned application authorization to perform key operations on the keyvault:", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwODg3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414208873", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use the above mentioned Key Vault name to retreive details of your Vault which also contains your Key Vault URL:\n          \n          \n            \n            * Use the aforementioned Key Vault name to retrieve details of your Key Vault, which also contain your Key Vault URL:", "author": "vcolin7", "createdAt": "2020-04-24T00:19:18Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -70,11 +70,11 @@ Here is [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n * Grant the above mentioned application authorization to perform key operations on the keyvault:\n \n     ```Bash\n-    az keyvault set-policy --name <your-key-vault-name> --spn $AZURE_CLIENT_ID --key-permissions backup delete get list create\n+    az keyvault set-policy --name <your-key-vault-name> --spn $AZURE_CLIENT_ID --key-permissions backup delete get list create update encrypt decrypt\n     ```\n \n     > --key-permissions:\n-    > Accepted values: backup, delete, get, list, purge, recover, restore, create\n+    > Accepted values: backup, delete, get, list, purge, recover, restore, create, update, encrypt, decrypt, import, wrapkey, unwrapkey, verify, sign\n \n * Use the above mentioned Key Vault name to retreive details of your Vault which also contains your Key Vault URL:", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTM4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414209385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .vaultUrl(<your-vault-url>)\n          \n          \n            \n                    .vaultUrl(<your-key-vault-url>)", "author": "vcolin7", "createdAt": "2020-04-24T00:20:48Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -88,6 +88,7 @@ Once you've populated the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and **AZU\n ```Java\n import com.azure.identity.DefaultAzureCredentialBuilder;\n import com.azure.security.keyvault.keys.KeyClient;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n \n KeyClient client = new KeyClientBuilder()\n         .vaultUrl(<your-vault-url>)", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMzQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414213482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             #### Create/Get credentials\n          \n          \n            \n            #### Create/Get credentials", "author": "vcolin7", "createdAt": "2020-04-24T00:32:28Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -32,12 +32,12 @@ Maven dependency for Azure Key Client library. Add it to your project's pom file\n     ```\n \n ### Authenticate the client\n-In order to interact with the Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client key, tenant id)** to instantiate a client object using the default `AzureCredential` examples shown in this document.\n+In order to interact with the Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `AzureCredential` examples shown in this document.\n \n The `DefaultAzureCredential` way of authentication by providing client secret credentials is being used in this getting started section but you can find more ways to authenticate with [azure-identity][azure_identity].\n \n  #### Create/Get credentials", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxNDE0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414214146", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .vaultUrl(<your-vault-url>)\n          \n          \n            \n                    .vaultUrl(<your-key-vault-url>)", "author": "vcolin7", "createdAt": "2020-04-24T00:34:34Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -147,8 +149,12 @@ Create a Key to be stored in the Azure Key Vault.\n \n ```Java\n import com.azure.identity.DefaultAzureCredentialBuilder;\n-import com.azure.security.keyvault.keys.models.Key;\n import com.azure.security.keyvault.keys.KeyClient;\n+import com.azure.security.keyvault.keys.models.CreateEcKeyOptions;\n+import com.azure.security.keyvault.keys.models.CreateRsaKeyOptions;\n+import com.azure.security.keyvault.keys.models.KeyCurveName;\n+import com.azure.security.keyvault.keys.models.KeyVaultKey;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n \n KeyClient keyClient = new KeyClientBuilder()\n         .vaultUrl(<your-vault-url>)", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxNzAxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414217016", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Deleted key is accessible as soon as polling begins\n          \n          \n            \n            // Deleted key is accessible as soon as polling begins.", "author": "vcolin7", "createdAt": "2020-04-24T00:43:59Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -198,6 +204,7 @@ SyncPoller<DeletedKey, Void> deletedKeyPoller = keyClient.beginDeleteKey(\"keyNam\n PollResponse<DeletedKey> deletedKeyPollResponse = deletedKeyPoller.poll();\n \n // Deleted key is accessible as soon as polling begins", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxNzE1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414217150", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Deleted date only works for SoftDelete Enabled Key Vault.", "author": "vcolin7", "createdAt": "2020-04-24T00:44:23Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -198,6 +204,7 @@ SyncPoller<DeletedKey, Void> deletedKeyPoller = keyClient.beginDeleteKey(\"keyNam\n PollResponse<DeletedKey> deletedKeyPollResponse = deletedKeyPoller.poll();\n \n // Deleted key is accessible as soon as polling begins\n+// Deleted date only works for SoftDelete Enabled Key Vault.", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxNzE4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414217180", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            System.out.println(\"Deleted Date  %s\" + deletedKey.getDeletedOn().toString());\n          \n          \n            \n            // Deletion date only works for SoftDelete Enabled Key Vault.\n          \n          \n            \n            System.out.printf(\"Deletion date:  %s\\n\", deletedKey.getDeletedOn().toString());", "author": "vcolin7", "createdAt": "2020-04-24T00:44:30Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -198,6 +204,7 @@ SyncPoller<DeletedKey, Void> deletedKeyPoller = keyClient.beginDeleteKey(\"keyNam\n PollResponse<DeletedKey> deletedKeyPollResponse = deletedKeyPoller.poll();\n \n // Deleted key is accessible as soon as polling begins\n+// Deleted date only works for SoftDelete Enabled Key Vault.\n DeletedKey deletedKey = deletedKeyPollResponse.getValue();\n System.out.println(\"Deleted Date  %s\" + deletedKey.getDeletedOn().toString());", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxOTM5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414219394", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .vaultUrl(<your-vault-url>)\n          \n          \n            \n                    .vaultUrl(<your-key-vault-url>)", "author": "vcolin7", "createdAt": "2020-04-24T00:52:24Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -268,8 +275,10 @@ Create a Key to be stored in the Azure Key Vault.\n \n ```Java\n import com.azure.identity.DefaultAzureCredentialBuilder;\n-import com.azure.security.keyvault.keys.models.Key;\n import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n+import com.azure.security.keyvault.keys.models.CreateEcKeyOptions;\n+import com.azure.security.keyvault.keys.models.CreateRsaKeyOptions;\n \n KeyAsyncClient keyAsyncClient = new KeyClientBuilder()\n         .vaultUrl(<your-vault-url>)", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1MDQzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r414250437", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order to interact with the Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `AzureCredential` examples shown in this document.\n          \n          \n            \n            In order to interact with the Azure Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `DefaultAzureCredential` examples shown in this document.", "author": "vcolin7", "createdAt": "2020-04-24T02:41:13Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -32,12 +32,12 @@ Maven dependency for Azure Key Client library. Add it to your project's pom file\n     ```\n \n ### Authenticate the client\n-In order to interact with the Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client key, tenant id)** to instantiate a client object using the default `AzureCredential` examples shown in this document.\n+In order to interact with the Key Vault service, you'll need to create an instance of the [KeyClient](#create-key-client) class. You would need a **vault url** and **client secret credentials (client id, client secret, tenant id)** to instantiate a client object using the default `AzureCredential` examples shown in this document.", "originalCommit": "af7f4b7c05e80b036e6e09c0a14320c2617a09eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "91984df1ec34117310c124ec452999b2172522a5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/91984df1ec34117310c124ec452999b2172522a5", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:06:26Z", "type": "commit"}, {"oid": "b23b94c263122cc48875303e3f8dec5056a96115", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b23b94c263122cc48875303e3f8dec5056a96115", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:06:56Z", "type": "commit"}, {"oid": "120225c5633fb7ec072c2aea68bf2e5d308570df", "url": "https://github.com/Azure/azure-sdk-for-java/commit/120225c5633fb7ec072c2aea68bf2e5d308570df", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:07:59Z", "type": "commit"}, {"oid": "a7fa3273fa23f6cd7427db31ebbb0278cf28b9ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a7fa3273fa23f6cd7427db31ebbb0278cf28b9ed", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:09:31Z", "type": "commit"}, {"oid": "eca6b0641e6508e771c35fba4735ce2e28bcd276", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eca6b0641e6508e771c35fba4735ce2e28bcd276", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:09:56Z", "type": "commit"}, {"oid": "152f2f43ecdc6653feab6945e5768d2918dcd8af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/152f2f43ecdc6653feab6945e5768d2918dcd8af", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:13:38Z", "type": "commit"}, {"oid": "946e5da10c34351b9550330206d2de70a2bdbb59", "url": "https://github.com/Azure/azure-sdk-for-java/commit/946e5da10c34351b9550330206d2de70a2bdbb59", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:14:13Z", "type": "commit"}, {"oid": "52a5553cc9050962b901c9a403a1f94fcdb8be0a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/52a5553cc9050962b901c9a403a1f94fcdb8be0a", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:14:40Z", "type": "commit"}, {"oid": "16af7f51dc4169136ccbaf78066c0db31d1b2d44", "url": "https://github.com/Azure/azure-sdk-for-java/commit/16af7f51dc4169136ccbaf78066c0db31d1b2d44", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:15:10Z", "type": "commit"}, {"oid": "9c60a43b71fa518c851364ee346cb62a2868e913", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c60a43b71fa518c851364ee346cb62a2868e913", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:16:47Z", "type": "commit"}, {"oid": "a0cfdd78374ad18b9d713cf87d097414b2c4506d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0cfdd78374ad18b9d713cf87d097414b2c4506d", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:17:59Z", "type": "commit"}, {"oid": "3ce0a1b8b2a0480cfd36735eaba57a971bfcd1b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ce0a1b8b2a0480cfd36735eaba57a971bfcd1b3", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:18:27Z", "type": "commit"}, {"oid": "2932a8a65359a267d93804b4d2ff12523c114e04", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2932a8a65359a267d93804b4d2ff12523c114e04", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:18:54Z", "type": "commit"}, {"oid": "b71e1a3928bb4bf3ebd311b4039cff211e021787", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b71e1a3928bb4bf3ebd311b4039cff211e021787", "message": "Update sdk/keyvault/azure-security-keyvault-keys/README.md\n\nCo-Authored-By: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-04-27T02:19:24Z", "type": "commit"}, {"oid": "48d7f2fcac448c85c8310cbf40298e1b43adb37a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/48d7f2fcac448c85c8310cbf40298e1b43adb37a", "message": "Made additional changes in favor of readability and consistency in text and code samples.", "committedDate": "2020-04-27T21:01:15Z", "type": "commit"}, {"oid": "241072e2d4eaa782bc95b67d9333db05923f3ed3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/241072e2d4eaa782bc95b67d9333db05923f3ed3", "message": "Made some more corrections.", "committedDate": "2020-04-27T22:03:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY0NTk2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10113#discussion_r418645968", "bodyText": "typo, Deletion", "author": "g2vinay", "createdAt": "2020-05-01T17:28:06Z", "path": "sdk/keyvault/azure-security-keyvault-keys/README.md", "diffHunk": "@@ -59,307 +56,309 @@ Here is [Azure Cloud Shell](https://shell.azure.com/bash) snippet below to\n     }\n     ```\n \n-* Use the above returned credentials information to set **AZURE_CLIENT_ID**(appId), **AZURE_CLIENT_SECRET**(password) and **AZURE_TENANT_ID**(tenant) environment variables. The following example shows a way to do this in Bash:\n+* Use the above returned credentials information to set the **AZURE_CLIENT_ID** (appId), **AZURE_CLIENT_SECRET** (password), and **AZURE_TENANT_ID** (tenantId) environment variables. The following example shows a way to do this in Bash:\n \n-  ```Bash\n+    ```Bash\n     export AZURE_CLIENT_ID=\"generated-app-ID\"\n     export AZURE_CLIENT_SECRET=\"random-password\"\n     export AZURE_TENANT_ID=\"tenant-ID\"\n-  ```\n+    ```\n \n-* Grant the above mentioned application authorization to perform key operations on the keyvault:\n+* Grant the aforementioned application authorization to perform key operations on the Key Vault:\n \n     ```Bash\n-    az keyvault set-policy --name <your-key-vault-name> --spn $AZURE_CLIENT_ID --key-permissions backup delete get list create\n+    az keyvault set-policy --name <your-key-vault-name> --spn $AZURE_CLIENT_ID --key-permissions backup delete get list create update encrypt decrypt\n     ```\n \n     > --key-permissions:\n-    > Accepted values: backup, delete, get, list, purge, recover, restore, create\n+    > Accepted values: backup, delete, get, list, purge, recover, restore, create, update, encrypt, decrypt, import, wrapkey, unwrapkey, verify, sign\n \n-* Use the above mentioned Key Vault name to retreive details of your Vault which also contains your Key Vault URL:\n+* Use the aforementioned Key Vault name to retrieve details of your Key Vault, which also contain your Key Vault URL:\n \n     ```Bash\n     az keyvault show --name <your-key-vault-name>\n     ```\n \n #### Create Key client\n-Once you've populated the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and **AZURE_TENANT_ID** environment variables and replaced **your-vault-url** with the above returned URI, you can create the KeyClient:\n+Once you've populated the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET**, and **AZURE_TENANT_ID** environment variables and replaced **your-key-vault-url** with the URI returned above, you can create the KeyClient:\n \n ```Java\n import com.azure.identity.DefaultAzureCredentialBuilder;\n import com.azure.security.keyvault.keys.KeyClient;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n \n KeyClient client = new KeyClientBuilder()\n-        .vaultUrl(<your-vault-url>)\n-        .credential(new DefaultAzureCredentialBuilder().build())\n-        .buildClient();\n+    .vaultUrl(<your-key-vault-url>)\n+    .credential(new DefaultAzureCredentialBuilder().build())\n+    .buildClient();\n ```\n \n-> NOTE: For using Asynchronous client use KeyAsyncClient instead of KeyClient and call buildAsyncClient()\n+> NOTE: For using an asynchronous client use KeyAsyncClient instead of KeyClient and call `buildAsyncClient()`\n \n-\n-#### Create Cryptography Client\n-Once you've populated the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and **AZURE_TENANT_ID** environment variables and replaced **your-vault-url** with the above returned URI, you can create the CryptographyClient:\n+#### Create Cryptography client\n+Once you've populated the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET**, and **AZURE_TENANT_ID** environment variables and replaced **your-vault-url** with the URI returned above, you can create the CryptographyClient:\n \n ```Java\n import com.azure.identity.DefaultAzureCredentialBuilder;\n import com.azure.security.keyvault.keys.cryptography.CryptographyClient;\n+import com.azure.security.keyvault.keys.cryptography.CryptographyClientBuilder;\n \n // Create client with key identifier from key vault.\n CryptographyClient cryptoClient = new CryptographyClientBuilder()\n     .credential(new DefaultAzureCredentialBuilder().build())\n-    .keyIdentifier(\"<Your-Key-Id-From-Keyvault>\")\n+    .keyIdentifier(\"<your-key-id-from-key-vault>\")\n     .buildClient();\n ```\n \n-> NOTE: For using Asynchronous client use CryptographyAsyncClient instead of CryptographyClient and call buildAsyncClient()\n+> NOTE: For using an asynchronous client use CryptographyAsyncClient instead of CryptographyClient and call `buildAsyncClient()`\n \n ## Key concepts\n ### Key\n-  Azure Key Vault supports multiple key types(`RSA` & `EC`) and algorithms, and enables the use of Hardware Security Modules (HSM) for high value keys. In addition to the key material, the following attributes may be specified:\n-* enabled: Specifies whether the key is enabled and useable for cryptographic operations.\n+  Azure Key Vault supports multiple key types (`RSA` & `EC`) and algorithms, and enables the use of Hardware Security Modules (HSM) for high value keys. In addition to the key material, the following attributes may be specified:\n+* enabled: Specifies whether the key is enabled and usable for cryptographic operations.\n * not_before: Identifies the time before which the key must not be used for cryptographic operations.\n-* expires: Identifies the expiration time on or after which the key MUST NOT be used for cryptographic operation.\n+* expires: Identifies the expiration time on or after which the key MUST NOT be used for cryptographic operations.\n * created: Indicates when this version of the key was created.\n * updated: Indicates when this version of the key was updated.\n \n-### Key Client:\n-The Key client performs the interactions with the Azure Key Vault service for getting, setting, updating, deleting, and listing keys and its versions. An asynchronous and synchronous, KeyClient, client exists in the SDK allowing for selection of a client based on an application's use case. Once you've initialized a Key, you can interact with the primary resource types in Key Vault.\n+### Key client:\n+The key client performs the interactions with the Azure Key Vault service for getting, setting, updating, deleting, and listing keys and its versions. Asynchronous (KeyAsyncClient) and synchronous (KeyClient) clients exist in the SDK allowing for the selection of a client based on an application's use case. Once you've initialized a key, you can interact with the primary resource types in Key Vault.\n \n-### Cryptography Client:\n-The Cryptography client performs the cryptographic operations locally or calls the Azure Key Vault service depending on how much key information is available locally. It supports encrypting, decrypting, signing, verifying, key wrapping, key unwrapping and retrieving the configured key. An asynchronous and synchronous, CryptographyClient, client exists in the SDK allowing for selection of a client based on an application's use case.\n+### Cryptography client:\n+The Cryptography client performs the cryptographic operations locally or calls the Azure Key Vault service depending on how much key information is available locally. It supports encrypting, decrypting, signing, verifying, key wrapping, key unwrapping, and retrieving the configured key. Asynchronous (CryptographyAsyncClient) and synchronous (CryptographyClient) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n \n ## Examples\n ### Sync API\n-The following sections provide several code snippets covering some of the most common Azure Key Vault Key Service tasks, including:\n-- [Create a Key](#create-a-key)\n-- [Retrieve a Key](#retrieve-a-key)\n-- [Update an existing Key](#update-an-existing-key)\n-- [Delete a Key](#delete-a-key)\n-- [List Keys](#list-keys)\n+The following sections provide several code snippets covering some of the most common Azure Key Vault Key service tasks, including:\n+- [Create a key](#create-a-key)\n+- [Retrieve a key](#retrieve-a-key)\n+- [Update an existing key](#update-an-existing-key)\n+- [Delete a key](#delete-a-key)\n+- [List keys](#list-keys)\n - [Encrypt](#encrypt)\n - [Decrypt](#decrypt)\n \n-### Create a Key\n-\n-Create a Key to be stored in the Azure Key Vault.\n-- `setKey` creates a new key in the key vault. if the key with name already exists then a new version of the key is created.\n+### Create a key\n+Create a key to be stored in the Azure Key Vault.\n+- `setKey` creates a new key in the Azure Key Vault. If a key with the same name already exists then a new version of the key is created.\n \n ```Java\n import com.azure.identity.DefaultAzureCredentialBuilder;\n-import com.azure.security.keyvault.keys.models.Key;\n import com.azure.security.keyvault.keys.KeyClient;\n+import com.azure.security.keyvault.keys.models.CreateEcKeyOptions;\n+import com.azure.security.keyvault.keys.models.CreateRsaKeyOptions;\n+import com.azure.security.keyvault.keys.models.KeyCurveName;\n+import com.azure.security.keyvault.keys.models.KeyVaultKey;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n \n KeyClient keyClient = new KeyClientBuilder()\n-        .vaultUrl(<your-vault-url>)\n-        .credential(new DefaultAzureCredentialBuilder().build())\n-        .buildClient();\n+    .vaultUrl(<your-key-vault-url>)\n+    .credential(new DefaultAzureCredentialBuilder().build())\n+    .buildClient();\n \n KeyVaultKey rsaKey = keyClient.createRsaKey(new CreateRsaKeyOptions(\"CloudRsaKey\")\n     .setExpiresOn(OffsetDateTime.now().plusYears(1))\n     .setKeySize(2048));\n-System.out.printf(\"Key is created with name %s and id %s \\n\", rsaKey.getName(), rsaKey.getId());\n+System.out.printf(\"Key created with name \\\"%s\\\" and id %s\\n\", rsaKey.getName(), rsaKey.getId());\n \n KeyVaultKey ecKey = keyClient.createEcKey(new CreateEcKeyOptions(\"CloudEcKey\")\n     .setCurveName(KeyCurveName.P_256)\n     .setExpiresOn(OffsetDateTime.now().plusYears(1)));\n-System.out.printf(\"Key is created with name %s and id %s \\n\", ecKey.getName(), ecKey.getId());\n+System.out.printf(\"Key created with name \\\"%s\\\" and id %s\\n\", ecKey.getName(), ecKey.getId());\n ```\n \n-### Retrieve a Key\n-\n-Retrieve a previously stored Key by calling `getKey`.\n+### Retrieve a key\n+Retrieve a previously stored key by calling `getKey`.\n \n ```Java\n-KeyVaultKey key = keyClient.getKey(\"key_name\");\n-System.out.printf(\"Key is returned with name %s and id %s \\n\", key.getName(), key.getId());\n+KeyVaultKey key = keyClient.getKey(\"<key-name>\");\n+System.out.printf(\"A key was returned with name \\\"%s\\\" and id %s\\n\", key.getName(), key.getId());\n ```\n \n-### Update an existing Key\n-\n-Update an existing Key by calling `updateKeyProperties`.\n+### Update an existing key\n+Update an existing key by calling `updateKeyProperties`.\n \n ```Java\n // Get the key to update.\n-KeyVaultKey key = keyClient.getKey(\"key_name\");\n+KeyVaultKey key = keyClient.getKey(\"<key-name>\");\n // Update the expiry time of the key.\n key.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(30));\n KeyVaultKey updatedKey = keyClient.updateKeyProperties(key.getProperties());\n-System.out.printf(\"Key's updated expiry time %s \\n\", updatedKey.getProperties().getExpiresOn().toString());\n+System.out.printf(\"Key's updated expiry time: %s\\n\", updatedKey.getProperties().getExpiresOn().toString());\n ```\n \n-### Delete a Key\n-\n-Delete an existing Key by calling `beginDeleteKey`.\n+### Delete a key\n+Delete an existing key by calling `beginDeleteKey`.\n \n ```Java\n-SyncPoller<DeletedKey, Void> deletedKeyPoller = keyClient.beginDeleteKey(\"keyName\");\n+SyncPoller<DeletedKey, Void> deletedKeyPoller = keyClient.beginDeleteKey(\"<key-name>\");\n \n PollResponse<DeletedKey> deletedKeyPollResponse = deletedKeyPoller.poll();\n \n-// Deleted key is accessible as soon as polling begins\n+// Deleted key is accessible as soon as polling begins.\n DeletedKey deletedKey = deletedKeyPollResponse.getValue();\n-System.out.println(\"Deleted Date  %s\" + deletedKey.getDeletedOn().toString());\n+// Deletion date only works for SoftDelete Enabled Key Vault.\n+System.out.printf(\"Deletion date: %s\\n\", deletedKey.getDeletedOn().toString());\n \n // Key is being deleted on server.\n deletedKeyPoller.waitForCompletion();\n ```\n \n-### List Keys\n-\n+### List keys\n List the keys in the key vault by calling `listPropertiesOfKeys`.\n \n ```java\n-// List operations don't return the keys with key material information. So, for each returned key we call getKey to get the key with its key material information.\n+// List operations don't return the keys with key material information. So, for each returned key we call getKey to\n+// get the key with its key material information.\n for (KeyProperties keyProperties : keyClient.listPropertiesOfKeys()) {\n     KeyVaultKey keyWithMaterial = keyClient.getKey(keyProperties.getName(), keyProperties.getVersion());\n-    System.out.printf(\"Received key with name %s and type %s %n\", keyWithMaterial.getName(), keyWithMaterial.getKey().getKeyType());\n+    System.out.printf(\"Received key with name \\\"%s\\\" and type \\\"%s\\\"\\n\", keyWithMaterial.getName(),\n+        keyWithMaterial.getKey().getKeyType());\n }\n ```\n \n ### Encrypt\n-\n Encrypt plain text by calling `encrypt`.\n \n ```java\n CryptographyClient cryptoClient = new CryptographyClientBuilder()\n     .credential(new DefaultAzureCredentialBuilder().build())\n-    .keyIdentifier(\"<Your-Key-Id-From-Keyvault\")\n+    .keyIdentifier(\"<your-key-id-from-key-vault\")\n     .buildClient();\n \n byte[] plainText = new byte[100];\n new Random(0x1234567L).nextBytes(plainText);\n \n // Let's encrypt a simple plain text of size 100 bytes.\n-EncryptResult encryptResult = cryptoClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plainText);\n-System.out.printf(\"Returned cipherText size is %d bytes with algorithm %s \\n\", encryptResult.getCipherText().length, encryptResult.getAlgorithm().toString());\n+EncryptResult encryptionResult = cryptoClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plainText);\n+System.out.printf(\"Returned cipherText size is %d bytes with algorithm \\\"%s\\\"\\n\",\n+    encryptionResult.getCipherText().length, encryptionResult.getAlgorithm().toString());\n ```\n \n ### Decrypt\n-\n Decrypt encrypted content by calling `decrypt`.\n \n ```java\n byte[] plainText = new byte[100];\n new Random(0x1234567L).nextBytes(plainText);\n-EncryptResult encryptResult = cryptoClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plainText);\n+EncryptResult encryptionResult = cryptoClient.encrypt(EncryptionAlgorithm.RSA_OAEP, plainText);\n \n //Let's decrypt the encrypted result.\n-DecryptResult decryptResult = cryptoClient.decrypt(EncryptionAlgorithm.RSA_OAEP, encryptResult.getCipherText());\n-System.out.printf(\"Returned plainText size is %d bytes \\n\", decryptResult.getPlainText().length);\n+DecryptResult decryptionResult = cryptoClient.decrypt(EncryptionAlgorithm.RSA_OAEP, encryptionResult.getCipherText());\n+System.out.printf(\"Returned plainText size is %d bytes\\n\", decryptionResult.getPlainText().length);\n ```\n \n ### Async API\n-The following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Key Service tasks, including:\n-- [Create a Key Asynchronously](#create-a-key-asynchronously)\n-- [Retrieve a Key Asynchronously](#retrieve-a-key-asynchronously)\n-- [Update an existing Key Asynchronously](#update-an-existing-key-asynchronously)\n-- [Delete a Key Asynchronously](#delete-a-key-asynchronously)\n-- [List Keys Asynchronously](#list-keys-asynchronously)\n-- [Encrypt Asynchronously](#encryp-asynchronously)\n-- [Decrypt Asynchronously](#decrypt-asynchronously)\n-\n-> Note : You should add \"System.in.read()\" or \"Thread.Sleep()\" after the function calls in the main class/thread to allow Async functions/operations to execute and finish before the main application/thread exits.\n+The following sections provide several code snippets covering some of the most common asynchronous Azure Key Vault Key service tasks, including:\n+- [Create a key asynchronously](#create-a-key-asynchronously)\n+- [Retrieve a key asynchronously](#retrieve-a-key-asynchronously)\n+- [Update an existing key asynchronously](#update-an-existing-key-asynchronously)\n+- [Delete a key asynchronously](#delete-a-key-asynchronously)\n+- [List keys asynchronously](#list-keys-asynchronously)\n+- [Encrypt asynchronously](#encryp-asynchronously)\n+- [Decrypt asynchronously](#decrypt-asynchronously)\n \n-### Create a Key Asynchronously\n+> Note : You should add `System.in.read()` or `Thread.sleep()` after the function calls in the main class/thread to allow async functions/operations to execute and finish before the main application/thread exits.\n \n-Create a Key to be stored in the Azure Key Vault.\n-- `setKey` creates a new key in the key vault. if the key with name already exists then a new version of the key is created.\n+### Create a key asynchronously\n+Create a key to be stored in the Azure Key Vault.\n+- `setKey` creates a new key in the Azure Key Vault. If a key with the same name already exists then a new version of the key is created.\n \n ```Java\n import com.azure.identity.DefaultAzureCredentialBuilder;\n-import com.azure.security.keyvault.keys.models.Key;\n import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n+import com.azure.security.keyvault.keys.models.CreateEcKeyOptions;\n+import com.azure.security.keyvault.keys.models.CreateRsaKeyOptions;\n \n KeyAsyncClient keyAsyncClient = new KeyClientBuilder()\n-        .vaultUrl(<your-vault-url>)\n-        .credential(new DefaultAzureCredentialBuilder().build())\n-        .buildAsyncClient();\n+    .vaultUrl(<your-key-vault-url>)\n+    .credential(new DefaultAzureCredentialBuilder().build())\n+    .buildAsyncClient();\n \n keyAsyncClient.createRsaKey(new CreateRsaKeyOptions(\"CloudRsaKey\")\n     .setExpiresOn(OffsetDateTime.now().plusYears(1))\n     .setKeySize(2048))\n     .subscribe(key ->\n-        System.out.printf(\"Key is created with name %s and id %s \\n\", key.getName(), key.getId()));\n+        System.out.printf(\"Key created with name \\\"%s\\\" and id %s\\n\", key.getName(), key.getId()));\n \n keyAsyncClient.createEcKey(new CreateEcKeyOptions(\"CloudEcKey\")\n     .setExpiresOn(OffsetDateTime.now().plusYears(1)))\n     .subscribe(key ->\n-        System.out.printf(\"Key is created with name %s and id %s \\n\", key.getName(), key.getId()));\n+        System.out.printf(\"Key created with name \\\"%s\\\" and id %s\\n\", key.getName(), key.getId()));\n ```\n \n-### Retrieve a Key Asynchronously\n-\n-Retrieve a previously stored Key by calling `getKey`.\n+### Retrieve a key asynchronously\n+Retrieve a previously stored key by calling `getKey`.\n \n ```Java\n-keyAsyncClient.getKey(\"keyName\").subscribe(key ->\n-  System.out.printf(\"Key is returned with name %s and id %s \\n\", key.getName(), key.getId()));\n+keyAsyncClient.getKey(\"<key-name>\")\n+    .subscribe(key ->\n+        System.out.printf(\"Key was returned with name \\\"%s\\\" and id %s\\n\", key.getName(), key.getId()));\n ```\n \n-### Update an existing Key Asynchronously\n-\n-Update an existing Key by calling `updateKeyProperties`.\n+### Update an existing key asynchronously\n+Update an existing key by calling `updateKeyProperties`.\n \n ```Java\n-keyAsyncClient.getKey(\"keyName\").subscribe(keyResponse -> {\n-     // Get the Key\n-     KeyVaultKey key = keyResponse;\n-     // Update the expiry time of the key.\n-     key.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(50));\n-     keyAsyncClient.updateKeyProperties(key.getProperties()).subscribe(updatedKey ->\n-         System.out.printf(\"Key's updated expiry time %s \\n\", updatedKey.getProperties().getExpiresOn().toString()));\n+// Get the key.\n+keyAsyncClient.getKey(\"<key-name>\")\n+    .subscribe(key -> {\n+        // Update the expiry time of the key.\n+        key.getProperties().setExpiresOn(OffsetDateTime.now().plusDays(50));\n+        keyAsyncClient.updateKeyProperties(key.getProperties())\n+            .subscribe(updatedKey ->\n+                System.out.printf(\"Key's updated expiry time: %s\\n\",\n+                    updatedKey.getProperties().getExpiresOn().toString()));\n    });\n ```\n \n-### Delete a Key Asynchronously\n-\n-Delete an existing Key by calling `beginDeleteKey`.\n+### Delete a key asynchronously\n+Delete an existing key by calling `beginDeleteKey`.\n \n ```java\n-keyAsyncClient.beginDeleteKey(\"keyName\")\n+keyAsyncClient.beginDeleteKey(\"<key-name>\")\n     .subscribe(pollResponse -> {\n-        System.out.println(\"Delete Status: \" + pollResponse.getStatus().toString());\n-        System.out.println(\"Delete Key Name: \" + pollResponse.getValue().getName());\n-        System.out.println(\"Key Delete Date: \" + pollResponse.getValue().getDeletedOn().toString());\n+        System.out.printf(\"Deletetion status: %s\\n\", pollResponse.getStatus().toString());", "originalCommit": "241072e2d4eaa782bc95b67d9333db05923f3ed3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}