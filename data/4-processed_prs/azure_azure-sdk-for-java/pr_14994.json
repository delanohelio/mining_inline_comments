{"pr_number": 14994, "pr_title": "Add ADT event route APIs and implementation", "pr_createdAt": "2020-09-09T22:26:23Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14994", "timeline": [{"oid": "0757b600ca533e611352aba06a7268eaa2f840c3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0757b600ca533e611352aba06a7268eaa2f840c3", "message": "Add ADT event route APIs and implementation", "committedDate": "2020-09-09T22:24:50Z", "type": "commit"}, {"oid": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "message": "fixup", "committedDate": "2020-09-09T22:29:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MjQyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485962427", "bodyText": "Is EventRoute under the impl package? If yes, then it will need to be moved out of it and into /models -> the pipeline will complain that impl classes shouldn't be referenced in public APIs", "author": "abhipsaMisra", "createdAt": "2020-09-09T22:45:29Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1190,4 +1201,141 @@ public HttpPipeline getHttpPipeline() {\n                 objectPagedResponse.getValue().getContinuationToken(),\n                 objectPagedResponse.getDeserializedHeaders()));\n     }\n+\n+    //endregion Query APIs\n+\n+    //region Event Route APIs\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> createEventRoute(String eventRouteId, EventRoute eventRoute)", "originalCommit": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2Njc0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485966745", "bodyText": "nit: this can be inline in line 1324, right?", "author": "abhipsaMisra", "createdAt": "2020-09-09T22:58:21Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1190,4 +1201,141 @@ public HttpPipeline getHttpPipeline() {\n                 objectPagedResponse.getValue().getContinuationToken(),\n                 objectPagedResponse.getDeserializedHeaders()));\n     }\n+\n+    //endregion Query APIs\n+\n+    //region Event Route APIs\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> createEventRoute(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return createEventRouteWithResponse(eventRouteId, eventRoute)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return withContext(context -> createEventRouteWithResponse(eventRouteId, eventRoute, context));\n+    }\n+\n+    Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().addWithResponseAsync(eventRouteId, eventRoute, context);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return The retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<EventRoute> getEventRoute(String eventRouteId)\n+    {\n+        return getEventRouteWithResponse(eventRouteId)\n+            .map(Response::getValue);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return A {@link Response} containing the retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> getEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().getByIdWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteEventRoute(String eventRouteId)\n+    {\n+        return deleteEventRouteWithResponse(eventRouteId)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> deleteEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().deleteWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @return A {@link PagedFlux} that contains all the event routes that exist in your digital twins instance.\n+     *         This PagedFlux may take multiple service requests to iterate over all event routes.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<EventRoute> listEventRoutes()\n+    {\n+        return listEventRoutes(new EventRoutesListOptions());\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @param options The optional parameters to use when listing event routes. See {@link EventRoutesListOptions} for more details\n+     *                on what optional parameters can be set.\n+     * @return A {@link PagedFlux} that contains all the event routes that exist in your digital twins instance.\n+     *         This PagedFlux may take multiple service requests to iterate over all event routes.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<EventRoute> listEventRoutes(EventRoutesListOptions options)\n+    {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listEventRoutesFirstPage(options, context)),\n+            nextLink -> withContext(context -> listEventRoutesNextPage(nextLink, context)));\n+    }\n+\n+    PagedFlux<EventRoute> listEventRoutes(EventRoutesListOptions options, Context context)\n+    {\n+        return new PagedFlux<>(\n+            () -> listEventRoutesFirstPage(options, context),\n+            nextLink -> listEventRoutesNextPage(nextLink, context));\n+    }\n+\n+    Mono<PagedResponse<EventRoute>> listEventRoutesFirstPage(EventRoutesListOptions options, Context context) {", "originalCommit": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MjI2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485972260", "bodyText": "This function and the next page function are called in two places, so I'd rather keep them in their own function", "author": "timtay-microsoft", "createdAt": "2020-09-09T23:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2Njc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NzM4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485967381", "bodyText": "q - should \"twin\" be in lower case? We've referenced it as \"digital twin\" everywhere.", "author": "abhipsaMisra", "createdAt": "2020-09-09T23:00:01Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -90,6 +92,8 @@ public HttpPipeline getHttpPipeline() {\n         return this.protocolLayer.getHttpPipeline();\n     }\n \n+    //region Digital Twin APIs", "originalCommit": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MjQyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485972421", "bodyText": "Sure, why not?", "author": "timtay-microsoft", "createdAt": "2020-09-09T23:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2NzM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485969727", "bodyText": "There is some strange spacing in the comments.", "author": "azabbasi", "createdAt": "2020-09-09T23:07:09Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -1190,4 +1201,141 @@ public HttpPipeline getHttpPipeline() {\n                 objectPagedResponse.getValue().getContinuationToken(),\n                 objectPagedResponse.getDeserializedHeaders()));\n     }\n+\n+    //endregion Query APIs\n+\n+    //region Event Route APIs\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> createEventRoute(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return createEventRouteWithResponse(eventRouteId, eventRoute)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Create an event route.\n+     * @param eventRouteId The Id of the event route to create.\n+     * @param eventRoute The event route to create.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute)\n+    {\n+        return withContext(context -> createEventRouteWithResponse(eventRouteId, eventRoute, context));\n+    }\n+\n+    Mono<Response<Void>> createEventRouteWithResponse(String eventRouteId, EventRoute eventRoute, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().addWithResponseAsync(eventRouteId, eventRoute, context);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return The retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<EventRoute> getEventRoute(String eventRouteId)\n+    {\n+        return getEventRouteWithResponse(eventRouteId)\n+            .map(Response::getValue);\n+    }\n+\n+    /**\n+     * Get an event route.\n+     * @param eventRouteId The Id of the event route to get.\n+     * @return A {@link Response} containing the retrieved event route.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> getEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<EventRoute>> getEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().getByIdWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return An empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> deleteEventRoute(String eventRouteId)\n+    {\n+        return deleteEventRouteWithResponse(eventRouteId)\n+            .flatMap(voidResponse -> Mono.empty());\n+    }\n+\n+    /**\n+     * Delete an event route.\n+     * @param eventRouteId The Id of the event route to delete.\n+     * @return A {@link Response} containing an empty mono.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId)\n+    {\n+        return withContext(context -> deleteEventRouteWithResponse(eventRouteId, context));\n+    }\n+\n+    Mono<Response<Void>> deleteEventRouteWithResponse(String eventRouteId, Context context)\n+    {\n+        return this.protocolLayer.getEventRoutes().deleteWithResponseAsync(eventRouteId, context);\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @return A {@link PagedFlux} that contains all the event routes that exist in your digital twins instance.\n+     *         This PagedFlux may take multiple service requests to iterate over all event routes.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<EventRoute> listEventRoutes()\n+    {\n+        return listEventRoutes(new EventRoutesListOptions());\n+    }\n+\n+    /**\n+     * List all the event routes that exist in your digital twins instance.\n+     * @param options The optional parameters to use when listing event routes. See {@link EventRoutesListOptions} for more details\n+     *                on what optional parameters can be set.", "originalCommit": "c17082ab97802d1f03fa5ee5b1f4f4d394d0416e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MzExMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14994#discussion_r485973110", "bodyText": "I'll fix these, sure", "author": "timtay-microsoft", "createdAt": "2020-09-09T23:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2OTcyNw=="}], "type": "inlineReview"}, {"oid": "ad56de1412093d22883d1d7fcca37ea810adf18d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad56de1412093d22883d1d7fcca37ea810adf18d", "message": "cr comments", "committedDate": "2020-09-09T23:18:15Z", "type": "commit"}, {"oid": "7b60b7d51deca5dfe051f357ca1ee97ae1e39415", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b60b7d51deca5dfe051f357ca1ee97ae1e39415", "message": "Make EventRoute live in custom folder", "committedDate": "2020-09-09T23:23:21Z", "type": "commit"}, {"oid": "efc28dc4bb7ba418d045d22815e36229b9eee017", "url": "https://github.com/Azure/azure-sdk-for-java/commit/efc28dc4bb7ba418d045d22815e36229b9eee017", "message": "fix javadocs", "committedDate": "2020-09-09T23:40:02Z", "type": "commit"}]}