{"pr_number": 16283, "pr_title": "cosmos lazy decryption", "pr_createdAt": "2020-10-14T06:08:07Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16283", "timeline": [{"oid": "459084268b7f06f7e0229ba5bb8e922f02c74d4f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/459084268b7f06f7e0229ba5bb8e922f02c74d4f", "message": "cosmos lazy decryption", "committedDate": "2020-10-14T05:56:21Z", "type": "commit"}, {"oid": "b9eae05a8f6cb8433d8786b0ec3304bdd03a09a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9eae05a8f6cb8433d8786b0ec3304bdd03a09a8", "message": "Merge branch 'master' into users/moderakh/20201002-lazyDecryption", "committedDate": "2020-10-14T06:03:25Z", "type": "commit"}, {"oid": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8882476ce89b417f938ba0d4f39d10b47e2ceecd", "message": "fixed checkstyle spotbug complains", "committedDate": "2020-10-14T18:03:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5OTMwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504899304", "bodyText": "TODOs - are they tracked in a separate PR? or can this todo be removed due to the example provided above?", "author": "FabianMeiswinkel", "createdAt": "2020-10-14T18:50:53Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/DecryptableItem.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import reactor.core.publisher.Mono;\n+\n+\n+/// <summary>\n+/// Allows for lazy decryption, which provides user a way to handle possible exceptions encountered as part of feed /\n+// query processing.\n+/// Also provides decryption operation details.\n+/// </summary>\n+/// <example>\n+/// <code language=\"c#\">\n+/// <![CDATA[\n+/// public class ToDoActivity{\n+///     public string id {get; set;}\n+///     public string status {get; set;}\n+///     public int cost {get; set;}\n+/// }\n+///\n+/// QueryDefinition queryDefinition = new QueryDefinition(\"select * from ToDos\");\n+/// using (FeedIterator<DecrytableItem> feedIterator = this.Container.GetItemQueryIterator<DecrytableItem>(\n+///     queryDefinition,\n+///     requestOptions: new QueryRequestOptions() { PartitionKey = new PartitionKey(\"Error\")}))\n+/// {\n+///     while (feedIterator.HasMoreResults)\n+///     {\n+///         FeedResponse<DecryptableItem> decryptableItems = await feedIterator.ReadNextAsync();\n+///         foreach(DecryptableItem item in decryptableItems){\n+///         {\n+///             try\n+///             {\n+///                 (ToDoActivity toDo, DecryptionContext _) = await item.GetItemAsync<ToDoActivity>();\n+///             }\n+///             catch (EncryptionException encryptionException)\n+///             {\n+///                 string dataEncryptionKeyId = encryptionException.DataEncryptionKeyId;\n+///                 string rawPayload = encryptionException.EncryptedContent;\n+///             }\n+///         }\n+///     }\n+/// }\n+/// ]]>\n+/// </code>\n+/// </example>\n+\n+// TODO: moderakh add example", "originalCommit": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjAwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504906005", "bodyText": "the public APIs haven't finalized yet. For that reason I would like to leave wiring the examples for later (to avoid re-do work), once the final APIs are finalized.", "author": "moderakh", "createdAt": "2020-10-14T19:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5OTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5OTc2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504899763", "bodyText": "NIT remove on line", "author": "FabianMeiswinkel", "createdAt": "2020-10-14T18:51:38Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/DecryptableItemCore.java", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.apachecommons.lang.tuple.Pair;\n+import com.azure.cosmos.implementation.encryption.Constants;\n+import com.azure.cosmos.implementation.encryption.EncryptionProcessor;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Mono;\n+\n+class DecryptableItemCore extends DecryptableItem {\n+\n+    /**\n+     * The encrypted content which is yet to be decrypted.\n+     */\n+    private final JsonNode decryptableContent;\n+    private final Encryptor encryptor;\n+    private final ItemDeserializer cosmosSerializer;\n+\n+    public DecryptableItemCore(JsonNode decryptableContent,\n+                               Encryptor encryptor,\n+                               ItemDeserializer cosmosSerializer) {\n+        Preconditions.checkNotNull(decryptableContent, \"decryptableContent\");\n+        Preconditions.checkNotNull(encryptor, \"encryptor\");\n+        Preconditions.checkNotNull(cosmosSerializer, \"cosmosSerializer\");\n+\n+        this.decryptableContent = decryptableContent;\n+        this.encryptor = encryptor;\n+        this.cosmosSerializer = cosmosSerializer;\n+    }\n+\n+    @Override\n+    public <T> Mono<DecryptionResult<T>> getDecryptionResult(final Class<T> classType) {\n+\n+        ObjectNode decryptableContentAsObjectNode = Utils.as(this.decryptableContent, ObjectNode.class);\n+        if (decryptableContentAsObjectNode == null) {\n+            // (this.cosmosSerializer.FromStream<T>(EncryptionProcessor.BaseSerializer.ToStream\n+            return Mono.just(new DecryptionResult<>(Utils.getSimpleObjectMapper().convertValue(this.decryptableContent, classType), null));\n+        }\n+\n+        Mono<Pair<ObjectNode, DecryptionContext>> decryptedItemAndContextPairMono =\n+            EncryptionProcessor.decrypt(decryptableContentAsObjectNode, this.encryptor);\n+", "originalCommit": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNTAwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504905003", "bodyText": "thanks next commit will fix.", "author": "moderakh", "createdAt": "2020-10-14T19:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5OTc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMDY0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504900644", "bodyText": "NIT remove one line", "author": "FabianMeiswinkel", "createdAt": "2020-10-14T18:53:04Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptableItem.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// ------------------------------------------------------------\n+// Copyright (c) Microsoft Corporation.  All rights reserved.\n+// ------------------------------------------------------------\n+\n+", "originalCommit": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNDY1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504904653", "bodyText": "thanks next commit will fix.", "author": "moderakh", "createdAt": "2020-10-14T19:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMDgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504900829", "bodyText": "NIT remove todo", "author": "FabianMeiswinkel", "createdAt": "2020-10-14T18:53:23Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptableItem.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// ------------------------------------------------------------\n+// Copyright (c) Microsoft Corporation.  All rights reserved.\n+// ------------------------------------------------------------\n+\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.cosmos.implementation.ItemDeserializer;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.encryption.EncryptionUtils;\n+import com.azure.cosmos.implementation.guava25.base.Preconditions;\n+\n+/// <summary>\n+/// Input type that can be used to allow for lazy decryption in the write path.\n+/// </summary>\n+/// <typeparam name=\"T\">Type of item.</typeparam>\n+/// <example>\n+/// This example takes in a item, encrypts it and writes to Cosmos container.\n+/// <code language=\"c#\">\n+/// <![CDATA[\n+/// public class ToDoActivity{\n+///     public string id {get; set;}\n+///     public string status {get; set;}\n+/// }\n+///\n+/// ToDoActivity test = new ToDoActivity()\n+/// {\n+///    id = Guid.NewGuid().ToString(),\n+///    status = \"InProgress\"\n+/// };\n+///\n+/// ItemResponse<EncryptableItem<ToDoActivity>> createResponse = await encryptionContainer\n+// .CreateItemAsync<EncryptableItem<ToDoActivity>>(\n+///     new EncryptableItem<ToDoActivity>(test),\n+///     new PartitionKey(test.Status),\n+///     EncryptionItemRequestOptions);\n+///\n+/// if (!createResponse.IsSuccessStatusCode)\n+/// {\n+///     //Handle and log exception\n+///     return;\n+/// }\n+///\n+/// (ToDoActivity toDo, DecryptionContext _) = await item.DecryptableItem.GetItemAsync<ToDoActivity>();\n+/// ]]>\n+/// </code>\n+/// </example>\n+\n+// TODO moderakh add example", "originalCommit": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504906169", "bodyText": "the public APIs haven't finalized yet. For that reason I would like to leave wiring the examples for later (to avoid re-do work), once the final APIs are finalized.", "author": "moderakh", "createdAt": "2020-10-14T19:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMDgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMTYzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504901630", "bodyText": "NIT remove one line - also below after the precondition check", "author": "FabianMeiswinkel", "createdAt": "2020-10-14T18:54:52Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -163,29 +204,66 @@\n         EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions,\n             EncryptionItemRequestOptions.class);\n \n-        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n-            Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using \"\n-                + \"EncryptionContainer.\");\n+        if (encryptionItemRequestOptions == null || encryptionItemRequestOptions.getEncryptionOptions() == null) {\n+            return container.createItem(item, partitionKey, requestOptions);\n+        }\n+", "originalCommit": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNDMzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504904339", "bodyText": "thanks. next commit will fix.", "author": "moderakh", "createdAt": "2020-10-14T18:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMTYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMTk4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504901988", "bodyText": "???", "author": "FabianMeiswinkel", "createdAt": "2020-10-14T18:55:28Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -163,29 +204,66 @@\n         EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions,\n             EncryptionItemRequestOptions.class);\n \n-        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n-            Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using \"\n-                + \"EncryptionContainer.\");\n+        if (encryptionItemRequestOptions == null || encryptionItemRequestOptions.getEncryptionOptions() == null) {\n+            return container.createItem(item, partitionKey, requestOptions);\n+        }\n+\n+\n+        Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using \"\n+            + \"EncryptionContainer.\");\n+\n+\n+        EncryptableItem encryptableItem = Utils.as(item, EncryptableItem.class);\n+        if (encryptableItem != null) {\n+            byte[] streamPayload = encryptableItem.toStream(this.getItemDeserializer());\n+\n+            Mono<CosmosItemResponse<byte[]>> rspMono = this.createItemHelper(streamPayload,\n+                partitionKey,\n+                requestOptions,\n+                false);\n+\n \n-            return Mono.defer(() -> {\n-                byte[] payload = cosmosSerializerToStream(item);\n-                Mono<CosmosItemResponse<byte[]>> result = this.createItemStream(payload, partitionKey,\n-                    encryptionItemRequestOptions);\n+            return rspMono.map(\n+                rsp -> {\n+                    encryptableItem.setDecryptableItem(\n+                        // EncryptionProcessor.BaseSerializer.FromStream<JObject>(responseMessage.Content),\n+                        getItemDeserializer().parseFrom(ObjectNode.class,\n+                            EncryptionModelBridgeInternal.getByteArrayContent(rsp)),\n+                        this.encryptor,\n+                        this.getItemDeserializer()\n+                    );\n \n-                return result.map(rsp -> (CosmosItemResponse<T>) this.responseFactory.createItemResponse(rsp,\n-                    item.getClass()));\n+                    return createEncryptionItemResponse(rsp, (T) encryptableItem);\n+                }\n+            ).subscribeOn(encryptionScheduler);\n \n-            }).subscribeOn(encryptionScheduler);\n         } else {\n-            return container.createItem(item, partitionKey, requestOptions);\n+            byte[] streamPayload = cosmosSerializerToStream(item);\n+            Mono<CosmosItemResponse<byte[]>> response = createItemHelper(\n+                streamPayload,\n+                partitionKey,\n+                requestOptions,\n+                true\n+            );\n+\n+            return response\n+                .publishOn(encryptionScheduler)\n+                .map(\n+                    rsp -> {\n+                        return this.responseFactory.createItemResponse(rsp, (Class<T>) item.getClass());\n+                    }\n+                );\n+\n+            // TODO: no support for streaming", "originalCommit": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMzczNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504903734", "bodyText": "we don't have support for streaming anywhere in the SDK.\nI am considering wiring up some byte[] API.\nthis TODO is only a hint to myself no actual work is remaining.\nI will reword it to make it cleaner.", "author": "moderakh", "createdAt": "2020-10-14T18:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMTk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMjk3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504902970", "bodyText": "Same as above - at least to me it isn't clear what this comment means. We don't support Stream Apis at all in Java,  correct?", "author": "FabianMeiswinkel", "createdAt": "2020-10-14T18:57:15Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -261,48 +375,85 @@\n         EncryptionItemRequestOptions encryptionItemRequestOptions = Utils.as(requestOptions,\n             EncryptionItemRequestOptions.class);\n \n-        if (encryptionItemRequestOptions != null && encryptionItemRequestOptions.getEncryptionOptions() != null) {\n-            Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using \"\n-                + \"EncryptionContainer.\");\n+        if (encryptionItemRequestOptions == null || encryptionItemRequestOptions.getEncryptionOptions() == null) {\n+            return container.replaceItem(item, itemId, partitionKey, requestOptions);\n+        }\n+\n+        Preconditions.checkArgument(partitionKey != null, \"partitionKey cannot be null for operations using \"\n+            + \"EncryptionContainer.\");\n \n-            return Mono.defer(() -> {\n-                byte[] payload = cosmosSerializerToStream(item);\n-                Mono<CosmosItemResponse<byte[]>> result = this.replaceItemStream(payload,\n-                    itemId,\n-                    partitionKey,\n-                    encryptionItemRequestOptions);\n \n-                return result.map(rsp -> (CosmosItemResponse<T>) this.responseFactory.createItemResponse(rsp,\n-                    item.getClass()));\n-            }).subscribeOn(encryptionScheduler);\n+        EncryptableItem encryptableItem = Utils.as(item, EncryptableItem.class);\n+        if (encryptableItem != null) {\n+\n+            // using (Stream streamPayload = encryptableItem.ToStream(this.CosmosSerializer))\n+            byte[] streamPayload = encryptableItem.toStream(this.getItemDeserializer());\n+\n+            Mono<CosmosItemResponse<byte[]>> rspMono = this.replaceItemHelper(streamPayload,\n+                itemId,\n+                partitionKey,\n+                requestOptions,\n+                false);\n+\n+\n+            return rspMono.map(\n+                rsp -> {\n+                    encryptableItem.setDecryptableItem(\n+                        //EncryptionProcessor.BaseSerializer.FromStream<JObject>(responseMessage.Content),\n+                        getItemDeserializer().parseFrom(ObjectNode.class,\n+                            EncryptionModelBridgeInternal.getByteArrayContent(rsp)),\n+                        this.encryptor,\n+                        this.getItemDeserializer()\n+                    );\n+\n+                    return createEncryptionItemResponse(rsp, (T) encryptableItem);\n+                }\n+            ).subscribeOn(encryptionScheduler);\n \n         } else {\n-            return container.replaceItem(item, itemId, partitionKey, requestOptions);\n+            byte[] streamPayload = cosmosSerializerToStream(item);\n+            Mono<CosmosItemResponse<byte[]>> response = replaceItemHelper(\n+                streamPayload,\n+                itemId,\n+                partitionKey,\n+                requestOptions,\n+                true\n+            );\n+\n+            return response\n+                .publishOn(encryptionScheduler)\n+                .map(\n+                    rsp -> {\n+                        return this.responseFactory.createItemResponse(rsp, (Class<T>) item.getClass());\n+                    }\n+                );\n+\n+            // TODO: no support for streaming", "originalCommit": "8882476ce89b417f938ba0d4f39d10b47e2ceecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjgyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16283#discussion_r504906826", "bodyText": "you are right the comment is confusing.\nwe don't support streaming api in java SDK.\nwill cleanup", "author": "moderakh", "createdAt": "2020-10-14T19:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMjk3MA=="}], "type": "inlineReview"}, {"oid": "f68d549c74614b9635f1d427035d9d8e2eaba076", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f68d549c74614b9635f1d427035d9d8e2eaba076", "message": "review comments addressed", "committedDate": "2020-10-14T19:06:30Z", "type": "commit"}, {"oid": "637b2835b586d2b73bde3f68f2cc19a32d7d8733", "url": "https://github.com/Azure/azure-sdk-for-java/commit/637b2835b586d2b73bde3f68f2cc19a32d7d8733", "message": "more cleanup to make spotbug happy", "committedDate": "2020-10-14T21:52:58Z", "type": "commit"}]}