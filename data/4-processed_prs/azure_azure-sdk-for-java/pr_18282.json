{"pr_number": 18282, "pr_title": "Add migration guides for Azure Key Vault client libraries.", "pr_createdAt": "2020-12-19T00:40:59Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18282", "timeline": [{"oid": "df6e1a62df81211863f870991b10523c8864aa63", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df6e1a62df81211863f870991b10523c8864aa63", "message": "Created migration guide for the Azure Key Vault Key client library.", "committedDate": "2020-12-19T00:38:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzA4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546163080", "bodyText": "README for name of new package here should have the new package name :)", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:43:40Z", "path": "sdk/keyvault/azure-security-keyvault-keys/migration_guide.md", "diffHunk": "@@ -0,0 +1,226 @@\n+# Guide for migrating to azure-security-keyvault-keys from azure-keyvault\n+This guide is intended to assist in the migration to `azure-security-keyvault-keys` from `azure-keyvault`. It will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `azure-keyvault` package is assumed. For those new to the Key Vault Key client library for Java, please refer to the [README for name of new package here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-keys/README.md) rather than this guide.", "originalCommit": "df6e1a62df81211863f870991b10523c8864aa63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546164846", "bodyText": "Thanks! I don't know how I missed this :P", "author": "vcolin7", "createdAt": "2020-12-19T00:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NTI5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546165290", "bodyText": "This is a cool experiment. @sadasant missed the same. I wonder if it has something to do with how we read through things. Now I am waiting to see if the other two language folks miss the exact same thing!", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MDY2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546170662", "bodyText": "I think \"For those new to the Key Vault Key client library for Java, please refer to the [README]\" reads a lot better than \"For those new to the Key Vault Key client library for Java, please refer to the [Key Vault Key client library for Java README]\". What do you think @ramya-rao-a?", "author": "vcolin7", "createdAt": "2020-12-19T01:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MzE4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546173182", "bodyText": "I tend to use multiple words for the link text rather than single words like \"here\" or \"see\" because it gives the required context to screen readers when using the \"list all links on page\" feature. Thus my aversion to using just \"README\" as the link text. How about this:\n\nIf you are not familiar with the older azure-keyvault package, you can skip this migration guide and go over to the [readme for azure-security-keyvault-keys](add link here)", "author": "ramya-rao-a", "createdAt": "2020-12-19T01:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzU2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546163563", "bodyText": "Shouldnt we also talk about constructors vs builders here?", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:46:07Z", "path": "sdk/keyvault/azure-security-keyvault-keys/migration_guide.md", "diffHunk": "@@ -0,0 +1,226 @@\n+# Guide for migrating to azure-security-keyvault-keys from azure-keyvault\n+This guide is intended to assist in the migration to `azure-security-keyvault-keys` from `azure-keyvault`. It will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `azure-keyvault` package is assumed. For those new to the Key Vault Key client library for Java, please refer to the [README for name of new package here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-keys/README.md) rather than this guide.\n+\n+## Table of contents\n+- [Migration benefits](#migration-benefits)\n+- [Cross Service SDK improvements](#cross-service-sdk-improvements)\n+- [Important changes](#important-changes)\n+    - [Separate packages and clients](#separate-packages-and-clients)\n+    - [Package names and namespaces](#package-names-and-namespaces)\n+    - [Client constructors](#client-constructors)\n+    - [Authentication](#authentication)\n+    - [Common scenarios](#common-scenarios)\n+        - [Async operations](#async-operations)\n+        - [Create a key](#create-a-key)\n+        - [Retrieve a key](#retrieve-a-key)\n+        - [List properties of keys](#list-properties-of-keys)\n+        - [Delete a key](#delete-a-key)\n+        - [Perform cryptographic operations](#perform-cryptographic-operations)\n+- [Additional samples](#additional-samples)\n+\n+## Migration benefits\n+A natural question to ask when considering whether or not to adopt a new version or library is what the benefits of doing so would be. As Azure has matured and been embraced by a more diverse group of developers, we have been focused on learning the patterns and practices to best support developer productivity and to understand the gaps that the Java client libraries have.\n+\n+There were several areas of consistent feedback expressed across the Azure client library ecosystem. One of the most important is that the client libraries for different Azure services have not had a consistent approach to organization, naming, and API structure. Additionally, many developers have felt that the learning curve was difficult, and the APIs did not offer a good, approachable, and consistent onboarding story for those learning Azure or exploring a specific Azure service.\n+\n+To try and improve the development experience across Azure services, a set of uniform [design guidelines](https://azure.github.io/azure-sdk/general_introduction.html) was created for all languages to drive a consistent experience with established API patterns for all services. A set of [Java-specific guidelines](https://azure.github.io/azure-sdk/java_introduction.html) was also introduced to ensure that Java clients have a natural and idiomatic feel with respect to the Java ecosystem. Further details are available in the guidelines for those interested.\n+\n+### Cross Service SDK improvements\n+The modern Key Vault Key client library also provides the ability to share in some of the cross-service improvements made to the Azure development experience, such as:\n+\n+- Using the new Azure Identity library to share a single authentication approach between clients.\n+- A unified logging and diagnostics pipeline offering a common view of the activities across each of the client libraries.\n+\n+## Important changes\n+### Separate packages and clients\n+In the interest of simplifying the API, `azure-keyvault` and `KeyVaultClient` were split into separate packages and clients:\n+\n+- [`azure-security-keyvault-certificates`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-certificates/README.md) contains `CertificateClient` for working with certificates.\n+- `azure-security-keyvault-keys` contains `KeyClient` for working with keys and `CryptographyClient` for performing cryptographic operations.\n+- [`azure-security-keyvault-secrets`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-secrets/README.md) contains `SecretClient` for working with secrets.\n+\n+### Package names and namespaces\n+Package names and the namespace root for the modern Azure client libraries for Java have changed. Each will follow the pattern `com.azure.<area>.<service>` where the legacy clients followed the pattern `com.microsoft.azure.<service>`. This provides a quick and accessible means to help understand, at a glance, whether you are using the modern or legacy clients.\n+\n+In the case of the Key Vault, the modern client libraries have packages and namespaces that begin with `com.azure.security.keyvault` and were released beginning with version `4.0.0`. The legacy client libraries have packages and namespaces that begin with `com.microsoft.azure.keyvault` and a version of `1.x.x` or below.\n+\n+### Client constructors\n+Across all modern Azure client libraries, clients consistently take an endpoint or connection string along with token credentials. This differs from `KeyVaultClient`, which took an authentication delegate and could be used for multiple Key Vault endpoints.", "originalCommit": "df6e1a62df81211863f870991b10523c8864aa63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDg0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546164842", "bodyText": "You are right, this is a big change we made for all of Track 2 in Java. I will make sure to add it.", "author": "vcolin7", "createdAt": "2020-12-19T00:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2Mzg4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546163884", "bodyText": "Woah! This is the exact sentence @sadasant used as well! Did you folks talk about this???\n:)\nFor JS, I recommended sticking to splitting of just the package. The split of client would then be obvious and the different clients are mentioned below any way\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the interest of simplifying the API, `azure-keyvault` and `KeyVaultClient` were split into separate packages and clients:\n          \n          \n            \n            In the interest of simplifying the API for working with Key Vault keys, secrets and certificates, the `azure-keyvault`  package is split into separate packages.", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:48:00Z", "path": "sdk/keyvault/azure-security-keyvault-keys/migration_guide.md", "diffHunk": "@@ -0,0 +1,226 @@\n+# Guide for migrating to azure-security-keyvault-keys from azure-keyvault\n+This guide is intended to assist in the migration to `azure-security-keyvault-keys` from `azure-keyvault`. It will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `azure-keyvault` package is assumed. For those new to the Key Vault Key client library for Java, please refer to the [README for name of new package here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-keys/README.md) rather than this guide.\n+\n+## Table of contents\n+- [Migration benefits](#migration-benefits)\n+- [Cross Service SDK improvements](#cross-service-sdk-improvements)\n+- [Important changes](#important-changes)\n+    - [Separate packages and clients](#separate-packages-and-clients)\n+    - [Package names and namespaces](#package-names-and-namespaces)\n+    - [Client constructors](#client-constructors)\n+    - [Authentication](#authentication)\n+    - [Common scenarios](#common-scenarios)\n+        - [Async operations](#async-operations)\n+        - [Create a key](#create-a-key)\n+        - [Retrieve a key](#retrieve-a-key)\n+        - [List properties of keys](#list-properties-of-keys)\n+        - [Delete a key](#delete-a-key)\n+        - [Perform cryptographic operations](#perform-cryptographic-operations)\n+- [Additional samples](#additional-samples)\n+\n+## Migration benefits\n+A natural question to ask when considering whether or not to adopt a new version or library is what the benefits of doing so would be. As Azure has matured and been embraced by a more diverse group of developers, we have been focused on learning the patterns and practices to best support developer productivity and to understand the gaps that the Java client libraries have.\n+\n+There were several areas of consistent feedback expressed across the Azure client library ecosystem. One of the most important is that the client libraries for different Azure services have not had a consistent approach to organization, naming, and API structure. Additionally, many developers have felt that the learning curve was difficult, and the APIs did not offer a good, approachable, and consistent onboarding story for those learning Azure or exploring a specific Azure service.\n+\n+To try and improve the development experience across Azure services, a set of uniform [design guidelines](https://azure.github.io/azure-sdk/general_introduction.html) was created for all languages to drive a consistent experience with established API patterns for all services. A set of [Java-specific guidelines](https://azure.github.io/azure-sdk/java_introduction.html) was also introduced to ensure that Java clients have a natural and idiomatic feel with respect to the Java ecosystem. Further details are available in the guidelines for those interested.\n+\n+### Cross Service SDK improvements\n+The modern Key Vault Key client library also provides the ability to share in some of the cross-service improvements made to the Azure development experience, such as:\n+\n+- Using the new Azure Identity library to share a single authentication approach between clients.\n+- A unified logging and diagnostics pipeline offering a common view of the activities across each of the client libraries.\n+\n+## Important changes\n+### Separate packages and clients\n+In the interest of simplifying the API, `azure-keyvault` and `KeyVaultClient` were split into separate packages and clients:", "originalCommit": "df6e1a62df81211863f870991b10523c8864aa63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDczMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546164731", "bodyText": "I based most of the contents besides the code samples and language-specific stuff con the Pyhton migration guides, since they have already been approved and look pretty good :)", "author": "vcolin7", "createdAt": "2020-12-19T00:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2Mzg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NTQxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546165417", "bodyText": "That explains everything!", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2Mzg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NzExNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546167114", "bodyText": "And keeps us as consistent as possible between languages!", "author": "vcolin7", "createdAt": "2020-12-19T01:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2Mzg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2Mzk4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546163980", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - [`azure-security-keyvault-certificates`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-certificates/README.md) contains `CertificateClient` for working with certificates.\n          \n          \n            \n            - `azure-security-keyvault-keys` contains `KeyClient` for working with keys and `CryptographyClient` for performing cryptographic operations.\n          \n          \n            \n            - [`azure-security-keyvault-secrets`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-secrets/README.md) contains `SecretClient` for working with secrets.\n          \n          \n            \n            - [`azure-security-keyvault-certificates`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-certificates/README.md) contains `CertificateClient` for working with Key Vault certificates.\n          \n          \n            \n            - `azure-security-keyvault-keys` contains `KeyClient` for working with Key Vault keys and `CryptographyClient` for performing cryptographic operations.\n          \n          \n            \n            - [`azure-security-keyvault-secrets`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-secrets/README.md) contains `SecretClient` for working with Key Vault secrets.", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:48:29Z", "path": "sdk/keyvault/azure-security-keyvault-keys/migration_guide.md", "diffHunk": "@@ -0,0 +1,226 @@\n+# Guide for migrating to azure-security-keyvault-keys from azure-keyvault\n+This guide is intended to assist in the migration to `azure-security-keyvault-keys` from `azure-keyvault`. It will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `azure-keyvault` package is assumed. For those new to the Key Vault Key client library for Java, please refer to the [README for name of new package here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-keys/README.md) rather than this guide.\n+\n+## Table of contents\n+- [Migration benefits](#migration-benefits)\n+- [Cross Service SDK improvements](#cross-service-sdk-improvements)\n+- [Important changes](#important-changes)\n+    - [Separate packages and clients](#separate-packages-and-clients)\n+    - [Package names and namespaces](#package-names-and-namespaces)\n+    - [Client constructors](#client-constructors)\n+    - [Authentication](#authentication)\n+    - [Common scenarios](#common-scenarios)\n+        - [Async operations](#async-operations)\n+        - [Create a key](#create-a-key)\n+        - [Retrieve a key](#retrieve-a-key)\n+        - [List properties of keys](#list-properties-of-keys)\n+        - [Delete a key](#delete-a-key)\n+        - [Perform cryptographic operations](#perform-cryptographic-operations)\n+- [Additional samples](#additional-samples)\n+\n+## Migration benefits\n+A natural question to ask when considering whether or not to adopt a new version or library is what the benefits of doing so would be. As Azure has matured and been embraced by a more diverse group of developers, we have been focused on learning the patterns and practices to best support developer productivity and to understand the gaps that the Java client libraries have.\n+\n+There were several areas of consistent feedback expressed across the Azure client library ecosystem. One of the most important is that the client libraries for different Azure services have not had a consistent approach to organization, naming, and API structure. Additionally, many developers have felt that the learning curve was difficult, and the APIs did not offer a good, approachable, and consistent onboarding story for those learning Azure or exploring a specific Azure service.\n+\n+To try and improve the development experience across Azure services, a set of uniform [design guidelines](https://azure.github.io/azure-sdk/general_introduction.html) was created for all languages to drive a consistent experience with established API patterns for all services. A set of [Java-specific guidelines](https://azure.github.io/azure-sdk/java_introduction.html) was also introduced to ensure that Java clients have a natural and idiomatic feel with respect to the Java ecosystem. Further details are available in the guidelines for those interested.\n+\n+### Cross Service SDK improvements\n+The modern Key Vault Key client library also provides the ability to share in some of the cross-service improvements made to the Azure development experience, such as:\n+\n+- Using the new Azure Identity library to share a single authentication approach between clients.\n+- A unified logging and diagnostics pipeline offering a common view of the activities across each of the client libraries.\n+\n+## Important changes\n+### Separate packages and clients\n+In the interest of simplifying the API, `azure-keyvault` and `KeyVaultClient` were split into separate packages and clients:\n+\n+- [`azure-security-keyvault-certificates`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-certificates/README.md) contains `CertificateClient` for working with certificates.\n+- `azure-security-keyvault-keys` contains `KeyClient` for working with keys and `CryptographyClient` for performing cryptographic operations.\n+- [`azure-security-keyvault-secrets`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-secrets/README.md) contains `SecretClient` for working with secrets.", "originalCommit": "df6e1a62df81211863f870991b10523c8864aa63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDE5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546164192", "bodyText": "We should follow this up with how one would use the builder to get the async clients and that this is common across the modern libraries.", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:49:42Z", "path": "sdk/keyvault/azure-security-keyvault-keys/migration_guide.md", "diffHunk": "@@ -0,0 +1,226 @@\n+# Guide for migrating to azure-security-keyvault-keys from azure-keyvault\n+This guide is intended to assist in the migration to `azure-security-keyvault-keys` from `azure-keyvault`. It will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `azure-keyvault` package is assumed. For those new to the Key Vault Key client library for Java, please refer to the [README for name of new package here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-keys/README.md) rather than this guide.\n+\n+## Table of contents\n+- [Migration benefits](#migration-benefits)\n+- [Cross Service SDK improvements](#cross-service-sdk-improvements)\n+- [Important changes](#important-changes)\n+    - [Separate packages and clients](#separate-packages-and-clients)\n+    - [Package names and namespaces](#package-names-and-namespaces)\n+    - [Client constructors](#client-constructors)\n+    - [Authentication](#authentication)\n+    - [Common scenarios](#common-scenarios)\n+        - [Async operations](#async-operations)\n+        - [Create a key](#create-a-key)\n+        - [Retrieve a key](#retrieve-a-key)\n+        - [List properties of keys](#list-properties-of-keys)\n+        - [Delete a key](#delete-a-key)\n+        - [Perform cryptographic operations](#perform-cryptographic-operations)\n+- [Additional samples](#additional-samples)\n+\n+## Migration benefits\n+A natural question to ask when considering whether or not to adopt a new version or library is what the benefits of doing so would be. As Azure has matured and been embraced by a more diverse group of developers, we have been focused on learning the patterns and practices to best support developer productivity and to understand the gaps that the Java client libraries have.\n+\n+There were several areas of consistent feedback expressed across the Azure client library ecosystem. One of the most important is that the client libraries for different Azure services have not had a consistent approach to organization, naming, and API structure. Additionally, many developers have felt that the learning curve was difficult, and the APIs did not offer a good, approachable, and consistent onboarding story for those learning Azure or exploring a specific Azure service.\n+\n+To try and improve the development experience across Azure services, a set of uniform [design guidelines](https://azure.github.io/azure-sdk/general_introduction.html) was created for all languages to drive a consistent experience with established API patterns for all services. A set of [Java-specific guidelines](https://azure.github.io/azure-sdk/java_introduction.html) was also introduced to ensure that Java clients have a natural and idiomatic feel with respect to the Java ecosystem. Further details are available in the guidelines for those interested.\n+\n+### Cross Service SDK improvements\n+The modern Key Vault Key client library also provides the ability to share in some of the cross-service improvements made to the Azure development experience, such as:\n+\n+- Using the new Azure Identity library to share a single authentication approach between clients.\n+- A unified logging and diagnostics pipeline offering a common view of the activities across each of the client libraries.\n+\n+## Important changes\n+### Separate packages and clients\n+In the interest of simplifying the API, `azure-keyvault` and `KeyVaultClient` were split into separate packages and clients:\n+\n+- [`azure-security-keyvault-certificates`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-certificates/README.md) contains `CertificateClient` for working with certificates.\n+- `azure-security-keyvault-keys` contains `KeyClient` for working with keys and `CryptographyClient` for performing cryptographic operations.\n+- [`azure-security-keyvault-secrets`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-secrets/README.md) contains `SecretClient` for working with secrets.\n+\n+### Package names and namespaces\n+Package names and the namespace root for the modern Azure client libraries for Java have changed. Each will follow the pattern `com.azure.<area>.<service>` where the legacy clients followed the pattern `com.microsoft.azure.<service>`. This provides a quick and accessible means to help understand, at a glance, whether you are using the modern or legacy clients.\n+\n+In the case of the Key Vault, the modern client libraries have packages and namespaces that begin with `com.azure.security.keyvault` and were released beginning with version `4.0.0`. The legacy client libraries have packages and namespaces that begin with `com.microsoft.azure.keyvault` and a version of `1.x.x` or below.\n+\n+### Client constructors\n+Across all modern Azure client libraries, clients consistently take an endpoint or connection string along with token credentials. This differs from `KeyVaultClient`, which took an authentication delegate and could be used for multiple Key Vault endpoints.\n+\n+### Authentication\n+Previously in `azure-keyvault` you could create a `KeyVaultClient` by passing either a `KeyVaultCredential` or `RestClient` from `client-runtime`:\n+\n+```java\n+import com.microsoft.azure.keyvault.KeyVaultClient;\n+import com.microsoft.azure.keyvault.authentication.KeyVaultCredentials;\n+\n+KeyVaultCredentials keyVaultCredentials = new MyKeyVaultCredentials(\"<client-id>\", \"<client-key>\");\n+KeyVaultClient keyVaultClient = new KeyVaultClient(keyVaultCredentials);\n+```\n+\n+Now in `azure-security-keyvault-keys` you can create a `KeyClient` using any credential from [`azure-identity`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/identity/azure-identity/README.md). Below is an example using [`DefaultAzureCredential`](https://docs.microsoft.com/en-us/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential):\n+\n+```java\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.keys.KeyClient;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n+\n+TokenCredentials tokenCredentials = new DefaultAzureCredentialBuilder().build();\n+\n+KeyClient keyClient = new KeyClientBuilder()\n+    .vaultUrl(\"<your-key-vault-url>\")\n+    .credential(tokenCredentials)\n+    .buildClient();\n+```\n+\n+### Async operations\n+The modern `azure-security-keyvault-keys` library includes a complete set of async APIs that return [Project Reactor -based types](https://projectreactor.io/), as opposed to `azure-keyvault` async APIs that return either [Observable](reactivex.io/RxJava/javadoc/io/reactivex/Observable.html) or [ServiceFuture](http://azure.github.io/ref-docs/java/com/microsoft/rest/ServiceFuture.html).\n+\n+Another difference is that async operations are available on their own separate async clients, which include the word `Async` in their name, like `KeyAsyncClient`.", "originalCommit": "df6e1a62df81211863f870991b10523c8864aa63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDMyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546164321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            ### Common scenarios\n          \n          \n            \n            Repeat this section for the common high level usage scenarios for this library.\n          \n          \n            \n            Show how you would accomplish these both in the old and new packages, pointing out the key differences, reasons and advantages.", "author": "ramya-rao-a", "createdAt": "2020-12-19T00:50:24Z", "path": "sdk/keyvault/azure-security-keyvault-keys/migration_guide.md", "diffHunk": "@@ -0,0 +1,226 @@\n+# Guide for migrating to azure-security-keyvault-keys from azure-keyvault\n+This guide is intended to assist in the migration to `azure-security-keyvault-keys` from `azure-keyvault`. It will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `azure-keyvault` package is assumed. For those new to the Key Vault Key client library for Java, please refer to the [README for name of new package here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-keys/README.md) rather than this guide.\n+\n+## Table of contents\n+- [Migration benefits](#migration-benefits)\n+- [Cross Service SDK improvements](#cross-service-sdk-improvements)\n+- [Important changes](#important-changes)\n+    - [Separate packages and clients](#separate-packages-and-clients)\n+    - [Package names and namespaces](#package-names-and-namespaces)\n+    - [Client constructors](#client-constructors)\n+    - [Authentication](#authentication)\n+    - [Common scenarios](#common-scenarios)\n+        - [Async operations](#async-operations)\n+        - [Create a key](#create-a-key)\n+        - [Retrieve a key](#retrieve-a-key)\n+        - [List properties of keys](#list-properties-of-keys)\n+        - [Delete a key](#delete-a-key)\n+        - [Perform cryptographic operations](#perform-cryptographic-operations)\n+- [Additional samples](#additional-samples)\n+\n+## Migration benefits\n+A natural question to ask when considering whether or not to adopt a new version or library is what the benefits of doing so would be. As Azure has matured and been embraced by a more diverse group of developers, we have been focused on learning the patterns and practices to best support developer productivity and to understand the gaps that the Java client libraries have.\n+\n+There were several areas of consistent feedback expressed across the Azure client library ecosystem. One of the most important is that the client libraries for different Azure services have not had a consistent approach to organization, naming, and API structure. Additionally, many developers have felt that the learning curve was difficult, and the APIs did not offer a good, approachable, and consistent onboarding story for those learning Azure or exploring a specific Azure service.\n+\n+To try and improve the development experience across Azure services, a set of uniform [design guidelines](https://azure.github.io/azure-sdk/general_introduction.html) was created for all languages to drive a consistent experience with established API patterns for all services. A set of [Java-specific guidelines](https://azure.github.io/azure-sdk/java_introduction.html) was also introduced to ensure that Java clients have a natural and idiomatic feel with respect to the Java ecosystem. Further details are available in the guidelines for those interested.\n+\n+### Cross Service SDK improvements\n+The modern Key Vault Key client library also provides the ability to share in some of the cross-service improvements made to the Azure development experience, such as:\n+\n+- Using the new Azure Identity library to share a single authentication approach between clients.\n+- A unified logging and diagnostics pipeline offering a common view of the activities across each of the client libraries.\n+\n+## Important changes\n+### Separate packages and clients\n+In the interest of simplifying the API, `azure-keyvault` and `KeyVaultClient` were split into separate packages and clients:\n+\n+- [`azure-security-keyvault-certificates`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-certificates/README.md) contains `CertificateClient` for working with certificates.\n+- `azure-security-keyvault-keys` contains `KeyClient` for working with keys and `CryptographyClient` for performing cryptographic operations.\n+- [`azure-security-keyvault-secrets`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-secrets/README.md) contains `SecretClient` for working with secrets.\n+\n+### Package names and namespaces\n+Package names and the namespace root for the modern Azure client libraries for Java have changed. Each will follow the pattern `com.azure.<area>.<service>` where the legacy clients followed the pattern `com.microsoft.azure.<service>`. This provides a quick and accessible means to help understand, at a glance, whether you are using the modern or legacy clients.\n+\n+In the case of the Key Vault, the modern client libraries have packages and namespaces that begin with `com.azure.security.keyvault` and were released beginning with version `4.0.0`. The legacy client libraries have packages and namespaces that begin with `com.microsoft.azure.keyvault` and a version of `1.x.x` or below.\n+\n+### Client constructors\n+Across all modern Azure client libraries, clients consistently take an endpoint or connection string along with token credentials. This differs from `KeyVaultClient`, which took an authentication delegate and could be used for multiple Key Vault endpoints.\n+\n+### Authentication\n+Previously in `azure-keyvault` you could create a `KeyVaultClient` by passing either a `KeyVaultCredential` or `RestClient` from `client-runtime`:\n+\n+```java\n+import com.microsoft.azure.keyvault.KeyVaultClient;\n+import com.microsoft.azure.keyvault.authentication.KeyVaultCredentials;\n+\n+KeyVaultCredentials keyVaultCredentials = new MyKeyVaultCredentials(\"<client-id>\", \"<client-key>\");\n+KeyVaultClient keyVaultClient = new KeyVaultClient(keyVaultCredentials);\n+```\n+\n+Now in `azure-security-keyvault-keys` you can create a `KeyClient` using any credential from [`azure-identity`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/identity/azure-identity/README.md). Below is an example using [`DefaultAzureCredential`](https://docs.microsoft.com/en-us/java/api/overview/azure/identity-readme?view=azure-java-stable#defaultazurecredential):\n+\n+```java\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.security.keyvault.keys.KeyClient;\n+import com.azure.security.keyvault.keys.KeyClientBuilder;\n+\n+TokenCredentials tokenCredentials = new DefaultAzureCredentialBuilder().build();\n+\n+KeyClient keyClient = new KeyClientBuilder()\n+    .vaultUrl(\"<your-key-vault-url>\")\n+    .credential(tokenCredentials)\n+    .buildClient();\n+```\n+\n+### Async operations\n+The modern `azure-security-keyvault-keys` library includes a complete set of async APIs that return [Project Reactor -based types](https://projectreactor.io/), as opposed to `azure-keyvault` async APIs that return either [Observable](reactivex.io/RxJava/javadoc/io/reactivex/Observable.html) or [ServiceFuture](http://azure.github.io/ref-docs/java/com/microsoft/rest/ServiceFuture.html).\n+\n+Another difference is that async operations are available on their own separate async clients, which include the word `Async` in their name, like `KeyAsyncClient`.\n+\n+### Common scenarios\n+Repeat this section for the common high level usage scenarios for this library.\n+Show how you would accomplish these both in the old and new packages, pointing out the key differences, reasons and advantages.", "originalCommit": "df6e1a62df81211863f870991b10523c8864aa63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MDEzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546170130", "bodyText": "@ramya-rao-a Do you think we should have everything that's currently under \"Common scenarios\" be under \"Important changes\", at the same level as everything else there?", "author": "vcolin7", "createdAt": "2020-12-19T01:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MDIwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r546170201", "bodyText": "I'd like to keep the header.", "author": "vcolin7", "createdAt": "2020-12-19T01:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NDMyMQ=="}], "type": "inlineReview"}, {"oid": "1a94835d0e72336772882864128f6b00f31356eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a94835d0e72336772882864128f6b00f31356eb", "message": "Applied PR feedback for the Key Vault keys migration guide.", "committedDate": "2020-12-19T01:28:46Z", "type": "commit"}, {"oid": "b6244e0eeceb978c00ca83d3a09420f6c318802b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6244e0eeceb978c00ca83d3a09420f6c318802b", "message": "Added migration guide for the Azure Key Vault Secret client library. Made slight corrections to the one for Key Vault keys.", "committedDate": "2020-12-19T02:17:42Z", "type": "commit"}, {"oid": "d5cc74ff9621539e64b6d52ad22f3cedf5a286c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d5cc74ff9621539e64b6d52ad22f3cedf5a286c6", "message": "Added migration guide for the Azure Key Vault Certificate client library. Made more corrections to the ones for Key Vault keys and Key Vault secrets.\nAlso added a section for importing a key in the guide for keys.", "committedDate": "2020-12-19T04:06:40Z", "type": "commit"}, {"oid": "ebb9c11282d0343763a3abacbec9bda6a2fdde5c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ebb9c11282d0343763a3abacbec9bda6a2fdde5c", "message": "Fixed broken links.", "committedDate": "2020-12-19T04:13:18Z", "type": "commit"}, {"oid": "e201f11ec8f90f58c5adfce47e31af0e74ce1b2a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e201f11ec8f90f58c5adfce47e31af0e74ce1b2a", "message": "Applied one more suggestion from PR feedback.", "committedDate": "2021-01-07T01:16:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0Njc3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r554146772", "bodyText": "Usually it is better to let one space between the tittle and the paragraph.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Migration benefits\n          \n          \n            \n            ## Migration benefits\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nConsider this as a nit for all the tittles on this doc", "author": "vhvb1989", "createdAt": "2021-01-08T19:28:16Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/migration_guide.md", "diffHunk": "@@ -0,0 +1,260 @@\n+# Guide for migrating to azure-security-keyvault-certificates from azure-keyvault\n+This guide is intended to assist in the migration to `azure-security-keyvault-certificates` from `azure-keyvault`. It will focus on side-by-side comparisons for similar operations between the two packages.\n+\n+Familiarity with the `azure-keyvault` package is assumed. For those new to the Key Vault Certificate client library for Java, please refer to the [README](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/keyvault/azure-security-keyvault-certificates/README.md) rather than this guide.\n+\n+## Table of contents\n+- [Migration benefits](#migration-benefits)\n+- [Cross Service SDK improvements](#cross-service-sdk-improvements)\n+- [Important changes](#important-changes)\n+    - [Separate packages and clients](#separate-packages-and-clients)\n+    - [Package names and namespaces](#package-names-and-namespaces)\n+    - [Client instantiation](#client-instantiation)\n+    - [Authentication](#authentication)\n+    - [Common scenarios](#common-scenarios)\n+        - [Async operations](#async-operations)\n+        - [Create a certificate](#create-a-certificate)\n+        - [Import a certificate](#import-a-certificate)\n+        - [Retrieve a certificate](#retrieve-a-certificate)\n+        - [List properties of certificates](#list-properties-of-certificates)\n+        - [Delete a certificate](#delete-a-certificate)\n+- [Additional samples](#additional-samples)\n+\n+## Migration benefits", "originalCommit": "e201f11ec8f90f58c5adfce47e31af0e74ce1b2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwNTA5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r554205095", "bodyText": "Markdown linter rule MD022:\nhttps://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#md022---headings-should-be-surrounded-by-blank-lines", "author": "vhvb1989", "createdAt": "2021-01-08T21:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0Njc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2MDg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18282#discussion_r554660846", "bodyText": "Thanks!", "author": "vcolin7", "createdAt": "2021-01-11T02:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0Njc3Mg=="}], "type": "inlineReview"}, {"oid": "5f5dcbe71e1d4663b7ffd1f8ae33fbcdd799c02b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f5dcbe71e1d4663b7ffd1f8ae33fbcdd799c02b", "message": "Fixed unsecure links in migration guides for Certificates, Keys and Secrets.", "committedDate": "2021-01-11T22:32:41Z", "type": "commit"}]}