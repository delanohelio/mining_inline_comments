{"pr_number": 9172, "pr_title": "Remove Unused/Unnecessary Code from SwaggerMethodParser", "pr_createdAt": "2020-03-17T21:30:25Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9172", "timeline": [{"oid": "9043712ae7b9a3521ee1f08d014e529dec85c971", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9043712ae7b9a3521ee1f08d014e529dec85c971", "message": "Removed unused code from SwaggerMethodParser, removed unnecessary checks", "committedDate": "2020-03-17T21:29:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NjI4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9172#discussion_r394046283", "bodyText": "escaper was set to a constant a few lines above, will never be null.", "author": "alzimmermsft", "createdAt": "2020-03-18T00:35:06Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/SwaggerMethodParser.java", "diffHunk": "@@ -310,7 +294,7 @@ public String setPath(Object[] methodArguments) {\n                 final Object methodArgument = swaggerMethodArguments[substitution.getMethodParameterIndex()];\n                 String parameterValue = serialize(methodArgument);\n                 if (parameterValue != null) {\n-                    if (substitution.shouldEncode() && escaper != null) {", "originalCommit": "9043712ae7b9a3521ee1f08d014e529dec85c971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NjQ0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9172#discussion_r394046444", "bodyText": "headerSubstituations is instantiated to an empty List and will only be added to, will never be null.", "author": "alzimmermsft", "createdAt": "2020-03-18T00:35:35Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/SwaggerMethodParser.java", "diffHunk": "@@ -322,38 +306,38 @@ public String setPath(Object[] methodArguments) {\n \n     /**\n      * Get the headers that have been added to this value based on the provided method arguments.\n+     *\n      * @param swaggerMethodArguments The arguments that will be used to create the headers' values.\n      * @return An Iterable with the headers.\n      */\n     public Iterable<HttpHeader> setHeaders(Object[] swaggerMethodArguments) {\n         final HttpHeaders result = new HttpHeaders(headers);\n \n-        if (headerSubstitutions != null) {", "originalCommit": "9043712ae7b9a3521ee1f08d014e529dec85c971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NjYyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9172#discussion_r394046628", "bodyText": "escaper is always passed as the same constant and this method is private.", "author": "alzimmermsft", "createdAt": "2020-03-18T00:36:30Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/SwaggerMethodParser.java", "diffHunk": "@@ -550,7 +503,7 @@ private String serializeFormData(String key, Object value) {\n     }\n \n     private String applySubstitutions(String originalValue, Iterable<Substitution> substitutions,\n-                                      Object[] methodArguments, PercentEscaper escaper) {", "originalCommit": "9043712ae7b9a3521ee1f08d014e529dec85c971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NjY4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9172#discussion_r394046682", "bodyText": "escaper is always a constant.", "author": "alzimmermsft", "createdAt": "2020-03-18T00:36:45Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/SwaggerMethodParser.java", "diffHunk": "@@ -560,10 +513,8 @@ private String applySubstitutions(String originalValue, Iterable<Substitution> s\n                     final Object methodArgument = methodArguments[substitutionParameterIndex];\n \n                     String substitutionValue = serialize(methodArgument);\n-                    if (substitutionValue != null\n-                        && !substitutionValue.isEmpty()\n-                        && substitution.shouldEncode() && escaper != null) {", "originalCommit": "9043712ae7b9a3521ee1f08d014e529dec85c971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}