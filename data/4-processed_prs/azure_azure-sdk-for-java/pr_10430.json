{"pr_number": 10430, "pr_title": "ServiceBusReceiverClient : Setting up Integration test", "pr_createdAt": "2020-04-22T18:28:10Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10430", "timeline": [{"oid": "1d31265fc940e9901fb31c671f72223ddf1eda14", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d31265fc940e9901fb31c671f72223ddf1eda14", "message": "Setting up sync receiver client integration test", "committedDate": "2020-04-22T18:26:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMTMyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r413221329", "bodyText": "I am moving common ,between sync and async client,   part in IntegrationTestBase", "author": "hemanttanwar", "createdAt": "2020-04-22T18:31:41Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -224,4 +238,38 @@ protected void dispose(AutoCloseable... closeables) {\n             }\n         }\n     }\n+\n+    static Stream<Arguments> messagingEntityProvider() {", "originalCommit": "1d31265fc940e9901fb31c671f72223ddf1eda14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b5237322db8dfba09cc12d0f7fa90d91b42c3165", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5237322db8dfba09cc12d0f7fa90d91b42c3165", "message": "adding sync test", "committedDate": "2020-04-23T21:49:05Z", "type": "commit"}, {"oid": "865d04f007027162a75429a3ef6f35cc6ad35302", "url": "https://github.com/Azure/azure-sdk-for-java/commit/865d04f007027162a75429a3ef6f35cc6ad35302", "message": "adding sync test", "committedDate": "2020-04-23T21:55:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MDU1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414170558", "bodyText": "private modifier for both.", "author": "conniey", "createdAt": "2020-04-23T22:39:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -50,6 +62,9 @@\n     private String testName;\n     private final Scheduler scheduler = Schedulers.parallel();\n \n+    static final byte[] CONTENTS_BYTES = \"Some-contents\".getBytes(StandardCharsets.UTF_8);\n+    String sessionId;", "originalCommit": "865d04f007027162a75429a3ef6f35cc6ad35302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyMTEyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414321126", "bodyText": "sessionId : This will be needed in ServiceBusReceiverClientIntegrationTest  to create receiver and sender.", "author": "hemanttanwar", "createdAt": "2020-04-24T06:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MDU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDUxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414640517", "bodyText": "The visibility is confusing because many of the methods are protected but these ones, and the methods (Stream) you've moved in here are package-private. I'd change the visibility to all protected, then.", "author": "conniey", "createdAt": "2020-04-24T14:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MDU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MTk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414171943", "bodyText": "You could probably move this BeforeAll and AfterAll setup into the base class because we want there to be a timeout.", "author": "conniey", "createdAt": "2020-04-23T22:42:29Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveAsyncOptions;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    ServiceBusReceiverClient receiver;\n+    ServiceBusSenderClient sender;\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));", "originalCommit": "865d04f007027162a75429a3ef6f35cc6ad35302", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MTk5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414171992", "bodyText": "private", "author": "conniey", "createdAt": "2020-04-23T22:42:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveAsyncOptions;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    ServiceBusReceiverClient receiver;", "originalCommit": "865d04f007027162a75429a3ef6f35cc6ad35302", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MjcxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414172718", "bodyText": "This would be Act. And the line after would be Assert.", "author": "conniey", "createdAt": "2020-04-23T22:44:17Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveAsyncOptions;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    ServiceBusReceiverClient receiver;\n+    ServiceBusSenderClient sender;\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        dispose(sender);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        for(ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        for(ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        ServiceBusReceivedMessage receivedMessage = receiver.peek();\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekFromSequenceNumberMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Assert & Act\n+        ServiceBusReceivedMessage receivedPeekMessage = receiver.peekAt(receivedMessage.getSequenceNumber());", "originalCommit": "865d04f007027162a75429a3ef6f35cc6ad35302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MjgwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414172805", "bodyText": "It's Act and then Assert. For all the other ones.", "author": "conniey", "createdAt": "2020-04-23T22:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MjcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MzE5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414173192", "bodyText": "Indent 4 spaces rather than matching it with the method name.", "author": "conniey", "createdAt": "2020-04-23T22:45:26Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveAsyncOptions;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    ServiceBusReceiverClient receiver;\n+    ServiceBusSenderClient sender;\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        dispose(sender);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        for(ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        for(ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        ServiceBusReceivedMessage receivedMessage = receiver.peek();\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekFromSequenceNumberMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Assert & Act\n+        ServiceBusReceivedMessage receivedPeekMessage = receiver.peekAt(receivedMessage.getSequenceNumber());\n+        assertMessageEquals(receivedPeekMessage, messageId, isSessionEnabled);\n+\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekBatchMessages(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+        final int maxMessages = 2;\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.peekBatch(maxMessages);\n+        Assertions.assertEquals(maxMessages, iterableMessages.stream().collect(Collectors.toList()).size());\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @MethodSource(\"messagingEntityProvider\")\n+    @ParameterizedTest\n+    void peekBatchMessagesFromSequence(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, false);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, false);\n+        final int maxMessages = 2;\n+        final int fromSequenceNumber = 1;\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Assert & Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.peekBatchAt(maxMessages, fromSequenceNumber);\n+        Assertions.assertEquals(maxMessages, iterableMessages.stream().collect(Collectors.toList()).size());\n+    }\n+\n+    /**\n+     * Verifies that we can dead-letter a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void deadLetterMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Assert & Act\n+        receiver.deadLetter(receivedMessage);\n+\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveAndComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Assert & Act\n+        receiver.complete(receivedMessage);\n+\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can renew message lock.\n+     */\n+    @MethodSource(\"messagingEntityProvider\")\n+    @ParameterizedTest\n+    void receiveAndRenewLock(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, false);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, false);\n+\n+        // Blocking here because it is not part of the scenario we want to test.\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        assertNotNull(receivedMessage);\n+        assertNotNull(receivedMessage.getLockedUntil());\n+\n+        final Instant initialLock = receivedMessage.getLockedUntil();\n+        logger.info(\"Received message. Seq: {}. lockedUntil: {}\", receivedMessage.getSequenceNumber(), initialLock);\n+\n+        // Assert & Act\n+        try {\n+            Instant lockedUntil = receiver.renewMessageLock(receivedMessage);\n+            assertTrue(lockedUntil.isAfter(initialLock),\n+                String.format(\"Updated lock is not after the initial Lock. updated: [%s]. initial:[%s]\",\n+                    lockedUntil, initialLock));\n+        } finally {\n+            logger.info(\"Completing message. Seq: {}.\", receivedMessage.getSequenceNumber());\n+            receiver.complete(receivedMessage);\n+            messagesPending.decrementAndGet();\n+        }\n+    }\n+\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveAndAbandon(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Assert & Act\n+        receiver.abandon(receivedMessage);\n+    }\n+\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveAndDefer(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Act & Assert\n+        receiver.defer(receivedMessage);\n+\n+    }\n+\n+\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void sendReceiveMessageWithVariousPropertyTypes(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage messageToSend = getMessage(messageId, isSessionEnabled);\n+\n+        Map<String, Object> sentProperties = messageToSend.getProperties();\n+        sentProperties.put(\"NullProperty\", null);\n+        sentProperties.put(\"BooleanProperty\", true);\n+        sentProperties.put(\"ByteProperty\", (byte) 1);\n+        sentProperties.put(\"ShortProperty\", (short) 2);\n+        sentProperties.put(\"IntProperty\", 3);\n+        sentProperties.put(\"LongProperty\", 4L);\n+        sentProperties.put(\"FloatProperty\", 5.5f);\n+        sentProperties.put(\"DoubleProperty\", 6.6f);\n+        sentProperties.put(\"CharProperty\", 'z');\n+        sentProperties.put(\"UUIDProperty\", UUID.randomUUID());\n+        sentProperties.put(\"StringProperty\", \"string\");\n+\n+        sendMessage(messageToSend);\n+\n+        // Assert & Act\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiveAndDeleteReceiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+        Assertions.assertNotNull(receivedMessage);\n+\n+        messagesPending.decrementAndGet();\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+\n+        final Map<String, Object> received = receivedMessage.getProperties();\n+\n+        assertEquals(sentProperties.size(), received.size());\n+\n+        for (Map.Entry<String, Object> sentEntry : sentProperties.entrySet()) {\n+            if (sentEntry.getValue() != null && sentEntry.getValue().getClass().isArray()) {\n+                assertArrayEquals((Object[]) sentEntry.getValue(), (Object[]) received.get(sentEntry.getKey()));\n+            } else {\n+                final Object expected = sentEntry.getValue();\n+                final Object actual = received.get(sentEntry.getKey());\n+\n+                assertEquals(expected, actual, String.format(\n+                    \"Key '%s' does not match. Expected: '%s'. Actual: '%s'\", sentEntry.getKey(), expected,\n+                    actual));\n+            }\n+        }\n+    }\n+\n+    private void setSenderAndReceiver(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        setSenderAndReceiver(entityType, isSessionEnabled, Function.identity());\n+    }\n+\n+    private void setSenderAndReceiver(MessagingEntityType entityType, boolean isSessionEnabled,\n+                                      Function<ServiceBusClientBuilder.ServiceBusReceiverClientBuilder, ServiceBusClientBuilder.ServiceBusReceiverClientBuilder> onReceiverCreate) {", "originalCommit": "865d04f007027162a75429a3ef6f35cc6ad35302", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MzU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414173577", "bodyText": "What about cases where no messages are received in that time out period? Or if you try to receive two batches, one after the other?", "author": "conniey", "createdAt": "2020-04-23T22:46:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "originalCommit": "865d04f007027162a75429a3ef6f35cc6ad35302", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9a3e79c795fa68acb77d8b7f454a66592d3af32", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9a3e79c795fa68acb77d8b7f454a66592d3af32", "message": "adding sync test", "committedDate": "2020-04-24T00:30:50Z", "type": "commit"}, {"oid": "b5baa5c8f404338c74eb60221ade25116dadaed4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5baa5c8f404338c74eb60221ade25116dadaed4", "message": "Fixing space and formatting", "committedDate": "2020-04-24T03:21:19Z", "type": "commit"}, {"oid": "7b05b86eceedbfdad509f249d2eefc0dfdcf67e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b05b86eceedbfdad509f249d2eefc0dfdcf67e3", "message": "Added test for no message received", "committedDate": "2020-04-24T06:46:12Z", "type": "commit"}, {"oid": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b5851babfff4c6e7d3b351e70b1898a65dfa697", "message": " checkstyle changes", "committedDate": "2020-04-24T06:57:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzOTM4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414639385", "bodyText": "nit: remove extra line", "author": "conniey", "createdAt": "2020-04-24T14:54:21Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -68,6 +82,17 @@ public void setupTest(TestInfo testInfo) {\n         beforeTest();\n     }\n \n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(Duration.ofSeconds(30));\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n+\n+", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDkyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414640928", "bodyText": "Format this document. There are two spaces here.", "author": "conniey", "createdAt": "2020-04-24T14:56:20Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -59,6 +71,8 @@ public void setupTest(TestInfo testInfo) {\n         logger.info(\"========= SET-UP [{}] =========\", testInfo.getDisplayName());\n \n         testName = testInfo.getDisplayName();\n+        TestMode mode = getTestMode();\n+        boolean isRecord =  getTestMode() == TestMode.RECORD;", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTMzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414641331", "bodyText": "Test classes don't need to be public.", "author": "conniey", "createdAt": "2020-04-24T14:56:49Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTkzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414641937", "bodyText": "These can be private final and group your member variables together. private finals, privates together, static variables together.", "author": "conniey", "createdAt": "2020-04-24T14:57:35Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NjU1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414646558", "bodyText": "https://www.jetbrains.com/help/idea/reformat-and-rearrange-code.html", "author": "conniey", "createdAt": "2020-04-24T15:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MzI4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414643287", "bodyText": "Format this document. There should be a space before the colon.", "author": "conniey", "createdAt": "2020-04-24T14:59:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mzg1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414643858", "bodyText": "You didn't assert that you had two messages. If there were 0 messages, this would still pass.", "author": "conniey", "createdAt": "2020-04-24T15:00:03Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NDQxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414644410", "bodyText": "Auto-complete is not supported in the synchronous scenario. I would expect you to be completing these manually.", "author": "conniey", "createdAt": "2020-04-24T15:00:42Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzIyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414647227", "bodyText": "This would still pass with 0 items in the collection.", "author": "conniey", "createdAt": "2020-04-24T15:04:26Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzM0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414647342", "bodyText": "There should be a space before the colon.", "author": "conniey", "createdAt": "2020-04-24T15:04:34Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzU1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414647559", "bodyText": "You only received one message and sent one message, this should be decremented once.", "author": "conniey", "createdAt": "2020-04-24T15:04:52Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0ODc4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414648789", "bodyText": "This should be in the foreach loop as well.", "author": "conniey", "createdAt": "2020-04-24T15:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0ODIzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414648232", "bodyText": "The reason this is here is that when we successfully receive a message, we don't need to clean it up in after test case scenario. This should be in the foreach block. Same with any uses below.", "author": "conniey", "createdAt": "2020-04-24T15:05:49Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTM0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414649344", "bodyText": "nit: variable name: Ite?", "author": "conniey", "createdAt": "2020-04-24T15:07:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedMessage = receiver.peek();\n+\n+        // Assert\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekFromSequenceNumberMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MDI2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414650267", "bodyText": "Is this assertion necessary? If the list was empty, the .get(0) would fail with an out of range exception. The assertion is probably Assertions.assertEquals(1, asList.size()) before you get the first item.", "author": "conniey", "createdAt": "2020-04-24T15:08:28Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedMessage = receiver.peek();\n+\n+        // Assert\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekFromSequenceNumberMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MDkwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414650908", "bodyText": "You should be asserting that the messages also start from that sequence number.", "author": "conniey", "createdAt": "2020-04-24T15:09:20Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedMessage = receiver.peek();\n+\n+        // Assert\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekFromSequenceNumberMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedPeekMessage = receiver.peekAt(receivedMessage.getSequenceNumber());\n+\n+        // Assert\n+        assertMessageEquals(receivedPeekMessage, messageId, isSessionEnabled);\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekBatchMessages(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+        final int maxMessages = 2;\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.peekBatch(maxMessages);\n+\n+        // Assert\n+        Assertions.assertEquals(maxMessages, iterableMessages.stream().collect(Collectors.toList()).size());\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @MethodSource(\"messagingEntityProvider\")\n+    @ParameterizedTest\n+    void peekBatchMessagesFromSequence(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, false);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, false);\n+        final int maxMessages = 2;\n+        final int fromSequenceNumber = 1;\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.peekBatchAt(maxMessages, fromSequenceNumber);\n+\n+        // Assert\n+        Assertions.assertEquals(maxMessages, iterableMessages.stream().collect(Collectors.toList()).size());", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MTIyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414651226", "bodyText": "You should also assert that the message is from that sequence number.", "author": "conniey", "createdAt": "2020-04-24T15:09:49Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedMessage = receiver.peek();\n+\n+        // Assert\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekFromSequenceNumberMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedPeekMessage = receiver.peekAt(receivedMessage.getSequenceNumber());\n+\n+        // Assert\n+        assertMessageEquals(receivedPeekMessage, messageId, isSessionEnabled);", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MTU0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414651547", "bodyText": "Same with the comment above. If you did .get(0) and the list was empty, it would throw. This check is incorrect.", "author": "conniey", "createdAt": "2020-04-24T15:10:18Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+public class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    final AtomicInteger messagesPending = new AtomicInteger();\n+    final AtomicReference<List<Long>>  messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" +  receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages =  messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we do not receive any message in given timeout.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveNoMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 2;\n+        int noMessages = 0;\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, Duration.ofSeconds(15));\n+\n+        // Assert\n+        final int receivedMessages = iterableMessages.stream().collect(Collectors.toList()).size();\n+        assertEquals(noMessages, receivedMessages);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive one messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveMessageAutoComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int howManyMessage = 1;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        Iterable<ServiceBusReceivedMessage> iterableMessages = receiver.receive(howManyMessage, TIMEOUT);\n+\n+        // Assert\n+        for (ServiceBusReceivedMessage receivedMessage: iterableMessages) {\n+            assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+        }\n+\n+        messagesPending.decrementAndGet();\n+        messagesPending.decrementAndGet();\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedMessage = receiver.peek();\n+\n+        // Assert\n+        assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekFromSequenceNumberMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);\n+\n+        // Act\n+        ServiceBusReceivedMessage receivedPeekMessage = receiver.peekAt(receivedMessage.getSequenceNumber());\n+\n+        // Assert\n+        assertMessageEquals(receivedPeekMessage, messageId, isSessionEnabled);\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void peekBatchMessages(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+        final int maxMessages = 2;\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.peekBatch(maxMessages);\n+\n+        // Assert\n+        Assertions.assertEquals(maxMessages, iterableMessages.stream().collect(Collectors.toList()).size());\n+    }\n+\n+    /**\n+     * Verifies that we can send and peek a batch of messages.\n+     */\n+    @MethodSource(\"messagingEntityProvider\")\n+    @ParameterizedTest\n+    void peekBatchMessagesFromSequence(MessagingEntityType entityType) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, false);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, false);\n+        final int maxMessages = 2;\n+        final int fromSequenceNumber = 1;\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> iterableMessages = receiver.peekBatchAt(maxMessages, fromSequenceNumber);\n+\n+        // Assert\n+        Assertions.assertEquals(maxMessages, iterableMessages.stream().collect(Collectors.toList()).size());\n+    }\n+\n+    /**\n+     * Verifies that we can dead-letter a message.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void deadLetterMessage(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+\n+        final IterableStream<ServiceBusReceivedMessage> messageIte = receiver.receive(1, TIMEOUT);\n+        Assertions.assertNotNull(messageIte);\n+\n+        final List<ServiceBusReceivedMessage> asList = messageIte.stream().collect(Collectors.toList());\n+        ServiceBusReceivedMessage receivedMessage = asList.get(0);\n+\n+        assertNotNull(receivedMessage);", "originalCommit": "1b5851babfff4c6e7d3b351e70b1898a65dfa697", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MTcxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414651714", "bodyText": "And all other instances of it.", "author": "conniey", "createdAt": "2020-04-24T15:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY1MTU0Nw=="}], "type": "inlineReview"}, {"oid": "21a8f72f3d234886688defc556ad97c29171ee69", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21a8f72f3d234886688defc556ad97c29171ee69", "message": "more test fixes", "committedDate": "2020-04-24T16:55:08Z", "type": "commit"}, {"oid": "4879609a78ed369f03b76d6e685fb9a99874f046", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4879609a78ed369f03b76d6e685fb9a99874f046", "message": "more test fixes", "committedDate": "2020-04-24T16:55:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyNTI0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414725241", "bodyText": "nit: extra line.", "author": "conniey", "createdAt": "2020-04-24T17:00:04Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,590 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    private final AtomicInteger messagesPending = new AtomicInteger();\n+    private final AtomicReference<List<Long>> messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+", "originalCommit": "4879609a78ed369f03b76d6e685fb9a99874f046", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyNTQ5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414725493", "bodyText": "Use logger.", "author": "conniey", "createdAt": "2020-04-24T17:00:28Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,590 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    private final AtomicInteger messagesPending = new AtomicInteger();\n+    private final AtomicReference<List<Long>> messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" + receivedMessage.getSequenceNumber());", "originalCommit": "4879609a78ed369f03b76d6e685fb9a99874f046", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyNjYyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414726625", "bodyText": "Should use placeholders so it can be lazily evaluated.\nhttp://www.slf4j.org/faq.html#logging_performance", "author": "conniey", "createdAt": "2020-04-24T17:02:12Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,590 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    private final AtomicInteger messagesPending = new AtomicInteger();\n+    private final AtomicReference<List<Long>> messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    System.out.println(\"Removed Message sequence : \" + receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages = messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity : \" + receiver.getEntityPath(), e);", "originalCommit": "4879609a78ed369f03b76d6e685fb9a99874f046", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ae1cc9997585554964f90c0ce2c3bd1a899bb76", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ae1cc9997585554964f90c0ce2c3bd1a899bb76", "message": "more test fixes", "committedDate": "2020-04-24T18:10:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMDQ0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414820441", "bodyText": "Do we need the empty set? This is done during clean up. The class will be recreated after every method.", "author": "conniey", "createdAt": "2020-04-24T19:44:04Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,595 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    private final AtomicInteger messagesPending = new AtomicInteger();\n+    private final AtomicReference<List<Long>> messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    logger.info(\"Removed Message Seq: {} \", receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages = messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity: {} \", receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());", "originalCommit": "3ae1cc9997585554964f90c0ce2c3bd1a899bb76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMTgyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414821824", "bodyText": "A better way is to count the number of time you go into the loop and assert at the end rather than creating the list eagerly.\nint count = 0;\nfor (Message m : messages) {\n    count++;\n}\nassertEquals(2, count);", "author": "conniey", "createdAt": "2020-04-24T19:46:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,595 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n+\n+    /* Sometime not all the messages are cleaned-up. This is buffer to ensure all the messages are cleaned-up.*/\n+    private static final int BUFFER_MESSAGES_TO_REMOVE = 10;\n+\n+    private final AtomicInteger messagesPending = new AtomicInteger();\n+    private final AtomicReference<List<Long>> messagesDeferred = new AtomicReference<>(new ArrayList<>());\n+    private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClientIntegrationTest.class);\n+\n+    private ServiceBusReceiverClient receiver;\n+    private ServiceBusSenderClient sender;\n+\n+    /**\n+     * Receiver used to clean up resources in {@link #afterTest()}.\n+     */\n+    private ServiceBusReceiverClient receiveAndDeleteReceiver;\n+\n+    protected ServiceBusReceiverClientIntegrationTest() {\n+        super(new ClientLogger(ServiceBusReceiverClientIntegrationTest.class));\n+    }\n+\n+    @Override\n+    protected void beforeTest() {\n+        sessionId = UUID.randomUUID().toString();\n+    }\n+\n+    @Override\n+    protected void afterTest() {\n+        final int pending = messagesPending.get();\n+        if (pending < 1 && messagesDeferred.get().size() < 1) {\n+            dispose(receiver, sender, receiveAndDeleteReceiver);\n+            return;\n+        }\n+        // In the case that this test failed... we're going to drain the queue or subscription.\n+        if (pending > 0) {\n+            try {\n+                IterableStream<ServiceBusReceivedMessage> removedMessage = receiveAndDeleteReceiver.receive(\n+                    pending + BUFFER_MESSAGES_TO_REMOVE);\n+                removedMessage.stream().forEach(receivedMessage -> {\n+                    logger.info(\"Removed Message Seq: {} \", receivedMessage.getSequenceNumber());\n+                });\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining queue.\", e);\n+            }\n+        }\n+\n+        if (messagesDeferred.get().size() > 0) {\n+            try {\n+                List<Long> listOfDeferredMessages = messagesDeferred.get();\n+                for (Long seqNumber : listOfDeferredMessages) {\n+                    ServiceBusReceivedMessage deferredMessages = receiver.receiveDeferredMessage(seqNumber);\n+                    receiver.complete(deferredMessages);\n+                }\n+            } catch (Exception e) {\n+                logger.warning(\"Error occurred when draining deferred messages Entity: {} \", receiver.getEntityPath(), e);\n+            }\n+\n+            // set empty list\n+            messagesDeferred.set(new ArrayList<>());\n+        }\n+\n+        dispose(receiver, sender, receiveAndDeleteReceiver);\n+    }\n+\n+    /**\n+     * Verifies that we can send and receive two messages.\n+     */\n+    @MethodSource(\"messagingEntityWithSessions\")\n+    @ParameterizedTest\n+    void receiveTwoMessagesAndComplete(MessagingEntityType entityType, boolean isSessionEnabled) {\n+        // Arrange\n+        setSenderAndReceiver(entityType, isSessionEnabled);\n+        int maxMessages = 2;\n+\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n+\n+        sendMessage(message);\n+        sendMessage(message);\n+\n+        // Act\n+        IterableStream<ServiceBusReceivedMessage> messages = receiver.receive(maxMessages, TIMEOUT);\n+\n+        // Assert\n+        final List<ServiceBusReceivedMessage> asList = messages.stream().collect(Collectors.toList());\n+        assertEquals(maxMessages, asList.size());\n+\n+        for (ServiceBusReceivedMessage receivedMessage : asList) {", "originalCommit": "3ae1cc9997585554964f90c0ce2c3bd1a899bb76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMjI5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414822292", "bodyText": "Same with other instances.", "author": "conniey", "createdAt": "2020-04-24T19:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMzE1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10430#discussion_r414823158", "bodyText": "One test case you're missing is what happens if we receive() twice. Customers would probably try this in a loop several times rather than once.", "author": "conniey", "createdAt": "2020-04-24T19:49:19Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,595 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.messaging.servicebus.implementation.DispositionStatus;\n+import com.azure.messaging.servicebus.implementation.MessagingEntityType;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Integration tests for {@link ServiceBusReceiverClient} from queues or subscriptions.\n+ */\n+class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {", "originalCommit": "3ae1cc9997585554964f90c0ce2c3bd1a899bb76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "997d24274630eb0399779db5ff4761a489cd0f08", "url": "https://github.com/Azure/azure-sdk-for-java/commit/997d24274630eb0399779db5ff4761a489cd0f08", "message": "Adding test for two receive() calls", "committedDate": "2020-04-24T23:01:48Z", "type": "commit"}]}