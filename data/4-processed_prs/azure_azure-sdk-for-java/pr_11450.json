{"pr_number": 11450, "pr_title": "Add User Authentication API to Identity Java.", "pr_createdAt": "2020-05-27T02:55:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11450", "timeline": [{"oid": "d81d231911ca4d0e788f6cb7cd931bd578ca51f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d81d231911ca4d0e788f6cb7cd931bd578ca51f0", "message": "update api", "committedDate": "2020-05-27T02:43:51Z", "type": "commit"}, {"oid": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "message": "update", "committedDate": "2020-05-28T18:15:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1NDk5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432054991", "bodyText": "It's complaining about private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();. Changing private final static to private static final will fix the issue and you can remove this suppression.", "author": "srnagar", "createdAt": "2020-05-28T19:00:58Z", "path": "eng/code-quality-reports/src/main/resources/checkstyle/checkstyle-suppressions.xml", "diffHunk": "@@ -440,4 +440,7 @@\n   <!-- The variables are assigned by jcommander annotation injection framework, cannot be made final. -->\n   <suppress checks=\"com.azure.tools.checkstyle.checks.EnforceFinalFieldsCheck\"\n             files=\"com.azure.perf.test.core.PerfStressOptions.java\"/>\n+            \n+  <!-- This check doesn't apply / is a false positive. -->\n+  <suppress checks=\"ModifierOrder\" files=\"AuthenticationRecord.java\"/>", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MTc3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432061775", "bodyText": "Does DeviceCodeCredential open a browser?", "author": "chlowell", "createdAt": "2020-05-28T19:13:38Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -34,30 +36,75 @@\n      * @param identityClientOptions the options for configuring the identity client\n      */\n     DeviceCodeCredential(String clientId, String tenantId, Consumer<DeviceCodeInfo> challengeConsumer,\n-                         IdentityClientOptions identityClientOptions) {\n+                         boolean automaticAuthentication, IdentityClientOptions identityClientOptions) {\n         this.challengeConsumer = challengeConsumer;\n         identityClient = new IdentityClientBuilder()\n             .tenantId(tenantId)\n             .clientId(clientId)\n             .identityClientOptions(identityClientOptions)\n             .build();\n         this.cachedToken = new AtomicReference<>();\n+        this.authorityHost = identityClientOptions.getAuthorityHost();\n+        this.automaticAuthentication = automaticAuthentication;\n+        if (identityClientOptions.getAuthenticationRecord() != null) {\n+            cachedToken.set(new MsalAuthenticationAccount(identityClientOptions.getAuthenticationRecord()));\n+        }\n     }\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return Mono.defer(() -> {\n             if (cachedToken.get() != null) {\n-                return identityClient.authenticateWithMsalAccount(request, cachedToken.get().getAccount())\n+                return identityClient.authenticateWithMsalAccount(request, cachedToken.get())\n                     .onErrorResume(t -> Mono.empty());\n             } else {\n                 return Mono.empty();\n             }\n         }).switchIfEmpty(\n-            Mono.defer(() -> identityClient.authenticateWithDeviceCode(request, challengeConsumer)))\n+            Mono.defer(() -> {\n+                if (!automaticAuthentication) {\n+                    return Mono.error(new AuthenticationRequiredException(\"Interactive authentication is needed to \"\n+                              + \"acquire token. Call Authenticate to initiate the device code authentication.\"));\n+                }\n+                return identityClient.authenticateWithDeviceCode(request, challengeConsumer);\n+            }))\n             .map(msalToken -> {\n-                cachedToken.set(msalToken);\n+                cachedToken.set(\n+                        new MsalAuthenticationAccount(\n+                                new AuthenticationRecord(msalToken.getAuthenticationResult(),\n+                                        identityClient.getTenantId())));\n                 return msalToken;\n             });\n     }\n+\n+    /**\n+     * Interactively authenticates a user via the default browser.", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwNTE4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432205182", "bodyText": "nope, user needs to open the browser.\nThe docs can be elaborated to explain that.\nI'll do it.", "author": "g2vinay", "createdAt": "2020-05-29T01:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MTc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzU1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432063558", "bodyText": "Is this public?", "author": "chlowell", "createdAt": "2020-05-28T19:17:09Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/KnownAuthorityHosts.java", "diffHunk": "@@ -29,4 +29,20 @@ private KnownAuthorityHosts() { }\n      * The host of the Azure Active Directory authority for tenants in the Azure US Government Cloud.\n      */\n     public static final String AZURE_US_GOVERNMENT = \"https://login.microsoftonline.us/\";\n+\n+\n+    static String getDefaultScope(String authorityHost) {", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwNTIxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432205218", "bodyText": "nope, its package private.", "author": "g2vinay", "createdAt": "2020-05-29T01:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NjgwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432066807", "bodyText": "Shouldn't the exception carry request so the application can pass it on to authenticate?", "author": "chlowell", "createdAt": "2020-05-28T19:23:37Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -34,30 +36,75 @@\n      * @param identityClientOptions the options for configuring the identity client\n      */\n     DeviceCodeCredential(String clientId, String tenantId, Consumer<DeviceCodeInfo> challengeConsumer,\n-                         IdentityClientOptions identityClientOptions) {\n+                         boolean automaticAuthentication, IdentityClientOptions identityClientOptions) {\n         this.challengeConsumer = challengeConsumer;\n         identityClient = new IdentityClientBuilder()\n             .tenantId(tenantId)\n             .clientId(clientId)\n             .identityClientOptions(identityClientOptions)\n             .build();\n         this.cachedToken = new AtomicReference<>();\n+        this.authorityHost = identityClientOptions.getAuthorityHost();\n+        this.automaticAuthentication = automaticAuthentication;\n+        if (identityClientOptions.getAuthenticationRecord() != null) {\n+            cachedToken.set(new MsalAuthenticationAccount(identityClientOptions.getAuthenticationRecord()));\n+        }\n     }\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return Mono.defer(() -> {\n             if (cachedToken.get() != null) {\n-                return identityClient.authenticateWithMsalAccount(request, cachedToken.get().getAccount())\n+                return identityClient.authenticateWithMsalAccount(request, cachedToken.get())\n                     .onErrorResume(t -> Mono.empty());\n             } else {\n                 return Mono.empty();\n             }\n         }).switchIfEmpty(\n-            Mono.defer(() -> identityClient.authenticateWithDeviceCode(request, challengeConsumer)))\n+            Mono.defer(() -> {\n+                if (!automaticAuthentication) {\n+                    return Mono.error(new AuthenticationRequiredException(\"Interactive authentication is needed to \"\n+                              + \"acquire token. Call Authenticate to initiate the device code authentication.\"));", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzMTgwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r433331802", "bodyText": "Yeah, added it.", "author": "g2vinay", "createdAt": "2020-06-01T15:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NjgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1NTIyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432055229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n          \n          \n            \n                private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "author": "srnagar", "createdAt": "2020-05-28T19:01:24Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AuthenticationRecord.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Represents the account information relating to an authentication request\n+ */\n+public class AuthenticationRecord {\n+    private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1NjIxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432056215", "bodyText": "Why is this ctor needed? This is an immutable class and only the other ctor overload is sufficient.", "author": "srnagar", "createdAt": "2020-05-28T19:03:10Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AuthenticationRecord.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Represents the account information relating to an authentication request\n+ */\n+public class AuthenticationRecord {\n+    private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    @JsonProperty(\"authority\")\n+    private String authority;\n+\n+    @JsonProperty(\"homeAccountId\")\n+    private String homeAccountId;\n+\n+    @JsonProperty(\"tenantId\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"username\")\n+    private String username;\n+\n+\n+    AuthenticationRecord() { }", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzMjE1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r433332155", "bodyText": "needed for Jackson deserialize.\nAlternative would be JsonCreator tag.", "author": "g2vinay", "createdAt": "2020-06-01T16:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1NjIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MjM0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432062343", "bodyText": "Should serialize method also be static and take an AuthenticationRecord instance as input?", "author": "srnagar", "createdAt": "2020-05-28T19:14:48Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AuthenticationRecord.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Represents the account information relating to an authentication request\n+ */\n+public class AuthenticationRecord {\n+    private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    @JsonProperty(\"authority\")\n+    private String authority;\n+\n+    @JsonProperty(\"homeAccountId\")\n+    private String homeAccountId;\n+\n+    @JsonProperty(\"tenantId\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"username\")\n+    private String username;\n+\n+\n+    AuthenticationRecord() { }\n+\n+    AuthenticationRecord(IAuthenticationResult authenticationResult, String tenantId) {\n+        authority = authenticationResult.environment();\n+        homeAccountId = authenticationResult.account().homeAccountId();\n+        username = authenticationResult.account().username();\n+        this.tenantId = tenantId;\n+    }\n+\n+    /**\n+     * Get the authority host used to authenticate the account.\n+     *\n+     * @return the authority host.\n+     */\n+    public String getAuthority() {\n+        return authority;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the account.\n+     *\n+     * @return the account id.\n+     */\n+    public String getHomeAccountId() {\n+        return homeAccountId;\n+    }\n+\n+    /**\n+     * Get the tenant, which the account authenticated in.\n+     *\n+     * @return the tenant id.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Get the user principal or service principal name of the account.\n+     *\n+     * @return the username.\n+     */\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    /**\n+     * Serializes the {@link AuthenticationRecord} to the specified {@link OutputStream}\n+     *\n+     * @param outputStream The {@link OutputStream} to which the serialized record will be written to.\n+     * @return A {@link Mono} containing {@link Void}\n+     */\n+    public Mono<Void> serialize(OutputStream outputStream) {\n+        return Mono.defer(() -> {\n+            try {\n+                OBJECT_MAPPER.writeValue(outputStream, this);\n+            } catch (IOException e) {\n+                return Mono.error(e);\n+            }\n+            return Mono.empty();\n+        });\n+    }\n+\n+    /**\n+     * Deserializes the {@link AuthenticationRecord} from the specified {@link InputStream}\n+     *\n+     * @param inputStream The {@link InputStream} from which the serialized record will be read.\n+     * @return A {@link Mono} containing the {@link AuthenticationRecord} object.\n+     */\n+    public static Mono<AuthenticationRecord> deserialize(InputStream inputStream) {", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0OTIzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r433349232", "bodyText": "That is an option. Pro of this would be both factory-style methods at same location will have consistency.\nFactory method's scope for deserialize is to instantiate the Auth record object.\nFor serialize,\nuser will have the authenticationRecord locally instantiated when about to serialize.\nso authenticationRecord.serialize(...) will flow intuitively I feel vs AuthenticationRecord.serialize(authenticationRecrod, outputStream);\nThis behavior needs to be consistent across languages too.", "author": "g2vinay", "createdAt": "2020-06-01T16:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MjM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzExNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432063117", "bodyText": "log and throw", "author": "srnagar", "createdAt": "2020-05-28T19:16:16Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -34,30 +36,75 @@\n      * @param identityClientOptions the options for configuring the identity client\n      */\n     DeviceCodeCredential(String clientId, String tenantId, Consumer<DeviceCodeInfo> challengeConsumer,\n-                         IdentityClientOptions identityClientOptions) {\n+                         boolean automaticAuthentication, IdentityClientOptions identityClientOptions) {\n         this.challengeConsumer = challengeConsumer;\n         identityClient = new IdentityClientBuilder()\n             .tenantId(tenantId)\n             .clientId(clientId)\n             .identityClientOptions(identityClientOptions)\n             .build();\n         this.cachedToken = new AtomicReference<>();\n+        this.authorityHost = identityClientOptions.getAuthorityHost();\n+        this.automaticAuthentication = automaticAuthentication;\n+        if (identityClientOptions.getAuthenticationRecord() != null) {\n+            cachedToken.set(new MsalAuthenticationAccount(identityClientOptions.getAuthenticationRecord()));\n+        }\n     }\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return Mono.defer(() -> {\n             if (cachedToken.get() != null) {\n-                return identityClient.authenticateWithMsalAccount(request, cachedToken.get().getAccount())\n+                return identityClient.authenticateWithMsalAccount(request, cachedToken.get())\n                     .onErrorResume(t -> Mono.empty());\n             } else {\n                 return Mono.empty();\n             }\n         }).switchIfEmpty(\n-            Mono.defer(() -> identityClient.authenticateWithDeviceCode(request, challengeConsumer)))\n+            Mono.defer(() -> {\n+                if (!automaticAuthentication) {\n+                    return Mono.error(new AuthenticationRequiredException(\"Interactive authentication is needed to \"\n+                              + \"acquire token. Call Authenticate to initiate the device code authentication.\"));", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzQ2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432063469", "bodyText": "log and throw", "author": "srnagar", "createdAt": "2020-05-28T19:16:59Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -34,30 +36,75 @@\n      * @param identityClientOptions the options for configuring the identity client\n      */\n     DeviceCodeCredential(String clientId, String tenantId, Consumer<DeviceCodeInfo> challengeConsumer,\n-                         IdentityClientOptions identityClientOptions) {\n+                         boolean automaticAuthentication, IdentityClientOptions identityClientOptions) {\n         this.challengeConsumer = challengeConsumer;\n         identityClient = new IdentityClientBuilder()\n             .tenantId(tenantId)\n             .clientId(clientId)\n             .identityClientOptions(identityClientOptions)\n             .build();\n         this.cachedToken = new AtomicReference<>();\n+        this.authorityHost = identityClientOptions.getAuthorityHost();\n+        this.automaticAuthentication = automaticAuthentication;\n+        if (identityClientOptions.getAuthenticationRecord() != null) {\n+            cachedToken.set(new MsalAuthenticationAccount(identityClientOptions.getAuthenticationRecord()));\n+        }\n     }\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return Mono.defer(() -> {\n             if (cachedToken.get() != null) {\n-                return identityClient.authenticateWithMsalAccount(request, cachedToken.get().getAccount())\n+                return identityClient.authenticateWithMsalAccount(request, cachedToken.get())\n                     .onErrorResume(t -> Mono.empty());\n             } else {\n                 return Mono.empty();\n             }\n         }).switchIfEmpty(\n-            Mono.defer(() -> identityClient.authenticateWithDeviceCode(request, challengeConsumer)))\n+            Mono.defer(() -> {\n+                if (!automaticAuthentication) {\n+                    return Mono.error(new AuthenticationRequiredException(\"Interactive authentication is needed to \"\n+                              + \"acquire token. Call Authenticate to initiate the device code authentication.\"));\n+                }\n+                return identityClient.authenticateWithDeviceCode(request, challengeConsumer);\n+            }))\n             .map(msalToken -> {\n-                cachedToken.set(msalToken);\n+                cachedToken.set(\n+                        new MsalAuthenticationAccount(\n+                                new AuthenticationRecord(msalToken.getAuthenticationResult(),\n+                                        identityClient.getTenantId())));\n                 return msalToken;\n             });\n     }\n+\n+    /**\n+     * Interactively authenticates a user via the default browser.\n+     *\n+     * @param request The details of the authentication request.\n+     *\n+     * @return The {@link AuthenticationRecord} which can be used to silently authenticate the account\n+     * on future execution if persistent caching was enabled via\n+     * {@link DeviceCodeCredentialBuilder#enablePersistentCache(boolean)} when credential was instantiated.\n+     */\n+    public Mono<AuthenticationRecord> authenticate(TokenRequestContext request) {\n+        return Mono.defer(() -> identityClient.authenticateWithDeviceCode(request, challengeConsumer))\n+                       .map(msalToken -> new AuthenticationRecord(msalToken.getAuthenticationResult(),\n+                               identityClient.getTenantId()));\n+    }\n+\n+    /**\n+     * Interactively authenticates a user via the default browser.\n+     *\n+     * @return The {@link AuthenticationRecord} which can be used to silently authenticate the account\n+     * on future execution if persistent caching was enabled via\n+     * {@link DeviceCodeCredentialBuilder#enablePersistentCache(boolean)} when credential was instantiated.\n+     */\n+    public Mono<AuthenticationRecord> authenticate() {\n+        String defaultScope = KnownAuthorityHosts.getDefaultScope(authorityHost);\n+        if (defaultScope == null) {\n+            return Mono.error(new AuthenticationRequiredException(\"Authenticating in this environment requires\"\n+                                                      + \" specifying a TokenRequestContext.\"));\n+        }", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5MzM4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432293387", "bodyText": "javadoc for new parameter", "author": "jianghaolu", "createdAt": "2020-05-29T07:05:04Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredential.java", "diffHunk": "@@ -34,30 +36,75 @@\n      * @param identityClientOptions the options for configuring the identity client", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDM1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432294351", "bodyText": "I probably wrote this code but this Javadoc is incorrect", "author": "jianghaolu", "createdAt": "2020-05-29T07:07:16Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DeviceCodeCredentialBuilder.java", "diffHunk": "@@ -15,6 +16,7 @@\n  */\n public class DeviceCodeCredentialBuilder extends AadCredentialBuilderBase<DeviceCodeCredentialBuilder> {\n     private Consumer<DeviceCodeInfo> challengeConsumer;\n+    private boolean automaticAuthentication = true;\n \n     /**\n      * Sets the port for the local HTTP server, for which {@code http://localhost:{port}} must be", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDc3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r432294777", "bodyText": "InteractiveBrowserCredential#authenticate", "author": "jianghaolu", "createdAt": "2020-05-29T07:08:13Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/InteractiveBrowserCredentialBuilder.java", "diffHunk": "@@ -52,6 +54,35 @@ public InteractiveBrowserCredentialBuilder enablePersistentCache(boolean enabled\n         return this;\n     }\n \n+\n+    /**\n+     * Sets the {@link AuthenticationRecord} captured from a previous authentication.\n+     *\n+     * @param authenticationRecord The Authentication record to be configured.\n+     *\n+     * @return An updated instance of this builder with the configured authentication record.\n+     */\n+    public InteractiveBrowserCredentialBuilder authenticationRecord(AuthenticationRecord authenticationRecord) {\n+        this.identityClientOptions.setAuthenticationRecord(authenticationRecord);\n+        return this;\n+    }\n+\n+    /**\n+     * Disables the automatic authentication and prevents the {@link DeviceCodeCredential} from automatically\n+     * prompting the user. If automatic authentication is disabled a {@link AuthenticationRequiredException}\n+     * will be thrown from {@link DeviceCodeCredential#getToken(TokenRequestContext)} in the case that\n+     * user interaction is necessary. The application is responsible for handling this exception, and\n+     * calling {@link DeviceCodeCredential#authenticate()} or", "originalCommit": "2fcc41a79e56f8c9edf0880ff4fad173beaf2911", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2fd6ca965c90448f0a3bf5b656fc37e6259f42c8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2fd6ca965c90448f0a3bf5b656fc37e6259f42c8", "message": "address feedback", "committedDate": "2020-06-01T15:54:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NTE2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r433455166", "bodyText": "Do you mean to keep this?", "author": "chlowell", "createdAt": "2020-06-01T19:55:15Z", "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/InteractiveBrowserCredentialTest.java", "diffHunk": "@@ -73,4 +73,39 @@ public void testValidInteractive() throws Exception {\n                 && expiresAt.getSecond() == accessToken.getExpiresAt().getSecond())\n             .verifyComplete();\n     }\n+\n+    @Test\n+    public void testValidAuthenticate() throws Exception {\n+        Random random = new Random();\n+\n+\n+//        String authRecordJson = \"{\\\"authority\\\":\\\"login.microsoftonline.com\\\",\" +\n+//            \"\\\"homeAccountId\\\":\\\"homeTestId.testId\\\",\" +\n+//                                        \"\\\"tenantId\\\":\\\"organizations\\\",\\\"username\\\":\\\"user@test.com\\\"}\";\n+//\n+//        InputStream inputStream = new ByteArrayInputStream(authRecordJson.getBytes());\n+//        AuthenticationRecord authenticationRecord = AuthenticationRecord.deserialize(inputStream).block();", "originalCommit": "2fd6ca965c90448f0a3bf5b656fc37e6259f42c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwNTk1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11450#discussion_r433505959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the user principal or service principal name of the account.\n          \n          \n            \n                 * Get the user principal name of the account.", "author": "chlowell", "createdAt": "2020-06-01T21:41:37Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AuthenticationRecord.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.aad.msal4j.IAuthenticationResult;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Represents the account information relating to an authentication request\n+ */\n+public class AuthenticationRecord {\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    @JsonProperty(\"authority\")\n+    private String authority;\n+\n+    @JsonProperty(\"homeAccountId\")\n+    private String homeAccountId;\n+\n+    @JsonProperty(\"tenantId\")\n+    private String tenantId;\n+\n+    @JsonProperty(\"username\")\n+    private String username;\n+\n+\n+    AuthenticationRecord() { }\n+\n+    AuthenticationRecord(IAuthenticationResult authenticationResult, String tenantId) {\n+        authority = authenticationResult.account().environment();\n+        homeAccountId = authenticationResult.account().homeAccountId();\n+        username = authenticationResult.account().username();\n+        this.tenantId = tenantId;\n+    }\n+\n+    /**\n+     * Get the authority host used to authenticate the account.\n+     *\n+     * @return the authority host.\n+     */\n+    public String getAuthority() {\n+        return authority;\n+    }\n+\n+    /**\n+     * Get the unique identifier of the account.\n+     *\n+     * @return the account id.\n+     */\n+    public String getHomeAccountId() {\n+        return homeAccountId;\n+    }\n+\n+    /**\n+     * Get the tenant, which the account authenticated in.\n+     *\n+     * @return the tenant id.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Get the user principal or service principal name of the account.", "originalCommit": "2fd6ca965c90448f0a3bf5b656fc37e6259f42c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "81ea09d1733c7e544deac5af6f436c52bd77d40b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/81ea09d1733c7e544deac5af6f436c52bd77d40b", "message": "update", "committedDate": "2020-06-03T16:54:50Z", "type": "commit"}, {"oid": "aad134344168683055b3c1b06b7f621fc4328a21", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aad134344168683055b3c1b06b7f621fc4328a21", "message": "merge master", "committedDate": "2020-06-03T16:59:39Z", "type": "commit"}]}