{"pr_number": 11478, "pr_title": "Max concurrency", "pr_createdAt": "2020-05-27T19:34:17Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11478", "timeline": [{"oid": "6d0162a2eda29f3daaa599fda3529b2c427f3a6a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d0162a2eda29f3daaa599fda3529b2c427f3a6a", "message": "Barely started", "committedDate": "2020-05-20T18:37:28Z", "type": "commit"}, {"oid": "f44b9601af8d8745c692c29d7434f0136bd6ae6f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f44b9601af8d8745c692c29d7434f0136bd6ae6f", "message": "Added max concurrency parameter", "committedDate": "2020-05-27T17:06:13Z", "type": "commit"}, {"oid": "a1916abb161d9304c89075d5a14b239d9173df31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1916abb161d9304c89075d5a14b239d9173df31", "message": "spotbugs fix", "committedDate": "2020-05-27T19:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNDUzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431404531", "bodyText": "Does it helps if we add that the min concurrency user can set is 16 or reactor Queues.SMALL_BUFFER_SIZE\" https://projectreactor.io/docs/core/3.2.1.RELEASE/api/reactor/util/concurrent/Queues.html#SMALL_BUFFER_SIZE\nMay be it help customers trying to set a lower value and wonder why it's being ignored.", "author": "anuchandy", "createdAt": "2020-05-27T19:52:01Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ParallelTransferOptions.java", "diffHunk": "@@ -62,7 +63,35 @@ public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressRe\n      * {@link BlockBlobAsyncClient#MAX_UPLOAD_BLOB_BYTES}.\n      */\n     public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver,\n-        Integer maxSingleUploadSize) {\n+            Integer maxSingleUploadSize) {\n+        this(blockSize, numBuffers, progressReceiver, maxSingleUploadSize, null);\n+    }\n+\n+    /**\n+     * Creates a new {@link ParallelTransferOptions} with default parameters applied.\n+     *\n+     * @param blockSize The block size.\n+     * For upload, The block size is the size of each block that will be staged. This value also determines the number\n+     * of requests that need to be made. If block size is large, upload will make fewer network calls, but each\n+     * individual call will send more data and will therefore take longer. This parameter also determines the size\n+     * that each buffer uses when buffering is required and consequently amount of memory consumed by such methods may\n+     * be up to blockSize * numBuffers.\n+     * @param numBuffers For buffered upload only, the number of buffers is the maximum number of buffers this method\n+     * should allocate. Memory will be allocated lazily as needed. Must be at least two. Typically, the larger the\n+     * number of buffers, the more parallel, and thus faster, the upload portion  of this operation will be.\n+     * The amount of memory consumed by methods using this value may be up to blockSize * numBuffers.\n+     * @param progressReceiver {@link ProgressReceiver}\n+     * @param maxSingleUploadSize If the size of the data is less than or equal to this value, it will be uploaded in a\n+     * single put rather than broken up into chunks. If the data is uploaded in a single shot, the block size will be\n+     * ignored. Some constraints to consider are that more requests cost more, but several small or mid-sized requests\n+     * may sometimes perform better. In the case of buffered upload, up to this amount of data may be buffered before\n+     * any data is sent. Must be greater than 0. May be null to accept default behavior, which is the maximum value the\n+     * service accepts for uploading in a single requests and is represented by\n+     * {@link BlockBlobAsyncClient#MAX_UPLOAD_BLOB_BYTES}.\n+     * @param maxConcurrency The maximum number of parallel requests that will be issued at any given time.", "originalCommit": "a1916abb161d9304c89075d5a14b239d9173df31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMDg3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431510877", "bodyText": "Interesting. I set it to 3, and I saw that fixed the oom error, so I assume it wasn't getting ignored? Let me step through and check", "author": "rickle-msft", "createdAt": "2020-05-28T00:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxMjg3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431512875", "bodyText": "As far as I was able to trace the maxConcurrency value, it was still being preserved at 3, so I'm not sure where else this would be getting reset to a higher min.", "author": "rickle-msft", "createdAt": "2020-05-28T00:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MjE0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431552145", "bodyText": "thanks, Rick, I see the min constraint of 16 is applied only when concurrency is set through system property:\npublic static final int SMALL_BUFFER_SIZE\n = Math.max(16, Integer.parseInt(System.getProperty(\"reactor.bufferSize.small\", \"256\")));\nlooks like we can explicitly pass a value lower than that.", "author": "anuchandy", "createdAt": "2020-05-28T02:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQwNDUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2OTkxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431969914", "bodyText": "Would we want to use a parallelization that is more idiomatic to the Storage service usage? I know Queues.SMALL_BUFFER_SIZE aligns more with Reactor's usage but could the higher level of parallelization get use into issues.", "author": "alzimmermsft", "createdAt": "2020-05-28T16:31:36Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/ModelHelper.java", "diffHunk": "@@ -57,6 +58,8 @@ public static ParallelTransferOptions populateAndApplyDefaults(ParallelTransferO\n                 : other.getNumBuffers(),\n             other.getProgressReceiver(),\n             other.getMaxSingleUploadSize() == null ? Integer.valueOf(MAX_APPEND_FILE_BYTES)\n-                : other.getMaxSingleUploadSize());\n+                : other.getMaxSingleUploadSize(),\n+            // Queues.SMALL_BUFFER_SIZE is the default used by reactor\n+            other.getMaxConcurrency() == null ? Integer.valueOf(Queues.SMALL_BUFFER_SIZE) : other.getMaxConcurrency());", "originalCommit": "a1916abb161d9304c89075d5a14b239d9173df31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5MzcxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431993717", "bodyText": "Fair point. It is true that accepting this default is what hurt one the customer who filed the issue and why we're making this change. But that also seems like a fairly rare case so far? And I'm not sure what a more idiomatic value for Storage would be. It feels like anything we choose would just be a guess.", "author": "rickle-msft", "createdAt": "2020-05-28T17:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2OTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NjU3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r433356570", "bodyText": "https://github.com/reactor/reactor-core/blob/6058a391f614de6213fb85970272fc5b342bd181/reactor-core/src/main/java/reactor/util/concurrent/Queues.java#L88\nLooks like that'd be 256 by default. Pretty high.\nWe limit number of buffers. Shouldn't max concurrency == numBuffers ? Or maxConcurrency be <= numbBuffers with numBuffers being default ?", "author": "kasobol-msft", "createdAt": "2020-06-01T16:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2OTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDQ3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r431970473", "bodyText": "Same comment about what the default should be.", "author": "alzimmermsft", "createdAt": "2020-05-28T16:32:24Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/ModelHelper.java", "diffHunk": "@@ -44,7 +45,9 @@ public static ParallelTransferOptions populateAndApplyDefaults(ParallelTransferO\n                 : other.getNumBuffers(),\n             other.getProgressReceiver(),\n             other.getMaxSingleUploadSize() == null ? Integer.valueOf(BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES)\n-                : other.getMaxSingleUploadSize());\n+                : other.getMaxSingleUploadSize(),\n+            // Queues.SMALL_BUFFER_SIZE is the default used by reactor\n+            other.getMaxConcurrency() == null ? Integer.valueOf(Queues.SMALL_BUFFER_SIZE) : other.getMaxConcurrency());", "originalCommit": "a1916abb161d9304c89075d5a14b239d9173df31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NTYwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r433355602", "bodyText": "https://github.com/reactor/reactor-core/blob/6058a391f614de6213fb85970272fc5b342bd181/reactor-core/src/main/java/reactor/util/concurrent/Queues.java#L88\nLooks like that'd be 256 by default. Pretty high.\nWe limit number of buffers. Shouldn't max concurrency == numBuffers ? Or maxConcurrency be <= numbBuffers with numBuffers being default ?", "author": "kasobol-msft", "createdAt": "2020-06-01T16:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMTk2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r433411963", "bodyText": "I don't think we should set them to equal because numBuffers isn't used in every parallel operation, so it's not quite the same. 256 does sound high, but again we haven't seen OOM errors before even with this default. On the other hand, it's probably better to err on the side of being a little slower than running out of memory...", "author": "rickle-msft", "createdAt": "2020-06-01T18:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMjc5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r433412794", "bodyText": "In v10/11 we defaulted to 5. It was completely arbitrary, but how does that sound here?", "author": "rickle-msft", "createdAt": "2020-06-01T18:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NzQ1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r433357450", "bodyText": "One thing that isn't clear (from the notes) is what's the scope of this limit. I believe it's per upload request by looking at implementation. However, one might conclude it's global limit. We should make this clear.", "author": "kasobol-msft", "createdAt": "2020-06-01T16:46:10Z", "path": "sdk/storage/azure-storage-blob/CHANGELOG.md", "diffHunk": "@@ -1,6 +1,7 @@\n # Release History\n \n ## 12.7.0-beta.1 (Unreleased)\n+- Added a maxConcurrency option on ParallelTransferOptions that allows the customer to limit how many concurrent network requests will be outstanding at once. ", "originalCommit": "a1916abb161d9304c89075d5a14b239d9173df31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5MjA0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r433392046", "bodyText": "Good call. I'll add that to the javadocs, too", "author": "rickle-msft", "createdAt": "2020-06-01T17:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NzQ1MA=="}], "type": "inlineReview"}, {"oid": "2be2aec1a84f126de528c0afd4e7d2b571a3829d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2be2aec1a84f126de528c0afd4e7d2b571a3829d", "message": "Merged maxConcurrency and numBuffers", "committedDate": "2020-06-02T19:24:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzI1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434127257", "bodyText": "Or we can solve this problem by allocating maxConcurrency+1 buffers in the UploadbufferPool.", "author": "kasobol-msft", "createdAt": "2020-06-02T19:30:54Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/ParallelTransferOptions.java", "diffHunk": "@@ -61,17 +65,22 @@ public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressRe\n      * service accepts for uploading in a single requests and is represented by\n      * {@link BlockBlobAsyncClient#MAX_UPLOAD_BLOB_BYTES}.\n      */\n-    public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver,\n-        Integer maxSingleUploadSize) {\n+    public ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver,\n+            Integer maxSingleUploadSize) {\n         if (blockSize != null) {\n             StorageImplUtils.assertInBounds(\"blockSize\", blockSize, 1, BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES);\n         }\n         this.blockSize = blockSize;\n \n-        if (numBuffers != null) {\n-            StorageImplUtils.assertInBounds(\"numBuffers\", numBuffers, 2, Integer.MAX_VALUE);\n+        /*\n+        In buffered upload cases, maxConcurrency must be at least 2 as it also indicates the number of buffers we will\n+        allocate. That minimum is validated in the UploadBufferPool. Because this value is also used in file transfers\n+        which do not buffer, we only check the absolute minimum for this value here.", "originalCommit": "2be2aec1a84f126de528c0afd4e7d2b571a3829d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjE2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434126166", "bodyText": "Don't think this is used anymore.", "author": "alzimmermsft", "createdAt": "2020-06-02T19:28:47Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/ModelHelper.java", "diffHunk": "@@ -6,6 +6,7 @@\n import com.azure.storage.blob.BlobAsyncClient;\n import com.azure.storage.blob.models.ParallelTransferOptions;\n import com.azure.storage.blob.specialized.BlockBlobAsyncClient;\n+import reactor.util.concurrent.Queues;", "originalCommit": "2be2aec1a84f126de528c0afd4e7d2b571a3829d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434126901", "bodyText": "Should this change to maxConcurrency.", "author": "alzimmermsft", "createdAt": "2020-06-02T19:30:13Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/ParallelTransferOptions.java", "diffHunk": "@@ -40,13 +44,19 @@\n      * any data is sent. Must be greater than 0. May be null to accept default behavior, which is the maximum value the\n      * service accepts for uploading in a single requests, which varies depending on the service.\n      */\n-    public ParallelTransferOptions(Integer blockSize, Integer numBuffers, ProgressReceiver progressReceiver,\n+    public ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver,\n         Integer maxSingleUploadSize) {\n+\n         this.blockSize = blockSize;\n-        if (numBuffers != null) {\n-            StorageImplUtils.assertInBounds(\"numBuffers\", numBuffers, 2, Integer.MAX_VALUE);\n+        /*\n+        In buffered upload cases, maxConcurrency must be at least 2 as it also indicates the number of buffers we will\n+        allocate. That minimum is validated in the UploadBufferPool. Because this value is also used in file transfers\n+        which do not buffer, we only check the absolute minimum for this value here.\n+         */\n+        this.maxConcurrency = maxConcurrency;\n+        if (maxConcurrency != null) {\n+            StorageImplUtils.assertInBounds(\"numBuffers\", maxConcurrency, 1, Integer.MAX_VALUE);", "originalCommit": "2be2aec1a84f126de528c0afd4e7d2b571a3829d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzI5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11478#discussion_r434127299", "bodyText": "Don't think this is used anymore.", "author": "alzimmermsft", "createdAt": "2020-06-02T19:31:00Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/implementation/util/ModelHelper.java", "diffHunk": "@@ -6,6 +6,7 @@\n import com.azure.storage.common.ParallelTransferOptions;\n import com.azure.storage.common.implementation.Constants;\n import com.azure.storage.common.implementation.StorageImplUtils;\n+import reactor.util.concurrent.Queues;", "originalCommit": "2be2aec1a84f126de528c0afd4e7d2b571a3829d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d75791db14e45ffa2ca8cfbf05ab0f7e0c9b7c3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d75791db14e45ffa2ca8cfbf05ab0f7e0c9b7c3c", "message": "PR feedback", "committedDate": "2020-06-02T21:58:03Z", "type": "commit"}, {"oid": "8e88d371e955d52f59f063dcc29229b01b74f4f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e88d371e955d52f59f063dcc29229b01b74f4f1", "message": "Pr feedback", "committedDate": "2020-06-02T22:00:44Z", "type": "commit"}, {"oid": "06b958268856564e7c05d0d0da0af9f89fb59edf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/06b958268856564e7c05d0d0da0af9f89fb59edf", "message": "Merge remote-tracking branch 'upstream/master' into maxConcurrency", "committedDate": "2020-06-02T22:03:30Z", "type": "commit"}, {"oid": "310bbfb7e4a20c6445b960919f3632528aae4d0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/310bbfb7e4a20c6445b960919f3632528aae4d0c", "message": "CI fixes", "committedDate": "2020-06-02T23:14:11Z", "type": "commit"}, {"oid": "68a5a192fe483618a1d636e2a49c3e771bd69274", "url": "https://github.com/Azure/azure-sdk-for-java/commit/68a5a192fe483618a1d636e2a49c3e771bd69274", "message": "CI fixes", "committedDate": "2020-06-03T19:31:37Z", "type": "commit"}]}