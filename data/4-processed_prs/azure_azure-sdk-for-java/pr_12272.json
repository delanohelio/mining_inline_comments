{"pr_number": 12272, "pr_title": "Link configure item from property file to java code", "pr_createdAt": "2020-06-17T02:56:31Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12272", "timeline": [{"oid": "31a7d02384a1d7a1f70b43d7955f60034719f7ee", "url": "https://github.com/Azure/azure-sdk-for-java/commit/31a7d02384a1d7a1f70b43d7955f60034719f7ee", "message": "Remove unused variables.", "committedDate": "2020-06-16T06:29:15Z", "type": "commit"}, {"oid": "72108348b76149d9c0b87061e03630903f10a28e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/72108348b76149d9c0b87061e03630903f10a28e", "message": "Link configure item from property file to java code.", "committedDate": "2020-06-17T02:55:38Z", "type": "commit"}, {"oid": "3339fa2f25a7969f826e463918bdb1968f3160b7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3339fa2f25a7969f826e463918bdb1968f3160b7", "message": "Fix build failure.", "committedDate": "2020-06-17T07:25:32Z", "type": "commit"}, {"oid": "41deca1a5ae533dd979342a569bc76e413bfbf2c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/41deca1a5ae533dd979342a569bc76e413bfbf2c", "message": "Remove '.' in the normalizedName.", "committedDate": "2020-06-17T07:34:18Z", "type": "commit"}, {"oid": "2073d5d4851489279f8873ece47fc79b4a321061", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2073d5d4851489279f8873ece47fc79b4a321061", "message": "Fix build failure.", "committedDate": "2020-06-17T08:01:20Z", "type": "commit"}, {"oid": "003223aad316468d579388a58b6d928afbcc57e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/003223aad316468d579388a58b6d928afbcc57e6", "message": "Remove lombok dependency.", "committedDate": "2020-06-17T08:39:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1OTk3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12272#discussion_r441959973", "bodyText": "Should we remove this main method?", "author": "saragluna", "createdAt": "2020-06-18T04:21:20Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultProperties.java", "diffHunk": "@@ -0,0 +1,189 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.keyvault.spring;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.microsoft.azure.utils.Constants;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(value = KeyVaultProperties.PREFIX)\n+public class KeyVaultProperties {\n+\n+    public static final String PREFIX = \"azure.keyvault\";\n+    public static final String DELIMITER = \".\";\n+\n+    public String getClientId() {\n+        return clientId;\n+    }\n+\n+    public void setClientId(String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public String getClientKey() {\n+        return clientKey;\n+    }\n+\n+    public void setClientKey(String clientKey) {\n+        this.clientKey = clientKey;\n+    }\n+\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    public void setTenantId(String tenantId) {\n+        this.tenantId = tenantId;\n+    }\n+\n+    public String getCertificatePath() {\n+        return certificatePath;\n+    }\n+\n+    public void setCertificatePath(String certificatePath) {\n+        this.certificatePath = certificatePath;\n+    }\n+\n+    public String getCertificatePassword() {\n+        return certificatePassword;\n+    }\n+\n+    public void setCertificatePassword(String certificatePassword) {\n+        this.certificatePassword = certificatePassword;\n+    }\n+\n+    public Boolean getEnabled() {\n+        return enabled;\n+    }\n+\n+    public void setEnabled(Boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    public String getUri() {\n+        return uri;\n+    }\n+\n+    public void setUri(String uri) {\n+        this.uri = uri;\n+    }\n+\n+    public Long getRefreshInterval() {\n+        return refreshInterval;\n+    }\n+\n+    public void setRefreshInterval(Long refreshInterval) {\n+        this.refreshInterval = refreshInterval;\n+    }\n+\n+    public List<String> getSecretKeys() {\n+        return secretKeys;\n+    }\n+\n+    public void setSecretKeys(List<String> secretKeys) {\n+        this.secretKeys = secretKeys;\n+    }\n+\n+    public String getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(String order) {\n+        this.order = order;\n+    }\n+\n+    public String getCaseSensitiveKeys() {\n+        return caseSensitiveKeys;\n+    }\n+\n+    public void setCaseSensitiveKeys(String caseSensitiveKeys) {\n+        this.caseSensitiveKeys = caseSensitiveKeys;\n+    }\n+\n+    public String getAllowTelemetry() {\n+        return allowTelemetry;\n+    }\n+\n+    public void setAllowTelemetry(String allowTelemetry) {\n+        this.allowTelemetry = allowTelemetry;\n+    }\n+\n+    private Boolean enabled;\n+    private List<String> secretKeys;\n+    private Long refreshInterval = Constants.DEFAULT_REFRESH_INTERVAL_MS;\n+    private String allowTelemetry;\n+    /**\n+     * Defines the constant for the property that enables/disables case sensitive keys.\n+     */\n+    private String caseSensitiveKeys;\n+    private String certificatePassword;\n+    private String certificatePath;\n+    private String clientId;\n+    private String clientKey;\n+    /**\n+     * The constant used to define the order of the key vaults you are\n+     * delivering (comma delimited, e.g 'my-vault, my-vault-2').\n+     */\n+    private String order;\n+    private String tenantId;\n+    private String uri;\n+\n+\n+    public enum Property {\n+        ALLOW_TELEMETRY(\"allow-telemetry\"),\n+        CASE_SENSITIVE_KEYS(\"case-sensitive-keys\"),\n+        CERTIFICATE_PASSWORD(\"certificate-password\"),\n+        CERTIFICATE_PATH(\"certificate-path\"),\n+        CLIENT_ID(\"client-id\"),\n+        CLIENT_KEY(\"client-key\"),\n+        ENABLED(\"enabled\"),\n+        ORDER(\"order\"),\n+        REFRESH_INTERVAL(\"refresh-interval\"),\n+        SECRET_KEYS(\"secret-keys\"),\n+        TENANT_ID(\"tenant-id\"),\n+        URI(\"uri\");\n+\n+        private final String name;\n+\n+        String getName() {\n+            return name;\n+        }\n+\n+        Property(String name) {\n+            this.name = name;\n+        }\n+    }\n+\n+    public static String getPropertyName(Property property) {\n+        return String.join(DELIMITER, PREFIX, property.getName());\n+    }\n+\n+    public static String getPropertyName(String normalizedName, Property property) {\n+        return Stream.of(PREFIX, normalizedName, property.getName())\n+            .map(String::trim)\n+            .filter(s -> !s.isEmpty())\n+            .collect(Collectors.joining(DELIMITER));\n+    }\n+\n+    public static void main(String[] args) {", "originalCommit": "003223aad316468d579388a58b6d928afbcc57e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2Njc1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12272#discussion_r441966757", "bodyText": "If I removed main method, mvn clean install will report Unused field Error.", "author": "chenrujun", "createdAt": "2020-06-18T04:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1OTk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNTMzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12272#discussion_r442525339", "bodyText": "It should be removed - we don't want users to run this so I can't see why we would include it.", "author": "JonathanGiles", "createdAt": "2020-06-18T21:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1OTk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MTEyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12272#discussion_r443281124", "bodyText": "Already remoted. Thank you for your check. \ud83d\ude47", "author": "chenrujun", "createdAt": "2020-06-22T01:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk1OTk3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2MjM3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12272#discussion_r441962375", "bodyText": "Do we really need this assertion here?", "author": "saragluna", "createdAt": "2020-06-18T04:31:48Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/microsoft/azure/keyvault/spring/KeyVaultEnvironmentPostProcessorHelper.java", "diffHunk": "@@ -56,6 +47,7 @@\n \n     KeyVaultEnvironmentPostProcessorHelper(final ConfigurableEnvironment environment) {\n         this.environment = environment;\n+        Assert.notNull(environment, \"environment must not be null!\");", "originalCommit": "003223aad316468d579388a58b6d928afbcc57e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2NzUzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12272#discussion_r441967533", "bodyText": "Original code have nonnull check. So I added it, too. Just to keep original logic: https://github.com/Azure/azure-sdk-for-java/pull/12272/files#diff-dcea63cea0abf12a61a1e614cf899b43L204", "author": "chenrujun", "createdAt": "2020-06-18T04:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2MjM3NQ=="}], "type": "inlineReview"}, {"oid": "1dcac25fc679945b53e2026ee90be7618a5efc69", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1dcac25fc679945b53e2026ee90be7618a5efc69", "message": "Remove main method.", "committedDate": "2020-06-18T05:12:36Z", "type": "commit"}]}