{"pr_number": 18396, "pr_title": "make aad obo autoconfiguration depend on aad.client-id", "pr_createdAt": "2020-12-30T06:16:42Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18396", "timeline": [{"oid": "6a3e97a73177bf0e6923c654072cb13579c7a6a4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a3e97a73177bf0e6923c654072cb13579c7a6a4", "message": "make aad obo autoconfiguration depend on aad.client-id", "committedDate": "2020-12-30T06:11:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODM0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549948349", "bodyText": "Can we keep the same style? All use AAD_PREFIX, or not use it at all.\nOfcourse, we can do it after release.", "author": "chenrujun", "createdAt": "2020-12-30T06:23:52Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADAuthenticationProperties.java", "diffHunk": "@@ -20,14 +20,17 @@\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n \n+import static com.azure.spring.autoconfigure.aad.AADAuthenticationProperties.AAD_PREFIX;\n+\n /**\n  * Configuration properties for Azure Active Directory Authentication.\n  */\n @Validated\n-@ConfigurationProperties(\"azure.activedirectory\")\n+@ConfigurationProperties(AAD_PREFIX)", "originalCommit": "6a3e97a73177bf0e6923c654072cb13579c7a6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODYxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549948618", "bodyText": "Which one do you prefer?", "author": "saragluna", "createdAt": "2020-12-30T06:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk2ODk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549968974", "bodyText": "I prefer not use it at all. If we want to get some property, we can search by CTRL + SHIFT + F to get them all.", "author": "chenrujun", "createdAt": "2020-12-30T07:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk3MzYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549973623", "bodyText": "okay", "author": "saragluna", "createdAt": "2020-12-30T07:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODQwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549948408", "bodyText": "Do we need test like testWithRequiredPropertiesSet?", "author": "chenrujun", "createdAt": "2020-12-30T06:24:18Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -24,6 +26,17 @@\n             \"azure.activedirectory.client-id=fake-client-id\",\n             \"azure.activedirectory.client-secret=fake-client-secret\");\n \n+    @Test\n+    public void testWithoutAnyPropertiesSet() {", "originalCommit": "6a3e97a73177bf0e6923c654072cb13579c7a6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODcyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549948720", "bodyText": "Good point. I will add that.", "author": "saragluna", "createdAt": "2020-12-30T06:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0ODQwOA=="}], "type": "inlineReview"}, {"oid": "96b318e2d29232918214b23a3b5ef27098a5cf1c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/96b318e2d29232918214b23a3b5ef27098a5cf1c", "message": "add test case", "committedDate": "2020-12-30T06:57:38Z", "type": "commit"}, {"oid": "80ca6fcfbb51036c3b326efc17b4fe418b278514", "url": "https://github.com/Azure/azure-sdk-for-java/commit/80ca6fcfbb51036c3b326efc17b4fe418b278514", "message": "use SPEL to make condition on authorization-clients", "committedDate": "2020-12-30T07:12:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk3NjA2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549976069", "bodyText": "Good point. \ud83d\udc4d", "author": "chenrujun", "createdAt": "2020-12-30T07:16:13Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java", "diffHunk": "@@ -33,6 +35,8 @@\n @ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n @EnableConfigurationProperties({ AADAuthenticationProperties.class })\n @ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+@ConditionalOnProperty(prefix = \"azure.activedirectory\", value = \"client-id\")\n+@ConditionalOnExpression(\"!'${azure.activedirectory.authorization-clients}'.isEmpty()\")", "originalCommit": "80ca6fcfbb51036c3b326efc17b4fe418b278514", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk3NzQyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549977429", "bodyText": "We'd better add more tests:\n\nclient-id configured, but no authorization-clients.\nclient-id not configured, but authorization-clients configured.", "author": "chenrujun", "createdAt": "2020-12-30T07:18:02Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -24,6 +26,30 @@\n             \"azure.activedirectory.client-id=fake-client-id\",\n             \"azure.activedirectory.client-secret=fake-client-secret\");\n \n+    @Test\n+    public void testWithoutAnyPropertiesSet() {\n+        new WebApplicationContextRunner()\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(AADAuthenticationProperties.class);\n+                assertThat(context).doesNotHaveBean(ClientRegistrationRepository.class);\n+                assertThat(context).doesNotHaveBean(OAuth2AuthorizedClientRepository.class);\n+            });\n+    }", "originalCommit": "80ca6fcfbb51036c3b326efc17b4fe418b278514", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk3ODU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549978591", "bodyText": "Yes, I'm just about to add them.", "author": "saragluna", "createdAt": "2020-12-30T07:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk3NzQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk4MDU4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r549980587", "bodyText": "Current tests can not make sure @ConditionalOnExpression(\"!'${azure.activedirectory.authorization-clients}'.isEmpty()\") take effect.", "author": "chenrujun", "createdAt": "2020-12-30T07:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk3NzQyOQ=="}], "type": "inlineReview"}, {"oid": "65a1550e08cc274d8efc04fccd440e2d853ec545", "url": "https://github.com/Azure/azure-sdk-for-java/commit/65a1550e08cc274d8efc04fccd440e2d853ec545", "message": "remove wrong SpEl", "committedDate": "2020-12-30T07:56:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxMDU2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r550010565", "bodyText": "doesNotHaveBean should use bean name.  AADOAuth2OboAuthorizedClientRepository is not a bean name.\nMy suggestion is to use\ndoesNotHaveBean(Class<?> type) {\n\ninstead.", "author": "chenrujun", "createdAt": "2020-12-30T08:02:54Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -24,24 +26,43 @@\n             \"azure.activedirectory.client-id=fake-client-id\",\n             \"azure.activedirectory.client-secret=fake-client-secret\");\n \n+    @Test\n+    public void testWithoutAnyPropertiesSet() {\n+        new WebApplicationContextRunner()\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(AADAuthenticationProperties.class);\n+                assertThat(context).doesNotHaveBean(ClientRegistrationRepository.class);\n+                assertThat(context).doesNotHaveBean(OAuth2AuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testWithRequiredPropertiesSet() {\n+        new WebApplicationContextRunner()\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(\"azure.activedirectory.client-id=fake-client-id\")\n+            .run(context -> {\n+                assertThat(context).hasSingleBean(AADAuthenticationProperties.class);\n+                assertThat(context).hasSingleBean(ClientRegistrationRepository.class);\n+                assertThat(context).hasSingleBean(OAuth2AuthorizedClientRepository.class);\n+            });\n+    }\n+\n     @Test\n     public void testNotExistBearerTokenAuthenticationToken() {\n         this.contextRunner\n             .withUserConfiguration(AADResourceServerOboConfiguration.class)\n             .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n-            .run(context -> {\n-                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n-            });\n+            .run(context -> assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\"));", "originalCommit": "65a1550e08cc274d8efc04fccd440e2d853ec545", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxMDY5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18396#discussion_r550010698", "bodyText": "Same here.", "author": "chenrujun", "createdAt": "2020-12-30T08:03:03Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -24,24 +26,43 @@\n             \"azure.activedirectory.client-id=fake-client-id\",\n             \"azure.activedirectory.client-secret=fake-client-secret\");\n \n+    @Test\n+    public void testWithoutAnyPropertiesSet() {\n+        new WebApplicationContextRunner()\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(AADAuthenticationProperties.class);\n+                assertThat(context).doesNotHaveBean(ClientRegistrationRepository.class);\n+                assertThat(context).doesNotHaveBean(OAuth2AuthorizedClientRepository.class);\n+            });\n+    }\n+\n+    @Test\n+    public void testWithRequiredPropertiesSet() {\n+        new WebApplicationContextRunner()\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(\"azure.activedirectory.client-id=fake-client-id\")\n+            .run(context -> {\n+                assertThat(context).hasSingleBean(AADAuthenticationProperties.class);\n+                assertThat(context).hasSingleBean(ClientRegistrationRepository.class);\n+                assertThat(context).hasSingleBean(OAuth2AuthorizedClientRepository.class);\n+            });\n+    }\n+\n     @Test\n     public void testNotExistBearerTokenAuthenticationToken() {\n         this.contextRunner\n             .withUserConfiguration(AADResourceServerOboConfiguration.class)\n             .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n-            .run(context -> {\n-                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n-            });\n+            .run(context -> assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\"));\n     }\n \n     @Test\n     public void testNotExistOAuth2LoginAuthenticationFilter() {\n         this.contextRunner\n             .withUserConfiguration(AADResourceServerOboConfiguration.class)\n             .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n-            .run(context -> {\n-                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n-            });\n+            .run(context -> assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\"));", "originalCommit": "65a1550e08cc274d8efc04fccd440e2d853ec545", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da2b8f367821d8354d1a4f9ea8ca52a72c2767b2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/da2b8f367821d8354d1a4f9ea8ca52a72c2767b2", "message": "refactor doesNotHaveBean", "committedDate": "2020-12-30T08:31:14Z", "type": "commit"}]}