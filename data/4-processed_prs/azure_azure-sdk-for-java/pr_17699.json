{"pr_number": 17699, "pr_title": "Eagerly Read Response Body When it will be Deserialized", "pr_createdAt": "2020-11-19T23:19:46Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17699", "timeline": [{"oid": "a7f8e77aa92920128f1a31ca94b296e8c382f132", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a7f8e77aa92920128f1a31ca94b296e8c382f132", "message": "Update HttpClient to eagerly read response when body will be deserialized to a POJO", "committedDate": "2020-11-19T23:14:28Z", "type": "commit"}, {"oid": "40a18cf3bf258659a0996522377ebc0dd2981325", "url": "https://github.com/Azure/azure-sdk-for-java/commit/40a18cf3bf258659a0996522377ebc0dd2981325", "message": "Update OkHttp and JDK HttpClients to support eagerly reading response body", "committedDate": "2020-11-20T18:46:48Z", "type": "commit"}, {"oid": "c960d28cd89e90be7bed022a6e14b8bfa3255543", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c960d28cd89e90be7bed022a6e14b8bfa3255543", "message": "Merge branch 'master' into AzHttp_EagerlyReadEnitreBodyForPOJOs", "committedDate": "2020-11-23T22:29:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0OTM5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529049393", "bodyText": "This seems like an unfortunate perf regression. Why wouldn't the value be stored as a Boolean in the Context?", "author": "JonathanGiles", "createdAt": "2020-11-23T22:56:06Z", "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -52,9 +52,30 @@\n \n     @Override\n     public Mono<HttpResponse> send(HttpRequest request) {\n+        return send(request, Context.NONE);\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request, Context context) {\n+        boolean eagerlyReadResponse = context.getData(\"eagerly-read-response\")\n+            .map(data -> Boolean.parseBoolean(data.toString()))\n+            .orElse(false);", "originalCommit": "40a18cf3bf258659a0996522377ebc0dd2981325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MzAyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529063021", "bodyText": "Updated", "author": "alzimmermsft", "createdAt": "2020-11-23T23:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA0OTM5Mw=="}], "type": "inlineReview"}, {"oid": "a13d692702eeec865a9c70260bf127bfd6945a62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a13d692702eeec865a9c70260bf127bfd6945a62", "message": "Remove boolean parsing and use casting instead", "committedDate": "2020-11-23T23:28:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4Njk0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529786946", "bodyText": "It would be good to add javadoc even though it's not a public class.", "author": "srnagar", "createdAt": "2020-11-24T18:21:41Z", "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/BufferedJdkHttpResponse.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+\n+final class BufferedJdkHttpResponse extends JdkHttpResponseBase {", "originalCommit": "a13d692702eeec865a9c70260bf127bfd6945a62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MTQ5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529791495", "bodyText": "Can the user also control this behavior or is this intended for internal use only?", "author": "srnagar", "createdAt": "2020-11-24T18:29:13Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java", "diffHunk": "@@ -120,7 +122,8 @@ public Object invoke(Object proxy, final Method method, Object[] args) {\n             final SwaggerMethodParser methodParser = getMethodParser(method);\n             final HttpRequest request = createHttpRequest(methodParser, args);\n             Context context = methodParser.setContext(args)\n-                .addData(\"caller-method\", methodParser.getFullyQualifiedMethodName());\n+                .addData(\"caller-method\", methodParser.getFullyQualifiedMethodName())\n+                .addData(\"eagerly-read-response\", isReturnTypeDecodable(methodParser.getReturnType()));", "originalCommit": "a13d692702eeec865a9c70260bf127bfd6945a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMDgxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529810813", "bodyText": "The intent is for this context value being used internally but there is nothing preventing a user from creating a custom HttpPipelinePolicy that sets this context value to something else.", "author": "alzimmermsft", "createdAt": "2020-11-24T19:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNTkzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529825938", "bodyText": "Should we make this key a constant somewhere and qualify it with azure to minimize the chances of users using the same name in their context data (I know it's very very low)? Also, it would be good practice to have all our context data to use azure- prefix to differentiate from user data.", "author": "srnagar", "createdAt": "2020-11-24T19:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5MTQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMTAwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529801008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //", "author": "srnagar", "createdAt": "2020-11-24T18:45:18Z", "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpResponse.java", "diffHunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.okhttp;\n+\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.util.logging.ClientLogger;\n+import okhttp3.Response;\n+import okhttp3.ResponseBody;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * Default HTTP response for OkHttp.\n+ */\n+final class OkHttpResponse extends OkHttpResponseBase {\n+    // using 4K as default buffer size: https://stackoverflow.com/a/237495/1473510\n+    private static final int BYTE_BUFFER_CHUNK_SIZE = 4096;\n+\n+    private final ClientLogger logger = new ClientLogger(OkHttpResponse.class);\n+\n+    private final ResponseBody responseBody;\n+\n+    OkHttpResponse(Response response, HttpRequest request) {\n+        super(response, request);\n+        // innerResponse.body() getter will not return null for server returned responses.\n+        // It can be null:\n+        // [a]. if response is built manually with null body (e.g for mocking)\n+        // [b]. for the cases described here\n+        // [ref](https://square.github.io/okhttp/4.x/okhttp/okhttp3/-response/body/).\n+        //", "originalCommit": "a13d692702eeec865a9c70260bf127bfd6945a62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNTY3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529805679", "bodyText": "Why do we need to duplicate? The underlying byte array is still shared.", "author": "srnagar", "createdAt": "2020-11-24T18:53:18Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/BufferedHttpResponse.java", "diffHunk": "@@ -31,7 +31,8 @@ public BufferedHttpResponse(HttpResponse innerHttpResponse) {\n         this.cachedBody = FluxUtil.collectBytesInByteBufferStream(innerHttpResponse.getBody())\n             .map(ByteBuffer::wrap)\n             .flux()\n-            .cache();\n+            .cache()\n+            .map(ByteBuffer::duplicate);", "originalCommit": "a13d692702eeec865a9c70260bf127bfd6945a62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMTkyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17699#discussion_r529811922", "bodyText": "Given the intent of this class is to be a buffered HttpResponse if we don't duplicate the ByteBuffers returned then it will only be able to be read once as the position in the ByteBuffer will be equal to the limit. Duplicating the ByteBuffer simply creates another view over the underlying byte array allowing for this to be consumed multiple times without concern.", "author": "alzimmermsft", "createdAt": "2020-11-24T19:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNTY3OQ=="}], "type": "inlineReview"}, {"oid": "b0395605f1bd7d17281b63e1a90ff37ad5a95bbc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0395605f1bd7d17281b63e1a90ff37ad5a95bbc", "message": "Added missing Javadocs, new constant key for eagerly reading responses, and CHANGELOG entries", "committedDate": "2020-11-24T21:17:40Z", "type": "commit"}]}