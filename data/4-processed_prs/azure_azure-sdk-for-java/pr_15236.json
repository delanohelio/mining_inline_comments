{"pr_number": 15236, "pr_title": "Update README and add Samples README file", "pr_createdAt": "2020-09-15T23:58:45Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15236", "timeline": [{"oid": "cf2d7a60b3ce3a08239550ee581636f302520917", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf2d7a60b3ce3a08239550ee581636f302520917", "message": "Update README and add Samples README file", "committedDate": "2020-09-15T23:58:29Z", "type": "commit"}, {"oid": "f6ba63dfa5fbd3e457e4756e437ec5a8a52fb269", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6ba63dfa5fbd3e457e4756e437ec5a8a52fb269", "message": "Fix formatting", "committedDate": "2020-09-16T00:01:27Z", "type": "commit"}, {"oid": "fbf679917e0a926bde546dc8716433eef264fdbe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbf679917e0a926bde546dc8716433eef264fdbe", "message": "Update README.md", "committedDate": "2020-09-16T00:05:04Z", "type": "commit"}, {"oid": "d72b348bda622cae87eb70a2264ccf9b72ffdd50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d72b348bda622cae87eb70a2264ccf9b72ffdd50", "message": "Update README.md", "committedDate": "2020-09-16T00:05:56Z", "type": "commit"}, {"oid": "442cbba74329dac5fb421084965b7a160efab4ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/442cbba74329dac5fb421084965b7a160efab4ca", "message": "Update README.md", "committedDate": "2020-09-16T17:41:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0MDY1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489740659", "bodyText": "getMOdel -> getModel", "author": "barustum", "createdAt": "2020-09-16T20:39:27Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/README.md", "diffHunk": "@@ -40,30 +49,46 @@ You can learn more about Azure Digital Twins by visiting [Azure Digital Twins Do\n \n ## Examples\n \n-You can familiarize yourself with different APIs using [samples for Digital Twins](TODO: Point to sampels once available).\n+You can familiarize yourself with different APIs using [samples for Digital Twins](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples).\n \n ## Source code folder structure\n \n-### /src\n+### /src/main/java/com/azure/digitaltwins/core\n \n-TODO: Describe source and link to the path.\n+- The Digital Twins client builder [`DigitalTwinsClientBuilder`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java)\n+- The Digital Twins public sync and async clients [`DigitalTwinsClient`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java), [`DigitalTwinsAsyncClient`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java)\n+- [`models` package](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models)\n \n ### /src/swagger\n \n A local copy of the swagger file that defines the structure of the REST APIs supported by the Azure Digital Twins service.\n \n To regenerate the code, run the powershell script [generate.ps1](./generate.ps1).\n \n-Any time the client library code is updated, the following scripts need to be run:\n+## Troubleshooting\n \n-TODO: Add extra information here.\n+All service operations will throw ErrorResponseException on failure reported by the service, with helpful error codes and other information.\n \n-## Troubleshooting\n+For example, use the `getMOdel` operation to check if the model exists before creating it.", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NDU3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489744573", "bodyText": "DigitalTwinsCilentbuilder -> DigitalTwinsCilentBuilder", "author": "barustum", "createdAt": "2020-09-16T20:47:21Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NTYwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489745607", "bodyText": "inforamtion -> information", "author": "barustum", "createdAt": "2020-09-16T20:49:23Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NTcwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489745702", "bodyText": "inforamtion -> information", "author": "barustum", "createdAt": "2020-09-16T20:49:34Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.\n+To get information about the REST call you can call the maximal overload and have access to both the response body (ModelData) and the HTTP REST inforamtion.", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NjYzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489746637", "bodyText": "decommision -> decommission", "author": "barustum", "createdAt": "2020-09-16T20:51:28Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.\n+To get information about the REST call you can call the maximal overload and have access to both the response body (ModelData) and the HTTP REST inforamtion.\n+\n+```java\n+Response<ModelData> modelResponse = syncClient.getModelWithResponse(modelId, context);\n+\n+System.out.println(modelResponse.getStatuscode());\n+\n+ModelData modelObject = modelResponse.getValue();\n+```\n+\n+## Create, list, decommission, and delete models\n+\n+### Create models\n+\n+Let's create models using the code below. You need to pass in `List<string>` containing list of json models.\n+Check out sample models [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/Models).\n+\n+Example of using sync client to create models.\n+\n+```java\n+List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+List<ModelData> modelList =  syncClient.createModels(modelsList);\n+\n+for (ModelData model : modelList) {\n+    ConsoleLogger.print(\"Created model: \" + model.getId());\n+}\n+```\n+\n+### List models\n+\n+Using the sync client, `listModels`, all created models are returned as [`PagedIterable<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedIterable.java) while the async API will return a [`PagedFlux<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java).\n+\n+Example of using the async client to list all models:\n+\n+```java\n+final CountDownLatch listModelsLatch = new CountDownLatch(1);\n+\n+asynClient.listModels()\n+    .doOnNext(modelData -> System.out.println(\n+        \"Retrieved model: \" +\n+        modelData.getId() +\n+        \", display name '\" +\n+        modelData.getDisplayName().get(\"en\") +\n+        \"',\" +\n+        \" upload time '\" +\n+        modelData.getUploadTime() +\n+        \"' and decommissioned '\" +\n+        modelData.isDecommissioned() + \"'\"))\n+    .doOnError(throwable -> System.out.println(\"List models error: \" + throwable))\n+    .doOnTerminate(listModelsLatch::countDown)\n+    .subscribe();\n+```\n+\n+Use `getModel` with model's unique identifier to get a specific model.\n+\n+```java\n+asyncClient.createDigitalTwin(twinId, twinContent)\n+    .subscribe(\n+        twin -> System.out.println(\"Created digital twin: \" + twinId + \"\\n\\t Body: \" + twin),\n+        throwable -> System.out.println(\"Could not create digital twin \" + twinId + \" due to \" + throwable)\n+    )\n+```\n+\n+### Decommission models\n+\n+To decommision a model, pass in a model Id for the model you want to decommision.", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzA1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489747057", "bodyText": "retrive -> retrieve", "author": "barustum", "createdAt": "2020-09-16T20:52:21Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.\n+To get information about the REST call you can call the maximal overload and have access to both the response body (ModelData) and the HTTP REST inforamtion.\n+\n+```java\n+Response<ModelData> modelResponse = syncClient.getModelWithResponse(modelId, context);\n+\n+System.out.println(modelResponse.getStatuscode());\n+\n+ModelData modelObject = modelResponse.getValue();\n+```\n+\n+## Create, list, decommission, and delete models\n+\n+### Create models\n+\n+Let's create models using the code below. You need to pass in `List<string>` containing list of json models.\n+Check out sample models [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/Models).\n+\n+Example of using sync client to create models.\n+\n+```java\n+List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+List<ModelData> modelList =  syncClient.createModels(modelsList);\n+\n+for (ModelData model : modelList) {\n+    ConsoleLogger.print(\"Created model: \" + model.getId());\n+}\n+```\n+\n+### List models\n+\n+Using the sync client, `listModels`, all created models are returned as [`PagedIterable<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedIterable.java) while the async API will return a [`PagedFlux<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java).\n+\n+Example of using the async client to list all models:\n+\n+```java\n+final CountDownLatch listModelsLatch = new CountDownLatch(1);\n+\n+asynClient.listModels()\n+    .doOnNext(modelData -> System.out.println(\n+        \"Retrieved model: \" +\n+        modelData.getId() +\n+        \", display name '\" +\n+        modelData.getDisplayName().get(\"en\") +\n+        \"',\" +\n+        \" upload time '\" +\n+        modelData.getUploadTime() +\n+        \"' and decommissioned '\" +\n+        modelData.isDecommissioned() + \"'\"))\n+    .doOnError(throwable -> System.out.println(\"List models error: \" + throwable))\n+    .doOnTerminate(listModelsLatch::countDown)\n+    .subscribe();\n+```\n+\n+Use `getModel` with model's unique identifier to get a specific model.\n+\n+```java\n+asyncClient.createDigitalTwin(twinId, twinContent)\n+    .subscribe(\n+        twin -> System.out.println(\"Created digital twin: \" + twinId + \"\\n\\t Body: \" + twin),\n+        throwable -> System.out.println(\"Could not create digital twin \" + twinId + \" due to \" + throwable)\n+    )\n+```\n+\n+### Decommission models\n+\n+To decommision a model, pass in a model Id for the model you want to decommision.\n+\n+```java\n+client.decommissionModel(modelId);\n+```\n+\n+### Delete models\n+\n+To delete a model, pass in a model Id for the model you want to delete.\n+\n+```java\n+client.deleteModel(modelId);\n+```\n+\n+## Create and delete digital twins\n+\n+### Create digital twins\n+\n+For Creating Twin you will need to provide Id of a digital Twin such as `myTwin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/DigitalTwins).\n+\n+One option is to use the provided class BasicDigitalTwin for serialization and deserialization.\n+\n+```java\n+// Create digital twin with component payload using the BasicDigitalTwin serialization helper\n+\n+BasicDigitalTwin basicTwin = new BasicDigitalTwin()\n+    .setId(basicDigitalTwinId)\n+    .setMetadata(\n+        new DigitalTwinMetadata()\n+            .setModelId(modelId)\n+    )\n+    .addCustomProperty(\"Prop1\", \"Value1\")\n+    .addCustomProperty(\"Prop2\", 987)\n+    .addCustomProperty(\n+        \"Component1\",\n+        new ModelProperties()\n+            .setCustomProperties(\"ComponentProp1\", \"Component value 1\")\n+            .setCustomProperties(\"ComponentProp2\", 123)\n+    );\n+\n+BasicDigitalTwin basicTwinResponse = syncClient.createDigitalTwin(basicDtId, basicTwin, BasicDigitalTwin.class);\n+```\n+\n+Alternatively, you can create your own custom data types to serialize and deserialize your digital twins.\n+By specifying your properties and types directly, it requires less code or knowledge of the type for interaction.\n+\n+You can also retrive the application/json string payload from disk and pass it down to the client directly.", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489747223", "bodyText": "formats", "author": "barustum", "createdAt": "2020-09-16T20:52:40Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.\n+To get information about the REST call you can call the maximal overload and have access to both the response body (ModelData) and the HTTP REST inforamtion.\n+\n+```java\n+Response<ModelData> modelResponse = syncClient.getModelWithResponse(modelId, context);\n+\n+System.out.println(modelResponse.getStatuscode());\n+\n+ModelData modelObject = modelResponse.getValue();\n+```\n+\n+## Create, list, decommission, and delete models\n+\n+### Create models\n+\n+Let's create models using the code below. You need to pass in `List<string>` containing list of json models.\n+Check out sample models [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/Models).\n+\n+Example of using sync client to create models.\n+\n+```java\n+List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+List<ModelData> modelList =  syncClient.createModels(modelsList);\n+\n+for (ModelData model : modelList) {\n+    ConsoleLogger.print(\"Created model: \" + model.getId());\n+}\n+```\n+\n+### List models\n+\n+Using the sync client, `listModels`, all created models are returned as [`PagedIterable<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedIterable.java) while the async API will return a [`PagedFlux<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java).\n+\n+Example of using the async client to list all models:\n+\n+```java\n+final CountDownLatch listModelsLatch = new CountDownLatch(1);\n+\n+asynClient.listModels()\n+    .doOnNext(modelData -> System.out.println(\n+        \"Retrieved model: \" +\n+        modelData.getId() +\n+        \", display name '\" +\n+        modelData.getDisplayName().get(\"en\") +\n+        \"',\" +\n+        \" upload time '\" +\n+        modelData.getUploadTime() +\n+        \"' and decommissioned '\" +\n+        modelData.isDecommissioned() + \"'\"))\n+    .doOnError(throwable -> System.out.println(\"List models error: \" + throwable))\n+    .doOnTerminate(listModelsLatch::countDown)\n+    .subscribe();\n+```\n+\n+Use `getModel` with model's unique identifier to get a specific model.\n+\n+```java\n+asyncClient.createDigitalTwin(twinId, twinContent)\n+    .subscribe(\n+        twin -> System.out.println(\"Created digital twin: \" + twinId + \"\\n\\t Body: \" + twin),\n+        throwable -> System.out.println(\"Could not create digital twin \" + twinId + \" due to \" + throwable)\n+    )\n+```\n+\n+### Decommission models\n+\n+To decommision a model, pass in a model Id for the model you want to decommision.\n+\n+```java\n+client.decommissionModel(modelId);\n+```\n+\n+### Delete models\n+\n+To delete a model, pass in a model Id for the model you want to delete.\n+\n+```java\n+client.deleteModel(modelId);\n+```\n+\n+## Create and delete digital twins\n+\n+### Create digital twins\n+\n+For Creating Twin you will need to provide Id of a digital Twin such as `myTwin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/DigitalTwins).\n+\n+One option is to use the provided class BasicDigitalTwin for serialization and deserialization.\n+\n+```java\n+// Create digital twin with component payload using the BasicDigitalTwin serialization helper\n+\n+BasicDigitalTwin basicTwin = new BasicDigitalTwin()\n+    .setId(basicDigitalTwinId)\n+    .setMetadata(\n+        new DigitalTwinMetadata()\n+            .setModelId(modelId)\n+    )\n+    .addCustomProperty(\"Prop1\", \"Value1\")\n+    .addCustomProperty(\"Prop2\", 987)\n+    .addCustomProperty(\n+        \"Component1\",\n+        new ModelProperties()\n+            .setCustomProperties(\"ComponentProp1\", \"Component value 1\")\n+            .setCustomProperties(\"ComponentProp2\", 123)\n+    );\n+\n+BasicDigitalTwin basicTwinResponse = syncClient.createDigitalTwin(basicDtId, basicTwin, BasicDigitalTwin.class);\n+```\n+\n+Alternatively, you can create your own custom data types to serialize and deserialize your digital twins.\n+By specifying your properties and types directly, it requires less code or knowledge of the type for interaction.\n+\n+You can also retrive the application/json string payload from disk and pass it down to the client directly.\n+\n+```java\n+String payload = <Load the file content into memory>;\n+String digitalTwinCreateResponse = syncClient.createDigitalTwin(twinId, payload);\n+```\n+\n+### Get and deserialize a digital twin\n+\n+You can get a digital twin in 2 separate foramts", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzUyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489747526", "bodyText": "deserialzied -> deserialized", "author": "barustum", "createdAt": "2020-09-16T20:53:10Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.\n+To get information about the REST call you can call the maximal overload and have access to both the response body (ModelData) and the HTTP REST inforamtion.\n+\n+```java\n+Response<ModelData> modelResponse = syncClient.getModelWithResponse(modelId, context);\n+\n+System.out.println(modelResponse.getStatuscode());\n+\n+ModelData modelObject = modelResponse.getValue();\n+```\n+\n+## Create, list, decommission, and delete models\n+\n+### Create models\n+\n+Let's create models using the code below. You need to pass in `List<string>` containing list of json models.\n+Check out sample models [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/Models).\n+\n+Example of using sync client to create models.\n+\n+```java\n+List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+List<ModelData> modelList =  syncClient.createModels(modelsList);\n+\n+for (ModelData model : modelList) {\n+    ConsoleLogger.print(\"Created model: \" + model.getId());\n+}\n+```\n+\n+### List models\n+\n+Using the sync client, `listModels`, all created models are returned as [`PagedIterable<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedIterable.java) while the async API will return a [`PagedFlux<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java).\n+\n+Example of using the async client to list all models:\n+\n+```java\n+final CountDownLatch listModelsLatch = new CountDownLatch(1);\n+\n+asynClient.listModels()\n+    .doOnNext(modelData -> System.out.println(\n+        \"Retrieved model: \" +\n+        modelData.getId() +\n+        \", display name '\" +\n+        modelData.getDisplayName().get(\"en\") +\n+        \"',\" +\n+        \" upload time '\" +\n+        modelData.getUploadTime() +\n+        \"' and decommissioned '\" +\n+        modelData.isDecommissioned() + \"'\"))\n+    .doOnError(throwable -> System.out.println(\"List models error: \" + throwable))\n+    .doOnTerminate(listModelsLatch::countDown)\n+    .subscribe();\n+```\n+\n+Use `getModel` with model's unique identifier to get a specific model.\n+\n+```java\n+asyncClient.createDigitalTwin(twinId, twinContent)\n+    .subscribe(\n+        twin -> System.out.println(\"Created digital twin: \" + twinId + \"\\n\\t Body: \" + twin),\n+        throwable -> System.out.println(\"Could not create digital twin \" + twinId + \" due to \" + throwable)\n+    )\n+```\n+\n+### Decommission models\n+\n+To decommision a model, pass in a model Id for the model you want to decommision.\n+\n+```java\n+client.decommissionModel(modelId);\n+```\n+\n+### Delete models\n+\n+To delete a model, pass in a model Id for the model you want to delete.\n+\n+```java\n+client.deleteModel(modelId);\n+```\n+\n+## Create and delete digital twins\n+\n+### Create digital twins\n+\n+For Creating Twin you will need to provide Id of a digital Twin such as `myTwin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/DigitalTwins).\n+\n+One option is to use the provided class BasicDigitalTwin for serialization and deserialization.\n+\n+```java\n+// Create digital twin with component payload using the BasicDigitalTwin serialization helper\n+\n+BasicDigitalTwin basicTwin = new BasicDigitalTwin()\n+    .setId(basicDigitalTwinId)\n+    .setMetadata(\n+        new DigitalTwinMetadata()\n+            .setModelId(modelId)\n+    )\n+    .addCustomProperty(\"Prop1\", \"Value1\")\n+    .addCustomProperty(\"Prop2\", 987)\n+    .addCustomProperty(\n+        \"Component1\",\n+        new ModelProperties()\n+            .setCustomProperties(\"ComponentProp1\", \"Component value 1\")\n+            .setCustomProperties(\"ComponentProp2\", 123)\n+    );\n+\n+BasicDigitalTwin basicTwinResponse = syncClient.createDigitalTwin(basicDtId, basicTwin, BasicDigitalTwin.class);\n+```\n+\n+Alternatively, you can create your own custom data types to serialize and deserialize your digital twins.\n+By specifying your properties and types directly, it requires less code or knowledge of the type for interaction.\n+\n+You can also retrive the application/json string payload from disk and pass it down to the client directly.\n+\n+```java\n+String payload = <Load the file content into memory>;\n+String digitalTwinCreateResponse = syncClient.createDigitalTwin(twinId, payload);\n+```\n+\n+### Get and deserialize a digital twin\n+\n+You can get a digital twin in 2 separate foramts\n+\n+- In a String format by just calling:\n+\n+```java\n+String stringDt = syncClient.getDigitalTwin(twinId);\n+```\n+\n+- Choose what type you would like the twin to be deserialzied as:", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489747727", "bodyText": "lanaguage -> language", "author": "barustum", "createdAt": "2020-09-16T20:53:33Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.\n+To get information about the REST call you can call the maximal overload and have access to both the response body (ModelData) and the HTTP REST inforamtion.\n+\n+```java\n+Response<ModelData> modelResponse = syncClient.getModelWithResponse(modelId, context);\n+\n+System.out.println(modelResponse.getStatuscode());\n+\n+ModelData modelObject = modelResponse.getValue();\n+```\n+\n+## Create, list, decommission, and delete models\n+\n+### Create models\n+\n+Let's create models using the code below. You need to pass in `List<string>` containing list of json models.\n+Check out sample models [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/Models).\n+\n+Example of using sync client to create models.\n+\n+```java\n+List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+List<ModelData> modelList =  syncClient.createModels(modelsList);\n+\n+for (ModelData model : modelList) {\n+    ConsoleLogger.print(\"Created model: \" + model.getId());\n+}\n+```\n+\n+### List models\n+\n+Using the sync client, `listModels`, all created models are returned as [`PagedIterable<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedIterable.java) while the async API will return a [`PagedFlux<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java).\n+\n+Example of using the async client to list all models:\n+\n+```java\n+final CountDownLatch listModelsLatch = new CountDownLatch(1);\n+\n+asynClient.listModels()\n+    .doOnNext(modelData -> System.out.println(\n+        \"Retrieved model: \" +\n+        modelData.getId() +\n+        \", display name '\" +\n+        modelData.getDisplayName().get(\"en\") +\n+        \"',\" +\n+        \" upload time '\" +\n+        modelData.getUploadTime() +\n+        \"' and decommissioned '\" +\n+        modelData.isDecommissioned() + \"'\"))\n+    .doOnError(throwable -> System.out.println(\"List models error: \" + throwable))\n+    .doOnTerminate(listModelsLatch::countDown)\n+    .subscribe();\n+```\n+\n+Use `getModel` with model's unique identifier to get a specific model.\n+\n+```java\n+asyncClient.createDigitalTwin(twinId, twinContent)\n+    .subscribe(\n+        twin -> System.out.println(\"Created digital twin: \" + twinId + \"\\n\\t Body: \" + twin),\n+        throwable -> System.out.println(\"Could not create digital twin \" + twinId + \" due to \" + throwable)\n+    )\n+```\n+\n+### Decommission models\n+\n+To decommision a model, pass in a model Id for the model you want to decommision.\n+\n+```java\n+client.decommissionModel(modelId);\n+```\n+\n+### Delete models\n+\n+To delete a model, pass in a model Id for the model you want to delete.\n+\n+```java\n+client.deleteModel(modelId);\n+```\n+\n+## Create and delete digital twins\n+\n+### Create digital twins\n+\n+For Creating Twin you will need to provide Id of a digital Twin such as `myTwin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/DigitalTwins).\n+\n+One option is to use the provided class BasicDigitalTwin for serialization and deserialization.\n+\n+```java\n+// Create digital twin with component payload using the BasicDigitalTwin serialization helper\n+\n+BasicDigitalTwin basicTwin = new BasicDigitalTwin()\n+    .setId(basicDigitalTwinId)\n+    .setMetadata(\n+        new DigitalTwinMetadata()\n+            .setModelId(modelId)\n+    )\n+    .addCustomProperty(\"Prop1\", \"Value1\")\n+    .addCustomProperty(\"Prop2\", 987)\n+    .addCustomProperty(\n+        \"Component1\",\n+        new ModelProperties()\n+            .setCustomProperties(\"ComponentProp1\", \"Component value 1\")\n+            .setCustomProperties(\"ComponentProp2\", 123)\n+    );\n+\n+BasicDigitalTwin basicTwinResponse = syncClient.createDigitalTwin(basicDtId, basicTwin, BasicDigitalTwin.class);\n+```\n+\n+Alternatively, you can create your own custom data types to serialize and deserialize your digital twins.\n+By specifying your properties and types directly, it requires less code or knowledge of the type for interaction.\n+\n+You can also retrive the application/json string payload from disk and pass it down to the client directly.\n+\n+```java\n+String payload = <Load the file content into memory>;\n+String digitalTwinCreateResponse = syncClient.createDigitalTwin(twinId, payload);\n+```\n+\n+### Get and deserialize a digital twin\n+\n+You can get a digital twin in 2 separate foramts\n+\n+- In a String format by just calling:\n+\n+```java\n+String stringDt = syncClient.getDigitalTwin(twinId);\n+```\n+\n+- Choose what type you would like the twin to be deserialzied as:\n+\n+```java\n+BasicDigitalTwin basicDt = syncClient.getDigitalTwin(twinId, BasicDigitalTwin.class);\n+```\n+\n+### Query digital twins\n+\n+Query the Azure Digital Twins instance for digital twins using the [Azure Digital Twins Query Store lanaguage](https://review.docs.microsoft.com/en-us/azure/digital-twins-v2/concepts-query-language?branch=pr-en-us-114648). Query calls support paging. Here's an example of how to query for digital twins and how to iterate over the results.", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0OTgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15236#discussion_r489749819", "bodyText": "Id of a relationship", "author": "barustum", "createdAt": "2020-09-16T20:57:40Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/README.md", "diffHunk": "@@ -0,0 +1,454 @@\n+# Introduction\n+\n+Azure Digital Twins is a developer platform for next-generation IoT solutions that lets you create, run, and manage digital representations of your business environment, securely and efficiently in the cloud. With Azure Digital Twins, creating live operational state representations is quick and cost-effective, and digital representations stay current with real-time data from IoT and other data sources. If you are new to Azure Digital Twins and would like to learn more about the platform, please make sure you check out the Azure Digital Twins [official documentation page](https://docs.microsoft.com/azure/digital-twins/overview).\n+\n+For an introduction on how to program against the Azure Digital Twins service, visit the [coding tutorial page](https://docs.microsoft.com/en-us/azure/digital-twins/tutorial-code) for an easy step-by-step guide. Visit [this tutorial](https://docs.microsoft.com/azure/digital-twins/tutorial-command-line-app) to learn how to interact with an Azure Digital Twin instance using a command-line client application. Finally, for a quick guide on how to build an end-to-end Azure Digital Twins solution that is driven by live data from your environment, make sure you check out [this helpful guide](https://docs.microsoft.com/azure/digital-twins/tutorial-end-to-end).\n+\n+The guides mentioned above can help you get started with key elements of Azure Digital Twins, such as creating Azure Digital Twins instances, models, twin graphs, etc. Use this samples guide below to familiarize yourself with the various APIs that help you program against Azure Digital Twins.\n+\n+# Digital Twins Samples\n+\n+You can explore the digital twins APIs (using the client library) using the samples project.\n+\n+The samples project demonstrates the following:\n+\n+- Instantiate the client\n+- Create, get, and decommission models\n+- Create, query, and delete a digital twin\n+- Get and update components for a digital twin\n+- Create, get, and delete relationships between digital twins\n+- Create, get, and delete event routes for digital twin\n+- Publish telemetry messages to a digital twin and digital twin component\n+\n+## sync vs async clients\n+\n+Azure DigitalTwins SDK for java has two sets of APIs available for every operation, sync APIs and async APIs.\n+\n+You can use `DigitalTwinsClientbuilder` to build either a sync client: `buildClient()` or an async client: `buildAsyncClient()`.\n+\n+While using the sync client, the running thread will be blocked by the SDK for the duration of the HTTP request/response.\n+The async client is implemented using [Reactor](https://projectreactor.io/docs/core/release/reference/). The rest of this document assumes the reader has basic understanding of Reactor and how to interact with async API response types.\n+\n+## Creating the digital twins client\n+\n+To create a new digital twins client, you need the endpoint to an Azure Digital Twin instance and credentials.\n+In the sample below, you can set `AdtEndpoint`, `TenantId`, `ClientId`, and `ClientSecret` as command-line arguments.\n+The client requires an instance of [TokenCredential](https://docs.microsoft.com/en-us/java/api/com.azure.core.credential.tokencredential?view=azure-java-stable).\n+In this samples, we illustrate how to use one derived class: ClientSecretCredential.\n+\n+> Note: In order to access the data plane for the Digital Twins service, the entity must be given permissions.\n+> To do this, use the Azure CLI command: `az dt rbac assign-role --assignee '<user-email | application-id>' --role owner -n '<your-digital-twins-instance>'`\n+\n+### Building the sync client\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildClient();\n+```\n+\n+### Building the async client\n+\n+You can use the same client builder and build the async client:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .buildAsyncClient();\n+```\n+\n+Also, if you need to override pipeline behavior, such as provide your own HttpClient instance, you can do that via the other setters in the DigitalTwinsClientBuilder instance.\n+\n+For example if you would like to use your own instance of `HttpClient`:\n+\n+```java\n+client = new DigitalTwinsClientBuilder()\n+    .credential(\n+        new ClientSecretCredentialBuilder()\n+            .tenantId(<your-tenantId>)\n+            .clientId(<your-clientId>)\n+            .clientSecret(<your-clientSecret>)\n+            .build()\n+    )\n+    .endpoint(<your-AdtEndpoint>)\n+    .httpClient(<your-http-client>)\n+    .buildAsyncClient();\n+```\n+\n+It provides an opportunity to override default behavior including:\n+\n+- Specifying API version\n+- Overriding [HttpPipeline](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/HttpPipeline.java).\n+- Enabling [HttpLogOptions](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java).\n+- Controlling [retry strategy](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/RetryPolicy.java).\n+\n+## Working with Response types\n+\n+Both sync and async clients have maximal overloads for getting the Http response along with the return type. These APIs have a `withResponse` suffix.\n+\n+For example you can get a model by calling:\n+\n+```java\n+ModelData model = syncClient.getModel(modelId);\n+```\n+\n+This will only return the Model payload. The API's response will not contain any REST inforamtion.\n+To get information about the REST call you can call the maximal overload and have access to both the response body (ModelData) and the HTTP REST inforamtion.\n+\n+```java\n+Response<ModelData> modelResponse = syncClient.getModelWithResponse(modelId, context);\n+\n+System.out.println(modelResponse.getStatuscode());\n+\n+ModelData modelObject = modelResponse.getValue();\n+```\n+\n+## Create, list, decommission, and delete models\n+\n+### Create models\n+\n+Let's create models using the code below. You need to pass in `List<string>` containing list of json models.\n+Check out sample models [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/Models).\n+\n+Example of using sync client to create models.\n+\n+```java\n+List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+List<ModelData> modelList =  syncClient.createModels(modelsList);\n+\n+for (ModelData model : modelList) {\n+    ConsoleLogger.print(\"Created model: \" + model.getId());\n+}\n+```\n+\n+### List models\n+\n+Using the sync client, `listModels`, all created models are returned as [`PagedIterable<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedIterable.java) while the async API will return a [`PagedFlux<ModelData>`](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/http/rest/PagedFlux.java).\n+\n+Example of using the async client to list all models:\n+\n+```java\n+final CountDownLatch listModelsLatch = new CountDownLatch(1);\n+\n+asynClient.listModels()\n+    .doOnNext(modelData -> System.out.println(\n+        \"Retrieved model: \" +\n+        modelData.getId() +\n+        \", display name '\" +\n+        modelData.getDisplayName().get(\"en\") +\n+        \"',\" +\n+        \" upload time '\" +\n+        modelData.getUploadTime() +\n+        \"' and decommissioned '\" +\n+        modelData.isDecommissioned() + \"'\"))\n+    .doOnError(throwable -> System.out.println(\"List models error: \" + throwable))\n+    .doOnTerminate(listModelsLatch::countDown)\n+    .subscribe();\n+```\n+\n+Use `getModel` with model's unique identifier to get a specific model.\n+\n+```java\n+asyncClient.createDigitalTwin(twinId, twinContent)\n+    .subscribe(\n+        twin -> System.out.println(\"Created digital twin: \" + twinId + \"\\n\\t Body: \" + twin),\n+        throwable -> System.out.println(\"Could not create digital twin \" + twinId + \" due to \" + throwable)\n+    )\n+```\n+\n+### Decommission models\n+\n+To decommision a model, pass in a model Id for the model you want to decommision.\n+\n+```java\n+client.decommissionModel(modelId);\n+```\n+\n+### Delete models\n+\n+To delete a model, pass in a model Id for the model you want to delete.\n+\n+```java\n+client.deleteModel(modelId);\n+```\n+\n+## Create and delete digital twins\n+\n+### Create digital twins\n+\n+For Creating Twin you will need to provide Id of a digital Twin such as `myTwin` and the application/json digital twin based on the model created earlier. You can look at sample application/json [here](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/DigitalTwins).\n+\n+One option is to use the provided class BasicDigitalTwin for serialization and deserialization.\n+\n+```java\n+// Create digital twin with component payload using the BasicDigitalTwin serialization helper\n+\n+BasicDigitalTwin basicTwin = new BasicDigitalTwin()\n+    .setId(basicDigitalTwinId)\n+    .setMetadata(\n+        new DigitalTwinMetadata()\n+            .setModelId(modelId)\n+    )\n+    .addCustomProperty(\"Prop1\", \"Value1\")\n+    .addCustomProperty(\"Prop2\", 987)\n+    .addCustomProperty(\n+        \"Component1\",\n+        new ModelProperties()\n+            .setCustomProperties(\"ComponentProp1\", \"Component value 1\")\n+            .setCustomProperties(\"ComponentProp2\", 123)\n+    );\n+\n+BasicDigitalTwin basicTwinResponse = syncClient.createDigitalTwin(basicDtId, basicTwin, BasicDigitalTwin.class);\n+```\n+\n+Alternatively, you can create your own custom data types to serialize and deserialize your digital twins.\n+By specifying your properties and types directly, it requires less code or knowledge of the type for interaction.\n+\n+You can also retrive the application/json string payload from disk and pass it down to the client directly.\n+\n+```java\n+String payload = <Load the file content into memory>;\n+String digitalTwinCreateResponse = syncClient.createDigitalTwin(twinId, payload);\n+```\n+\n+### Get and deserialize a digital twin\n+\n+You can get a digital twin in 2 separate foramts\n+\n+- In a String format by just calling:\n+\n+```java\n+String stringDt = syncClient.getDigitalTwin(twinId);\n+```\n+\n+- Choose what type you would like the twin to be deserialzied as:\n+\n+```java\n+BasicDigitalTwin basicDt = syncClient.getDigitalTwin(twinId, BasicDigitalTwin.class);\n+```\n+\n+### Query digital twins\n+\n+Query the Azure Digital Twins instance for digital twins using the [Azure Digital Twins Query Store lanaguage](https://review.docs.microsoft.com/en-us/azure/digital-twins-v2/concepts-query-language?branch=pr-en-us-114648). Query calls support paging. Here's an example of how to query for digital twins and how to iterate over the results.\n+\n+```java\n+// This code snippet demonstrates the simplest way to iterate over the digital twin results, where paging\n+// happens under the covers.\n+\n+// You can either get a String representation of your query response\n+PagedIterable<String> pageableResponse = syncClient.query(\"SELECT * FROM digitaltwins\");\n+\n+// Iterate over the twin instances in the pageable response.\n+foreach (String response in pageableResponse)\n+{\n+    System.out.println(response);\n+}\n+\n+// Or you can use the generic API to get a specific type back.\n+PagedIterable<BasicDigitalTwin> deserializedResponse = syncClient.query(\"SELECT * FROM digitaltwins\", BasicDigitalTwin.class)\n+\n+for(BasicDigitalTwin digitalTwin : deserializedResponse){\n+    System.out.println(\"Retrieved digital twin with Id: \" + digitalTwin.getId());\n+}\n+```\n+\n+### Delete digital twins\n+\n+Delete a digital twin simply by providing Id of a digital twin as below.\n+\n+```java\n+syncClient.deleteDigitalTwin(digitalTwinId);\n+```\n+\n+## Get and update digital twin components\n+\n+### Update digital twin components\n+\n+To update a component or in other words to replace, remove and/or add a component property or subproperty within Digital Twin, you would need Id of a digital twin, component name and application/json-patch+json operations to be performed on the specified digital twin's component. Here is the sample code on how to do it.\n+\n+```C# Snippet:DigitalTwinsSampleUpdateComponent\n+// Update Component1 by replacing the property ComponentProp1 value,\n+// using the UpdateOperationUtility to build the payload.\n+UpdateOperationUtility updateOperationUtility = new UpdateOperationUtility();\n+\n+updateOperationUtility.appendReplaceOperation(\"/ComponentProp1\", \"Some new Value\");\n+\n+client.updateComponent(basicDigitalTwinId, \"Component1\", updateOperationUtility.getUpdateOperations());\n+```\n+\n+### Get digital twin components\n+\n+Get a component by providing name of a component and Id of digital twin to which it belongs.\n+\n+```java\n+String getComponentResponse = client.getComponent(digitalTwinId, \"Component1\");\n+```\n+\n+## Create, get,  list and delete digital twin relationships\n+\n+### Create digital twin relationships\n+\n+`createRelationship` creates a relationship on a digital twin provided with Id of a digital twin, name of relationship such as \"contains\", Id of an relationship such as \"FloorContainsRoom\" and an application/json relationship to be created. Must contain property with key \"$targetId\" to specify the target of the relationship. Sample payloads for relationships can be found [here](https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/digitaltwins/azure-digitaltwins-core/src/samples/resources/DTDL/Relationships/HospitalRelationships.json).", "originalCommit": "442cbba74329dac5fb421084965b7a160efab4ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2828cb64f48ea58c8bede5e38e53685e4b217872", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2828cb64f48ea58c8bede5e38e53685e4b217872", "message": "Fix all typos", "committedDate": "2020-09-16T21:31:33Z", "type": "commit"}, {"oid": "9ec5bf2eb5c656b15687d177d1b5be77fc2ccc6c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ec5bf2eb5c656b15687d177d1b5be77fc2ccc6c", "message": "Update README.md", "committedDate": "2020-09-16T21:32:10Z", "type": "commit"}]}