{"pr_number": 9654, "pr_title": "Adding ScoringParameter class", "pr_createdAt": "2020-03-27T23:50:14Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9654", "timeline": [{"oid": "c628fa5400eb5ec3ce36be08a9cf2beea261986f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c628fa5400eb5ec3ce36be08a9cf2beea261986f", "message": "Adding ScoringParameter clas", "committedDate": "2020-03-27T23:49:33Z", "type": "commit"}, {"oid": "859fe50f5493541359f79a67d240f2916731af78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/859fe50f5493541359f79a67d240f2916731af78", "message": "Minor fix", "committedDate": "2020-03-28T01:00:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwODg2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400308869", "bodyText": "Could this or toLonLatStrings be changed so the NullPointerException thrown from either of these methods instead of the other constructor when value is null.", "author": "alzimmermsft", "createdAt": "2020-03-30T16:01:32Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/ScoringParameter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a parameter value to be used in scoring functions (for example, referencePointParameter).\n+ */\n+public final class ScoringParameter {\n+    private final ClientLogger logger = new ClientLogger(ScoringParameter.class);\n+    private final String name;\n+    private final List<String> values;\n+\n+    private static final String SEPARATOR = \"-\";\n+    private static final String COMMA = \",\";\n+    private static final String SINGLE_QUOTE = \"'\";\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and string values.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param values Values of the scoring parameter.\n+     * @throws NullPointerException if {@code name} or {@code values} is null.\n+     */\n+    @JsonCreator\n+    public ScoringParameter(@JsonProperty(value = \"name\") String name,\n+        @JsonProperty(value = \"values\") List<String> values) {\n+        Objects.requireNonNull(name);\n+        Objects.requireNonNull(values);\n+        this.name = name;\n+        this.values = new ArrayList<>();\n+        this.values.addAll(values);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and GeographyPoint value.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param value Value of the scoring parameter.\n+     */\n+    public ScoringParameter(String name, GeoPoint value) {\n+        this(name, toLonLatStrings(value));", "originalCommit": "859fe50f5493541359f79a67d240f2916731af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTc4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400381780", "bodyText": "Put the null checking here.", "author": "sima-zhu", "createdAt": "2020-03-30T17:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwODg2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNTE0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400405148", "bodyText": "Put null checking in method at the first place.", "author": "sima-zhu", "createdAt": "2020-03-30T18:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwODg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwOTY1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400309658", "bodyText": "nit: Could this be renamed dash to more closely follow the - character's name.", "author": "alzimmermsft", "createdAt": "2020-03-30T16:02:34Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/ScoringParameter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a parameter value to be used in scoring functions (for example, referencePointParameter).\n+ */\n+public final class ScoringParameter {\n+    private final ClientLogger logger = new ClientLogger(ScoringParameter.class);\n+    private final String name;\n+    private final List<String> values;\n+\n+    private static final String SEPARATOR = \"-\";", "originalCommit": "859fe50f5493541359f79a67d240f2916731af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NDkzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400374939", "bodyText": "Renamed to DASH", "author": "sima-zhu", "createdAt": "2020-03-30T17:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwOTY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMTQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400311486", "bodyText": "Should make sure the constructor and this method follow the same pattern around ensuring the internal values list isn't mutable. Right now the constructor will clone the list, effectively a deep clone based on how Strings work, ensuring it is immutable if the original list changes but this will return a reference to the internal list that could be mutated.", "author": "alzimmermsft", "createdAt": "2020-03-30T16:04:59Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/ScoringParameter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a parameter value to be used in scoring functions (for example, referencePointParameter).\n+ */\n+public final class ScoringParameter {\n+    private final ClientLogger logger = new ClientLogger(ScoringParameter.class);\n+    private final String name;\n+    private final List<String> values;\n+\n+    private static final String SEPARATOR = \"-\";\n+    private static final String COMMA = \",\";\n+    private static final String SINGLE_QUOTE = \"'\";\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and string values.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param values Values of the scoring parameter.\n+     * @throws NullPointerException if {@code name} or {@code values} is null.\n+     */\n+    @JsonCreator\n+    public ScoringParameter(@JsonProperty(value = \"name\") String name,\n+        @JsonProperty(value = \"values\") List<String> values) {\n+        Objects.requireNonNull(name);\n+        Objects.requireNonNull(values);\n+        this.name = name;\n+        this.values = new ArrayList<>();\n+        this.values.addAll(values);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and GeographyPoint value.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param value Value of the scoring parameter.\n+     */\n+    public ScoringParameter(String name, GeoPoint value) {\n+        this(name, toLonLatStrings(value));\n+    }\n+\n+    /**\n+     * Gets the name of the scoring parameter.\n+     *\n+     * @return The name of scoring parameter.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the values of the scoring parameter.\n+     *\n+     * @return The values of scoring parameter.\n+     */\n+    public List<String> getValues() {\n+        return values;", "originalCommit": "859fe50f5493541359f79a67d240f2916731af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NDYzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400384632", "bodyText": "Good point. Will deep clone the list.", "author": "sima-zhu", "createdAt": "2020-03-30T17:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMTQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMjk0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400312941", "bodyText": "Could you add some tests which target this class specifically without call to the service.", "author": "alzimmermsft", "createdAt": "2020-03-30T16:07:01Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/ScoringParameter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a parameter value to be used in scoring functions (for example, referencePointParameter).\n+ */\n+public final class ScoringParameter {", "originalCommit": "859fe50f5493541359f79a67d240f2916731af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3Nzg3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400377877", "bodyText": "I have added several test cases in SearchSyncTests.\nWill add more for  unit testing ScoringParameter only", "author": "sima-zhu", "createdAt": "2020-03-30T17:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMjk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMzU3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400313570", "bodyText": "Should this just be Objects.requireNonNull, if null is returned here it will eventually lead to a NullPointerException in another, less obvious, location.", "author": "alzimmermsft", "createdAt": "2020-03-30T16:07:56Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/ScoringParameter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a parameter value to be used in scoring functions (for example, referencePointParameter).\n+ */\n+public final class ScoringParameter {\n+    private final ClientLogger logger = new ClientLogger(ScoringParameter.class);\n+    private final String name;\n+    private final List<String> values;\n+\n+    private static final String SEPARATOR = \"-\";\n+    private static final String COMMA = \",\";\n+    private static final String SINGLE_QUOTE = \"'\";\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and string values.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param values Values of the scoring parameter.\n+     * @throws NullPointerException if {@code name} or {@code values} is null.\n+     */\n+    @JsonCreator\n+    public ScoringParameter(@JsonProperty(value = \"name\") String name,\n+        @JsonProperty(value = \"values\") List<String> values) {\n+        Objects.requireNonNull(name);\n+        Objects.requireNonNull(values);\n+        this.name = name;\n+        this.values = new ArrayList<>();\n+        this.values.addAll(values);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and GeographyPoint value.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param value Value of the scoring parameter.\n+     */\n+    public ScoringParameter(String name, GeoPoint value) {\n+        this(name, toLonLatStrings(value));\n+    }\n+\n+    /**\n+     * Gets the name of the scoring parameter.\n+     *\n+     * @return The name of scoring parameter.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the values of the scoring parameter.\n+     *\n+     * @return The values of scoring parameter.\n+     */\n+    public List<String> getValues() {\n+        return values;\n+    }\n+\n+    private static List<String> toLonLatStrings(GeoPoint point) {\n+        if (point == null) {\n+            return null;\n+        }", "originalCommit": "859fe50f5493541359f79a67d240f2916731af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4Nzg4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400387880", "bodyText": "switch to null pointer exception check.", "author": "sima-zhu", "createdAt": "2020-03-30T18:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxMzU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNjA0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400316044", "bodyText": "Why do we need to repeat creating flattenValue? This could be simplified to the following:\nreturn name + SEPARATOR + flattenValue;", "author": "alzimmermsft", "createdAt": "2020-03-30T16:11:30Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/ScoringParameter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a parameter value to be used in scoring functions (for example, referencePointParameter).\n+ */\n+public final class ScoringParameter {\n+    private final ClientLogger logger = new ClientLogger(ScoringParameter.class);\n+    private final String name;\n+    private final List<String> values;\n+\n+    private static final String SEPARATOR = \"-\";\n+    private static final String COMMA = \",\";\n+    private static final String SINGLE_QUOTE = \"'\";\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and string values.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param values Values of the scoring parameter.\n+     * @throws NullPointerException if {@code name} or {@code values} is null.\n+     */\n+    @JsonCreator\n+    public ScoringParameter(@JsonProperty(value = \"name\") String name,\n+        @JsonProperty(value = \"values\") List<String> values) {\n+        Objects.requireNonNull(name);\n+        Objects.requireNonNull(values);\n+        this.name = name;\n+        this.values = new ArrayList<>();\n+        this.values.addAll(values);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and GeographyPoint value.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param value Value of the scoring parameter.\n+     */\n+    public ScoringParameter(String name, GeoPoint value) {\n+        this(name, toLonLatStrings(value));\n+    }\n+\n+    /**\n+     * Gets the name of the scoring parameter.\n+     *\n+     * @return The name of scoring parameter.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the values of the scoring parameter.\n+     *\n+     * @return The values of scoring parameter.\n+     */\n+    public List<String> getValues() {\n+        return values;\n+    }\n+\n+    private static List<String> toLonLatStrings(GeoPoint point) {\n+        if (point == null) {\n+            return null;\n+        }\n+        return Arrays.asList(String.valueOf(point.getLongitude()), String.valueOf(point.getLatitude()));\n+    }\n+\n+    /**\n+     * Covert {@link ScoringParameter} to string.\n+     *\n+     * @return Service accepted string format.\n+     * @throws IllegalArgumentException if all values in the list are null or empty.\n+     */\n+    @Override\n+    @JsonValue\n+    public String toString() {\n+        String flattenValue = values.stream().filter(value -> !CoreUtils.isNullOrEmpty(value))\n+            .map(this::escapeValue).collect(Collectors.joining(COMMA));\n+        if (CoreUtils.isNullOrEmpty(flattenValue)) {\n+            throw logger.logExceptionAsError(\n+                new IllegalArgumentException(\"There must be at least one valid value for scoring parameter values.\"));\n+        }\n+        return name + SEPARATOR + values.stream().filter(value -> !CoreUtils.isNullOrEmpty(value))\n+                .map(this::escapeValue).collect(Collectors.joining(COMMA));", "originalCommit": "859fe50f5493541359f79a67d240f2916731af78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzI2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9654#discussion_r400317269", "bodyText": "This could be made static", "author": "alzimmermsft", "createdAt": "2020-03-30T16:13:18Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/models/ScoringParameter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.models;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents a parameter value to be used in scoring functions (for example, referencePointParameter).\n+ */\n+public final class ScoringParameter {\n+    private final ClientLogger logger = new ClientLogger(ScoringParameter.class);\n+    private final String name;\n+    private final List<String> values;\n+\n+    private static final String SEPARATOR = \"-\";\n+    private static final String COMMA = \",\";\n+    private static final String SINGLE_QUOTE = \"'\";\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and string values.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param values Values of the scoring parameter.\n+     * @throws NullPointerException if {@code name} or {@code values} is null.\n+     */\n+    @JsonCreator\n+    public ScoringParameter(@JsonProperty(value = \"name\") String name,\n+        @JsonProperty(value = \"values\") List<String> values) {\n+        Objects.requireNonNull(name);\n+        Objects.requireNonNull(values);\n+        this.name = name;\n+        this.values = new ArrayList<>();\n+        this.values.addAll(values);\n+    }\n+\n+    /**\n+     * Initializes a new instance of the ScoringParameter class with the given name and GeographyPoint value.\n+     *\n+     * @param name Name of the scoring parameter.\n+     * @param value Value of the scoring parameter.\n+     */\n+    public ScoringParameter(String name, GeoPoint value) {\n+        this(name, toLonLatStrings(value));\n+    }\n+\n+    /**\n+     * Gets the name of the scoring parameter.\n+     *\n+     * @return The name of scoring parameter.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Gets the values of the scoring parameter.\n+     *\n+     * @return The values of scoring parameter.\n+     */\n+    public List<String> getValues() {\n+        return values;\n+    }\n+\n+    private static List<String> toLonLatStrings(GeoPoint point) {\n+        if (point == null) {\n+            return null;\n+        }\n+        return Arrays.asList(String.valueOf(point.getLongitude()), String.valueOf(point.getLatitude()));\n+    }\n+\n+    /**\n+     * Covert {@link ScoringParameter} to string.\n+     *\n+     * @return Service accepted string format.\n+     * @throws IllegalArgumentException if all values in the list are null or empty.\n+     */\n+    @Override\n+    @JsonValue\n+    public String toString() {\n+        String flattenValue = values.stream().filter(value -> !CoreUtils.isNullOrEmpty(value))\n+            .map(this::escapeValue).collect(Collectors.joining(COMMA));\n+        if (CoreUtils.isNullOrEmpty(flattenValue)) {\n+            throw logger.logExceptionAsError(\n+                new IllegalArgumentException(\"There must be at least one valid value for scoring parameter values.\"));\n+        }\n+        return name + SEPARATOR + values.stream().filter(value -> !CoreUtils.isNullOrEmpty(value))\n+                .map(this::escapeValue).collect(Collectors.joining(COMMA));\n+    }\n+\n+    private String escapeValue(String value) {", "originalCommit": "859fe50f5493541359f79a67d240f2916731af78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef08f38f5956ebb3eacf290349015fe12d8f6602", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef08f38f5956ebb3eacf290349015fe12d8f6602", "message": "Added score profile into test data", "committedDate": "2020-03-30T17:36:56Z", "type": "commit"}, {"oid": "b83f32a0653faec30780e73df1f8c8d19924799f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b83f32a0653faec30780e73df1f8c8d19924799f", "message": "Merge branch 'master' into addScoringParameters", "committedDate": "2020-03-30T18:05:54Z", "type": "commit"}, {"oid": "abd3da967e6657f77b6edd6d853e2b1675a22373", "url": "https://github.com/Azure/azure-sdk-for-java/commit/abd3da967e6657f77b6edd6d853e2b1675a22373", "message": "Added junit tests", "committedDate": "2020-03-30T18:28:11Z", "type": "commit"}, {"oid": "8b1b3dc85834c9de6607336125cd8cd6adcdebdc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b1b3dc85834c9de6607336125cd8cd6adcdebdc", "message": "Merge branch 'addScoringParameters' of https://github.com/sima-zhu/azure-sdk-for-java into addScoringParameters", "committedDate": "2020-03-30T18:28:25Z", "type": "commit"}, {"oid": "67f9617c477d9efafbf6b29f723c52549897a50c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/67f9617c477d9efafbf6b29f723c52549897a50c", "message": "Revert unnecessary changes", "committedDate": "2020-03-30T18:59:56Z", "type": "commit"}, {"oid": "e75ae641651ee84a813654f487fdb3ece2dc2375", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e75ae641651ee84a813654f487fdb3ece2dc2375", "message": "Fixed failed live tests", "committedDate": "2020-03-30T21:12:09Z", "type": "commit"}]}