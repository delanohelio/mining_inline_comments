{"pr_number": 7093, "pr_title": "draft to update contributing for updated versioning", "pr_createdAt": "2020-01-03T17:51:19Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7093", "timeline": [{"oid": "88e81f049594c9714e1e80e5d549e788f34f9951", "url": "https://github.com/Azure/azure-sdk-for-java/commit/88e81f049594c9714e1e80e5d549e788f34f9951", "message": "draft to update contributing for updated versioning", "committedDate": "2020-01-03T17:46:55Z", "type": "commit"}, {"oid": "10c564893f8547ba878d7ffb21f7dfd54451a5af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/10c564893f8547ba878d7ffb21f7dfd54451a5af", "message": "update a couple of missed write calls to output errors in red", "committedDate": "2020-01-03T18:19:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDE1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362920150", "bodyText": "The last line,  Typically these changes are additive \u2026. ,  is very long and with many punctuations. Although it is technically accurate  but little bit difficult to understand. Request to break it in smaller sentences for better readability.", "author": "hemanttanwar", "createdAt": "2020-01-03T18:52:58Z", "path": "CONTRIBUTING.md", "diffHunk": "@@ -87,31 +87,31 @@ The dependency-version should be set to the most recent released version and the\n \n `com.azure:azure-identity;1.0.0-preview.4;1.0.0-preview.5`\n \n-Note: In the case of a new or unreleased artifact both versions will be the same.\n+Note: In the case of a new artifact both versions will be the same. In the case of a released artifact, the dependecny version should be the latest released version.\n \n ### Libraries vs External Dependencies\n \n Libraries refer to things that are built and released as part of the Azure SDK. Libraries have a current version and a dependency version.\n \n-External Dependencies refer to dependencies for things that are not built and released as part of the Azure SDK regardless of the source. External Dependencies will only ever have one version.\n+External Dependencies refer to dependencies for things that are not built and released as part of the Azure SDK regardless of the source. External Dependencies will only ever have a dependency version.\n \n-### Current version vs Dependency version\n+### Current version, Dependency version and Unreleased Dependency version\n \n Current version - This is the version we should be using when defining a component in its POM file and also when dependent components are built within the same pipeline. The current version is the version currently in development.\n-Dependency version - This is the version we should be using when a given library is a dependency outside of a particular area. This should be the latest released version of the package.\n+Dependency version - This is the version we should be using when a given library is a dependency outside of a particular area. This should be the latest released version of the package whenever possible.\n+Unreleased Dependency version \u2013 Whenever possible, libraries should be using the latest released version for dependencies but there is the case where active development in one library is going to be needed by another library or libraries that are built in separate pipelines. Typically these changes are additive, not breaking, and the reason for this is that once a library is GA\u2019d, nothing short of breaking changes should ever force the dependency versions across the repo to an unreleased version as this would prevent other libraries, that don\u2019t need this change, from releasing.", "originalCommit": "10c564893f8547ba878d7ffb21f7dfd54451a5af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzNjYxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362936616", "bodyText": "Updated with the second PR. Broke the massive run-on into several smaller sentences.", "author": "JimSuplizio", "createdAt": "2020-01-03T19:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMDE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzEzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362923136", "bodyText": "outside of a given area be downloading    change to outside of a given area would be downloading", "author": "hemanttanwar", "createdAt": "2020-01-03T19:01:52Z", "path": "CONTRIBUTING.md", "diffHunk": "@@ -135,56 +135,31 @@ In README files this ends up being slightly different. Because the version tag i\n     ```\n     [//]: # ({x-version-update-end})\n \n-What if I've got something that, for whatever reason, shoudln't be updated? There's a tag for that.\n-\n-`<!-- {x-version-exempt;<groupId>:<artifactId>;reason for excemption} -->`\n-\n-In theory, absence of an x-version-update tag would do the same thing but the tooling is still being developed and eventually there will be checkin blockers if xml has a version element with no tag.\n-\n ### What does the process look like?\n \n Let's say we've GA'd and I need to tick up the version of azure-storage libraries how would I do it? Guidelines for incrementing versions after release can be found [here](https://github.com/Azure/azure-sdk/blob/master/docs/policies/releases.md#incrementing-after-release).\n \n-1. I'd open up eng\\versioning\\version_client.txt and update the current-versions of the libraries that are built and released as part of the azure storage pipeline. This list can be found in pom.service.xml under the sdk/storage directory. It's worth noting that any module entry starting with \"../\" are external module dependencies and not something that's released as part of the pipeline. Once we GA, these build dependencies for library components outside of a given area should go away and be replaced with downloading the appropriate dependency from Maven like we do for external dependencies.\n+1. I'd open up eng\\versioning\\version_client.txt and update the current-versions of the libraries that are built and released as part of the azure storage pipeline. This list can be found in pom.service.xml under the sdk/storage directory. It's worth noting that any module entry starting with \"../\" are external module dependencies and not something that's released as part of the pipeline. Dependencies for library components outside of a given area be downloading the appropriate dependency from Maven like we do for external dependencies.", "originalCommit": "10c564893f8547ba878d7ffb21f7dfd54451a5af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzNjMxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362936311", "bodyText": "Done. Updated with the latest PR.", "author": "JimSuplizio", "createdAt": "2020-01-03T19:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyMzEzNg=="}], "type": "inlineReview"}, {"oid": "623209b97bbe2d161d22d1a9498d48a8be38e4a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/623209b97bbe2d161d22d1a9498d48a8be38e4a8", "message": "Update for feedback", "committedDate": "2020-01-03T19:02:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNTM1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362925353", "bodyText": "Could we automate this by checking if unreleased_ version is in available in maven -> break the build and it will force developer to remove \"unreleased_\" . May be create a separate ticket for this ?\nMay be I am asking too much. Ignore it if you feel it is unnecessory.", "author": "hemanttanwar", "createdAt": "2020-01-03T19:09:11Z", "path": "CONTRIBUTING.md", "diffHunk": "@@ -135,56 +135,31 @@ In README files this ends up being slightly different. Because the version tag i\n     ```\n     [//]: # ({x-version-update-end})\n \n-What if I've got something that, for whatever reason, shoudln't be updated? There's a tag for that.\n-\n-`<!-- {x-version-exempt;<groupId>:<artifactId>;reason for excemption} -->`\n-\n-In theory, absence of an x-version-update tag would do the same thing but the tooling is still being developed and eventually there will be checkin blockers if xml has a version element with no tag.\n-\n ### What does the process look like?\n \n Let's say we've GA'd and I need to tick up the version of azure-storage libraries how would I do it? Guidelines for incrementing versions after release can be found [here](https://github.com/Azure/azure-sdk/blob/master/docs/policies/releases.md#incrementing-after-release).\n \n-1. I'd open up eng\\versioning\\version_client.txt and update the current-versions of the libraries that are built and released as part of the azure storage pipeline. This list can be found in pom.service.xml under the sdk/storage directory. It's worth noting that any module entry starting with \"../\" are external module dependencies and not something that's released as part of the pipeline. Once we GA, these build dependencies for library components outside of a given area should go away and be replaced with downloading the appropriate dependency from Maven like we do for external dependencies.\n+1. I'd open up eng\\versioning\\version_client.txt and update the current-versions of the libraries that are built and released as part of the azure storage pipeline. This list can be found in pom.service.xml under the sdk/storage directory. It's worth noting that any module entry starting with \"../\" are external module dependencies and not something that's released as part of the pipeline. Dependencies for library components outside of a given area be downloading the appropriate dependency from Maven like we do for external dependencies.\n 2. Execute the update_versions python script from the root of the enlistment\n `python eng/versioning/update_versions.py --ut libary --bt client`\n This will go through the entire source tree and update all of the references in the POM and README files with the updated versions. Git status will show all of the modified files.\n 3. Review and submit a PR with the modified files.\n \n-### Next steps: External dependencies, Management plane and service pipeline changes\n+### Next steps: Management plane\n \n-- External dependencies. Right now there are only version files for client and data (eng\\versioning\\version_\\[client|data\\].txt) which only encompass the built binaries for their respective tracks. External dependencies for both client and data are next on the list which should allow modification of the parent/pom.xml to remove the list of version properties and dependency management sections which brings things one step closer to not having to publish the parent pom.\n - Management plane. Management is in the process of being moved to service pipeline builds. The versioning work needs to wait until that work is finished.\n-- Service pipeline changes. The service pipelines currently have to build not only the libraries that are part of that pipeline but also the Azure SDK libraries that are dependencies. Once we GA and can start targeting the released version of those packages and pulling them from Maven instead of building them. An good example of this would be in sdk/appconfiguration/pom.service.xml where to build azure-data-appconfiguration we end up building azure-core, azure-core-test and azure-core-http-netty along with azure-data-appconfiguration instead of just building azure-data-appconfiguration.\n-\n-### How are versioning and dependencies going to impact development after GA?\n-\n-As mentioned above, in the service pipeline changes, the plan after we GA is to start targeting the released version of the packages and pulling them from Maven. This is going to fundamentally change some aspects of the development process especially when work needs to be done on given library that requires dependency changes in one or more libraries.\n-\n-- **Scenario 1: Making changes to a single library which is not a dependency of any other libraries:** This ends up being the most straightforward scenario and really isn't much different than it is today.\n-  - [ ] Appropriately increase the version\n-  - [ ] Make the code changes\n-  - [ ] Submit the PR\n-  - [ ] Merge the PR\n-  - [ ] Publish the new version\n-\n-- **Scenario 2: Making changes to a library that also requires dependency changes:** Right now things are in a state where dependency changes can be made along with libraries that depend on them because of the project dependencies in the service pom files. Local development isn't going to change that much except when changing the version of a library and its dependency or dependencies means that the service poms are going to have to be built, and installed, in the appropriate order. This is because these new versions of the library dependencies won't yet be released and Maven will need to find these in the local cache. The biggest change to the process is going to be around PRs and publishing. Separate PRs are going to have to be submitted in order, with dependencies being submitted first. This is necessary because the dependencies need to be published in order to allow things that depend on them to continue using the published version. Trying to submit everything in one PR would cause build breaks since the dependency being referenced is a version not yet published. An example of this would be making changes to `com.azure:azure-storage-common` that also required dependency changes to `com.azure:azure-identity`.\n-  Changes are going to have to be made to `com.azure:azure-identity` first.\n-  - [ ] Appropriately increase the version of `com.azure:azure-identity`\n-  - [ ] Make the code changes\n-  - [ ] Build and optionally install locally\n-        This isn't completely necessary other than to install the updated version of the dependency into the local cache on the machine. The alternative to this would be to publish (DevOps or otherwise) and reference that version of the dependency after the release. Either one would allow `com.azure:azure-storage-common` to use the updated version of `com.azure:azure-identity`\n-  - [ ] Submit the PR for the `com.azure:azure-identity`\n-  - [ ] Merge the PR for the `com.azure:azure-identity`\n-  - [ ] Publish the `com.azure:azure-identity` with the updated version.\n-  \n-  Only after the dependency `com.azure:azure-identity` has been published can the PR for `com.azure:azure-storage-common` be created.\n-  - [ ] Appropriately increase the version of `com.azure:azure-storage-common` and the dependency version of `com.azure:azure-identity` in its pom file.\n-  - [ ] Make the code changes, if any\n-  - [ ] Build/Test or whatever\n-  - [ ] Submit the PR for `com.azure:azure-storage-common`\n-  - [ ] Merge the PR for `com.azure:azure-storage-common`\n-  - [ ] Publish the PR for `com.azure:azure-storage-common`\n+\n+### Making changes to an already GA'd library that require other libraries to depend on the unreleased version\n+\n+This is where the `unreleased_` dependency tags come into play. Using the Unreleased Dependency example above, where `com.azure:azure-storage-blob` has a dependency on an unreleased `com.azure:azure-core`:\n+\n+- [ ] Make the additive changes to `com.azure:azure-core`\n+- [ ] In [version_client.txt](./eng/versioning/version_client.txt) add the entry for the unreleased azure core in the unreleased section at the bottom of the file. The entry would look like `unreleased_com.azure:azure-core;<version>`.\n+      Note: The version of the library referenced in the unreleased version tag should match the current version of that library.\n+- [ ] In the pom.xml file for `com.azure:azure-storage-blob`, the dependency tag for `com.azure:azure-core` which was originally `{x-version-update;com.azure:azure-core-test;dependency}` would now become `{x-version-update;unreleased_com.azure:azure-core-test;dependency}`\n+After the unreleased version of `com.azure:azure-core` was released but before `com.azure:azure-storage-blob` has been released.\n+- [ ] In [version_client.txt](./eng/versioning/version_client.txt) the the dependency version of `com.azure:azure-core` would become the released version and the \"unreleased_\" entry, at this time, would be removed.\n+- [ ] In the pom.xml file for `com.azure:azure-storage-blob`, the dependency tag for `com.azure:azure-core` would get changed back to `{x-version-update;com.azure:azure-core-test;dependency}`\n ", "originalCommit": "623209b97bbe2d161d22d1a9498d48a8be38e4a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzEwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362927105", "bodyText": "I think the best we're going to get here is to verify that you're not trying to release something with \"unreleaed_\" dependencies. There's already a work item for that #6184 (it's a two part work item, I've already got the first part completed).", "author": "JimSuplizio", "createdAt": "2020-01-03T19:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNTM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNjE5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362926191", "bodyText": "Could we add line telling user that, it needs to be run in powershell. Also it need certain permission in powershell, I had issues running it yesterday . How to set permission in PS https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-6", "author": "hemanttanwar", "createdAt": "2020-01-03T19:12:03Z", "path": "eng/versioning/pom_file_version_scanner.ps1", "diffHunk": "@@ -444,8 +444,8 @@ Write-Host \"Total run time=$($TotalRunTime)\"\n \n if ($script:FoundError)\n {\n-    Write-Host \"There were errors encountered during execution. Please fix any errors and run the script again.\"\n-    Write-Host \"This script can be run locally from the root of the repo. .\\eng\\pom_file_version_scanner.ps1\"\n+    Write-Error-With-Color \"There were errors encountered during execution. Please fix any errors and run the script again.\"\n+    Write-Error-With-Color \"This script can be run locally from the root of the repo. .\\eng\\pom_file_version_scanner.ps1\"", "originalCommit": "623209b97bbe2d161d22d1a9498d48a8be38e4a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODAyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362928022", "bodyText": "I can add something to the description at the top of the file for local setup. The images doing the building already have the correct permissions in place. I don't think I need to tell them that it needs to be run in powershell considering the extension is .ps1 which is the powershell extension.", "author": "JimSuplizio", "createdAt": "2020-01-03T19:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNjE5MQ=="}], "type": "inlineReview"}, {"oid": "1bf2609b7339655aec0e66489d1a6187fab0accb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1bf2609b7339655aec0e66489d1a6187fab0accb", "message": "Update for feedback, part 2", "committedDate": "2020-01-03T19:42:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzOTQ5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7093#discussion_r362939496", "bodyText": "LGTM", "author": "hemanttanwar", "createdAt": "2020-01-03T19:52:38Z", "path": "eng/versioning/pom_file_version_scanner.ps1", "diffHunk": "@@ -1,6 +1,11 @@\n # Copyright (c) Microsoft Corporation. All rights reserved.\n # Licensed under the MIT License.\n \n+# This script requires Powershell 6 which defaults LocalMachine to Restricted on Windows client machines.\n+# From a Powershell 6 prompt run 'Get-ExecutionPolicy -List' and if the LocalMachine is Restricted or Undefined then\n+# run the following command from an admin Powershell 6 prompt 'Set-ExecutionPolicy -ExecutionPolicy RemoteSigned'. This\n+# will enable running scripts locally in Powershell 6.\n+", "originalCommit": "1bf2609b7339655aec0e66489d1a6187fab0accb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}