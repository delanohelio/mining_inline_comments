{"pr_number": 13244, "pr_title": "Implemented SAS for STG 73", "pr_createdAt": "2020-07-16T17:02:07Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13244", "timeline": [{"oid": "dcda7e9f493b482f1fec847a88a8166d34465f80", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcda7e9f493b482f1fec847a88a8166d34465f80", "message": "Added tag permissions to blob container account", "committedDate": "2020-07-15T19:28:47Z", "type": "commit"}, {"oid": "04f3c3bd9227371bdcc81222bf7fccce32c0816a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/04f3c3bd9227371bdcc81222bf7fccce32c0816a", "message": "Refactored SAS tests", "committedDate": "2020-07-16T00:13:46Z", "type": "commit"}, {"oid": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "message": "Added tests for tags", "committedDate": "2020-07-16T16:56:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNzU4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455937589", "bodyText": "both of these moved from HelperTest", "author": "gapra-msft", "createdAt": "2020-07-16T17:04:23Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobAPITest.groovy", "diffHunk": "@@ -1334,6 +1334,38 @@ class BlobAPITest extends APISpec {\n         bc.createSnapshotWithResponse(null, null, null, null).getStatusCode() == 201\n     }\n \n+    def \"getSnapshot\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNzc3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455937775", "bodyText": "moved from SASTest and HelperTest", "author": "gapra-msft", "createdAt": "2020-07-16T17:04:44Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobServiceSasModelsTest.groovy", "diffHunk": "@@ -0,0 +1,260 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob\n+\n+import com.azure.storage.blob.implementation.util.BlobSasImplUtil\n+import com.azure.storage.blob.models.UserDelegationKey\n+import com.azure.storage.blob.sas.BlobContainerSasPermission\n+import com.azure.storage.blob.sas.BlobSasPermission\n+import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n+import spock.lang.Specification\n+import spock.lang.Unroll\n+\n+import java.time.OffsetDateTime\n+import java.time.ZoneOffset\n+\n+class BlobServiceSasModelsTest extends Specification {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzODAxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455938010", "bodyText": "Moved to HelperTest", "author": "gapra-msft", "createdAt": "2020-07-16T17:05:11Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SASTest.groovy", "diffHunk": "@@ -1,1263 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.blob\n-\n-import com.azure.storage.blob.models.BlobAccessPolicy\n-import com.azure.storage.blob.models.BlobRange\n-import com.azure.storage.blob.models.BlobSignedIdentifier\n-import com.azure.storage.blob.models.BlobStorageException\n-import com.azure.storage.blob.models.UserDelegationKey\n-import com.azure.storage.blob.sas.BlobContainerSasPermission\n-import com.azure.storage.blob.sas.BlobSasPermission\n-import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n-import com.azure.storage.blob.sas.BlobSasServiceVersion\n-import com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\n-import com.azure.storage.common.Utility\n-import com.azure.storage.common.implementation.StorageImplUtils\n-import com.azure.storage.common.sas.AccountSasPermission\n-import com.azure.storage.common.sas.AccountSasResourceType\n-import com.azure.storage.common.sas.AccountSasService\n-import com.azure.storage.common.sas.AccountSasSignatureValues\n-import com.azure.storage.common.sas.SasProtocol\n-import com.azure.storage.common.StorageSharedKeyCredential\n-\n-import com.azure.storage.common.implementation.Constants\n-import com.azure.storage.common.sas.SasIpRange\n-import spock.lang.Ignore\n-import spock.lang.Unroll\n-\n-import java.time.LocalDateTime\n-import java.time.OffsetDateTime\n-import java.time.ZoneOffset\n-\n-class SASTest extends APISpec {\n-\n-    // TODO (gapra) : Cleanup SAS Tests\n-\n-    @Unroll\n-    def \"Blob range\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzODM2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455938363", "bodyText": "Network tests deleted due to duplicate in SasClientTests that use the non-deprecated methods.", "author": "gapra-msft", "createdAt": "2020-07-16T17:05:46Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SASTest.groovy", "diffHunk": "@@ -1,1263 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.blob\n-\n-import com.azure.storage.blob.models.BlobAccessPolicy\n-import com.azure.storage.blob.models.BlobRange\n-import com.azure.storage.blob.models.BlobSignedIdentifier\n-import com.azure.storage.blob.models.BlobStorageException\n-import com.azure.storage.blob.models.UserDelegationKey\n-import com.azure.storage.blob.sas.BlobContainerSasPermission\n-import com.azure.storage.blob.sas.BlobSasPermission\n-import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n-import com.azure.storage.blob.sas.BlobSasServiceVersion\n-import com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\n-import com.azure.storage.common.Utility\n-import com.azure.storage.common.implementation.StorageImplUtils\n-import com.azure.storage.common.sas.AccountSasPermission\n-import com.azure.storage.common.sas.AccountSasResourceType\n-import com.azure.storage.common.sas.AccountSasService\n-import com.azure.storage.common.sas.AccountSasSignatureValues\n-import com.azure.storage.common.sas.SasProtocol\n-import com.azure.storage.common.StorageSharedKeyCredential\n-\n-import com.azure.storage.common.implementation.Constants\n-import com.azure.storage.common.sas.SasIpRange\n-import spock.lang.Ignore\n-import spock.lang.Unroll\n-\n-import java.time.LocalDateTime\n-import java.time.OffsetDateTime\n-import java.time.ZoneOffset\n-\n-class SASTest extends APISpec {\n-\n-    // TODO (gapra) : Cleanup SAS Tests\n-\n-    @Unroll\n-    def \"Blob range\"() {\n-        expect:\n-        if (count == null) {\n-            assert new BlobRange(offset).toHeaderValue() == result\n-        } else {\n-            assert new BlobRange(offset, count).toHeaderValue() == result\n-        }\n-\n-\n-        where:\n-        offset | count || result\n-        0      | null  || null\n-        0      | 5     || \"bytes=0-4\"\n-        5      | 10    || \"bytes=5-14\"\n-    }\n-\n-    @Unroll\n-    def \"Blob range IA\"() {\n-        when:\n-        new BlobRange(offset, count)\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        offset | count\n-        -1     | 5\n-        0      | -1\n-    }\n-\n-    def \"BlobClient getSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.getSnapshotId() == snapshotId\n-        bu.getSnapshotId() == null\n-    }\n-\n-    def \"BlobClient isSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.isSnapshot()\n-        !bu.isSnapshot()\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzODcwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455938704", "bodyText": "moved to SAS Client Tests", "author": "gapra-msft", "createdAt": "2020-07-16T17:06:21Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SASTest.groovy", "diffHunk": "@@ -1,1263 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.blob\n-\n-import com.azure.storage.blob.models.BlobAccessPolicy\n-import com.azure.storage.blob.models.BlobRange\n-import com.azure.storage.blob.models.BlobSignedIdentifier\n-import com.azure.storage.blob.models.BlobStorageException\n-import com.azure.storage.blob.models.UserDelegationKey\n-import com.azure.storage.blob.sas.BlobContainerSasPermission\n-import com.azure.storage.blob.sas.BlobSasPermission\n-import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n-import com.azure.storage.blob.sas.BlobSasServiceVersion\n-import com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\n-import com.azure.storage.common.Utility\n-import com.azure.storage.common.implementation.StorageImplUtils\n-import com.azure.storage.common.sas.AccountSasPermission\n-import com.azure.storage.common.sas.AccountSasResourceType\n-import com.azure.storage.common.sas.AccountSasService\n-import com.azure.storage.common.sas.AccountSasSignatureValues\n-import com.azure.storage.common.sas.SasProtocol\n-import com.azure.storage.common.StorageSharedKeyCredential\n-\n-import com.azure.storage.common.implementation.Constants\n-import com.azure.storage.common.sas.SasIpRange\n-import spock.lang.Ignore\n-import spock.lang.Unroll\n-\n-import java.time.LocalDateTime\n-import java.time.OffsetDateTime\n-import java.time.ZoneOffset\n-\n-class SASTest extends APISpec {\n-\n-    // TODO (gapra) : Cleanup SAS Tests\n-\n-    @Unroll\n-    def \"Blob range\"() {\n-        expect:\n-        if (count == null) {\n-            assert new BlobRange(offset).toHeaderValue() == result\n-        } else {\n-            assert new BlobRange(offset, count).toHeaderValue() == result\n-        }\n-\n-\n-        where:\n-        offset | count || result\n-        0      | null  || null\n-        0      | 5     || \"bytes=0-4\"\n-        5      | 10    || \"bytes=5-14\"\n-    }\n-\n-    @Unroll\n-    def \"Blob range IA\"() {\n-        when:\n-        new BlobRange(offset, count)\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        offset | count\n-        -1     | 5\n-        0      | -1\n-    }\n-\n-    def \"BlobClient getSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.getSnapshotId() == snapshotId\n-        bu.getSnapshotId() == null\n-    }\n-\n-    def \"BlobClient isSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.isSnapshot()\n-        !bu.isSnapshot()\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(bu.getBlobName())\n-            .setContainerName(bu.getContainerName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container\"() {\n-        setup:\n-        def identifier = new BlobSignedIdentifier()\n-            .setId(\"0000\")\n-            .setAccessPolicy(new BlobAccessPolicy().setPermissions(\"racwdl\")\n-                .setExpiresOn(getUTCNow().plusDays(1)))\n-        cc.setAccessPolicy(null, Arrays.asList(identifier))\n-\n-        // Check containerSASPermissions\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setListPermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sasWithId = new BlobServiceSasSignatureValues()\n-            .setIdentifier(identifier.getId())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client1 = getContainerClient(sasWithId, cc.getBlobContainerUrl())\n-\n-        client1.listBlobs().iterator().hasNext()\n-\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client2 = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-\n-        client2.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(bu.getContainerName())\n-            .setBlobName(bu.getBlobName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        then:\n-        sas != null\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"BlobServiceSAS network test blob snapshot\"() {\n-        setup:\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-        def containerClient = primaryBlobServiceClient.createBlobContainer(containerName)\n-        def blobClient = containerClient.getBlobClient(blobName).getBlockBlobClient()\n-        blobClient.upload(defaultInputStream.get(), defaultDataSize) // need something to snapshot\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(blobClient.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        and:\n-        def client = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName).getAppendBlobClient()\n-\n-        client.download(new ByteArrayOutputStream())\n-\n-        then:\n-        thrown(BlobStorageException)\n-\n-        when:\n-        def snapClient = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName, snapshotId).getAppendBlobClient()\n-\n-        def data = new ByteArrayOutputStream()\n-        snapClient.download(data)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        data.toByteArray() == defaultData.array()\n-\n-        and:\n-        def properties = snapClient.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(bu.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(startTime, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        // base blob with snapshot SAS\n-        def client1 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client1.download(new ByteArrayOutputStream())\n-\n-        then:\n-        // snapshot-level SAS shouldn't be able to access base blob\n-        thrown(BlobStorageException)\n-\n-        when:\n-        // blob snapshot with snapshot SAS\n-        def client2 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client2.download(os)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        os.toString() == new String(data)\n-\n-        and:\n-        def properties = client2.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container user delegation\"() {\n-        setup:\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setVersion(BlobServiceVersion.V2019_02_02.getVersion())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        def client = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-        client.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network test blob read\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-\n-        then:\n-        os.toString() == new String(data)\n-    }\n-\n-    def \"accountSAS network test blob delete fails\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client.delete()\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container fails\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(false)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container succeeds\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network account sas token on endpoint\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-\n-        when:\n-        def sc = getServiceClientBuilder(null, primaryBlobServiceClient.getAccountUrl() + \"?\" + sas, null).buildClient()\n-        sc.createBlobContainer(containerName)\n-\n-        def cc = getContainerClientBuilder(primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"?\" + sas).buildClient()\n-        cc.getProperties()\n-\n-        def bc = getBlobClient(primaryCredential, primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"/\" + blobName + \"?\" + sas)\n-\n-        def file = getRandomFile(256)\n-        bc.uploadFromFile(file.toPath().toString())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    /*\n-     This test will ensure that each field gets placed into the proper location within the string to sign and that null\n-     values are handled correctly. We will validate the whole SAS with service calls as well as correct serialization of\n-     individual parts later.\n-     */\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzODk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455938962", "bodyText": "moved to blob SAS models test", "author": "gapra-msft", "createdAt": "2020-07-16T17:06:43Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SASTest.groovy", "diffHunk": "@@ -1,1263 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.blob\n-\n-import com.azure.storage.blob.models.BlobAccessPolicy\n-import com.azure.storage.blob.models.BlobRange\n-import com.azure.storage.blob.models.BlobSignedIdentifier\n-import com.azure.storage.blob.models.BlobStorageException\n-import com.azure.storage.blob.models.UserDelegationKey\n-import com.azure.storage.blob.sas.BlobContainerSasPermission\n-import com.azure.storage.blob.sas.BlobSasPermission\n-import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n-import com.azure.storage.blob.sas.BlobSasServiceVersion\n-import com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\n-import com.azure.storage.common.Utility\n-import com.azure.storage.common.implementation.StorageImplUtils\n-import com.azure.storage.common.sas.AccountSasPermission\n-import com.azure.storage.common.sas.AccountSasResourceType\n-import com.azure.storage.common.sas.AccountSasService\n-import com.azure.storage.common.sas.AccountSasSignatureValues\n-import com.azure.storage.common.sas.SasProtocol\n-import com.azure.storage.common.StorageSharedKeyCredential\n-\n-import com.azure.storage.common.implementation.Constants\n-import com.azure.storage.common.sas.SasIpRange\n-import spock.lang.Ignore\n-import spock.lang.Unroll\n-\n-import java.time.LocalDateTime\n-import java.time.OffsetDateTime\n-import java.time.ZoneOffset\n-\n-class SASTest extends APISpec {\n-\n-    // TODO (gapra) : Cleanup SAS Tests\n-\n-    @Unroll\n-    def \"Blob range\"() {\n-        expect:\n-        if (count == null) {\n-            assert new BlobRange(offset).toHeaderValue() == result\n-        } else {\n-            assert new BlobRange(offset, count).toHeaderValue() == result\n-        }\n-\n-\n-        where:\n-        offset | count || result\n-        0      | null  || null\n-        0      | 5     || \"bytes=0-4\"\n-        5      | 10    || \"bytes=5-14\"\n-    }\n-\n-    @Unroll\n-    def \"Blob range IA\"() {\n-        when:\n-        new BlobRange(offset, count)\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        offset | count\n-        -1     | 5\n-        0      | -1\n-    }\n-\n-    def \"BlobClient getSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.getSnapshotId() == snapshotId\n-        bu.getSnapshotId() == null\n-    }\n-\n-    def \"BlobClient isSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.isSnapshot()\n-        !bu.isSnapshot()\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(bu.getBlobName())\n-            .setContainerName(bu.getContainerName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container\"() {\n-        setup:\n-        def identifier = new BlobSignedIdentifier()\n-            .setId(\"0000\")\n-            .setAccessPolicy(new BlobAccessPolicy().setPermissions(\"racwdl\")\n-                .setExpiresOn(getUTCNow().plusDays(1)))\n-        cc.setAccessPolicy(null, Arrays.asList(identifier))\n-\n-        // Check containerSASPermissions\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setListPermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sasWithId = new BlobServiceSasSignatureValues()\n-            .setIdentifier(identifier.getId())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client1 = getContainerClient(sasWithId, cc.getBlobContainerUrl())\n-\n-        client1.listBlobs().iterator().hasNext()\n-\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client2 = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-\n-        client2.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(bu.getContainerName())\n-            .setBlobName(bu.getBlobName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        then:\n-        sas != null\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"BlobServiceSAS network test blob snapshot\"() {\n-        setup:\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-        def containerClient = primaryBlobServiceClient.createBlobContainer(containerName)\n-        def blobClient = containerClient.getBlobClient(blobName).getBlockBlobClient()\n-        blobClient.upload(defaultInputStream.get(), defaultDataSize) // need something to snapshot\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(blobClient.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        and:\n-        def client = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName).getAppendBlobClient()\n-\n-        client.download(new ByteArrayOutputStream())\n-\n-        then:\n-        thrown(BlobStorageException)\n-\n-        when:\n-        def snapClient = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName, snapshotId).getAppendBlobClient()\n-\n-        def data = new ByteArrayOutputStream()\n-        snapClient.download(data)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        data.toByteArray() == defaultData.array()\n-\n-        and:\n-        def properties = snapClient.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(bu.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(startTime, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        // base blob with snapshot SAS\n-        def client1 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client1.download(new ByteArrayOutputStream())\n-\n-        then:\n-        // snapshot-level SAS shouldn't be able to access base blob\n-        thrown(BlobStorageException)\n-\n-        when:\n-        // blob snapshot with snapshot SAS\n-        def client2 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client2.download(os)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        os.toString() == new String(data)\n-\n-        and:\n-        def properties = client2.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container user delegation\"() {\n-        setup:\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setVersion(BlobServiceVersion.V2019_02_02.getVersion())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        def client = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-        client.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network test blob read\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-\n-        then:\n-        os.toString() == new String(data)\n-    }\n-\n-    def \"accountSAS network test blob delete fails\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client.delete()\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container fails\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(false)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container succeeds\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network account sas token on endpoint\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-\n-        when:\n-        def sc = getServiceClientBuilder(null, primaryBlobServiceClient.getAccountUrl() + \"?\" + sas, null).buildClient()\n-        sc.createBlobContainer(containerName)\n-\n-        def cc = getContainerClientBuilder(primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"?\" + sas).buildClient()\n-        cc.getProperties()\n-\n-        def bc = getBlobClient(primaryCredential, primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"/\" + blobName + \"?\" + sas)\n-\n-        def file = getRandomFile(256)\n-        bc.uploadFromFile(file.toPath().toString())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    /*\n-     This test will ensure that each field gets placed into the proper location within the string to sign and that null\n-     values are handled correctly. We will validate the whole SAS with service calls as well as correct serialization of\n-     individual parts later.\n-     */\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def p = new BlobSasPermission()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setIdentifier(identifier)\n-            .setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-\n-        def token = v.generateSasQueryParameters(primaryCredential)\n-        then:\n-        token.getSignature() == primaryCredential.computeHmac256(expected)\n-\n-        /*\n-        We don't test the blob or containerName properties because canonicalized resource is always added as at least\n-        /blob/accountName. We test canonicalization of resources later. Again, this is not to test a fully functional\n-        sas but the construction of the string to sign.\n-        Signed resource is tested elsewhere, as we work some minor magic in choosing which value to use.\n-         */\n-        where:\n-        startTime                                                 | identifier | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"id\"       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\nid\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign user delegation key\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        def p = new BlobSasPermission()\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-        def key = new UserDelegationKey()\n-            .setSignedObjectId(keyOid)\n-            .setSignedTenantId(keyTid)\n-            .setSignedStart(keyStart)\n-            .setSignedExpiry(keyExpiry)\n-            .setSignedService(keyService)\n-            .setSignedVersion(keyVersion)\n-            .setValue(keyValue)\n-        def token = v.generateSasQueryParameters(key, primaryCredential.getAccountName())\n-\n-        then:\n-        token.getSignature() == StorageImplUtils.computeHMac256(key.getValue(), expected)\n-\n-        /*\n-        We test string to sign functionality directly related to user delegation sas specific parameters\n-         */\n-        where:\n-        startTime                                                 | keyOid                                 | keyTid                                 | keyStart                                                              | keyExpiry                                                             | keyService | keyVersion   | keyValue                                       | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"11111111-1111-1111-1111-111111111111\" | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n11111111-1111-1111-1111-111111111111\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | \"22222222-2222-2222-2222-222222222222\" | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n22222222-2222-2222-2222-222222222222\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | \"b\"        | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\nb\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | \"2018-06-17\" | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n2018-06-17\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    def \"serviceSasSignatureValues IA\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0MTcwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455941707", "bodyText": "Common related SAS stuff tests go to SAS models test in Common", "author": "gapra-msft", "createdAt": "2020-07-16T17:11:20Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SASTest.groovy", "diffHunk": "@@ -1,1263 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.blob\n-\n-import com.azure.storage.blob.models.BlobAccessPolicy\n-import com.azure.storage.blob.models.BlobRange\n-import com.azure.storage.blob.models.BlobSignedIdentifier\n-import com.azure.storage.blob.models.BlobStorageException\n-import com.azure.storage.blob.models.UserDelegationKey\n-import com.azure.storage.blob.sas.BlobContainerSasPermission\n-import com.azure.storage.blob.sas.BlobSasPermission\n-import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n-import com.azure.storage.blob.sas.BlobSasServiceVersion\n-import com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\n-import com.azure.storage.common.Utility\n-import com.azure.storage.common.implementation.StorageImplUtils\n-import com.azure.storage.common.sas.AccountSasPermission\n-import com.azure.storage.common.sas.AccountSasResourceType\n-import com.azure.storage.common.sas.AccountSasService\n-import com.azure.storage.common.sas.AccountSasSignatureValues\n-import com.azure.storage.common.sas.SasProtocol\n-import com.azure.storage.common.StorageSharedKeyCredential\n-\n-import com.azure.storage.common.implementation.Constants\n-import com.azure.storage.common.sas.SasIpRange\n-import spock.lang.Ignore\n-import spock.lang.Unroll\n-\n-import java.time.LocalDateTime\n-import java.time.OffsetDateTime\n-import java.time.ZoneOffset\n-\n-class SASTest extends APISpec {\n-\n-    // TODO (gapra) : Cleanup SAS Tests\n-\n-    @Unroll\n-    def \"Blob range\"() {\n-        expect:\n-        if (count == null) {\n-            assert new BlobRange(offset).toHeaderValue() == result\n-        } else {\n-            assert new BlobRange(offset, count).toHeaderValue() == result\n-        }\n-\n-\n-        where:\n-        offset | count || result\n-        0      | null  || null\n-        0      | 5     || \"bytes=0-4\"\n-        5      | 10    || \"bytes=5-14\"\n-    }\n-\n-    @Unroll\n-    def \"Blob range IA\"() {\n-        when:\n-        new BlobRange(offset, count)\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        offset | count\n-        -1     | 5\n-        0      | -1\n-    }\n-\n-    def \"BlobClient getSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.getSnapshotId() == snapshotId\n-        bu.getSnapshotId() == null\n-    }\n-\n-    def \"BlobClient isSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.isSnapshot()\n-        !bu.isSnapshot()\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(bu.getBlobName())\n-            .setContainerName(bu.getContainerName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container\"() {\n-        setup:\n-        def identifier = new BlobSignedIdentifier()\n-            .setId(\"0000\")\n-            .setAccessPolicy(new BlobAccessPolicy().setPermissions(\"racwdl\")\n-                .setExpiresOn(getUTCNow().plusDays(1)))\n-        cc.setAccessPolicy(null, Arrays.asList(identifier))\n-\n-        // Check containerSASPermissions\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setListPermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sasWithId = new BlobServiceSasSignatureValues()\n-            .setIdentifier(identifier.getId())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client1 = getContainerClient(sasWithId, cc.getBlobContainerUrl())\n-\n-        client1.listBlobs().iterator().hasNext()\n-\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client2 = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-\n-        client2.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(bu.getContainerName())\n-            .setBlobName(bu.getBlobName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        then:\n-        sas != null\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"BlobServiceSAS network test blob snapshot\"() {\n-        setup:\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-        def containerClient = primaryBlobServiceClient.createBlobContainer(containerName)\n-        def blobClient = containerClient.getBlobClient(blobName).getBlockBlobClient()\n-        blobClient.upload(defaultInputStream.get(), defaultDataSize) // need something to snapshot\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(blobClient.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        and:\n-        def client = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName).getAppendBlobClient()\n-\n-        client.download(new ByteArrayOutputStream())\n-\n-        then:\n-        thrown(BlobStorageException)\n-\n-        when:\n-        def snapClient = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName, snapshotId).getAppendBlobClient()\n-\n-        def data = new ByteArrayOutputStream()\n-        snapClient.download(data)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        data.toByteArray() == defaultData.array()\n-\n-        and:\n-        def properties = snapClient.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(bu.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(startTime, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        // base blob with snapshot SAS\n-        def client1 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client1.download(new ByteArrayOutputStream())\n-\n-        then:\n-        // snapshot-level SAS shouldn't be able to access base blob\n-        thrown(BlobStorageException)\n-\n-        when:\n-        // blob snapshot with snapshot SAS\n-        def client2 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client2.download(os)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        os.toString() == new String(data)\n-\n-        and:\n-        def properties = client2.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container user delegation\"() {\n-        setup:\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setVersion(BlobServiceVersion.V2019_02_02.getVersion())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        def client = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-        client.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network test blob read\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-\n-        then:\n-        os.toString() == new String(data)\n-    }\n-\n-    def \"accountSAS network test blob delete fails\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client.delete()\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container fails\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(false)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container succeeds\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network account sas token on endpoint\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-\n-        when:\n-        def sc = getServiceClientBuilder(null, primaryBlobServiceClient.getAccountUrl() + \"?\" + sas, null).buildClient()\n-        sc.createBlobContainer(containerName)\n-\n-        def cc = getContainerClientBuilder(primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"?\" + sas).buildClient()\n-        cc.getProperties()\n-\n-        def bc = getBlobClient(primaryCredential, primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"/\" + blobName + \"?\" + sas)\n-\n-        def file = getRandomFile(256)\n-        bc.uploadFromFile(file.toPath().toString())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    /*\n-     This test will ensure that each field gets placed into the proper location within the string to sign and that null\n-     values are handled correctly. We will validate the whole SAS with service calls as well as correct serialization of\n-     individual parts later.\n-     */\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def p = new BlobSasPermission()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setIdentifier(identifier)\n-            .setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-\n-        def token = v.generateSasQueryParameters(primaryCredential)\n-        then:\n-        token.getSignature() == primaryCredential.computeHmac256(expected)\n-\n-        /*\n-        We don't test the blob or containerName properties because canonicalized resource is always added as at least\n-        /blob/accountName. We test canonicalization of resources later. Again, this is not to test a fully functional\n-        sas but the construction of the string to sign.\n-        Signed resource is tested elsewhere, as we work some minor magic in choosing which value to use.\n-         */\n-        where:\n-        startTime                                                 | identifier | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"id\"       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\nid\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign user delegation key\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        def p = new BlobSasPermission()\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-        def key = new UserDelegationKey()\n-            .setSignedObjectId(keyOid)\n-            .setSignedTenantId(keyTid)\n-            .setSignedStart(keyStart)\n-            .setSignedExpiry(keyExpiry)\n-            .setSignedService(keyService)\n-            .setSignedVersion(keyVersion)\n-            .setValue(keyValue)\n-        def token = v.generateSasQueryParameters(key, primaryCredential.getAccountName())\n-\n-        then:\n-        token.getSignature() == StorageImplUtils.computeHMac256(key.getValue(), expected)\n-\n-        /*\n-        We test string to sign functionality directly related to user delegation sas specific parameters\n-         */\n-        where:\n-        startTime                                                 | keyOid                                 | keyTid                                 | keyStart                                                              | keyExpiry                                                             | keyService | keyVersion   | keyValue                                       | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"11111111-1111-1111-1111-111111111111\" | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n11111111-1111-1111-1111-111111111111\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | \"22222222-2222-2222-2222-222222222222\" | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n22222222-2222-2222-2222-222222222222\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | \"b\"        | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\nb\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | \"2018-06-17\" | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n2018-06-17\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    def \"serviceSasSignatureValues IA\"() {\n-        setup:\n-        def v = new BlobServiceSasSignatureValues()\n-            .setSnapshotId(\"2018-01-01T00:00:00.0000000Z\")\n-\n-        when:\n-        v.generateSasQueryParameters(null)\n-\n-        then:\n-        def e = thrown(NullPointerException)\n-        e.getMessage().contains(\"storageSharedKeyCredential\")\n-    }\n-\n-    @Unroll\n-    def \"BlobSASPermissions toString\"() {\n-        setup:\n-        def perms = new BlobSasPermission()\n-            .setReadPermission(read)\n-            .setWritePermission(write)\n-            .setDeletePermission(delete)\n-            .setCreatePermission(create)\n-            .setAddPermission(add)\n-            .setDeleteVersionPermission(deleteVersion)\n-\n-        expect:\n-        perms.toString() == expectedString\n-\n-        where:\n-        read  | write | delete | create | add   | deleteVersion || expectedString\n-        true  | false | false  | false  | false | false         || \"r\"\n-        false | true  | false  | false  | false | false         || \"w\"\n-        false | false | true   | false  | false | false         || \"d\"\n-        false | false | false  | true   | false | false         || \"c\"\n-        false | false | false  | false  | true  | false         || \"a\"\n-        false | false | false  | false  | false | true          || \"x\"\n-        true  | true  | true   | true   | true  | true          || \"racwdx\"\n-    }\n-\n-    @Unroll\n-    def \"BlobSASPermissions parse\"() {\n-        when:\n-        def perms = BlobSasPermission.parse(permString)\n-\n-        then:\n-        perms.hasReadPermission() == read\n-        perms.hasWritePermission() == write\n-        perms.hasDeletePermission() == delete\n-        perms.hasCreatePermission() == create\n-        perms.hasAddPermission() == add\n-        perms.hasDeleteVersionPermission() == deleteVersion\n-\n-        where:\n-        permString || read  | write | delete | create | add   | deleteVersion\n-        \"r\"        || true  | false | false  | false  | false | false\n-        \"w\"        || false | true  | false  | false  | false | false\n-        \"d\"        || false | false | true   | false  | false | false\n-        \"c\"        || false | false | false  | true   | false | false\n-        \"a\"        || false | false | false  | false  | true  | false\n-        \"x\"        || false | false | false  | false  | false | true\n-        \"racwdx\"    || true  | true  | true   | true   | true  | true\n-        \"dcxwra\"    || true  | true  | true   | true   | true  | true\n-    }\n-\n-    def \"BlobSASPermissions parse IA\"() {\n-        when:\n-        BlobSasPermission.parse(\"rwaq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    @Unroll\n-    def \"ContainerSASPermissions toString\"() {\n-        setup:\n-        def perms = new BlobContainerSasPermission()\n-            .setReadPermission(read)\n-            .setWritePermission(write)\n-            .setDeletePermission(delete)\n-            .setCreatePermission(create)\n-            .setAddPermission(add)\n-            .setListPermission(list)\n-            .setDeleteVersionPermission(deleteVersion)\n-\n-        expect:\n-        perms.toString() == expectedString\n-\n-        where:\n-        read  | write | delete | create | add   | list  | deleteVersion || expectedString\n-        true  | false | false  | false  | false | false | false         || \"r\"\n-        false | true  | false  | false  | false | false | false         || \"w\"\n-        false | false | true   | false  | false | false | false         || \"d\"\n-        false | false | false  | true   | false | false | false         || \"c\"\n-        false | false | false  | false  | true  | false | false         || \"a\"\n-        false | false | false  | false  | false | true  | false         || \"l\"\n-        false | false | false  | false  | false | false | true          || \"x\"\n-        true  | true  | true   | true   | true  | true  | true          || \"racwdxl\"\n-    }\n-\n-    @Unroll\n-    def \"ContainerSASPermissions parse\"() {\n-        when:\n-        def perms = BlobContainerSasPermission.parse(permString)\n-\n-        then:\n-        perms.hasReadPermission() == read\n-        perms.hasWritePermission() == write\n-        perms.hasDeletePermission() == delete\n-        perms.hasCreatePermission() == create\n-        perms.hasAddPermission() == add\n-        perms.hasListPermission() == list\n-        perms.hasDeleteVersionPermission() == deleteVersion\n-\n-        where:\n-        permString || read  | write | delete | create | add   | list  | deleteVersion\n-        \"r\"        || true  | false | false  | false  | false | false | false\n-        \"w\"        || false | true  | false  | false  | false | false | false\n-        \"d\"        || false | false | true   | false  | false | false | false\n-        \"c\"        || false | false | false  | true   | false | false | false\n-        \"a\"        || false | false | false  | false  | true  | false | false\n-        \"l\"        || false | false | false  | false  | false | true  | false\n-        \"x\"        || false | false | false  | false  | false | false | true\n-        \"racwdxl\"  || true  | true  | true   | true   | true  | true  | true\n-        \"dcwxrla\"  || true  | true  | true   | true   | true  | true  | true\n-    }\n-\n-    def \"ContainerSASPermissions parse IA\"() {\n-        when:\n-        BlobContainerSasPermission.parse(\"rwaq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    @Unroll\n-    def \"IPRange toString\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0MjIwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455942205", "bodyText": "Left this in BlobSasClienttests because it has easy access to primaryCredential", "author": "gapra-msft", "createdAt": "2020-07-16T17:11:57Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SASTest.groovy", "diffHunk": "@@ -1,1263 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.blob\n-\n-import com.azure.storage.blob.models.BlobAccessPolicy\n-import com.azure.storage.blob.models.BlobRange\n-import com.azure.storage.blob.models.BlobSignedIdentifier\n-import com.azure.storage.blob.models.BlobStorageException\n-import com.azure.storage.blob.models.UserDelegationKey\n-import com.azure.storage.blob.sas.BlobContainerSasPermission\n-import com.azure.storage.blob.sas.BlobSasPermission\n-import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n-import com.azure.storage.blob.sas.BlobSasServiceVersion\n-import com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\n-import com.azure.storage.common.Utility\n-import com.azure.storage.common.implementation.StorageImplUtils\n-import com.azure.storage.common.sas.AccountSasPermission\n-import com.azure.storage.common.sas.AccountSasResourceType\n-import com.azure.storage.common.sas.AccountSasService\n-import com.azure.storage.common.sas.AccountSasSignatureValues\n-import com.azure.storage.common.sas.SasProtocol\n-import com.azure.storage.common.StorageSharedKeyCredential\n-\n-import com.azure.storage.common.implementation.Constants\n-import com.azure.storage.common.sas.SasIpRange\n-import spock.lang.Ignore\n-import spock.lang.Unroll\n-\n-import java.time.LocalDateTime\n-import java.time.OffsetDateTime\n-import java.time.ZoneOffset\n-\n-class SASTest extends APISpec {\n-\n-    // TODO (gapra) : Cleanup SAS Tests\n-\n-    @Unroll\n-    def \"Blob range\"() {\n-        expect:\n-        if (count == null) {\n-            assert new BlobRange(offset).toHeaderValue() == result\n-        } else {\n-            assert new BlobRange(offset, count).toHeaderValue() == result\n-        }\n-\n-\n-        where:\n-        offset | count || result\n-        0      | null  || null\n-        0      | 5     || \"bytes=0-4\"\n-        5      | 10    || \"bytes=5-14\"\n-    }\n-\n-    @Unroll\n-    def \"Blob range IA\"() {\n-        when:\n-        new BlobRange(offset, count)\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        offset | count\n-        -1     | 5\n-        0      | -1\n-    }\n-\n-    def \"BlobClient getSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.getSnapshotId() == snapshotId\n-        bu.getSnapshotId() == null\n-    }\n-\n-    def \"BlobClient isSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.isSnapshot()\n-        !bu.isSnapshot()\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(bu.getBlobName())\n-            .setContainerName(bu.getContainerName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container\"() {\n-        setup:\n-        def identifier = new BlobSignedIdentifier()\n-            .setId(\"0000\")\n-            .setAccessPolicy(new BlobAccessPolicy().setPermissions(\"racwdl\")\n-                .setExpiresOn(getUTCNow().plusDays(1)))\n-        cc.setAccessPolicy(null, Arrays.asList(identifier))\n-\n-        // Check containerSASPermissions\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setListPermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sasWithId = new BlobServiceSasSignatureValues()\n-            .setIdentifier(identifier.getId())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client1 = getContainerClient(sasWithId, cc.getBlobContainerUrl())\n-\n-        client1.listBlobs().iterator().hasNext()\n-\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client2 = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-\n-        client2.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(bu.getContainerName())\n-            .setBlobName(bu.getBlobName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        then:\n-        sas != null\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"BlobServiceSAS network test blob snapshot\"() {\n-        setup:\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-        def containerClient = primaryBlobServiceClient.createBlobContainer(containerName)\n-        def blobClient = containerClient.getBlobClient(blobName).getBlockBlobClient()\n-        blobClient.upload(defaultInputStream.get(), defaultDataSize) // need something to snapshot\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(blobClient.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        and:\n-        def client = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName).getAppendBlobClient()\n-\n-        client.download(new ByteArrayOutputStream())\n-\n-        then:\n-        thrown(BlobStorageException)\n-\n-        when:\n-        def snapClient = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName, snapshotId).getAppendBlobClient()\n-\n-        def data = new ByteArrayOutputStream()\n-        snapClient.download(data)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        data.toByteArray() == defaultData.array()\n-\n-        and:\n-        def properties = snapClient.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(bu.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(startTime, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        // base blob with snapshot SAS\n-        def client1 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client1.download(new ByteArrayOutputStream())\n-\n-        then:\n-        // snapshot-level SAS shouldn't be able to access base blob\n-        thrown(BlobStorageException)\n-\n-        when:\n-        // blob snapshot with snapshot SAS\n-        def client2 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client2.download(os)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        os.toString() == new String(data)\n-\n-        and:\n-        def properties = client2.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container user delegation\"() {\n-        setup:\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setVersion(BlobServiceVersion.V2019_02_02.getVersion())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        def client = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-        client.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network test blob read\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-\n-        then:\n-        os.toString() == new String(data)\n-    }\n-\n-    def \"accountSAS network test blob delete fails\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client.delete()\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container fails\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(false)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container succeeds\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network account sas token on endpoint\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-\n-        when:\n-        def sc = getServiceClientBuilder(null, primaryBlobServiceClient.getAccountUrl() + \"?\" + sas, null).buildClient()\n-        sc.createBlobContainer(containerName)\n-\n-        def cc = getContainerClientBuilder(primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"?\" + sas).buildClient()\n-        cc.getProperties()\n-\n-        def bc = getBlobClient(primaryCredential, primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"/\" + blobName + \"?\" + sas)\n-\n-        def file = getRandomFile(256)\n-        bc.uploadFromFile(file.toPath().toString())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    /*\n-     This test will ensure that each field gets placed into the proper location within the string to sign and that null\n-     values are handled correctly. We will validate the whole SAS with service calls as well as correct serialization of\n-     individual parts later.\n-     */\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def p = new BlobSasPermission()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setIdentifier(identifier)\n-            .setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-\n-        def token = v.generateSasQueryParameters(primaryCredential)\n-        then:\n-        token.getSignature() == primaryCredential.computeHmac256(expected)\n-\n-        /*\n-        We don't test the blob or containerName properties because canonicalized resource is always added as at least\n-        /blob/accountName. We test canonicalization of resources later. Again, this is not to test a fully functional\n-        sas but the construction of the string to sign.\n-        Signed resource is tested elsewhere, as we work some minor magic in choosing which value to use.\n-         */\n-        where:\n-        startTime                                                 | identifier | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"id\"       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\nid\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign user delegation key\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        def p = new BlobSasPermission()\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-        def key = new UserDelegationKey()\n-            .setSignedObjectId(keyOid)\n-            .setSignedTenantId(keyTid)\n-            .setSignedStart(keyStart)\n-            .setSignedExpiry(keyExpiry)\n-            .setSignedService(keyService)\n-            .setSignedVersion(keyVersion)\n-            .setValue(keyValue)\n-        def token = v.generateSasQueryParameters(key, primaryCredential.getAccountName())\n-\n-        then:\n-        token.getSignature() == StorageImplUtils.computeHMac256(key.getValue(), expected)\n-\n-        /*\n-        We test string to sign functionality directly related to user delegation sas specific parameters\n-         */\n-        where:\n-        startTime                                                 | keyOid                                 | keyTid                                 | keyStart                                                              | keyExpiry                                                             | keyService | keyVersion   | keyValue                                       | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"11111111-1111-1111-1111-111111111111\" | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n11111111-1111-1111-1111-111111111111\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | \"22222222-2222-2222-2222-222222222222\" | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n22222222-2222-2222-2222-222222222222\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | \"b\"        | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\nb\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | \"2018-06-17\" | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n2018-06-17\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    def \"serviceSasSignatureValues IA\"() {\n-        setup:\n-        def v = new BlobServiceSasSignatureValues()\n-            .setSnapshotId(\"2018-01-01T00:00:00.0000000Z\")\n-\n-        when:\n-        v.generateSasQueryParameters(null)\n-\n-        then:\n-        def e = thrown(NullPointerException)\n-        e.getMessage().contains(\"storageSharedKeyCredential\")\n-    }\n-\n-    @Unroll\n-    def \"BlobSASPermissions toString\"() {\n-        setup:\n-        def perms = new BlobSasPermission()\n-            .setReadPermission(read)\n-            .setWritePermission(write)\n-            .setDeletePermission(delete)\n-            .setCreatePermission(create)\n-            .setAddPermission(add)\n-            .setDeleteVersionPermission(deleteVersion)\n-\n-        expect:\n-        perms.toString() == expectedString\n-\n-        where:\n-        read  | write | delete | create | add   | deleteVersion || expectedString\n-        true  | false | false  | false  | false | false         || \"r\"\n-        false | true  | false  | false  | false | false         || \"w\"\n-        false | false | true   | false  | false | false         || \"d\"\n-        false | false | false  | true   | false | false         || \"c\"\n-        false | false | false  | false  | true  | false         || \"a\"\n-        false | false | false  | false  | false | true          || \"x\"\n-        true  | true  | true   | true   | true  | true          || \"racwdx\"\n-    }\n-\n-    @Unroll\n-    def \"BlobSASPermissions parse\"() {\n-        when:\n-        def perms = BlobSasPermission.parse(permString)\n-\n-        then:\n-        perms.hasReadPermission() == read\n-        perms.hasWritePermission() == write\n-        perms.hasDeletePermission() == delete\n-        perms.hasCreatePermission() == create\n-        perms.hasAddPermission() == add\n-        perms.hasDeleteVersionPermission() == deleteVersion\n-\n-        where:\n-        permString || read  | write | delete | create | add   | deleteVersion\n-        \"r\"        || true  | false | false  | false  | false | false\n-        \"w\"        || false | true  | false  | false  | false | false\n-        \"d\"        || false | false | true   | false  | false | false\n-        \"c\"        || false | false | false  | true   | false | false\n-        \"a\"        || false | false | false  | false  | true  | false\n-        \"x\"        || false | false | false  | false  | false | true\n-        \"racwdx\"    || true  | true  | true   | true   | true  | true\n-        \"dcxwra\"    || true  | true  | true   | true   | true  | true\n-    }\n-\n-    def \"BlobSASPermissions parse IA\"() {\n-        when:\n-        BlobSasPermission.parse(\"rwaq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    @Unroll\n-    def \"ContainerSASPermissions toString\"() {\n-        setup:\n-        def perms = new BlobContainerSasPermission()\n-            .setReadPermission(read)\n-            .setWritePermission(write)\n-            .setDeletePermission(delete)\n-            .setCreatePermission(create)\n-            .setAddPermission(add)\n-            .setListPermission(list)\n-            .setDeleteVersionPermission(deleteVersion)\n-\n-        expect:\n-        perms.toString() == expectedString\n-\n-        where:\n-        read  | write | delete | create | add   | list  | deleteVersion || expectedString\n-        true  | false | false  | false  | false | false | false         || \"r\"\n-        false | true  | false  | false  | false | false | false         || \"w\"\n-        false | false | true   | false  | false | false | false         || \"d\"\n-        false | false | false  | true   | false | false | false         || \"c\"\n-        false | false | false  | false  | true  | false | false         || \"a\"\n-        false | false | false  | false  | false | true  | false         || \"l\"\n-        false | false | false  | false  | false | false | true          || \"x\"\n-        true  | true  | true   | true   | true  | true  | true          || \"racwdxl\"\n-    }\n-\n-    @Unroll\n-    def \"ContainerSASPermissions parse\"() {\n-        when:\n-        def perms = BlobContainerSasPermission.parse(permString)\n-\n-        then:\n-        perms.hasReadPermission() == read\n-        perms.hasWritePermission() == write\n-        perms.hasDeletePermission() == delete\n-        perms.hasCreatePermission() == create\n-        perms.hasAddPermission() == add\n-        perms.hasListPermission() == list\n-        perms.hasDeleteVersionPermission() == deleteVersion\n-\n-        where:\n-        permString || read  | write | delete | create | add   | list  | deleteVersion\n-        \"r\"        || true  | false | false  | false  | false | false | false\n-        \"w\"        || false | true  | false  | false  | false | false | false\n-        \"d\"        || false | false | true   | false  | false | false | false\n-        \"c\"        || false | false | false  | true   | false | false | false\n-        \"a\"        || false | false | false  | false  | true  | false | false\n-        \"l\"        || false | false | false  | false  | false | true  | false\n-        \"x\"        || false | false | false  | false  | false | false | true\n-        \"racwdxl\"  || true  | true  | true   | true   | true  | true  | true\n-        \"dcwxrla\"  || true  | true  | true   | true   | true  | true  | true\n-    }\n-\n-    def \"ContainerSASPermissions parse IA\"() {\n-        when:\n-        BlobContainerSasPermission.parse(\"rwaq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    @Unroll\n-    def \"IPRange toString\"() {\n-        setup:\n-        def ip = new SasIpRange()\n-            .setIpMin(min)\n-            .setIpMax(max)\n-\n-        expect:\n-        ip.toString() == expectedString\n-\n-        where:\n-        min  | max  || expectedString\n-        \"a\"  | \"b\"  || \"a-b\"\n-        \"a\"  | null || \"a\"\n-        null | \"b\"  || \"\"\n-    }\n-\n-    @Unroll\n-    def \"IPRange parse\"() {\n-        when:\n-        def ip = SasIpRange.parse(rangeStr)\n-\n-        then:\n-        ip.getIpMin() == min\n-        ip.getIpMax() == max\n-\n-        where:\n-        rangeStr || min | max\n-        \"a-b\"    || \"a\" | \"b\"\n-        \"a\"      || \"a\" | null\n-        \"\"       || \"\"  | null\n-    }\n-\n-    @Unroll\n-    def \"SASProtocol parse\"() {\n-        expect:\n-        SasProtocol.parse(protocolStr) == protocol\n-\n-        where:\n-        protocolStr  || protocol\n-        \"https\"      || SasProtocol.HTTPS_ONLY\n-        \"https,http\" || SasProtocol.HTTPS_HTTP\n-    }\n-\n-    @Unroll\n-    def \"ServiceSASSignatureValues assertGenerateOk\"() {\n-        when:\n-        def serviceSASSignatureValues = new BlobServiceSasSignatureValues()\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapshotId)\n-            .setPermissions(BlobContainerSasPermission.parse(\"rl\"))\n-\n-        serviceSASSignatureValues.generateSasQueryParameters(new StorageSharedKeyCredential(\"n\", \"key\"))\n-\n-        then:\n-\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        snapshotId | _\n-        null       | _\n-        \"id\"       | _\n-    }\n-\n-    /*\n-     This test will ensure that each field gets placed into the proper location within the string to sign and that null\n-     values are handled correctly. We will validate the whole SAS with service calls as well as correct serialization of\n-     individual parts later.\n-     */\n-\n-    @Unroll\n-    def \"accountSasSignatures string to sign\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk0MjQxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455942417", "bodyText": "moved to Helper test, same with one above", "author": "gapra-msft", "createdAt": "2020-07-16T17:12:19Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SASTest.groovy", "diffHunk": "@@ -1,1263 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.blob\n-\n-import com.azure.storage.blob.models.BlobAccessPolicy\n-import com.azure.storage.blob.models.BlobRange\n-import com.azure.storage.blob.models.BlobSignedIdentifier\n-import com.azure.storage.blob.models.BlobStorageException\n-import com.azure.storage.blob.models.UserDelegationKey\n-import com.azure.storage.blob.sas.BlobContainerSasPermission\n-import com.azure.storage.blob.sas.BlobSasPermission\n-import com.azure.storage.blob.sas.BlobServiceSasSignatureValues\n-import com.azure.storage.blob.sas.BlobSasServiceVersion\n-import com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\n-import com.azure.storage.common.Utility\n-import com.azure.storage.common.implementation.StorageImplUtils\n-import com.azure.storage.common.sas.AccountSasPermission\n-import com.azure.storage.common.sas.AccountSasResourceType\n-import com.azure.storage.common.sas.AccountSasService\n-import com.azure.storage.common.sas.AccountSasSignatureValues\n-import com.azure.storage.common.sas.SasProtocol\n-import com.azure.storage.common.StorageSharedKeyCredential\n-\n-import com.azure.storage.common.implementation.Constants\n-import com.azure.storage.common.sas.SasIpRange\n-import spock.lang.Ignore\n-import spock.lang.Unroll\n-\n-import java.time.LocalDateTime\n-import java.time.OffsetDateTime\n-import java.time.ZoneOffset\n-\n-class SASTest extends APISpec {\n-\n-    // TODO (gapra) : Cleanup SAS Tests\n-\n-    @Unroll\n-    def \"Blob range\"() {\n-        expect:\n-        if (count == null) {\n-            assert new BlobRange(offset).toHeaderValue() == result\n-        } else {\n-            assert new BlobRange(offset, count).toHeaderValue() == result\n-        }\n-\n-\n-        where:\n-        offset | count || result\n-        0      | null  || null\n-        0      | 5     || \"bytes=0-4\"\n-        5      | 10    || \"bytes=5-14\"\n-    }\n-\n-    @Unroll\n-    def \"Blob range IA\"() {\n-        when:\n-        new BlobRange(offset, count)\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        offset | count\n-        -1     | 5\n-        0      | -1\n-    }\n-\n-    def \"BlobClient getSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.getSnapshotId() == snapshotId\n-        bu.getSnapshotId() == null\n-    }\n-\n-    def \"BlobClient isSnapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        when:\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        then:\n-        snapshotBlob.isSnapshot()\n-        !bu.isSnapshot()\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(bu.getBlobName())\n-            .setContainerName(bu.getContainerName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = getBlobClient(primaryCredential, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotId = bu.createSnapshot().getSnapshotId()\n-\n-        def snapshotBlob = cc.getBlobClient(blobName, snapshotId).getBlockBlobClient()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container\"() {\n-        setup:\n-        def identifier = new BlobSignedIdentifier()\n-            .setId(\"0000\")\n-            .setAccessPolicy(new BlobAccessPolicy().setPermissions(\"racwdl\")\n-                .setExpiresOn(getUTCNow().plusDays(1)))\n-        cc.setAccessPolicy(null, Arrays.asList(identifier))\n-\n-        // Check containerSASPermissions\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setListPermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sasWithId = new BlobServiceSasSignatureValues()\n-            .setIdentifier(identifier.getId())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        def client1 = getContainerClient(sasWithId, cc.getBlobContainerUrl())\n-\n-        client1.listBlobs().iterator().hasNext()\n-\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client2 = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-\n-        client2.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(bu.getContainerName())\n-            .setBlobName(bu.getBlobName())\n-            .setSnapshotId(bu.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        then:\n-        sas != null\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-        def properties = client.getProperties()\n-\n-        then:\n-        os.toString() == new String(data)\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"BlobServiceSAS network test blob snapshot\"() {\n-        setup:\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-        def containerClient = primaryBlobServiceClient.createBlobContainer(containerName)\n-        def blobClient = containerClient.getBlobClient(blobName).getBlockBlobClient()\n-        blobClient.upload(defaultInputStream.get(), defaultDataSize) // need something to snapshot\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(blobClient.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-\n-        and:\n-        def client = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName).getAppendBlobClient()\n-\n-        client.download(new ByteArrayOutputStream())\n-\n-        then:\n-        thrown(BlobStorageException)\n-\n-        when:\n-        def snapClient = getBlobClient(sas, containerClient.getBlobContainerUrl(), blobName, snapshotId).getAppendBlobClient()\n-\n-        def data = new ByteArrayOutputStream()\n-        snapClient.download(data)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        data.toByteArray() == defaultData.array()\n-\n-        and:\n-        def properties = snapClient.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-\n-    }\n-\n-    def \"serviceSASSignatureValues network test blob snapshot user delegation\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-        def snapshotBlob = new SpecializedBlobClientBuilder().blobClient(bu.createSnapshot()).buildBlockBlobClient()\n-        def snapshotId = snapshotBlob.getSnapshotId()\n-\n-        def permissions = new BlobSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-\n-        def startTime = getUTCNow().minusDays(1)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def ipRange = new SasIpRange()\n-            .setIpMin(\"0.0.0.0\")\n-            .setIpMax(\"255.255.255.255\")\n-\n-        def sasProtocol = SasProtocol.HTTPS_HTTP\n-        def cacheControl = \"cache\"\n-        def contentDisposition = \"disposition\"\n-        def contentEncoding = \"encoding\"\n-        def contentLanguage = \"language\"\n-        def contentType = \"type\"\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(startTime, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sas = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setStartTime(startTime)\n-            .setProtocol(sasProtocol)\n-            .setSasIpRange(ipRange)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(contentDisposition)\n-            .setContentEncoding(contentEncoding)\n-            .setContentLanguage(contentLanguage)\n-            .setContentType(contentType)\n-            .setContainerName(snapshotBlob.getContainerName())\n-            .setBlobName(snapshotBlob.getBlobName())\n-            .setSnapshotId(snapshotBlob.getSnapshotId())\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        // base blob with snapshot SAS\n-        def client1 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client1.download(new ByteArrayOutputStream())\n-\n-        then:\n-        // snapshot-level SAS shouldn't be able to access base blob\n-        thrown(BlobStorageException)\n-\n-        when:\n-        // blob snapshot with snapshot SAS\n-        def client2 = getBlobClient(sas, cc.getBlobContainerUrl(), blobName, snapshotId).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client2.download(os)\n-\n-        then:\n-        notThrown(BlobStorageException)\n-        os.toString() == new String(data)\n-\n-        and:\n-        def properties = client2.getProperties()\n-\n-        then:\n-        properties.getCacheControl() == \"cache\"\n-        properties.getContentDisposition() == \"disposition\"\n-        properties.getContentEncoding() == \"encoding\"\n-        properties.getContentLanguage() == \"language\"\n-    }\n-\n-    def \"serviceSASSignatureValues network test container user delegation\"() {\n-        setup:\n-        def permissions = new BlobContainerSasPermission()\n-            .setReadPermission(true)\n-            .setWritePermission(true)\n-            .setCreatePermission(true)\n-            .setDeletePermission(true)\n-            .setAddPermission(true)\n-            .setListPermission(true)\n-\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def key = getOAuthServiceClient().getUserDelegationKey(null, expiryTime)\n-\n-        def keyOid = getConfigValue(key.getSignedObjectId())\n-        key.setSignedObjectId(keyOid)\n-\n-        def keyTid = getConfigValue(key.getSignedTenantId())\n-        key.setSignedTenantId(keyTid)\n-        when:\n-        def sasWithPermissions = new BlobServiceSasSignatureValues()\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .setVersion(BlobServiceVersion.V2019_02_02.getVersion())\n-            .setContainerName(cc.getBlobContainerName())\n-            .generateSasQueryParameters(key, primaryCredential.getAccountName())\n-            .encode()\n-\n-        def client = getContainerClient(sasWithPermissions, cc.getBlobContainerUrl())\n-        client.listBlobs().iterator().hasNext()\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network test blob read\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        def os = new ByteArrayOutputStream()\n-        client.download(os)\n-\n-        then:\n-        os.toString() == new String(data)\n-    }\n-\n-    def \"accountSAS network test blob delete fails\"() {\n-        setup:\n-        def data = \"test\".getBytes()\n-        def blobName = generateBlobName()\n-        def bu = cc.getBlobClient(blobName).getBlockBlobClient()\n-        bu.upload(new ByteArrayInputStream(data), data.length)\n-\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def client = getBlobClient(sas, cc.getBlobContainerUrl(), blobName).getBlockBlobClient()\n-        client.delete()\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container fails\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(false)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        thrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network create container succeeds\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        when:\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def sc = getServiceClient(sas, primaryBlobServiceClient.getAccountUrl())\n-        sc.createBlobContainer(generateContainerName())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    def \"accountSAS network account sas token on endpoint\"() {\n-        setup:\n-        def service = new AccountSasService()\n-            .setBlobAccess(true)\n-        def resourceType = new AccountSasResourceType()\n-            .setContainer(true)\n-            .setService(true)\n-            .setObject(true)\n-        def permissions = new AccountSasPermission()\n-            .setReadPermission(true)\n-            .setCreatePermission(true)\n-        def expiryTime = getUTCNow().plusDays(1)\n-\n-        def sas = new AccountSasSignatureValues()\n-            .setServices(service.toString())\n-            .setResourceTypes(resourceType.toString())\n-            .setPermissions(permissions)\n-            .setExpiryTime(expiryTime)\n-            .generateSasQueryParameters(primaryCredential)\n-            .encode()\n-        def containerName = generateContainerName()\n-        def blobName = generateBlobName()\n-\n-        when:\n-        def sc = getServiceClientBuilder(null, primaryBlobServiceClient.getAccountUrl() + \"?\" + sas, null).buildClient()\n-        sc.createBlobContainer(containerName)\n-\n-        def cc = getContainerClientBuilder(primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"?\" + sas).buildClient()\n-        cc.getProperties()\n-\n-        def bc = getBlobClient(primaryCredential, primaryBlobServiceClient.getAccountUrl() + \"/\" + containerName + \"/\" + blobName + \"?\" + sas)\n-\n-        def file = getRandomFile(256)\n-        bc.uploadFromFile(file.toPath().toString())\n-\n-        then:\n-        notThrown(BlobStorageException)\n-    }\n-\n-    /*\n-     This test will ensure that each field gets placed into the proper location within the string to sign and that null\n-     values are handled correctly. We will validate the whole SAS with service calls as well as correct serialization of\n-     individual parts later.\n-     */\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def p = new BlobSasPermission()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setIdentifier(identifier)\n-            .setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-\n-        def token = v.generateSasQueryParameters(primaryCredential)\n-        then:\n-        token.getSignature() == primaryCredential.computeHmac256(expected)\n-\n-        /*\n-        We don't test the blob or containerName properties because canonicalized resource is always added as at least\n-        /blob/accountName. We test canonicalization of resources later. Again, this is not to test a fully functional\n-        sas but the construction of the string to sign.\n-        Signed resource is tested elsewhere, as we work some minor magic in choosing which value to use.\n-         */\n-        where:\n-        startTime                                                 | identifier | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"id\"       | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\nid\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null       | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    @Unroll\n-    def \"serviceSasSignatures string to sign user delegation key\"() {\n-        when:\n-        def v = new BlobServiceSasSignatureValues()\n-        def expected = String.format(expectedStringToSign, primaryCredential.getAccountName())\n-\n-        def p = new BlobSasPermission()\n-        p.setReadPermission(true)\n-        v.setPermissions(p)\n-\n-        v.setStartTime(startTime)\n-        def e = OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)\n-        v.setExpiryTime(e)\n-\n-        v.setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapId)\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setProtocol(protocol)\n-            .setCacheControl(cacheControl)\n-            .setContentDisposition(disposition)\n-            .setContentEncoding(encoding)\n-            .setContentLanguage(language)\n-            .setContentType(type)\n-        def key = new UserDelegationKey()\n-            .setSignedObjectId(keyOid)\n-            .setSignedTenantId(keyTid)\n-            .setSignedStart(keyStart)\n-            .setSignedExpiry(keyExpiry)\n-            .setSignedService(keyService)\n-            .setSignedVersion(keyVersion)\n-            .setValue(keyValue)\n-        def token = v.generateSasQueryParameters(key, primaryCredential.getAccountName())\n-\n-        then:\n-        token.getSignature() == StorageImplUtils.computeHMac256(key.getValue(), expected)\n-\n-        /*\n-        We test string to sign functionality directly related to user delegation sas specific parameters\n-         */\n-        where:\n-        startTime                                                 | keyOid                                 | keyTid                                 | keyStart                                                              | keyExpiry                                                             | keyService | keyVersion   | keyValue                                       | ipRange          | protocol               | snapId   | cacheControl | disposition   | encoding   | language   | type   || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | \"11111111-1111-1111-1111-111111111111\" | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n11111111-1111-1111-1111-111111111111\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | \"22222222-2222-2222-2222-222222222222\" | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n22222222-2222-2222-2222-222222222222\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | OffsetDateTime.of(LocalDateTime.of(2018, 1, 1, 0, 0), ZoneOffset.UTC) | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n2018-01-01T00:00:00Z\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | \"b\"        | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\nb\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | \"2018-06-17\" | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n2018-06-17\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | new SasIpRange() | null                   | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | SasProtocol.HTTPS_ONLY | null     | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | \"snapId\" | null         | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nbs\\nsnapId\\n\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | \"control\"    | null          | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\ncontrol\\n\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | \"disposition\" | null       | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\ndisposition\\n\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | \"encoding\" | null       | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\nencoding\\n\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | \"language\" | null   || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\nlanguage\\n\"\n-        null                                                      | null                                   | null                                   | null                                                                  | null                                                                  | null       | null         | \"3hd4LRwrARVGbeMRQRfTLIsGMkCPuZJnvxZDU7Gak8c=\" | null             | null                   | null     | null         | null          | null       | null       | \"type\" || \"r\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n/blob/%s/containerName/blobName\\n\\n\\n\\n\\n\\n\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\nb\\n\\n\\n\\n\\n\\ntype\"\n-    }\n-\n-    def \"serviceSasSignatureValues IA\"() {\n-        setup:\n-        def v = new BlobServiceSasSignatureValues()\n-            .setSnapshotId(\"2018-01-01T00:00:00.0000000Z\")\n-\n-        when:\n-        v.generateSasQueryParameters(null)\n-\n-        then:\n-        def e = thrown(NullPointerException)\n-        e.getMessage().contains(\"storageSharedKeyCredential\")\n-    }\n-\n-    @Unroll\n-    def \"BlobSASPermissions toString\"() {\n-        setup:\n-        def perms = new BlobSasPermission()\n-            .setReadPermission(read)\n-            .setWritePermission(write)\n-            .setDeletePermission(delete)\n-            .setCreatePermission(create)\n-            .setAddPermission(add)\n-            .setDeleteVersionPermission(deleteVersion)\n-\n-        expect:\n-        perms.toString() == expectedString\n-\n-        where:\n-        read  | write | delete | create | add   | deleteVersion || expectedString\n-        true  | false | false  | false  | false | false         || \"r\"\n-        false | true  | false  | false  | false | false         || \"w\"\n-        false | false | true   | false  | false | false         || \"d\"\n-        false | false | false  | true   | false | false         || \"c\"\n-        false | false | false  | false  | true  | false         || \"a\"\n-        false | false | false  | false  | false | true          || \"x\"\n-        true  | true  | true   | true   | true  | true          || \"racwdx\"\n-    }\n-\n-    @Unroll\n-    def \"BlobSASPermissions parse\"() {\n-        when:\n-        def perms = BlobSasPermission.parse(permString)\n-\n-        then:\n-        perms.hasReadPermission() == read\n-        perms.hasWritePermission() == write\n-        perms.hasDeletePermission() == delete\n-        perms.hasCreatePermission() == create\n-        perms.hasAddPermission() == add\n-        perms.hasDeleteVersionPermission() == deleteVersion\n-\n-        where:\n-        permString || read  | write | delete | create | add   | deleteVersion\n-        \"r\"        || true  | false | false  | false  | false | false\n-        \"w\"        || false | true  | false  | false  | false | false\n-        \"d\"        || false | false | true   | false  | false | false\n-        \"c\"        || false | false | false  | true   | false | false\n-        \"a\"        || false | false | false  | false  | true  | false\n-        \"x\"        || false | false | false  | false  | false | true\n-        \"racwdx\"    || true  | true  | true   | true   | true  | true\n-        \"dcxwra\"    || true  | true  | true   | true   | true  | true\n-    }\n-\n-    def \"BlobSASPermissions parse IA\"() {\n-        when:\n-        BlobSasPermission.parse(\"rwaq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    @Unroll\n-    def \"ContainerSASPermissions toString\"() {\n-        setup:\n-        def perms = new BlobContainerSasPermission()\n-            .setReadPermission(read)\n-            .setWritePermission(write)\n-            .setDeletePermission(delete)\n-            .setCreatePermission(create)\n-            .setAddPermission(add)\n-            .setListPermission(list)\n-            .setDeleteVersionPermission(deleteVersion)\n-\n-        expect:\n-        perms.toString() == expectedString\n-\n-        where:\n-        read  | write | delete | create | add   | list  | deleteVersion || expectedString\n-        true  | false | false  | false  | false | false | false         || \"r\"\n-        false | true  | false  | false  | false | false | false         || \"w\"\n-        false | false | true   | false  | false | false | false         || \"d\"\n-        false | false | false  | true   | false | false | false         || \"c\"\n-        false | false | false  | false  | true  | false | false         || \"a\"\n-        false | false | false  | false  | false | true  | false         || \"l\"\n-        false | false | false  | false  | false | false | true          || \"x\"\n-        true  | true  | true   | true   | true  | true  | true          || \"racwdxl\"\n-    }\n-\n-    @Unroll\n-    def \"ContainerSASPermissions parse\"() {\n-        when:\n-        def perms = BlobContainerSasPermission.parse(permString)\n-\n-        then:\n-        perms.hasReadPermission() == read\n-        perms.hasWritePermission() == write\n-        perms.hasDeletePermission() == delete\n-        perms.hasCreatePermission() == create\n-        perms.hasAddPermission() == add\n-        perms.hasListPermission() == list\n-        perms.hasDeleteVersionPermission() == deleteVersion\n-\n-        where:\n-        permString || read  | write | delete | create | add   | list  | deleteVersion\n-        \"r\"        || true  | false | false  | false  | false | false | false\n-        \"w\"        || false | true  | false  | false  | false | false | false\n-        \"d\"        || false | false | true   | false  | false | false | false\n-        \"c\"        || false | false | false  | true   | false | false | false\n-        \"a\"        || false | false | false  | false  | true  | false | false\n-        \"l\"        || false | false | false  | false  | false | true  | false\n-        \"x\"        || false | false | false  | false  | false | false | true\n-        \"racwdxl\"  || true  | true  | true   | true   | true  | true  | true\n-        \"dcwxrla\"  || true  | true  | true   | true   | true  | true  | true\n-    }\n-\n-    def \"ContainerSASPermissions parse IA\"() {\n-        when:\n-        BlobContainerSasPermission.parse(\"rwaq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    @Unroll\n-    def \"IPRange toString\"() {\n-        setup:\n-        def ip = new SasIpRange()\n-            .setIpMin(min)\n-            .setIpMax(max)\n-\n-        expect:\n-        ip.toString() == expectedString\n-\n-        where:\n-        min  | max  || expectedString\n-        \"a\"  | \"b\"  || \"a-b\"\n-        \"a\"  | null || \"a\"\n-        null | \"b\"  || \"\"\n-    }\n-\n-    @Unroll\n-    def \"IPRange parse\"() {\n-        when:\n-        def ip = SasIpRange.parse(rangeStr)\n-\n-        then:\n-        ip.getIpMin() == min\n-        ip.getIpMax() == max\n-\n-        where:\n-        rangeStr || min | max\n-        \"a-b\"    || \"a\" | \"b\"\n-        \"a\"      || \"a\" | null\n-        \"\"       || \"\"  | null\n-    }\n-\n-    @Unroll\n-    def \"SASProtocol parse\"() {\n-        expect:\n-        SasProtocol.parse(protocolStr) == protocol\n-\n-        where:\n-        protocolStr  || protocol\n-        \"https\"      || SasProtocol.HTTPS_ONLY\n-        \"https,http\" || SasProtocol.HTTPS_HTTP\n-    }\n-\n-    @Unroll\n-    def \"ServiceSASSignatureValues assertGenerateOk\"() {\n-        when:\n-        def serviceSASSignatureValues = new BlobServiceSasSignatureValues()\n-            .setVersion(BlobSasServiceVersion.getLatest().getVersion())\n-            .setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setSnapshotId(snapshotId)\n-            .setPermissions(BlobContainerSasPermission.parse(\"rl\"))\n-\n-        serviceSASSignatureValues.generateSasQueryParameters(new StorageSharedKeyCredential(\"n\", \"key\"))\n-\n-        then:\n-\n-        thrown(IllegalArgumentException)\n-\n-        where:\n-        snapshotId | _\n-        null       | _\n-        \"id\"       | _\n-    }\n-\n-    /*\n-     This test will ensure that each field gets placed into the proper location within the string to sign and that null\n-     values are handled correctly. We will validate the whole SAS with service calls as well as correct serialization of\n-     individual parts later.\n-     */\n-\n-    @Unroll\n-    def \"accountSasSignatures string to sign\"() {\n-        when:\n-        def v = new AccountSasSignatureValues()\n-        def p = new AccountSasPermission()\n-            .setReadPermission(true)\n-        v.setPermissions(p)\n-            .setServices(\"b\")\n-            .setResourceTypes(\"o\")\n-            .setStartTime(startTime)\n-            .setExpiryTime(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n-        if (ipRange != null) {\n-            def ipR = new SasIpRange()\n-            ipR.setIpMin(\"ip\")\n-            v.setSasIpRange(ipR)\n-        }\n-        v.setProtocol(protocol)\n-\n-        def token = v.generateSasQueryParameters(primaryCredential)\n-\n-        then:\n-        token.getSignature() == primaryCredential.computeHmac256(String.format(expectedStringToSign, primaryCredential.getAccountName()))\n-\n-        where:\n-        startTime                                                 | ipRange          | protocol               || expectedStringToSign\n-        OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | null             | null                   || \"%s\" + \"\\nr\\nb\\no\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\n\"\n-        null                                                      | new SasIpRange() | null                   || \"%s\" + \"\\nr\\nb\\no\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\nip\\n\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\n\"\n-        null                                                      | null             | SasProtocol.HTTPS_ONLY || \"%s\" + \"\\nr\\nb\\no\\n\\n\" + Constants.ISO_8601_UTC_DATE_FORMATTER.format(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)) + \"\\n\\n\" + SasProtocol.HTTPS_ONLY + \"\\n\" + BlobSasServiceVersion.getLatest().getVersion() + \"\\n\"\n-    }\n-\n-    @Unroll\n-    def \"accountSasSignatureValues IA\"() {\n-        setup:\n-        def v = new AccountSasSignatureValues()\n-            .setPermissions(AccountSasPermission.parse(permissions))\n-            .setServices(service)\n-            .setResourceTypes(resourceType)\n-            .setExpiryTime(expiryTime)\n-            .setVersion(version)\n-\n-        when:\n-        v.generateSasQueryParameters(creds)\n-\n-        then:\n-        def e = thrown(NullPointerException)\n-        e.getMessage().contains(parameter)\n-\n-        where:\n-        permissions | service | resourceType | expiryTime                                                | version | creds             || parameter\n-        \"c\"         | null    | \"c\"          | OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | \"v\"     | primaryCredential || \"services\"\n-        \"c\"         | \"b\"     | null         | OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | \"v\"     | primaryCredential || \"resourceTypes\"\n-        \"c\"         | \"b\"     | \"c\"          | null                                                      | \"v\"     | primaryCredential || \"expiryTime\"\n-        \"c\"         | \"b\"     | \"c\"          | OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC) | \"v\"     | null              || \"storageSharedKeyCredentials\"\n-    }\n-\n-    def \"accountSasSignatureValues null\"() {\n-        when:\n-        setup:\n-        def v = new AccountSasSignatureValues()\n-\n-        when:\n-        v.setPermissions(null)\n-\n-\n-        then:\n-        def e = thrown(NullPointerException)\n-        e.getMessage().contains(\"permissions\")\n-    }\n-\n-    def \"accountSasSignatureValues null permission\"() {\n-        when:\n-        AccountSasPermission.parse(null)\n-\n-        then:\n-        thrown(NullPointerException)\n-    }\n-\n-    @Unroll\n-    def \"AccountSASPermissions toString\"() {\n-        setup:\n-        def perms = new AccountSasPermission()\n-        perms.setReadPermission(read)\n-            .setWritePermission(write)\n-            .setDeletePermission(delete)\n-            .setListPermission(list)\n-            .setAddPermission(add)\n-            .setCreatePermission(create)\n-            .setUpdatePermission(update)\n-            .setProcessMessages(process)\n-            .setDeleteVersionPermission(deleteVersion)\n-\n-        expect:\n-        perms.toString() == expectedString\n-\n-        where:\n-        read  | write | delete | list  | add   | create | update | process | deleteVersion || expectedString\n-        true  | false | false  | false | false | false  | false  | false   | false         || \"r\"\n-        false | true  | false  | false | false | false  | false  | false   | false         || \"w\"\n-        false | false | true   | false | false | false  | false  | false   | false         || \"d\"\n-        false | false | false  | true  | false | false  | false  | false   | false         || \"l\"\n-        false | false | false  | false | true  | false  | false  | false   | false         || \"a\"\n-        false | false | false  | false | false | true   | false  | false   | false         || \"c\"\n-        false | false | false  | false | false | false  | true   | false   | false         || \"u\"\n-        false | false | false  | false | false | false  | false  | true    | false         || \"p\"\n-        false | false | false  | false | false | false  | false  | false   | true          || \"x\"\n-        true  | true  | true   | true  | true  | true   | true   | true    | true          || \"rwdxlacup\"\n-    }\n-\n-    @Unroll\n-    def \"AccountSASPermissions parse\"() {\n-        when:\n-        def perms = AccountSasPermission.parse(permString)\n-\n-        then:\n-        perms.hasReadPermission() == read\n-        perms.hasWritePermission() == write\n-        perms.hasDeletePermission() == delete\n-        perms.hasListPermission() == list\n-        perms.hasAddPermission() == add\n-        perms.hasCreatePermission() == create\n-        perms.hasUpdatePermission() == update\n-        perms.hasProcessMessages() == process\n-        perms.hasDeleteVersionPermission() == deleteVersion\n-\n-        where:\n-        permString  || read  | write | delete | list  | add   | create | update | process | deleteVersion\n-        \"r\"         || true  | false | false  | false | false | false  | false  | false   | false\n-        \"w\"         || false | true  | false  | false | false | false  | false  | false   | false\n-        \"d\"         || false | false | true   | false | false | false  | false  | false   | false\n-        \"l\"         || false | false | false  | true  | false | false  | false  | false   | false\n-        \"a\"         || false | false | false  | false | true  | false  | false  | false   | false\n-        \"c\"         || false | false | false  | false | false | true   | false  | false   | false\n-        \"u\"         || false | false | false  | false | false | false  | true   | false   | false\n-        \"p\"         || false | false | false  | false | false | false  | false  | true    | false\n-        \"x\"         || false | false | false  | false | false | false  | false  | false   | true\n-        \"rwdxlacup\" || true  | true  | true   | true  | true  | true   | true   | true    | true\n-        \"lwrupcaxd\" || true  | true  | true   | true  | true  | true   | true   | true    | true\n-    }\n-\n-    def \"AccountSASPermissions parse IA\"() {\n-        when:\n-        AccountSasPermission.parse(\"rwaq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    @Unroll\n-    def \"AccountSASResourceType toString\"() {\n-        setup:\n-        def resourceTypes = new AccountSasResourceType()\n-            .setService(service)\n-            .setContainer(container)\n-            .setObject(object)\n-\n-        expect:\n-        resourceTypes.toString() == expectedString\n-\n-        where:\n-        service | container | object || expectedString\n-        true    | false     | false  || \"s\"\n-        false   | true      | false  || \"c\"\n-        false   | false     | true   || \"o\"\n-        true    | true      | true   || \"sco\"\n-    }\n-\n-    @Unroll\n-    def \"AccountSASResourceType parse\"() {\n-        when:\n-        def resourceTypes = AccountSasResourceType.parse(resourceTypeString)\n-\n-        then:\n-        resourceTypes.isService() == service\n-        resourceTypes.isContainer() == container\n-        resourceTypes.isObject() == object\n-\n-        where:\n-        resourceTypeString || service | container | object\n-        \"s\"                || true    | false     | false\n-        \"c\"                || false   | true      | false\n-        \"o\"                || false   | false     | true\n-        \"sco\"              || true    | true      | true\n-    }\n-\n-    @Unroll\n-    def \"AccountSASResourceType IA\"() {\n-        when:\n-        AccountSasResourceType.parse(\"scq\")\n-\n-        then:\n-        thrown(IllegalArgumentException)\n-    }\n-\n-    // TODO : Figure out how to properly port this test over since I changed it to a common sas params\n-    @Ignore\n-    def \"BlobURLParts\"() {\n-        setup:\n-        def parts = new BlobUrlParts()\n-        parts.setScheme(\"http\")\n-            .setHost(\"host\")\n-            .setContainerName(\"container\")\n-            .setBlobName(\"blob\")\n-            .setSnapshot(\"snapshot\")\n-        def sasValues = new BlobServiceSasSignatureValues()\n-            .setPermissions(new BlobSasPermission().setReadPermission(true))\n-            .setContainerName(\"containerName\")\n-            .setBlobName(\"blobName\")\n-            .setExpiryTime(OffsetDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n-        parts.setSasQueryParameters(sasValues.generateSasQueryParameters(primaryCredential))\n-\n-        when:\n-        def splitParts = parts.toUrl().toString().split(\"\\\\?\")\n-\n-        then:\n-        splitParts.size() == 2 // Ensure that there is only one question mark even when sas and snapshot are present\n-        splitParts[0] == \"http://host/container/blob\"\n-        splitParts[1].contains(\"snapshot=snapshot\")\n-        splitParts[1].contains(\"sp=r\")\n-        splitParts[1].contains(\"sig=\")\n-        splitParts[1].split(\"&\").size() == 6 // snapshot & sv & sr & sp & sig\n-    }\n-\n-    def \"URLParser\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1ODI0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13244#discussion_r455958244", "bodyText": "duplicated in test below using snapshot", "author": "gapra-msft", "createdAt": "2020-07-16T17:38:30Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/SasClientTests.groovy", "diffHunk": "@@ -62,40 +68,7 @@ class SasClientTests extends APISpec {\n         notThrown(BlobStorageException)\n     }\n \n-    def \"network test blob snapshot\"() {", "originalCommit": "e632c5d21e34fe4b5d1756e36d4ad8d0d88f9718", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1af625ab5f7f42ad1ecfebc9bf5c01a693feaf8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d1af625ab5f7f42ad1ecfebc9bf5c01a693feaf8", "message": "re-recorded tests", "committedDate": "2020-07-16T19:40:28Z", "type": "commit"}]}