{"pr_number": 17284, "pr_title": "Applied arch board feedback for Key Vault Administration", "pr_createdAt": "2020-11-07T02:25:48Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17284", "timeline": [{"oid": "87b09e6f58e7cea97f566c65406f5edc7c037748", "url": "https://github.com/Azure/azure-sdk-for-java/commit/87b09e6f58e7cea97f566c65406f5edc7c037748", "message": "Removed exposure of implementation package and any usage of KeyVaultErrorException from public APIs.", "committedDate": "2020-11-06T23:38:15Z", "type": "commit"}, {"oid": "46089c81a924795e6ecfae0c426048f4185d7922", "url": "https://github.com/Azure/azure-sdk-for-java/commit/46089c81a924795e6ecfae0c426048f4185d7922", "message": "Renamed KeyVaultRoleAssignmentScope to KeyVaultRoleScope. Changed the name type from UUID to String in role assignment APIs.", "committedDate": "2020-11-06T23:52:54Z", "type": "commit"}, {"oid": "2bb49f9fe930e1693b31b934950990c3b9d90837", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bb49f9fe930e1693b31b934950990c3b9d90837", "message": "Renamed APIs for re-hydrating LROs.", "committedDate": "2020-11-06T23:59:05Z", "type": "commit"}, {"oid": "11ee6872725eb4d52999a4aa177aeb97db44b6f6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11ee6872725eb4d52999a4aa177aeb97db44b6f6", "message": "Added ServiceVersion support in the clients and their builders. Internally this will not be used until some changes in the code generation tool are applied.", "committedDate": "2020-11-07T00:53:06Z", "type": "commit"}, {"oid": "66ab2cb6545b8288736f46362dec662fca877047", "url": "https://github.com/Azure/azure-sdk-for-java/commit/66ab2cb6545b8288736f46362dec662fca877047", "message": "Annotated read-only classes with @Immutable. Added the \"allowed\" prefix to some KeyVaultPermission properties. Change the type of `startTime` and `endTime` in KeyVaultLongRunningOperation from Long to OffsetDateTime.", "committedDate": "2020-11-07T00:55:09Z", "type": "commit"}, {"oid": "9cb2d97806db2ffde29209b89800219439d4d8a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9cb2d97806db2ffde29209b89800219439d4d8a3", "message": "Changed the KeyVaultRoleScope enum from using URI to URL and added an overload that takes a the string representation of a URL.", "committedDate": "2020-11-07T01:13:23Z", "type": "commit"}, {"oid": "c36fc1793c45ae788361a0291e40baf10e882758", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c36fc1793c45ae788361a0291e40baf10e882758", "message": "Added overloads that allow passing a custom polling interval to LROs.", "committedDate": "2020-11-07T01:20:37Z", "type": "commit"}, {"oid": "4dae4b876a3f71ea0c515470707cf52d101a7677", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4dae4b876a3f71ea0c515470707cf52d101a7677", "message": "Removed the use of KeyVaultRoleAssignmentProperties in clients' public APIs in favor of using the `roleDefinitionId` and `servicePrincipalId` values directly.", "committedDate": "2020-11-07T02:14:25Z", "type": "commit"}, {"oid": "103b3667fea5e83390eec18e23e23e8db11123d9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/103b3667fea5e83390eec18e23e23e8db11123d9", "message": "Fixed Javadoc and test issues.", "committedDate": "2020-11-07T03:18:13Z", "type": "commit"}, {"oid": "2d1bba8f99d499c4582c56b86e785c6abe2ad53f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d1bba8f99d499c4582c56b86e785c6abe2ad53f", "message": "Fixed checkstyle issues.", "committedDate": "2020-11-07T04:16:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNDQ3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520114473", "bodyText": "Curious - why did we remove the context that the name would be a UUID?", "author": "christothes", "createdAt": "2020-11-09T20:55:53Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -273,165 +279,162 @@ public String getVaultUrl() {\n     }\n \n     /**\n-     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated name.", "originalCommit": "2d1bba8f99d499c4582c56b86e785c6abe2ad53f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1Mjc3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520852778", "bodyText": "From the Arch Board meeting I got the impression that the name could be any String and not only valid UUIDs, is that not the case?", "author": "vcolin7", "createdAt": "2020-11-10T20:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNDQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NTkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520855915", "bodyText": "The one that can be any string is the principal Id. the role name must be a UUID", "author": "christothes", "createdAt": "2020-11-10T20:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNDQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxMzUxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521213517", "bodyText": "Please see my other answer about UUID. Basically other Java SDKs take a String for these type of value and let the service validate it.", "author": "vcolin7", "createdAt": "2020-11-11T09:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNDQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzNDM1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521634352", "bodyText": "Makes sense, I was just suggesting that we leave some kind of hint in the doc strings so that developers have a chance to get it right the first time.", "author": "christothes", "createdAt": "2020-11-11T20:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNDQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjUxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521692519", "bodyText": "I will make sure we indicate that it's a UUID in the Javadoc :)", "author": "vcolin7", "createdAt": "2020-11-11T23:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNDQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE0NDg0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520144849", "bodyText": "should this be a UUID? I believe the service call will fail if it isn't a valid UUID string value.", "author": "christothes", "createdAt": "2020-11-09T21:54:28Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -273,165 +279,162 @@ public String getVaultUrl() {\n     }\n \n     /**\n-     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated name.\n      *\n-     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     * @param roleScope The {@link KeyVaultRoleScope roleScope} of the {@link KeyVaultRoleAssignment} to\n      * create.\n-     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @param roleDefinitionId The {@link KeyVaultRoleDefinition role definition} ID for the role assignment.\n+     * @param principalId The principal ID assigned to the role. This maps to the ID inside the Active Directory.\n      * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n-     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n-     * {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleScope roleScope}, {@link String roleAssignmentName},\n+     * {@link String roleDefinitionId} or {@link String principalId} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope, KeyVaultRoleAssignmentProperties properties) {\n-        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleScope roleScope, String roleDefinitionId, String principalId) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID().toString(), roleDefinitionId, principalId);\n     }\n \n     /**\n      * Creates a {@link KeyVaultRoleAssignment}.\n      *\n-     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     * @param roleScope The {@link KeyVaultRoleScope roleScope} of the {@link KeyVaultRoleAssignment} to\n      * create.\n-     * @param name The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n-     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @param roleAssignmentName The roleAssignmentName used to create the {@link KeyVaultRoleAssignment}. It can be any", "originalCommit": "2d1bba8f99d499c4582c56b86e785c6abe2ad53f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MzA1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520853055", "bodyText": "We decided to go with String and let the service validate to be consistent with other Java SDKs.", "author": "vcolin7", "createdAt": "2020-11-10T20:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE0NDg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MzY2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521693661", "bodyText": "Resolving this based on this conversation.", "author": "vcolin7", "createdAt": "2020-11-11T23:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE0NDg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520175211", "bodyText": "Are these valid version strings? I believe the service doesn't currently enforce any, but will that always be true?", "author": "christothes", "createdAt": "2020-11-09T22:59:08Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAdministrationServiceVersion.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.util.ServiceVersion;\n+\n+/**\n+ * The versions of Azure Key Vault Administration service supported by this client library.\n+ */\n+public enum KeyVaultAdministrationServiceVersion implements ServiceVersion {\n+    V7_0(\"7.0\"),\n+    V7_1(\"7.1\"),", "originalCommit": "2d1bba8f99d499c4582c56b86e785c6abe2ad53f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NjM3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520186375", "bodyText": "For MHSM, no. They are new with 7.2-preview. Even if/when AKV supports any of these, it'll start at whatever version. At this point, MHSM and KV need to be in lock-step for api-version. /cc @jlichwa @amitbapat", "author": "heaths", "createdAt": "2020-11-09T23:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MzY4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520853680", "bodyText": "I think I should remove the older versions since they don't support KeyVaultAdministration, I think I added them because I based this class off of what we have in other KV SDKs. What do you think?", "author": "vcolin7", "createdAt": "2020-11-10T20:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU2NjEyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521566120", "bodyText": "Yes, I would remove these values for the Administration package.", "author": "heaths", "createdAt": "2020-11-11T18:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3NTIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3OTQxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520179410", "bodyText": "I'm not sure if this conflicts with being idiomatic to Java, but the .NET guidelines specify that the operation should be hydrated from a previous operation via a public constructor rather than a parameter on the begin... method.", "author": "christothes", "createdAt": "2020-11-09T23:09:39Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultBackupAsyncClient.java", "diffHunk": "@@ -406,33 +450,56 @@ private static LongRunningOperationStatus toLongRunningOperationStatus(String op\n     }\n \n     /**\n-     * Gets a pending {@link KeyVaultRestoreOperation full or selective restore operation} from the Key Vault.\n+     * Gets a pending {@link KeyVaultRestoreOperation full restore operation} from the Key Vault.\n+     *\n+     * @param jobId The operation identifier.\n+     * @throws NullPointerException if the {@code jobId} is null.\n+     * @return A {@link PollerFlux} polling on the {@link KeyVaultRestoreOperation restore operation} status.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PollerFlux<KeyVaultRestoreOperation, Void> beginRestore(String jobId) {\n+        return beginRestore(jobId, getDefaultPollingInterval());\n+    }\n+\n+    /**\n+     * Gets a pending {@link KeyVaultRestoreOperation full restore operation} from the Key Vault.\n      *\n      * @param jobId The operation identifier.\n+     * @param pollingInterval The interval at which the operation status will be polled for.\n      * @throws NullPointerException if the {@code jobId} is null.\n      * @return A {@link PollerFlux} polling on the {@link KeyVaultRestoreOperation restore operation} status.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PollerFlux<KeyVaultRestoreOperation, Void> getRestoreOperation(String jobId) {\n+    public PollerFlux<KeyVaultRestoreOperation, Void> beginRestore(String jobId, Duration pollingInterval) {", "originalCommit": "2d1bba8f99d499c4582c56b86e785c6abe2ad53f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NTM4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r520855385", "bodyText": "There is a guildeline for that in Java that states: \"DO provide a way to instantiate a poller with the serialized state of another poller to begin where it left off, for example by passing the state as a parameter to the same method which started the operation, or by directly instantiating a poller with that state.\"\nDoes this mean we should accept a KeyVaultBackupOperation/KeyVaultRestoreOperation or even the poller object itself instead of the jobId? //cc @JonathanGiles, @srnagar", "author": "vcolin7", "createdAt": "2020-11-10T20:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNTk0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521125948", "bodyText": "Personally I think we should not overcomplicate things and move away from jobId, but I'm probably biased, maybe there's more data that backs the other option.", "author": "vcolin7", "createdAt": "2020-11-11T05:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE2MTA0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521161048", "bodyText": "The discussion we had in arch board was that Java, for now, does not offer rehydration of LROs. We have chosen to lazily add these as the demand arises, but I'm also aware that @srnagar is going to look into formalising a pattern to be used soon. For that reason my suggestion remains as it was in arch board - to not offer rehydration APIs here either.", "author": "JonathanGiles", "createdAt": "2020-11-11T07:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxMjQ1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521212454", "bodyText": "I was not sure where your suggestion stood on this so I went back to check the recording and got the impression these LROs were given approval after I mentioned the v-team thought we should have parity across Tier 1 languages. Thanks for clarifying that posture here. I think the best then will be removing the rehydration APIs for the time being until the guidelines are updated.", "author": "vcolin7", "createdAt": "2020-11-11T09:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3OTQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwMDI1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17284#discussion_r521700250", "bodyText": "I am working on a proposal for this and we should add this once that is finalized. Also, when this is formalized, we should add this to other libraries that have LRO APIs.", "author": "srnagar", "createdAt": "2020-11-11T23:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3OTQxMA=="}], "type": "inlineReview"}, {"oid": "c3b3072f1b2e0d541fecb3cce34cb796929c104a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3b3072f1b2e0d541fecb3cce34cb796929c104a", "message": "Applied arch board meeting and PR feedback:\n\n* Renamed parameters containing the 'Uri' suffix to 'Url'.\n* Changed the type of `startTime` and `endTime` in the constructor of KeyVaultLongRunningOperation and its subtypes from `Long` to `OffsetDateTime`.\n* Removed unnecessary versions from KeyVaultAdministrationServiceVersion.\n\nAdditional changes:\n\n* Renamed `scope` in KeyVaultRoleAssignment to `roleScope` to align with the access client APIs.\n* Polished Javadoc", "committedDate": "2020-11-11T10:12:54Z", "type": "commit"}, {"oid": "33b05388461012b219909402a881a27180607571", "url": "https://github.com/Azure/azure-sdk-for-java/commit/33b05388461012b219909402a881a27180607571", "message": "Removed APIs to refresh LROs based on PR feedback.", "committedDate": "2020-11-11T10:18:49Z", "type": "commit"}, {"oid": "08c01ce107024bedc6806f86e08568b515a0679e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08c01ce107024bedc6806f86e08568b515a0679e", "message": "Removed unused import in KeyVaultBackupAsyncClientTest.", "committedDate": "2020-11-11T11:18:38Z", "type": "commit"}]}