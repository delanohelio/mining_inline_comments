{"pr_number": 7429, "pr_title": "Moving CosmosItem (read, replace, delete) API onto CosmosContainer", "pr_createdAt": "2020-01-15T00:25:39Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7429", "timeline": [{"oid": "9c25b9be49227f043545a3c45cad80dcb7a401c0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c25b9be49227f043545a3c45cad80dcb7a401c0", "message": "Moving CosmosItem (read, replace, delete) API onto CosmosContainer\nCosmosItem API are changed typed API\nModifying tests to reflect the new item api", "committedDate": "2020-01-15T00:09:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MjkxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r366642914", "bodyText": "can't we assume that the second param is always partition key?\nthat way the caller doesn't have to explicitly wrap pk value in PartitionKey and implementation will take care of that.\nthoughts?", "author": "moderakh", "createdAt": "2020-01-15T00:28:01Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncReadBenchmark.java", "diffHunk": "@@ -53,7 +54,9 @@ protected void performWorkload(BaseSubscriber<CosmosAsyncItemResponse> baseSubsc\n         PojoizedJson doc = docsToRead.get(index);\n \n         String partitionKeyValue = doc.getId();\n-        Mono<CosmosAsyncItemResponse> result = cosmosAsyncContainer.getItem(doc.getId(), partitionKeyValue).read();\n+        Mono<CosmosAsyncItemResponse<PojoizedJson>> result = cosmosAsyncContainer.readItem(doc.getId(),\n+                                                                                           new PartitionKey(partitionKeyValue),", "originalCommit": "9c25b9be49227f043545a3c45cad80dcb7a401c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNjc5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369336797", "bodyText": "We are following the .net model of making partitionkey object manadatory.\nhttps://github.com/Azure/azure-cosmos-dotnet-v3/blob/8f1375a30799b3acf95d843b2db0c2447cbc3876/Microsoft.Azure.Cosmos/src/Resource/Container/Container.cs#L476", "author": "mbhaskar", "createdAt": "2020-01-22T01:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MjkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNzk4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369337989", "bodyText": "ok thanks", "author": "moderakh", "createdAt": "2020-01-22T02:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MjkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzE0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r366643140", "bodyText": "we should pass partition key to CosmosItemRequestOption here.\nThe intention of this benchmark is to measure perf when pk is passed as request options.", "author": "moderakh", "createdAt": "2020-01-15T00:28:53Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncWriteBenchmark.java", "diffHunk": "@@ -60,13 +61,13 @@ protected void hookOnError(Throwable throwable) {\n     @Override\n     protected void performWorkload(BaseSubscriber<CosmosAsyncItemResponse> baseSubscriber, long i) throws InterruptedException {\n         String partitionKey = uuid + i;\n-        Mono<CosmosAsyncItemResponse> obs;\n+        Mono<CosmosAsyncItemResponse<PojoizedJson>> obs;\n         if (configuration.isDisablePassingPartitionKeyAsOptionOnWrite()) {\n             // require parsing partition key from the doc\n             obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue));\n         } else {\n             // more optimized for write as partition ke is already passed as config\n-            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue), new CosmosItemRequestOptions(partitionKey));\n+            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue), new CosmosItemRequestOptions());", "originalCommit": "9c25b9be49227f043545a3c45cad80dcb7a401c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNzA0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369337043", "bodyText": "Added new API accept partition key and changed this call accordingly.", "author": "mbhaskar", "createdAt": "2020-01-22T01:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NDQzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r366644430", "bodyText": "this will result in double serialization (which was fixed prior to this PR)", "author": "moderakh", "createdAt": "2020-01-15T00:33:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -6,38 +6,37 @@\n import com.azure.cosmos.implementation.ResourceResponse;\n import org.apache.commons.lang3.StringUtils;\n \n-public class CosmosAsyncItemResponse extends CosmosResponse<CosmosItemProperties> {\n-    private final CosmosAsyncItem itemClient;\n-\n-    CosmosAsyncItemResponse(ResourceResponse<Document> response, PartitionKey partitionKey,\n-                            CosmosAsyncContainer container) {\n+public class CosmosAsyncItemResponse<T> extends CosmosResponse<CosmosItemProperties> {\n+    private final Class<T> itemClassType;\n+    \n+    CosmosAsyncItemResponse(ResourceResponse<Document> response, Class<T> klass) {\n         super(response);\n+        this.itemClassType = klass;\n         String bodyAsString = response.getBodyAsString();\n-        if (StringUtils.isEmpty(bodyAsString)) {\n+        if (StringUtils.isEmpty(bodyAsString)){\n             super.setProperties(null);\n-            itemClient = null;\n         } else {\n             CosmosItemProperties props = new CosmosItemProperties(bodyAsString);\n             super.setProperties(props);\n-            itemClient = new CosmosAsyncItem(props.getId(), partitionKey, container);\n         }\n     }\n \n     /**\n-     * Gets the itemSettings\n+     * Gets the resource .\n      *\n-     * @return the itemSettings\n+     * @return the resource\n      */\n-    public CosmosItemProperties getProperties() {\n-        return super.getProperties();\n+    public T getResource(){\n+        return super.getProperties().toObject(itemClassType);", "originalCommit": "9c25b9be49227f043545a3c45cad80dcb7a401c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNjk1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369336955", "bodyText": "Changed this to avoid double serialization. Now we directly use the resource string to convert to user object.", "author": "mbhaskar", "createdAt": "2020-01-22T01:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NDQzMA=="}], "type": "inlineReview"}, {"oid": "c1eeb5610cb0d57884251845516d441559476347", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1eeb5610cb0d57884251845516d441559476347", "message": "Fixing failing tests.", "committedDate": "2020-01-21T03:26:34Z", "type": "commit"}, {"oid": "8b860663c00791d4f326eb3e446abc626ed6338f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b860663c00791d4f326eb3e446abc626ed6338f", "message": "Avoiding multiple serializations/deserializations while converting to user types.", "committedDate": "2020-01-22T01:52:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MzMyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369343327", "bodyText": "Seems like an unused import, please remove it if it is.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:26:55Z", "path": "sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java", "diffHunk": "@@ -2,20 +2,26 @@\n // Licensed under the MIT License.\n package com.azure.cosmos.examples;\n \n+import com.azure.cosmos.ConnectionMode;\n+import com.azure.cosmos.ConnectionPolicy;\n+import com.azure.cosmos.ConsistencyPolicy;\n import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosAsyncContainer;\n import com.azure.cosmos.CosmosAsyncDatabase;\n-import com.azure.cosmos.CosmosAsyncItem;\n import com.azure.cosmos.CosmosAsyncItemResponse;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosClientException;\n import com.azure.cosmos.CosmosContainerProperties;\n+import com.azure.cosmos.CosmosItemProperties;\n import com.azure.cosmos.FeedOptions;\n import com.azure.cosmos.FeedResponse;\n+import com.azure.cosmos.PartitionKey;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import reactor.core.scheduler.Schedulers;\n \n+import static java.lang.System.exit;", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NTE5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369855193", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-01-22T23:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MzMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDA1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369344059", "bodyText": "What will be the behavior if partitionKey is passed as null ?\nI see a couple of options here.\nEither default it to PartitionKey.NONE or use something like this checkNoNull(partitionKey, \"Partition Key should not be null\")\nPlease make sure this behavior is consistent across all the APIs.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:30:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -179,23 +179,34 @@ CosmosAsyncContainer setId(String id) {\n      * successful completion will contain a single resource response with the\n      * created cosmos item. In case of failure the {@link Mono} will error.\n      *\n+     * @param <T> the type parameter\n      * @param item the cosmos item represented as a POJO or cosmos item object.\n+     * @param partitionKey the partition key\n      * @param options the request options.\n-     * @return an {@link Mono} containing the single resource response with the\n-     * created cosmos item or an error.\n+     * @return an {@link Mono} containing the single resource response with the created cosmos item or an error.\n      */\n-    public Mono<CosmosAsyncItemResponse> createItem(Object item, CosmosItemRequestOptions options) {\n+    public <T> Mono<CosmosAsyncItemResponse<T>> createItem(T item,\n+                                                           PartitionKey partitionKey,\n+                                                           CosmosItemRequestOptions options) {\n+        if (options == null) {\n+            options = new CosmosItemRequestOptions();\n+        }\n+        options.setPartitionKey(partitionKey);", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNzk4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369827987", "bodyText": "null is a valid partitionkey. Also, please note that null partitionkey and PartitionKey.NONE are totally different", "author": "mbhaskar", "createdAt": "2020-01-22T22:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDQ0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369344443", "bodyText": "3rd @param is missing.\nPlease replace an with a in return statement before Mono.\nPlease do this change here and everywhere else.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:32:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NjYxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369846614", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-01-22T22:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NTkxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369345913", "bodyText": "I have got this feedback from various customers, that on readItem() API, in v2 SDK if the item is not found, we used to return empty Observable().\nBecause it becomes really difficult for the end user to catch 404 and do nothing.\n@moderakh @kirankumarkolli @mbhaskar what should we do with v4 ?\n@mbhaskar do you know what .net behavior is ?\nAs I have also received feedback that we should be consistent across our SDKs.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:39:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n+     */\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) {\n+        return readItem(itemId, partitionKey, new CosmosItemRequestOptions(partitionKey), itemType);\n+    }\n+\n+    /**\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NTE3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369355178", "bodyText": "a response has more than just user data, it has activityId, request-charge, etc.\nAlthough returning Mono.empty() may look nice for the end-user who is only interested in user-data, but doesn't provide the the above response header for more advanced user who is interested in response headers.", "author": "moderakh", "createdAt": "2020-01-22T03:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NTkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NTUyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369855529", "bodyText": "Thanks for the response @moderakh. @kushagraThapar  make a note of this point, and we can discuss further if required and create a workitem for this.", "author": "mbhaskar", "createdAt": "2020-01-22T23:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NTkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NjUyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369346523", "bodyText": "For V4, I think we can change our AsyncDocumentClient APIs to return Mono for single returns so that we won't have to call .single() APIs here.\nRight now they return Flux<> for readItem which doesn't make sense.\nI believe @moderakh raised this point with v3.\nWe should correct that behavior for v4 for all the APIs if they return a single document / item.\nCalling this extra .single() when not needed will affect the performance of these APIs.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:42:47Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n+     */\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) {\n+        return readItem(itemId, partitionKey, new CosmosItemRequestOptions(partitionKey), itemType);\n+    }\n+\n+    /**\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n      *\n-     * @param id id of the item\n+     * @param itemId the item id\n      * @param partitionKey the partition key\n-     * @return a cosmos item\n+     * @param options the request cosmosItemRequestOptions\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n      */\n-    public CosmosAsyncItem getItem(String id, Object partitionKey) {\n-        return new CosmosAsyncItem(id, partitionKey, this);\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, \n+                                                  CosmosItemRequestOptions options, Class<T> itemType) {\n+        if (options == null) {\n+            options = new CosmosItemRequestOptions();\n+        }\n+        options.setPartitionKey(partitionKey);\n+        RequestOptions requestOptions = options.toRequestOptions();\n+        return this.getDatabase().getDocClientWrapper()\n+                   .readDocument(getItemLink(itemId), requestOptions)\n+                   .map(response -> new CosmosAsyncItemResponse<T>(response, itemType))\n+                   .single();", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NjIxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369356217", "bodyText": "I don't think this specific case may have any impact on perf as it has to be done somewhere. you are not removing the need for invoking single() you are moving it from here to AsyncDocumentClient.\nand yes ideally it has to be in AsyncDocumentClient for cleanness although not directly related to this PR. IMO can be done separately as a good improvement in a different PR.", "author": "moderakh", "createdAt": "2020-01-22T03:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NjUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NTc3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369855771", "bodyText": "+1. We can do it in a separate PR if necessary.", "author": "mbhaskar", "createdAt": "2020-01-22T23:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NjUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzM4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369347389", "bodyText": "Since responseBodyString can be empty string, can we please make sure it is handled well when parsing it to an itemClassType ?\nDo we want to throw error in that case, or return null ?", "author": "kushagraThapar", "createdAt": "2020-01-22T02:46:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -4,40 +4,41 @@\n \n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.Utils;\n import org.apache.commons.lang3.StringUtils;\n \n-public class CosmosAsyncItemResponse extends CosmosResponse<CosmosItemProperties> {\n-    private final CosmosAsyncItem itemClient;\n-\n-    CosmosAsyncItemResponse(ResourceResponse<Document> response, PartitionKey partitionKey,\n-                            CosmosAsyncContainer container) {\n+public class CosmosAsyncItemResponse<T> extends CosmosResponse<CosmosItemProperties> {\n+    private final Class<T> itemClassType;\n+    private final String responseBodyString;\n+    \n+    CosmosAsyncItemResponse(ResourceResponse<Document> response, Class<T> klass) {\n         super(response);\n-        String bodyAsString = response.getBodyAsString();\n-        if (StringUtils.isEmpty(bodyAsString)) {\n+        this.itemClassType = klass;\n+        responseBodyString = response.getBodyAsString();\n+        if (StringUtils.isEmpty(responseBodyString)){\n             super.setProperties(null);\n-            itemClient = null;\n         } else {\n-            CosmosItemProperties props = new CosmosItemProperties(bodyAsString);\n+            CosmosItemProperties props = new CosmosItemProperties(responseBodyString);\n             super.setProperties(props);\n-            itemClient = new CosmosAsyncItem(props.getId(), partitionKey, container);\n         }\n     }\n \n     /**\n-     * Gets the itemSettings\n+     * Gets the resource .\n      *\n-     * @return the itemSettings\n+     * @return the resource\n      */\n-    public CosmosItemProperties getProperties() {\n-        return super.getProperties();\n+    public T getResource(){\n+        return Utils.parse(responseBodyString, itemClassType);", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Njc5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369846792", "bodyText": "Handled the null/empty case. Returning null", "author": "mbhaskar", "createdAt": "2020-01-22T22:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzY3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369347674", "bodyText": "I see mapItemResponseAndBlock() returns CosmosItemResponse<T>.\nDo we need this extra casting here ?", "author": "kushagraThapar", "createdAt": "2020-01-22T02:48:23Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -175,8 +193,8 @@ public CosmosItemResponse upsertItem(Object item) throws CosmosClientException {\n      * @return the cosmos sync item response\n      * @throws CosmosClientException the cosmos client exception\n      */\n-    public CosmosItemResponse upsertItem(Object item, CosmosItemRequestOptions options) throws CosmosClientException {\n-        return this.mapItemResponseAndBlock(this.containerWrapper.createItem(item, options));\n+    public <T> CosmosItemResponse<T> upsertItem(Object item, CosmosItemRequestOptions options) throws CosmosClientException {\n+        return (CosmosItemResponse<T>) this.mapItemResponseAndBlock(this.asyncContainer.upsertItem(item, options));", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1MDM2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369850363", "bodyText": "Can live without it too, but left it for clarity. Will check and remove as required.", "author": "mbhaskar", "createdAt": "2020-01-22T22:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NzY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0Nzk1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369347959", "bodyText": "Please fill the gaps of missing@param here and other API docs.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:49:44Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContainer.java", "diffHunk": "@@ -246,21 +280,61 @@ CosmosItemResponse mapItemResponseAndBlock(Mono<CosmosAsyncItemResponse> itemMon\n      * @return the iterator\n      */\n     public Iterator<FeedResponse<CosmosItemProperties>> queryChangeFeedItems(ChangeFeedOptions changeFeedOptions) {\n-        return getFeedIterator(this.containerWrapper.queryChangeFeedItems(changeFeedOptions));\n+        return getFeedIterator(this.asyncContainer.queryChangeFeedItems(changeFeedOptions));\n     }\n \n     /**\n-     * Gets item.\n+     * Read cosmos sync item response.\n      *\n-     * @param id the id\n+     * @param itemId the item id\n      * @param partitionKey the partition key\n-     * @return the item\n+     * @return the cosmos sync item response\n+     * @throws CosmosClientException the cosmos client exception\n+     */\n+    public <T> CosmosItemResponse<T> readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) throws CosmosClientException {\n+        return this.mapItemResponseAndBlock(asyncContainer.readItem(itemId,\n+                                                                    partitionKey,\n+                                                                    new CosmosItemRequestOptions(),\n+                                                                    itemType));\n+    }\n+\n+    /**\n+     * Read cosmos sync item response.\n+     *\n+     * @param options the options\n+     * @return the cosmos sync item response\n+     * @throws CosmosClientException the cosmos client exception\n+     */\n+    public <T> CosmosItemResponse<T> readItem(String itemId, PartitionKey partitionKey,\n+                                          CosmosItemRequestOptions options, Class<T> itemType) throws CosmosClientException {\n+        return this.mapItemResponseAndBlock(asyncContainer.readItem(itemId, partitionKey, options, itemType));\n+    }\n+\n+    /**\n+     * Replace cosmos sync item response.\n+     *\n+     * @param item the item\n+     * @param options the options\n+     * @return the cosmos sync item response", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1MDQyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369850422", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-01-22T22:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0Nzk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0ODEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369348132", "bodyText": "Seems like unused import.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:50:45Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosResponse.java", "diffHunk": "@@ -2,13 +2,14 @@\n // Licensed under the MIT License.\n package com.azure.cosmos;\n \n+import com.azure.cosmos.implementation.Constants;", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Njg1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369846859", "bodyText": "Removed", "author": "mbhaskar", "createdAt": "2020-01-22T22:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0ODEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0ODkxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369348913", "bodyText": "I looked up and there are 4 places where we use Utils.getsimpleObjectMapper().readValue() APIs.\nIt would be great if we can consolidate them here and have this logic at one place.", "author": "kushagraThapar", "createdAt": "2020-01-22T02:54:44Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -548,4 +549,12 @@ public ValueHolder(V v) {\n         holder.v = dictionary.remove(key);\n         return holder.v != null;\n     }\n+\n+    public static <T> T parse(String itemResponseBodyAsString, Class<T> itemClassType) {", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NzIyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369847225", "bodyText": "Will check and do the refactoring as required in a different PR as this is not directly related to this.", "author": "mbhaskar", "createdAt": "2020-01-22T22:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0ODkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0OTkwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369349902", "bodyText": "seems CosmosItemRequestOptions is redundant now. isn't there an overload which doesn't require CosmosItemRequestOptions if so we should use that one.", "author": "moderakh", "createdAt": "2020-01-22T02:59:14Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/AsyncWriteBenchmark.java", "diffHunk": "@@ -60,13 +62,15 @@ protected void hookOnError(Throwable throwable) {\n     @Override\n     protected void performWorkload(BaseSubscriber<CosmosAsyncItemResponse> baseSubscriber, long i) throws InterruptedException {\n         String partitionKey = uuid + i;\n-        Mono<CosmosAsyncItemResponse> obs;\n+        Mono<CosmosAsyncItemResponse<PojoizedJson>> obs;\n         if (configuration.isDisablePassingPartitionKeyAsOptionOnWrite()) {\n             // require parsing partition key from the doc\n             obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue));\n         } else {\n             // more optimized for write as partition ke is already passed as config\n-            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue), new CosmosItemRequestOptions(partitionKey));\n+            obs = cosmosAsyncContainer.createItem(generateDocument(partitionKey, dataFieldValue),\n+                                                  new PartitionKey(partitionKey),\n+                                                  new CosmosItemRequestOptions());", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NzQzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369847433", "bodyText": "We don't have an overload matching that. Will add if required in next PR.", "author": "mbhaskar", "createdAt": "2020-01-22T22:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0OTkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MTgwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369351808", "bodyText": "passing partition key has ambiguity.\n\npartition key can be passed as the second param to readItem\nCosmosItemRequestOptions has support for setPartitionKey().\n\nif we are always requiring partition key to be passed as a standalone param then the support for setting partition key in CosmosItemRequestOptions has to be removed to avoid confusion on public surface area.", "author": "moderakh", "createdAt": "2020-01-22T03:09:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -366,14 +375,138 @@ CosmosAsyncContainer setId(String id) {\n     }\n \n     /**\n-     * Gets a CosmosAsyncItem object without making a service call\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n+     *\n+     * @param itemId the item id\n+     * @param partitionKey the partition key\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n+     */\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, Class<T> itemType) {\n+        return readItem(itemId, partitionKey, new CosmosItemRequestOptions(partitionKey), itemType);\n+    }\n+\n+    /**\n+     * Reads an item.\n+     * <p>\n+     * After subscription the operation will be performed.\n+     * The {@link Mono} upon successful completion will contain a cosmos item response with the read item\n+     * In case of failure the {@link Mono} will error.\n      *\n-     * @param id id of the item\n+     * @param itemId the item id\n      * @param partitionKey the partition key\n-     * @return a cosmos item\n+     * @param options the request cosmosItemRequestOptions\n+     * @return an {@link Mono} containing the cosmos item response with the read item or an error\n      */\n-    public CosmosAsyncItem getItem(String id, Object partitionKey) {\n-        return new CosmosAsyncItem(id, partitionKey, this);\n+    public <T> Mono<CosmosAsyncItemResponse<T>>  readItem(String itemId, PartitionKey partitionKey, \n+                                                  CosmosItemRequestOptions options, Class<T> itemType) {", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NzU4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369847589", "bodyText": "Forgot to remove the setPartitionKey(). Made it package private now.", "author": "mbhaskar", "createdAt": "2020-01-22T22:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Mjk4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369352986", "bodyText": "the public setter for partition key needs to be removed too because the partition key is a mandatory standalone param on reading/deleting item and doesn't have to be in the cosmosItemRequestOption anymore", "author": "moderakh", "createdAt": "2020-01-22T03:15:26Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosItemRequestOptions.java", "diffHunk": "@@ -175,7 +171,7 @@ public CosmosItemRequestOptions setPartitionKey(PartitionKey partitionKey) {\n      *\n      * @return the partition key\n      */\n-    public PartitionKey getPartitionKey() {\n+    PartitionKey getPartitionKey() {", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NzY3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369847679", "bodyText": "Totally valid. Removed setter for partition key", "author": "mbhaskar", "createdAt": "2020-01-22T22:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1Mjk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MzM1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369353358", "bodyText": "if the intention is to only capture PartitionKey.None then we should probably do PartitionKey.None == key instead.\nAre there any other case other than PartitionKey.None which would get covered here?", "author": "moderakh", "createdAt": "2020-01-22T03:17:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/PartitionKey.java", "diffHunk": "@@ -25,7 +25,13 @@\n      */\n     @SuppressWarnings(\"serial\")\n     public PartitionKey(final Object key) {\n-        this.internalPartitionKey = PartitionKeyInternal.fromObjectArray(new Object[] {key}, true);\n+        // Now that we are making partitionkey as one of the parameters for creating object, just making sure nothing\n+        // wrong happens here when user does something like new PartitionKey(PartitionKey.None);\n+        if (!(key instanceof PartitionKey)) {", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0ODcwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369848704", "bodyText": "Removed this check altogether. Will add if we see many people using this wrongly.", "author": "mbhaskar", "createdAt": "2020-01-22T22:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MzM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDAxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369354014", "bodyText": "If the public API is T getResource() the instantiation of CosmosItemProperties will do double deserialization. We should remember to remove this altogether and solely rely on T getResource()", "author": "moderakh", "createdAt": "2020-01-22T03:21:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncItemResponse.java", "diffHunk": "@@ -4,40 +4,41 @@\n \n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.Utils;\n import org.apache.commons.lang3.StringUtils;\n \n-public class CosmosAsyncItemResponse extends CosmosResponse<CosmosItemProperties> {\n-    private final CosmosAsyncItem itemClient;\n-\n-    CosmosAsyncItemResponse(ResourceResponse<Document> response, PartitionKey partitionKey,\n-                            CosmosAsyncContainer container) {\n+public class CosmosAsyncItemResponse<T> extends CosmosResponse<CosmosItemProperties> {\n+    private final Class<T> itemClassType;\n+    private final String responseBodyString;\n+    \n+    CosmosAsyncItemResponse(ResourceResponse<Document> response, Class<T> klass) {\n         super(response);\n-        String bodyAsString = response.getBodyAsString();\n-        if (StringUtils.isEmpty(bodyAsString)) {\n+        this.itemClassType = klass;\n+        responseBodyString = response.getBodyAsString();\n+        if (StringUtils.isEmpty(responseBodyString)){\n             super.setProperties(null);\n-            itemClient = null;\n         } else {\n-            CosmosItemProperties props = new CosmosItemProperties(bodyAsString);\n+            CosmosItemProperties props = new CosmosItemProperties(responseBodyString);", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0OTMzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369849338", "bodyText": "Yes, next PR should be for removing CosmosItemProperties as a public type.", "author": "mbhaskar", "createdAt": "2020-01-22T22:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDIzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369354232", "bodyText": "what happened to this guy?", "author": "moderakh", "createdAt": "2020-01-22T03:22:37Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseValidator.java", "diffHunk": "@@ -210,7 +210,8 @@ public void validate(CosmosAsyncStoredProcedureResponse resourceResponse) {\n                 @Override\n                 public void validate(T resourceResponse) {\n                     assertThat(resourceResponse.getProperties()).isNotNull();\n-                    assertThat(resourceResponse.getProperties().getETag()).isNotNull();\n+                    //TODO: Uncomment this after checking getETag()\n+//                    assertThat(resourceResponse.getETag()).isNotNull();", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0OTcxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369849716", "bodyText": "Left over from a trial of removing CosmosItemProperties. Got it back.", "author": "mbhaskar", "createdAt": "2020-01-22T22:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDQxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369354410", "bodyText": "no \"Test\" suffix or prefix in the test name to look the same as other test methods", "author": "moderakh", "createdAt": "2020-01-22T03:23:35Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DocumentCrudTest.java", "diffHunk": "@@ -315,17 +335,121 @@ public void upsertDocument_ReplaceDocument(String documentId) throws Throwable {\n \n         // Replace document\n \n-        Mono<CosmosAsyncItemResponse> readObservable = container.upsertItem(properties, new CosmosItemRequestOptions());\n+        Mono<CosmosAsyncItemResponse<CosmosItemProperties>> readObservable = container.upsertItem(properties, new CosmosItemRequestOptions());\n         System.out.println(properties);\n \n         // Validate result\n \n-        CosmosResponseValidator<CosmosAsyncItemResponse> validator = new CosmosResponseValidator.Builder<CosmosAsyncItemResponse>()\n+        CosmosResponseValidator<CosmosAsyncItemResponse<CosmosItemProperties>> validator = new CosmosResponseValidator.Builder<CosmosAsyncItemResponse<CosmosItemProperties>>()\n             .withProperty(\"newProp\", newPropValue).build();\n \n         validateSuccess(readObservable, validator);\n     }\n \n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void typedItemsTest() throws Throwable {", "originalCommit": "8b860663c00791d4f326eb3e446abc626ed6338f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0OTQ5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7429#discussion_r369849497", "bodyText": "Sure, always overlook this :-). Removed", "author": "mbhaskar", "createdAt": "2020-01-22T22:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NDQxMA=="}], "type": "inlineReview"}, {"oid": "bf4fad6bd6a33a6098e1a9dab090d7f3ba24e4c4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf4fad6bd6a33a6098e1a9dab090d7f3ba24e4c4", "message": "Addressing PR comments", "committedDate": "2020-01-22T22:44:15Z", "type": "commit"}, {"oid": "6fa14259a24ca228931d940f36e65957fc103790", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6fa14259a24ca228931d940f36e65957fc103790", "message": "Fixing tests", "committedDate": "2020-01-23T00:36:33Z", "type": "commit"}, {"oid": "1bdc7edeb503f459a10917977091793ae8e1b52c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1bdc7edeb503f459a10917977091793ae8e1b52c", "message": "Fixing tests", "committedDate": "2020-01-23T02:07:45Z", "type": "commit"}]}