{"pr_number": 12814, "pr_title": "mgmt resources fix TODOs", "pr_createdAt": "2020-07-06T06:53:47Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12814", "timeline": [{"oid": "0e6f6da61c53f7e86db9ea4724463a84c1d23ce5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0e6f6da61c53f7e86db9ea4724463a84c1d23ce5", "message": "mgmt resources fix TODOs", "committedDate": "2020-07-06T06:52:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNzg4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450027885", "bodyText": "Why it is in main? I assume this is only needed in test?", "author": "weidongxu-microsoft", "createdAt": "2020-07-06T07:18:04Z", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +125,67 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {", "originalCommit": "0e6f6da61c53f7e86db9ea4724463a84c1d23ce5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNDYxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450034612", "bodyText": "It's required by AppServiceCertificateImpl.", "author": "xseeseesee", "createdAt": "2020-07-06T07:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNzg4NQ=="}], "type": "inlineReview"}, {"oid": "da942e3cea64154e29e1832355dcb64942725de5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/da942e3cea64154e29e1832355dcb64942725de5", "message": "update logic of response handling", "committedDate": "2020-07-06T08:15:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3ODk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450078951", "bodyText": "Maybe a Mono.error would be more proper?\nGenerally we would like an error early than late.", "author": "weidongxu-microsoft", "createdAt": "2020-07-06T08:54:57Z", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +123,48 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {\n+        FileService service = RestProxy.create(FileService.class, httpPipeline);\n+        try {\n+            return service.download(getHost(url), getPathAndQuery(url))\n+                .flatMap(response -> FluxUtil.collectBytesInByteBufferStream(response.getValue()));\n+        } catch (MalformedURLException ex) {\n+            return Mono.empty();", "originalCommit": "da942e3cea64154e29e1832355dcb64942725de5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Njc0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450096747", "bodyText": "I think it should be getRawPath and getRawQuery due to you just do a string add.", "author": "ChenTanyi", "createdAt": "2020-07-06T09:26:03Z", "path": "sdk/resources/mgmt/src/main/java/com/azure/resourcemanager/resources/fluentcore/utils/Utils.java", "diffHunk": "@@ -115,20 +123,48 @@ public static String createOdataFilterForTags(String tagName, String tagValue) {\n      * Download a file asynchronously.\n      *\n      * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n+     * @param httpPipeline the http pipeline\n      * @return an Observable pointing to the content of the file\n      */\n+    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline httpPipeline) {\n+        FileService service = RestProxy.create(FileService.class, httpPipeline);\n+        try {\n+            return service.download(getHost(url), getPathAndQuery(url))\n+                .flatMap(response -> FluxUtil.collectBytesInByteBufferStream(response.getValue()));\n+        } catch (MalformedURLException ex) {\n+            return Mono.empty();\n+        }\n+    }\n+\n     /**\n-     * Download a file asynchronously.\n+     * Get host from url.\n      *\n-     * @param url the URL pointing to the file\n-     * @param retrofit the retrofit client\n-     * @return an Observable pointing to the content of the file\n+     * @param urlString the url string\n+     * @return the host\n+     * @throws MalformedURLException when url is invalid format\n      */\n-    public static Mono<byte[]> downloadFileAsync(String url, HttpPipeline retrofit) {\n-        FileService service = RestProxy.create(FileService.class, retrofit);\n-        Mono<HttpResponse> response = service.download(url);\n-        return response.flatMap(httpResponse -> httpResponse.getBodyAsByteArray());\n+    public static String getHost(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String protocol = url.getProtocol();\n+        String host = url.getAuthority();\n+        return protocol + \"://\" + host;\n+    }\n+\n+    /**\n+     * Get path from url.\n+     *\n+     * @param urlString the url string\n+     * @return the path\n+     * @throws MalformedURLException when the url is invalid format\n+     */\n+    public static String getPathAndQuery(String urlString) throws MalformedURLException {\n+        URL url = new URL(urlString);\n+        String path = url.getPath();\n+        String query = url.getQuery();", "originalCommit": "da942e3cea64154e29e1832355dcb64942725de5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMTc4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450131783", "bodyText": "Not available for URL. Such methods are in URI.", "author": "xseeseesee", "createdAt": "2020-07-06T10:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Njc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3MjI1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12814#discussion_r450572259", "bodyText": "Could use a bit testing (send one to httpbin.org, or use your fiddler).", "author": "weidongxu-microsoft", "createdAt": "2020-07-07T02:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5Njc0Nw=="}], "type": "inlineReview"}, {"oid": "92ba754b2e555d10744334b9e10600dbf370d3ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/92ba754b2e555d10744334b9e10600dbf370d3ff", "message": "update mono error", "committedDate": "2020-07-06T10:38:57Z", "type": "commit"}]}