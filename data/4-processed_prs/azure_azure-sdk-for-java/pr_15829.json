{"pr_number": 15829, "pr_title": "[FR] Added business card features", "pr_createdAt": "2020-09-30T16:35:51Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15829", "timeline": [{"oid": "e517512c3a522f9d52a689e8a0a7854726bf3277", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e517512c3a522f9d52a689e8a0a7854726bf3277", "message": "added business card features", "committedDate": "2020-09-30T16:31:27Z", "type": "commit"}, {"oid": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "message": "checkstyle issues", "committedDate": "2020-09-30T16:57:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498951696", "bodyText": "can you include the dfault value is US", "author": "iscai-msft", "createdAt": "2020-10-02T17:22:53Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeBusinessCardsOptions.java", "diffHunk": "@@ -0,0 +1,106 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Options that may be passed when using recognize receipt APIs on Form Recognizer client.\n+ */\n+@Fluent\n+public final class RecognizeBusinessCardsOptions {\n+    private static final Duration DEFAULT_POLL_INTERVAL = Duration.ofSeconds(5);\n+    private FormContentType contentType;\n+    private boolean includeFieldElements;\n+    private Duration pollInterval = DEFAULT_POLL_INTERVAL;\n+    private String locale;\n+\n+    /**\n+     * Get the type of the form. Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     *\n+     * @return the {@code contentType} value.\n+     */\n+    public FormContentType getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * Get the boolean which specifies if to include form element references in the result.\n+     *\n+     * @return the {@code includeFieldElements} value.\n+     */\n+    public boolean isFieldElementsIncluded() {\n+        return includeFieldElements;\n+    }\n+\n+    /**\n+     * Get the duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @return the {@code pollInterval} value.\n+     */\n+    public Duration getPollInterval() {\n+        return pollInterval;\n+    }\n+\n+    /**\n+     * Set the type of the form. Supported Media types including .pdf, .jpg, .png or .tiff type file stream.\n+     *\n+     * @param contentType the provided form content type.\n+     *\n+     * @return the updated {@code RecognizeBusinessCardOptions} value.\n+     */\n+    public RecognizeBusinessCardsOptions setContentType(final FormContentType contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the boolean which specifies if to include form element references in the result.\n+     *\n+     * @param includeFieldElements the boolean to specify if to include form element references in the result.\n+     *\n+     * @return the updated {@code RecognizeBusinessCardOptions} value.\n+     */\n+    public RecognizeBusinessCardsOptions setFieldElementsIncluded(final boolean includeFieldElements) {\n+        this.includeFieldElements = includeFieldElements;\n+        return this;\n+    }\n+\n+    /**\n+     * Set the duration between each poll for the operation status. If none is specified, a default of\n+     * 5 seconds is used.\n+     *\n+     * @param pollInterval the duration to specify between each poll for the operation status.\n+     *\n+     * @return the updated {@code RecognizeBusinessCardOptions} value.\n+     */\n+    public RecognizeBusinessCardsOptions setPollInterval(final Duration pollInterval) {\n+        this.pollInterval = pollInterval == null ? DEFAULT_POLL_INTERVAL : pollInterval;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the locale value.\n+     *\n+     * @return the locale value.\n+     */\n+    public String getLocale() {\n+        return locale;\n+    }\n+\n+    /**\n+     * Set the locale value.\n+     *\n+     * @param locale the locale value.\n+     *\n+     * @return the locale value.\n+     */\n+    public RecognizeBusinessCardsOptions setLocale(final String locale) {", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MDQ4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500550487", "bodyText": "I wonder if we should create another link for the supported locales and add it to the docstings here to help users.\nCurrently the supported locales for business cards are here (no ms.docs link :( ): https://westus2.dev.cognitive.microsoft.com/docs/services/form-recognizer-api-v2-1-preview-1/operations/AnalyzeBusinessCardAsync", "author": "maririos", "createdAt": "2020-10-06T19:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5ODQ1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501098459", "bodyText": "If we don't pass a empty/null locale  value to service, does service uses 'en-US' as the default value?", "author": "mssfang", "createdAt": "2020-10-07T15:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4MzM3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501183374", "bodyText": "Yes, but my understanding is that they don't want us to set a default. They will like us to pass nothing and let the service figure it out", "author": "maririos", "createdAt": "2020-10-07T17:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NjI2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501196264", "bodyText": "@mssfang and @iscai-msft The locale functionality will be updated in this PR - #16027\n@maririos Can we use this link for supported locales - https://docs.microsoft.com/en-us/azure/cognitive-services/form-recognizer/concept-receipts#supported-locales", "author": "samvaity", "createdAt": "2020-10-07T17:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5ODE1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501198151", "bodyText": "we could although this are locales for receipts. Still better than nothing.\nI did ask to the service team in our Teams channel => https://teams.microsoft.com/l/message/19:88f2d9dea2344075b5d4bc34d82a3d1c@thread.skype/1602013362187?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=3e17dcb0-4257-4a30-b843-77f47f1d4121&parentMessageId=1602013362187&teamName=Azure%20SDK&channelName=Service%20-%20Form%20Recognizer&createdTime=1602013362187", "author": "maririos", "createdAt": "2020-10-07T17:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMDgzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501200838", "bodyText": "Yes, but my understanding is that they don't want us to set a default. They will like us to pass nothing and let the service figure it out\n\nI stand corrected. Looks like for locale we could set the default to en-US like @samvaity  did in her PR :)", "author": "maririos", "createdAt": "2020-10-07T17:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0MDY3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501240678", "bodyText": "@maririos @samvaity wouldn't it be better to not set any default on our side, and allow the service to handle the default case if no locale is passed in (i.e., mari's initial response to shawn)?", "author": "iscai-msft", "createdAt": "2020-10-07T18:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDg5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501330898", "bodyText": "adding to this discussion that paul strongly recommends not hardcoding a default on the SDK side", "author": "iscai-msft", "createdAt": "2020-10-07T21:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MjE0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498952145", "bodyText": "nit: this looks like it's using recognizeBusinessCardFromUrl, can you make that the name of this sample?", "author": "iscai-msft", "createdAt": "2020-10-02T17:23:49Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java", "diffHunk": "@@ -196,6 +196,86 @@ public void recognizeReceipt() {\n         }\n     }\n \n+    public void recognizeBusinessCard() {", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1ODM4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r499958381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Recognize data from a USA sales receipts using a prebuilt model. Business card fields recognized by the service\n          \n          \n            \n            Recognize data from business cards using a prebuilt model. Business card fields recognized by the service", "author": "kristapratico", "createdAt": "2020-10-06T01:32:28Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -313,11 +313,96 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n }\n ```\n \n+### Recognize business cards\n+Recognize data from a USA sales receipts using a prebuilt model. Business card fields recognized by the service", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c5b716174ba591a2ef261c5d822ea7906f55806", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c5b716174ba591a2ef261c5d822ea7906f55806", "message": "Update sdk/formrecognizer/azure-ai-formrecognizer/README.md\n\nCo-authored-by: Krista Pratico <krpratic@microsoft.com>", "committedDate": "2020-10-06T16:24:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNjAxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500526017", "bodyText": "I think it will be better if we point to https://docs.microsoft.com/en-us/azure/cognitive-services/form-recognizer/concept-business-cards?#fields-extracted\nI will expect this page to get updated instead of us updating the reference of the link every time there is a new preview/stable version", "author": "maririos", "createdAt": "2020-10-06T18:55:23Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -313,11 +313,96 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n }\n ```\n \n+### Recognize business cards\n+Recognize data from business cards using a prebuilt model. Business card fields recognized by the service\n+can be found [here][service_recognize_business_card].", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzNjE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500636189", "bodyText": "I can do that. Also that means https://aka.ms/formrecognizer/businesscardfields is useless and can be removed.", "author": "mssfang", "createdAt": "2020-10-06T22:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNjAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzODE1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500638150", "bodyText": "not really. In case we ever have to change where the link is pointing, it is better to change it just in one place than go through the code and updating it.\nI will say leave it as is after the change you did of redirecting it to the docs place", "author": "maririos", "createdAt": "2020-10-06T22:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNjAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzOTQ2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500639461", "bodyText": "After I revisited, i found the link is used all over the place in the javadoc. I would probably keep it as it is. Since it is short. Such as,  https://github.com/Azure/azure-sdk-for-java/pull/15829/files#diff-f3e13c2bd95cecb8a90329a3c1e1f6dbR591", "author": "mssfang", "createdAt": "2020-10-06T22:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNjAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4Mzk4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501183983", "bodyText": "Yes please leave it. I am not advocating for deleting it. My initial ask was to update where the link was pointing too (which you already did) but never to delete it :)", "author": "maririos", "createdAt": "2020-10-07T17:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNjAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzODQ3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500538476", "bodyText": "NIT: line 78 says Recognizes receipt data from documents should be Recognizes form data from documents", "author": "maririos", "createdAt": "2020-10-06T19:18:03Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -88,7 +90,7 @@\n      * @param context Additional context that is passed through the HTTP pipeline during the service call.\n      *\n      * @return A {@link SyncPoller} to poll the progress of the recognize custom form operation until it has completed,\n-     * has failed, or has been cancelled. The completed operation returns a List of {@link RecognizedForm}.", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTQ2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500539464", "bodyText": "following what you had before, consider adding  Recognizes business card data...", "author": "maririos", "createdAt": "2020-10-06T19:19:45Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerClient.java", "diffHunk": "@@ -357,7 +359,114 @@\n     public SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>>\n         beginRecognizeReceipts(InputStream receipt, long length,\n         RecognizeReceiptsOptions recognizeReceiptsOptions, Context context) {\n-        Flux<ByteBuffer> buffer = Utility.toFluxByteBuffer(receipt);\n+        Flux<ByteBuffer> buffer = toFluxByteBuffer(receipt);\n         return client.beginRecognizeReceipts(buffer, length, recognizeReceiptsOptions, context).getSyncPoller();\n     }\n+\n+    /**\n+     * Recognizes business card data from document using optical character recognition (OCR) and a prebuilt\n+     * business card trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/businesscardfields\">here</a> for fields found on a business card.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl#string}\n+     *\n+     * @param businessCardUrl The source URL to the input business card.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the recognize business card operation until it has\n+     * completed, has failed, or has been cancelled. The completed operation returns a list of {@link RecognizedForm}.\n+     * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n+     * an {@link OperationStatus#FAILED}.\n+     * @throws NullPointerException If {@code businessCardUrl} is null.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(\n+        String businessCardUrl) {\n+        return beginRecognizeBusinessCardsFromUrl(businessCardUrl, null, Context.NONE);\n+    }\n+\n+    /**\n+     * Recognizes business card data from documents using optical character recognition (OCR) and a\n+     * prebuilt business card trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/businesscardfields\">here</a> for fields found on a business card.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl#string-RecognizeBusinessCardsOptions-Context}\n+     *\n+     * @param businessCardUrl The source URL to the input business card.\n+     * @param recognizeBusinessCardsOptions The additional configurable {@link RecognizeBusinessCardsOptions options}\n+     * that may be passed when analyzing a business card.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     *\n+     * @return A {@link SyncPoller} to poll the progress of the recognize business card operation until it has\n+     * completed, has failed, or has been cancelled. The completed operation returns a list of {@link RecognizedForm}.\n+     * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n+     * an {@link OperationStatus#FAILED}.\n+     * @throws NullPointerException If {@code businessCardUrl} is null.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(\n+        String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context) {\n+        return client.beginRecognizeBusinessCardsFromUrl(businessCardUrl, recognizeBusinessCardsOptions, context)\n+                   .getSyncPoller();\n+    }\n+\n+    /**\n+     * Recognizes data from the provided document data using optical character recognition (OCR)", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTU2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500539561", "bodyText": "same in other places", "author": "maririos", "createdAt": "2020-10-06T19:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MzkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500543915", "bodyText": "Not sure I follow. How will this affect what we already shipped?", "author": "maririos", "createdAt": "2020-10-06T19:27:59Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -282,8 +281,21 @@ private static FormField setFormField(String name, FieldData valueData, FieldVal\n             default:\n                 throw LOGGER.logExceptionAsError(new RuntimeException(\"FieldValue Type not supported\"));\n         }\n-        return new FormField(name, null, valueData, value,\n-            setDefaultConfidenceValue(fieldValue.getConfidence()));\n+\n+        FieldData labelData = null;\n+        // if 'name' is same as the raw field value text, it means this FormField is not a label.\n+        // Otherwise, the FormField is for label, which might have label data, such as bounding box values.\n+        if (name != null && name.equals(fieldValue.getText())) {", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMDc4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501110784", "bodyText": "it was confused. Updated to only adding valueData for non-ARRAY type when valueData is null", "author": "mssfang", "createdAt": "2020-10-07T15:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MzkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NzM5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500547397", "bodyText": "from what I can see the method that calls setFormField  is always setting valueData but here you are assigning it again", "author": "maririos", "createdAt": "2020-10-06T19:34:35Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -282,8 +281,21 @@ private static FormField setFormField(String name, FieldData valueData, FieldVal\n             default:\n                 throw LOGGER.logExceptionAsError(new RuntimeException(\"FieldValue Type not supported\"));\n         }\n-        return new FormField(name, null, valueData, value,\n-            setDefaultConfidenceValue(fieldValue.getConfidence()));\n+\n+        FieldData labelData = null;\n+        // if 'name' is same as the raw field value text, it means this FormField is not a label.\n+        // Otherwise, the FormField is for label, which might have label data, such as bounding box values.\n+        if (name != null && name.equals(fieldValue.getText())) {\n+            valueData = new FieldData(name, toBoundingBox(fieldValue.getBoundingBox()),", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NzU2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500547567", "bodyText": "we should be consistent and only have a place where this logic happens or debbuging later will be a problem", "author": "maririos", "createdAt": "2020-10-06T19:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NzM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMTQzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501111432", "bodyText": "previous impl is confuse. Updated to only adding valueData for non-ARRAY type when valueData is null", "author": "mssfang", "createdAt": "2020-10-07T15:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NzM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NDQ2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501194461", "bodyText": "@mssfang Should this be enough to determine valueData=null for Array type field element \n  \n    \n      azure-sdk-for-java/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n    \n    \n         Line 210\n      in\n      62a9813\n    \n    \n    \n    \n\n        \n          \n           if (\"ReceiptType\".equals(key) || ARRAY == fieldValue.getType()) {", "author": "samvaity", "createdAt": "2020-10-07T17:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NzM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1ODI3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504258278", "bodyText": "the reason of having assign value of valueData is because valueData is always null. Let me change this section of code to   upper caller,\n    private static List<FormField> toFieldValueArray(List<FieldValue> valueArray, List<ReadResult> readResults) {\n        return valueArray.stream()\n            .map(fieldValue -> {\n                FieldData valueData = null;\n                // ARRAY has ho value data, such as bounding box.\n                if (ARRAY != fieldValue.getType()) {\n                    valueData = new FieldData(fieldValue.getText(), toBoundingBox(fieldValue.getBoundingBox()),\n                        fieldValue.getPage() == null ? -1 : fieldValue.getPage(),\n                        setReferenceElements(fieldValue.getElements(), readResults));\n                }\n                return setFormField(null, valueData, fieldValue, readResults);\n            })\n            .collect(Collectors.toList());\n    }", "author": "mssfang", "createdAt": "2020-10-13T21:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NzM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MzI5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500553294", "bodyText": "not sure if this comment adds value here as it appears again in line 568 where you actually get the result", "author": "maririos", "createdAt": "2020-10-06T19:45:49Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -555,4 +556,360 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n             });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-RecognizeReceiptsOptions\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeBusinessCardsFromUrl(String)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string\n+        String businessCardUrl = \"{file_source_url}\";\n+        // if training polling operation completed, retrieve the final result.", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNDI4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501104288", "bodyText": "should be a mistake", "author": "mssfang", "createdAt": "2020-10-07T15:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MzI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MzU4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500553583", "bodyText": "NIT: formatting?", "author": "maririos", "createdAt": "2020-10-06T19:46:21Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -555,4 +556,360 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n             });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-RecognizeReceiptsOptions\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeBusinessCardsFromUrl(String)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string\n+        String businessCardUrl = \"{file_source_url}\";\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)\n+            // if training polling operation completed, retrieve the final result.\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(recognizedBusinessCards -> {\n+                for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n+                    RecognizedForm recognizedForm = recognizedBusinessCards.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+                    System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n+                    FormField contactNames = recognizedFields.get(\"ContactNames\");\n+                    if (contactNames != null) {\n+                        if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                            List<FormField> businessCardItems = contactNames.getValue().asList();\n+                            businessCardItems.stream()\n+                                .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue()", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNDg4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501104885", "bodyText": "noop. it is correct", "author": "mssfang", "createdAt": "2020-10-07T15:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MzU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NDg0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500554845", "bodyText": "shouldn't be an url. Maybe something like what you have on receipt local/file_path/fileName.jpg ?", "author": "maririos", "createdAt": "2020-10-06T19:48:58Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -555,4 +556,360 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n             });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-RecognizeReceiptsOptions\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeBusinessCardsFromUrl(String)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string\n+        String businessCardUrl = \"{file_source_url}\";\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)\n+            // if training polling operation completed, retrieve the final result.\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(recognizedBusinessCards -> {\n+                for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n+                    RecognizedForm recognizedForm = recognizedBusinessCards.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+                    System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n+                    FormField contactNames = recognizedFields.get(\"ContactNames\");\n+                    if (contactNames != null) {\n+                        if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                            List<FormField> businessCardItems = contactNames.getValue().asList();\n+                            businessCardItems.stream()\n+                                .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue()\n+                                                                                      .getValueType())\n+                                .map(formField -> formField.getValue().asMap())\n+                                .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                                    if (\"FirstName\".equals(key)) {\n+                                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                            String firstName = formField.getValue().asString();\n+                                            System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n+                                                firstName, contactNames.getConfidence());\n+                                        }\n+                                    }\n+                                    if (\"LastName\".equals(key)) {\n+                                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                            String lastName = formField.getValue().asString();\n+                                            System.out.printf(\"Last Name: %s, confidence: %.2f%n\",\n+                                                lastName, contactNames.getConfidence());\n+                                        }\n+                                    }\n+                                }));\n+                        }\n+                    }\n+                    FormField jobTitles = recognizedFields.get(\"JobTitles\");\n+                    if (jobTitles != null) {\n+                        if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n+                            List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n+                            jobTitlesItems.stream().forEach(formField -> {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String jobTitle = formField.getValue().asString();\n+                                    System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n+                                        jobTitle, jobTitles.getConfidence());\n+                                }\n+                            });\n+                        }\n+                    }\n+                    FormField addresses = recognizedFields.get(\"Addresses\");\n+                    if (addresses != null) {\n+                        if (FieldValueType.LIST == addresses.getValue().getValueType()) {\n+                            List<FormField> addressesItems = addresses.getValue().asList();\n+                            addressesItems.stream().forEach(formField -> {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String address = formField.getValue().asString();\n+                                    System.out.printf(\"Address: %s, confidence: %.2f%n\", address,\n+                                        addresses.getConfidence());\n+                                }\n+                            });\n+                        }\n+                    }\n+                    FormField companyName = recognizedFields.get(\"CompanyNames\");\n+                    if (companyName != null) {\n+                        if (FieldValueType.LIST == companyName.getValue().getValueType()) {\n+                            List<FormField> companyNameItems = companyName.getValue().asList();\n+                            companyNameItems.stream().forEach(formField -> {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String companyNameValue = formField.getValue().asString();\n+                                    System.out.printf(\"Company name: %s, confidence: %.2f%n\", companyNameValue,\n+                                        companyName.getConfidence());\n+                                }\n+                            });\n+                        }\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for\n+     * {@link FormRecognizerAsyncClient#beginRecognizeBusinessCardsFromUrl(String, RecognizeBusinessCardsOptions)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string-RecognizeBusinessCardsOptions\n+        String businessCardUrl = \"{file_source_url}\";\n+        boolean includeFieldElements = true;\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl,\n+            new RecognizeBusinessCardsOptions()\n+                .setFieldElementsIncluded(includeFieldElements)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(recognizedBusinessCards -> {\n+                for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n+                    RecognizedForm recognizedBusinessCard = recognizedBusinessCards.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();\n+                    System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n+                    FormField contactNames = recognizedFields.get(\"ContactNames\");\n+                    if (contactNames != null) {\n+                        if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                            List<FormField> businessCardItems = contactNames.getValue().asList();\n+                            businessCardItems.stream()\n+                                .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue()\n+                                                                                      .getValueType())\n+                                .map(formField -> formField.getValue().asMap())\n+                                .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                                    if (\"FirstName\".equals(key)) {\n+                                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                            String firstName = formField.getValue().asString();\n+                                            System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n+                                                firstName, contactNames.getConfidence());\n+                                        }\n+                                    }\n+                                    if (\"LastName\".equals(key)) {\n+                                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                            String lastName = formField.getValue().asString();\n+                                            System.out.printf(\"Last Name: %s, confidence: %.2f%n\",\n+                                                lastName, contactNames.getConfidence());\n+                                        }\n+                                    }\n+                                }));\n+                        }\n+                    }\n+                    FormField jobTitles = recognizedFields.get(\"JobTitles\");\n+                    if (jobTitles != null) {\n+                        if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n+                            List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n+                            jobTitlesItems.stream().forEach(formField -> {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String jobTitle = formField.getValue().asString();\n+                                    System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n+                                        jobTitle, jobTitles.getConfidence());\n+                                }\n+                            });\n+                        }\n+                    }\n+                    FormField addresses = recognizedFields.get(\"Addresses\");\n+                    if (addresses != null) {\n+                        if (FieldValueType.LIST == addresses.getValue().getValueType()) {\n+                            List<FormField> addressesItems = addresses.getValue().asList();\n+                            addressesItems.stream().forEach(formField -> {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String address = formField.getValue().asString();\n+                                    System.out.printf(\"Address: %s, confidence: %.2f%n\", address,\n+                                        addresses.getConfidence());\n+                                }\n+                            });\n+                        }\n+                    }\n+                    FormField companyName = recognizedFields.get(\"CompanyNames\");\n+                    if (companyName != null) {\n+                        if (FieldValueType.LIST == companyName.getValue().getValueType()) {\n+                            List<FormField> companyNameItems = companyName.getValue().asList();\n+                            companyNameItems.stream().forEach(formField -> {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String companyNameValue = formField.getValue().asString();\n+                                    System.out.printf(\"Company name: %s, confidence: %.2f%n\", companyNameValue,\n+                                        companyName.getConfidence());\n+                                }\n+                            });\n+                        }\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string-RecognizeBusinessCardsOptions\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeBusinessCards(Flux, long)}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeBusinessCards() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCards#Flux-long\n+        File businessCard = new File(\"{file_source_url}\");", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNjM1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501106358", "bodyText": "nice catch", "author": "mssfang", "createdAt": "2020-10-07T15:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NDg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NTMzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r500555332", "bodyText": "NIT: formatting?", "author": "maririos", "createdAt": "2020-10-06T19:49:56Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -523,4 +524,341 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         }\n         // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-RecognizeReceiptsOptions-Context\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeBusinessCardsFromUrl(String)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl#string\n+        String businessCardUrl = \"{file_source_url}\";\n+        formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)\n+            .getFinalResult()\n+            .forEach(recognizedBusinessCard -> {\n+                Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();\n+                FormField contactNames = recognizedFields.get(\"ContactNames\");\n+                if (contactNames != null) {\n+                    if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                        List<FormField> businessCardItems = contactNames.getValue().asList();\n+                        businessCardItems.stream()\n+                            .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue()", "originalCommit": "8c5b716174ba591a2ef261c5d822ea7906f55806", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMDExMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501110111", "bodyText": "noop", "author": "mssfang", "createdAt": "2020-10-07T15:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NTMzMg=="}], "type": "inlineReview"}, {"oid": "6adc03ad27ee671c2a1f0d41c6929fd11c61254f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6adc03ad27ee671c2a1f0d41c6929fd11c61254f", "message": "some NIT updates", "committedDate": "2020-10-06T22:56:49Z", "type": "commit"}, {"oid": "b6c38503fc5197eabdd87acac22b479f2a796ee0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6c38503fc5197eabdd87acac22b479f2a796ee0", "message": "address feedbacks", "committedDate": "2020-10-07T15:31:49Z", "type": "commit"}, {"oid": "ef15403db049f49b6d2d262cabb642d31d12c442", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef15403db049f49b6d2d262cabb642d31d12c442", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into FR-Impl-BusinessCard", "committedDate": "2020-10-07T15:32:09Z", "type": "commit"}, {"oid": "62a9813e3865325e975551f1605a4a272abce7f9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/62a9813e3865325e975551f1605a4a272abce7f9", "message": "Merge branch 'FR-Impl-BusinessCard' of https://github.com/mssfang/azure-sdk-for-java into FR-Impl-BusinessCard", "committedDate": "2020-10-07T15:33:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498468317", "bodyText": "USA sales receipts -> business cards. Need to confirm if they would be USA business cards", "author": "samvaity", "createdAt": "2020-10-01T19:29:03Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -313,11 +313,96 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n }\n ```\n \n+### Recognize business cards\n+Recognize data from a USA sales receipts using a prebuilt model. Business card fields recognized by the service", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE4NDkxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r501184916", "bodyText": "Good catch.\nThey are not, which is why they have different locale.", "author": "maririos", "createdAt": "2020-10-07T17:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODcxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498468713", "bodyText": "Should we call this BusinessCardTypedRecognizeForm instead?", "author": "samvaity", "createdAt": "2020-10-01T19:29:53Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -313,11 +313,96 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n }\n ```\n \n+### Recognize business cards\n+Recognize data from a USA sales receipts using a prebuilt model. Business card fields recognized by the service\n+can be found [here][service_recognize_business_card].\n+See [StronglyTypedRecognizedForm][strongly_typed_sample] for a suggested approach to extract", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNjUyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504206525", "bodyText": "since we don't add a stronglyTypedRecognizeForm for business card. We might just keep it as geneic. So it refers to receipt and business card", "author": "mssfang", "createdAt": "2020-10-13T19:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2ODcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTY1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498469653", "bodyText": "Should we consider removing this to keep the example a little concise since this goes on the readme section.", "author": "samvaity", "createdAt": "2020-10-01T19:31:57Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -313,11 +313,96 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n }\n ```\n \n+### Recognize business cards\n+Recognize data from a USA sales receipts using a prebuilt model. Business card fields recognized by the service\n+can be found [here][service_recognize_business_card].\n+See [StronglyTypedRecognizedForm][strongly_typed_sample] for a suggested approach to extract\n+information from business card.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L200-L274-->\n+```java\n+String businessCardUrl =\n+    \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/sdk/formrecognizer\"\n+        + \"/azure-ai-formrecognizer/src/samples/java/sample-forms/businessCards/businessCard.jpg\";\n+\n+SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>> analyzeBusinessCardPoller =\n+    formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl);\n+\n+List<RecognizedForm> businessCardPageResults = analyzeBusinessCardPoller.getFinalResult();\n+\n+for (int i = 0; i < businessCardPageResults.size(); i++) {\n+    RecognizedForm recognizedForm = businessCardPageResults.get(i);\n+    Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+    System.out.printf(\"----------- Recognized business card info for page %d -----------%n\", i);\n+    FormField contactNames = recognizedFields.get(\"ContactNames\");\n+    if (contactNames != null) {\n+        if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+            List<FormField> businessCardItems = contactNames.getValue().asList();\n+            businessCardItems.stream()\n+                .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue().getValueType())\n+                .map(formField -> formField.getValue().asMap())\n+                .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                    if (\"FirstName\".equals(key)) {\n+                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                            String firstName = formField.getValue().asString();\n+                            System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n+                                firstName, contactNames.getConfidence());\n+                        }\n+                    }\n+                    if (\"LastName\".equals(key)) {\n+                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                            String lastName = formField.getValue().asString();\n+                            System.out.printf(\"Last Name: %s, confidence: %.2f%n\",\n+                                lastName, contactNames.getConfidence());\n+                        }\n+                    }", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNjkxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504206911", "bodyText": "cool. i can remove a couple of fields", "author": "mssfang", "createdAt": "2020-10-13T19:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2OTY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3MDk2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498470969", "bodyText": "For a list the labelData is null", "author": "samvaity", "createdAt": "2020-10-01T19:34:44Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -331,7 +346,7 @@ private static float setDefaultConfidenceValue(Float confidence) {\n      */\n     private static List<FormField> toFieldValueArray(List<FieldValue> valueArray, List<ReadResult> readResults) {\n         return valueArray.stream()\n-            .map(fieldValue -> setFormField(null, null, fieldValue, readResults))\n+            .map(fieldValue -> setFormField(fieldValue.getText(), null, fieldValue, readResults))", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3MTI3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498471277", "bodyText": "nit: business_card_url", "author": "samvaity", "createdAt": "2020-10-01T19:35:23Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -555,4 +556,360 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n             });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-RecognizeReceiptsOptions\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeBusinessCardsFromUrl(String)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string\n+        String businessCardUrl = \"{file_source_url}\";", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3MTY3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r498471674", "bodyText": "Consider removing to make the example short?", "author": "samvaity", "createdAt": "2020-10-01T19:36:16Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -555,4 +556,360 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n             });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-RecognizeReceiptsOptions\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeBusinessCardsFromUrl(String)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string\n+        String businessCardUrl = \"{file_source_url}\";\n+        // if training polling operation completed, retrieve the final result.\n+        formRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)\n+            // if training polling operation completed, retrieve the final result.\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(recognizedBusinessCards -> {\n+                for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n+                    RecognizedForm recognizedForm = recognizedBusinessCards.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+                    System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n+                    FormField contactNames = recognizedFields.get(\"ContactNames\");\n+                    if (contactNames != null) {\n+                        if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                            List<FormField> businessCardItems = contactNames.getValue().asList();\n+                            businessCardItems.stream()\n+                                .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue()\n+                                                                                      .getValueType())\n+                                .map(formField -> formField.getValue().asMap())\n+                                .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                                    if (\"FirstName\".equals(key)) {\n+                                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                            String firstName = formField.getValue().asString();\n+                                            System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n+                                                firstName, contactNames.getConfidence());\n+                                        }\n+                                    }\n+                                    if (\"LastName\".equals(key)) {\n+                                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                            String lastName = formField.getValue().asString();\n+                                            System.out.printf(\"Last Name: %s, confidence: %.2f%n\",\n+                                                lastName, contactNames.getConfidence());\n+                                        }\n+                                    }\n+                                }));\n+                        }\n+                    }\n+                    FormField jobTitles = recognizedFields.get(\"JobTitles\");\n+                    if (jobTitles != null) {\n+                        if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n+                            List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n+                            jobTitlesItems.stream().forEach(formField -> {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String jobTitle = formField.getValue().asString();\n+                                    System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n+                                        jobTitle, jobTitles.getConfidence());\n+                                }", "originalCommit": "04b1f7ade10228dbf25d7ac0a69e4cecbca0c0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NDY5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r502684693", "bodyText": "out of curiosity, I imagine you are getting here either empty or null, right?", "author": "maririos", "createdAt": "2020-10-09T21:47:54Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeBusinessCard.java", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FieldValueType;\n+import com.azure.ai.formrecognizer.models.FormField;\n+import com.azure.ai.formrecognizer.models.FormRecognizerOperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Sample for recognizing business card information from a document given through a file.\n+ */\n+public class RecognizeBusinessCard {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(final String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+                                          .credential(new AzureKeyCredential(\"{key}\"))\n+                                          .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+                                          .buildClient();\n+\n+        File sourceFile = new File(\"../formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/\"\n+                                       + \"businessCards/businessCard.jpg\");\n+        byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n+        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+\n+        SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>> analyzeBusinessCardPoller =\n+            client.beginRecognizeBusinessCards(targetStream, sourceFile.length());\n+\n+        List<RecognizedForm> businessCardPageResults = analyzeBusinessCardPoller.getFinalResult();\n+\n+        for (int i = 0; i < businessCardPageResults.size(); i++) {\n+            RecognizedForm recognizedForm = businessCardPageResults.get(i);\n+            Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+            System.out.printf(\"----------- Recognized business card info for page %d -----------%n\", i);\n+            FormField contactNames = recognizedFields.get(\"ContactNames\");\n+            if (contactNames != null) {\n+                if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                    List<FormField> businessCardItems = contactNames.getValue().asList();\n+                    businessCardItems.stream()\n+                        .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue().getValueType())\n+                        .map(formField -> formField.getValue().asMap())\n+                        .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                            if (\"FirstName\".equals(key)) {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String firstName = formField.getValue().asString();\n+                                    System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n+                                        firstName, contactNames.getConfidence());\n+                                }\n+                            }\n+                            if (\"LastName\".equals(key)) {\n+                                if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                    String lastName = formField.getValue().asString();\n+                                    System.out.printf(\"Last Name: %s, confidence: %.2f%n\",\n+                                        lastName, contactNames.getConfidence());\n+                                }\n+                            }\n+                        }));\n+                }\n+            }\n+\n+            FormField jobTitles = recognizedFields.get(\"JobTitles\");\n+            if (jobTitles != null) {\n+                if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n+                    List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n+                    jobTitlesItems.stream().forEach(formField -> {\n+                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                            String jobTitle = formField.getValue().asString();\n+                            System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n+                                jobTitle, jobTitles.getConfidence());\n+                        }\n+                    });\n+                }\n+            }\n+\n+            FormField departments = recognizedFields.get(\"Departments\");\n+            if (departments != null) {\n+                if (FieldValueType.LIST == departments.getValue().getValueType()) {\n+                    List<FormField> departmentsItems = departments.getValue().asList();\n+                    departmentsItems.stream().forEach(formField -> {\n+                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                            String department = formField.getValue().asString();\n+                            System.out.printf(\"Department: %s, confidence: %.2f%n\",\n+                                department, departments.getConfidence());\n+                        }\n+                    });\n+                }\n+            }\n+\n+            FormField emails = recognizedFields.get(\"Emails\");\n+            if (emails != null) {\n+                if (FieldValueType.LIST == emails.getValue().getValueType()) {\n+                    List<FormField> emailsItems = emails.getValue().asList();\n+                    emailsItems.stream().forEach(formField -> {\n+                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                            String email = formField.getValue().asString();\n+                            System.out.printf(\"Email: %s, confidence: %.2f%n\", email, emails.getConfidence());\n+                        }\n+                    });\n+                }\n+            }\n+\n+            FormField websites = recognizedFields.get(\"Websites\");\n+            if (websites != null) {\n+                if (FieldValueType.LIST == websites.getValue().getValueType()) {\n+                    List<FormField> websitesItems = websites.getValue().asList();\n+                    websitesItems.stream().forEach(formField -> {\n+                        if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                            String website = formField.getValue().asString();\n+                            System.out.printf(\"Web site: %s, confidence: %.2f%n\",\n+                                website, websites.getConfidence());\n+                        }\n+                    });\n+                }\n+            }\n+\n+            FormField mobilePhones = recognizedFields.get(\"MobilePhones\");\n+            if (mobilePhones != null) {\n+                if (FieldValueType.LIST == mobilePhones.getValue().getValueType()) {\n+                    List<FormField> mobilePhonesItems = mobilePhones.getValue().asList();\n+                    mobilePhonesItems.stream().forEach(formField -> {\n+                        if (FieldValueType.PHONE_NUMBER == formField.getValue().getValueType()) {\n+                            String mobilePhoneNumber = formField.getValue().asPhoneNumber();", "originalCommit": "62a9813e3865325e975551f1605a4a272abce7f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNjExNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504216114", "bodyText": "Yes. It is still null value. https://teams.microsoft.com/l/message/19:88f2d9dea2344075b5d4bc34d82a3d1c@thread.skype/1600296954847?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=3e17dcb0-4257-4a30-b843-77f47f1d4121&parentMessageId=1600296954847&teamName=Azure%20SDK&channelName=Service%20-%20Form%20Recognizer&createdTime=1600296954847", "author": "mssfang", "createdAt": "2020-10-13T19:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4NDY5Mw=="}], "type": "inlineReview"}, {"oid": "f6800142885abe3c5416ca9c76059752df485458", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6800142885abe3c5416ca9c76059752df485458", "message": "address feedbacks and change to use APIKeyCredentila since AAD not working", "committedDate": "2020-10-13T21:14:48Z", "type": "commit"}, {"oid": "4ca941908e952d64df5b77759742a12796075610", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4ca941908e952d64df5b77759742a12796075610", "message": "remove unused import", "committedDate": "2020-10-13T21:26:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwODYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504308623", "bodyText": "I would recommend adding a simialr sample for businesscards.", "author": "samvaity", "createdAt": "2020-10-13T23:07:46Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -313,11 +313,73 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n }\n ```\n \n+### Recognize business cards\n+Recognize data from business cards using a prebuilt model. Business card fields recognized by the service\n+can be found [here][service_recognize_business_card].\n+See [StronglyTypedRecognizedForm][strongly_typed_sample] for a suggested approach to extract\n+information from a business card. The given sample is for `receipt` but the same approach applies to `business card`.", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2ODc4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504868780", "bodyText": "as discussed in the scrum. Won't need to add a stronglyTyped sample for Buisness Card", "author": "mssfang", "createdAt": "2020-10-14T17:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwODYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwOTc4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504309780", "bodyText": "thev -> the", "author": "samvaity", "createdAt": "2020-10-13T23:11:16Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -558,6 +559,167 @@\n         }\n     }\n \n+    /**\n+     * Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support.</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/businesscardfields\">here</a> for fields found on a business card.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string}\n+     *\n+     * @param businessCardUrl The source URL to the input business card.\n+     *\n+     * @return A {@link PollerFlux} that polls the recognize business card operation until it has completed, has failed,\n+     * or has been cancelled. The completed operation returns a list of {@link RecognizedForm}.\n+     * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n+     * an {@link OperationStatus#FAILED}.\n+     * @throws NullPointerException If {@code businessCardUrl} is null.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<FormRecognizerOperationResult, List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(\n+        String businessCardUrl) {\n+        return beginRecognizeBusinessCardsFromUrl(businessCardUrl, null);\n+    }\n+\n+    /**\n+     * Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained\n+     * model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support.</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/businesscardfields\">here</a> for fields found on a business card.\n+     *\n+     * <p><strong>Code sample</strong></p>\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl#string-RecognizeBusinessCardsOptions}\n+     *\n+     * @param businessCardUrl The source URL to the input business card.\n+     * @param recognizeBusinessCardsOptions The additional configurable {@link RecognizeBusinessCardsOptions options}\n+     * that may be passed when analyzing a business card.\n+     *\n+     * @return A {@link PollerFlux} that polls the recognize business card operation until it has completed, has failed,\n+     * or has been cancelled. The completed operation returns a list of {@link RecognizedForm}.\n+     * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n+     * an {@link OperationStatus#FAILED}.\n+     * @throws NullPointerException If {@code businessCardUrl} is null.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PollerFlux<FormRecognizerOperationResult, List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(\n+        String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions) {\n+        return beginRecognizeBusinessCardsFromUrl(businessCardUrl, recognizeBusinessCardsOptions, Context.NONE);\n+    }\n+\n+    PollerFlux<FormRecognizerOperationResult, List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(\n+        String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context) {\n+        try {\n+            Objects.requireNonNull(businessCardUrl, \"'businessCardUrl' is required and cannot be null.\");\n+\n+            recognizeBusinessCardsOptions = getRecognizeBusinessCardsOptions(recognizeBusinessCardsOptions);\n+            final boolean isFieldElementsIncluded = recognizeBusinessCardsOptions.isFieldElementsIncluded();\n+            return new PollerFlux<>(\n+                recognizeBusinessCardsOptions.getPollInterval(),\n+                urlActivationOperation(\n+                    () -> service.analyzeBusinessCardAsyncWithResponseAsync(isFieldElementsIncluded,\n+                        \"\", new SourcePath().setSource(businessCardUrl), context)\n+                              .map(response -> new FormRecognizerOperationResult(\n+                                  parseModelId(response.getDeserializedHeaders().getOperationLocation())))),\n+                pollingOperation(resultId -> service.getAnalyzeBusinessCardResultWithResponseAsync(resultId, context)),\n+                (activationResponse, pollingContext) -> monoError(logger,\n+                    new RuntimeException(\"Cancellation is not supported\")),\n+                fetchingOperation(resultId -> service.getAnalyzeBusinessCardResultWithResponseAsync(resultId, context))\n+                    .andThen(after -> after.map(modelSimpleResponse -> toRecognizedForm(\n+                        modelSimpleResponse.getValue().getAnalyzeResult(), isFieldElementsIncluded))\n+                                          .onErrorMap(Utility::mapToHttpResponseExceptionIfExist)));\n+        } catch (RuntimeException ex) {\n+            return PollerFlux.error(ex);\n+        }\n+    }\n+\n+    /**\n+     * Recognizes business card data using optical character recognition (OCR) and a prebuilt business card\n+     * trained model.\n+     * <p>The service does not support cancellation of the long running operation and returns with an\n+     * error message indicating absence of cancellation support.</p>\n+     * See <a href=\"https://aka.ms/formrecognizer/businesscardfields\">here</a> for fields found on a business card.\n+     *\n+     * Note that the {@code businessCard} passed must be replayable if retries are enabled (the default).\n+     * In other words, thev{@code Flux} must produce the same data each time it is subscribed to.", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMTQ2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504311467", "bodyText": "We don't need this check as whenever the fields value type == ARRAY it will always be set to null.\nWe could keep the comment for future reference.", "author": "samvaity", "createdAt": "2020-10-13T23:16:14Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -331,7 +334,16 @@ private static float setDefaultConfidenceValue(Float confidence) {\n      */\n     private static List<FormField> toFieldValueArray(List<FieldValue> valueArray, List<ReadResult> readResults) {\n         return valueArray.stream()\n-            .map(fieldValue -> setFormField(null, null, fieldValue, readResults))\n+            .map(fieldValue -> {\n+                FieldData valueData = null;\n+                // ARRAY has ho value data, such as bounding box.\n+                if (ARRAY != fieldValue.getType()) {", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxODExOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504318119", "bodyText": "if we don't have this array type check, the valueData won't be null. We pass this valueData into setFormField(), which directly apply the valueData to\nFormField(name, null, valueData, value, setDefaultConfidenceValue(fieldValue.getConfidence()));", "author": "mssfang", "createdAt": "2020-10-13T23:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMTQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMTcxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504311712", "bodyText": "business card API's", "author": "samvaity", "createdAt": "2020-10-13T23:17:00Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeBusinessCardsOptions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Options that may be passed when using recognize receipt APIs on Form Recognizer client.", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMjEyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504312125", "bodyText": "Should this be firstName.getConfidence() ?\nSame comment for all samples/docsnippets.", "author": "samvaity", "createdAt": "2020-10-13T23:18:30Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -523,4 +524,236 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         }\n         // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-RecognizeReceiptsOptions-Context\n     }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeBusinessCardsFromUrl(String)}\n+     */\n+    public void beginRecognizeBusinessCardsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl#string\n+        String businessCardUrl = \"{business_card_url}\";\n+        formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)\n+            .getFinalResult()\n+            .forEach(recognizedBusinessCard -> {\n+                Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();\n+                FormField contactNames = recognizedFields.get(\"ContactNames\");\n+                if (contactNames != null) {\n+                    if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                        List<FormField> businessCardItems = contactNames.getValue().asList();\n+                        businessCardItems.stream()\n+                            .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue()\n+                                                                                  .getValueType())\n+                            .map(formField -> formField.getValue().asMap())\n+                            .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                                if (\"FirstName\".equals(key)) {\n+                                    if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                        String firstName = formField.getValue().asString();\n+                                        System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n+                                            firstName, contactNames.getConfidence());", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMTI5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504321298", "bodyText": "Yes. It should not be contactNames. It should be formField.getConfidence.", "author": "mssfang", "createdAt": "2020-10-13T23:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMjEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMjk4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504312989", "bodyText": "List<FormField> websiteList = websites.getValue().asList();\nwebsiteList.stream().forEach(websiteItem -> {\nif (FieldValueType.STRING == websiteItem.getValue().getValueType()) \nSimilar comment for other fields and all samples.", "author": "samvaity", "createdAt": "2020-10-13T23:21:08Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeBusinessCardFromUrlAsync.java", "diffHunk": "@@ -0,0 +1,218 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FieldValueType;\n+import com.azure.ai.formrecognizer.models.FormField;\n+import com.azure.ai.formrecognizer.models.FormRecognizerOperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Asynchronous sample for recognizing business card information from an URL.\n+ */\n+public class RecognizeBusinessCardFromUrlAsync {\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+                                               .credential(new AzureKeyCredential(\"{key}\"))\n+                                               .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+                                               .buildAsyncClient();\n+\n+        String businessCardUrl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/sdk/formrecognizer\"\n+                                     + \"/azure-ai-formrecognizer/src/samples/java/sample-forms/businessCards/businessCard.jpg\";\n+        PollerFlux<FormRecognizerOperationResult, List<RecognizedForm>> analyzeBusinessCardPoller =\n+            client.beginRecognizeBusinessCardsFromUrl(businessCardUrl);\n+\n+        Mono<List<RecognizedForm>> businessCardPageResultsMono =\n+            analyzeBusinessCardPoller\n+                .last()\n+                .flatMap(pollResponse -> {\n+                    if (pollResponse.getStatus().isComplete()) {\n+                        System.out.println(\"Polling completed successfully\");\n+                        // training completed successfully, retrieving final result.\n+                        return pollResponse.getFinalResult();\n+                    } else {\n+                        return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n+                                                                   + pollResponse.getStatus()));\n+                    }\n+                });\n+\n+        businessCardPageResultsMono.subscribe(businessCardPageResults -> {\n+            for (int i = 0; i < businessCardPageResults.size(); i++) {\n+                RecognizedForm recognizedForm = businessCardPageResults.get(i);\n+                Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+                System.out.printf(\"----------- Recognized business card info for page %d -----------%n\", i);\n+                FormField contactNames = recognizedFields.get(\"ContactNames\");\n+                if (contactNames != null) {\n+                    if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+                        List<FormField> businessCardItems = contactNames.getValue().asList();\n+                        businessCardItems.stream()\n+                            .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue().getValueType())\n+                            .map(formField -> formField.getValue().asMap())\n+                            .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                                if (\"FirstName\".equals(key)) {\n+                                    if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                        String firstName = formField.getValue().asString();\n+                                        System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n+                                            firstName, contactNames.getConfidence());\n+                                    }\n+                                }\n+                                if (\"LastName\".equals(key)) {\n+                                    if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                        String lastName = formField.getValue().asString();\n+                                        System.out.printf(\"Last Name: %s, confidence: %.2f%n\",\n+                                            lastName, contactNames.getConfidence());\n+                                    }\n+                                }\n+                            }));\n+                    }\n+                }\n+\n+                FormField jobTitles = recognizedFields.get(\"JobTitles\");\n+                if (jobTitles != null) {\n+                    if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n+                        List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n+                        jobTitlesItems.stream().forEach(formField -> {\n+                            if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                String jobTitle = formField.getValue().asString();\n+                                System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n+                                    jobTitle, jobTitles.getConfidence());\n+                            }\n+                        });\n+                    }\n+                }\n+\n+                FormField departments = recognizedFields.get(\"Departments\");\n+                if (departments != null) {\n+                    if (FieldValueType.LIST == departments.getValue().getValueType()) {\n+                        List<FormField> departmentsItems = departments.getValue().asList();\n+                        departmentsItems.stream().forEach(formField -> {\n+                            if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                String department = formField.getValue().asString();\n+                                System.out.printf(\"Department: %s, confidence: %.2f%n\",\n+                                    department, departments.getConfidence());\n+                            }\n+                        });\n+                    }\n+                }\n+\n+                FormField emails = recognizedFields.get(\"Emails\");\n+                if (emails != null) {\n+                    if (FieldValueType.LIST == emails.getValue().getValueType()) {\n+                        List<FormField> emailsItems = emails.getValue().asList();\n+                        emailsItems.stream().forEach(formField -> {\n+                            if (FieldValueType.STRING == formField.getValue().getValueType()) {\n+                                String email = formField.getValue().asString();\n+                                System.out.printf(\"Email: %s, confidence: %.2f%n\", email, emails.getConfidence());\n+                            }\n+                        });\n+                    }\n+                }\n+\n+                FormField websites = recognizedFields.get(\"Websites\");\n+                if (websites != null) {\n+                    if (FieldValueType.LIST == websites.getValue().getValueType()) {\n+                        List<FormField> websitesItems = websites.getValue().asList();\n+                        websitesItems.stream().forEach(formField -> {\n+                            if (FieldValueType.STRING == formField.getValue().getValueType()) {", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMzM3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504313374", "bodyText": "Can this be a list of fields and you loop over them to call validateFieldValueTransforms when testing?", "author": "samvaity", "createdAt": "2020-10-13T23:22:29Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -99,6 +100,18 @@\n     static final String LOCAL_FILE_PATH = \"src/test/resources/sample_files/Test/\";\n     static final String ENCODED_EMPTY_SPACE = \"{\\\"source\\\":\\\"https://fakeuri.com/blank%20space\\\"}\";\n \n+    // Business Card fields\n+    static final String CONTACT_NAMES = \"ContactNames\";\n+    static final String JOB_TITLES = \"JobTitles\";\n+    static final String DEPARTMENTS = \"Departments\";\n+    static final String EMAILS = \"Emails\";\n+    static final String WEBSITES = \"Websites\";\n+    static final String MOBILE_PHONES = \"MobilePhones\";\n+    static final String OTHER_PHONES = \"OtherPhones\";\n+    static final String FAXES = \"Faxes\";\n+    static final String ADDRESSES = \"Addresses\";\n+    static final String COMPANY_NAMES = \"CompanyNames\";", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyNTU0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504325546", "bodyText": "Not sure if I follow it. Those fields are static fields. Looping all of them isn't an extra cost?", "author": "mssfang", "createdAt": "2020-10-14T00:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMzM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyNjA4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504726080", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-10-14T14:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMzM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMzUyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504313521", "bodyText": "Why was this removed?", "author": "samvaity", "createdAt": "2020-10-13T23:23:04Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -696,7 +818,6 @@ static void validateMultiPageDataLabeled(List<RecognizedForm> actualRecognizedFo\n                 assertNotNull(formField.getName());\n                 assertNotNull(formField.getValue());\n                 assertNotNull(formField.getValueData().getText());", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyNjQ4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504326480", "bodyText": "my bad. It used to cause some tests failed with previous implementation, but no longer a case now. Will bring it back.", "author": "mssfang", "createdAt": "2020-10-14T00:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMzUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MjE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504342173", "bodyText": "In response to this\nCould do something like,\nbusinessCardsFields.forEach(eachField -> \n     validateFieldValueTransforms(expectedReceiptFields.get(eachField), actualRecognizedBusinessCardFields.get(eachField), readResults, includeFieldElements))\nwhere businessCards = List.of(\"ContactNames\", \"MobilePhones\")\nSo you just have one constant related to business card fields rather than 10/12 loose ones!", "author": "samvaity", "createdAt": "2020-10-14T01:06:06Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -596,6 +659,56 @@ void validateRecognizedResult(List<RecognizedForm> actualFormList, boolean inclu\n         }\n     }\n \n+    // Business cards\n+    void validateBusinessCardDataFields(Map<String, FormField> actualRecognizedBusinessCardFields, boolean includeFieldElements) {\n+        final AnalyzeResult analyzeResult = getAnalyzeRawResponse().getAnalyzeResult();\n+        List<ReadResult> readResults = analyzeResult.getReadResults();\n+        DocumentResult documentResult = analyzeResult.getDocumentResults().get(0);\n+        Map<String, FieldValue> expectedReceiptFields = documentResult.getFields();\n+\n+        validateFieldValueTransforms(expectedReceiptFields.get(CONTACT_NAMES),", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MzQxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504343412", "bodyText": "Is this updated to not use Default Credential because business cards endpoint is not working with AAD?", "author": "samvaity", "createdAt": "2020-10-14T01:10:49Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingClientTestBase.java", "diffHunk": "@@ -106,7 +105,8 @@ FormTrainingClientBuilder getFormTrainingClientBuilder(HttpClient httpClient,\n         if (getTestMode() == TestMode.PLAYBACK) {\n             builder.credential(new AzureKeyCredential(INVALID_KEY));\n         } else {\n-            builder.credential(new DefaultAzureCredentialBuilder().build());\n+            builder.credential(new AzureKeyCredential(", "originalCommit": "4ca941908e952d64df5b77759742a12796075610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQwOTg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504409843", "bodyText": "Yes AAD is not working for Business Card now", "author": "mssfang", "createdAt": "2020-10-14T05:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MzQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgzMzgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504833819", "bodyText": "Now, as in it was working previously and stopped working?\nedit: could you post in the teams service channel.", "author": "samvaity", "createdAt": "2020-10-14T17:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MzQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NTQ3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504985475", "bodyText": "Talked offline. It works due to only problem from my desktop.", "author": "mssfang", "createdAt": "2020-10-14T21:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MzQxMg=="}], "type": "inlineReview"}, {"oid": "10cb7cbc8f7bcd80946e6292809781677a667cc2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/10cb7cbc8f7bcd80946e6292809781677a667cc2", "message": "address feedbacks", "committedDate": "2020-10-14T17:58:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3NDk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504874944", "bodyText": "It will be good to also add that this version of the library now targets v2.1 of the service", "author": "maririos", "createdAt": "2020-10-14T18:10:12Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/CHANGELOG.md", "diffHunk": "@@ -1,7 +1,8 @@\n # Release History\n \n ## 3.1.0-beta.1 (Unreleased)\n-", "originalCommit": "10cb7cbc8f7bcd80946e6292809781677a667cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "812ea49029a6ab96dbdf1fc05a0fac5d28e09693", "url": "https://github.com/Azure/azure-sdk-for-java/commit/812ea49029a6ab96dbdf1fc05a0fac5d28e09693", "message": "fixes checkstyle error", "committedDate": "2020-10-14T18:17:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMzU1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504903558", "bodyText": "In which cases page here will be null?\nFor what I see in .NET, the ContactNames page is null so I am setting it to 1 because -1 sounds too weird. You should always have at least one page if you are here.\nI did create an issue to follow up on that with the service team and I initiated a thread for that.\nIf you are seeing more cases, please add to the conversation.", "author": "maririos", "createdAt": "2020-10-14T18:58:18Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -331,7 +334,16 @@ private static float setDefaultConfidenceValue(Float confidence) {\n      */\n     private static List<FormField> toFieldValueArray(List<FieldValue> valueArray, List<ReadResult> readResults) {\n         return valueArray.stream()\n-            .map(fieldValue -> setFormField(null, null, fieldValue, readResults))\n+            .map(fieldValue -> {\n+                FieldData valueData = null;\n+                // ARRAY has ho value data, such as bounding box.\n+                if (ARRAY != fieldValue.getType()) {\n+                    valueData = new FieldData(fieldValue.getText(), toBoundingBox(fieldValue.getBoundingBox()),\n+                        fieldValue.getPage() == null ? -1 : fieldValue.getPage(),", "originalCommit": "812ea49029a6ab96dbdf1fc05a0fac5d28e09693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNDg5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504904896", "bodyText": "We did have an offline conversation related to this. It shouldn't be null and should use fieldValue.getPage().\ncc: @mssfang", "author": "samvaity", "createdAt": "2020-10-14T19:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMzU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjU5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504906596", "bodyText": "Yah. Yes. Forget this change. Will update it soon", "author": "mssfang", "createdAt": "2020-10-14T19:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMzU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNDI2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504914264", "bodyText": "fieldValue.getPage() will return null, so we are assign 1 to it  as the page number?", "author": "mssfang", "createdAt": "2020-10-14T19:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMzU1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MjMyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504942320", "bodyText": "I think for now using 1 is ok. It might change according to what the service team says", "author": "maririos", "createdAt": "2020-10-14T20:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwMzU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjcyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504906729", "bodyText": "Something to consider, I see this in all Options classes.  Any reason why this is not set somewhere general int he library so the options can reference that value instead?", "author": "maririos", "createdAt": "2020-10-14T19:03:59Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeBusinessCardsOptions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Options that may be passed when using recognize business card APIs on Form Recognizer client.\n+ */\n+@Fluent\n+public final class RecognizeBusinessCardsOptions {\n+    private static final Duration DEFAULT_POLL_INTERVAL = Duration.ofSeconds(5);", "originalCommit": "812ea49029a6ab96dbdf1fc05a0fac5d28e09693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3OTE3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r504979176", "bodyText": "it can be moved to Utility class. Thanks Mariana", "author": "mssfang", "createdAt": "2020-10-14T21:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjcyOQ=="}], "type": "inlineReview"}, {"oid": "934ec83fc4b6ab78137a0901739bb14b848786e1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/934ec83fc4b6ab78137a0901739bb14b848786e1", "message": "address feedbacks", "committedDate": "2020-10-14T21:20:07Z", "type": "commit"}, {"oid": "3ca7aabc222e58c8fdecd1fed2a35e7b7fe77bba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ca7aabc222e58c8fdecd1fed2a35e7b7fe77bba", "message": "checkstyle and -1 change to 1 for page num", "committedDate": "2020-10-14T21:24:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzNjg0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r505036842", "bodyText": "Just thinking about our variable names here, we should do this better\nFormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\nif (contactNameFormField != null) {\n        if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n            List<FormField> contactNamesList= contactNames.getValue().asList();\n            contactNamesList.stream()\n                .filter(contactNameItem-> FieldValueType.MAP == contactNameItem.getValue().getValueType())\n                .map(eachContactName -> {\n                    System.out.printf(\"Contact name: %s%n\", eachContactName .getValueData().getText());\n                    return eachContactName .getValue().asMap();\n                })", "author": "samvaity", "createdAt": "2020-10-14T22:46:19Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/README.md", "diffHunk": "@@ -313,11 +313,76 @@ for (int i = 0; i < receiptPageResults.size(); i++) {\n }\n ```\n \n+### Recognize business cards\n+Recognize data from business cards using a prebuilt model. Business card fields recognized by the service\n+can be found [here][service_recognize_business_card].\n+See [StronglyTypedRecognizedForm][strongly_typed_sample] for a suggested approach to extract\n+information from a business card. The given sample is for `receipt` but the same approach applies to `business card`.\n+\n+<!-- embedme ./src/samples/java/com/azure/ai/formrecognizer/ReadmeSamples.java#L200-L254-->\n+```java\n+String businessCardUrl =\n+    \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/sdk/formrecognizer\"\n+        + \"/azure-ai-formrecognizer/src/samples/java/sample-forms/businessCards/businessCard.jpg\";\n+\n+SyncPoller<FormRecognizerOperationResult, List<RecognizedForm>> analyzeBusinessCardPoller =\n+    formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl);\n+\n+List<RecognizedForm> businessCardPageResults = analyzeBusinessCardPoller.getFinalResult();\n+\n+for (int i = 0; i < businessCardPageResults.size(); i++) {\n+    RecognizedForm recognizedForm = businessCardPageResults.get(i);\n+    Map<String, FormField> recognizedFields = recognizedForm.getFields();\n+    System.out.printf(\"----------- Recognized business card info for page %d -----------%n\", i);\n+    FormField contactNames = recognizedFields.get(\"ContactNames\");\n+    if (contactNames != null) {\n+        if (FieldValueType.LIST == contactNames.getValue().getValueType()) {\n+            List<FormField> businessCardItems = contactNames.getValue().asList();\n+            businessCardItems.stream()\n+                .filter(businessCardItem -> FieldValueType.MAP == businessCardItem.getValue().getValueType())\n+                .map(formField -> {\n+                    System.out.printf(\"Contact name: %s%n\", formField.getValueData().getText());\n+                    return formField.getValue().asMap();\n+                })", "originalCommit": "3ca7aabc222e58c8fdecd1fed2a35e7b7fe77bba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzOTE0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15829#discussion_r505039149", "bodyText": ":)", "author": "samvaity", "createdAt": "2020-10-14T22:49:31Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerClientTestBase.java", "diffHunk": "@@ -596,6 +651,31 @@ void validateRecognizedResult(List<RecognizedForm> actualFormList, boolean inclu\n         }\n     }\n \n+    // Business cards\n+    void validateBusinessCardDataFields(Map<String, FormField> actualRecognizedBusinessCardFields, boolean includeFieldElements) {\n+        final AnalyzeResult analyzeResult = getAnalyzeRawResponse().getAnalyzeResult();\n+        List<ReadResult> readResults = analyzeResult.getReadResults();\n+        DocumentResult documentResult = analyzeResult.getDocumentResults().get(0);\n+        Map<String, FieldValue> expectedReceiptFields = documentResult.getFields();\n+\n+        BUSINESS_CARD_FIELDS.forEach(businessCardField ->", "originalCommit": "3ca7aabc222e58c8fdecd1fed2a35e7b7fe77bba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f741e1fe767e536072d6d47c6943d97e6e3a6c6f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f741e1fe767e536072d6d47c6943d97e6e3a6c6f", "message": "update verbose naming of contactNames", "committedDate": "2020-10-14T23:51:55Z", "type": "commit"}, {"oid": "d443cc2f711f2e5c381a2b977211821350623178", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d443cc2f711f2e5c381a2b977211821350623178", "message": "resolve conflict and added templ solution to walk around the checkstyle errors introduced in composited model feature", "committedDate": "2020-10-15T01:16:52Z", "type": "commit"}, {"oid": "4dab722685bcb44fbe32b788dc468c7f8c07228f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4dab722685bcb44fbe32b788dc468c7f8c07228f", "message": "Readme sample line updates", "committedDate": "2020-10-15T01:23:07Z", "type": "commit"}]}