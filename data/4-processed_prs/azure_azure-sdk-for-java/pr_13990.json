{"pr_number": 13990, "pr_title": "Add builder, sync and async digital twin clients", "pr_createdAt": "2020-08-11T21:42:38Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13990", "timeline": [{"oid": "1a7d43fa285c44ce97a45f63e8aade1abdc61280", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a7d43fa285c44ce97a45f63e8aade1abdc61280", "message": "Add builder, sync and async digital twin clients\n\nAlso add simple samples that demonstrate the creation and use of each client", "committedDate": "2020-08-11T21:41:12Z", "type": "commit"}, {"oid": "dc984e30561cc2f448c2463046f546a2c96b809d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc984e30561cc2f448c2463046f546a2c96b809d", "message": "squash", "committedDate": "2020-08-11T21:43:04Z", "type": "commit"}, {"oid": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a2ff3755f8fd75f88652ac3108b3216df3252e8", "message": "squash", "committedDate": "2020-08-11T21:46:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5NDMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468894317", "bodyText": "As an interesting aside, the actual type of the returned digital twin here is a map. Not a Json object, strictly speaking.", "author": "timtay-microsoft", "createdAt": "2020-08-11T22:13:56Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/SyncSample.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+public class SyncSample\n+{\n+    public static void main(String[] args)\n+    {\n+        String tenantId = System.getenv(\"TENANT_ID\");\n+        String clientId = System.getenv(\"CLIENT_ID\");\n+        String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+        String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+        String digitalTwinId = System.getenv(\"DIGITAL_TWIN_ID\");\n+\n+        TokenCredential tokenCredential = new ClientSecretCredentialBuilder()\n+            .tenantId(tenantId)\n+            .clientId(clientId)\n+            .clientSecret(clientSecret)\n+            .build();\n+\n+        DigitalTwinsClient client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(tokenCredential)\n+            .endpoint(endpoint)\n+            .buildClient();\n+\n+        DigitalTwinsGetByIdResponse syncResponse = client.getDigitalTwin(digitalTwinId);\n+        Object digitalTwin = syncResponse.getValue();", "originalCommit": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNjkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468916915", "bodyText": "yeah, I remember that being an issue in the previous java autorest as well, it didn't like json strings for some reason; always wanted to return it as a linkedmap or something similar", "author": "abhipsaMisra", "createdAt": "2020-08-11T23:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5NDMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5NDUyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468894521", "bodyText": "If you are interested in trying it out, these values can be copied from your C# ADT SDK config", "author": "timtay-microsoft", "createdAt": "2020-08-11T22:14:26Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/SyncSample.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+\n+public class SyncSample\n+{\n+    public static void main(String[] args)\n+    {\n+        String tenantId = System.getenv(\"TENANT_ID\");\n+        String clientId = System.getenv(\"CLIENT_ID\");\n+        String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+        String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+        String digitalTwinId = System.getenv(\"DIGITAL_TWIN_ID\");", "originalCommit": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNDg4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468914883", "bodyText": "do we have some info on what these policies do? request Id and retry policies are self-descriptive, but I am not sure what a datepolicy() does", "author": "abhipsaMisra", "createdAt": "2020-08-11T23:11:48Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());", "originalCommit": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyMTIwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468921202", "bodyText": "AddDatePolicy() simply adds a datetime header to each HTTP request. I'll add a comment for that", "author": "timtay-microsoft", "createdAt": "2020-08-11T23:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNDg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNTQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468915455", "bodyText": "A comment on what is added before retry policy, and what is added after would help as well", "author": "abhipsaMisra", "createdAt": "2020-08-11T23:13:50Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+        policies.addAll(additionalPolicies);\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);", "originalCommit": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNTY1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468915657", "bodyText": "\ud83d\udc4d", "author": "abhipsaMisra", "createdAt": "2020-08-11T23:14:25Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+        policies.addAll(additionalPolicies);\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff", "originalCommit": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNTkwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468915908", "bodyText": "can we split this into multiple lines and add tab support?", "author": "abhipsaMisra", "createdAt": "2020-08-11T23:15:09Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClientBuilder.java", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.annotation.ServiceClientBuilder;\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * This class provides a fluent builder API to help aid the configuration and instantiation of {@link DigitalTwinsClient\n+ * DigitalTwinsClients} and {@link DigitalTwinsAsyncClient DigitalTwinsAsyncClients}, call {@link #buildClient() buildClient} and {@link\n+ * #buildAsyncClient() buildAsyncClient} respectively to construct an instance of the desired client.\n+ */\n+@ServiceClientBuilder(serviceClients = {DigitalTwinsClient.class, DigitalTwinsAsyncClient.class})\n+public class DigitalTwinsClientBuilder {\n+    private final List<HttpPipelinePolicy> additionalPolicies = new ArrayList<>();\n+    // mandatory\n+    private String endpoint;\n+    private TokenCredential tokenCredential;\n+    // optional/have default values\n+    private DigitalTwinsServiceVersion serviceVersion;\n+    private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n+    private RetryPolicy retryPolicy;\n+\n+    private static HttpPipeline buildPipeline(TokenCredential tokenCredential, String endpoint,\n+                                              HttpLogOptions logOptions, HttpClient httpClient,\n+                                              List<HttpPipelinePolicy> additionalPolicies, RetryPolicy retryPolicy) {\n+        // Closest to API goes first, closest to wire goes last.\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+\n+        policies.add(new RequestIdPolicy());\n+\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+\n+        policies.add(retryPolicy);\n+\n+        policies.add(new AddDatePolicy());\n+        HttpPipelinePolicy credentialPolicy = new BearerTokenAuthenticationPolicy(tokenCredential, GetAuthorizationScopes(endpoint));\n+        policies.add(credentialPolicy);\n+        policies.addAll(additionalPolicies);\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+\n+        policies.add(new HttpLoggingPolicy(logOptions));\n+\n+        return new HttpPipelineBuilder()\n+            .policies(policies.toArray(new HttpPipelinePolicy[0]))\n+            .httpClient(httpClient)\n+            .build();\n+    }\n+\n+    private static String[] GetAuthorizationScopes(String endpoint) {\n+        // Uri representation for azure digital twin app Id \"0b07f429-9f4b-4714-9392-cc5e8e80c8b0\" in the public cloud.\n+        String adtPublicCloudAppId = \"https://digitaltwins.azure.net\";\n+        String defaultPermissionConsent = \"/.default\";\n+\n+        // If the endpoint is in Azure public cloud, the suffix will have \"azure.net\" or \"ppe.net\".\n+        // Once ADT becomes available in other clouds, their corresponding scope has to be matched and set.\n+        if (endpoint.indexOf(\"azure.net\") > 0\n+            || endpoint.indexOf(\"ppe.net\") > 0) {\n+            return new String[]{adtPublicCloudAppId + defaultPermissionConsent};\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Azure digital twins instance endpoint %s is not valid.\", endpoint));\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsClient\n+     */\n+    public DigitalTwinsClient buildClient() {\n+        return new DigitalTwinsClient(buildAsyncClient());\n+    }\n+\n+    /**\n+     * Create a {@link DigitalTwinsAsyncClient} based on the builder settings.\n+     *\n+     * @return the created synchronous DigitalTwinsAsyncClient\n+     */\n+    public DigitalTwinsAsyncClient buildAsyncClient() {\n+        Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n+        Objects.requireNonNull(endpoint, \"'endpoint' cannot be null\");\n+\n+        // Set defaults for these fields if they were not set while building the client\n+        this.serviceVersion = this.serviceVersion != null ? this.serviceVersion : DigitalTwinsServiceVersion.getLatest();\n+        this.retryPolicy = this.retryPolicy != null ? this.retryPolicy : new RetryPolicy(); // Default is exponential backoff\n+        this.httpPipeline = this.httpPipeline != null ? httpPipeline : buildPipeline(this.tokenCredential, this.endpoint, this.logOptions, this.httpClient, this.additionalPolicies, this.retryPolicy);", "originalCommit": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyMTY4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468921684", "bodyText": "Sure, since this line in particular is a bit long", "author": "timtay-microsoft", "createdAt": "2020-08-11T23:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNTkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNjQ1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468916456", "bodyText": "I'd release a lock or a semaphore inside the the subscribe/ error blocks instead, cleaner than a thread.sleep. what do you think?", "author": "abhipsaMisra", "createdAt": "2020-08-11T23:16:43Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.digitaltwins.core.models.DigitalTwinsGetByIdResponse;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import reactor.core.publisher.Mono;\n+\n+public class AsyncSample\n+{\n+    public static void main(String[] args) throws InterruptedException\n+    {\n+        String tenantId = System.getenv(\"TENANT_ID\");\n+        String clientId = System.getenv(\"CLIENT_ID\");\n+        String clientSecret = System.getenv(\"CLIENT_SECRET\");\n+        String endpoint = System.getenv(\"DIGITAL_TWINS_ENDPOINT\");\n+        String digitalTwinId = System.getenv(\"DIGITAL_TWIN_ID\");\n+\n+        TokenCredential tokenCredential = new ClientSecretCredentialBuilder()\n+            .tenantId(tenantId)\n+            .clientId(clientId)\n+            .clientSecret(clientSecret)\n+            .build();\n+\n+        DigitalTwinsAsyncClient client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(tokenCredential)\n+            .endpoint(endpoint)\n+            .buildAsyncClient();\n+\n+        Mono<DigitalTwinsGetByIdResponse> asyncResponse = client.getDigitalTwin(digitalTwinId);\n+\n+        // once the async thread completes, the digital twin will be printed, or an error will be printed\n+        asyncResponse.subscribe(\n+            result -> System.out.println(result.getValue()),\n+            error -> System.err.println(\"Failed to get digital twin with Id \" + digitalTwinId + \" due to error message \" + error.getMessage()));\n+\n+        //Wait for async thread to finish before ending this thread.\n+        Thread.sleep(3000);", "originalCommit": "0a2ff3755f8fd75f88652ac3108b3216df3252e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxOTE3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13990#discussion_r468919171", "bodyText": "I don't expect this sample to make it to the master branch, so I figured Thread.sleep would be fine for now. These samples are to help us understand what these java ADT APIs will look like in actual code and to give us something to use as a sample when manually testing", "author": "timtay-microsoft", "createdAt": "2020-08-11T23:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxNjQ1Ng=="}], "type": "inlineReview"}, {"oid": "9780ca5f0e42be498edfce7024326508ace9d20b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9780ca5f0e42be498edfce7024326508ace9d20b", "message": "cr comments", "committedDate": "2020-08-12T00:25:51Z", "type": "commit"}]}