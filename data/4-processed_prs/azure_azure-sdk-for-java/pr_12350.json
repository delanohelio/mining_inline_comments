{"pr_number": 12350, "pr_title": "Mgmt: Appplatform", "pr_createdAt": "2020-06-19T07:40:30Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12350", "timeline": [{"oid": "168b983c1f742ac01a056e962ab36dec2aab15be", "url": "https://github.com/Azure/azure-sdk-for-java/commit/168b983c1f742ac01a056e962ab36dec2aab15be", "message": "feat: add api specs", "committedDate": "2020-06-16T02:14:08Z", "type": "commit"}, {"oid": "38b778af5728d5a29bfeae0d7bb68f948322ec3b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/38b778af5728d5a29bfeae0d7bb68f948322ec3b", "message": "feat: generate app platform", "committedDate": "2020-06-16T02:15:18Z", "type": "commit"}, {"oid": "72dc3ec5844676c032d2a9f5647d241036e3140c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/72dc3ec5844676c032d2a9f5647d241036e3140c", "message": "add pom.xml", "committedDate": "2020-06-16T02:15:23Z", "type": "commit"}, {"oid": "e9feeb621a6e4b59004b6daeae428e0dac633a95", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e9feeb621a6e4b59004b6daeae428e0dac633a95", "message": "Add spring interface", "committedDate": "2020-06-19T07:39:22Z", "type": "commit"}, {"oid": "85169563f0cf46c128d7706ae5a889b7f3200668", "url": "https://github.com/Azure/azure-sdk-for-java/commit/85169563f0cf46c128d7706ae5a889b7f3200668", "message": "fix compile error", "committedDate": "2020-06-22T03:21:42Z", "type": "commit"}, {"oid": "5f512d218d60abd9f90064371dfd4226e665ba37", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f512d218d60abd9f90064371dfd4226e665ba37", "message": "add implementation", "committedDate": "2020-07-01T08:30:46Z", "type": "commit"}, {"oid": "841202db7f00e254d9afee93043383690b06868f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/841202db7f00e254d9afee93043383690b06868f", "message": "add piggymetrics source code for test", "committedDate": "2020-07-01T08:32:12Z", "type": "commit"}, {"oid": "0ea7e1dd399a34d3031efb79525f75601194a451", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ea7e1dd399a34d3031efb79525f75601194a451", "message": "add unit test", "committedDate": "2020-07-02T02:49:11Z", "type": "commit"}, {"oid": "bacdf9d28513b0fad96c33e13debf2a29b60d337", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bacdf9d28513b0fad96c33e13debf2a29b60d337", "message": "update test and some impl", "committedDate": "2020-07-02T06:33:44Z", "type": "commit"}, {"oid": "b11d293a6c1064411dc05be3195658d131705345", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b11d293a6c1064411dc05be3195658d131705345", "message": "Merge branch 'master' into appplatform", "committedDate": "2020-07-02T06:57:15Z", "type": "commit"}, {"oid": "58f80c66966c41aa881ccb28f2b923a7694838be", "url": "https://github.com/Azure/azure-sdk-for-java/commit/58f80c66966c41aa881ccb28f2b923a7694838be", "message": "add spring service api in azure", "committedDate": "2020-07-02T08:07:23Z", "type": "commit"}, {"oid": "d807eb46233396574ca622cf33fe2f178f4e990d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d807eb46233396574ca622cf33fe2f178f4e990d", "message": "regen app platform", "committedDate": "2020-07-02T08:35:44Z", "type": "commit"}, {"oid": "caf76a921199ed014fdfa93102f104f158e7517a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/caf76a921199ed014fdfa93102f104f158e7517a", "message": "fix compile error", "committedDate": "2020-07-02T08:37:43Z", "type": "commit"}, {"oid": "d20e8e5eb5412d208a80930ae568cec8cc0e5145", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d20e8e5eb5412d208a80930ae568cec8cc0e5145", "message": "fix checkstyle", "committedDate": "2020-07-03T02:35:02Z", "type": "commit"}, {"oid": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d02ec9c9966ebbb06d92c46925a3a15011948baa", "message": "compress source code to temp file rather than memory", "committedDate": "2020-07-03T02:35:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NzUzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449367539", "bodyText": "Why Mono? Normally you should create ShareFileAsyncClient, which is not async, and pass it to other methods. Async call of create(maxSize) appear not about the createShareFileAsyncClient method.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T04:18:29Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppDeploymentImpl.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.DeploymentResourceInner;\n+import com.azure.resourcemanager.appplatform.fluent.inner.LogFileUrlResponseInner;\n+import com.azure.resourcemanager.appplatform.models.DeploymentInstance;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceStatus;\n+import com.azure.resourcemanager.appplatform.models.DeploymentSettings;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.UserSourceInfo;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClientBuilder;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class SpringAppDeploymentImpl\n+    extends ExternalChildResourceImpl<SpringAppDeployment, DeploymentResourceInner, SpringAppImpl, SpringApp>\n+    implements SpringAppDeployment, SpringAppDeployment.Definition, SpringAppDeployment.Update {\n+    private static final int BLOCK_SIZE = 4 * 1024 * 1024; // 4MB\n+    private final SpringAppDeploymentsImpl client;\n+    private SpringAppDeployment originalDeployment;\n+\n+    SpringAppDeploymentImpl(String name, SpringAppImpl parent,\n+                            DeploymentResourceInner innerObject, SpringAppDeploymentsImpl client) {\n+        super(name, parent, innerObject);\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public String appName() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().appName();\n+    }\n+\n+    @Override\n+    public DeploymentSettings settings() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().deploymentSettings();\n+    }\n+\n+    @Override\n+    public DeploymentResourceStatus status() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().status();\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().active();\n+    }\n+\n+    @Override\n+    public OffsetDateTime createdTime() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().createdTime();\n+    }\n+\n+    @Override\n+    public List<DeploymentInstance> instances() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().instances();\n+    }\n+\n+    @Override\n+    public String getLogFileUrl() {\n+        return getLogFileUrlAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<String> getLogFileUrlAsync() {\n+        return manager().inner().getDeployments().getLogFileUrlAsync(\n+            parent().parent().resourceGroupName(), parent().parent().name(), parent().name(), name()\n+        )\n+            .map(LogFileUrlResponseInner::url);\n+    }\n+\n+    private void ensureDeploySettings() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().deploymentSettings() == null) {\n+            inner().properties().withDeploymentSettings(new DeploymentSettings());\n+        }\n+    }\n+\n+    private void ensureSource() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().source() == null) {\n+            inner().properties().withSource(new UserSourceInfo());\n+        }\n+    }\n+\n+    private File compressSource(File sourceFolder) throws IOException {\n+        File compressFile = File.createTempFile(\"java_package\", \"tar.gz\");\n+        try (TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                 new GZIPOutputStream(new FileOutputStream(compressFile)))) {\n+            tarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\n+            for (Path sourceFile : Files.walk(sourceFolder.toPath()).collect(Collectors.toList())) {\n+                String relativePath = sourceFolder.toPath().relativize(sourceFile).toString();\n+                TarArchiveEntry entry = new TarArchiveEntry(sourceFile.toFile(), relativePath);\n+                if (sourceFile.toFile().isFile()) {\n+                    try (InputStream inputStream = new FileInputStream(sourceFile.toFile())) {\n+                        tarArchiveOutputStream.putArchiveEntry(entry);\n+                        IOUtils.copy(inputStream, tarArchiveOutputStream);\n+                        tarArchiveOutputStream.closeArchiveEntry();\n+                    }\n+                } else {\n+                    tarArchiveOutputStream.putArchiveEntry(entry);\n+                    tarArchiveOutputStream.closeArchiveEntry();\n+                }\n+            }\n+        }\n+        return compressFile;\n+    }\n+\n+    private Mono<ShareFileAsyncClient> createShareFileAsyncClient(ResourceUploadDefinition option, long maxSize) {", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MDgzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449370837", "bodyText": "Since all callers need the create function, so I add it to the common function. Unless we do create repeatedly in every caller, we'll always need a function to return a Mono<ShareFileAsyncClient> as common function. I could remove this due to it is little repeated code.", "author": "ChenTanyi", "createdAt": "2020-07-03T04:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NzUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NzY1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449377653", "bodyText": "You need 2 things from this method, the ShareFileAsyncClient which is just an object, and a Mono<Void> as completion of the create. You should not mix the 2 to a Mono<ShareFileAsyncClient>, it just abuses the reactor.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T05:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NzUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2ODk0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449368949", "bodyText": "Same as above, it should be a Mono<Void> to signal completion.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T04:25:34Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppDeploymentImpl.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.DeploymentResourceInner;\n+import com.azure.resourcemanager.appplatform.fluent.inner.LogFileUrlResponseInner;\n+import com.azure.resourcemanager.appplatform.models.DeploymentInstance;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceStatus;\n+import com.azure.resourcemanager.appplatform.models.DeploymentSettings;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.UserSourceInfo;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClientBuilder;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class SpringAppDeploymentImpl\n+    extends ExternalChildResourceImpl<SpringAppDeployment, DeploymentResourceInner, SpringAppImpl, SpringApp>\n+    implements SpringAppDeployment, SpringAppDeployment.Definition, SpringAppDeployment.Update {\n+    private static final int BLOCK_SIZE = 4 * 1024 * 1024; // 4MB\n+    private final SpringAppDeploymentsImpl client;\n+    private SpringAppDeployment originalDeployment;\n+\n+    SpringAppDeploymentImpl(String name, SpringAppImpl parent,\n+                            DeploymentResourceInner innerObject, SpringAppDeploymentsImpl client) {\n+        super(name, parent, innerObject);\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public String appName() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().appName();\n+    }\n+\n+    @Override\n+    public DeploymentSettings settings() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().deploymentSettings();\n+    }\n+\n+    @Override\n+    public DeploymentResourceStatus status() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().status();\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().active();\n+    }\n+\n+    @Override\n+    public OffsetDateTime createdTime() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().createdTime();\n+    }\n+\n+    @Override\n+    public List<DeploymentInstance> instances() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().instances();\n+    }\n+\n+    @Override\n+    public String getLogFileUrl() {\n+        return getLogFileUrlAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<String> getLogFileUrlAsync() {\n+        return manager().inner().getDeployments().getLogFileUrlAsync(\n+            parent().parent().resourceGroupName(), parent().parent().name(), parent().name(), name()\n+        )\n+            .map(LogFileUrlResponseInner::url);\n+    }\n+\n+    private void ensureDeploySettings() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().deploymentSettings() == null) {\n+            inner().properties().withDeploymentSettings(new DeploymentSettings());\n+        }\n+    }\n+\n+    private void ensureSource() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().source() == null) {\n+            inner().properties().withSource(new UserSourceInfo());\n+        }\n+    }\n+\n+    private File compressSource(File sourceFolder) throws IOException {\n+        File compressFile = File.createTempFile(\"java_package\", \"tar.gz\");\n+        try (TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                 new GZIPOutputStream(new FileOutputStream(compressFile)))) {\n+            tarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\n+            for (Path sourceFile : Files.walk(sourceFolder.toPath()).collect(Collectors.toList())) {\n+                String relativePath = sourceFolder.toPath().relativize(sourceFile).toString();\n+                TarArchiveEntry entry = new TarArchiveEntry(sourceFile.toFile(), relativePath);\n+                if (sourceFile.toFile().isFile()) {\n+                    try (InputStream inputStream = new FileInputStream(sourceFile.toFile())) {\n+                        tarArchiveOutputStream.putArchiveEntry(entry);\n+                        IOUtils.copy(inputStream, tarArchiveOutputStream);\n+                        tarArchiveOutputStream.closeArchiveEntry();\n+                    }\n+                } else {\n+                    tarArchiveOutputStream.putArchiveEntry(entry);\n+                    tarArchiveOutputStream.closeArchiveEntry();\n+                }\n+            }\n+        }\n+        return compressFile;\n+    }\n+\n+    private Mono<ShareFileAsyncClient> createShareFileAsyncClient(ResourceUploadDefinition option, long maxSize) {\n+        ShareFileAsyncClient shareFileAsyncClient = new ShareFileClientBuilder()\n+            .endpoint(option.uploadUrl())\n+            .httpClient(manager().httpPipeline().getHttpClient())\n+            .buildFileAsyncClient();\n+\n+        return shareFileAsyncClient.create(maxSize)\n+            .then(Mono.just(shareFileAsyncClient));\n+    }\n+\n+    private Mono<ShareFileAsyncClient> uploadToStorage(byte[] bytes, ResourceUploadDefinition option) {", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2OTUwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449369507", "bodyText": "Should we move the dependency to parent pom so the version control only happen there?", "author": "xseeseesee", "createdAt": "2020-07-03T04:28:13Z", "path": "sdk/appplatform/mgmt/pom.xml", "diffHunk": "@@ -0,0 +1,139 @@\n+<!--\n+ Copyright (c) Microsoft Corporation. All rights reserved.\n+ Licensed under the MIT License. See License.txt in the project root for\n+ license information.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+      <groupId>com.azure.resourcemanager</groupId>\n+      <artifactId>azure-resourcemanager-parent</artifactId>\n+      <version>2.0.0-SNAPSHOT</version>\n+      <relativePath>../../management/pom.xml</relativePath>\n+    </parent>\n+\n+    <artifactId>azure-resourcemanager-appplatform</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Microsoft Azure SDK for App Platform Management</name>\n+    <description>This package contains Microsoft Azure App Platform Management SDK.</description>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+    <licenses>\n+      <license>\n+        <name>The MIT License (MIT)</name>\n+        <url>http://opensource.org/licenses/MIT</url>\n+        <distribution>repo</distribution>\n+      </license>\n+    </licenses>\n+\n+    <scm>\n+      <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+      <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+      <tag>HEAD</tag>\n+    </scm>\n+\n+    <properties>\n+      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+      <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+    </properties>\n+\n+    <developers>\n+      <developer>\n+        <id>microsoft</id>\n+        <name>Microsoft</name>\n+      </developer>\n+    </developers>\n+\n+    <dependencies>\n+      <dependency>\n+        <groupId>com.azure.resourcemanager</groupId>\n+        <artifactId>azure-resourcemanager-resources</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-storage-file-share</artifactId>\n+        <version>12.5.0</version>", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MDk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449370974", "bodyText": "No, we'll separate all dependency into package pom later. So I don't add it to parent pom anymore", "author": "ChenTanyi", "createdAt": "2020-07-03T04:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2OTUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTEyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449371129", "bodyText": "Although, it is not the final shape for the pom.xml", "author": "ChenTanyi", "createdAt": "2020-07-03T04:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2OTUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2OTYzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449369633", "bodyText": "Same as above azure-storage-file-share", "author": "xseeseesee", "createdAt": "2020-07-03T04:28:53Z", "path": "sdk/appplatform/mgmt/pom.xml", "diffHunk": "@@ -0,0 +1,139 @@\n+<!--\n+ Copyright (c) Microsoft Corporation. All rights reserved.\n+ Licensed under the MIT License. See License.txt in the project root for\n+ license information.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+      <groupId>com.azure.resourcemanager</groupId>\n+      <artifactId>azure-resourcemanager-parent</artifactId>\n+      <version>2.0.0-SNAPSHOT</version>\n+      <relativePath>../../management/pom.xml</relativePath>\n+    </parent>\n+\n+    <artifactId>azure-resourcemanager-appplatform</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Microsoft Azure SDK for App Platform Management</name>\n+    <description>This package contains Microsoft Azure App Platform Management SDK.</description>\n+    <url>https://github.com/Azure/azure-sdk-for-java</url>\n+\n+    <licenses>\n+      <license>\n+        <name>The MIT License (MIT)</name>\n+        <url>http://opensource.org/licenses/MIT</url>\n+        <distribution>repo</distribution>\n+      </license>\n+    </licenses>\n+\n+    <scm>\n+      <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>\n+      <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>\n+      <tag>HEAD</tag>\n+    </scm>\n+\n+    <properties>\n+      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+      <legal><![CDATA[[INFO] Any downloads listed may be third party software.  Microsoft grants you no rights for third party software.]]></legal>\n+    </properties>\n+\n+    <developers>\n+      <developer>\n+        <id>microsoft</id>\n+        <name>Microsoft</name>\n+      </developer>\n+    </developers>\n+\n+    <dependencies>\n+      <dependency>\n+        <groupId>com.azure.resourcemanager</groupId>\n+        <artifactId>azure-resourcemanager-resources</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>com.azure</groupId>\n+        <artifactId>azure-storage-file-share</artifactId>\n+        <version>12.5.0</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.commons</groupId>\n+        <artifactId>commons-compress</artifactId>\n+        <version>1.20</version>", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTM2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449371368", "bodyText": "deployments would be a better name? Current you will have deploy().deleteByNameAsync which seems not clear.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T04:37:21Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppImpl.java", "diffHunk": "@@ -0,0 +1,282 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.AppResourceInner;\n+import com.azure.resourcemanager.appplatform.models.AppResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.ManagedIdentityProperties;\n+import com.azure.resourcemanager.appplatform.models.PersistentDisk;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployments;\n+import com.azure.resourcemanager.appplatform.models.SpringService;\n+import com.azure.resourcemanager.appplatform.models.TemporaryDisk;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Creatable;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.time.OffsetDateTime;\n+\n+public class SpringAppImpl\n+    extends ExternalChildResourceImpl<SpringApp, AppResourceInner, SpringServiceImpl, SpringService>\n+    implements SpringApp, SpringApp.Definition, SpringApp.Update {\n+    private Creatable<SpringAppDeployment> springAppDeploymentToCreate = null;\n+\n+    SpringAppImpl(String name, SpringServiceImpl parent, AppResourceInner innerObject) {\n+        super(name, parent, innerObject);\n+    }\n+\n+    @Override\n+    public boolean isPublic() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().publicProperty();\n+    }\n+\n+    @Override\n+    public boolean isHttpsOnly() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().httpsOnly();\n+    }\n+\n+    @Override\n+    public String url() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().url();\n+    }\n+\n+    @Override\n+    public TemporaryDisk temporaryDisk() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().temporaryDisk();\n+    }\n+\n+    @Override\n+    public PersistentDisk persistentDisk() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().persistentDisk();\n+    }\n+\n+    @Override\n+    public ManagedIdentityProperties identity() {\n+        return inner().identity();\n+    }\n+\n+    @Override\n+    public OffsetDateTime createdTime() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().createdTime();\n+    }\n+\n+    @Override\n+    public String activeDeployment() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().activeDeploymentName();\n+    }\n+\n+    @Override\n+    public SpringAppDeployments deploy() {", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTkzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449371936", "bodyText": "withActiveDeploymentSetting or withSettingFromActiveDeployment seems better?", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T04:40:11Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppDeploymentImpl.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.DeploymentResourceInner;\n+import com.azure.resourcemanager.appplatform.fluent.inner.LogFileUrlResponseInner;\n+import com.azure.resourcemanager.appplatform.models.DeploymentInstance;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceStatus;\n+import com.azure.resourcemanager.appplatform.models.DeploymentSettings;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.UserSourceInfo;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClientBuilder;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class SpringAppDeploymentImpl\n+    extends ExternalChildResourceImpl<SpringAppDeployment, DeploymentResourceInner, SpringAppImpl, SpringApp>\n+    implements SpringAppDeployment, SpringAppDeployment.Definition, SpringAppDeployment.Update {\n+    private static final int BLOCK_SIZE = 4 * 1024 * 1024; // 4MB\n+    private final SpringAppDeploymentsImpl client;\n+    private SpringAppDeployment originalDeployment;\n+\n+    SpringAppDeploymentImpl(String name, SpringAppImpl parent,\n+                            DeploymentResourceInner innerObject, SpringAppDeploymentsImpl client) {\n+        super(name, parent, innerObject);\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public String appName() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().appName();\n+    }\n+\n+    @Override\n+    public DeploymentSettings settings() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().deploymentSettings();\n+    }\n+\n+    @Override\n+    public DeploymentResourceStatus status() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().status();\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().active();\n+    }\n+\n+    @Override\n+    public OffsetDateTime createdTime() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().createdTime();\n+    }\n+\n+    @Override\n+    public List<DeploymentInstance> instances() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().instances();\n+    }\n+\n+    @Override\n+    public String getLogFileUrl() {\n+        return getLogFileUrlAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<String> getLogFileUrlAsync() {\n+        return manager().inner().getDeployments().getLogFileUrlAsync(\n+            parent().parent().resourceGroupName(), parent().parent().name(), parent().name(), name()\n+        )\n+            .map(LogFileUrlResponseInner::url);\n+    }\n+\n+    private void ensureDeploySettings() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().deploymentSettings() == null) {\n+            inner().properties().withDeploymentSettings(new DeploymentSettings());\n+        }\n+    }\n+\n+    private void ensureSource() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().source() == null) {\n+            inner().properties().withSource(new UserSourceInfo());\n+        }\n+    }\n+\n+    private File compressSource(File sourceFolder) throws IOException {\n+        File compressFile = File.createTempFile(\"java_package\", \"tar.gz\");\n+        try (TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                 new GZIPOutputStream(new FileOutputStream(compressFile)))) {\n+            tarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\n+            for (Path sourceFile : Files.walk(sourceFolder.toPath()).collect(Collectors.toList())) {\n+                String relativePath = sourceFolder.toPath().relativize(sourceFile).toString();\n+                TarArchiveEntry entry = new TarArchiveEntry(sourceFile.toFile(), relativePath);\n+                if (sourceFile.toFile().isFile()) {\n+                    try (InputStream inputStream = new FileInputStream(sourceFile.toFile())) {\n+                        tarArchiveOutputStream.putArchiveEntry(entry);\n+                        IOUtils.copy(inputStream, tarArchiveOutputStream);\n+                        tarArchiveOutputStream.closeArchiveEntry();\n+                    }\n+                } else {\n+                    tarArchiveOutputStream.putArchiveEntry(entry);\n+                    tarArchiveOutputStream.closeArchiveEntry();\n+                }\n+            }\n+        }\n+        return compressFile;\n+    }\n+\n+    private Mono<ShareFileAsyncClient> createShareFileAsyncClient(ResourceUploadDefinition option, long maxSize) {\n+        ShareFileAsyncClient shareFileAsyncClient = new ShareFileClientBuilder()\n+            .endpoint(option.uploadUrl())\n+            .httpClient(manager().httpPipeline().getHttpClient())\n+            .buildFileAsyncClient();\n+\n+        return shareFileAsyncClient.create(maxSize)\n+            .then(Mono.just(shareFileAsyncClient));\n+    }\n+\n+    private Mono<ShareFileAsyncClient> uploadToStorage(byte[] bytes, ResourceUploadDefinition option) {\n+        inner().properties().source().withRelativePath(option.relativePath());\n+        return createShareFileAsyncClient(option, bytes.length)\n+                .flatMap(shareFileAsyncClient -> {\n+                    List<Integer> blockList = new ArrayList<>();\n+                    for (int start = 0; start < bytes.length; start += BLOCK_SIZE) {\n+                        blockList.add(start);\n+                    }\n+                    return Flux.fromIterable(blockList)\n+                        .flatMap(start -> {\n+                            int length = Math.min(bytes.length - start, BLOCK_SIZE);\n+                            return shareFileAsyncClient.uploadWithResponse(\n+                                Flux.just(ByteBuffer.wrap(bytes, start, length)), length, (long) start);\n+                        })\n+                        .then(Mono.just(shareFileAsyncClient));\n+                });\n+    }\n+\n+    private Mono<ShareFileAsyncClient> uploadToStorage(File source, ResourceUploadDefinition option) {\n+        inner().properties().source().withRelativePath(option.relativePath());\n+        try {\n+            return createShareFileAsyncClient(option, source.length())\n+                .flatMap(shareFileAsyncClient -> shareFileAsyncClient.uploadFromFile(source.getAbsolutePath())\n+                    .then(Mono.just(shareFileAsyncClient)));\n+        } catch (Exception e) {\n+            return Mono.error(e);\n+        }\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withJarPath(File jar) {\n+        ensureSource();\n+        inner().properties().source().withType(UserSourceType.JAR);\n+        this.addDependency(\n+            context -> parent().getResourceUploadUrlAsync()\n+                .flatMap(option -> uploadToStorage(jar, option)\n+                    .then(context.voidMono()))\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withJarFile(byte[] jar) {\n+        ensureSource();\n+        inner().properties().source().withType(UserSourceType.JAR);\n+        this.addDependency(\n+            context -> parent().getResourceUploadUrlAsync()\n+                .flatMap(option -> uploadToStorage(jar, option)\n+                    .then(context.voidMono()))\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withSourceCodeFolder(File sourceCode) {\n+        ensureSource();\n+        inner().properties().source().withType(UserSourceType.SOURCE);\n+        this.addDependency(\n+            context -> parent().getResourceUploadUrlAsync()\n+                .flatMap(option -> {\n+                    try {\n+                        return uploadToStorage(compressSource(sourceCode), option);\n+                    } catch (Exception e) {\n+                        return Mono.error(e);\n+                    }\n+                })\n+                .then(context.voidMono())\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withExistingSource(UserSourceType type, String relativePath) {\n+        ensureSource();\n+        inner().properties().source().withType(type);\n+        inner().properties().source().withRelativePath(relativePath);\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withSourceCodeTarGzFile(File sourceCodeTarGz) {\n+        ensureSource();\n+        inner().properties().source().withType(UserSourceType.SOURCE);\n+        this.addDependency(\n+            context -> parent().getResourceUploadUrlAsync()\n+                .flatMap(option -> uploadToStorage(sourceCodeTarGz, option)\n+                    .then(context.voidMono()))\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withTargetModule(String moduleName) {\n+        ensureSource();\n+        inner().properties().source().withArtifactSelector(moduleName);\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withSingleModule() {\n+        ensureSource();\n+        inner().properties().source().withArtifactSelector(null);\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withCurrentActiveSetting() {", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0fe73abff3df81ba6b3ba9ce8536ff17775b4f58", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0fe73abff3df81ba6b3ba9ce8536ff17775b4f58", "message": "rename app.deploy to app.deployments", "committedDate": "2020-07-03T04:41:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MjM1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449372355", "bodyText": "Should (or not?) we provide byte[] as input?", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T04:42:06Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppDeploymentImpl.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.DeploymentResourceInner;\n+import com.azure.resourcemanager.appplatform.fluent.inner.LogFileUrlResponseInner;\n+import com.azure.resourcemanager.appplatform.models.DeploymentInstance;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceStatus;\n+import com.azure.resourcemanager.appplatform.models.DeploymentSettings;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.UserSourceInfo;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClientBuilder;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class SpringAppDeploymentImpl\n+    extends ExternalChildResourceImpl<SpringAppDeployment, DeploymentResourceInner, SpringAppImpl, SpringApp>\n+    implements SpringAppDeployment, SpringAppDeployment.Definition, SpringAppDeployment.Update {\n+    private static final int BLOCK_SIZE = 4 * 1024 * 1024; // 4MB\n+    private final SpringAppDeploymentsImpl client;\n+    private SpringAppDeployment originalDeployment;\n+\n+    SpringAppDeploymentImpl(String name, SpringAppImpl parent,\n+                            DeploymentResourceInner innerObject, SpringAppDeploymentsImpl client) {\n+        super(name, parent, innerObject);\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public String appName() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().appName();\n+    }\n+\n+    @Override\n+    public DeploymentSettings settings() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().deploymentSettings();\n+    }\n+\n+    @Override\n+    public DeploymentResourceStatus status() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().status();\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().active();\n+    }\n+\n+    @Override\n+    public OffsetDateTime createdTime() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().createdTime();\n+    }\n+\n+    @Override\n+    public List<DeploymentInstance> instances() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().instances();\n+    }\n+\n+    @Override\n+    public String getLogFileUrl() {\n+        return getLogFileUrlAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<String> getLogFileUrlAsync() {\n+        return manager().inner().getDeployments().getLogFileUrlAsync(\n+            parent().parent().resourceGroupName(), parent().parent().name(), parent().name(), name()\n+        )\n+            .map(LogFileUrlResponseInner::url);\n+    }\n+\n+    private void ensureDeploySettings() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().deploymentSettings() == null) {\n+            inner().properties().withDeploymentSettings(new DeploymentSettings());\n+        }\n+    }\n+\n+    private void ensureSource() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().source() == null) {\n+            inner().properties().withSource(new UserSourceInfo());\n+        }\n+    }\n+\n+    private File compressSource(File sourceFolder) throws IOException {\n+        File compressFile = File.createTempFile(\"java_package\", \"tar.gz\");\n+        try (TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                 new GZIPOutputStream(new FileOutputStream(compressFile)))) {\n+            tarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\n+            for (Path sourceFile : Files.walk(sourceFolder.toPath()).collect(Collectors.toList())) {\n+                String relativePath = sourceFolder.toPath().relativize(sourceFile).toString();\n+                TarArchiveEntry entry = new TarArchiveEntry(sourceFile.toFile(), relativePath);\n+                if (sourceFile.toFile().isFile()) {\n+                    try (InputStream inputStream = new FileInputStream(sourceFile.toFile())) {\n+                        tarArchiveOutputStream.putArchiveEntry(entry);\n+                        IOUtils.copy(inputStream, tarArchiveOutputStream);\n+                        tarArchiveOutputStream.closeArchiveEntry();\n+                    }\n+                } else {\n+                    tarArchiveOutputStream.putArchiveEntry(entry);\n+                    tarArchiveOutputStream.closeArchiveEntry();\n+                }\n+            }\n+        }\n+        return compressFile;\n+    }\n+\n+    private Mono<ShareFileAsyncClient> createShareFileAsyncClient(ResourceUploadDefinition option, long maxSize) {\n+        ShareFileAsyncClient shareFileAsyncClient = new ShareFileClientBuilder()\n+            .endpoint(option.uploadUrl())\n+            .httpClient(manager().httpPipeline().getHttpClient())\n+            .buildFileAsyncClient();\n+\n+        return shareFileAsyncClient.create(maxSize)\n+            .then(Mono.just(shareFileAsyncClient));\n+    }\n+\n+    private Mono<ShareFileAsyncClient> uploadToStorage(byte[] bytes, ResourceUploadDefinition option) {\n+        inner().properties().source().withRelativePath(option.relativePath());\n+        return createShareFileAsyncClient(option, bytes.length)\n+                .flatMap(shareFileAsyncClient -> {\n+                    List<Integer> blockList = new ArrayList<>();\n+                    for (int start = 0; start < bytes.length; start += BLOCK_SIZE) {\n+                        blockList.add(start);\n+                    }\n+                    return Flux.fromIterable(blockList)\n+                        .flatMap(start -> {\n+                            int length = Math.min(bytes.length - start, BLOCK_SIZE);\n+                            return shareFileAsyncClient.uploadWithResponse(\n+                                Flux.just(ByteBuffer.wrap(bytes, start, length)), length, (long) start);\n+                        })\n+                        .then(Mono.just(shareFileAsyncClient));\n+                });\n+    }\n+\n+    private Mono<ShareFileAsyncClient> uploadToStorage(File source, ResourceUploadDefinition option) {\n+        inner().properties().source().withRelativePath(option.relativePath());\n+        try {\n+            return createShareFileAsyncClient(option, source.length())\n+                .flatMap(shareFileAsyncClient -> shareFileAsyncClient.uploadFromFile(source.getAbsolutePath())\n+                    .then(Mono.just(shareFileAsyncClient)));\n+        } catch (Exception e) {\n+            return Mono.error(e);\n+        }\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withJarPath(File jar) {\n+        ensureSource();\n+        inner().properties().source().withType(UserSourceType.JAR);\n+        this.addDependency(\n+            context -> parent().getResourceUploadUrlAsync()\n+                .flatMap(option -> uploadToStorage(jar, option)\n+                    .then(context.voidMono()))\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withJarFile(byte[] jar) {", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3Mjg1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449372854", "bodyText": "Just remove this function? only provider file as input?", "author": "ChenTanyi", "createdAt": "2020-07-03T04:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MzAwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449373000", "bodyText": "I found these functions name should be changed.", "author": "ChenTanyi", "createdAt": "2020-07-03T04:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3ODE4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449378181", "bodyText": "I found these functions name should be changed.\n\nReason?", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T05:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4MzEwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449383106", "bodyText": "I firstly use Path and byte[] for the jarPath and jarFile, but later I change parameter to File, which I think the function should also be changed.", "author": "ChenTanyi", "createdAt": "2020-07-03T05:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MjM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NjIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449386223", "bodyText": "removed the byte[] function", "author": "ChenTanyi", "createdAt": "2020-07-03T05:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MjM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NDI2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449374266", "bodyText": "Be clear on param, maybe better as sourceCodeFolder.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T04:51:04Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppDeploymentImpl.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.DeploymentResourceInner;\n+import com.azure.resourcemanager.appplatform.fluent.inner.LogFileUrlResponseInner;\n+import com.azure.resourcemanager.appplatform.models.DeploymentInstance;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceStatus;\n+import com.azure.resourcemanager.appplatform.models.DeploymentSettings;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.UserSourceInfo;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClientBuilder;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class SpringAppDeploymentImpl\n+    extends ExternalChildResourceImpl<SpringAppDeployment, DeploymentResourceInner, SpringAppImpl, SpringApp>\n+    implements SpringAppDeployment, SpringAppDeployment.Definition, SpringAppDeployment.Update {\n+    private static final int BLOCK_SIZE = 4 * 1024 * 1024; // 4MB\n+    private final SpringAppDeploymentsImpl client;\n+    private SpringAppDeployment originalDeployment;\n+\n+    SpringAppDeploymentImpl(String name, SpringAppImpl parent,\n+                            DeploymentResourceInner innerObject, SpringAppDeploymentsImpl client) {\n+        super(name, parent, innerObject);\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public String appName() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().appName();\n+    }\n+\n+    @Override\n+    public DeploymentSettings settings() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().deploymentSettings();\n+    }\n+\n+    @Override\n+    public DeploymentResourceStatus status() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().status();\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().active();\n+    }\n+\n+    @Override\n+    public OffsetDateTime createdTime() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().createdTime();\n+    }\n+\n+    @Override\n+    public List<DeploymentInstance> instances() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().instances();\n+    }\n+\n+    @Override\n+    public String getLogFileUrl() {\n+        return getLogFileUrlAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<String> getLogFileUrlAsync() {\n+        return manager().inner().getDeployments().getLogFileUrlAsync(\n+            parent().parent().resourceGroupName(), parent().parent().name(), parent().name(), name()\n+        )\n+            .map(LogFileUrlResponseInner::url);\n+    }\n+\n+    private void ensureDeploySettings() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().deploymentSettings() == null) {\n+            inner().properties().withDeploymentSettings(new DeploymentSettings());\n+        }\n+    }\n+\n+    private void ensureSource() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().source() == null) {\n+            inner().properties().withSource(new UserSourceInfo());\n+        }\n+    }\n+\n+    private File compressSource(File sourceFolder) throws IOException {\n+        File compressFile = File.createTempFile(\"java_package\", \"tar.gz\");\n+        try (TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(\n+                 new GZIPOutputStream(new FileOutputStream(compressFile)))) {\n+            tarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\n+            for (Path sourceFile : Files.walk(sourceFolder.toPath()).collect(Collectors.toList())) {\n+                String relativePath = sourceFolder.toPath().relativize(sourceFile).toString();\n+                TarArchiveEntry entry = new TarArchiveEntry(sourceFile.toFile(), relativePath);\n+                if (sourceFile.toFile().isFile()) {\n+                    try (InputStream inputStream = new FileInputStream(sourceFile.toFile())) {\n+                        tarArchiveOutputStream.putArchiveEntry(entry);\n+                        IOUtils.copy(inputStream, tarArchiveOutputStream);\n+                        tarArchiveOutputStream.closeArchiveEntry();\n+                    }\n+                } else {\n+                    tarArchiveOutputStream.putArchiveEntry(entry);\n+                    tarArchiveOutputStream.closeArchiveEntry();\n+                }\n+            }\n+        }\n+        return compressFile;\n+    }\n+\n+    private Mono<ShareFileAsyncClient> createShareFileAsyncClient(ResourceUploadDefinition option, long maxSize) {\n+        ShareFileAsyncClient shareFileAsyncClient = new ShareFileClientBuilder()\n+            .endpoint(option.uploadUrl())\n+            .httpClient(manager().httpPipeline().getHttpClient())\n+            .buildFileAsyncClient();\n+\n+        return shareFileAsyncClient.create(maxSize)\n+            .then(Mono.just(shareFileAsyncClient));\n+    }\n+\n+    private Mono<ShareFileAsyncClient> uploadToStorage(byte[] bytes, ResourceUploadDefinition option) {\n+        inner().properties().source().withRelativePath(option.relativePath());\n+        return createShareFileAsyncClient(option, bytes.length)\n+                .flatMap(shareFileAsyncClient -> {\n+                    List<Integer> blockList = new ArrayList<>();\n+                    for (int start = 0; start < bytes.length; start += BLOCK_SIZE) {\n+                        blockList.add(start);\n+                    }\n+                    return Flux.fromIterable(blockList)\n+                        .flatMap(start -> {\n+                            int length = Math.min(bytes.length - start, BLOCK_SIZE);\n+                            return shareFileAsyncClient.uploadWithResponse(\n+                                Flux.just(ByteBuffer.wrap(bytes, start, length)), length, (long) start);\n+                        })\n+                        .then(Mono.just(shareFileAsyncClient));\n+                });\n+    }\n+\n+    private Mono<ShareFileAsyncClient> uploadToStorage(File source, ResourceUploadDefinition option) {\n+        inner().properties().source().withRelativePath(option.relativePath());\n+        try {\n+            return createShareFileAsyncClient(option, source.length())\n+                .flatMap(shareFileAsyncClient -> shareFileAsyncClient.uploadFromFile(source.getAbsolutePath())\n+                    .then(Mono.just(shareFileAsyncClient)));\n+        } catch (Exception e) {\n+            return Mono.error(e);\n+        }\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withJarPath(File jar) {\n+        ensureSource();\n+        inner().properties().source().withType(UserSourceType.JAR);\n+        this.addDependency(\n+            context -> parent().getResourceUploadUrlAsync()\n+                .flatMap(option -> uploadToStorage(jar, option)\n+                    .then(context.voidMono()))\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withJarFile(byte[] jar) {\n+        ensureSource();\n+        inner().properties().source().withType(UserSourceType.JAR);\n+        this.addDependency(\n+            context -> parent().getResourceUploadUrlAsync()\n+                .flatMap(option -> uploadToStorage(jar, option)\n+                    .then(context.voidMono()))\n+        );\n+        return this;\n+    }\n+\n+    @Override\n+    public SpringAppDeploymentImpl withSourceCodeFolder(File sourceCode) {", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NjMxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449376319", "bodyText": "Check whether to use File.deleteOnExit ?", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T05:01:09Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppDeploymentImpl.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.DeploymentResourceInner;\n+import com.azure.resourcemanager.appplatform.fluent.inner.LogFileUrlResponseInner;\n+import com.azure.resourcemanager.appplatform.models.DeploymentInstance;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceStatus;\n+import com.azure.resourcemanager.appplatform.models.DeploymentSettings;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.UserSourceInfo;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClientBuilder;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class SpringAppDeploymentImpl\n+    extends ExternalChildResourceImpl<SpringAppDeployment, DeploymentResourceInner, SpringAppImpl, SpringApp>\n+    implements SpringAppDeployment, SpringAppDeployment.Definition, SpringAppDeployment.Update {\n+    private static final int BLOCK_SIZE = 4 * 1024 * 1024; // 4MB\n+    private final SpringAppDeploymentsImpl client;\n+    private SpringAppDeployment originalDeployment;\n+\n+    SpringAppDeploymentImpl(String name, SpringAppImpl parent,\n+                            DeploymentResourceInner innerObject, SpringAppDeploymentsImpl client) {\n+        super(name, parent, innerObject);\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public String appName() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().appName();\n+    }\n+\n+    @Override\n+    public DeploymentSettings settings() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().deploymentSettings();\n+    }\n+\n+    @Override\n+    public DeploymentResourceStatus status() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().status();\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        if (inner().properties() == null) {\n+            return false;\n+        }\n+        return inner().properties().active();\n+    }\n+\n+    @Override\n+    public OffsetDateTime createdTime() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().createdTime();\n+    }\n+\n+    @Override\n+    public List<DeploymentInstance> instances() {\n+        if (inner().properties() == null) {\n+            return null;\n+        }\n+        return inner().properties().instances();\n+    }\n+\n+    @Override\n+    public String getLogFileUrl() {\n+        return getLogFileUrlAsync().block();\n+    }\n+\n+    @Override\n+    public Mono<String> getLogFileUrlAsync() {\n+        return manager().inner().getDeployments().getLogFileUrlAsync(\n+            parent().parent().resourceGroupName(), parent().parent().name(), parent().name(), name()\n+        )\n+            .map(LogFileUrlResponseInner::url);\n+    }\n+\n+    private void ensureDeploySettings() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().deploymentSettings() == null) {\n+            inner().properties().withDeploymentSettings(new DeploymentSettings());\n+        }\n+    }\n+\n+    private void ensureSource() {\n+        if (inner().properties() == null) {\n+            inner().withProperties(new DeploymentResourceProperties());\n+        }\n+        if (inner().properties().source() == null) {\n+            inner().properties().withSource(new UserSourceInfo());\n+        }\n+    }\n+\n+    private File compressSource(File sourceFolder) throws IOException {\n+        File compressFile = File.createTempFile(\"java_package\", \"tar.gz\");", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3Njk1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449376953", "bodyText": "If you only need the setting, it might be better to only cache the setting.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T05:04:20Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/implementation/SpringAppDeploymentImpl.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.implementation;\n+\n+import com.azure.resourcemanager.appplatform.AppPlatformManager;\n+import com.azure.resourcemanager.appplatform.fluent.inner.DeploymentResourceInner;\n+import com.azure.resourcemanager.appplatform.fluent.inner.LogFileUrlResponseInner;\n+import com.azure.resourcemanager.appplatform.models.DeploymentInstance;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceProperties;\n+import com.azure.resourcemanager.appplatform.models.DeploymentResourceStatus;\n+import com.azure.resourcemanager.appplatform.models.DeploymentSettings;\n+import com.azure.resourcemanager.appplatform.models.ResourceUploadDefinition;\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.UserSourceInfo;\n+import com.azure.resourcemanager.appplatform.models.UserSourceType;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl;\n+import com.azure.resourcemanager.resources.fluentcore.model.Indexable;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClientBuilder;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class SpringAppDeploymentImpl\n+    extends ExternalChildResourceImpl<SpringAppDeployment, DeploymentResourceInner, SpringAppImpl, SpringApp>\n+    implements SpringAppDeployment, SpringAppDeployment.Definition, SpringAppDeployment.Update {\n+    private static final int BLOCK_SIZE = 4 * 1024 * 1024; // 4MB\n+    private final SpringAppDeploymentsImpl client;\n+    private SpringAppDeployment originalDeployment;", "originalCommit": "d02ec9c9966ebbb06d92c46925a3a15011948baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fdbf0e189f469ff3e2844dedbfc9d32bb737d060", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fdbf0e189f469ff3e2844dedbfc9d32bb737d060", "message": "seperate client creation and file creation", "committedDate": "2020-07-03T05:23:47Z", "type": "commit"}, {"oid": "a9dfa9c29c337ad1582ef5f6e946404f703afeba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a9dfa9c29c337ad1582ef5f6e946404f703afeba", "message": "rename withCurrentActiveSetting to withSettingsFromActiveDeployment", "committedDate": "2020-07-03T05:24:13Z", "type": "commit"}, {"oid": "5240c6ec975073a28f3a2854241ea418eb1c500f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5240c6ec975073a28f3a2854241ea418eb1c500f", "message": "rename sourceCode param to sourceCodeFolder", "committedDate": "2020-07-03T05:25:14Z", "type": "commit"}, {"oid": "8c2dcbbda5b88b3f4778146513d51c60e6d616da", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c2dcbbda5b88b3f4778146513d51c60e6d616da", "message": "remove deployment with byte[]", "committedDate": "2020-07-03T05:35:08Z", "type": "commit"}, {"oid": "748c0c840f6cf0b5f306622b5cb198ab8dba1507", "url": "https://github.com/Azure/azure-sdk-for-java/commit/748c0c840f6cf0b5f306622b5cb198ab8dba1507", "message": "align deployment update interface with definition", "committedDate": "2020-07-03T05:39:37Z", "type": "commit"}, {"oid": "6902850967ea69e09cb3ee5880973a8db448975d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6902850967ea69e09cb3ee5880973a8db448975d", "message": "change deployment cache to settings cache", "committedDate": "2020-07-03T05:41:24Z", "type": "commit"}, {"oid": "3792a8d61af2ab635793902da9d365122b7bd5c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3792a8d61af2ab635793902da9d365122b7bd5c6", "message": "delete tmp file when exit", "committedDate": "2020-07-03T05:42:12Z", "type": "commit"}, {"oid": "5cc04b316e9e7de58c96e052a1ecd41558ea12d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5cc04b316e9e7de58c96e052a1ecd41558ea12d3", "message": "fix compile error", "committedDate": "2020-07-03T05:44:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MDAzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449390033", "bodyText": "Ideally this seems should be in another interface (seems not related to PublicEndpoint). Or maybe rename the interface name to something more generic?\nSimilar for update.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T05:58:34Z", "path": "sdk/appplatform/mgmt/src/main/java/com/azure/resourcemanager/appplatform/models/SpringApp.java", "diffHunk": "@@ -0,0 +1,261 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.implementation.annotation.Beta;\n+import com.azure.resourcemanager.appplatform.fluent.inner.AppResourceInner;\n+import com.azure.resourcemanager.resources.fluentcore.arm.models.ExternalChildResource;\n+import com.azure.resourcemanager.resources.fluentcore.model.Appliable;\n+import com.azure.resourcemanager.resources.fluentcore.model.Creatable;\n+import com.azure.resourcemanager.resources.fluentcore.model.HasInner;\n+import com.azure.resourcemanager.resources.fluentcore.model.Updatable;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.time.OffsetDateTime;\n+\n+/** An immutable client-side representation of an Azure Spring App. */\n+@Fluent\n+@Beta\n+public interface SpringApp\n+    extends ExternalChildResource<SpringApp, SpringService>,\n+        HasInner<AppResourceInner>,\n+        Updatable<SpringApp.Update> {\n+    /** @return whether the app exposes public endpoint */\n+    boolean isPublic();\n+\n+    /** @return whether only https is allowed for the app */\n+    boolean isHttpsOnly();\n+\n+    /** @return the url of the app */\n+    String url();\n+\n+    /** @return the temporary disk of the app */\n+    TemporaryDisk temporaryDisk();\n+\n+    /** @return the persistent disk of the app */\n+    PersistentDisk persistentDisk();\n+\n+    /** @return the identity property of the app */\n+    ManagedIdentityProperties identity();\n+\n+    /** @return the creation time of the app */\n+    OffsetDateTime createdTime();\n+\n+    /** @return the active deployment name */\n+    String activeDeployment();\n+\n+    /** @return the entry point of the spring app deployment */\n+    SpringAppDeployments deployments();\n+\n+    /** @return the blob url to upload deployment */\n+    Mono<ResourceUploadDefinition> getResourceUploadUrlAsync();\n+\n+    /** @return the blob url to upload deployment */\n+    ResourceUploadDefinition getResourceUploadUrl();\n+\n+    /** Container interface for all the definitions that need to be implemented. */\n+    interface Definition\n+        extends DefinitionStages.Blank { }\n+\n+    /** Grouping of all the spring app definition stages. */\n+    interface DefinitionStages {\n+        /** The first stage of the spring app definition. */\n+        interface Blank extends WithCreate { }\n+\n+        /** The stage of a spring app definition allowing to specify the public endpoint. */\n+        interface WithPublicEndpoint {\n+            /**\n+             * Enables the public endpoint for the spring app.\n+             * @return the next stage of spring app definition\n+             */\n+            WithCreate withPublicEndpoint();\n+\n+            /**\n+             * Specifies the custom domain for the spring app.\n+             * @param domain the domain name\n+             * @return the next stage of spring app definition\n+             */\n+            WithCreate withCustomDomain(String domain);\n+\n+            /**\n+             * Enables https only for the spring app.\n+             * @return the next stage of spring app definition\n+             */\n+            WithCreate withHttpsOnly();", "originalCommit": "5cc04b316e9e7de58c96e052a1ecd41558ea12d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5OTUxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449399518", "bodyText": "Is it OK named to WithEndpoint?", "author": "ChenTanyi", "createdAt": "2020-07-03T06:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MDAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MjM4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449392380", "bodyText": "I think you need to close connection.getInputStream()\nMaybe close FileOutputStream as well.", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T06:07:21Z", "path": "sdk/appplatform/mgmt/src/test/java/com/azure/resourcemanager/appplatform/SpringCloudTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform;\n+\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.SpringService;\n+import com.azure.resourcemanager.resources.fluentcore.arm.Region;\n+import com.azure.resourcemanager.resources.fluentcore.utils.SdkContext;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.net.URLConnection;\n+\n+public class SpringCloudTest extends AppPlatformTest {\n+\n+    SpringCloudTest() {\n+        super(RunCondition.LIVE_ONLY); // need storage data-plane and url check\n+    }\n+\n+    @Test\n+    public void canCRUDSpringAppWithDeployment() throws IOException {\n+        String serviceName = generateRandomResourceName(\"springsvc\", 15);\n+        String appName = \"gateway\";\n+        String deploymentName = generateRandomResourceName(\"deploy\", 15);\n+        String deploymentName1 = generateRandomResourceName(\"deploy\", 15);\n+\n+        SpringService service = appPlatformManager.springServices().define(serviceName)\n+            .withRegion(Region.US_EAST)\n+            .withNewResourceGroup(rgName)\n+            .withSku(\"B0\")\n+            .create();\n+\n+        Assertions.assertEquals(\"B0\", service.sku().name());\n+\n+        service.update()\n+            .withSku(\"S0\")\n+            .apply();\n+\n+        Assertions.assertEquals(\"S0\", service.sku().name());\n+\n+        service.update()\n+            .withGitUri(\"https://github.com/Azure-Samples/piggymetrics-config\")\n+            .apply();\n+        Assertions.assertEquals(\"https://github.com/Azure-Samples/piggymetrics-config\", service.serverProperties().configServer().gitProperty().uri());\n+\n+        File jarFile = new File(\"gateway.jar\");\n+        if (!jarFile.exists()) {\n+            URLConnection connection = new URL(\"https://github.com/weidongxu-microsoft/azure-sdk-for-java-management-tests/raw/master/spring-cloud/gateway.jar\").openConnection();\n+            connection.connect();\n+            IOUtils.copy(connection.getInputStream(), new FileOutputStream(jarFile));", "originalCommit": "5cc04b316e9e7de58c96e052a1ecd41558ea12d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5MzQxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449393410", "bodyText": "Need to close it somewhere.\nhttps://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html#disconnect()", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T06:11:06Z", "path": "sdk/appplatform/mgmt/src/test/java/com/azure/resourcemanager/appplatform/SpringCloudTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform;\n+\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.SpringService;\n+import com.azure.resourcemanager.resources.fluentcore.arm.Region;\n+import com.azure.resourcemanager.resources.fluentcore.utils.SdkContext;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.net.URLConnection;\n+\n+public class SpringCloudTest extends AppPlatformTest {\n+\n+    SpringCloudTest() {\n+        super(RunCondition.LIVE_ONLY); // need storage data-plane and url check\n+    }\n+\n+    @Test\n+    public void canCRUDSpringAppWithDeployment() throws IOException {\n+        String serviceName = generateRandomResourceName(\"springsvc\", 15);\n+        String appName = \"gateway\";\n+        String deploymentName = generateRandomResourceName(\"deploy\", 15);\n+        String deploymentName1 = generateRandomResourceName(\"deploy\", 15);\n+\n+        SpringService service = appPlatformManager.springServices().define(serviceName)\n+            .withRegion(Region.US_EAST)\n+            .withNewResourceGroup(rgName)\n+            .withSku(\"B0\")\n+            .create();\n+\n+        Assertions.assertEquals(\"B0\", service.sku().name());\n+\n+        service.update()\n+            .withSku(\"S0\")\n+            .apply();\n+\n+        Assertions.assertEquals(\"S0\", service.sku().name());\n+\n+        service.update()\n+            .withGitUri(\"https://github.com/Azure-Samples/piggymetrics-config\")\n+            .apply();\n+        Assertions.assertEquals(\"https://github.com/Azure-Samples/piggymetrics-config\", service.serverProperties().configServer().gitProperty().uri());\n+\n+        File jarFile = new File(\"gateway.jar\");\n+        if (!jarFile.exists()) {\n+            URLConnection connection = new URL(\"https://github.com/weidongxu-microsoft/azure-sdk-for-java-management-tests/raw/master/spring-cloud/gateway.jar\").openConnection();\n+            connection.connect();\n+            IOUtils.copy(connection.getInputStream(), new FileOutputStream(jarFile));\n+        }\n+\n+        SpringApp app = service.apps().define(appName)\n+            .withPublicEndpoint()\n+            .create();\n+\n+        Assertions.assertNotNull(app.url());\n+        Assertions.assertNotNull(app.activeDeployment());\n+\n+        Assertions.assertTrue(requestSuccess(app.url()));\n+\n+        app.update()\n+            .withoutDeployment(app.activeDeployment())\n+            .deployJar(deploymentName, jarFile)\n+            .apply();\n+\n+        Assertions.assertNotNull(app.url());\n+        Assertions.assertEquals(deploymentName, app.activeDeployment());\n+\n+        Assertions.assertTrue(requestSuccess(app.url()));\n+\n+        SpringAppDeployment deployment = app.deployments().getByName(app.activeDeployment());\n+        deployment.update()\n+            .withCpu(2)\n+            .withMemory(4)\n+            .withRuntime(RuntimeVersion.JAVA_11)\n+            .withInstance(2)\n+            .apply();\n+\n+        Assertions.assertEquals(2, deployment.settings().cpu());\n+        Assertions.assertEquals(4, deployment.settings().memoryInGB());\n+        Assertions.assertEquals(RuntimeVersion.JAVA_11, deployment.settings().runtimeVersion());\n+        Assertions.assertEquals(2, deployment.instances().size());\n+\n+        deployment = app.deployments().define(deploymentName1)\n+            .withSourceCodeFolder(new File(this.getClass().getResource(\"/piggymetrics\").getFile()))\n+            .withTargetModule(\"gateway\")\n+            .withSettingsFromActiveDeployment()\n+            .activate()\n+            .create();\n+        app.refresh();\n+\n+        Assertions.assertEquals(deploymentName1, app.activeDeployment());\n+        Assertions.assertEquals(2, deployment.settings().cpu());\n+        Assertions.assertNotNull(deployment.getLogFileUrl());\n+\n+        Assertions.assertTrue(requestSuccess(app.url()));\n+\n+        app.update()\n+            .withoutPublicEndpoint()\n+            .apply();\n+        Assertions.assertFalse(app.isPublic());\n+    }\n+\n+    private boolean requestSuccess(String url) throws IOException {\n+        for (int i = 0; i < 60; ++i) {\n+            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n+            connection.connect();", "originalCommit": "5cc04b316e9e7de58c96e052a1ecd41558ea12d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM5NDI0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12350#discussion_r449394246", "bodyText": "Is there a way to verify that this deployment is deleted?", "author": "weidongxu-microsoft", "createdAt": "2020-07-03T06:13:56Z", "path": "sdk/appplatform/mgmt/src/test/java/com/azure/resourcemanager/appplatform/SpringCloudTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.resourcemanager.appplatform;\n+\n+import com.azure.resourcemanager.appplatform.models.RuntimeVersion;\n+import com.azure.resourcemanager.appplatform.models.SpringApp;\n+import com.azure.resourcemanager.appplatform.models.SpringAppDeployment;\n+import com.azure.resourcemanager.appplatform.models.SpringService;\n+import com.azure.resourcemanager.resources.fluentcore.arm.Region;\n+import com.azure.resourcemanager.resources.fluentcore.utils.SdkContext;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.net.URLConnection;\n+\n+public class SpringCloudTest extends AppPlatformTest {\n+\n+    SpringCloudTest() {\n+        super(RunCondition.LIVE_ONLY); // need storage data-plane and url check\n+    }\n+\n+    @Test\n+    public void canCRUDSpringAppWithDeployment() throws IOException {\n+        String serviceName = generateRandomResourceName(\"springsvc\", 15);\n+        String appName = \"gateway\";\n+        String deploymentName = generateRandomResourceName(\"deploy\", 15);\n+        String deploymentName1 = generateRandomResourceName(\"deploy\", 15);\n+\n+        SpringService service = appPlatformManager.springServices().define(serviceName)\n+            .withRegion(Region.US_EAST)\n+            .withNewResourceGroup(rgName)\n+            .withSku(\"B0\")\n+            .create();\n+\n+        Assertions.assertEquals(\"B0\", service.sku().name());\n+\n+        service.update()\n+            .withSku(\"S0\")\n+            .apply();\n+\n+        Assertions.assertEquals(\"S0\", service.sku().name());\n+\n+        service.update()\n+            .withGitUri(\"https://github.com/Azure-Samples/piggymetrics-config\")\n+            .apply();\n+        Assertions.assertEquals(\"https://github.com/Azure-Samples/piggymetrics-config\", service.serverProperties().configServer().gitProperty().uri());\n+\n+        File jarFile = new File(\"gateway.jar\");\n+        if (!jarFile.exists()) {\n+            URLConnection connection = new URL(\"https://github.com/weidongxu-microsoft/azure-sdk-for-java-management-tests/raw/master/spring-cloud/gateway.jar\").openConnection();\n+            connection.connect();\n+            IOUtils.copy(connection.getInputStream(), new FileOutputStream(jarFile));\n+        }\n+\n+        SpringApp app = service.apps().define(appName)\n+            .withPublicEndpoint()\n+            .create();\n+\n+        Assertions.assertNotNull(app.url());\n+        Assertions.assertNotNull(app.activeDeployment());\n+\n+        Assertions.assertTrue(requestSuccess(app.url()));\n+\n+        app.update()\n+            .withoutDeployment(app.activeDeployment())", "originalCommit": "5cc04b316e9e7de58c96e052a1ecd41558ea12d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a5097840f4a4f74510fa6057301be2d986fd9c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a5097840f4a4f74510fa6057301be2d986fd9c6", "message": "change WithPublicEndpoint to WithEndpoint", "committedDate": "2020-07-03T06:56:07Z", "type": "commit"}, {"oid": "99348c290ebacff2bdad36dbe9963a402a7167f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/99348c290ebacff2bdad36dbe9963a402a7167f2", "message": "change sourceCode to sourceCodeFolder", "committedDate": "2020-07-03T07:24:26Z", "type": "commit"}, {"oid": "c5c6d72a720aa3ca21943859fd58da830da6d802", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c5c6d72a720aa3ca21943859fd58da830da6d802", "message": "close inputstream and disconnect url connection", "committedDate": "2020-07-03T07:43:24Z", "type": "commit"}, {"oid": "7ab3f390cca10e0e3f316fee9a80c3f5413c2e97", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ab3f390cca10e0e3f316fee9a80c3f5413c2e97", "message": "check deployment removed", "committedDate": "2020-07-03T07:44:43Z", "type": "commit"}, {"oid": "4d2182875d83e145e993cccb2655c9f556a0cf3e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d2182875d83e145e993cccb2655c9f556a0cf3e", "message": "remove resource code", "committedDate": "2020-07-03T08:18:05Z", "type": "commit"}, {"oid": "3178cad11017a009741f3e9ed3118da036b5d497", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3178cad11017a009741f3e9ed3118da036b5d497", "message": "decompress source code from github", "committedDate": "2020-07-03T09:20:34Z", "type": "commit"}, {"oid": "77668abc8e48e325e528b2e299a1f428ee2e15e9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77668abc8e48e325e528b2e299a1f428ee2e15e9", "message": "update gitignore", "committedDate": "2020-07-06T05:23:09Z", "type": "commit"}, {"oid": "44411e15dd743852565f0692946e5a0bfca3e2d4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/44411e15dd743852565f0692946e5a0bfca3e2d4", "message": "change activate in deployment to withActivation", "committedDate": "2020-07-06T05:59:28Z", "type": "commit"}, {"oid": "aa243e04de356eefc437f5ff825e70b0f6252bad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa243e04de356eefc437f5ff825e70b0f6252bad", "message": "fix compile error", "committedDate": "2020-07-06T07:51:38Z", "type": "commit"}]}