{"pr_number": 11748, "pr_title": "Hiding accessToken key in Body", "pr_createdAt": "2020-06-03T15:05:34Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11748", "timeline": [{"oid": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "message": "hiding accessToken key in Body", "committedDate": "2020-06-03T15:01:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5Mjg4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434692885", "bodyText": "It'll be more overhead but I think turning the stopword String into a new class, such as RecordingRedactor, where it contains the stopword and a function to redact would clean the code up a lot and make it more easily extended as new requests come in.\nclass RecordingRedactor {\n  private final String stopword;\n\n  public boolean shouldRedact(String redactableString);\n  public String redact(String redactableString);\n}", "author": "alzimmermsft", "createdAt": "2020-06-03T16:19:03Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -217,15 +222,35 @@ private void captureRequestHeaders(HttpHeaders requestHeaders, Map<String, Strin\n         }\n     }\n \n-    private String redactUserDelegationKey(String content) {\n-        if (!content.contains(\"UserDelegationKey\")) {\n-            return content;\n+    private String redactSensitiveContent(String content) {\n+        // replace all sensitive string key in the black list\n+        for (String blackString : BLACK_LIST) {", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzczMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436027732", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-06-05T16:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5Mjg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0Nzc4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434747782", "bodyText": "Should this be only called ACCESS_TOKEN_KEY_PATTERN?", "author": "samvaity", "createdAt": "2020-06-03T17:49:19Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -49,10 +49,15 @@\n     private static final String STATUS_CODE = \"StatusCode\";\n     private static final String BODY = \"Body\";\n     private static final String SIG = \"sig\";\n+    private static final String USER_DELEGATION_KEY = \"UserDelegationKey\";\n+    private static final String ACCESS_TOKEN = \"accessToken\";\n+    private static final String REDACTED_UTF_8 =  Base64.getEncoder().encodeToString(\"REDACTED\".getBytes(StandardCharsets.UTF_8));\n+    private static final String[] BLACK_LIST = {USER_DELEGATION_KEY, ACCESS_TOKEN};\n \n     private static final Pattern DELEGATIONKEY_KEY_PATTERN = Pattern.compile(\"(?:<Value>)(.*)(?:</Value>)\");\n     private static final Pattern DELEGATIONKEY_CLIENTID_PATTERN = Pattern.compile(\"(?:<SignedOid>)(.*)(?:</SignedOid>)\");\n     private static final Pattern DELEGATIONKEY_TENANTID_PATTERN = Pattern.compile(\"(?:<SignedTid>)(.*)(?:</SignedTid>)\");\n+    private static final Pattern DELEGATIONKEY_ACCESS_TOKEN_PATTERN = Pattern.compile(\"(?:\\\"accessToken\\\":\\\")(.*?)(?:\\\",|\\\"})\");", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODU5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434748595", "bodyText": "Should we write simple unit test for this?", "author": "samvaity", "createdAt": "2020-06-03T17:50:34Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -217,15 +222,35 @@ private void captureRequestHeaders(HttpHeaders requestHeaders, Map<String, Strin\n         }\n     }\n \n-    private String redactUserDelegationKey(String content) {\n-        if (!content.contains(\"UserDelegationKey\")) {\n-            return content;\n+    private String redactSensitiveContent(String content) {\n+        // replace all sensitive string key in the black list\n+        for (String blackString : BLACK_LIST) {\n+            if (content.contains(blackString)) {\n+                switch (blackString) {\n+                    case USER_DELEGATION_KEY:\n+                        content = redactUserDelegationKey(content);\n+                        break;\n+                    case ACCESS_TOKEN:", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzY0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436027640", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-06-05T16:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODk2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434748963", "bodyText": "Missing copy authorization changes in this PR?", "author": "samvaity", "createdAt": "2020-06-03T17:51:10Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/policy/RecordNetworkCallPolicy.java", "diffHunk": "@@ -49,10 +49,15 @@\n     private static final String STATUS_CODE = \"StatusCode\";", "originalCommit": "6f549d043a4f6826f20a1bca283f1a6e9a5331a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5NTY3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434895679", "bodyText": "I was thinking to have the core-test change only in this PR. But I can add the FR changes in this PR as well if you want.", "author": "mssfang", "createdAt": "2020-06-03T22:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5OTUyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r434899528", "bodyText": "I think go ahead and do it. It will help to confirm the changes and the need for this change.", "author": "samvaity", "createdAt": "2020-06-03T22:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODk2Mw=="}], "type": "inlineReview"}, {"oid": "0dd0af68d80fbde5eaace8d331b440147a905818", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dd0af68d80fbde5eaace8d331b440147a905818", "message": "add FR changes", "committedDate": "2020-06-04T00:27:50Z", "type": "commit"}, {"oid": "dcdb105e4e41a9a71f54c8249f1d089742bae5a4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcdb105e4e41a9a71f54c8249f1d089742bae5a4", "message": "resolve conflict", "committedDate": "2020-06-04T05:57:03Z", "type": "commit"}, {"oid": "34aaed07571bd34d3f4c22f36de4ace4524c7e80", "url": "https://github.com/Azure/azure-sdk-for-java/commit/34aaed07571bd34d3f4c22f36de4ace4524c7e80", "message": "add RecordingRedactor without test", "committedDate": "2020-06-04T17:27:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMjAyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435412028", "bodyText": "I think rather than current we add a new tag unreleased_package in the version_client.txt file.", "author": "samvaity", "createdAt": "2020-06-04T17:03:14Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/pom.xml", "diffHunk": "@@ -48,7 +48,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-test</artifactId>\n-      <version>1.2.1</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-test;current} -->", "originalCommit": "0dd0af68d80fbde5eaace8d331b440147a905818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzU2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436027565", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-06-05T16:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMjAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMzQ5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435413494", "bodyText": "This should be FormRecognizerException now after the exception changes?", "author": "samvaity", "createdAt": "2020-06-04T17:05:41Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientTest.java", "diffHunk": "@@ -260,95 +270,95 @@ public void beginTrainingUnlabeledResult(HttpClient httpClient, FormRecognizerSe\n     /**\n      * Verifies the result of the copy operation for valid parameters.\n      */\n-    // Fix with https://github.com/Azure/azure-sdk-for-java/issues/11637\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void beginCopy(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-    //         SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-    //             client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n-    //         syncPoller.waitForCompletion();\n-    //         CustomFormModel actualModel = syncPoller.getFinalResult();\n-    //\n-    //         beginCopyRunner((resourceId, resourceRegion) -> {\n-    //             Mono<CopyAuthorization> target =\n-    //                 client.getCopyAuthorization(resourceId, resourceRegion);\n-    //             PollerFlux<OperationResult,\n-    //                 CustomFormModelInfo> copyPoller = client.beginCopyModel(actualModel.getModelId(), target.block());\n-    //             CustomFormModelInfo copyModel = copyPoller.getSyncPoller().getFinalResult();\n-    //             assertEquals(target.block().getModelId(), copyModel.getModelId());\n-    //             assertNotNull(actualModel.getRequestedOn());\n-    //             assertNotNull(actualModel.getCompletedOn());\n-    //             assertEquals(CustomFormModelStatus.READY, copyModel.getStatus());\n-    //         });\n-    //     });\n-    // }\n-    //\n-    // /**\n-    //  * Verifies the Invalid region ErrorResponseException is thrown for invalid region input to copy operation.\n-    //  */\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void beginCopyInvalidRegion(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-    //         SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-    //             client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n-    //         syncPoller.waitForCompletion();\n-    //         CustomFormModel actualModel = syncPoller.getFinalResult();\n-    //\n-    //         beginCopyInvalidRegionRunner((resourceId, resourceRegion) -> {\n-    //             Mono<CopyAuthorization> target =\n-    //                 client.getCopyAuthorization(resourceId, resourceRegion);\n-    //             PollerFlux<OperationResult,\n-    //                 CustomFormModelInfo> copyPoller = client.beginCopyModel(actualModel.getModelId(), target.block());\n-    //\n-    //             Exception thrown = assertThrows(ErrorResponseException.class,\n-    //                 () -> copyPoller.getSyncPoller().getFinalResult());\n-    //             assertEquals(EXPECTED_COPY_REQUEST_INVALID_TARGET_RESOURCE_REGION, thrown.getMessage());\n-    //         });\n-    //     });\n-    // }\n-    //\n-    // /**\n-    //  * Verifies HttpResponseException is thrown for invalid region input to copy operation.\n-    //  */\n-    // @SuppressWarnings(\"unchecked\")\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void beginCopyIncorrectRegion(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n-    //         SyncPoller<OperationResult, CustomFormModel> syncPoller =\n-    //             client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n-    //         syncPoller.waitForCompletion();\n-    //         CustomFormModel actualModel = syncPoller.getFinalResult();\n-    //\n-    //         beginCopyIncorrectRegionRunner((resourceId, resourceRegion) -> {\n-    //             Mono<CopyAuthorization> target = client.getCopyAuthorization(resourceId, resourceRegion);\n-    //             HttpResponseException thrown = assertThrows(HttpResponseException.class,\n-    //                 () -> client.beginCopyModel(actualModel.getModelId(), target.block())\n-    //                     .getSyncPoller().getFinalResult());\n-    //             List<ErrorInformation> errorInformationList = (List<ErrorInformation>) thrown.getValue();\n-    //             assertEquals(\"ResourceResolverError\", errorInformationList.get(0).getCode());\n-    //             assertEquals(\"Copy operation returned with a failed status\", thrown.getMessage());\n-    //         });\n-    //     });\n-    // }\n-    //\n-    // /**\n-    //  * Verifies the result of the copy authorization for valid parameters.\n-    //  */\n-    // @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    // @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n-    // void copyAuthorization(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n-    //     client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n-    //     beginCopyRunner((resourceId, resourceRegion) ->\n-    //         StepVerifier.create(client.getCopyAuthorization(resourceId, resourceRegion))\n-    //             .assertNext(copyAuthorization ->\n-    //                 validateCopyAuthorizationResult(resourceId, resourceRegion, copyAuthorization))\n-    //             .verifyComplete()\n-    //     );\n-    // }\n+     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+     void beginCopy(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+         client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+         beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+             SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+                 client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n+             syncPoller.waitForCompletion();\n+             CustomFormModel actualModel = syncPoller.getFinalResult();\n+\n+             beginCopyRunner((resourceId, resourceRegion) -> {\n+                 CopyAuthorization target =\n+                     client.getCopyAuthorization(resourceId, resourceRegion).block();\n+\n+                 PollerFlux<OperationResult, CustomFormModelInfo> copyPoller =\n+                     client.beginCopyModel(actualModel.getModelId(), target);\n+                 CustomFormModelInfo copyModel = copyPoller.getSyncPoller().getFinalResult();\n+                 assertNotNull(target.getModelId(), copyModel.getModelId());\n+                 assertNotNull(actualModel.getRequestedOn());\n+                 assertNotNull(actualModel.getCompletedOn());\n+                 assertEquals(CustomFormModelStatus.READY, copyModel.getStatus());\n+             });\n+         });\n+     }\n+\n+     /**\n+      * Verifies the Invalid region ErrorResponseException is thrown for invalid region input to copy operation.\n+      */\n+     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+     @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+     void beginCopyInvalidRegion(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+         client = getFormTrainingAsyncClient(httpClient, serviceVersion);\n+         beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+             SyncPoller<OperationResult, CustomFormModel> syncPoller =\n+                 client.beginTraining(trainingFilesUrl, useTrainingLabels).getSyncPoller();\n+             syncPoller.waitForCompletion();\n+             CustomFormModel actualModel = syncPoller.getFinalResult();\n+\n+             beginCopyInvalidRegionRunner((resourceId, resourceRegion) -> {\n+                 Mono<CopyAuthorization> target =\n+                     client.getCopyAuthorization(resourceId, resourceRegion);\n+                 PollerFlux<OperationResult,\n+                     CustomFormModelInfo> copyPoller = client.beginCopyModel(actualModel.getModelId(), target.block());\n+\n+                 Exception thrown = assertThrows(ErrorResponseException.class,\n+                     () -> copyPoller.getSyncPoller().getFinalResult());\n+                 assertEquals(EXPECTED_COPY_REQUEST_INVALID_TARGET_RESOURCE_REGION, thrown.getMessage());\n+             });\n+         });\n+     }\n+\n+     /**\n+      * Verifies HttpResponseException is thrown for invalid region input to copy operation.", "originalCommit": "0dd0af68d80fbde5eaace8d331b440147a905818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNzM5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436027396", "bodyText": "updated", "author": "mssfang", "createdAt": "2020-06-05T16:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMzQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNjM4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435416388", "bodyText": "I see that we are removing the entire keyset.\nShould we rather have only the key value redacted like \"accessToken\" : REDACTED?\nThoughts?", "author": "samvaity", "createdAt": "2020-06-04T17:10:45Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/resources/session-records/beginCopy.json", "diffHunk": "@@ -0,0 +1,225 @@\n+{\n+  \"networkCallRecords\" : [ {\n+    \"Method\" : \"POST\",\n+    \"Uri\" : \"https://REDACTED.cognitiveservices.azure.com/formrecognizer/v2.0-preview//custom/models\",\n+    \"Headers\" : {\n+      \"User-Agent\" : \"azsdk-java-azure-ai-formrecognizer/1.0.0-beta.3 (11.0.5; Windows 10 10.0)\",\n+      \"x-ms-client-request-id\" : \"06bc0264-5674-4a30-8e96-290f1a6359b5\",\n+      \"Content-Type\" : \"application/json\"\n+    },\n+    \"Response\" : {\n+      \"x-envoy-upstream-service-time\" : \"5155\",\n+      \"Strict-Transport-Security\" : \"max-age=31536000; includeSubDomains; preload\",\n+      \"x-content-type-options\" : \"nosniff\",\n+      \"apim-request-id\" : \"64d10ad3-17ee-45de-ab8c-3d36eac08025\",\n+      \"retry-after\" : \"0\",\n+      \"Content-Length\" : \"0\",\n+      \"StatusCode\" : \"201\",\n+      \"Date\" : \"Wed, 03 Jun 2020 22:54:32 GMT\",\n+      \"Location\" : \"https://savaity-formrecognizer.cognitiveservices.azure.com/formrecognizer/v2.0-preview/custom/models/6752af86-3bf7-4669-95e4-4a96822e69d4\"\n+    },\n+    \"Exception\" : null\n+  }, {\n+    \"Method\" : \"GET\",\n+    \"Uri\" : \"https://REDACTED.cognitiveservices.azure.com/formrecognizer/v2.0-preview//custom/models/6752af86-3bf7-4669-95e4-4a96822e69d4?includeKeys=true\",\n+    \"Headers\" : {\n+      \"User-Agent\" : \"azsdk-java-azure-ai-formrecognizer/1.0.0-beta.3 (11.0.5; Windows 10 10.0)\",\n+      \"x-ms-client-request-id\" : \"001e4b9b-61bf-4b5f-9d3c-40f52415e9f3\"\n+    },\n+    \"Response\" : {\n+      \"Transfer-Encoding\" : \"chunked\",\n+      \"x-envoy-upstream-service-time\" : \"139\",\n+      \"Strict-Transport-Security\" : \"max-age=31536000; includeSubDomains; preload\",\n+      \"x-content-type-options\" : \"nosniff\",\n+      \"apim-request-id\" : \"78294a25-a8fc-4032-a3aa-d73ea5052e9e\",\n+      \"retry-after\" : \"0\",\n+      \"StatusCode\" : \"200\",\n+      \"Body\" : \"{\\\"modelInfo\\\":{\\\"modelId\\\":\\\"6752af86-3bf7-4669-95e4-4a96822e69d4\\\",\\\"status\\\":\\\"creating\\\",\\\"createdDateTime\\\":\\\"2020-06-03T22:54:33Z\\\",\\\"lastUpdatedDateTime\\\":\\\"2020-06-03T22:54:33Z\\\"}}\",\n+      \"Date\" : \"Wed, 03 Jun 2020 22:54:38 GMT\",", "originalCommit": "0dd0af68d80fbde5eaace8d331b440147a905818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNDc2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435624766", "bodyText": "#11748 (comment)", "author": "mssfang", "createdAt": "2020-06-05T00:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNjM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNDg4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435624881", "bodyText": "I can change it to display exactly REDACTED", "author": "mssfang", "createdAt": "2020-06-05T00:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNjM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzOTM4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435639382", "bodyText": "I think REDACTED works better.", "author": "samvaity", "createdAt": "2020-06-05T01:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNjM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNTM0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435605344", "bodyText": "Is accessToken being redacted properly, it looks like its still being recorded.", "author": "alzimmermsft", "createdAt": "2020-06-04T23:24:48Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/resources/session-records/beginCopyIncorrectRegion.json", "diffHunk": "@@ -0,0 +1,205 @@\n+{\n+  \"networkCallRecords\" : [ {\n+    \"Method\" : \"POST\",\n+    \"Uri\" : \"https://REDACTED.cognitiveservices.azure.com/formrecognizer/v2.0-preview//custom/models\",\n+    \"Headers\" : {\n+      \"User-Agent\" : \"azsdk-java-azure-ai-formrecognizer/1.0.0-beta.3 (11.0.5; Windows 10 10.0)\",\n+      \"x-ms-client-request-id\" : \"379efe71-03c8-4a25-af88-e0e6b00da61e\",\n+      \"Content-Type\" : \"application/json\"\n+    },\n+    \"Response\" : {\n+      \"x-envoy-upstream-service-time\" : \"127\",\n+      \"Strict-Transport-Security\" : \"max-age=31536000; includeSubDomains; preload\",\n+      \"x-content-type-options\" : \"nosniff\",\n+      \"apim-request-id\" : \"d943eb9f-1274-4471-ba9c-29357a7864b0\",\n+      \"retry-after\" : \"0\",\n+      \"Content-Length\" : \"0\",\n+      \"StatusCode\" : \"201\",\n+      \"Date\" : \"Thu, 04 Jun 2020 16:34:30 GMT\",\n+      \"Location\" : \"https://shafangfr.cognitiveservices.azure.com/formrecognizer/v2.0-preview/custom/models/da12d931-b1d9-4faa-a081-b4b8fa246645\"\n+    },\n+    \"Exception\" : null\n+  }, {\n+    \"Method\" : \"GET\",\n+    \"Uri\" : \"https://REDACTED.cognitiveservices.azure.com/formrecognizer/v2.0-preview//custom/models/da12d931-b1d9-4faa-a081-b4b8fa246645?includeKeys=true\",\n+    \"Headers\" : {\n+      \"User-Agent\" : \"azsdk-java-azure-ai-formrecognizer/1.0.0-beta.3 (11.0.5; Windows 10 10.0)\",\n+      \"x-ms-client-request-id\" : \"29f95fe3-8bac-4d2d-a718-c784423cf9e8\"\n+    },\n+    \"Response\" : {\n+      \"Transfer-Encoding\" : \"chunked\",\n+      \"x-envoy-upstream-service-time\" : \"35\",\n+      \"Strict-Transport-Security\" : \"max-age=31536000; includeSubDomains; preload\",\n+      \"x-content-type-options\" : \"nosniff\",\n+      \"apim-request-id\" : \"9b59cfa1-ac0f-48ca-99bb-7cbd8ffba0eb\",\n+      \"retry-after\" : \"0\",\n+      \"StatusCode\" : \"200\",\n+      \"Body\" : \"{\\\"modelInfo\\\":{\\\"modelId\\\":\\\"da12d931-b1d9-4faa-a081-b4b8fa246645\\\",\\\"status\\\":\\\"creating\\\",\\\"createdDateTime\\\":\\\"2020-06-04T16:34:30Z\\\",\\\"lastUpdatedDateTime\\\":\\\"2020-06-04T16:34:30Z\\\"}}\",\n+      \"Date\" : \"Thu, 04 Jun 2020 16:34:35 GMT\",\n+      \"Content-Type\" : \"application/json; charset=utf-8\"\n+    },\n+    \"Exception\" : null\n+  }, {\n+    \"Method\" : \"GET\",\n+    \"Uri\" : \"https://REDACTED.cognitiveservices.azure.com/formrecognizer/v2.0-preview//custom/models/da12d931-b1d9-4faa-a081-b4b8fa246645?includeKeys=true\",\n+    \"Headers\" : {\n+      \"User-Agent\" : \"azsdk-java-azure-ai-formrecognizer/1.0.0-beta.3 (11.0.5; Windows 10 10.0)\",\n+      \"x-ms-client-request-id\" : \"906358d1-7efe-4246-b8bf-3245a4f45263\"\n+    },\n+    \"Response\" : {\n+      \"Transfer-Encoding\" : \"chunked\",\n+      \"x-envoy-upstream-service-time\" : \"54\",\n+      \"Strict-Transport-Security\" : \"max-age=31536000; includeSubDomains; preload\",\n+      \"x-content-type-options\" : \"nosniff\",\n+      \"apim-request-id\" : \"49120ed7-04d7-4a58-b68e-fa85cdb2582b\",\n+      \"retry-after\" : \"0\",\n+      \"StatusCode\" : \"200\",\n+      \"Body\" : \"{\\\"modelInfo\\\":{\\\"modelId\\\":\\\"da12d931-b1d9-4faa-a081-b4b8fa246645\\\",\\\"status\\\":\\\"ready\\\",\\\"createdDateTime\\\":\\\"2020-06-04T16:34:30Z\\\",\\\"lastUpdatedDateTime\\\":\\\"2020-06-04T16:34:39Z\\\"},\\\"keys\\\":{\\\"clusters\\\":{\\\"0\\\":[\\\"Additional Notes:\\\",\\\"Address:\\\",\\\"Address:\\\",\\\"Company Name:\\\",\\\"Company Phone:\\\",\\\"Dated As:\\\",\\\"Email:\\\",\\\"Hero Limited\\\",\\\"Name:\\\",\\\"Phone:\\\",\\\"Purchase Order\\\",\\\"Purchase Order\\\",\\\"Purchase Order #:\\\",\\\"SUBTOTAL\\\",\\\"Seattle, WA 93849 Phone:\\\",\\\"Shipped From\\\",\\\"Shipped To\\\",\\\"TAX\\\",\\\"TOTAL\\\",\\\"Vendor Name:\\\",\\\"Website:\\\"]}},\\\"trainResult\\\":{\\\"trainingDocuments\\\":[{\\\"documentName\\\":\\\"Form_1.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_2.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_3.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_4.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_5.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"}],\\\"errors\\\":[]}}\",\n+      \"Date\" : \"Thu, 04 Jun 2020 16:34:40 GMT\",\n+      \"Content-Type\" : \"application/json; charset=utf-8\"\n+    },\n+    \"Exception\" : null\n+  }, {\n+    \"Method\" : \"GET\",\n+    \"Uri\" : \"https://REDACTED.cognitiveservices.azure.com/formrecognizer/v2.0-preview//custom/models/da12d931-b1d9-4faa-a081-b4b8fa246645?includeKeys=true\",\n+    \"Headers\" : {\n+      \"User-Agent\" : \"azsdk-java-azure-ai-formrecognizer/1.0.0-beta.3 (11.0.5; Windows 10 10.0)\",\n+      \"x-ms-client-request-id\" : \"b5a63312-52ed-4254-8bdd-71f375b47912\"\n+    },\n+    \"Response\" : {\n+      \"Transfer-Encoding\" : \"chunked\",\n+      \"x-envoy-upstream-service-time\" : \"45\",\n+      \"Strict-Transport-Security\" : \"max-age=31536000; includeSubDomains; preload\",\n+      \"x-content-type-options\" : \"nosniff\",\n+      \"apim-request-id\" : \"3b62d53b-ab1c-405d-a588-06408e8341da\",\n+      \"retry-after\" : \"0\",\n+      \"StatusCode\" : \"200\",\n+      \"Body\" : \"{\\\"modelInfo\\\":{\\\"modelId\\\":\\\"da12d931-b1d9-4faa-a081-b4b8fa246645\\\",\\\"status\\\":\\\"ready\\\",\\\"createdDateTime\\\":\\\"2020-06-04T16:34:30Z\\\",\\\"lastUpdatedDateTime\\\":\\\"2020-06-04T16:34:39Z\\\"},\\\"keys\\\":{\\\"clusters\\\":{\\\"0\\\":[\\\"Additional Notes:\\\",\\\"Address:\\\",\\\"Address:\\\",\\\"Company Name:\\\",\\\"Company Phone:\\\",\\\"Dated As:\\\",\\\"Email:\\\",\\\"Hero Limited\\\",\\\"Name:\\\",\\\"Phone:\\\",\\\"Purchase Order\\\",\\\"Purchase Order\\\",\\\"Purchase Order #:\\\",\\\"SUBTOTAL\\\",\\\"Seattle, WA 93849 Phone:\\\",\\\"Shipped From\\\",\\\"Shipped To\\\",\\\"TAX\\\",\\\"TOTAL\\\",\\\"Vendor Name:\\\",\\\"Website:\\\"]}},\\\"trainResult\\\":{\\\"trainingDocuments\\\":[{\\\"documentName\\\":\\\"Form_1.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_2.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_3.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_4.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"},{\\\"documentName\\\":\\\"Form_5.jpg\\\",\\\"pages\\\":1,\\\"errors\\\":[],\\\"status\\\":\\\"succeeded\\\"}],\\\"errors\\\":[]}}\",\n+      \"Date\" : \"Thu, 04 Jun 2020 16:34:40 GMT\",\n+      \"Content-Type\" : \"application/json; charset=utf-8\"\n+    },\n+    \"Exception\" : null\n+  }, {\n+    \"Method\" : \"POST\",\n+    \"Uri\" : \"https://REDACTED.cognitiveservices.azure.com/formrecognizer/v2.0-preview//custom/models/copyAuthorization\",\n+    \"Headers\" : {\n+      \"User-Agent\" : \"azsdk-java-azure-ai-formrecognizer/1.0.0-beta.3 (11.0.5; Windows 10 10.0)\",\n+      \"x-ms-client-request-id\" : \"fbb3fc15-4327-4e90-985e-faf7f4aa1dbb\"\n+    },\n+    \"Response\" : {\n+      \"Transfer-Encoding\" : \"chunked\",\n+      \"x-envoy-upstream-service-time\" : \"38\",\n+      \"Strict-Transport-Security\" : \"max-age=31536000; includeSubDomains; preload\",\n+      \"x-content-type-options\" : \"nosniff\",\n+      \"apim-request-id\" : \"0ed71d5f-ffcf-4ce3-88d8-1725b847e0e9\",\n+      \"retry-after\" : \"0\",\n+      \"StatusCode\" : \"201\",\n+      \"Body\" : \"{\\\"modelId\\\":\\\"e7024c31-7055-4e9e-a9ec-0d8d36e366f7\\\",\\\"accessToken\\\":\\\"UkVEQUNURUQ=\\\",\\\"expirationDateTimeTicks\\\":637269716812179520}\",", "originalCommit": "34aaed07571bd34d3f4c22f36de4ace4524c7e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNDA2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435624065", "bodyText": "It is because of\nBase64.getEncoder().encodeToString(\"REDACTED\".getBytes(StandardCharsets.UTF_8))", "author": "mssfang", "createdAt": "2020-06-05T00:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNTM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNDIyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r435624226", "bodyText": "It printed as UkVEQUNURUQ=", "author": "mssfang", "createdAt": "2020-06-05T00:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNTM0NA=="}], "type": "inlineReview"}, {"oid": "b4b98f26a69e063f073c6e0036978571512213ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4b98f26a69e063f073c6e0036978571512213ea", "message": "resolve conflict", "committedDate": "2020-06-05T05:32:34Z", "type": "commit"}, {"oid": "c122cca6b3dec50f004c17ddb97e4cdb8af6297a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c122cca6b3dec50f004c17ddb97e4cdb8af6297a", "message": "replace REDACTED directly", "committedDate": "2020-06-05T06:39:57Z", "type": "commit"}, {"oid": "9d07bcc4e241e624a623fab1ccb172364c1be112", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d07bcc4e241e624a623fab1ccb172364c1be112", "message": "add accessToken unit tests", "committedDate": "2020-06-05T07:01:20Z", "type": "commit"}, {"oid": "b4223f4266fe336163ef20715b3953a16b8e0f78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4223f4266fe336163ef20715b3953a16b8e0f78", "message": "enhance the unit tests for RecordingRedactor", "committedDate": "2020-06-05T17:21:14Z", "type": "commit"}, {"oid": "233da4b1bacd184eaf2f5c025dbb87d077d4633d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/233da4b1bacd184eaf2f5c025dbb87d077d4633d", "message": "checkstyle", "committedDate": "2020-06-05T17:35:01Z", "type": "commit"}, {"oid": "1273d0b18ea055f53491999390f7569dd37b1754", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1273d0b18ea055f53491999390f7569dd37b1754", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into Core-hideSensitiveInfo", "committedDate": "2020-06-05T17:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NzQ0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436097448", "bodyText": "This is using the wrong version tag. You should add an unreleased_com.azure:azure-core-test;1.3.0-beta.1 into version_client.txt and then change this tag to\n<!-- {x-version-update;unreleased_com.azure:azure-core-test;dependency} -->", "author": "alzimmermsft", "createdAt": "2020-06-05T18:34:51Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/pom.xml", "diffHunk": "@@ -48,7 +48,7 @@\n     <dependency>\n       <groupId>com.azure</groupId>\n       <artifactId>azure-core-test</artifactId>\n-      <version>1.2.1</version> <!-- {x-version-update;com.azure:azure-core-test;dependency} -->\n+      <version>1.3.0-beta.1</version> <!-- {x-version-update;com.azure:azure-core-test;unreleased_package} -->", "originalCommit": "1273d0b18ea055f53491999390f7569dd37b1754", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3703f368afbc445cde8d759164b9d10d3b4b351", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3703f368afbc445cde8d759164b9d10d3b4b351", "message": "use the correct unreleased version format", "committedDate": "2020-06-05T18:42:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMjk2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436102969", "bodyText": "You could simplify this by doing something like this:\n    private static final List<Function<String, String>> RECORDING_REDACTORS = loadRedactors();\n\n    private static List<Function<String, String>> loadRedactors() {\n        List<Function<String, String>> redactors = new ArrayList<>();\n        redactors.add(Redactor::redactAccessToken);\n        redactors.add(Redactor::redactDelegationKey);\n        return redactors;\n    }\n\n    private static String redactDelegationKey(String content) {\n        // redact content\n    }\n\n    private static String redactAccessToken(String content) {\n        // redact content\n    }\n\n    public String redact(String redactableString) {\n        String redactedString = redactableString;\n        for (Function<String, String> redactor : RECORDING_REDACTORS) {\n            redactedString = redactor.apply(redactedString);\n        }\n        return redactedString;\n    }", "author": "srnagar", "createdAt": "2020-06-05T18:46:31Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/models/RecordingRedactor.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.test.models;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class used to redact the sensitive information when recording\n+ */\n+public class RecordingRedactor {\n+    private static final String ACCESS_TOKEN = \"accessToken\";\n+    private static final String REDACTED = \"REDACTED\";\n+    private static final String REDACTED_UTF_8 = Base64.getEncoder().encodeToString(\"REDACTED\".getBytes(StandardCharsets.UTF_8));\n+    private static final String USER_DELEGATION_KEY = \"UserDelegationKey\";\n+\n+    private static final Pattern ACCESS_TOKEN_KEY_PATTERN = Pattern.compile(\"(?:\\\"accessToken\\\":\\\")(.*?)(?:\\\",|\\\"})\");\n+    private static final Pattern DELEGATIONKEY_KEY_PATTERN = Pattern.compile(\"(?:<Value>)(.*)(?:</Value>)\");\n+    private static final Pattern DELEGATIONKEY_CLIENTID_PATTERN = Pattern.compile(\"(?:<SignedOid>)(.*)(?:</SignedOid>)\");\n+    private static final Pattern DELEGATIONKEY_TENANTID_PATTERN = Pattern.compile(\"(?:<SignedTid>)(.*)(?:</SignedTid>)\");\n+\n+    private static final String[] STOP_WORDS = {ACCESS_TOKEN, USER_DELEGATION_KEY};\n+\n+    /**\n+     * Redact the sensitive information.\n+     *\n+     * @param redactableString the content that will be scan through\n+     * @return the redacted content\n+     */\n+    public String redact(String redactableString) {\n+\n+        for (String stopWord : STOP_WORDS) {\n+            if (redactableString.contains(stopWord)) {\n+                switch (stopWord) {\n+                    case USER_DELEGATION_KEY:\n+                        redactableString = redactUserDelegationKey(redactableString);\n+                        break;\n+                    case ACCESS_TOKEN:\n+                        redactableString = redactAccessToken(redactableString);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+        return redactableString;\n+    }", "originalCommit": "1273d0b18ea055f53491999390f7569dd37b1754", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "279def8b2105796ae2f66bef5ad6802e46a57eb4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/279def8b2105796ae2f66bef5ad6802e46a57eb4", "message": "add an unit test for non-sensitive data contend", "committedDate": "2020-06-05T18:47:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMjk5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11748#discussion_r436122991", "bodyText": "nit: please put this unreleased_ library under the unreleased section below.", "author": "JimSuplizio", "createdAt": "2020-06-05T19:31:59Z", "path": "eng/versioning/version_client.txt", "diffHunk": "@@ -55,6 +55,8 @@ com.microsoft.azure:azure-keyvault-secrets-spring-boot-starter;2.2.4;2.2.5-beta.\n com.microsoft.azure:azure-servicebus-jms-spring-boot-starter;2.2.4;2.2.5-beta.1\n com.microsoft.azure:azure-spring-boot-metrics-starter;2.2.4;2.2.5-beta.1\n \n+unreleased_com.azure:azure-core-test;1.3.0-beta.1", "originalCommit": "c3703f368afbc445cde8d759164b9d10d3b4b351", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cbef4522e8789e578c7f8be0a47c0ba4e1ecd17f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbef4522e8789e578c7f8be0a47c0ba4e1ecd17f", "message": "using Function Apply", "committedDate": "2020-06-05T19:35:54Z", "type": "commit"}, {"oid": "f9f035d3f5b7dca2b9da45fb1f643b69f04b3c69", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9f035d3f5b7dca2b9da45fb1f643b69f04b3c69", "message": "rearrange unreleased_ tag", "committedDate": "2020-06-05T19:37:50Z", "type": "commit"}, {"oid": "30989cbc995dffa90bff224de43599df1a6b397b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/30989cbc995dffa90bff224de43599df1a6b397b", "message": "resolve conflict", "committedDate": "2020-06-05T21:21:23Z", "type": "commit"}]}