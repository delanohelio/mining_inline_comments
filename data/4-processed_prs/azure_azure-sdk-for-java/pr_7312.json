{"pr_number": 7312, "pr_title": "Added version checking for new blob and file APIs", "pr_createdAt": "2020-01-09T18:02:39Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7312", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NTIzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364885234", "bodyText": "Missing license", "author": "alzimmermsft", "createdAt": "2020-01-09T18:08:42Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.azure.storage.blob.implementation.util;", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NTQxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364885417", "bodyText": "Mind adding an explanation of the class here", "author": "alzimmermsft", "createdAt": "2020-01-09T18:09:05Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.azure.storage.blob.implementation.util;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.blob.BlobServiceVersion;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+public class BlobServiceVersionPolicy implements HttpPipelinePolicy {", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NTYyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364885620", "bodyText": "Let's make this a static final at the class level, no need to instantiate this each time the policy processes.", "author": "alzimmermsft", "createdAt": "2020-01-09T18:09:38Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.azure.storage.blob.implementation.util;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.blob.BlobServiceVersion;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+public class BlobServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        BlobServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+        String ANY_BLOB_API = \"any blob API\";", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NTcyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364885726", "bodyText": "Same comment as ANY_BLOB_API", "author": "alzimmermsft", "createdAt": "2020-01-09T18:09:52Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.azure.storage.blob.implementation.util;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.blob.BlobServiceVersion;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+public class BlobServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        BlobServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+        String ANY_BLOB_API = \"any blob API\";\n+\n+        if (serviceVersion.ordinal() == BlobServiceVersion.getLatest().ordinal()) {\n+            return next.process();\n+        }\n+\n+        // 2019_07_07 check\n+        if (serviceVersion.ordinal() < BlobServiceVersion.V2019_07_07.ordinal()) {\n+            // Encryption scope\n+            String CREATE_CONTAINER = \"create container\";", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4Njg1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364886851", "bodyText": "This should throw an IllegalStateException as we don't expect to get here, also if version is null a NPE would be thrown by the conditional clauses in this method.", "author": "alzimmermsft", "createdAt": "2020-01-09T18:12:45Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.azure.storage.blob.implementation.util;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.blob.BlobServiceVersion;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+public class BlobServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        BlobServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+        String ANY_BLOB_API = \"any blob API\";\n+\n+        if (serviceVersion.ordinal() == BlobServiceVersion.getLatest().ordinal()) {\n+            return next.process();\n+        }\n+\n+        // 2019_07_07 check\n+        if (serviceVersion.ordinal() < BlobServiceVersion.V2019_07_07.ordinal()) {\n+            // Encryption scope\n+            String CREATE_CONTAINER = \"create container\";\n+            throwIfContainsHeader(requestHeaders, \"x-ms-default-encryption-scope\", CREATE_CONTAINER,\n+                serviceVersion.getVersion());\n+            throwIfContainsHeader(requestHeaders, \"x-ms-deny-encryption-scope-override\", CREATE_CONTAINER,\n+                serviceVersion.getVersion());\n+            throwIfContainsHeader(requestHeaders, \"x-ms-encryption-scope\", ANY_BLOB_API, serviceVersion.getVersion());\n+\n+            // Managed disk range diff\n+            throwIfContainsHeader(requestHeaders, \"x-ms-previous-snapshot-url\", ANY_BLOB_API,\n+                serviceVersion.getVersion());\n+        }\n+\n+        return next.process();\n+    }\n+\n+    private static BlobServiceVersion toServiceVersion(String version) {\n+        if (version.equals(BlobServiceVersion.V2019_02_02.getVersion())) {\n+            return BlobServiceVersion.V2019_02_02;\n+        } else if (version.equals(BlobServiceVersion.V2019_07_07.getVersion())) {\n+            return BlobServiceVersion.V2019_07_07;\n+        } else {\n+            throw new NullPointerException(Constants.HeaderConstants.SERVICE_VERSION + \" must be set.\");", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzQyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364887423", "bodyText": "Should check that BlobServiceVersion.getVersion equals version.\nBlobServiceVersion.V2019_02-02.getVersions().equals(version)\nThis is better since the enum has to be set but version may not be set (though I think it always will be).", "author": "alzimmermsft", "createdAt": "2020-01-09T18:14:09Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/util/BlobServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.azure.storage.blob.implementation.util;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.blob.BlobServiceVersion;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+public class BlobServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        BlobServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+        String ANY_BLOB_API = \"any blob API\";\n+\n+        if (serviceVersion.ordinal() == BlobServiceVersion.getLatest().ordinal()) {\n+            return next.process();\n+        }\n+\n+        // 2019_07_07 check\n+        if (serviceVersion.ordinal() < BlobServiceVersion.V2019_07_07.ordinal()) {\n+            // Encryption scope\n+            String CREATE_CONTAINER = \"create container\";\n+            throwIfContainsHeader(requestHeaders, \"x-ms-default-encryption-scope\", CREATE_CONTAINER,\n+                serviceVersion.getVersion());\n+            throwIfContainsHeader(requestHeaders, \"x-ms-deny-encryption-scope-override\", CREATE_CONTAINER,\n+                serviceVersion.getVersion());\n+            throwIfContainsHeader(requestHeaders, \"x-ms-encryption-scope\", ANY_BLOB_API, serviceVersion.getVersion());\n+\n+            // Managed disk range diff\n+            throwIfContainsHeader(requestHeaders, \"x-ms-previous-snapshot-url\", ANY_BLOB_API,\n+                serviceVersion.getVersion());\n+        }\n+\n+        return next.process();\n+    }\n+\n+    private static BlobServiceVersion toServiceVersion(String version) {\n+        if (version.equals(BlobServiceVersion.V2019_02_02.getVersion())) {", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4Nzc0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364887746", "bodyText": "Missing license", "author": "alzimmermsft", "createdAt": "2020-01-09T18:14:54Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobServiceVersionPolicyTest.groovy", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.azure.storage.blob", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4ODAzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364888037", "bodyText": "Did something pull this dependency in?", "author": "alzimmermsft", "createdAt": "2020-01-09T18:15:32Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/implementation/StorageImplUtils.java", "diffHunk": "@@ -3,6 +3,8 @@\n \n package com.azure.storage.common.implementation;\n \n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5ODc3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364898773", "bodyText": "Just an artefact of me trying something then undoing it", "author": "gapra-msft", "createdAt": "2020-01-09T18:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4ODAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4ODQyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364888424", "bodyText": "Missing license", "author": "alzimmermsft", "createdAt": "2020-01-09T18:16:23Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/implementation/util/ShareServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.azure.storage.file.share.implementation.util;", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4OTk3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364889976", "bodyText": "Similar comments in this file as the Blobs one.\n\nMake constant strings static final at the class level.\nReverse the version comparison to use the enum as the .equals caller since it is known to be set.\nChange the NullPointerException to an IllegalStateException.", "author": "alzimmermsft", "createdAt": "2020-01-09T18:19:56Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/implementation/util/ShareServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.azure.storage.file.share.implementation.util;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.common.implementation.Constants;\n+import com.azure.storage.file.share.ShareServiceVersion;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URL;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+public class ShareServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        URL requestUrl = context.getHttpRequest().getUrl();\n+        ShareServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+        String ANY_FILE_API = \"any file API\";", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5MDM5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364890391", "bodyText": "Should a helper method be added into StorageImplUtils that validates that the request doesn't contain a given query parameter?", "author": "alzimmermsft", "createdAt": "2020-01-09T18:20:57Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/implementation/util/ShareServiceVersionPolicy.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.azure.storage.file.share.implementation.util;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.storage.common.implementation.Constants;\n+import com.azure.storage.file.share.ShareServiceVersion;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URL;\n+\n+import static com.azure.storage.common.implementation.StorageImplUtils.throwIfContainsHeader;\n+\n+public class ShareServiceVersionPolicy implements HttpPipelinePolicy {\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        HttpHeaders requestHeaders = context.getHttpRequest().getHeaders();\n+        URL requestUrl = context.getHttpRequest().getUrl();\n+        ShareServiceVersion serviceVersion = toServiceVersion(\n+            requestHeaders.getValue(Constants.HeaderConstants.SERVICE_VERSION));\n+        String ANY_FILE_API = \"any file API\";\n+\n+        if (serviceVersion.ordinal() == ShareServiceVersion.getLatest().ordinal()) {\n+            return next.process();\n+        }\n+\n+        // 2019_07_07 check\n+        if (serviceVersion.ordinal() < ShareServiceVersion.V2019_07_07.ordinal()) {\n+            // File lease\n+            throwIfContainsHeader(requestHeaders, \"x-ms-lease-id\", ANY_FILE_API, serviceVersion.getVersion());\n+            throwIfContainsHeader(requestHeaders, \"x-ms-lease-duration\", ANY_FILE_API, serviceVersion.getVersion());\n+            throwIfContainsHeader(requestHeaders, \"x-ms-proposed-lease-id\", ANY_FILE_API, serviceVersion.getVersion());\n+\n+            if (requestUrl.getQuery() != null && requestUrl.getQuery().contains(\"comp=lease\")) {", "originalCommit": "453ec66d24a09501f48d9b9cefc774e746e1e505", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5OTkwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r364899904", "bodyText": "yeah that's a good idea.", "author": "gapra-msft", "createdAt": "2020-01-09T18:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5MDM5MQ=="}], "type": "inlineReview"}, {"oid": "cd5f2bd41019668e18faa8e8a1a037f46ba3c917", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd5f2bd41019668e18faa8e8a1a037f46ba3c917", "message": "Added version checking for new blob and file APIs", "committedDate": "2020-01-09T18:31:54Z", "type": "commit"}, {"oid": "cd5f2bd41019668e18faa8e8a1a037f46ba3c917", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd5f2bd41019668e18faa8e8a1a037f46ba3c917", "message": "Added version checking for new blob and file APIs", "committedDate": "2020-01-09T18:31:54Z", "type": "forcePushed"}, {"oid": "6473890cdc7b6c17c85d4d3c148eea080f395f82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6473890cdc7b6c17c85d4d3c148eea080f395f82", "message": "Addressed PR comments", "committedDate": "2020-01-09T18:43:40Z", "type": "commit"}, {"oid": "bd2e7baf2952bbef1af65f652cf9b00125da08cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd2e7baf2952bbef1af65f652cf9b00125da08cd", "message": "Added missing license header", "committedDate": "2020-01-09T18:45:22Z", "type": "commit"}, {"oid": "b7ed9471da0da02d83417b69201f264e920c0da7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7ed9471da0da02d83417b69201f264e920c0da7", "message": "MOved policies and addressed analyze step issues", "committedDate": "2020-01-09T19:24:28Z", "type": "commit"}, {"oid": "b7ed9471da0da02d83417b69201f264e920c0da7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7ed9471da0da02d83417b69201f264e920c0da7", "message": "MOved policies and addressed analyze step issues", "committedDate": "2020-01-09T19:24:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1MjY2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r366052660", "bodyText": "I think testing against the literal value of the message is brittle; checking that an IllegalArgumentException is thrown is probably sufficient.\nAlso, perhaps IllegalStateException is more appropriate? I think of IlegalArgumentExceptions as resulting from parameter validation on method call time.", "author": "rickle-msft", "createdAt": "2020-01-13T22:02:45Z", "path": "sdk/storage/azure-storage-blob/src/test/java/com/azure/storage/blob/BlobServiceVersionPolicyTest.groovy", "diffHunk": "@@ -0,0 +1,121 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob\n+\n+import com.azure.core.http.policy.HttpLogDetailLevel\n+import com.azure.core.http.policy.HttpLogOptions\n+import com.azure.core.test.TestMode\n+import com.azure.storage.blob.models.BlobContainerEncryptionScope\n+import com.azure.storage.blob.models.BlobRange\n+import com.azure.storage.blob.models.EncryptionScope\n+import com.azure.storage.blob.specialized.PageBlobClient\n+\n+class BlobServiceVersionPolicyTest extends APISpec {\n+\n+    BlobClient bc\n+    BlobContainerClient cc\n+    EncryptionScope es\n+    BlobContainerEncryptionScope ces\n+\n+    BlobContainerClientBuilder containerBuilder\n+\n+    def setup() {\n+        es = new EncryptionScope().setEncryptionScope(\"testscope1\")\n+\n+        containerBuilder = new BlobContainerClientBuilder()\n+            .endpoint(cc.getBlobContainerUrl().toString())\n+            .serviceVersion(BlobServiceVersion.V2019_02_02)\n+            .httpClient(getHttpClient())\n+            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+            .credential(primaryCredential)\n+\n+        if (testMode == TestMode.RECORD) {\n+            containerBuilder.addPolicy(interceptorManager.getRecordPolicy())\n+        }\n+    }\n+\n+    def \"Default encryption scope\"() {\n+        when:\n+        ces = new BlobContainerEncryptionScope()\n+            .setDefaultEncryptionScope(\"testscope2\")\n+            .setDenyEncryptionScopeOverride(true)\n+        BlobContainerClient cpkncesContainer = containerBuilder.blobContainerEncryptionScope(ces).encryptionScope(null)\n+            .containerName(generateContainerName()).buildClient()\n+        cpkncesContainer.createWithResponse(null, null, null, null)\n+\n+        then:\n+        def e = thrown(IllegalArgumentException)\n+        e.getMessage() == \"x-ms-default-encryption-scope is not supported for create container in service version 2019-02-02\"\n+    }\n+\n+    def \"Deny encryption scope override\"() {\n+        setup:\n+        ces = new BlobContainerEncryptionScope()\n+            .setDefaultEncryptionScope(null)\n+            .setDenyEncryptionScopeOverride(true)\n+        BlobContainerClient cpkncesContainer = containerBuilder.blobContainerEncryptionScope(ces)\n+            .containerName(generateContainerName()).buildClient()\n+\n+        when:\n+        cpkncesContainer.createWithResponse(null, null, null, null)\n+\n+        then:\n+        def e = thrown(IllegalArgumentException)\n+        e.getMessage() == \"x-ms-deny-encryption-scope-override is not supported for create container in service version 2019-02-02\"", "originalCommit": "b7ed9471da0da02d83417b69201f264e920c0da7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1NDYzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r366054632", "bodyText": "I'll change it to IllegalStateException. That makes sense.", "author": "gapra-msft", "createdAt": "2020-01-13T22:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1MjY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1NDg2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7312#discussion_r366054865", "bodyText": "Though I think it might be best to keep the messages for now - in case we need to change the test later we can. I dont want the wrong message to be called either.", "author": "gapra-msft", "createdAt": "2020-01-13T22:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1MjY2MA=="}], "type": "inlineReview"}, {"oid": "40d9d8595107130e1c79aaf461e860a2fb49c840", "url": "https://github.com/Azure/azure-sdk-for-java/commit/40d9d8595107130e1c79aaf461e860a2fb49c840", "message": "Changed IllegalArgumentException to IllegalStateException", "committedDate": "2020-01-14T17:19:47Z", "type": "commit"}]}