{"pr_number": 10687, "pr_title": "Adds support for multi-session receiving and unnamed session.", "pr_createdAt": "2020-05-04T16:10:26Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10687", "timeline": [{"oid": "1850d363bab4cbac14251321ff7b549235b63c57", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1850d363bab4cbac14251321ff7b549235b63c57", "message": "Splitting management node into multiple interfaces. Adding session operations.", "committedDate": "2020-05-04T16:14:07Z", "type": "commit"}, {"oid": "05c0d033dc207dc9854a72a8af2e721336b3d26d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/05c0d033dc207dc9854a72a8af2e721336b3d26d", "message": "Add tests and simplify conditions.", "committedDate": "2020-05-04T16:14:07Z", "type": "commit"}, {"oid": "ec9fb4dfc4704890e5129bfdbb2c18edd66e7999", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec9fb4dfc4704890e5129bfdbb2c18edd66e7999", "message": "Adding initial classes.", "committedDate": "2020-05-04T16:14:07Z", "type": "commit"}, {"oid": "d8913970ccfa42b092632e3b94d0a8597af4ea47", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8913970ccfa42b092632e3b94d0a8597af4ea47", "message": "Reorganize methods.", "committedDate": "2020-05-04T16:14:07Z", "type": "commit"}, {"oid": "6a4072c2dd285f094451e47d6b63c248f2e4eba6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a4072c2dd285f094451e47d6b63c248f2e4eba6", "message": "Return ServiceBusReceivedMessageContext in methods.", "committedDate": "2020-05-04T16:14:08Z", "type": "commit"}, {"oid": "4f2a8d0433f59ea7a7bea241f0212c42d3f3fc3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f2a8d0433f59ea7a7bea241f0212c42d3f3fc3c", "message": "Removing Error context and fixing build breaks.", "committedDate": "2020-05-04T16:14:08Z", "type": "commit"}, {"oid": "e2069a882957a71dd076de6cce18f6fafa5d8ac0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2069a882957a71dd076de6cce18f6fafa5d8ac0", "message": "Adding session receive sample.", "committedDate": "2020-05-04T16:14:08Z", "type": "commit"}, {"oid": "82b66cfc875ffb4ca1a952ce41acff1e7738685d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/82b66cfc875ffb4ca1a952ce41acff1e7738685d", "message": "Remove ByteBuffer.", "committedDate": "2020-05-04T16:14:08Z", "type": "commit"}, {"oid": "b2ede796fb4ef69494d09af3148115cd32675137", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2ede796fb4ef69494d09af3148115cd32675137", "message": "Adding SessionManager and SessionReceiver.", "committedDate": "2020-05-04T16:14:08Z", "type": "commit"}, {"oid": "a459bf37d6815856697a73972ad6b5d7a67815bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a459bf37d6815856697a73972ad6b5d7a67815bf", "message": "Fix build break.", "committedDate": "2020-05-04T16:14:08Z", "type": "commit"}, {"oid": "6d2a1b16028d9758e3059027754e9588ee38b3ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d2a1b16028d9758e3059027754e9588ee38b3ba", "message": "Fix test failure.", "committedDate": "2020-05-04T16:14:08Z", "type": "commit"}, {"oid": "fb45e45eabc597769ac786e0cc45b00f70669419", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb45e45eabc597769ac786e0cc45b00f70669419", "message": "Adding initial build class for sessioned receiver.", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "ba95e68e5b415fdc5eb25ce6f3b3a4809b1c781c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba95e68e5b415fdc5eb25ce6f3b3a4809b1c781c", "message": "Adding initial skeleton for multi-session", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "6b780b33d41c073712d4172180b71be205668358", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b780b33d41c073712d4172180b71be205668358", "message": "Update ServiceBusReceiveLink to be returned from ServiceBusSession. Add updateDisposition on interface.", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "fd982b23cb8c7aeafc75f476aa309fcf9bc82d27", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd982b23cb8c7aeafc75f476aa309fcf9bc82d27", "message": "Move disposition status to Delivery State logic into Utils.", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "183663f6b587eba2f79476d6df2a13f6227da7f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/183663f6b587eba2f79476d6df2a13f6227da7f4", "message": "Change from UUID to String in ServiceBusManagementNode.", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "e16eeef861a1ec0aca941779b80a42efeda0eebc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e16eeef861a1ec0aca941779b80a42efeda0eebc", "message": "Pass in sessionId.", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "1f5cc1215ed87bdd6670019e08e7c273a4460a03", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1f5cc1215ed87bdd6670019e08e7c273a4460a03", "message": "Add interface for message management operations on the receive link.", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "725379880b0bf4b4cf999d5162efb3653e7aaa59", "url": "https://github.com/Azure/azure-sdk-for-java/commit/725379880b0bf4b4cf999d5162efb3653e7aaa59", "message": "Rename variable to linkProcessor.", "committedDate": "2020-05-04T16:14:09Z", "type": "commit"}, {"oid": "8d26026c798e3275baeed314206e1e401fead1e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d26026c798e3275baeed314206e1e401fead1e3", "message": "Moving SessionReceiver and updating SessionManager", "committedDate": "2020-05-04T16:14:10Z", "type": "commit"}, {"oid": "cd3989d237c754b8a83cc918ed98998db389e35b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd3989d237c754b8a83cc918ed98998db389e35b", "message": "Move ServiceBusAsyncConsumer into package-private class.", "committedDate": "2020-05-04T16:14:10Z", "type": "commit"}, {"oid": "28eef68bfb3a213ac50a71e5e2f7365eeff33896", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28eef68bfb3a213ac50a71e5e2f7365eeff33896", "message": "Renamed to UnnamedSessionManager and UnnamedSessionReceiver.", "committedDate": "2020-05-04T16:14:10Z", "type": "commit"}, {"oid": "91fac644f8bb1d7385639d1153f6f869a09285b5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/91fac644f8bb1d7385639d1153f6f869a09285b5", "message": "Fixing text breaks from using ServiceBusReceiveLink", "committedDate": "2020-05-04T16:14:10Z", "type": "commit"}, {"oid": "2b55e8420b85530e5bd3e3762a2a5eb28d94d13e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b55e8420b85530e5bd3e3762a2a5eb28d94d13e", "message": "Fixing checkstyles.", "committedDate": "2020-05-04T16:14:10Z", "type": "commit"}, {"oid": "f902343bfd75dca30091265fe120ca14879703be", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f902343bfd75dca30091265fe120ca14879703be", "message": "Fixing receive options and session creation.", "committedDate": "2020-05-04T16:14:10Z", "type": "commit"}, {"oid": "bee8ac921d0492b39fea386577162ed25ad097bb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bee8ac921d0492b39fea386577162ed25ad097bb", "message": "Fixing work item clean up.", "committedDate": "2020-05-04T16:14:10Z", "type": "commit"}, {"oid": "d8454ee9a517e07881e845efa317b7b5f506d61f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8454ee9a517e07881e845efa317b7b5f506d61f", "message": "Fix samples.", "committedDate": "2020-05-04T16:14:11Z", "type": "commit"}, {"oid": "89a4a67ad384e96a28d660f11f9c1427f2098a5c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/89a4a67ad384e96a28d660f11f9c1427f2098a5c", "message": "Consolidate integration test logic.", "committedDate": "2020-05-04T16:14:11Z", "type": "commit"}, {"oid": "2b1ae26a4e99257b3041d83649957b9f71222468", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b1ae26a4e99257b3041d83649957b9f71222468", "message": "Adding renewal time for session locks.", "committedDate": "2020-05-04T16:14:11Z", "type": "commit"}, {"oid": "b3767d031b4281a5d33dc49e54d1ac8d9e459dbc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3767d031b4281a5d33dc49e54d1ac8d9e459dbc", "message": "Updating session ids.", "committedDate": "2020-05-04T16:14:11Z", "type": "commit"}, {"oid": "1a90b3aaec23a7fdd01ed80414ad82d363654808", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a90b3aaec23a7fdd01ed80414ad82d363654808", "message": "Updating potential NoSuchElementException.", "committedDate": "2020-05-04T16:14:11Z", "type": "commit"}, {"oid": "273523344df67b14d5afcf284f33a0be30602a83", "url": "https://github.com/Azure/azure-sdk-for-java/commit/273523344df67b14d5afcf284f33a0be30602a83", "message": "Integrate unnamed session manager.", "committedDate": "2020-05-04T16:14:11Z", "type": "commit"}, {"oid": "7424fc153ccb2467c723b55b465a9c32cbd70f34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7424fc153ccb2467c723b55b465a9c32cbd70f34", "message": "Fixing bug where receive flux would keep going for single unnamed session.", "committedDate": "2020-05-04T16:14:11Z", "type": "commit"}, {"oid": "7424fc153ccb2467c723b55b465a9c32cbd70f34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7424fc153ccb2467c723b55b465a9c32cbd70f34", "message": "Fixing bug where receive flux would keep going for single unnamed session.", "committedDate": "2020-05-04T16:14:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMTU4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10687#discussion_r419701586", "bodyText": "The use case: where user want to receive message from one and only one unnamed session and No rollover, this should  return false here if  sessionId ==  null  and  empty sessionId should be error, I think.", "author": "hemanttanwar", "createdAt": "2020-05-04T20:17:08Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -570,20 +631,168 @@ public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName)\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          * @see #subscriptionName A subscription name should be set as well.\n          */\n-        public ServiceBusReceiverClientBuilder topicName(String topicName) {\n+        public ServiceBusSessionReceiverClientBuilder topicName(String topicName) {\n             this.topicName = topicName;\n             return this;\n         }\n \n         /**\n-         * Sets the session id.\n+         * Creates an <b>asynchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading {@link\n+         * ServiceBusMessage messages} from a specific queue or topic.\n          *\n-         * @param sessionId session id.\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+\n+            if (prefetchCount < 1) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n+            }\n+\n+            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n+            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount, sessionId,\n+                isRollingSessionReceiver(), maxConcurrentSessions);\n+\n+            if (isNullOrEmpty(sessionId)) {\n+                final UnnamedSessionManager manager = new UnnamedSessionManager(entityPath, entityType,\n+                    connectionProcessor, retryOptions.getTryTimeout(), tracerProvider, messageSerializer,\n+                    receiverOptions);\n+\n+                return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                    entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                    tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose, manager);\n+            } else {\n+                return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                    entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                    tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n+            }\n+        }\n+\n+        /**\n+         * Creates a <b>synchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading {@link\n+         * ServiceBusMessage messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverClient buildClient() {\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+        }\n+\n+        /**\n+         * This is a rolling session receiver only if maxConcurrentSessions is > 0 AND sessionId is null or empty. If\n+         * there is a sessionId, this is going to be a single, named session receiver.\n+         *\n+         * @return {@code true} if this is an unnamed rolling session receiver; {@code false} otherwise.\n+         */\n+        private boolean isRollingSessionReceiver() {\n+            if (maxConcurrentSessions == null) {\n+                return false;\n+            }\n+\n+            if (maxConcurrentSessions < 1) {\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Maximum number of concurrent sessions must be positive.\"));\n+            }\n+\n+            return CoreUtils.isNullOrEmpty(sessionId);", "originalCommit": "7424fc153ccb2467c723b55b465a9c32cbd70f34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMTY0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10687#discussion_r419711642", "bodyText": "In that case, and from Srikanta's gist, they won't get rollover because they didn't set maxConcurrentSessions. That check is done a few lines up.", "author": "conniey", "createdAt": "2020-05-04T20:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMjA3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10687#discussion_r419712079", "bodyText": "https://gist.github.com/hemanttanwar/f7facad764b087dcf05eb4350ce85ea6", "author": "conniey", "createdAt": "2020-05-04T20:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMzYwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10687#discussion_r419703608", "bodyText": "Lot of user do not read till end of java doc. Can we say in first line that  default value is 1. Something like this Sets the prefetch count of the receiver otherwise defaults to 1.", "author": "hemanttanwar", "createdAt": "2020-05-04T20:20:51Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -570,20 +631,168 @@ public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName)\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          * @see #subscriptionName A subscription name should be set as well.\n          */\n-        public ServiceBusReceiverClientBuilder topicName(String topicName) {\n+        public ServiceBusSessionReceiverClientBuilder topicName(String topicName) {\n             this.topicName = topicName;\n             return this;\n         }\n \n         /**\n-         * Sets the session id.\n+         * Creates an <b>asynchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading {@link\n+         * ServiceBusMessage messages} from a specific queue or topic.\n          *\n-         * @param sessionId session id.\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+\n+            if (prefetchCount < 1) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n+            }\n+\n+            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n+            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount, sessionId,\n+                isRollingSessionReceiver(), maxConcurrentSessions);\n+\n+            if (isNullOrEmpty(sessionId)) {\n+                final UnnamedSessionManager manager = new UnnamedSessionManager(entityPath, entityType,\n+                    connectionProcessor, retryOptions.getTryTimeout(), tracerProvider, messageSerializer,\n+                    receiverOptions);\n+\n+                return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                    entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                    tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose, manager);\n+            } else {\n+                return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                    entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                    tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n+            }\n+        }\n+\n+        /**\n+         * Creates a <b>synchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading {@link\n+         * ServiceBusMessage messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverClient buildClient() {\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+        }\n+\n+        /**\n+         * This is a rolling session receiver only if maxConcurrentSessions is > 0 AND sessionId is null or empty. If\n+         * there is a sessionId, this is going to be a single, named session receiver.\n+         *\n+         * @return {@code true} if this is an unnamed rolling session receiver; {@code false} otherwise.\n+         */\n+        private boolean isRollingSessionReceiver() {\n+            if (maxConcurrentSessions == null) {\n+                return false;\n+            }\n+\n+            if (maxConcurrentSessions < 1) {\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Maximum number of concurrent sessions must be positive.\"));\n+            }\n+\n+            return CoreUtils.isNullOrEmpty(sessionId);\n+        }\n+    }\n+\n+    /**\n+     * Builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to consume\n+     * messages from Service Bus.\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+\n+        private ServiceBusReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message", "originalCommit": "7424fc153ccb2467c723b55b465a9c32cbd70f34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNjEwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10687#discussion_r419706102", "bodyText": "We have seen in user study that , they forget to add subscriptionName , can we say in first line to be more in visible Sets the name of the topic. You must also set subscriptionName.", "author": "hemanttanwar", "createdAt": "2020-05-04T20:25:19Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -570,20 +631,168 @@ public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName)\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          * @see #subscriptionName A subscription name should be set as well.\n          */\n-        public ServiceBusReceiverClientBuilder topicName(String topicName) {\n+        public ServiceBusSessionReceiverClientBuilder topicName(String topicName) {\n             this.topicName = topicName;\n             return this;\n         }\n \n         /**\n-         * Sets the session id.\n+         * Creates an <b>asynchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading {@link\n+         * ServiceBusMessage messages} from a specific queue or topic.\n          *\n-         * @param sessionId session id.\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+\n+            if (prefetchCount < 1) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n+            }\n+\n+            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n+            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount, sessionId,\n+                isRollingSessionReceiver(), maxConcurrentSessions);\n+\n+            if (isNullOrEmpty(sessionId)) {\n+                final UnnamedSessionManager manager = new UnnamedSessionManager(entityPath, entityType,\n+                    connectionProcessor, retryOptions.getTryTimeout(), tracerProvider, messageSerializer,\n+                    receiverOptions);\n+\n+                return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                    entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                    tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose, manager);\n+            } else {\n+                return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n+                    entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n+                    tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n+            }\n+        }\n+\n+        /**\n+         * Creates a <b>synchronous</b>, <b>session-aware</b> Service Bus receiver responsible for reading {@link\n+         * ServiceBusMessage messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverClient buildClient() {\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+        }\n+\n+        /**\n+         * This is a rolling session receiver only if maxConcurrentSessions is > 0 AND sessionId is null or empty. If\n+         * there is a sessionId, this is going to be a single, named session receiver.\n+         *\n+         * @return {@code true} if this is an unnamed rolling session receiver; {@code false} otherwise.\n+         */\n+        private boolean isRollingSessionReceiver() {\n+            if (maxConcurrentSessions == null) {\n+                return false;\n+            }\n+\n+            if (maxConcurrentSessions < 1) {\n+                throw logger.logExceptionAsError(\n+                    new IllegalArgumentException(\"Maximum number of concurrent sessions must be positive.\"));\n+            }\n+\n+            return CoreUtils.isNullOrEmpty(sessionId);\n+        }\n+    }\n+\n+    /**\n+     * Builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to consume\n+     * messages from Service Bus.\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+\n+        private ServiceBusReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. Prefetch speeds up the message flow by aiming to have a message\n+         * readily available for local retrieval when and before the application asks for one using {@link\n+         * ServiceBusReceiverAsyncClient#receive()}. Setting a non-zero value will prefetch that number of messages.\n+         * Setting the value to zero turns prefetch off. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * @param prefetchCount The prefetch count.\n          *\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          */\n-        public ServiceBusReceiverClientBuilder sessionId(String sessionId) {\n-            this.sessionId = sessionId;\n+        public ServiceBusReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         */\n+        public ServiceBusReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         */\n+        public ServiceBusReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to.\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic.\n+         *\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.\n+         */\n+        public ServiceBusReceiverClientBuilder topicName(String topicName) {", "originalCommit": "7424fc153ccb2467c723b55b465a9c32cbd70f34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNzc1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10687#discussion_r419727757", "bodyText": "minor documentation: Indicting Valid value is 1 or above.", "author": "hemanttanwar", "createdAt": "2020-05-04T21:05:01Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -490,23 +530,32 @@ public ServiceBusSenderClient buildClient() {\n \n     /**\n      * Builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to consume\n-     * messages from Service Bus.\n+     * messages from a session aware Service Bus entity.\n      */\n     @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n-    public final class ServiceBusReceiverClientBuilder {\n-        // Using 0 pre-fetch count for both receive modes, to avoid message lock lost exceptions in application\n-        // receiving messages at a slow rate. Applications can set it to a higher value if they need better performance.\n-        private static final int DEFAULT_PREFETCH_COUNT = 1;\n-        private static final String SUBSCRIPTION_ENTITY_PATH_FORMAT = \"%s/subscriptions/%s\";\n+    public final class ServiceBusSessionReceiverClientBuilder {\n \n+        private Integer maxConcurrentSessions = null;\n         private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n         private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String sessionId;\n         private String subscriptionName;\n         private String topicName;\n-        private String sessionId;\n-        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n \n-        private ServiceBusReceiverClientBuilder() {\n+        private ServiceBusSessionReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables session processing roll-over by processing at most {@code maxConcurrentSessions}.\n+         *", "originalCommit": "7424fc153ccb2467c723b55b465a9c32cbd70f34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyODk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10687#discussion_r419728974", "bodyText": "documentation: Setting this will get messages from this sessionId only and will not roll-over to next available session.", "author": "hemanttanwar", "createdAt": "2020-05-04T21:07:09Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -544,11 +593,23 @@ public ServiceBusReceiverClientBuilder queueName(String queueName) {\n          *\n          * @return The modified {@link ServiceBusReceiverClientBuilder} object.\n          */\n-        public ServiceBusReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+        public ServiceBusSessionReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n             this.receiveMode = receiveMode;\n             return this;\n         }\n \n+        /**\n+         * Sets the session id.\n+         *", "originalCommit": "7424fc153ccb2467c723b55b465a9c32cbd70f34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b96ac1f194a5fab439a54f1a1e237881cb94b7cb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b96ac1f194a5fab439a54f1a1e237881cb94b7cb", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into multi-session-receiver", "committedDate": "2020-05-04T23:55:10Z", "type": "commit"}, {"oid": "6773d670ca478fa2d4a90c3c550ee1a9fd79f33b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6773d670ca478fa2d4a90c3c550ee1a9fd79f33b", "message": "Fixing sample build break.", "committedDate": "2020-05-05T07:07:31Z", "type": "commit"}, {"oid": "e4239f90a7dc088bb3a993798b04416d33a5d2d7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4239f90a7dc088bb3a993798b04416d33a5d2d7", "message": "Fixing duplicated updateDisposition methods.", "committedDate": "2020-05-05T07:08:26Z", "type": "commit"}, {"oid": "26849306bbc43dad27427b442c2d3b6de7fe552f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/26849306bbc43dad27427b442c2d3b6de7fe552f", "message": "Adding test for single unnamed session receive.", "committedDate": "2020-05-05T07:08:46Z", "type": "commit"}, {"oid": "7e2a4a0c295cfce5b4344ad65b886ff4fa98279a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e2a4a0c295cfce5b4344ad65b886ff4fa98279a", "message": "Updating test to clean up.", "committedDate": "2020-05-05T13:20:41Z", "type": "commit"}, {"oid": "1da16036b446868d47fb58583402ea51d31dc9e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1da16036b446868d47fb58583402ea51d31dc9e6", "message": "Fixing receive issue where sessions were not used.", "committedDate": "2020-05-05T15:21:42Z", "type": "commit"}, {"oid": "6ec564654678580b9c3d636a321801693d50fa90", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ec564654678580b9c3d636a321801693d50fa90", "message": "Disabling max session lock renewal", "committedDate": "2020-05-05T16:06:02Z", "type": "commit"}, {"oid": "b46b8f395f9278f238587dce1a4332e70ff12b32", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b46b8f395f9278f238587dce1a4332e70ff12b32", "message": "Update test default timeouts.", "committedDate": "2020-05-05T16:06:12Z", "type": "commit"}, {"oid": "f13ed6eeb359f573730f50042e57356ee739cdac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f13ed6eeb359f573730f50042e57356ee739cdac", "message": "Fix receiving link names with associations.", "committedDate": "2020-05-05T18:14:21Z", "type": "commit"}, {"oid": "93e2ea6aec9539d86eb3a26285e263c07fc651d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/93e2ea6aec9539d86eb3a26285e263c07fc651d2", "message": "Fixing timeout exception.", "committedDate": "2020-05-05T19:55:50Z", "type": "commit"}, {"oid": "0dd1ce7a7ab0b824d5b8354fa37b3d809a376f2b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dd1ce7a7ab0b824d5b8354fa37b3d809a376f2b", "message": "Changing logs to verbose.", "committedDate": "2020-05-05T19:59:09Z", "type": "commit"}, {"oid": "d60ebb97b346a964db223c3b482ef5839b7e3de0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d60ebb97b346a964db223c3b482ef5839b7e3de0", "message": "Fixing test failures.", "committedDate": "2020-05-05T20:14:28Z", "type": "commit"}, {"oid": "27922f72ac0c8d73287fbc3a78355d47340a5a5a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/27922f72ac0c8d73287fbc3a78355d47340a5a5a", "message": "Fix test failures.", "committedDate": "2020-05-05T20:32:06Z", "type": "commit"}]}