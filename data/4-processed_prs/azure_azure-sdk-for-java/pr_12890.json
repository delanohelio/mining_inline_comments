{"pr_number": 12890, "pr_title": "Performance Improvements for Azure Core", "pr_createdAt": "2020-07-08T00:41:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12890", "timeline": [{"oid": "b81c41ef0ac90958607361704afbba57a5c5b2d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b81c41ef0ac90958607361704afbba57a5c5b2d3", "message": "Miscellaneous small perf investigations in azure-core in draft form.", "committedDate": "2020-07-07T20:51:57Z", "type": "commit"}, {"oid": "8d27a30b9e63e19582816caa8121549c513d7618", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d27a30b9e63e19582816caa8121549c513d7618", "message": "Fix HttpResponseBodyDecoder unit tests", "committedDate": "2020-07-08T00:30:36Z", "type": "commit"}, {"oid": "0c0fd5f5c214361436a3e1bb67e4d5977b17f4fc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c0fd5f5c214361436a3e1bb67e4d5977b17f4fc", "message": "Revert error checking logic", "committedDate": "2020-07-08T03:26:14Z", "type": "commit"}, {"oid": "bf60f1e36ef6160a95f8b83e9325d7dbc2e3d34d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf60f1e36ef6160a95f8b83e9325d7dbc2e3d34d", "message": "Fix some checkstyle issues and a test failure.", "committedDate": "2020-07-08T04:06:47Z", "type": "commit"}, {"oid": "d8af1f8852767bc5fbb9cb0108fc161acdb67735", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8af1f8852767bc5fbb9cb0108fc161acdb67735", "message": "Compile two frequently parsed regex's into a Pattern to save CPU time", "committedDate": "2020-07-09T02:12:37Z", "type": "commit"}, {"oid": "baa48ab05ddf4ea9731921d8c397e146be11885a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/baa48ab05ddf4ea9731921d8c397e146be11885a", "message": "Hack in some code that tries to minimise the amount of times we serialize / deserialize to / from String, instead trying to use byte[] for input and ByteArrayOutputStream for output.", "committedDate": "2020-07-09T03:24:32Z", "type": "commit"}, {"oid": "547c0042e4a1b73b33ddca077292156ce2dfdc6c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/547c0042e4a1b73b33ddca077292156ce2dfdc6c", "message": "Fix afterburner versioning", "committedDate": "2020-07-09T03:35:50Z", "type": "commit"}, {"oid": "b8e116a6272a1e91b9c41ecf68eb3b16d7e38e55", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b8e116a6272a1e91b9c41ecf68eb3b16d7e38e55", "message": "Convert object to byte array", "committedDate": "2020-07-09T03:49:24Z", "type": "commit"}, {"oid": "c8dd768967bf4d7ce6a69d78ffbf8aef2d2a184a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8dd768967bf4d7ce6a69d78ffbf8aef2d2a184a", "message": "Remove duplicate serializer methods", "committedDate": "2020-07-09T03:54:05Z", "type": "commit"}, {"oid": "184522452033a8fab48ef90748ad90032e5ffee4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/184522452033a8fab48ef90748ad90032e5ffee4", "message": "Update references to old method", "committedDate": "2020-07-09T03:55:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjMyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452416327", "bodyText": "This method appears to only be used in tests and in one case where we check if a status code is valid. Thoughts on removing this method since it is non-public API and making callers of this use the boolean isExpectedResponseStatusCode(int statusCode) method? This will be more performant as we can completely remove the int[] cloning.", "author": "alzimmermsft", "createdAt": "2020-07-09T18:39:49Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/SwaggerMethodParser.java", "diffHunk": "@@ -223,7 +234,8 @@ public HttpMethod getHttpMethod() {\n      */\n     @Override\n     public int[] getExpectedStatusCodes() {\n-        return CoreUtils.clone(expectedStatusCodes);\n+//        return expectedStatusCodes;\n+        return expectedStatusCodes == null ? null : expectedStatusCodes.stream().toArray();", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjYzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452416635", "bodyText": "The only caller to this is HttpResponseBodyDecoder.isErrorStatus", "author": "alzimmermsft", "createdAt": "2020-07-09T18:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2NjI1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453366255", "bodyText": "This is unfortunately public API, otherwise I would have done what you suggested. I rearranged the code internally so that the only things calling this code is test code, which is why I pay the price for int[] cloning here, rather than in the constructor.", "author": "JonathanGiles", "createdAt": "2020-07-12T21:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2NjYwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453366601", "bodyText": "My mistake - SwaggerMethodParser is itself a non-public class. I will revise the code.", "author": "JonathanGiles", "createdAt": "2020-07-12T21:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMTM3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452421375", "bodyText": "This interface is in implementation, so we should be able to remove it completely.", "author": "alzimmermsft", "createdAt": "2020-07-09T18:49:25Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseDecodeData.java", "diffHunk": "@@ -59,11 +59,24 @@ default Type getHeadersType() {\n      * 2. If the returned int[] is not-null, only the codes in the array are considered as success code.\n      *\n      * @return the expected HTTP response status codes\n+     * @deprecated Use {@link #isExpectedResponseStatusCode(int)} instead.\n      */\n+    @Deprecated // This is only used in tests now - all uses should go via isExpectedResponseStatusCode instead", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2NzAwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453367008", "bodyText": "Done", "author": "JonathanGiles", "createdAt": "2020-07-12T21:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMTM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMTk3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452421972", "bodyText": "In implementation so I don't think we need a default. If we want to keep a default we should check is the status code is in the 200 range.\nreturn (statusCode / 100) == 2;", "author": "alzimmermsft", "createdAt": "2020-07-09T18:50:30Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/serializer/HttpResponseDecodeData.java", "diffHunk": "@@ -59,11 +59,24 @@ default Type getHeadersType() {\n      * 2. If the returned int[] is not-null, only the codes in the array are considered as success code.\n      *\n      * @return the expected HTTP response status codes\n+     * @deprecated Use {@link #isExpectedResponseStatusCode(int)} instead.\n      */\n+    @Deprecated // This is only used in tests now - all uses should go via isExpectedResponseStatusCode instead\n     default int[] getExpectedStatusCodes() {\n         return null;\n     }\n \n+    /**\n+     * This method returns {@code true} if the given {@code statusCode} is in the list of expected HTTP resposne\n+     * codes returned by {@link #getExpectedStatusCodes()}, {@code false} otherwise.\n+     *\n+     * @param statusCode The HTTP response status code to evaluate.\n+     * @return {@code true} if the given status code is expected.\n+     */\n+    default boolean isExpectedResponseStatusCode(int statusCode) {", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2NzE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453367169", "bodyText": "I agree - I thought this was public API so I added it, but I have now removed it again.", "author": "JonathanGiles", "createdAt": "2020-07-12T21:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMTk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMzY1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452423650", "bodyText": "Could this call createParameterizedType?", "author": "alzimmermsft", "createdAt": "2020-07-09T18:53:27Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/TypeUtil.java", "diffHunk": "@@ -75,46 +79,52 @@ public static Type getTypeArgument(Type type) {\n      * @param type the input type\n      * @return the direct super type\n      */\n-    public static Type getSuperType(Type type) {\n-        if (type instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType) type;\n-            Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n-            if (genericSuperClass instanceof ParameterizedType) {\n-                /*\n-                 * Find erased generic types for the super class and replace\n-                 * with actual type arguments from the parameterized type\n-                 */\n-                Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n-                List<Type> typeParameters =\n-                    Arrays.asList(((Class<?>) parameterizedType.getRawType()).getTypeParameters());\n-                int j = 0;\n-                for (int i = 0; i != superTypeArguments.length; i++) {\n-                    if (typeParameters.contains(superTypeArguments[i])) {\n-                        superTypeArguments[i] = parameterizedType.getActualTypeArguments()[j++];\n+    public static Type getSuperType(final Type type) {\n+        return SUPER_TYPE_MAP.computeIfAbsent(type, _type -> {\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) type;\n+                Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n+                if (genericSuperClass instanceof ParameterizedType) {\n+                    /*\n+                     * Find erased generic types for the super class and replace\n+                     * with actual type arguments from the parameterized type\n+                     */\n+                    final Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n+                    final Type[] typeParameters =\n+                        ((GenericDeclaration) parameterizedType.getRawType()).getTypeParameters();\n+                    int k = 0;\n+                    outer:\n+                    for (int i = 0; i != superTypeArguments.length; i++) {\n+                        for (int j = 0; i < typeParameters.length; j++) {\n+                            if (typeParameters[j].equals(superTypeArguments[i])) {\n+                                superTypeArguments[i] = parameterizedType.getActualTypeArguments()[k++];\n+                                break outer;\n+                            }\n+                        }\n                     }\n+                    return new ParameterizedType() {\n+                        @Override\n+                        public Type[] getActualTypeArguments() {\n+                            return superTypeArguments;\n+                        }\n+\n+                        @Override\n+                        public Type getRawType() {\n+                            return ((ParameterizedType) genericSuperClass).getRawType();\n+                        }\n+\n+                        @Override\n+                        public Type getOwnerType() {\n+                            return null;\n+                        }\n+                    };", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2ODc3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453368778", "bodyText": "Yep, done", "author": "JonathanGiles", "createdAt": "2020-07-12T22:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMzY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNDI0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452424243", "bodyText": "Mind adding more Javadocs to this, having break labels isn't very common.", "author": "alzimmermsft", "createdAt": "2020-07-09T18:54:34Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/TypeUtil.java", "diffHunk": "@@ -75,46 +79,52 @@ public static Type getTypeArgument(Type type) {\n      * @param type the input type\n      * @return the direct super type\n      */\n-    public static Type getSuperType(Type type) {\n-        if (type instanceof ParameterizedType) {\n-            ParameterizedType parameterizedType = (ParameterizedType) type;\n-            Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n-            if (genericSuperClass instanceof ParameterizedType) {\n-                /*\n-                 * Find erased generic types for the super class and replace\n-                 * with actual type arguments from the parameterized type\n-                 */\n-                Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n-                List<Type> typeParameters =\n-                    Arrays.asList(((Class<?>) parameterizedType.getRawType()).getTypeParameters());\n-                int j = 0;\n-                for (int i = 0; i != superTypeArguments.length; i++) {\n-                    if (typeParameters.contains(superTypeArguments[i])) {\n-                        superTypeArguments[i] = parameterizedType.getActualTypeArguments()[j++];\n+    public static Type getSuperType(final Type type) {\n+        return SUPER_TYPE_MAP.computeIfAbsent(type, _type -> {\n+            if (type instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) type;\n+                Type genericSuperClass = ((Class<?>) parameterizedType.getRawType()).getGenericSuperclass();\n+                if (genericSuperClass instanceof ParameterizedType) {\n+                    /*\n+                     * Find erased generic types for the super class and replace\n+                     * with actual type arguments from the parameterized type\n+                     */\n+                    final Type[] superTypeArguments = getTypeArguments(genericSuperClass);\n+                    final Type[] typeParameters =\n+                        ((GenericDeclaration) parameterizedType.getRawType()).getTypeParameters();\n+                    int k = 0;\n+                    outer:\n+                    for (int i = 0; i != superTypeArguments.length; i++) {\n+                        for (int j = 0; i < typeParameters.length; j++) {\n+                            if (typeParameters[j].equals(superTypeArguments[i])) {\n+                                superTypeArguments[i] = parameterizedType.getActualTypeArguments()[k++];\n+                                break outer;\n+                            }\n+                        }", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNDY4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452424682", "bodyText": "We want to use WeakHashMap to evict from the cache once the Type key becomes null/garbage collected right?", "author": "alzimmermsft", "createdAt": "2020-07-09T18:55:19Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/TypeUtil.java", "diffHunk": "@@ -3,16 +3,20 @@\n \n package com.azure.core.implementation;\n \n+import java.lang.reflect.GenericDeclaration;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n \n /**\n  * Utility type exposing methods to deal with {@link Type}.\n  */\n public final class TypeUtil {\n+    private static final Map<Type, Type> SUPER_TYPE_MAP = new WeakHashMap<>();", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2OTEwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453369108", "bodyText": "I've changed it to be a HashMap.", "author": "JonathanGiles", "createdAt": "2020-07-12T22:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNDY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNTAxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452425017", "bodyText": "Was this unused?", "author": "alzimmermsft", "createdAt": "2020-07-09T18:55:56Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/UrlBuilder.java", "diffHunk": "@@ -3,18 +3,17 @@\n \n package com.azure.core.util;\n \n-import com.azure.core.util.logging.ClientLogger;\n-\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n /**\n  * A builder class that is used to create URLs.\n  */\n public final class UrlBuilder {\n-    private final ClientLogger logger = new ClientLogger(UrlBuilder.class);", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2OTEyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453369125", "bodyText": "Yep", "author": "JonathanGiles", "createdAt": "2020-07-12T22:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNjQwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r452426408", "bodyText": "This is an API breaking change.", "author": "alzimmermsft", "createdAt": "2020-07-09T18:58:41Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -153,8 +172,8 @@ public String serializeList(List<?> list, CollectionFormat format) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T> T deserialize(String value, final Type type, SerializerEncoding encoding) throws IOException {\n-        if (CoreUtils.isNullOrEmpty(value)) {\n+    public <T> T deserialize(byte[] value, final Type type, SerializerEncoding encoding) throws IOException {", "originalCommit": "184522452033a8fab48ef90748ad90032e5ffee4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2OTE1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r453369153", "bodyText": "It's now called deserializeFromBytes in more recent commits.", "author": "JonathanGiles", "createdAt": "2020-07-12T22:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyNjQwOA=="}], "type": "inlineReview"}, {"oid": "42907b6a70a845a225b8e9d0fabae2aaa6a85a2c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/42907b6a70a845a225b8e9d0fabae2aaa6a85a2c", "message": "Add afterburner module to xml mapper", "committedDate": "2020-07-09T20:25:56Z", "type": "commit"}, {"oid": "4d1439238106d519dad163c629f3bfd1d244969e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d1439238106d519dad163c629f3bfd1d244969e", "message": "Reuse same Jackson ObjectMappers for all swagger interface methods in a single RestProxy instance", "committedDate": "2020-07-09T21:32:37Z", "type": "commit"}, {"oid": "ec561dae0f5b20ede01ebe3d1e67fe03b3d0f41d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec561dae0f5b20ede01ebe3d1e67fe03b3d0f41d", "message": "Improve code that enables object mapper reuse", "committedDate": "2020-07-09T21:41:34Z", "type": "commit"}, {"oid": "3eceb7d1ae8a4f2708d35c521123f68f8893965f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3eceb7d1ae8a4f2708d35c521123f68f8893965f", "message": "Fix test and checkstyle issues", "committedDate": "2020-07-10T00:29:02Z", "type": "commit"}, {"oid": "9c728a65dd74aff515a2c3a9db2a2d731ca4a06c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c728a65dd74aff515a2c3a9db2a2d731ca4a06c", "message": "Remove unused jsonwrapper code", "committedDate": "2020-07-10T01:19:16Z", "type": "commit"}, {"oid": "1c35fa0d1bbe77372c9d5c3d0504ab2f5aa2c1de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c35fa0d1bbe77372c9d5c3d0504ab2f5aa2c1de", "message": "Fix unit tests", "committedDate": "2020-07-10T02:02:58Z", "type": "commit"}, {"oid": "305a0b26df0d3b8c63ad59ab04c6bcf8b25dcd89", "url": "https://github.com/Azure/azure-sdk-for-java/commit/305a0b26df0d3b8c63ad59ab04c6bcf8b25dcd89", "message": "Use HashMap instead of ConcurrentHashMap", "committedDate": "2020-07-10T02:14:10Z", "type": "commit"}, {"oid": "6b1e03e9d7af300eea5dbd26537ddae3174f3fb4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b1e03e9d7af300eea5dbd26537ddae3174f3fb4", "message": "Remove references to jsonwrapper in module-info.java", "committedDate": "2020-07-10T02:14:55Z", "type": "commit"}, {"oid": "c1756af53805552063f7bc1be1d5634da12fde29", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1756af53805552063f7bc1be1d5634da12fde29", "message": "Fixing spotbugs / checkstyle issues.", "committedDate": "2020-07-10T04:26:18Z", "type": "commit"}, {"oid": "bc35387b4d0d373c12f421bbb80de789dc04dfb0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc35387b4d0d373c12f421bbb80de789dc04dfb0", "message": "Merge branch 'master' into AzCore_UseHashMapForHttpHeaders", "committedDate": "2020-07-10T21:46:59Z", "type": "commit"}, {"oid": "d38ebd9341df3afb48f3d2880280dd277ab3fc10", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d38ebd9341df3afb48f3d2880280dd277ab3fc10", "message": "Rename one newly introduced SerializerAdapter method to avoid incompatibilities.", "committedDate": "2020-07-12T20:44:17Z", "type": "commit"}, {"oid": "a67affbe7aae8323b9d1cbb2f82fbc2493991505", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a67affbe7aae8323b9d1cbb2f82fbc2493991505", "message": "More cleanup", "committedDate": "2020-07-12T21:05:48Z", "type": "commit"}, {"oid": "6d707df5d3b4ef990d99c8eb5e653a9757dd4538", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d707df5d3b4ef990d99c8eb5e653a9757dd4538", "message": "Some code cleanups based on review feedback", "committedDate": "2020-07-12T23:08:08Z", "type": "commit"}, {"oid": "67df6073feb8229061578a008e31e8be20ef09ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/67df6073feb8229061578a008e31e8be20ef09ba", "message": "Remove unused import", "committedDate": "2020-07-12T23:36:05Z", "type": "commit"}, {"oid": "dc7d8ba9df04fbe99b7a6894c6f038d34f3834b8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc7d8ba9df04fbe99b7a6894c6f038d34f3834b8", "message": "Removing an exception I added", "committedDate": "2020-07-13T00:22:46Z", "type": "commit"}, {"oid": "420b0e5d63f21ece189dc7dc52d8b5d82add3f9b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/420b0e5d63f21ece189dc7dc52d8b5d82add3f9b", "message": "Merge branch 'master' into AzCore_UseHashMapForHttpHeaders", "committedDate": "2020-07-13T21:07:07Z", "type": "commit"}, {"oid": "633f5cfc8d9257675b34c1cced4619143bfc5b02", "url": "https://github.com/Azure/azure-sdk-for-java/commit/633f5cfc8d9257675b34c1cced4619143bfc5b02", "message": "Update code paths that were creating unnecessary container types", "committedDate": "2020-07-13T22:40:23Z", "type": "commit"}, {"oid": "518694bd63873f0df73899885ab63b981e952fc7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/518694bd63873f0df73899885ab63b981e952fc7", "message": "Merge branch 'AzCore_UseHashMapForHttpHeaders' into core-perf", "committedDate": "2020-07-13T22:42:32Z", "type": "commit"}, {"oid": "28719808bc7b4c6a823559937694e3be3a73eb4f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28719808bc7b4c6a823559937694e3be3a73eb4f", "message": "Merge setScheme and setHost into a single API", "committedDate": "2020-07-14T01:19:01Z", "type": "commit"}, {"oid": "a659943e283d5fb0c54179a6092f45779e1d346a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a659943e283d5fb0c54179a6092f45779e1d346a", "message": "Fixes for failing tests", "committedDate": "2020-07-14T23:01:46Z", "type": "commit"}, {"oid": "ae6182d3dc91650a64b44658fb82f230cad03f52", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae6182d3dc91650a64b44658fb82f230cad03f52", "message": "Change interface defaults to fix ServiceBus test issues", "committedDate": "2020-07-15T03:46:45Z", "type": "commit"}, {"oid": "f17417bfb0f38989efd4d50dfb7d8af0d089ea63", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f17417bfb0f38989efd4d50dfb7d8af0d089ea63", "message": "Fix linting issue", "committedDate": "2020-07-15T18:43:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMDE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r466630144", "bodyText": "String.split(.) internally uses java regex which is CPU expensive.\nPlease ensure regex is not used:\nhttps://www.baeldung.com/java-string-performance#split", "author": "moderakh", "createdAt": "2020-08-06T19:14:10Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/rest/RestProxy.java", "diffHunk": "@@ -195,86 +198,86 @@ private Context startTracingSpan(Method method, Context context) {\n      * @throws IOException thrown if the body contents cannot be serialized\n      */\n     private HttpRequest createHttpRequest(SwaggerMethodParser methodParser, Object[] args) throws IOException {\n-        UrlBuilder urlBuilder;\n-\n         // Sometimes people pass in a full URL for the value of their PathParam annotated argument.\n         // This definitely happens in paging scenarios. In that case, just use the full URL and\n         // ignore the Host annotation.\n         final String path = methodParser.setPath(args);\n         final UrlBuilder pathUrlBuilder = UrlBuilder.parse(path);\n+\n+        final UrlBuilder urlBuilder;\n         if (pathUrlBuilder.getScheme() != null) {\n             urlBuilder = pathUrlBuilder;\n         } else {\n             urlBuilder = new UrlBuilder();\n \n-            final String scheme = methodParser.setScheme(args);\n-            urlBuilder.setScheme(scheme);\n-\n-            final String host = methodParser.setHost(args);\n-            urlBuilder.setHost(host);\n+            methodParser.setSchemeAndHost(args, urlBuilder);\n \n             // Set the path after host, concatenating the path\n             // segment in the host.\n-            if (path != null && !path.isEmpty() && !path.equals(\"/\")) {\n+            if (path != null && !path.isEmpty() && !\"/\".equals(path)) {\n                 String hostPath = urlBuilder.getPath();\n-                if (hostPath == null || hostPath.isEmpty() || hostPath.equals(\"/\") || path.contains(\"://\")) {\n+                if (hostPath == null || hostPath.isEmpty() || \"/\".equals(hostPath) || path.contains(\"://\")) {\n                     urlBuilder.setPath(path);\n                 } else {\n                     urlBuilder.setPath(hostPath + \"/\" + path);\n                 }\n             }\n         }\n \n-        for (final EncodedParameter queryParameter : methodParser.setEncodedQueryParameters(args)) {\n-            urlBuilder.setQueryParameter(queryParameter.getName(), queryParameter.getEncodedValue());\n-        }\n+        methodParser.setEncodedQueryParameters(args, urlBuilder);\n \n         final URL url = urlBuilder.toUrl();\n         final HttpRequest request = configRequest(new HttpRequest(methodParser.getHttpMethod(), url),\n             methodParser, args);\n \n         // Headers from Swagger method arguments always take precedence over inferred headers from body types\n-        for (final HttpHeader header : methodParser.setHeaders(args)) {\n-            request.setHeader(header.getName(), header.getValue());\n-        }\n+        HttpHeaders httpHeaders = request.getHeaders();\n+        methodParser.setHeaders(args, httpHeaders);\n \n         return request;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private HttpRequest configRequest(HttpRequest request, SwaggerMethodParser methodParser, Object[] args)\n-        throws IOException {\n+    private HttpRequest configRequest(final HttpRequest request,\n+                                      final SwaggerMethodParser methodParser,\n+                                      final Object[] args) throws IOException {\n         final Object bodyContentObject = methodParser.setBody(args);\n         if (bodyContentObject == null) {\n             request.getHeaders().put(\"Content-Length\", \"0\");\n         } else {\n+            // We read the content type from the @BodyParam annotation\n             String contentType = methodParser.getBodyContentType();\n+\n+            // If this is null or empty, the service interface definition is incomplete and should\n+            // be fixed to ensure correct definitions are applied\n             if (contentType == null || contentType.isEmpty()) {\n                 if (bodyContentObject instanceof byte[] || bodyContentObject instanceof String) {\n                     contentType = ContentType.APPLICATION_OCTET_STREAM;\n                 } else {\n                     contentType = ContentType.APPLICATION_JSON;\n                 }\n+//                throw logger.logExceptionAsError(new IllegalStateException(\n+//                    \"The method \" + methodParser.getFullyQualifiedMethodName() + \" does does not have its content \"\n+//                        + \"type correctly specified in its service interface\"));\n             }\n \n             request.getHeaders().put(\"Content-Type\", contentType);\n \n+            // TODO(jogiles) this feels hacky\n             boolean isJson = false;\n             final String[] contentTypeParts = contentType.split(\";\");", "originalCommit": "f17417bfb0f38989efd4d50dfb7d8af0d089ea63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzYzODAyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r467638026", "bodyText": "I looked into this when I was reviewing the code, String.split has a fast-path for single-char 'regexes' which this goes through. You can see the fast path in the JDK here: http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/String.java#l2317", "author": "JonathanGiles", "createdAt": "2020-08-09T22:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMDE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc4MTM1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r468781354", "bodyText": "Thank you @JonathanGiles I learnt something today.", "author": "moderakh", "createdAt": "2020-08-11T18:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzMDE0NA=="}], "type": "inlineReview"}, {"oid": "a2300f7e0a3cb48acd6851ceb21f050f45d7f693", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2300f7e0a3cb48acd6851ceb21f050f45d7f693", "message": "Merge in upstream and change APIs from byte[] to InputStream/OutputStream", "committedDate": "2020-08-11T18:27:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMDM1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r468900354", "bodyText": "I thought we decided to not use afterburner for now because we didn't see any perf wins. We should remove this now, correct?", "author": "JonathanGiles", "createdAt": "2020-08-11T22:29:29Z", "path": "sdk/core/azure-core/pom.xml", "diffHunk": "@@ -65,6 +65,11 @@\n       <artifactId>jackson-dataformat-xml</artifactId>\n       <version>2.10.1</version> <!-- {x-version-update;com.fasterxml.jackson.dataformat:jackson-dataformat-xml;external_dependency} -->\n     </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.module</groupId>\n+      <artifactId>jackson-module-afterburner</artifactId>\n+      <version>2.10.1</version> <!-- {x-version-update;com.fasterxml.jackson.module:jackson-module-afterburner;external_dependency} -->\n+    </dependency>", "originalCommit": "a2300f7e0a3cb48acd6851ceb21f050f45d7f693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMjA2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r468902064", "bodyText": "@JonathanGiles , cosmos team is also using after-burner. and we have seen perf gain.\nI think you would see per gain for more complex Pojo where many reflection calls will be made in the absence of after-burner.", "author": "moderakh", "createdAt": "2020-08-11T22:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMDM1NA=="}], "type": "inlineReview"}, {"oid": "4d8e4e8c165998c175b8b3bf301bf590a4b4aefb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d8e4e8c165998c175b8b3bf301bf590a4b4aefb", "message": "Merge branch 'master' into core-perf", "committedDate": "2020-08-11T22:39:56Z", "type": "commit"}, {"oid": "540b876ff3167f74e6d8b38ea016c14e2ec2d957", "url": "https://github.com/Azure/azure-sdk-for-java/commit/540b876ff3167f74e6d8b38ea016c14e2ec2d957", "message": "Remove AfterBurner dependency from Azure Core", "committedDate": "2020-08-12T00:29:08Z", "type": "commit"}, {"oid": "a4d3f94f279bc72df68e4cc864de009a861c65ab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a4d3f94f279bc72df68e4cc864de009a861c65ab", "message": "Fixed Tables tests by updating its SerializerAdapter implementation", "committedDate": "2020-08-12T17:40:16Z", "type": "commit"}, {"oid": "ab745b7073757040bf78ee041229d9513e4f6d5d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab745b7073757040bf78ee041229d9513e4f6d5d", "message": "Add unreleased version tag", "committedDate": "2020-08-12T17:46:10Z", "type": "commit"}, {"oid": "0cd3055377df45c4348e3bee21ad3f80d46144f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0cd3055377df45c4348e3bee21ad3f80d46144f3", "message": "Update usage of String based serialization to OutputStream based, added new internal type of AccessibleByteArrayOutputStream", "committedDate": "2020-08-19T00:23:29Z", "type": "commit"}, {"oid": "756a916e6fc28ceed96663c264c2e8e31d512ae1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/756a916e6fc28ceed96663c264c2e8e31d512ae1", "message": "Add missing ;", "committedDate": "2020-08-19T00:26:50Z", "type": "commit"}, {"oid": "a89e83ed8033a7cd40e7e9c9660ceb15b680a998", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a89e83ed8033a7cd40e7e9c9660ceb15b680a998", "message": "Update serializeRaw to use OutputStream serializer method", "committedDate": "2020-08-19T00:37:40Z", "type": "commit"}, {"oid": "daed45725d9cecc1109fce6e9b1cb4a669adf523", "url": "https://github.com/Azure/azure-sdk-for-java/commit/daed45725d9cecc1109fce6e9b1cb4a669adf523", "message": "Fix possible incorrect sizes", "committedDate": "2020-08-19T01:24:23Z", "type": "commit"}, {"oid": "8c0d02617e503e8f9b113b61bee8e881509603e2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c0d02617e503e8f9b113b61bee8e881509603e2", "message": "Fix Form Recognizer tests that were failing", "committedDate": "2020-08-19T19:59:33Z", "type": "commit"}, {"oid": "4764f615b1fc15eb19b69f21aa081a609b6fab67", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4764f615b1fc15eb19b69f21aa081a609b6fab67", "message": "Revert Form Recognizer version changes", "committedDate": "2020-08-19T20:00:34Z", "type": "commit"}, {"oid": "5614ae5dc9232adef905bbfb51caadcd4a11ef4e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5614ae5dc9232adef905bbfb51caadcd4a11ef4e", "message": "Merge branch 'master' into core-perf", "committedDate": "2020-08-19T23:20:07Z", "type": "commit"}, {"oid": "207e7c5a6dec40ae059b06382b184d7852b9c9b9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/207e7c5a6dec40ae059b06382b184d7852b9c9b9", "message": "Fix CI", "committedDate": "2020-08-19T23:50:49Z", "type": "commit"}, {"oid": "abefdd5b4aade41de35956686a733c860b6ab96f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/abefdd5b4aade41de35956686a733c860b6ab96f", "message": "Add accidentally deleted version tag", "committedDate": "2020-08-20T00:00:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI5MzkxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12890#discussion_r485293913", "bodyText": "There might be a potential concurrency issue here on the static Map.\nWe had a possible one on this line in UrlBuilder.parse (under Java 8)\nPARSED_URLS.put(url, ub);\n\nhttps://user-images.githubusercontent.com/15213781/92462976-c574af80-f1fd-11ea-8f19-33e0919913a5.png", "author": "weidongxu-microsoft", "createdAt": "2020-09-09T02:04:34Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/UrlBuilder.java", "diffHunk": "@@ -3,18 +3,17 @@\n \n package com.azure.core.util;\n \n-import com.azure.core.util.logging.ClientLogger;\n-\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n /**\n  * A builder class that is used to create URLs.\n  */\n public final class UrlBuilder {\n-    private final ClientLogger logger = new ClientLogger(UrlBuilder.class);\n+    private static final Map<String, UrlBuilder> PARSED_URLS = new HashMap<>();", "originalCommit": "abefdd5b4aade41de35956686a733c860b6ab96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}