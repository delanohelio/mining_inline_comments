{"pr_number": 11473, "pr_title": "Allow data libraries to have 'beta' as well as 'beta.X' prerelease", "pr_createdAt": "2020-05-27T16:58:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11473", "timeline": [{"oid": "45f96cfe480bef6a7d03fdd5a547c59bc001a63a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/45f96cfe480bef6a7d03fdd5a547c59bc001a63a", "message": "allow data libraries to have 'beta' as well as 'beta.X' prerelease", "committedDate": "2020-05-27T16:36:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MjQ2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11473#discussion_r431552464", "bodyText": "While this works you could also change it to -match '.*-beta(\\.\\d*)?", "author": "weshaggard", "createdAt": "2020-05-28T02:49:01Z", "path": "eng/versioning/scan_for_unreleased_dependencies.ps1", "diffHunk": "@@ -34,7 +34,7 @@ Get-ChildItem -Path $serviceDirectory -Filter pom*.xml -Recurse -File | ForEach-\n         $script:FoundPomFile = $true\n         Write-Host \"Found pom file with matching groupId($($inputGroupId))/artifactId($($inputArtifactId)), pomFile=$($pomFile)\"\n         $version = $xmlPomFile.project.version\n-        if ($version -like '*-beta.*')\n+        if ($version -like '*-beta.*' -or $version -like '*-beta')", "originalCommit": "45f96cfe480bef6a7d03fdd5a547c59bc001a63a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NjEzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11473#discussion_r431866135", "bodyText": "Good point. I'll make it locally and push another commit.", "author": "JimSuplizio", "createdAt": "2020-05-28T14:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MjQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MzU2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11473#discussion_r431553568", "bodyText": "Do we even know if this is the pattern then want for track 1? I kind of feel like if they don't want to follow the full guidance then we should simply not have support for incrementing their versions. Maybe we should just ignore version increments for those.", "author": "weshaggard", "createdAt": "2020-05-28T02:53:43Z", "path": "eng/versioning/set_versions.py", "diffHunk": "@@ -249,10 +251,21 @@ def increment_library_version(build_type, artifact_id, group_id):\n                         # This is the case where, somehow, the versioning verification has failed and\n                         # the prerelease verification doesn't match \"beta.X\"\n                         if prever is None:\n-                            raise ValueError('library_to_update ({}:{}) has an invalid prerelease version ({}) which should be of the format beta.X'.format(library_to_update, module.current, vmatch.group('prerelease')))\n-                        rev = int(prever.group('revision'))\n-                        rev += 1\n-                        new_version = '{}.{}.{}-beta.{}'.format(vmatch.group('major'), vmatch.group('minor'), vmatch.group('patch'), str(rev))\n+                            # if the build_type isn't data then error\n+                            if build_type.name.lower() != 'data':\n+                                raise ValueError('library_to_update ({}:{}) has an invalid prerelease version ({}) which should be of the format beta.X'.format(library_to_update, module.current, vmatch.group('prerelease')))\n+                            else:\n+                                # verify that prerelease is \"beta\"\n+                                if prerelease_data_regex.match(vmatch.group('prerelease')) is None:\n+                                    raise ValueError('library_to_update ({}:{}) has an invalid prerelease version ({}) which should be of the format (beta) or (beta.X)'.format(library_to_update, module.current, vmatch.group('prerelease')))\n+                                # in the case there the prerelease version is just \"beta\", increment the minor and set the patch to 0\n+                                minor = int(vmatch.group('minor'))", "originalCommit": "45f96cfe480bef6a7d03fdd5a547c59bc001a63a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MDY1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11473#discussion_r431860657", "bodyText": "1.0.0-beta turning into 1.1.0-beta at least follows the same GA increment pattern. For the most part I'm expecting the version to be changed before the next release anyways. What matters for the auto increment is that we produce something that won't clash with what's on Maven and is a higher version. I don't want to ignore the auto-increment for track 1 because a couple of libraries were allowed to be exceptions when most of the others are following the version scheme.", "author": "JimSuplizio", "createdAt": "2020-05-28T14:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MzU2OA=="}], "type": "inlineReview"}, {"oid": "76681415d8e5fbf4d2c9044f1b9edcaeae801a78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/76681415d8e5fbf4d2c9044f1b9edcaeae801a78", "message": "change -like to -match for beta detection", "committedDate": "2020-05-28T14:21:45Z", "type": "commit"}]}