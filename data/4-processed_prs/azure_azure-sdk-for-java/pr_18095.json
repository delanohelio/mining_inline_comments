{"pr_number": 18095, "pr_title": "Nio check access", "pr_createdAt": "2020-12-11T21:40:27Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18095", "timeline": [{"oid": "8d06f251afb0156ef9d4e3ca0ea709ba52b21fe2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d06f251afb0156ef9d4e3ca0ea709ba52b21fe2", "message": "Small readme fix on creating a filestore", "committedDate": "2020-12-08T18:10:16Z", "type": "commit"}, {"oid": "c0dc3dc1003f649b64bb92bada48b0ff6fb8c4d7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0dc3dc1003f649b64bb92bada48b0ff6fb8c4d7", "message": "Started adding support for check access", "committedDate": "2020-12-10T18:57:48Z", "type": "commit"}, {"oid": "ffd7465ec4a3849e44a57e4c6d1969d25073262a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ffd7465ec4a3849e44a57e4c6d1969d25073262a", "message": "Support for check access", "committedDate": "2020-12-11T21:37:05Z", "type": "commit"}, {"oid": "ba912986e3855522176be248e4e83eb64c41149a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba912986e3855522176be248e4e83eb64c41149a", "message": "Merge remote-tracking branch 'upstream/master' into nioCheckAccess", "committedDate": "2020-12-11T21:39:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzc2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541323769", "bodyText": "Could this also be ContainerNotFound?", "author": "gapra-msft", "createdAt": "2020-12-11T21:42:22Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {\n+            if (e.getCause() != null && e.getCause() instanceof BlobStorageException\n+                && BlobErrorCode.BLOB_NOT_FOUND.equals(((BlobStorageException) e.getCause()).getErrorCode())) {", "originalCommit": "ba912986e3855522176be248e4e83eb64c41149a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4ODQ5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542688498", "bodyText": "Once I add support for containers, yes. A good reminder that I'll have to update a lot of error handling like that", "author": "rickle-msft", "createdAt": "2020-12-14T19:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyMzc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNTg2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541325860", "bodyText": "nit: capitalize the C", "author": "gapra-msft", "createdAt": "2020-12-11T21:44:57Z", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/AzureFileSystemProviderTest.groovy", "diffHunk": "@@ -1058,6 +1072,142 @@ class AzureFileSystemProviderTest extends APISpec {\n         thrown(IOException)\n     }\n \n+    def \"CheckAccess\"() {\n+        setup:\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path)\n+\n+        then:\n+        notThrown(Exception)\n+    }\n+\n+    @Unroll\n+    def \"CheckAccess AccessDenied\"() {\n+        setup:\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path, mode)\n+\n+        then:\n+        thrown(AccessDeniedException)\n+\n+        where:\n+        mode               | _\n+        AccessMode.READ    | _\n+        AccessMode.WRITE   | _\n+        AccessMode.EXECUTE | _\n+    }\n+\n+    def \"CheckAccess IOException\"() {\n+        setup:\n+        HttpPipelinePolicy[] policies = new HttpPipelinePolicy[1]\n+        policies[0] = new checkAccessIoExceptionPolicy()\n+        config.put(AzureFileSystem.AZURE_STORAGE_HTTP_POLICIES, policies)\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path)\n+\n+        then:\n+        def e = thrown(IOException)\n+        !(e instanceof NoSuchFileException)\n+    }\n+\n+    class checkAccessIoExceptionPolicy implements HttpPipelinePolicy {\n+        @Override\n+        Mono<HttpResponse> process(HttpPipelineCallContext httpPipelineCallContext, HttpPipelineNextPolicy httpPipelineNextPolicy) {\n+            HttpRequest request = httpPipelineCallContext.getHttpRequest()\n+            // GetProperties call to blob\n+            if (request.getUrl().getPath().split(\"/\").size() == 3 && request.getHttpMethod() == (HttpMethod.HEAD)) {\n+                return Mono.just(new checkAccessIoExceptionResponse(request))\n+            } else {\n+                return httpPipelineNextPolicy.process()\n+            }\n+        }\n+    }\n+\n+    class checkAccessIoExceptionResponse extends HttpResponse {", "originalCommit": "ba912986e3855522176be248e4e83eb64c41149a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyODQxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541328411", "bodyText": "you could probably just do\nexpect:\nfs.provider().checkAccess(path)", "author": "gapra-msft", "createdAt": "2020-12-11T21:47:44Z", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/AzureFileSystemProviderTest.groovy", "diffHunk": "@@ -1058,6 +1072,142 @@ class AzureFileSystemProviderTest extends APISpec {\n         thrown(IOException)\n     }\n \n+    def \"CheckAccess\"() {\n+        setup:\n+        def fs = createFS(config)\n+        def path = fs.getPath(generateBlobName())\n+        def os = fs.provider().newOutputStream(path)\n+        os.close()\n+\n+        when:\n+        fs.provider().checkAccess(path)", "originalCommit": "ba912986e3855522176be248e4e83eb64c41149a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc3Mjc3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542772778", "bodyText": "I think it's functionally the same. If all I'm doing is check the call succeeds, I usually like to make that explicit by saying I don't want an exception.", "author": "rickle-msft", "createdAt": "2020-12-14T20:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyODQxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTYzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541329631", "bodyText": "Should this be UnsupportedOperationException or AccessDeniedException?", "author": "gapra-msft", "createdAt": "2020-12-11T21:49:08Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -785,11 +788,14 @@ public FileStore getFileStore(Path path) throws IOException {\n     }\n \n     /**\n-     * Unsupported.\n+     * Checks the existence, and optionally the accessibility, of a file.\n+     * <p>\n+     * This method may only be used to check the existence of a file. It is not possible to determine the permissions\n+     * granted to a given client, so if any mode argument is specified, an {@link UnsupportedOperationException} will be", "originalCommit": "ba912986e3855522176be248e4e83eb64c41149a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM5MDQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541390453", "bodyText": "AccessDenied", "author": "rickle-msft", "createdAt": "2020-12-11T23:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyNjk0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542826948", "bodyText": "(per the jdk docs for this method: \"the requested access would be denied or the access cannot be determined because the Java virtual machine has insufficient privileges or other reasons.\" I think it's reasonable to put this under access cannot be determined)", "author": "rickle-msft", "createdAt": "2020-12-14T21:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r541332637", "bodyText": "Just a thought - should auth errors be wrapped into AccessDeniedExceptions?", "author": "gapra-msft", "createdAt": "2020-12-11T21:52:24Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +804,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw logger.logThrowableAsError(\n+                new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch(IOException e) {", "originalCommit": "ba912986e3855522176be248e4e83eb64c41149a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc3OTI3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542779271", "bodyText": "Good question. I tend to think that debugging will be easier if issues with underlying blob stuff is presented differently from nio stuff. I can see an argument where that kind of breaks the point of mapping one to the other, but an AccessDeniedException seems like it would have a response of \"well let me go grant access\" which is impossible in this case, and an IOException caused by a BlobStorageException kind of leads me down a path of something is wrong with my account or nio configs. What do you think?", "author": "rickle-msft", "createdAt": "2020-12-14T20:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4NTM4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542785384", "bodyText": "If that's the general pattern we've aimed for with nio then I'm fine with that.", "author": "gapra-msft", "createdAt": "2020-12-14T21:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyNzk0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r542827942", "bodyText": "I'm not sure if it's generalized yet haha. Still could change if you think otherwise. But we'd have to add that explicit check in a lot of different places, which I'm also not a fan of because I think we're likely to forget one.", "author": "rickle-msft", "createdAt": "2020-12-14T21:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjYzNw=="}], "type": "inlineReview"}, {"oid": "1bab6e0ce19f24d7efa768489885b4cc368c87ee", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1bab6e0ce19f24d7efa768489885b4cc368c87ee", "message": "Fixed a test recording", "committedDate": "2020-12-14T20:46:58Z", "type": "commit"}, {"oid": "64e1a7b4496e32117cee53e854d2d3c1412d379a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/64e1a7b4496e32117cee53e854d2d3c1412d379a", "message": "Merge branch 'master' into nioCheckAccess", "committedDate": "2020-12-14T21:42:44Z", "type": "commit"}, {"oid": "e4d719842607eadba3fed5dd7b732a1938dc9125", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4d719842607eadba3fed5dd7b732a1938dc9125", "message": "Ci fixes and feedback", "committedDate": "2020-12-14T22:52:06Z", "type": "commit"}, {"oid": "22ecb7f9f9a98a9542998aa1b74c3523189efaa3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/22ecb7f9f9a98a9542998aa1b74c3523189efaa3", "message": "Merge branch 'nioCheckAccess' of github.com:rickle-msft/azure-sdk-for-java into nioCheckAccess", "committedDate": "2020-12-14T22:52:17Z", "type": "commit"}, {"oid": "45c20a9732ba89e89597120312fcb2d40ded559e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/45c20a9732ba89e89597120312fcb2d40ded559e", "message": "Spotbugs", "committedDate": "2020-12-15T18:00:52Z", "type": "commit"}, {"oid": "81b5ad28120b7408786acb7ed89a07bb28a02bbf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/81b5ad28120b7408786acb7ed89a07bb28a02bbf", "message": "spotbugs", "committedDate": "2020-12-15T19:23:05Z", "type": "commit"}, {"oid": "bd31b45b9f48f878f2c2fced71ce55265016c133", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd31b45b9f48f878f2c2fced71ce55265016c133", "message": "spotbugs", "committedDate": "2020-12-15T19:25:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4NjQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r543686425", "bodyText": "We should update other locations to using LoggingUtility when throwing exceptions", "author": "alzimmermsft", "createdAt": "2020-12-15T21:06:53Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -373,7 +374,8 @@ public OutputStream newOutputStream(Path path, OpenOption... options) throws IOE\n         // Write and truncate must be specified\n         if (!optionsList.contains(StandardOpenOption.WRITE)\n             || !optionsList.contains(StandardOpenOption.TRUNCATE_EXISTING)) {\n-            throw new IllegalArgumentException(\"Write and TruncateExisting must be specified to open an OutputStream\");\n+            throw LoggingUtility.logError(logger,", "originalCommit": "bd31b45b9f48f878f2c2fced71ce55265016c133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4Njc1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r543686757", "bodyText": "We should log this throw", "author": "alzimmermsft", "createdAt": "2020-12-15T21:07:28Z", "path": "sdk/storage/azure-storage-blob-nio/src/main/java/com/azure/storage/blob/nio/AzureFileSystemProvider.java", "diffHunk": "@@ -798,7 +803,23 @@ public FileStore getFileStore(Path path) throws IOException {\n      */\n     @Override\n     public void checkAccess(Path path, AccessMode... accessModes) throws IOException {\n-        throw new UnsupportedOperationException();\n+        if (accessModes != null && accessModes.length != 0) {\n+            throw LoggingUtility.logError(logger, new AccessDeniedException(\"The access cannot be determined.\"));\n+        }\n+        AzurePath.ensureFileSystemOpen(path);\n+\n+        // Read attributes already wraps BlobStorageException in an IOException.\n+        try {\n+            readAttributes(path, BasicFileAttributes.class);\n+        } catch (IOException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof BlobStorageException\n+                && BlobErrorCode.BLOB_NOT_FOUND.equals(((BlobStorageException) cause).getErrorCode())) {\n+                throw LoggingUtility.logError(logger, new NoSuchFileException(path.toString()));\n+            } else {\n+                throw e;", "originalCommit": "bd31b45b9f48f878f2c2fced71ce55265016c133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4Nzk2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18095#discussion_r543687968", "bodyText": "Should we initialize policyList using def policyList = [] as HttpPipelinePolicy[] instead of casting it later?", "author": "alzimmermsft", "createdAt": "2020-12-15T21:09:40Z", "path": "sdk/storage/azure-storage-blob-nio/src/test/java/com/azure/storage/blob/nio/APISpec.groovy", "diffHunk": "@@ -372,13 +372,17 @@ class APISpec extends Specification {\n         }\n     }\n \n-    Map<String, Object> initializeConfigMap() {\n+    Map<String, Object> initializeConfigMap(HttpPipelinePolicy... policies) {\n         def config = [:]\n         config[AzureFileSystem.AZURE_STORAGE_HTTP_CLIENT] = getHttpClient()\n+        def policyList = []", "originalCommit": "bd31b45b9f48f878f2c2fced71ce55265016c133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "82ddd75ccc9e7bc6cbb093637b90f7683c0064cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/82ddd75ccc9e7bc6cbb093637b90f7683c0064cd", "message": "Added support for containers which adds support for Files.createDirs", "committedDate": "2020-12-15T23:09:38Z", "type": "commit"}, {"oid": "82ddd75ccc9e7bc6cbb093637b90f7683c0064cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/82ddd75ccc9e7bc6cbb093637b90f7683c0064cd", "message": "Added support for containers which adds support for Files.createDirs", "committedDate": "2020-12-15T23:09:38Z", "type": "forcePushed"}, {"oid": "5f168487ac3d180c9715db86cbabfa4f5f8b967e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f168487ac3d180c9715db86cbabfa4f5f8b967e", "message": "PR feedback", "committedDate": "2020-12-15T23:46:22Z", "type": "commit"}]}