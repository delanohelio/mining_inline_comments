{"pr_number": 17505, "pr_title": "[Form Recognizer] Add pages, bounding box, bmp content type and appearance", "pr_createdAt": "2020-11-12T03:44:44Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17505", "timeline": [{"oid": "de563f53d0e0051abf3d68be1ee365d6c6b941f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/de563f53d0e0051abf3d68be1ee365d6c6b941f8", "message": "update pages content api", "committedDate": "2020-11-11T22:48:23Z", "type": "commit"}, {"oid": "b0024f5641f3252b09aa0859a28bf6aba29c6ca4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0024f5641f3252b09aa0859a28bf6aba29c6ca4", "message": "pages test", "committedDate": "2020-11-12T00:04:21Z", "type": "commit"}, {"oid": "93b8bea88c9fc4bad2daccaefd83d9f3f0aa8177", "url": "https://github.com/Azure/azure-sdk-for-java/commit/93b8bea88c9fc4bad2daccaefd83d9f3f0aa8177", "message": "appearance and bounding box", "committedDate": "2020-11-12T03:39:21Z", "type": "commit"}, {"oid": "34b2a8c2fcd955d1ab15de3dd701047bd736d053", "url": "https://github.com/Azure/azure-sdk-for-java/commit/34b2a8c2fcd955d1ab15de3dd701047bd736d053", "message": "missed files", "committedDate": "2020-11-12T07:06:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzOTkxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522339911", "bodyText": "what does a non-public property is? I guess I am confused on why the need of this class instead of adding Appearance to the FormLine constructor", "author": "maririos", "createdAt": "2020-11-12T18:54:22Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/FormLineHelper.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.implementation;\n+\n+import com.azure.ai.formrecognizer.models.Appearance;\n+import com.azure.ai.formrecognizer.models.FormLine;\n+\n+/**\n+ * The helper class to set the non-public properties of an {@link FormLine} instance.\n+ */\n+public final class FormLineHelper {", "originalCommit": "34b2a8c2fcd955d1ab15de3dd701047bd736d053", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MDEzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522340134", "bodyText": "Same comment for table.boundingbox", "author": "maririos", "createdAt": "2020-11-12T18:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzOTkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2MTk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522361944", "bodyText": "Yeah, we don't want to introduce public constructors for output only models. Since that could be confusing to the users. So this a new pattern we have introduced wherein we have private setters on the model class and interface implementations to set those properties internally which are never exposed to users.", "author": "samvaity", "createdAt": "2020-11-12T19:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzOTkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MzE3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522343177", "bodyText": "Looks like this might be missing in the FormRecognizerClientTest?", "author": "maririos", "createdAt": "2020-11-12T18:59:47Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -432,6 +435,89 @@ public void recognizeContentWithSelectionMarks(HttpClient httpClient,\n         }, SELECTION_MARK_PDF);\n     }\n \n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPage(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Collections.singletonList(\"1\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(1, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPages(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Arrays.asList(\"1\", \"2\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(2, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    @Disabled\n+    public void recognizeContentWithPageRange(HttpClient httpClient, FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        dataRunner((data, dataLength) -> {\n+            SyncPoller<FormRecognizerOperationResult, List<FormPage>> syncPoller =\n+                client.beginRecognizeContent(toFluxByteBuffer(data),\n+                    dataLength,\n+                    new RecognizeContentOptions()\n+                        .setContentType(APPLICATION_PDF)\n+                        .setPollInterval(durationTestMode)\n+                        .setPages(Arrays.asList(\"1-2\", \"3\")))\n+                    .getSyncPoller();\n+            syncPoller.waitForCompletion();\n+            List<FormPage> formPages = syncPoller.getFinalResult();\n+            validateContentResultData(formPages, false);\n+            assertEquals(3, formPages.size());\n+        }, MULTIPAGE_INVOICE_PDF);\n+    }\n+\n+    /**\n+     * Verifies layout data for a document using source as input stream data.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")", "originalCommit": "34b2a8c2fcd955d1ab15de3dd701047bd736d053", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NTg1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522365856", "bodyText": "Yeah, since it would be updated anyway once we have a concrete design in place. Just kept it in async test.  But wanted to add for checking appearance in some form. (sanity-check)", "author": "samvaity", "createdAt": "2020-11-12T19:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MzE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0Mzk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522343985", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Code generated by Microsoft (R) AutoRest Code Generator.", "author": "mssfang", "createdAt": "2020-11-12T19:01:13Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.", "originalCommit": "34b2a8c2fcd955d1ab15de3dd701047bd736d053", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522349591", "bodyText": "U probably forget this is a explored model. Need another visited of this model class", "author": "mssfang", "createdAt": "2020-11-12T19:09:42Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/Appearance.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;", "originalCommit": "34b2a8c2fcd955d1ab15de3dd701047bd736d053", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzkwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522353905", "bodyText": "Also there are more explored models but still have public setter. I guess u are still working on it. I will take another look at this PR later.", "author": "mssfang", "createdAt": "2020-11-12T19:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1OTA1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522359050", "bodyText": "It is a generated model, keeping it as is for this preview.", "author": "samvaity", "createdAt": "2020-11-12T19:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NTE1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522365155", "bodyText": "Since it is explored to user. We can make it not settable.", "author": "mssfang", "createdAt": "2020-11-12T19:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0OTAyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522449028", "bodyText": "Good point, updated. I was under the impression since this is mostly generated code as is shouldn't need to worry but I guess it will help to avoid breaking changes.", "author": "samvaity", "createdAt": "2020-11-12T21:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTU5MQ=="}], "type": "inlineReview"}, {"oid": "91b482df154bbb8d55d89a59b95eac39490e4681", "url": "https://github.com/Azure/azure-sdk-for-java/commit/91b482df154bbb8d55d89a59b95eac39490e4681", "message": "update models to custom handwritten", "committedDate": "2020-11-12T21:27:21Z", "type": "forcePushed"}, {"oid": "b569b7ce6789623be100a22b4fdd080cbe407020", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b569b7ce6789623be100a22b4fdd080cbe407020", "message": "update models to custom handwritten", "committedDate": "2020-11-12T22:11:45Z", "type": "commit"}, {"oid": "b569b7ce6789623be100a22b4fdd080cbe407020", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b569b7ce6789623be100a22b4fdd080cbe407020", "message": "update models to custom handwritten", "committedDate": "2020-11-12T22:11:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzM1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522507352", "bodyText": "do we need values()?", "author": "mssfang", "createdAt": "2020-11-12T23:39:33Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/TextStyle.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Collection;\n+\n+/** Defines values for TextStyle. */\n+public final class TextStyle extends ExpandableStringEnum<TextStyle> {\n+    /** Static value other for TextStyle. */\n+    public static final TextStyle OTHER = fromString(\"other\");\n+\n+    /** Static value handwriting for TextStyle. */\n+    public static final TextStyle HANDWRITING = fromString(\"handwriting\");\n+\n+    /**\n+     * Creates or finds a TextStyle from its string representation.\n+     *\n+     * @param name a name to look for.\n+     * @return the corresponding TextStyle.\n+     */\n+    @JsonCreator\n+    public static TextStyle fromString(String name) {\n+        return fromString(name, TextStyle.class);\n+    }\n+\n+    /** @return known TextStyle values. */\n+    public static Collection<TextStyle> values() {", "originalCommit": "b569b7ce6789623be100a22b4fdd080cbe407020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzQ2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522507469", "bodyText": "It can be removed.", "author": "mssfang", "createdAt": "2020-11-12T23:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzczMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17505#discussion_r522507730", "bodyText": "Generated.", "author": "samvaity", "createdAt": "2020-11-12T23:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzM1Mg=="}], "type": "inlineReview"}]}