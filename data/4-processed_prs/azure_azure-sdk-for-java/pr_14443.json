{"pr_number": 14443, "pr_title": "Digital Twin APIs Design", "pr_createdAt": "2020-08-25T23:24:15Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14443", "timeline": [{"oid": "aec52e9b01b29492b1c051c676285878aec6d6e9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aec52e9b01b29492b1c051c676285878aec6d6e9", "message": "dt crud apis", "committedDate": "2020-08-25T23:20:57Z", "type": "commit"}, {"oid": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "message": "more updates", "committedDate": "2020-08-27T01:17:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzAwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478557005", "bodyText": "Note: Every sync api with response needs to have Context as I learned from Srikanta", "author": "bikamani", "createdAt": "2020-08-27T16:46:35Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param modelClass The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> modelClass)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param modelClass The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> modelClass)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param modelClass The model class to convert the response to.\n+ * @param options The optional settings for this request\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options, Class<T> modelClass)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options)\n+```\n+\n+</details>\n+\n+<details><summary><b>Sync APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public String getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param context Additional context that is passed through the Http pipeline during the service call.\n+ * @return A Http response containing application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Response<String> getDigitalTwinWithResponse(String digitalTwinId, Context context)", "originalCommit": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1OTY5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478559693", "bodyText": "So even those that are not max overload ?", "author": "azabbasi", "createdAt": "2020-08-27T16:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MjEyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478562122", "bodyText": "@bikamani Would it be correct to then say:\n\nasync API - max overload -> with response as output\nsync APIs - max overload -> with context as input, and with response as output.", "author": "abhipsaMisra", "createdAt": "2020-08-27T16:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2OTI3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478569270", "bodyText": "yes that is right, all apis with response @azabbasi", "author": "bikamani", "createdAt": "2020-08-27T17:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NTk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478555998", "bodyText": "let's use \"Id\" across the PR", "author": "azabbasi", "createdAt": "2020-08-27T16:45:02Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param modelClass The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> modelClass)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.", "originalCommit": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2OTQwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478569400", "bodyText": "sure sure, may have missed this one", "author": "bikamani", "createdAt": "2020-08-27T17:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NjgyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478556827", "bodyText": "Shouldn't this be <T> Mono<Response<T>> ?", "author": "azabbasi", "createdAt": "2020-08-27T16:46:18Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)", "originalCommit": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NDE3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478564170", "bodyText": "+1\nOn that note, fyi - we are going to be adding a custom response type (inherited from ResponseBase<H, T>), which we will return from these public APIs (for APIs that should return json string). Strongly typed objects can be returned as-is from the PL.", "author": "abhipsaMisra", "createdAt": "2020-08-27T16:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NjgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2OTk5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478569999", "bodyText": "Good point, let me sync with @abhipsaMisra on this.", "author": "bikamani", "createdAt": "2020-08-27T17:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NjgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzYyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478557629", "bodyText": "I think we need another one with\npublic T Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)", "author": "azabbasi", "createdAt": "2020-08-27T16:47:36Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)", "originalCommit": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMjE2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478612163", "bodyText": "Ok now I understood so we need both\nMono <T> and Mono <Response <T> > as well.", "author": "bikamani", "createdAt": "2020-08-27T18:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1NzYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODI4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478558289", "bodyText": "modelClass is a good name, but it's may be confused with actual ADT models,\nwe can use something like klazz/clazz (standard) or classType or something", "author": "azabbasi", "createdAt": "2020-08-27T16:48:42Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)", "originalCommit": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NzI2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478567267", "bodyText": "That was my concern as well, although I believe I recommended that we use modelClass.\nSince every type that we want to convert to is essentially a \"model\" in programming terms, I thought this should be ok, although I can see the potential for confusion with ADT models.\nI think classType is well descriptive, we can use that. (I am sure the SDK board will push back if that goes against java naming conventions. )", "author": "abhipsaMisra", "createdAt": "2020-08-27T17:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4Nzc4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478587786", "bodyText": "we will cross that bridge when it comes to reviewing it with the board I guess.", "author": "azabbasi", "createdAt": "2020-08-27T17:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwOTg4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478609883", "bodyText": "I'll also take a look at other sdks otherwise classType looks fine to me", "author": "bikamani", "createdAt": "2020-08-27T18:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODg3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478558871", "bodyText": "Same here, we need another one with\npublic T Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)", "author": "azabbasi", "createdAt": "2020-08-27T16:49:42Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,358 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param modelClass The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwinWithResponse(String digitalTwinId, Class<T> modelClass)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)", "originalCommit": "2606fd0152ee75f7a1833e60ffd47baf32cfdadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1OTMyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478559326", "bodyText": "same goes for all non-response signatures ...", "author": "azabbasi", "createdAt": "2020-08-27T16:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMjI4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478612282", "bodyText": "I'll make that change", "author": "bikamani", "createdAt": "2020-08-27T18:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODg3MQ=="}], "type": "inlineReview"}, {"oid": "441bb2e0f72103c59d9300d568c5df03f07dc654", "url": "https://github.com/Azure/azure-sdk-for-java/commit/441bb2e0f72103c59d9300d568c5df03f07dc654", "message": "add mono<t> versions", "committedDate": "2020-08-27T19:09:44Z", "type": "commit"}, {"oid": "7b7178acfd9cd1938d04cb3769320400e8b24746", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b7178acfd9cd1938d04cb3769320400e8b24746", "message": "modelType ==> classType", "committedDate": "2020-08-27T19:10:47Z", "type": "commit"}, {"oid": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "message": "adding generic apis", "committedDate": "2020-08-27T19:39:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MDgyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478660827", "bodyText": "This will need to be:\npublic <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\nWhen we are working with generic objects, we would expect the user to supply an object, not a serialized json string.", "author": "abhipsaMisra", "createdAt": "2020-08-27T19:56:33Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)", "originalCommit": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTIxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478671215", "bodyText": "ah, you are right, I missed it in the first iteration", "author": "azabbasi", "createdAt": "2020-08-27T20:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MDgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MTY4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478661680", "bodyText": "Same here as well, Object digitalTwin", "author": "abhipsaMisra", "createdAt": "2020-08-27T19:58:22Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)", "originalCommit": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MTk3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478661975", "bodyText": "only max overload needs to have a withResponse.", "author": "abhipsaMisra", "createdAt": "2020-08-27T19:58:55Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)", "originalCommit": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MjI1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478662256", "bodyText": "So we should have:\npublic Mono<Void> deleteDigitalTwin(String digitalTwinId) and\npublic Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)", "author": "abhipsaMisra", "createdAt": "2020-08-27T19:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MTk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwMTA5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478701095", "bodyText": "gotcha. Good catch", "author": "bikamani", "createdAt": "2020-08-27T21:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY2MTk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MTkwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478671902", "bodyText": "<T> Mono<Response<T>", "author": "azabbasi", "createdAt": "2020-08-27T20:18:29Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<T> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)", "originalCommit": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478672169", "bodyText": "per our discussions, this will be List<Object> digitalTwinUpdateOperations", "author": "azabbasi", "createdAt": "2020-08-27T20:19:03Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,446 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<T> updateDigitalTwinWithResponse(String digitalTwinId, String digitalTwinUpdateOperations, Class<T> classType)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations, RequestOptions options, Class<T> classType)", "originalCommit": "b9f55f98a358d3ab11bb33078db57fa18eea8f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjI1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478672257", "bodyText": "and everywhere else", "author": "azabbasi", "createdAt": "2020-08-27T20:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNDM1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478704355", "bodyText": "yeah was just chatting with @abhipsaMisra on the same. I did change it now :)", "author": "bikamani", "createdAt": "2020-08-27T21:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjE2OQ=="}], "type": "inlineReview"}, {"oid": "27c7022cfb925216b09d95300be92370a491e7f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/27c7022cfb925216b09d95300be92370a491e7f0", "message": "list of objects for patch", "committedDate": "2020-08-27T21:26:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNjM5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478706395", "bodyText": "don't need this API, the one below is sufficient.", "author": "abhipsaMisra", "createdAt": "2020-08-27T21:29:16Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)", "originalCommit": "27c7022cfb925216b09d95300be92370a491e7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNzc3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478707773", "bodyText": "You'll probably need to update this to Mono<Response<Void>>, else it'll complain about using raw unparameterized form of Response<T>; but you can make that change when you actually implement the API -> you'll get a warning on intellij.\nI'll leave it to you to update it as you see fit.", "author": "abhipsaMisra", "createdAt": "2020-08-27T21:32:19Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)", "originalCommit": "27c7022cfb925216b09d95300be92370a491e7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwODA0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478708047", "bodyText": "String digitalTwinUpdateOperations will need to be List<Object>.", "author": "abhipsaMisra", "createdAt": "2020-08-27T21:32:59Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)", "originalCommit": "27c7022cfb925216b09d95300be92370a491e7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwODg4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478708887", "bodyText": "Shouldn't this withResponse be for the max overload only -> the one with RequestOptions?", "author": "abhipsaMisra", "createdAt": "2020-08-27T21:34:57Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)", "originalCommit": "27c7022cfb925216b09d95300be92370a491e7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwOTM3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478709375", "bodyText": "Same, this isn't required; withResponse is required with max overload only", "author": "abhipsaMisra", "createdAt": "2020-08-27T21:36:08Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)", "originalCommit": "27c7022cfb925216b09d95300be92370a491e7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxNjMzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14443#discussion_r478716338", "bodyText": "todo: check with guidelines", "author": "bikamani", "createdAt": "2020-08-27T21:52:03Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/API design.md", "diffHunk": "@@ -525,6 +524,427 @@ These APIs are invoked via DigitalTwinsClient.\n ```\n </details>\n \n+## Digital Twins\n+<details><summary><b>Terminology</b></summary>\n+\n+A digital twin is an instance of one of your custom-defined models.\n+\n+</details>\n+\n+<details><summary><b>Async APIs</b></summary>\n+\n+These APIs are invoked via DigitalTwinsAsyncClient.\n+\n+```java\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<string> getDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> getDigitalTwin(String digitalTwinId, Class<T> classType)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> getDigitalTwinWithResponse(String digitalTwinId)\n+\n+/**\n+ * Gets a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin. The Id is unique within the service and case sensitive.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing the application/json digital twin\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> getDigitalTwinWithResponse(String digitalTwinId, Class<T> classType)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> createDigitalTwin(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return The application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> createDigitalTwin(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin)\n+\n+ /**\n+ * Creates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwin The application/json digital twin to create.\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing application/json digital twin created.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> classType)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Void> deleteDigitalTwin(String digitalTwinId, RequestOptions options)\n+\n+/**\n+ * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n+ *\n+ * @param digitalTwinId The id of the digital twin. The id is unique within the service and case sensitive.\n+ * @param options The optional settings for this request\n+ * @return The Http response\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response> deleteDigitalTwinWithResponse(String digitalTwinId, RequestOptions options)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, String digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<Response<String>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param classType The model class to convert the response to.\n+ * @return A Http response containing updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<Response<T>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, Class<T> classType)\n+\n+ /**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public Mono<String> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options)\n+\n+/**\n+ * Updates a digital twin.\n+ *\n+ * @param digitalTwinId The Id of the digital twin.\n+ * @param digitalTwinUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin\n+ * @param options The optional settings for this request\n+ * @param classType The model class to convert the response to.\n+ * @return The updated application/json digital twin.\n+ */\n+@ServiceMethod(returns = ReturnType.SINGLE)\n+public <T> Mono<T> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations, RequestOptions options, Class<T> classType)", "originalCommit": "27c7022cfb925216b09d95300be92370a491e7f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fdc6402bca4b9a6daffb48c10e9a5de9d2f608f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fdc6402bca4b9a6daffb48c10e9a5de9d2f608f3", "message": "remove response apis which does not have max overload", "committedDate": "2020-08-27T22:02:11Z", "type": "commit"}]}