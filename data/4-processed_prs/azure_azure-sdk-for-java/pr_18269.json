{"pr_number": 18269, "pr_title": "Add test for RefreshToken scopes", "pr_createdAt": "2020-12-18T10:16:37Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18269", "timeline": [{"oid": "76723379578b21748c8f400d707712a495481a87", "url": "https://github.com/Azure/azure-sdk-for-java/commit/76723379578b21748c8f400d707712a495481a87", "message": "add unit test for AzureOauth2RefreshTokenGrantRequestEntityConverter", "committedDate": "2020-12-18T02:51:20Z", "type": "commit"}, {"oid": "7d11fd95bb88be1a4d50df3bc223e71c818bdea9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7d11fd95bb88be1a4d50df3bc223e71c818bdea9", "message": "add distinction to refreshtoken converter", "committedDate": "2020-12-18T02:53:12Z", "type": "commit"}, {"oid": "9a6738890e88d3441fffb7d432043d530ad42957", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a6738890e88d3441fffb7d432043d530ad42957", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into add-unit-test", "committedDate": "2020-12-18T02:53:42Z", "type": "commit"}, {"oid": "7f3cdc19e00328439d0868179ae6415a0ae813f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f3cdc19e00328439d0868179ae6415a0ae813f8", "message": "add unit test for AzureOauth2RefreshTokenGrantRequestEntityConverterTest", "committedDate": "2020-12-18T08:43:49Z", "type": "commit"}, {"oid": "8af1ac15b4694a5d1a0f1b0e5d5a5c0c2ffd1de7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8af1ac15b4694a5d1a0f1b0e5d5a5c0c2ffd1de7", "message": "add integration test for RefreshTokenConverter", "committedDate": "2020-12-18T08:44:50Z", "type": "commit"}, {"oid": "671b41302524b0586aed6ac384118372b9c48ffe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/671b41302524b0586aed6ac384118372b9c48ffe", "message": "add ConditionalOnResource for AADWebAppConfiguration", "committedDate": "2020-12-18T08:49:47Z", "type": "commit"}, {"oid": "8b436508f5eed7adc1620752c147672e1130cab3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b436508f5eed7adc1620752c147672e1130cab3", "message": "use multi tenant", "committedDate": "2020-12-18T10:05:13Z", "type": "commit"}, {"oid": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1cca0675b638d7b0c597dc1fb2b9eede735370d", "message": "format code", "committedDate": "2020-12-18T10:14:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MjQ0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546482441", "bodyText": "Can we only call super.configure(http) in this method?", "author": "chenrujun", "createdAt": "2020-12-21T02:44:06Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/converter/AADWebAppRefreshTokenConverterIT.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.converter;\n+\n+import com.azure.spring.aad.webapp.AzureOAuth2Configuration;\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.chrome.ChromeOptions;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.*;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADWebAppRefreshTokenConverterIT {\n+\n+    private final RestTemplate restTemplate = new RestTemplate();\n+\n+    static {\n+        final String directory = \"src/test/resources/driver/\";\n+        final String chromedriverLinux = \"chromedriver_linux64\";\n+        final String chromedriverWin32 = \"chromedriver_win32.exe\";\n+        final String chromedriverMac = \"chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        Process process = null;\n+        try {\n+            File dir = new File(directory);\n+            if (Pattern.matches(\"linux.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverLinux, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverLinux);\n+            } else if (Pattern.matches(\"windows.*\", osName)) {\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverWin32);\n+            } else if (Pattern.matches(\"mac.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverMac, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverMac);\n+            } else {\n+                throw new IllegalStateException(\"Can not recognize osName. osName = \" + System.getProperty(\"os.name\"));\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (InterruptedException | IOException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRefreshTokenConverter() {\n+        final String clientId = System.getenv(AAD_MULTI_TENANT_CLIENT_ID);\n+        final String clientSecret = System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET);\n+        try (AppRunner app = new AppRunner(DumbApp.class)) {\n+            ChromeOptions options = new ChromeOptions();\n+            options.addArguments(\"--incognito\");\n+            options.addArguments(\"--headless\");\n+            options.addArguments(\"--no-sandbox\");\n+            options.addArguments(\"--disable-dev-shm-usage\");\n+            WebDriver driver = new ChromeDriver(options);\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+\n+            app.property(\"azure.activedirectory.client-id\", clientId);\n+            app.property(\"azure.activedirectory.client-secret\", clientSecret);\n+            app.property(\"azure.activedirectory.user-group.allowed-groups\", \"group1,group2\");\n+            app.property(\"azure.activedirectory.authorization.office.scopes\", \"https://manage.office.com/ActivityFeed.Read\");\n+            app.start();\n+\n+            try {\n+                driver.get(app.root() + \"api/getAccessToken\");\n+                wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                    .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+                Thread.sleep(10000);\n+                driver.findElement(By.name(\"passwd\"))\n+                    .sendKeys(System.getenv(AAD_USER_PASSWORD_1) + Keys.ENTER);\n+                Thread.sleep(10000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(10000);\n+                Assert.assertTrue(driver.findElement(By.tagName(\"body\")).getText().indexOf(\"profile\") < 0);\n+                Assert.assertTrue(driver.findElement(By.tagName(\"body\")).getText().indexOf(\"https://manage.office.com/ActivityFeed.Read\") >= 0);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        }\n+    }\n+\n+    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+    @SpringBootApplication\n+    @RestController\n+    public static class DumbApp extends AzureOAuth2Configuration {\n+\n+        @Autowired\n+        private OAuth2UserService<OidcUserRequest, OidcUser> oidcUserService;\n+\n+        @Override\n+        protected void configure(HttpSecurity http) throws Exception {\n+            super.configure(http);\n+            http.authorizeRequests()\n+                .anyRequest().authenticated()\n+                .and()\n+                .oauth2Login()\n+                .userInfoEndpoint()\n+                .oidcUserService(oidcUserService);", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MjU3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546482579", "bodyText": "@GetMapping(value = \"api/getAccessToken\")\n        public Set<String> groupsCount(\n\nchange to\n@GetMapping(value = \"api/accessTokenScopes\")\n        public Set<String> accessTokenScopes(", "author": "chenrujun", "createdAt": "2020-12-21T02:44:49Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/converter/AADWebAppRefreshTokenConverterIT.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.converter;\n+\n+import com.azure.spring.aad.webapp.AzureOAuth2Configuration;\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.chrome.ChromeOptions;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.*;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADWebAppRefreshTokenConverterIT {\n+\n+    private final RestTemplate restTemplate = new RestTemplate();\n+\n+    static {\n+        final String directory = \"src/test/resources/driver/\";\n+        final String chromedriverLinux = \"chromedriver_linux64\";\n+        final String chromedriverWin32 = \"chromedriver_win32.exe\";\n+        final String chromedriverMac = \"chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        Process process = null;\n+        try {\n+            File dir = new File(directory);\n+            if (Pattern.matches(\"linux.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverLinux, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverLinux);\n+            } else if (Pattern.matches(\"windows.*\", osName)) {\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverWin32);\n+            } else if (Pattern.matches(\"mac.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverMac, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverMac);\n+            } else {\n+                throw new IllegalStateException(\"Can not recognize osName. osName = \" + System.getProperty(\"os.name\"));\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (InterruptedException | IOException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRefreshTokenConverter() {\n+        final String clientId = System.getenv(AAD_MULTI_TENANT_CLIENT_ID);\n+        final String clientSecret = System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET);\n+        try (AppRunner app = new AppRunner(DumbApp.class)) {\n+            ChromeOptions options = new ChromeOptions();\n+            options.addArguments(\"--incognito\");\n+            options.addArguments(\"--headless\");\n+            options.addArguments(\"--no-sandbox\");\n+            options.addArguments(\"--disable-dev-shm-usage\");\n+            WebDriver driver = new ChromeDriver(options);\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+\n+            app.property(\"azure.activedirectory.client-id\", clientId);\n+            app.property(\"azure.activedirectory.client-secret\", clientSecret);\n+            app.property(\"azure.activedirectory.user-group.allowed-groups\", \"group1,group2\");\n+            app.property(\"azure.activedirectory.authorization.office.scopes\", \"https://manage.office.com/ActivityFeed.Read\");\n+            app.start();\n+\n+            try {\n+                driver.get(app.root() + \"api/getAccessToken\");\n+                wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n+                    .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n+                Thread.sleep(10000);\n+                driver.findElement(By.name(\"passwd\"))\n+                    .sendKeys(System.getenv(AAD_USER_PASSWORD_1) + Keys.ENTER);\n+                Thread.sleep(10000);\n+                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n+                Thread.sleep(10000);\n+                Assert.assertTrue(driver.findElement(By.tagName(\"body\")).getText().indexOf(\"profile\") < 0);\n+                Assert.assertTrue(driver.findElement(By.tagName(\"body\")).getText().indexOf(\"https://manage.office.com/ActivityFeed.Read\") >= 0);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                driver.quit();\n+            }\n+        }\n+    }\n+\n+    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+    @SpringBootApplication\n+    @RestController\n+    public static class DumbApp extends AzureOAuth2Configuration {\n+\n+        @Autowired\n+        private OAuth2UserService<OidcUserRequest, OidcUser> oidcUserService;\n+\n+        @Override\n+        protected void configure(HttpSecurity http) throws Exception {\n+            super.configure(http);\n+            http.authorizeRequests()\n+                .anyRequest().authenticated()\n+                .and()\n+                .oauth2Login()\n+                .userInfoEndpoint()\n+                .oidcUserService(oidcUserService);\n+        }\n+\n+        @GetMapping(value = \"api/getAccessToken\")\n+        public Set<String> groupsCount(", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MjY1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546482651", "bodyText": "Can we reuse this part of code?", "author": "chenrujun", "createdAt": "2020-12-21T02:45:05Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/converter/AADWebAppRefreshTokenConverterIT.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.converter;\n+\n+import com.azure.spring.aad.webapp.AzureOAuth2Configuration;\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.chrome.ChromeOptions;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.*;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADWebAppRefreshTokenConverterIT {\n+\n+    private final RestTemplate restTemplate = new RestTemplate();\n+\n+    static {\n+        final String directory = \"src/test/resources/driver/\";\n+        final String chromedriverLinux = \"chromedriver_linux64\";\n+        final String chromedriverWin32 = \"chromedriver_win32.exe\";\n+        final String chromedriverMac = \"chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        Process process = null;\n+        try {\n+            File dir = new File(directory);\n+            if (Pattern.matches(\"linux.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverLinux, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverLinux);\n+            } else if (Pattern.matches(\"windows.*\", osName)) {\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverWin32);\n+            } else if (Pattern.matches(\"mac.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverMac, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverMac);\n+            } else {\n+                throw new IllegalStateException(\"Can not recognize osName. osName = \" + System.getProperty(\"os.name\"));\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (InterruptedException | IOException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRefreshTokenConverter() {\n+        final String clientId = System.getenv(AAD_MULTI_TENANT_CLIENT_ID);\n+        final String clientSecret = System.getenv(AAD_MULTI_TENANT_CLIENT_SECRET);\n+        try (AppRunner app = new AppRunner(DumbApp.class)) {\n+            ChromeOptions options = new ChromeOptions();\n+            options.addArguments(\"--incognito\");\n+            options.addArguments(\"--headless\");\n+            options.addArguments(\"--no-sandbox\");\n+            options.addArguments(\"--disable-dev-shm-usage\");\n+            WebDriver driver = new ChromeDriver(options);\n+            WebDriverWait wait = new WebDriverWait(driver, 10);\n+\n+            app.property(\"azure.activedirectory.client-id\", clientId);\n+            app.property(\"azure.activedirectory.client-secret\", clientSecret);\n+            app.property(\"azure.activedirectory.user-group.allowed-groups\", \"group1,group2\");\n+            app.property(\"azure.activedirectory.authorization.office.scopes\", \"https://manage.office.com/ActivityFeed.Read\");\n+            app.start();", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Mjc1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546482759", "bodyText": "Can we reuse this part of code?", "author": "chenrujun", "createdAt": "2020-12-21T02:45:31Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/converter/AADWebAppRefreshTokenConverterIT.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.converter;\n+\n+import com.azure.spring.aad.webapp.AzureOAuth2Configuration;\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.chrome.ChromeOptions;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcUserRequest;\n+import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.*;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class AADWebAppRefreshTokenConverterIT {\n+\n+    private final RestTemplate restTemplate = new RestTemplate();\n+\n+    static {\n+        final String directory = \"src/test/resources/driver/\";\n+        final String chromedriverLinux = \"chromedriver_linux64\";\n+        final String chromedriverWin32 = \"chromedriver_win32.exe\";\n+        final String chromedriverMac = \"chromedriver_mac64\";\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        Process process = null;\n+        try {\n+            File dir = new File(directory);\n+            if (Pattern.matches(\"linux.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverLinux, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverLinux);\n+            } else if (Pattern.matches(\"windows.*\", osName)) {\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverWin32);\n+            } else if (Pattern.matches(\"mac.*\", osName)) {\n+                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverMac, null, dir);\n+                process.waitFor();\n+                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverMac);\n+            } else {\n+                throw new IllegalStateException(\"Can not recognize osName. osName = \" + System.getProperty(\"os.name\"));\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (InterruptedException | IOException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            if (process != null) {\n+                process.destroy();\n+            }\n+        }", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NTQxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547075414", "bodyText": "Can we move it to OAuthLoginUtils.java?", "author": "chenrujun", "createdAt": "2020-12-22T05:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Mjc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Mjk4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546482980", "bodyText": "Can we delete this method, just make AZURE_CLIENT_REGISTRATION_ID  to public?", "author": "chenrujun", "createdAt": "2020-12-21T02:46:25Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -238,4 +240,8 @@ public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentRes\n         }\n     }\n \n+    public static String getAzureClientRegistrationId() {", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzM0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546483348", "bodyText": "Move this method and AZURE_CLIENT_REGISTRATION_ID to AzureClientRegistrationRepository.", "author": "chenrujun", "createdAt": "2020-12-21T02:48:12Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOauth2RefreshTokenGrantRequestEntityConverter.java", "diffHunk": "@@ -19,14 +19,21 @@\n     @SuppressWarnings(\"unchecked\")\n     public RequestEntity<?> convert(OAuth2RefreshTokenGrantRequest refreshTokenGrantRequest) {\n         RequestEntity<?> result = super.convert(refreshTokenGrantRequest);\n-        Optional.ofNullable(result)\n-            .map(HttpEntity::getBody)\n-            .map(b -> (MultiValueMap<String, String>) b)\n-            .ifPresent(body -> body.add(\"scope\", scopeValue(refreshTokenGrantRequest)));\n+        if (!isDefaultClient(refreshTokenGrantRequest)) {\n+            Optional.ofNullable(result)\n+                .map(HttpEntity::getBody)\n+                .map(b -> (MultiValueMap<String, String>) b)\n+                .ifPresent(body -> body.add(\"scope\", scopeValue(refreshTokenGrantRequest)));\n+        }\n         return result;\n     }\n \n     private String scopeValue(OAuth2RefreshTokenGrantRequest refreshTokenGrantRequest) {\n         return String.join(\" \", refreshTokenGrantRequest.getClientRegistration().getScopes());\n     }\n+\n+    private boolean isDefaultClient(OAuth2RefreshTokenGrantRequest request) {", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDMyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546484325", "bodyText": "Can we reuse this code fragment instead of just copy it?", "author": "chenrujun", "createdAt": "2020-12-21T02:52:47Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureOauth2RefreshTokenGrantRequestEntityConverterTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2RefreshToken;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class AzureOauth2RefreshTokenGrantRequestEntityConverterTest {\n+\n+    private AADWebAppClientRegistrationRepository clientRepo;\n+    private AzureOauth2RefreshTokenGrantRequestEntityConverter converter;\n+    private ClientRegistration azure;\n+    private ClientRegistration graph;\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+        .withUserConfiguration(AADWebAppConfiguration.class)\n+        .withPropertyValues(\"azure.activedirectory.authorization-server-uri = fake-uri\",\n+            \"azure.activedirectory.authorization.graph.scopes = Calendars.Read\",\n+            \"azure.activedirectory.client-id = fake-client-id\",\n+            \"azure.activedirectory.client-secret = fake-client-secret\",\n+            \"azure.activedirectory.tenant-id = fake-tenant-id\",\n+            \"azure.activedirectory.user-group.allowed-groups = group1, group2\");\n+\n+    private void getBeans(AssertableWebApplicationContext context) {\n+        clientRepo = context.getBean(AADWebAppClientRegistrationRepository.class);\n+        azure = clientRepo.findByRegistrationId(\"azure\");\n+        graph = clientRepo.findByRegistrationId(\"graph\");\n+    }\n+\n+    @Test\n+    public void addScopeForOtherClient() {\n+        contextRunner.run(context -> {\n+            getBeans(context);\n+            MultiValueMap<String, String> body = convertedBodyOf(createCodeGrantRequest(graph));\n+            assertEquals(\n+                \"Calendars.Read\",\n+                body.getFirst(\"scope\")\n+            );\n+        });\n+    }\n+\n+    @Test\n+    public void noScopeParamForDefaultClient() {\n+        contextRunner.run(context -> {\n+            getBeans(context);\n+            MultiValueMap<String, String> body = convertedBodyOf(createCodeGrantRequest(azure));\n+            assertNull(body.get(\"scope\"));\n+        });\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private MultiValueMap<String, String> convertedBodyOf(OAuth2RefreshTokenGrantRequest request) {\n+        AzureOauth2RefreshTokenGrantRequestEntityConverter converter =\n+            new AzureOauth2RefreshTokenGrantRequestEntityConverter();\n+        RequestEntity<?> entity = converter.convert(request);\n+        return (MultiValueMap<String, String>) Optional.ofNullable(entity)\n+            .map(HttpEntity::getBody)\n+            .orElse(null);", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDU5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546484590", "bodyText": "Can we reuse this code fragment instead of just copy it? For example: create an util class.", "author": "chenrujun", "createdAt": "2020-12-21T02:53:35Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureOauth2RefreshTokenGrantRequestEntityConverterTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2RefreshToken;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class AzureOauth2RefreshTokenGrantRequestEntityConverterTest {\n+\n+    private AADWebAppClientRegistrationRepository clientRepo;\n+    private AzureOauth2RefreshTokenGrantRequestEntityConverter converter;\n+    private ClientRegistration azure;\n+    private ClientRegistration graph;\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+        .withUserConfiguration(AADWebAppConfiguration.class)\n+        .withPropertyValues(\"azure.activedirectory.authorization-server-uri = fake-uri\",\n+            \"azure.activedirectory.authorization.graph.scopes = Calendars.Read\",\n+            \"azure.activedirectory.client-id = fake-client-id\",\n+            \"azure.activedirectory.client-secret = fake-client-secret\",\n+            \"azure.activedirectory.tenant-id = fake-tenant-id\",\n+            \"azure.activedirectory.user-group.allowed-groups = group1, group2\");", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDY5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r546484695", "bodyText": "createOAuth2RefreshTokenGrantRequest", "author": "chenrujun", "createdAt": "2020-12-21T02:53:53Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureOauth2RefreshTokenGrantRequestEntityConverterTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2RefreshToken;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class AzureOauth2RefreshTokenGrantRequestEntityConverterTest {\n+\n+    private AADWebAppClientRegistrationRepository clientRepo;\n+    private AzureOauth2RefreshTokenGrantRequestEntityConverter converter;\n+    private ClientRegistration azure;\n+    private ClientRegistration graph;\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+        .withUserConfiguration(AADWebAppConfiguration.class)\n+        .withPropertyValues(\"azure.activedirectory.authorization-server-uri = fake-uri\",\n+            \"azure.activedirectory.authorization.graph.scopes = Calendars.Read\",\n+            \"azure.activedirectory.client-id = fake-client-id\",\n+            \"azure.activedirectory.client-secret = fake-client-secret\",\n+            \"azure.activedirectory.tenant-id = fake-tenant-id\",\n+            \"azure.activedirectory.user-group.allowed-groups = group1, group2\");\n+\n+    private void getBeans(AssertableWebApplicationContext context) {\n+        clientRepo = context.getBean(AADWebAppClientRegistrationRepository.class);\n+        azure = clientRepo.findByRegistrationId(\"azure\");\n+        graph = clientRepo.findByRegistrationId(\"graph\");\n+    }\n+\n+    @Test\n+    public void addScopeForOtherClient() {\n+        contextRunner.run(context -> {\n+            getBeans(context);\n+            MultiValueMap<String, String> body = convertedBodyOf(createCodeGrantRequest(graph));\n+            assertEquals(\n+                \"Calendars.Read\",\n+                body.getFirst(\"scope\")\n+            );\n+        });\n+    }\n+\n+    @Test\n+    public void noScopeParamForDefaultClient() {\n+        contextRunner.run(context -> {\n+            getBeans(context);\n+            MultiValueMap<String, String> body = convertedBodyOf(createCodeGrantRequest(azure));\n+            assertNull(body.get(\"scope\"));\n+        });\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private MultiValueMap<String, String> convertedBodyOf(OAuth2RefreshTokenGrantRequest request) {\n+        AzureOauth2RefreshTokenGrantRequestEntityConverter converter =\n+            new AzureOauth2RefreshTokenGrantRequestEntityConverter();\n+        RequestEntity<?> entity = converter.convert(request);\n+        return (MultiValueMap<String, String>) Optional.ofNullable(entity)\n+            .map(HttpEntity::getBody)\n+            .orElse(null);\n+    }\n+\n+    private OAuth2RefreshTokenGrantRequest createCodeGrantRequest(ClientRegistration client) {", "originalCommit": "e1cca0675b638d7b0c597dc1fb2b9eede735370d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f6bcb175a1690769fcf76bb8e5cfe83cde123b73", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6bcb175a1690769fcf76bb8e5cfe83cde123b73", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into add-unit-test", "committedDate": "2020-12-21T03:16:52Z", "type": "commit"}, {"oid": "74b7e212682a0dcde901c84e2e2045de44a7d31a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/74b7e212682a0dcde901c84e2e2045de44a7d31a", "message": "change function and properties", "committedDate": "2020-12-21T08:17:26Z", "type": "commit"}, {"oid": "5179ff03ae9088167a1c0b58544c1a526c62be39", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5179ff03ae9088167a1c0b58544c1a526c62be39", "message": "reuse codes", "committedDate": "2020-12-21T08:18:46Z", "type": "commit"}, {"oid": "08c59c2a0012be916cf82a20be61f4490dba04eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08c59c2a0012be916cf82a20be61f4490dba04eb", "message": "edit test config to enable refreshTokenConverter", "committedDate": "2020-12-22T02:18:46Z", "type": "commit"}, {"oid": "20d5d033d6481f15618c1f237a285c2cf05044d0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/20d5d033d6481f15618c1f237a285c2cf05044d0", "message": "Merge branch 'master' into add-unit-test", "committedDate": "2020-12-22T02:44:21Z", "type": "commit"}, {"oid": "efa9f795f8ae04395fa9882db6a99aeae5749f2d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/efa9f795f8ae04395fa9882db6a99aeae5749f2d", "message": "edit default configure", "committedDate": "2020-12-22T03:24:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NjM4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547076384", "bodyText": "Move AZURE_CLIENT_REGISTRATION_ID to AADClientRegistrationRepository.java, it's more related to client registration.", "author": "chenrujun", "createdAt": "2020-12-22T05:30:28Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/AADClientRegistrationRepository.java", "diffHunk": "@@ -60,4 +61,9 @@ public boolean isClientNeedConsentWhenLogin(String id) {\n         ClientRegistration client = findByRegistrationId(id);\n         return client != null && isClientNeedConsentWhenLogin(client);\n     }\n+\n+    public static boolean isDefaultClient(ClientRegistration clientRegistration) {\n+        return AADWebAppConfiguration.AZURE_CLIENT_REGISTRATION_ID.equals(", "originalCommit": "efa9f795f8ae04395fa9882db6a99aeae5749f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NzI5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547077297", "bodyText": "After #18297 merged, AzureOauth2RefreshTokenGrantRequestEntityConverter.java can be deleted.", "author": "chenrujun", "createdAt": "2020-12-22T05:34:15Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureOauth2RefreshTokenGrantRequestEntityConverter.java", "diffHunk": "@@ -19,10 +20,12 @@\n     @SuppressWarnings(\"unchecked\")\n     public RequestEntity<?> convert(OAuth2RefreshTokenGrantRequest refreshTokenGrantRequest) {\n         RequestEntity<?> result = super.convert(refreshTokenGrantRequest);\n-        Optional.ofNullable(result)\n-            .map(HttpEntity::getBody)\n-            .map(b -> (MultiValueMap<String, String>) b)\n-            .ifPresent(body -> body.add(\"scope\", scopeValue(refreshTokenGrantRequest)));\n+        if (!AADClientRegistrationRepository.isDefaultClient(refreshTokenGrantRequest.getClientRegistration())) {\n+            Optional.ofNullable(result)\n+                .map(HttpEntity::getBody)\n+                .map(b -> (MultiValueMap<String, String>) b)\n+                .ifPresent(body -> body.add(\"scope\", scopeValue(refreshTokenGrantRequest)));\n+        }", "originalCommit": "efa9f795f8ae04395fa9882db6a99aeae5749f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3NzczNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547077735", "bodyText": "It should be a function, return a new WebApplicationContextRunner() on each call.", "author": "chenrujun", "createdAt": "2020-12-22T05:35:40Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/PropertiesUtils.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Optional;\n+\n+public class PropertiesUtils {\n+\n+    public static final WebApplicationContextRunner CONTEXT_RUNNER = new WebApplicationContextRunner()", "originalCommit": "efa9f795f8ae04395fa9882db6a99aeae5749f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3ODA2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547078066", "bodyText": "Rename to toMyltiValueMap", "author": "chenrujun", "createdAt": "2020-12-22T05:36:50Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/PropertiesUtils.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Optional;\n+\n+public class PropertiesUtils {\n+\n+    public static final WebApplicationContextRunner CONTEXT_RUNNER = new WebApplicationContextRunner()\n+        .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+        .withUserConfiguration(AADWebAppConfiguration.class)\n+        .withPropertyValues(\n+            \"azure.activedirectory.client-id = fake-client-id\",\n+            \"azure.activedirectory.client-secret = fake-client-secret\",\n+            \"azure.activedirectory.tenant-id = fake-tenant-id\",\n+            \"azure.activedirectory.user-group.allowed-groups = group1, group2\");\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static MultiValueMap<String, String> requestEntityConverter(RequestEntity<?> entity) {", "originalCommit": "efa9f795f8ae04395fa9882db6a99aeae5749f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3OTE5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547079191", "bodyText": "After #18297 merged, AzureOauth2RefreshTokenGrantRequestEntityConverterTest.java can be deleted.", "author": "chenrujun", "createdAt": "2020-12-22T05:41:03Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/AzureOauth2RefreshTokenGrantRequestEntityConverterTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.assertj.AssertableWebApplicationContext;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.security.oauth2.client.endpoint.OAuth2RefreshTokenGrantRequest;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.security.oauth2.core.OAuth2RefreshToken;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class AzureOauth2RefreshTokenGrantRequestEntityConverterTest {", "originalCommit": "efa9f795f8ae04395fa9882db6a99aeae5749f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c765cc57b503b3922736425d7ceeab4ddd5cb82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3c765cc57b503b3922736425d7ceeab4ddd5cb82", "message": "merge master", "committedDate": "2020-12-22T06:26:14Z", "type": "commit"}, {"oid": "bc73f259102564faccad5e9e2070f85cd4c88552", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc73f259102564faccad5e9e2070f85cd4c88552", "message": "remove refreshTokenConverter and test", "committedDate": "2020-12-22T07:03:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1MzMzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547153330", "bodyText": "Rename to RefreshTokenScopesIT", "author": "chenrujun", "createdAt": "2020-12-22T09:02:37Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/converter/AADWebAppRefreshTokenConverterIT.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.converter;\n+\n+import com.azure.test.oauth.OAuthLoginUtils;\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class AADWebAppRefreshTokenConverterIT {", "originalCommit": "bc73f259102564faccad5e9e2070f85cd4c88552", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1MzU4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547153580", "bodyText": "Add other clients, like azure, graph, arm.", "author": "chenrujun", "createdAt": "2020-12-22T09:03:10Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/converter/AADWebAppRefreshTokenConverterIT.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.aad.converter;\n+\n+import com.azure.test.oauth.OAuthLoginUtils;\n+import com.azure.test.utils.AppRunner;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;\n+import org.springframework.security.oauth2.core.OAuth2AccessToken;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class AADWebAppRefreshTokenConverterIT {\n+\n+    @Test\n+    public void testRefreshTokenConverter() {\n+        try (AppRunner app = new AppRunner(DumbApp.class)) {\n+            OAuthLoginUtils.addProperty(app);\n+            app.property(\"azure.activedirectory.authorization.office.scopes\", \"https://manage.office.com/ActivityFeed.Read\");\n+            List<String> endPoints = new ArrayList<>();\n+            endPoints.add(\"api/accessTokenScopes\");\n+            List<String> result = OAuthLoginUtils.get(app , endPoints);\n+            Assert.assertTrue(result.get(0).indexOf(\"profile\") < 0);\n+            Assert.assertTrue(result.get(0).indexOf(\"https://manage.office.com/ActivityFeed.Read\") >= 0);\n+\n+        }\n+    }\n+\n+    @EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)\n+    @SpringBootApplication\n+    @RestController\n+    public static class DumbApp {\n+\n+        @GetMapping(value = \"api/accessTokenScopes\")\n+        public Set<String> accessTokenScopes(\n+            @RegisteredOAuth2AuthorizedClient(\"office\") OAuth2AuthorizedClient authorizedClient) {", "originalCommit": "bc73f259102564faccad5e9e2070f85cd4c88552", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1NDI2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547154269", "bodyText": "Use Map<String, String> instead of List<String> to make it easier to read.", "author": "chenrujun", "createdAt": "2020-12-22T09:04:35Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/aad/login/AADLoginIT.java", "diffHunk": "@@ -29,101 +23,30 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-import java.io.File;\n-import java.io.IOException;\n import java.security.Principal;\n-import java.util.function.Consumer;\n-import java.util.regex.Pattern;\n-\n-import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_ID;\n-import static com.azure.test.oauth.OAuthUtils.AAD_MULTI_TENANT_CLIENT_SECRET;\n-import static com.azure.test.oauth.OAuthUtils.AAD_TENANT_ID_1;\n-import static com.azure.test.oauth.OAuthUtils.AAD_USER_NAME_1;\n-import static com.azure.test.oauth.OAuthUtils.AAD_USER_PASSWORD_1;\n-import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+import java.util.ArrayList;\n+import java.util.List;\n \n public class AADLoginIT {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AADLoginIT.class);\n \n-    static {\n-        final String directory = \"src/test/resources/driver/\";\n-        final String chromedriverLinux = \"chromedriver_linux64\";\n-        final String chromedriverWin32 = \"chromedriver_win32.exe\";\n-        final String chromedriverMac = \"chromedriver_mac64\";\n-        String osName = System.getProperty(\"os.name\").toLowerCase();\n-        Process process = null;\n-        try {\n-            File dir = new File(directory);\n-            if (Pattern.matches(\"linux.*\", osName)) {\n-                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverLinux, null, dir);\n-                process.waitFor();\n-                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverLinux);\n-            } else if (Pattern.matches(\"windows.*\", osName)) {\n-                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverWin32);\n-            } else if (Pattern.matches(\"mac.*\", osName)) {\n-                process = Runtime.getRuntime().exec(\"chmod +x \" + chromedriverMac, null, dir);\n-                process.waitFor();\n-                System.setProperty(ChromeDriverService.CHROME_DRIVER_EXE_PROPERTY, directory + chromedriverMac);\n-            } else {\n-                throw new IllegalStateException(\"Can not recognize osName. osName = \" + System.getProperty(\"os.name\"));\n-            }\n-        } catch (InterruptedException | IOException e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            if (process != null) {\n-                process.destroy();\n-            }\n-        }\n-    }\n-\n     @Test\n     public void loginTest() {\n-        this.runApp(app -> {\n-            ChromeOptions options = new ChromeOptions();\n-            options.addArguments(\"--incognito\");\n-            options.addArguments(\"--headless\");\n-            options.addArguments(\"--no-sandbox\");\n-            options.addArguments(\"--disable-dev-shm-usage\");\n-            WebDriver driver = new ChromeDriver(options);\n-            WebDriverWait wait = new WebDriverWait(driver, 10);\n-            try {\n-                driver.get(app.root() + \"api/home\");\n-                wait.until(presenceOfElementLocated(By.name(\"loginfmt\")))\n-                    .sendKeys(System.getenv(AAD_USER_NAME_1) + Keys.ENTER);\n-                Thread.sleep(10000);\n-                driver.findElement(By.name(\"passwd\"))\n-                      .sendKeys(System.getenv(AAD_USER_PASSWORD_1) + Keys.ENTER);\n-                Thread.sleep(10000);\n-                driver.findElement(By.cssSelector(\"input[type='submit']\")).click();\n-                Thread.sleep(10000);\n-                Assert.assertEquals(\"home\", driver.findElement(By.tagName(\"body\")).getText());\n \n-                driver.get(app.root() + \"api/group1\");\n-                Thread.sleep(1000);\n-                Assert.assertEquals(\"group1\", driver.findElement(By.tagName(\"body\")).getText());\n-\n-                driver.get(app.root() + \"api/status403\");\n-                Thread.sleep(1000);\n-                Assert.assertNotEquals(\"error\", driver.findElement(By.tagName(\"body\")).getText());\n-            } catch (InterruptedException e) {\n-                throw new RuntimeException(e);\n-            } finally {\n-                driver.quit();\n-            }\n-        });\n-    }\n+        try (AppRunner app = new AppRunner(DumbApp.class)) {\n+            OAuthLoginUtils.addProperty(app);\n+            List<String> endPoints = new ArrayList<>();\n+            endPoints.add(\"api/home\");\n+            endPoints.add(\"api/group1\");\n+            endPoints.add(\"api/status403\");\n+            List<String> result = OAuthLoginUtils.get(app , endPoints);", "originalCommit": "bc73f259102564faccad5e9e2070f85cd4c88552", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE1OTE3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547159172", "bodyText": "SeleniumTestUtils", "author": "chenrujun", "createdAt": "2020-12-22T09:14:35Z", "path": "sdk/spring/azure-spring-boot-test-aad/src/test/java/com/azure/test/oauth/OAuthLoginUtils.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.test.oauth;\n+\n+import com.azure.test.utils.AppRunner;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.Keys;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.chrome.ChromeDriver;\n+import org.openqa.selenium.chrome.ChromeDriverService;\n+import org.openqa.selenium.chrome.ChromeOptions;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static com.azure.test.oauth.OAuthUtils.*;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+\n+public class OAuthLoginUtils {", "originalCommit": "bc73f259102564faccad5e9e2070f85cd4c88552", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MDgzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547160832", "bodyText": "Add method in AADWebAppClientRegistrationRepository:\npublic static final boolean isDefaultClient(String clientId) {...}\n\nThe method can be used in AADWebAppConfiguration, too.", "author": "chenrujun", "createdAt": "2020-12-22T09:17:46Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AzureAuthorizedClientRepository.java", "diffHunk": "@@ -64,7 +64,10 @@ public void saveAuthorizedClient(OAuth2AuthorizedClient client,\n             OAuth2AuthorizedClient fakeAuthzClient = createFakeAuthzClient(azureClient, id, principal);\n             OAuth2AuthorizationContext.Builder contextBuilder =\n                 OAuth2AuthorizationContext.withAuthorizedClient(fakeAuthzClient);\n-            String[] scopes = repo.findByRegistrationId(id).getScopes().toArray(new String[0]);\n+            String[] scopes = null;\n+            if (!AADWebAppClientRegistrationRepository.AZURE_CLIENT_REGISTRATION_ID.equals(id)) {", "originalCommit": "bc73f259102564faccad5e9e2070f85cd4c88552", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE2MTQzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18269#discussion_r547161430", "bodyText": "Rename to toMyltiValueMap", "author": "chenrujun", "createdAt": "2020-12-22T09:18:55Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapp/PropertiesUtils.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.RequestEntity;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Optional;\n+\n+public class PropertiesUtils {\n+\n+    public static WebApplicationContextRunner getContextRunner() {\n+        return new WebApplicationContextRunner()\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .withUserConfiguration(AADWebAppConfiguration.class)\n+            .withPropertyValues(\n+                \"azure.activedirectory.client-id = fake-client-id\",\n+                \"azure.activedirectory.client-secret = fake-client-secret\",\n+                \"azure.activedirectory.tenant-id = fake-tenant-id\",\n+                \"azure.activedirectory.user-group.allowed-groups = group1, group2\");\n+    }\n+\n+\n+    @SuppressWarnings(\"unchecked\")", "originalCommit": "bc73f259102564faccad5e9e2070f85cd4c88552", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}