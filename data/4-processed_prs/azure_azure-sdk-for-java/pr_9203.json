{"pr_number": 9203, "pr_title": "Use custom serialization and deserialization to flatten regexFlags.", "pr_createdAt": "2020-03-18T22:18:23Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9203", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxOTEwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394719102", "bodyText": "This isn't marked as a Java file", "author": "alzimmermsft", "createdAt": "2020-03-19T00:23:34Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/util/RegexFlagsUtils", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.util;", "originalCommit": "c0db5f2148a9ccf7c02b66e703f01e89e61f49e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxOTg1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394719851", "bodyText": "I am debugging this for a while", "author": "sima-zhu", "createdAt": "2020-03-19T00:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcxOTEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyOTU3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394729576", "bodyText": "This won't work as expected for a few reasons.\n\nIf regexFlags is null this will return \"null\".\nIf regexFlags has values it will result in \"[val1.toString(), val2.toString(), ...]\".\n\nThis would be a better option.\nif (CoreUtils.isNullOrEmpty(regexFlags)) {\n    return null;\n}\n\nreturn Arrays.stream(regexFlags)\n    .map(RegexFlags::toString)\n    .collect(Collectors.joining(\"|\"));", "author": "alzimmermsft", "createdAt": "2020-03-19T01:01:27Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/util/RegexFlagsUtils", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.util;\n+\n+import com.azure.search.documents.models.RegexFlags;\n+import java.util.Arrays;\n+\n+/**\n+ * Utility class for {@link RegexFlags} complex operations.\n+ */\n+public final class RegexFlagsUtils {\n+\n+    /**\n+     * Combines a list of {@link RegexFlags} into one separated by \"|\".\n+     * E.g. {@code \"CANON_EQ|CASE_INSENSITIVE|COMMENTS\"}\n+     *\n+     * @param regexFlags A list a {@link RegexFlags} to combine.\n+     * @return New combined {@link RegexFlags} separated by vertical bar.\n+     */\n+    public static RegexFlags combineRegexFlags(RegexFlags... regexFlags) {\n+        return RegexFlags.fromString(String.join(\"|\", Arrays.deepToString(regexFlags)));", "originalCommit": "c0db5f2148a9ccf7c02b66e703f01e89e61f49e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTA5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394731093", "bodyText": "I'm a bit worried that RegexFlags is an ExpandableStringEnum as this may grow unbounded with the number of permutations available and will remain in memory as it is backed by a static dictionary.\n@brjohnstmsft does the ordering of the regex flags matter? If not we should sort before joining as that reduces the number of possible combinations that will be stored in static memory.", "author": "alzimmermsft", "createdAt": "2020-03-19T01:05:02Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/util/RegexFlagsUtils", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.util;\n+\n+import com.azure.search.documents.models.RegexFlags;\n+import java.util.Arrays;\n+\n+/**\n+ * Utility class for {@link RegexFlags} complex operations.\n+ */\n+public final class RegexFlagsUtils {\n+\n+    /**\n+     * Combines a list of {@link RegexFlags} into one separated by \"|\".\n+     * E.g. {@code \"CANON_EQ|CASE_INSENSITIVE|COMMENTS\"}\n+     *\n+     * @param regexFlags A list a {@link RegexFlags} to combine.\n+     * @return New combined {@link RegexFlags} separated by vertical bar.\n+     */\n+    public static RegexFlags combineRegexFlags(RegexFlags... regexFlags) {", "originalCommit": "c0db5f2148a9ccf7c02b66e703f01e89e61f49e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2MzAwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394763007", "bodyText": "The ordering shouldn't matter, but maybe we should consider modeling the flags properties of PatternAnalyzer and PatternTokenizer as collections instead of introducing this combining primitive? I believe @xirzec is taking this approach in TypeScript.", "author": "brjohnstmsft", "createdAt": "2020-03-19T02:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MTAzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394771037", "bodyText": "I have considered to do this. These two classes are final auto-gen classes, we have to do some transformation work if adding this function over there.", "author": "sima-zhu", "createdAt": "2020-03-19T03:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NjM3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395156373", "bodyText": "Sync with @xirzec , I will move this function to the best place after discussing with Jeff.", "author": "sima-zhu", "createdAt": "2020-03-19T16:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394731866", "bodyText": "Would the service return a combined regex flag that a user may want to split up? If so should we offer a splitRegexFlags class that has this API shape:\npublic static RegexFlags[] splitRegexFlags(RegexFlags combinedRegexFlag)", "author": "alzimmermsft", "createdAt": "2020-03-19T01:06:21Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/util/RegexFlagsUtils", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.util;\n+\n+import com.azure.search.documents.models.RegexFlags;\n+import java.util.Arrays;\n+\n+/**\n+ * Utility class for {@link RegexFlags} complex operations.\n+ */\n+public final class RegexFlagsUtils {\n+\n+    /**\n+     * Combines a list of {@link RegexFlags} into one separated by \"|\".\n+     * E.g. {@code \"CANON_EQ|CASE_INSENSITIVE|COMMENTS\"}\n+     *\n+     * @param regexFlags A list a {@link RegexFlags} to combine.\n+     * @return New combined {@link RegexFlags} separated by vertical bar.\n+     */\n+    public static RegexFlags combineRegexFlags(RegexFlags... regexFlags) {", "originalCommit": "c0db5f2148a9ccf7c02b66e703f01e89e61f49e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2MzEyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394763125", "bodyText": "Nobody has asked for this, but the scenario makes sense. It seems like one more reason to just model the appropriate properties as lists in the first place.", "author": "brjohnstmsft", "createdAt": "2020-03-19T02:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NjY4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395156682", "bodyText": "This is nice to have feature and addon. I would prefer to have it after GA", "author": "sima-zhu", "createdAt": "2020-03-19T16:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0OTYzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395249639", "bodyText": "@sima-zhu If you model flags as string collections, you'll need to implement the splitting logic for deserialization anyway. This should be done sooner rather than later.", "author": "brjohnstmsft", "createdAt": "2020-03-19T18:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMTg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMjE2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r394732168", "bodyText": "Should add some tests that target RegexFlagsUtils directly.", "author": "alzimmermsft", "createdAt": "2020-03-19T01:06:55Z", "path": "sdk/search/azure-search/src/test/java/com/azure/search/documents/CustomAnalyzerSyncTests.java", "diffHunk": "@@ -313,6 +314,20 @@ public void canUseAllAnalysisComponentNames() {\n         assertCustomAnalysisComponentsEqual(index, createdIndex);\n     }\n \n+    @Test\n+    public void canUseCombinedRegexFlags() {", "originalCommit": "c0db5f2148a9ccf7c02b66e703f01e89e61f49e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26cff35cbe135c186c24b748f05afdea13bf77a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/26cff35cbe135c186c24b748f05afdea13bf77a8", "message": "Makes changes on model level", "committedDate": "2020-03-20T17:24:45Z", "type": "forcePushed"}, {"oid": "ea60845bcd3420951a87f9483070ec1086e3967e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea60845bcd3420951a87f9483070ec1086e3967e", "message": "Makes changes on model level", "committedDate": "2020-03-20T17:27:31Z", "type": "forcePushed"}, {"oid": "0b6af4738b438a2eb087a560c2cd3b6bbc2167c3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b6af4738b438a2eb087a560c2cd3b6bbc2167c3", "message": "Makes changes on model level", "committedDate": "2020-03-20T17:30:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5ODc0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395798742", "bodyText": "This won't be null safe which is different behavior than before.", "author": "alzimmermsft", "createdAt": "2020-03-20T17:49:42Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/models/PatternAnalyzer.java", "diffHunk": "@@ -112,8 +114,9 @@ public RegexFlags getFlags() {\n      * @param flags the flags value to set.\n      * @return the PatternAnalyzer object itself.\n      */\n-    public PatternAnalyzer setFlags(RegexFlags flags) {\n-        this.flags = flags;\n+    public PatternAnalyzer setFlags(Collection<RegexFlags> flags) {\n+        String newRegexFlags = flags.stream().map(RegexFlags::toString).collect(Collectors.joining(\"|\"));", "originalCommit": "0b6af4738b438a2eb087a560c2cd3b6bbc2167c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwODQyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395808426", "bodyText": "Yes, it will throw NPE. Is it better to make it silent if pass null?", "author": "sima-zhu", "createdAt": "2020-03-20T18:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5ODc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzUyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395823523", "bodyText": "null was an allowable configuration before, this changes it so that once this is set you can never clear it out.", "author": "alzimmermsft", "createdAt": "2020-03-20T18:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5ODc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5OTI3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395799276", "bodyText": "This API may be better as setFlags(RegexFlags... flags).", "author": "alzimmermsft", "createdAt": "2020-03-20T17:50:39Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/models/PatternAnalyzer.java", "diffHunk": "@@ -112,8 +114,9 @@ public RegexFlags getFlags() {\n      * @param flags the flags value to set.\n      * @return the PatternAnalyzer object itself.\n      */\n-    public PatternAnalyzer setFlags(RegexFlags flags) {\n-        this.flags = flags;\n+    public PatternAnalyzer setFlags(Collection<RegexFlags> flags) {", "originalCommit": "0b6af4738b438a2eb087a560c2cd3b6bbc2167c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395809572", "bodyText": "The reason I choose this because we do not need to convert if passing RegexFlags.values()", "author": "sima-zhu", "createdAt": "2020-03-20T18:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5OTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjk1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395822954", "bodyText": "Would this be a common scenario though? Also, I think this would be likely to fail as values() would contain all the unioned RegexFlags as well.", "author": "alzimmermsft", "createdAt": "2020-03-20T18:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5OTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzE4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r395823184", "bodyText": "@brjohnstmsft what does the service do if the same flag is passed multiple times.", "author": "alzimmermsft", "createdAt": "2020-03-20T18:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5OTI3Ng=="}], "type": "inlineReview"}, {"oid": "b7cf527c0ab789407f10b03a2c0858656f3141bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7cf527c0ab789407f10b03a2c0858656f3141bf", "message": "Make changes on swagger", "committedDate": "2020-03-23T22:12:26Z", "type": "commit"}, {"oid": "029df58698e395c90a2c0b3a13bd5b3967d5a224", "url": "https://github.com/Azure/azure-sdk-for-java/commit/029df58698e395c90a2c0b3a13bd5b3967d5a224", "message": "Initial draft for custom serializer and deserializer", "committedDate": "2020-03-24T23:47:55Z", "type": "commit"}, {"oid": "029df58698e395c90a2c0b3a13bd5b3967d5a224", "url": "https://github.com/Azure/azure-sdk-for-java/commit/029df58698e395c90a2c0b3a13bd5b3967d5a224", "message": "Initial draft for custom serializer and deserializer", "committedDate": "2020-03-24T23:47:55Z", "type": "forcePushed"}, {"oid": "c776653a5bf9bdb8b9b4dc0aec1e845a1ea481ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c776653a5bf9bdb8b9b4dc0aec1e845a1ea481ea", "message": "Remove extra changes", "committedDate": "2020-03-25T14:24:12Z", "type": "commit"}, {"oid": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "url": "https://github.com/Azure/azure-sdk-for-java/commit/00a05a646b789eae5ee1e785a607fd7bea1b6f91", "message": "Regen code", "committedDate": "2020-03-25T14:37:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4Njk4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397986986", "bodyText": "Why are we requiring dataformat.xml?", "author": "alzimmermsft", "createdAt": "2020-03-25T16:19:47Z", "path": "sdk/search/azure-search/src/main/java/module-info.java", "diffHunk": "@@ -5,12 +5,14 @@\n     requires transitive com.azure.core;\n     requires com.fasterxml.jackson.datatype.jsr310;\n     requires jakarta.activation;\n+    requires com.fasterxml.jackson.dataformat.xml;", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMDgyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398020822", "bodyText": "It is useless. Removed.", "author": "sima-zhu", "createdAt": "2020-03-25T17:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4Njk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MjY0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397992648", "bodyText": "What happens if this is called directly instead of being called through serializeWithType? Is it missing the start and end object pieces?", "author": "alzimmermsft", "createdAt": "2020-03-25T16:27:12Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerSerializer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom serializer for {@link PatternAnalyzer}, which flatten the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerSerializer extends JsonSerializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param analyzer The {@link PatternAnalyzer} needs to serialize\n+     * @param gen Generator used to output resulting Json content\n+     * @param serializers Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @param typeSer Type serializer to use for including type information\n+     * @throws IOException If IO operation error occurs.\n+     */\n+    @Override\n+    public void serializeWithType(PatternAnalyzer analyzer, JsonGenerator gen, SerializerProvider serializers,\n+        TypeSerializer typeSer) throws IOException {\n+        gen.writeStartObject();\n+        gen.writeStringField(typeSer.getPropertyName(), typeSer.getTypeIdResolver().idFromValue(analyzer));\n+        serialize(analyzer, gen, serializers);\n+        gen.writeEndObject();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param analyzer The {@link PatternAnalyzer} needs to serialize\n+     * @param jsonGenerator Generator used to output resulting Json content\n+     * @param serializerProvider Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @throws IOException If IO operation error occurs.\n+     */\n+    @Override\n+    public void serialize(final PatternAnalyzer analyzer, final JsonGenerator jsonGenerator,", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjE3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398022172", "bodyText": "For polymorphism type, it is asking to add TypeIndoName and TypeInfoId for differentiate the base and sub classes.\n [\"@odata.type\": \"#Microsoft.Azure.Search.PatternAnalyzer\" ] is added before serialize the rest. These info are inside of the para TypeSerializer", "author": "sima-zhu", "createdAt": "2020-03-25T17:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MjY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MzIxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397993214", "bodyText": "Should any logic in here just be added into serialize and this acts as a proxy to serialize.", "author": "alzimmermsft", "createdAt": "2020-03-25T16:27:55Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerSerializer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom serializer for {@link PatternAnalyzer}, which flatten the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerSerializer extends JsonSerializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param analyzer The {@link PatternAnalyzer} needs to serialize\n+     * @param gen Generator used to output resulting Json content\n+     * @param serializers Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @param typeSer Type serializer to use for including type information\n+     * @throws IOException If IO operation error occurs.\n+     */\n+    @Override\n+    public void serializeWithType(PatternAnalyzer analyzer, JsonGenerator gen, SerializerProvider serializers,\n+        TypeSerializer typeSer) throws IOException {\n+        gen.writeStartObject();\n+        gen.writeStringField(typeSer.getPropertyName(), typeSer.getTypeIdResolver().idFromValue(analyzer));\n+        serialize(analyzer, gen, serializers);\n+        gen.writeEndObject();\n+    }", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjg1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398022854", "bodyText": "Not really, the typeInfoId and typeInfoName is inside of TypeSerializer.\n[\"@odata.type\": \"#Microsoft.Azure.Search.PatternAnalyzer\" ]", "author": "sima-zhu", "createdAt": "2020-03-25T17:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MzIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5Mzg1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397993858", "bodyText": "What happens if flattenFlags is null?", "author": "alzimmermsft", "createdAt": "2020-03-25T16:28:48Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerDeserializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternAnalyzer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerDeserializer extends JsonDeserializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternAnalyzer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        JsonNode flattenFlags = root.get(\"flags\");\n+        List<RegexFlags> regexFlags = Arrays.stream(flattenFlags.asText().split(DELIMITER))", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzI1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398023251", "bodyText": "That's a miss. Will double check null cases for all.", "author": "sima-zhu", "createdAt": "2020-03-25T17:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5Mzg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NTkwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397995905", "bodyText": "Does this need to live outside of the fields.hasNext() loop?", "author": "alzimmermsft", "createdAt": "2020-03-25T16:31:32Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerDeserializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternAnalyzer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerDeserializer extends JsonDeserializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternAnalyzer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        JsonNode flattenFlags = root.get(\"flags\");\n+        List<RegexFlags> regexFlags = Arrays.stream(flattenFlags.asText().split(DELIMITER))", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMzk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398023998", "bodyText": "No. I forgot to move it into method", "author": "sima-zhu", "createdAt": "2020-03-25T17:09:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NzM0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397997340", "bodyText": "What if stopwords is null?", "author": "alzimmermsft", "createdAt": "2020-03-25T16:33:25Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerDeserializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternAnalyzer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerDeserializer extends JsonDeserializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternAnalyzer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        JsonNode flattenFlags = root.get(\"flags\");\n+        List<RegexFlags> regexFlags = Arrays.stream(flattenFlags.asText().split(DELIMITER))\n+            .map(RegexFlags::fromString).collect(Collectors.toList());\n+\n+        Iterator<Map.Entry<String, JsonNode>> fields = root.fields();\n+        PatternAnalyzer analyzer = new PatternAnalyzer();\n+        while (fields.hasNext()) {\n+            Map.Entry<String, JsonNode> field = fields.next();\n+            if (\"name\".equals(field.getKey())) {\n+                analyzer.setName(field.getValue().asText());\n+            } else if (\"pattern\".equals(field.getKey())) {\n+                analyzer.setPattern(field.getValue().asText());\n+            } else if (\"flags\".equals(field.getKey())) {\n+                analyzer.setFlags(regexFlags);\n+            } else if (\"lowercase\".equals(field.getKey())){\n+                analyzer.setLowerCaseTerms(field.getValue().asBoolean());\n+            } else if (\"stopwords\".equals(field.getKey())) {\n+                List<String> stopWords = new ArrayList<>();\n+                field.getValue().forEach(", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNDkyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398024922", "bodyText": "Then the check of  \"stopwords\".equals(field.getKey()) will return false.", "author": "sima-zhu", "createdAt": "2020-03-25T17:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NzM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0NTMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398145317", "bodyText": "So if the JSON contains the following we'll never have a stopwords field?\n{ \"stopwords\": null }", "author": "alzimmermsft", "createdAt": "2020-03-25T20:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NzM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5ODY0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397998649", "bodyText": "Could this be done in a stream?\nanalyzer.setStopwords(field.getValue().stream()\n    .map(node -> node.asText()).collect(Collectors.toList()));", "author": "alzimmermsft", "createdAt": "2020-03-25T16:35:08Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerDeserializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternAnalyzer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerDeserializer extends JsonDeserializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternAnalyzer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        JsonNode flattenFlags = root.get(\"flags\");\n+        List<RegexFlags> regexFlags = Arrays.stream(flattenFlags.asText().split(DELIMITER))\n+            .map(RegexFlags::fromString).collect(Collectors.toList());\n+\n+        Iterator<Map.Entry<String, JsonNode>> fields = root.fields();\n+        PatternAnalyzer analyzer = new PatternAnalyzer();\n+        while (fields.hasNext()) {\n+            Map.Entry<String, JsonNode> field = fields.next();\n+            if (\"name\".equals(field.getKey())) {\n+                analyzer.setName(field.getValue().asText());\n+            } else if (\"pattern\".equals(field.getKey())) {\n+                analyzer.setPattern(field.getValue().asText());\n+            } else if (\"flags\".equals(field.getKey())) {\n+                analyzer.setFlags(regexFlags);\n+            } else if (\"lowercase\".equals(field.getKey())){\n+                analyzer.setLowerCaseTerms(field.getValue().asBoolean());\n+            } else if (\"stopwords\".equals(field.getKey())) {\n+                List<String> stopWords = new ArrayList<>();\n+                field.getValue().forEach(\n+                    jsonNode -> stopWords.add(jsonNode.asText())\n+                );\n+                analyzer.setStopwords(stopWords);", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDc2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398034760", "bodyText": "Double checked code. field.getVaule returns iterator.", "author": "sima-zhu", "createdAt": "2020-03-25T17:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5ODY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5OTM1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r397999356", "bodyText": "Does this need to be escaped?", "author": "alzimmermsft", "createdAt": "2020-03-25T16:36:00Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerDeserializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternAnalyzer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerDeserializer extends JsonDeserializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"\\\\|\";", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNTY5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398025698", "bodyText": "That's how String.split method works.", "author": "sima-zhu", "createdAt": "2020-03-25T17:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5OTM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMDI3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398000275", "bodyText": "What is the output when analyzer is null?", "author": "alzimmermsft", "createdAt": "2020-03-25T16:37:18Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerSerializer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom serializer for {@link PatternAnalyzer}, which flatten the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerSerializer extends JsonSerializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param analyzer The {@link PatternAnalyzer} needs to serialize\n+     * @param gen Generator used to output resulting Json content\n+     * @param serializers Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @param typeSer Type serializer to use for including type information\n+     * @throws IOException If IO operation error occurs.\n+     */\n+    @Override\n+    public void serializeWithType(PatternAnalyzer analyzer, JsonGenerator gen, SerializerProvider serializers,\n+        TypeSerializer typeSer) throws IOException {\n+        gen.writeStartObject();\n+        gen.writeStringField(typeSer.getPropertyName(), typeSer.getTypeIdResolver().idFromValue(analyzer));\n+        serialize(analyzer, gen, serializers);\n+        gen.writeEndObject();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param analyzer The {@link PatternAnalyzer} needs to serialize\n+     * @param jsonGenerator Generator used to output resulting Json content\n+     * @param serializerProvider Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @throws IOException If IO operation error occurs.\n+     */\n+    @Override\n+    public void serialize(final PatternAnalyzer analyzer, final JsonGenerator jsonGenerator,\n+        final SerializerProvider serializerProvider) throws IOException {\n+        if (analyzer == null) {\n+            return;\n+        }", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNzE0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398037143", "bodyText": "I cannot have the case. Index.setAnalyzer takes list\nThere is no way to have a null PatternAnalyzer pass in.\nI plan to remove it.", "author": "sima-zhu", "createdAt": "2020-03-25T17:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMDI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMTk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398001965", "bodyText": "Same questions as the other deserializer about flags being null and this needing to be outside of the JSON node loop.", "author": "alzimmermsft", "createdAt": "2020-03-25T16:39:31Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternTokenizerDeserializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternTokenizer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternTokenizerDeserializer extends JsonDeserializer<PatternTokenizer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternTokenizer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        JsonNode flattenFlags = root.get(\"flags\");\n+        List<RegexFlags> regexFlags = Arrays.stream(flattenFlags.asText().split(DELIMITER))\n+            .map(RegexFlags::fromString).collect(Collectors.toList());", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMzA2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398003066", "bodyText": "How does asInt() handle if getValue() is null? group is a nullable Integer type so it could come back as null from my understanding.", "author": "alzimmermsft", "createdAt": "2020-03-25T16:40:58Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternTokenizerDeserializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternTokenizer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternTokenizerDeserializer extends JsonDeserializer<PatternTokenizer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternTokenizer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        JsonNode flattenFlags = root.get(\"flags\");\n+        List<RegexFlags> regexFlags = Arrays.stream(flattenFlags.asText().split(DELIMITER))\n+            .map(RegexFlags::fromString).collect(Collectors.toList());\n+        Iterator<Map.Entry<String, JsonNode>> fields = root.fields();\n+        PatternTokenizer tokenizer = new PatternTokenizer();\n+        while (fields.hasNext()) {\n+            Map.Entry<String, JsonNode> field = fields.next();\n+            if (\"name\".equals(field.getKey())) {\n+                tokenizer.setName(field.getValue().asText());\n+            } else if (\"pattern\".equals(field.getKey())) {\n+                tokenizer.setPattern(field.getValue().asText());\n+            } else if (\"flags\".equals(field.getKey())) {\n+                tokenizer.setFlags(regexFlags);\n+            } else if (\"group\".equals(field.getKey())){\n+                tokenizer.setGroup(field.getValue().asInt());", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyODQwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398028408", "bodyText": "I don't think the case exists.\nIf the field value is null, then there is no need to generate field key. If the case exists for required field, then we need to have null or empty checking for the field.", "author": "sima-zhu", "createdAt": "2020-03-25T17:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMzA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMzM0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398003341", "bodyText": "Same questions.", "author": "alzimmermsft", "createdAt": "2020-03-25T16:41:22Z", "path": "sdk/search/azure-search/src/main/java/com/azure/search/documents/implementation/util/CustomPatternTokenizerSerializer.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom serializer for {@link PatternTokenizer}, which flatten the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternTokenizerSerializer extends JsonSerializer<PatternTokenizer> {\n+    private static final String DELIMITER = \"|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param tokenizer The {@link PatternTokenizer} needs to serialize.\n+     * @param gen Generator used to output resulting Json content\n+     * @param serializers Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @param typeSer Type serializer to use for including type information\n+     * @throws IOException if IO operation error occurs.\n+     */\n+    @Override\n+    public void serializeWithType(PatternTokenizer tokenizer, JsonGenerator gen, SerializerProvider serializers,\n+        TypeSerializer typeSer) throws IOException {\n+        gen.writeStartObject();\n+        gen.writeStringField(typeSer.getPropertyName(), typeSer.getTypeIdResolver().idFromValue(tokenizer));\n+        serialize(tokenizer, gen, serializers);\n+        gen.writeEndObject();", "originalCommit": "00a05a646b789eae5ee1e785a607fd7bea1b6f91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eabadf3f3cfd85b45c1318b95334b84be75f2da6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eabadf3f3cfd85b45c1318b95334b84be75f2da6", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into regex_flags", "committedDate": "2020-03-25T17:01:07Z", "type": "commit"}, {"oid": "c7ba8b0eec5694e689f931a11494283fd49e069d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c7ba8b0eec5694e689f931a11494283fd49e069d", "message": "Make changes for corner case checking", "committedDate": "2020-03-25T17:28:10Z", "type": "commit"}, {"oid": "5385daf753272f626d708c69fbfe540a9c66659a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5385daf753272f626d708c69fbfe540a9c66659a", "message": "Added more tests to cover corner cases", "committedDate": "2020-03-25T19:38:13Z", "type": "commit"}, {"oid": "ff1d43438e0eb1a92bbf4c5892a341c10934dc5e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff1d43438e0eb1a92bbf4c5892a341c10934dc5e", "message": "Fixed linting", "committedDate": "2020-03-25T20:07:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNjA2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398236065", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(tokenizer.getName() != null) {\n          \n          \n            \n                    if (tokenizer.getName() != null) {", "author": "alzimmermsft", "createdAt": "2020-03-25T23:41:17Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/CustomPatternTokenizerSerializer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import java.io.IOException;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom serializer for {@link PatternTokenizer}, which flatten the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternTokenizerSerializer extends JsonSerializer<PatternTokenizer> {\n+    private static final String DELIMITER = \"|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param tokenizer The {@link PatternTokenizer} needs to serialize.\n+     * @param gen Generator used to output resulting Json content\n+     * @param serializers Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @param typeSer Type serializer to use for including type information\n+     * @throws IOException if IO operation error occurs.\n+     */\n+    @Override\n+    public void serializeWithType(PatternTokenizer tokenizer, JsonGenerator gen, SerializerProvider serializers,\n+        TypeSerializer typeSer) throws IOException {\n+        gen.writeStartObject();\n+        gen.writeStringField(typeSer.getPropertyName(), typeSer.getTypeIdResolver().idFromValue(tokenizer));\n+        serialize(tokenizer, gen, serializers);\n+        gen.writeEndObject();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @param tokenizer The {@link PatternTokenizer} needs to serialize.\n+     * @param jsonGenerator Generator used to output resulting Json content\n+     * @param serializerProvider Provider that can be used to get serializers for\n+     *   serializing Objects value contains, if any.\n+     * @throws IOException if IO operation error occurs.\n+     */\n+    @Override\n+    public void serialize(final PatternTokenizer tokenizer, final JsonGenerator jsonGenerator,\n+        final SerializerProvider serializerProvider) throws IOException {\n+        if(tokenizer.getName() != null) {", "originalCommit": "ff1d43438e0eb1a92bbf4c5892a341c10934dc5e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNzA3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398237078", "bodyText": "Could we use !field.getValue().isNull()?", "author": "alzimmermsft", "createdAt": "2020-03-25T23:44:23Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/CustomPatternAnalyzerDeserializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternAnalyzer;\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternAnalyzer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternAnalyzerDeserializer extends JsonDeserializer<PatternAnalyzer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternAnalyzer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+\n+        Iterator<Map.Entry<String, JsonNode>> fields = root.fields();\n+        PatternAnalyzer analyzer = new PatternAnalyzer();\n+        while (fields.hasNext()) {\n+            Map.Entry<String, JsonNode> field = fields.next();\n+            if (\"name\".equals(field.getKey())) {\n+                analyzer.setName(field.getValue().asText());\n+            } else if (\"pattern\".equals(field.getKey())) {\n+                analyzer.setPattern(field.getValue().asText());\n+            } else if (\"flags\".equals(field.getKey()) && !\"null\".equals(field.getValue().asText())) {", "originalCommit": "ff1d43438e0eb1a92bbf4c5892a341c10934dc5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MjYyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398252624", "bodyText": "\"null\" is a string type in json", "author": "sima-zhu", "createdAt": "2020-03-26T00:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNzA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398238009", "bodyText": "Do we have concern that asInt will return int's default of 0 if the JSON value is null?", "author": "alzimmermsft", "createdAt": "2020-03-25T23:47:21Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/CustomPatternTokenizerDeserializer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternTokenizer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternTokenizerDeserializer extends JsonDeserializer<PatternTokenizer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternTokenizer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        Iterator<Map.Entry<String, JsonNode>> fields = root.fields();\n+        PatternTokenizer tokenizer = new PatternTokenizer();\n+        while (fields.hasNext()) {\n+            Map.Entry<String, JsonNode> field = fields.next();\n+            if (\"name\".equals(field.getKey())) {\n+                tokenizer.setName(field.getValue().asText());\n+            } else if (\"pattern\".equals(field.getKey())) {\n+                tokenizer.setPattern(field.getValue().asText());\n+            } else if (\"flags\".equals(field.getKey()) && !\"null\".equals(field.getValue().asText())) {\n+                List<RegexFlags> regexFlags = Arrays.stream(field.getValue().asText().split(DELIMITER))\n+                    .map(RegexFlags::fromString).collect(Collectors.toList());\n+                tokenizer.setFlags(regexFlags);\n+            } else if (\"group\".equals(field.getKey())){\n+                tokenizer.setGroup(field.getValue().asInt());", "originalCommit": "ff1d43438e0eb1a92bbf4c5892a341c10934dc5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODQxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398238418", "bodyText": "Don't know if the service would return this.", "author": "alzimmermsft", "createdAt": "2020-03-25T23:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNTExMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398725113", "bodyText": "Based on the test of null group, service does not return group back if it is null.", "author": "sima-zhu", "createdAt": "2020-03-26T16:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODE5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398238197", "bodyText": "!field.getValue().isNull()", "author": "alzimmermsft", "createdAt": "2020-03-25T23:47:55Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/CustomPatternTokenizerDeserializer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.search.documents.models.PatternTokenizer;\n+import com.azure.search.documents.models.RegexFlags;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Custom deserializer for {@link PatternTokenizer}, which convert flatten string to the list of {@link RegexFlags}.\n+ */\n+public class CustomPatternTokenizerDeserializer extends JsonDeserializer<PatternTokenizer> {\n+    private static final String DELIMITER = \"\\\\|\";\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public PatternTokenizer deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.readTree(p);\n+        Iterator<Map.Entry<String, JsonNode>> fields = root.fields();\n+        PatternTokenizer tokenizer = new PatternTokenizer();\n+        while (fields.hasNext()) {\n+            Map.Entry<String, JsonNode> field = fields.next();\n+            if (\"name\".equals(field.getKey())) {\n+                tokenizer.setName(field.getValue().asText());\n+            } else if (\"pattern\".equals(field.getKey())) {\n+                tokenizer.setPattern(field.getValue().asText());\n+            } else if (\"flags\".equals(field.getKey()) && !\"null\".equals(field.getValue().asText())) {", "originalCommit": "ff1d43438e0eb1a92bbf4c5892a341c10934dc5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MzAxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9203#discussion_r398253011", "bodyText": "It is a string type in json:\n{\"flags\": \"null\"} \nwhat field.getValue()parse out here is \"null\". That's why I check it like this.", "author": "sima-zhu", "createdAt": "2020-03-26T00:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODE5Nw=="}], "type": "inlineReview"}, {"oid": "a9d33f23ec01f7021c1029caee362cd6cfabced8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a9d33f23ec01f7021c1029caee362cd6cfabced8", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/CustomPatternTokenizerSerializer.java\n\nCo-Authored-By: Alan Zimmer <48699787+alzimmermsft@users.noreply.github.com>", "committedDate": "2020-03-26T00:36:56Z", "type": "commit"}]}