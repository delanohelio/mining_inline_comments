{"pr_number": 18349, "pr_title": "Update README.md file in the azure-spring-boot-sample-active-directory-webapp", "pr_createdAt": "2020-12-24T06:56:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18349", "timeline": [{"oid": "0b634cf79dd6915517cd740bdbcfa780b6a27545", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b634cf79dd6915517cd740bdbcfa780b6a27545", "message": "update README.md file.", "committedDate": "2020-12-24T06:53:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNjE3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548426174", "bodyText": "**Azure Active Directory**", "author": "chenrujun", "createdAt": "2020-12-24T07:18:51Z", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "diffHunk": "@@ -1,74 +1,78 @@\n # OAuth 2.0 Sample for Azure AD Spring Boot Starter client library for Java\n \n ## Key concepts\n-This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation\n+This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-### Register your application with your Azure Active Directory Tenant\n-\n-Follow the guide [here](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app).\n-### Platform configurations\n-\n-![Platform configurations](docs/image-platform-configurations.png \"Platform configurations\")\n-\n-- Set redirect URIs with `http://localhost:8080/login/oauth2/code/azure`.\n-- Ensure **Access tokens** and **ID tokens** are selected.\n-- To use on-demand authorization of certain resource, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/{registration-id}`. In this sample, set redirect URIs with `http://localhost:8080/login/oauth2/code/arm`.\n-### Configure necessary API permissions\n-The sample retrieves user's group memberships using Microsoft graph API which requires the registered app to have `Directory.AccessAsUser.All` permission under `Delegated Permissions` of `Microsoft Graph`, which can allow an application to access the directory as the signed-in user. Also, to display the function of calling multiple resources, this sample will acquire `ActivityFeed.Read` permission under `Office 365 Management APIs` resource. You need AAD admin privilege to be able to grant the permission in API ACCESS -> Required permission. You can follow the below steps:\t\n-\n-* In the list of pages for the app, select **API permissions**\t\n-   - Click the **Add a permission** button\t\n-   - Ensure that the **Microsoft APIs** tab is selected\t\n-   - In the *Commonly used Microsoft APIs* section, click on **Microsoft Graph**\t\n-   - In the **Delegated permissions** section, ensure that the right permissions are checked: **Directory.AccessAsUser.All**\t\n-   - Select the **Add permissions** button\n-   - Under **Office 365 Management APIs** tab\n-   - Select **Delegated permissions**, and then click **ActivityFeed.Read**\n-   - Select the **Add permissions** button\n-   - Click **Grant Permissions...** and Yes when prompted.\n+### Configure web api\n+1. Search for and select Azure Active Directory.", "originalCommit": "0b634cf79dd6915517cd740bdbcfa780b6a27545", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNjY1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548426655", "bodyText": "We do not need to use web api in this sample.", "author": "chenrujun", "createdAt": "2020-12-24T07:21:04Z", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "diffHunk": "@@ -1,74 +1,78 @@\n # OAuth 2.0 Sample for Azure AD Spring Boot Starter client library for Java\n \n ## Key concepts\n-This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation\n+This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-### Register your application with your Azure Active Directory Tenant\n-\n-Follow the guide [here](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app).\n-### Platform configurations\n-\n-![Platform configurations](docs/image-platform-configurations.png \"Platform configurations\")\n-\n-- Set redirect URIs with `http://localhost:8080/login/oauth2/code/azure`.\n-- Ensure **Access tokens** and **ID tokens** are selected.\n-- To use on-demand authorization of certain resource, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/{registration-id}`. In this sample, set redirect URIs with `http://localhost:8080/login/oauth2/code/arm`.\n-### Configure necessary API permissions\n-The sample retrieves user's group memberships using Microsoft graph API which requires the registered app to have `Directory.AccessAsUser.All` permission under `Delegated Permissions` of `Microsoft Graph`, which can allow an application to access the directory as the signed-in user. Also, to display the function of calling multiple resources, this sample will acquire `ActivityFeed.Read` permission under `Office 365 Management APIs` resource. You need AAD admin privilege to be able to grant the permission in API ACCESS -> Required permission. You can follow the below steps:\t\n-\n-* In the list of pages for the app, select **API permissions**\t\n-   - Click the **Add a permission** button\t\n-   - Ensure that the **Microsoft APIs** tab is selected\t\n-   - In the *Commonly used Microsoft APIs* section, click on **Microsoft Graph**\t\n-   - In the **Delegated permissions** section, ensure that the right permissions are checked: **Directory.AccessAsUser.All**\t\n-   - Select the **Add permissions** button\n-   - Under **Office 365 Management APIs** tab\n-   - Select **Delegated permissions**, and then click **ActivityFeed.Read**\n-   - Select the **Add permissions** button\n-   - Click **Grant Permissions...** and Yes when prompted.\n+### Configure web api", "originalCommit": "0b634cf79dd6915517cd740bdbcfa780b6a27545", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNjg0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548426849", "bodyText": "If we need sample that include both webapp and web api, we can create another sample.", "author": "chenrujun", "createdAt": "2020-12-24T07:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNjY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNzM5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548427395", "bodyText": "Not in integration test, we use scopes like this:\n\nCould you please use the same scope in sample?", "author": "chenrujun", "createdAt": "2020-12-24T07:23:55Z", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "diffHunk": "@@ -1,74 +1,78 @@\n # OAuth 2.0 Sample for Azure AD Spring Boot Starter client library for Java\n \n ## Key concepts\n-This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation\n+This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-### Register your application with your Azure Active Directory Tenant\n-\n-Follow the guide [here](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app).\n-### Platform configurations\n-\n-![Platform configurations](docs/image-platform-configurations.png \"Platform configurations\")\n-\n-- Set redirect URIs with `http://localhost:8080/login/oauth2/code/azure`.\n-- Ensure **Access tokens** and **ID tokens** are selected.\n-- To use on-demand authorization of certain resource, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/{registration-id}`. In this sample, set redirect URIs with `http://localhost:8080/login/oauth2/code/arm`.\n-### Configure necessary API permissions\n-The sample retrieves user's group memberships using Microsoft graph API which requires the registered app to have `Directory.AccessAsUser.All` permission under `Delegated Permissions` of `Microsoft Graph`, which can allow an application to access the directory as the signed-in user. Also, to display the function of calling multiple resources, this sample will acquire `ActivityFeed.Read` permission under `Office 365 Management APIs` resource. You need AAD admin privilege to be able to grant the permission in API ACCESS -> Required permission. You can follow the below steps:\t\n-\n-* In the list of pages for the app, select **API permissions**\t\n-   - Click the **Add a permission** button\t\n-   - Ensure that the **Microsoft APIs** tab is selected\t\n-   - In the *Commonly used Microsoft APIs* section, click on **Microsoft Graph**\t\n-   - In the **Delegated permissions** section, ensure that the right permissions are checked: **Directory.AccessAsUser.All**\t\n-   - Select the **Add permissions** button\n-   - Under **Office 365 Management APIs** tab\n-   - Select **Delegated permissions**, and then click **ActivityFeed.Read**\n-   - Select the **Add permissions** button\n-   - Click **Grant Permissions...** and Yes when prompted.\n+### Configure web api\n+1. Search for and select Azure Active Directory.\n+2. Under Manage, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+3. The registered application name is filled into **arm**, select **Accounts in this organizational directory only**, click **register** button.![Register a web api](docs/image-register-a-web-api.png \"Register a web api\")\n+4. Under **arm** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click **add** button.(Remember to save the secrets here and use it later)![Creat secrets](docs/image-creat-secrets-api.png \"Creat secrets\")\n+5. Under **arm** application, select **Expose an API** -> **Add a scope**, Use the default **Application ID URI**, click **Save and continue** button.![Expose apis](docs/image-set-app-id-url.png \"Expose apis\")\n+6. After step five,the page will refresh again.Then set the **Scope name** to *Files.read*.(This scope will be used in Application.yml)![Add a app id url](docs/image-add-a-scope.png \"Add a app id url\")\n+7. Expose scopes in web API registration.![Expose api](docs/image-expose-api.png \"Expose api\")\n+\n+See [Register app or web api], [Expose scopes in web api registration] for more information about the Web API.\n+\n+### Configure web app\n+1. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+2. The registered application name is filled into **webapp**, select **Accounts in this organizational directory only**, click the **register** button.![Register a web app](docs/image-register-a-web-app.png \"Register a web app\")\n+3. Under **webapp** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later)![Creat secrets](docs/image-creat-secrets-app.png \"Creat secrets\")\n+4. Under **webapp** application, select **Authentication** -> **Add a platform**, select **web** platform, redirect urls set to `http://localhost:8080/login/oauth2/code/azure`, check the Access Token and ID Token checkboxes, click **configure** button.![Add a platfform](docs/image-add-a-platfform.png \"Add a platfform\")\n+5. Under **webapp** application, select **Authentication** -> **Add URI**, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/arm`. ![App add url](docs/image-app-add-url.png \"App add url\")\n+6. Under **webapp** application, select **API permissions** -> **Add a permission**, select **Microsoft Graph**. Next, search **Calendar.Read** via select Permissions, check the check box,click **add permissions** button.![Api permission](docs/image-api-permissions.png \"Api permission\")", "originalCommit": "0b634cf79dd6915517cd740bdbcfa780b6a27545", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNzgxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548427817", "bodyText": "Please use the same scope with aad integration test module:", "author": "chenrujun", "createdAt": "2020-12-24T07:25:08Z", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "diffHunk": "@@ -1,74 +1,78 @@\n # OAuth 2.0 Sample for Azure AD Spring Boot Starter client library for Java\n \n ## Key concepts\n-This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation\n+This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-### Register your application with your Azure Active Directory Tenant\n-\n-Follow the guide [here](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app).\n-### Platform configurations\n-\n-![Platform configurations](docs/image-platform-configurations.png \"Platform configurations\")\n-\n-- Set redirect URIs with `http://localhost:8080/login/oauth2/code/azure`.\n-- Ensure **Access tokens** and **ID tokens** are selected.\n-- To use on-demand authorization of certain resource, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/{registration-id}`. In this sample, set redirect URIs with `http://localhost:8080/login/oauth2/code/arm`.\n-### Configure necessary API permissions\n-The sample retrieves user's group memberships using Microsoft graph API which requires the registered app to have `Directory.AccessAsUser.All` permission under `Delegated Permissions` of `Microsoft Graph`, which can allow an application to access the directory as the signed-in user. Also, to display the function of calling multiple resources, this sample will acquire `ActivityFeed.Read` permission under `Office 365 Management APIs` resource. You need AAD admin privilege to be able to grant the permission in API ACCESS -> Required permission. You can follow the below steps:\t\n-\n-* In the list of pages for the app, select **API permissions**\t\n-   - Click the **Add a permission** button\t\n-   - Ensure that the **Microsoft APIs** tab is selected\t\n-   - In the *Commonly used Microsoft APIs* section, click on **Microsoft Graph**\t\n-   - In the **Delegated permissions** section, ensure that the right permissions are checked: **Directory.AccessAsUser.All**\t\n-   - Select the **Add permissions** button\n-   - Under **Office 365 Management APIs** tab\n-   - Select **Delegated permissions**, and then click **ActivityFeed.Read**\n-   - Select the **Add permissions** button\n-   - Click **Grant Permissions...** and Yes when prompted.\n+### Configure web api\n+1. Search for and select Azure Active Directory.\n+2. Under Manage, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+3. The registered application name is filled into **arm**, select **Accounts in this organizational directory only**, click **register** button.![Register a web api](docs/image-register-a-web-api.png \"Register a web api\")\n+4. Under **arm** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click **add** button.(Remember to save the secrets here and use it later)![Creat secrets](docs/image-creat-secrets-api.png \"Creat secrets\")\n+5. Under **arm** application, select **Expose an API** -> **Add a scope**, Use the default **Application ID URI**, click **Save and continue** button.![Expose apis](docs/image-set-app-id-url.png \"Expose apis\")\n+6. After step five,the page will refresh again.Then set the **Scope name** to *Files.read*.(This scope will be used in Application.yml)![Add a app id url](docs/image-add-a-scope.png \"Add a app id url\")\n+7. Expose scopes in web API registration.![Expose api](docs/image-expose-api.png \"Expose api\")\n+\n+See [Register app or web api], [Expose scopes in web api registration] for more information about the Web API.\n+\n+### Configure web app\n+1. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+2. The registered application name is filled into **webapp**, select **Accounts in this organizational directory only**, click the **register** button.![Register a web app](docs/image-register-a-web-app.png \"Register a web app\")\n+3. Under **webapp** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later)![Creat secrets](docs/image-creat-secrets-app.png \"Creat secrets\")\n+4. Under **webapp** application, select **Authentication** -> **Add a platform**, select **web** platform, redirect urls set to `http://localhost:8080/login/oauth2/code/azure`, check the Access Token and ID Token checkboxes, click **configure** button.![Add a platfform](docs/image-add-a-platfform.png \"Add a platfform\")\n+5. Under **webapp** application, select **Authentication** -> **Add URI**, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/arm`. ![App add url](docs/image-app-add-url.png \"App add url\")\n+6. Under **webapp** application, select **API permissions** -> **Add a permission**, select **Microsoft Graph**. Next, search **Calendar.Read** via select Permissions, check the check box,click **add permissions** button.![Api permission](docs/image-api-permissions.png \"Api permission\")\n+7. Similarly, add **Directory.AccessAsUser.All** permission in **Microsoft Graph** and add **ActivityFeed.Read** permission in **Office 365 Management APIs**.![Add Directory.AccessAsUser.All and ActivityFeed.Read permission](docs/image-add-accessuser-and-activityfeed-permission.png \"Add Directory.AccessAsUser.All and ActivityFeed.Read permission\")\n+8. Continue to select **API permissions** -> **Add a permission** -> **My APIS**, select **arm** tab, add **Files.read** permission,click **Add permissions** button.![Webapi permission](docs/image-webapi-permission.png \"Webapi permission\")\n+9. click **Grant admin consent for...**.![Grant permission](docs/image-granted-permission.png \"Grant permission\")\n+10. Finally.![Final](docs/image-final.png \"Final\")\n+\n+See [Register app or web api], [Grant scoped permission] for more information about the Web APP.\n \n ### Configure groups for sign in user\n-\n-In order to try the authorization action with this sample with minimum effort, [configure the user and groups in Azure Active Directory](https://docs.microsoft.com/azure/active-directory/active-directory-groups-create-azure-portal), configure the user with `group1`. \n-\n+In order to try the authorization action with this sample with minimum effort, [configure the user and groups in Azure Active Directory], configure the user with `group1`.\n \n ## Examples\n-\n ### Configure application.yml\n-\n ```yaml\n azure:\n   activedirectory:\n-    client-id: <client-id>\n-    client-secret: <client-secret>\n+    authorization:\n+      arm:\n+        on-demand: true\n+        scopes: <your-arm-scope-url>\n+      graph:\n+        scopes: https://graph.microsoft.com/Calendars.Read\n+      office:\n+        scopes: https://manage.office.com/ActivityFeed.Read", "originalCommit": "0b634cf79dd6915517cd740bdbcfa780b6a27545", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2NzEyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548767120", "bodyText": "@ZhuXiaoBing-cn , we need to update the scopes here.", "author": "chenrujun", "createdAt": "2020-12-25T00:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNzgxNw=="}], "type": "inlineReview"}, {"oid": "c49fd397aea41091195001d1d360aed66658da45", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c49fd397aea41091195001d1d360aed66658da45", "message": "Update README.md file.", "committedDate": "2020-12-24T09:44:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2Njg3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548766878", "bodyText": "No Calendar.Read. There is no problem to add it, but to keep the scopes same to integration test, it's better delete Calendar.Read.", "author": "chenrujun", "createdAt": "2020-12-25T00:16:45Z", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "diffHunk": "@@ -1,49 +1,45 @@\n # OAuth 2.0 Sample for Azure AD Spring Boot Starter client library for Java\n \n ## Key concepts\n-This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation\n+This sample illustrates how to use `azure-spring-boot-starter-active-directory` package to work with OAuth 2.0 and OpenID Connect protocols on Auzre. This sample will use Microsoft Graph API to retrieve user infomation.\n \n ## Getting started\n-\n ### Environment checklist\n We need to ensure that this [environment checklist][ready-to-run-checklist] is completed before the run.\n \n-### Register your application with your Azure Active Directory Tenant\n-\n-Follow the guide [here](https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app).\n-### Platform configurations\n-\n-![Platform configurations](docs/image-platform-configurations.png \"Platform configurations\")\n-\n-- Set redirect URIs with `http://localhost:8080/login/oauth2/code/azure`.\n-- Ensure **Access tokens** and **ID tokens** are selected.\n-- To use on-demand authorization of certain resource, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/{registration-id}`. In this sample, set redirect URIs with `http://localhost:8080/login/oauth2/code/arm`.\n-### Configure necessary API permissions\n-The sample retrieves user's group memberships using Microsoft graph API which requires the registered app to have `Directory.AccessAsUser.All` permission under `Delegated Permissions` of `Microsoft Graph`, which can allow an application to access the directory as the signed-in user. Also, to display the function of calling multiple resources, this sample will acquire `ActivityFeed.Read` permission under `Office 365 Management APIs` resource. You need AAD admin privilege to be able to grant the permission in API ACCESS -> Required permission. You can follow the below steps:\t\n-\n-* In the list of pages for the app, select **API permissions**\t\n-   - Click the **Add a permission** button\t\n-   - Ensure that the **Microsoft APIs** tab is selected\t\n-   - In the *Commonly used Microsoft APIs* section, click on **Microsoft Graph**\t\n-   - In the **Delegated permissions** section, ensure that the right permissions are checked: **Directory.AccessAsUser.All**\t\n-   - Select the **Add permissions** button\n-   - Under **Office 365 Management APIs** tab\n-   - Select **Delegated permissions**, and then click **ActivityFeed.Read**\n-   - Select the **Add permissions** button\n-   - Click **Grant Permissions...** and Yes when prompted.\n+### Configure web app\n+1. Search for and select your tenant in **Azure Active Directory**.\n+2. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n+3. The registered application name is filled into *webapp*, select **Accounts in this organizational directory only**, click the **register** button.![Register a web app](docs/image-register-a-web-app.png \"Register a web app\")\n+4. Under **webapp** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later)![Creat secrets](docs/image-creat-secrets-app.png \"Creat secrets\")\n+5. Under **webapp** application, select **Authentication** -> **Add a platform**, select **web** platform, redirect urls set to *http://localhost:8080/login/oauth2/code/azure*, check the Access Token and ID Token checkboxes, click **configure** button.![Add a platfform](docs/image-add-a-platfform.png \"Add a platfform\")\n+6. Under **webapp** application, select **Authentication** -> **Add URI**, you need to add redirect URIs of *http://localhost:8080/login/oauth2/code/arm*. ![App add url](docs/image-app-add-url.png \"App add url\")\n+7. Under **webapp** application, select **API permissions** -> **Add a permission**, select **Microsoft Graph**. Next, search **Calendar.Read** via select Permissions, check the check box, click **add permissions** button.![Api permission](docs/image-api-permissions.png \"Api permission\")", "originalCommit": "c49fd397aea41091195001d1d360aed66658da45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe95c25bb5965d06e8944bb35e9b641f85b6e823", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe95c25bb5965d06e8944bb35e9b641f85b6e823", "message": "Merge branch 'master' into update_webapp_readme\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "committedDate": "2020-12-25T01:31:10Z", "type": "commit"}, {"oid": "78f0e2bf7237ee80def182f56395fc67c4a84ca5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/78f0e2bf7237ee80def182f56395fc67c4a84ca5", "message": "Update README.md file.", "committedDate": "2020-12-25T02:07:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgxNzYzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18349#discussion_r548817637", "bodyText": "The order should be 10. But it doesn't matter. It will display well.", "author": "chenrujun", "createdAt": "2020-12-25T06:54:41Z", "path": "sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/README.md", "diffHunk": "@@ -10,17 +10,16 @@ We need to ensure that this [environment checklist][ready-to-run-checklist] is c\n ### Configure web app\n 1. Search for and select your tenant in **Azure Active Directory**.\n 2. Under Manage In the same tenant, select **App registrations** -> **New registration**.![Protal manage](docs/image-protal-manage.png \"Protal manage\")\n-3. The registered application name is filled into *webapp*, select **Accounts in this organizational directory only**, click the **register** button.![Register a web app](docs/image-register-a-web-app.png \"Register a web app\")\n-4. Under **webapp** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later)![Creat secrets](docs/image-creat-secrets-app.png \"Creat secrets\")\n-5. Under **webapp** application, select **Authentication** -> **Add a platform**, select **web** platform, redirect urls set to *http://localhost:8080/login/oauth2/code/azure*, check the Access Token and ID Token checkboxes, click **configure** button.![Add a platfform](docs/image-add-a-platfform.png \"Add a platfform\")\n-6. Under **webapp** application, select **Authentication** -> **Add URI**, you need to add redirect URIs of *http://localhost:8080/login/oauth2/code/arm*. ![App add url](docs/image-app-add-url.png \"App add url\")\n-7. Under **webapp** application, select **API permissions** -> **Add a permission**, select **Microsoft Graph**. Next, search **Calendar.Read** via select Permissions, check the check box, click **add permissions** button.![Api permission](docs/image-api-permissions.png \"Api permission\")\n+3. The registered application name is filled into `webapp`, select **Accounts in this organizational directory only**, click the **register** button.![Register a web app](docs/image-register-a-web-app.png \"Register a web app\")\n+4. Under **webapp** application, select **Certificates & secrets** -> **new client secret**, expires select **Never**, click the **add** button.(Remember to save the secrets here and use them later.)![Creat secrets](docs/image-creat-secrets-app.png \"Creat secrets\")\n+5. Under **webapp** application, select **Authentication** -> **Add a platform**, select **web** platform, redirect urls set to `http://localhost:8080/login/oauth2/code/azure`, check the **Access Tokens** and **ID Tokens** checkboxes, click **configure** button.![Add a platfform](docs/image-add-a-platfform.png \"Add a platfform\")\n+6. Under **webapp** application, select **Authentication** -> **Add URI**, you need to add redirect URIs of `http://localhost:8080/login/oauth2/code/arm`. ![App add url](docs/image-app-add-url.png \"App add url\")\n+7. Under **webapp** application, select **API permissions** -> **Add a permission**, select **Microsoft Graph**. Next, search `Directory.AccessAsUser.All` via **select Permissions**, check the check box, click **add permissions** button.(`User.Read` is created automatically, we need to keep it.)![Api permission](docs/image-api-permissions.png \"Api permission\")\n 8. Similarly, add the following permissions: \n    - **user_impersonation** in **Azure Service Management**,\n-   - **Directory.AccessAsUser.All** in **Microsoft Graph**,\n    - **ActivityFeed.Read**, **ActivityFeed.ReadDlp**, **ServiceHealth.Read** in **Office 365 Management APIs**.![Add permissions](docs/image-add-permissions.png \"Add permissions\")\n 9. click **Grant admin consent for...**.![Grant permission](docs/image-grant-permission.png \"Grant permission\")\n-11. Manually remove the admin consent for **user_impersonation**.(Easy to see incremental authorization)![Final](docs/image-final.png \"Final\")\n+11. Manually remove the admin consent for **user_impersonation**.(Easy to see incremental authorization.)![Final](docs/image-final.png \"Final\")", "originalCommit": "78f0e2bf7237ee80def182f56395fc67c4a84ca5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}