{"pr_number": 15158, "pr_title": "Add relationship samples", "pr_createdAt": "2020-09-14T05:51:15Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15158", "timeline": [{"oid": "827a4487b2ec0ce4cb00be752ba47a914d91ee12", "url": "https://github.com/Azure/azure-sdk-for-java/commit/827a4487b2ec0ce4cb00be752ba47a914d91ee12", "message": "Add relationship samples", "committedDate": "2020-09-14T05:50:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTQ4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488071485", "bodyText": "Is this check required? Wouldn't something other than the accepted response code generate an exception?", "author": "abhipsaMisra", "createdAt": "2020-09-14T16:38:42Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.azure.digitaltwins.core;\n+\n+    import com.azure.core.http.policy.HttpLogOptions;\n+    import com.azure.core.http.rest.PagedIterable;\n+    import com.azure.core.http.rest.Response;\n+    import com.azure.core.util.Context;\n+    import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+    import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+    import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+    import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+    import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+    import com.azure.digitaltwins.core.models.*;\n+    import com.azure.identity.ClientSecretCredentialBuilder;\n+    import com.fasterxml.jackson.core.JsonProcessingException;\n+    import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+    import java.io.IOException;\n+    import java.net.HttpURLConnection;\n+    import java.util.*;\n+    import java.util.function.Function;\n+\n+public class RelationshipsSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runRelationshipsSample();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public static void runRelationshipsSample() throws JsonProcessingException {\n+\n+        ConsoleLogger.printHeader(\"RELATIONSHIP SAMPLE\");\n+\n+        // For the purpose of keeping code snippets readable to the user, hardcoded string literals are used in place of assigned variables, eg Ids.\n+        // Despite not being a good code practice, this prevents code snippets from being out of context for the user when making API calls that accept Ids as parameters.\n+\n+        String sampleBuildingModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.BUILDING_MODEL_ID, client, randomIntegerStringGenerator);\n+        String sampleFloorModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.FLOOR_MODEL_ID, client, randomIntegerStringGenerator);\n+\n+        String buildingTwinId = UniqueIdHelper.getUniqueDigitalTwinId(\"buildingTwinId\", client, randomIntegerStringGenerator);\n+        String floorTwinId = UniqueIdHelper.getUniqueDigitalTwinId(\"floorTwinId\", client, randomIntegerStringGenerator);\n+\n+        final String buildingFloorRelationshipId = \"buildingFloorRelationshipId\";\n+\n+        String buildingModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_RELATIONSHIP_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, sampleBuildingModelId)\n+            .replace(SamplesConstants.MODEL_DISPLAY_NAME, \"Building\")\n+            .replace(SamplesConstants.RELATIONSHIP_NAME, \"contains\")\n+            .replace(SamplesConstants.RELATIONSHIP_TARGET_MODEL_ID, sampleFloorModelId);\n+\n+        String floorModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_RELATIONSHIP_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, sampleFloorModelId)\n+            .replace(SamplesConstants.MODEL_DISPLAY_NAME, \"Floor\")\n+            .replace(SamplesConstants.RELATIONSHIP_NAME, \"containedIn\")\n+            .replace(SamplesConstants.RELATIONSHIP_TARGET_MODEL_ID, sampleBuildingModelId);\n+\n+        List<ModelData> createdModels = client.createModels(new ArrayList<>(Arrays.asList(buildingModelPayload, floorModelPayload)));\n+\n+        for (ModelData model : createdModels) {\n+            ConsoleLogger.print(\"Created model \" + model.getId());\n+        }\n+\n+        // Create a building digital twin\n+        BasicDigitalTwin buildingDigitalTwin = new BasicDigitalTwin()\n+            .setId(buildingTwinId)\n+            .setMetadata(new DigitalTwinMetadata()\n+                .setModelId(sampleBuildingModelId));\n+\n+        client.createDigitalTwin(buildingTwinId, mapper.writeValueAsString(buildingDigitalTwin));\n+\n+        ConsoleLogger.print(\"Created twin\" + buildingDigitalTwin.getId());\n+\n+        BasicDigitalTwin floorDigitalTwin = new BasicDigitalTwin()\n+            .setId(floorTwinId)\n+            .setMetadata(new DigitalTwinMetadata()\n+                .setModelId(sampleFloorModelId));\n+\n+        client.createDigitalTwin(floorTwinId, mapper.writeValueAsString(floorDigitalTwin));\n+\n+        ConsoleLogger.print(\"Created twin\" + floorDigitalTwin.getId());\n+\n+        ConsoleLogger.printHeader(\"Create relationships\");\n+\n+        BasicRelationship buildingFloorRelationshipPayload = new BasicRelationship()\n+            .setId(buildingFloorRelationshipId)\n+            .setSourceId(buildingTwinId)\n+            .setTargetId(floorTwinId)\n+            .setName(\"contains\")\n+            .setCustomProperties(\"Prop1\", \"Prop1 value\")\n+            .setCustomProperties(\"Prop2\", 6);\n+\n+        client.createRelationship(buildingTwinId, buildingFloorRelationshipId, mapper.writeValueAsString(buildingFloorRelationshipPayload));\n+\n+        ConsoleLogger.printSuccess(\"Created a digital twin relationship \"+ buildingFloorRelationshipId + \" from twin: \" + buildingTwinId + \" to twin: \" + floorTwinId);\n+\n+        ConsoleLogger.printHeader(\"Get Relationship\");\n+        Response<BasicRelationship> getRelationshipRepsonse = client.getRelationshipWithResponse(\n+            buildingTwinId,\n+            buildingFloorRelationshipId,\n+            BasicRelationship.class,\n+            Context.NONE);\n+\n+        if (getRelationshipRepsonse.getStatusCode() == HttpURLConnection.HTTP_OK) {", "originalCommit": "827a4487b2ec0ce4cb00be752ba47a914d91ee12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MjIzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488072239", "bodyText": "not really a check but a sample code on how to check status codes ... we don't really need it for the sample to function", "author": "azabbasi", "createdAt": "2020-09-14T16:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTYzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488071635", "bodyText": "What does this do?", "author": "abhipsaMisra", "createdAt": "2020-09-14T16:38:59Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/RelationshipsSyncSamples.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.azure.digitaltwins.core;\n+\n+    import com.azure.core.http.policy.HttpLogOptions;\n+    import com.azure.core.http.rest.PagedIterable;\n+    import com.azure.core.http.rest.Response;\n+    import com.azure.core.util.Context;\n+    import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+    import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+    import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+    import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+    import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+    import com.azure.digitaltwins.core.models.*;\n+    import com.azure.identity.ClientSecretCredentialBuilder;\n+    import com.fasterxml.jackson.core.JsonProcessingException;\n+    import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+    import java.io.IOException;\n+    import java.net.HttpURLConnection;\n+    import java.util.*;\n+    import java.util.function.Function;\n+\n+public class RelationshipsSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Function<Integer, String> randomIntegerStringGenerator = (maxLength) -> {\n+        int randInt = new Random().nextInt((int)Math.pow(10, 8) - 1) + 1;\n+        return String.valueOf(randInt);\n+    };\n+\n+    public static void main(String[] args) throws IOException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .credential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runRelationshipsSample();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")", "originalCommit": "827a4487b2ec0ce4cb00be752ba47a914d91ee12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MjI5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488072299", "bodyText": "needs to go", "author": "azabbasi", "createdAt": "2020-09-14T16:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MjQ0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15158#discussion_r488072444", "bodyText": "it allows us to use Response without any type parameters.", "author": "azabbasi", "createdAt": "2020-09-14T16:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTYzNQ=="}], "type": "inlineReview"}, {"oid": "834ebe9703aaa12191c4b3afe477749db8784b34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/834ebe9703aaa12191c4b3afe477749db8784b34", "message": "Update RelationshipsSyncSamples.java", "committedDate": "2020-09-14T16:41:02Z", "type": "commit"}]}