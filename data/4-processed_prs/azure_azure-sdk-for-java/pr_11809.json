{"pr_number": 11809, "pr_title": "mgmt, fix Retry-After in LRO is not respected", "pr_createdAt": "2020-06-05T04:49:39Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11809", "timeline": [{"oid": "9f2f35abd074d0551aa825d066aff0d4ed796259", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f2f35abd074d0551aa825d066aff0d4ed796259", "message": "add test for retry-after header", "committedDate": "2020-06-05T04:07:10Z", "type": "commit"}, {"oid": "f2bb43d7436ca4cef08708032b2577ca7f1646bc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f2bb43d7436ca4cef08708032b2577ca7f1646bc", "message": "fix that retry-after is ignored", "committedDate": "2020-06-05T04:38:49Z", "type": "commit"}, {"oid": "3fd9e512f875ffa96c4ea0b7d43c6fb7b2cf00c0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3fd9e512f875ffa96c4ea0b7d43c6fb7b2cf00c0", "message": "fix checkstyle", "committedDate": "2020-06-05T04:43:09Z", "type": "commit"}, {"oid": "838bd77906145cd6f59f53fd6a8449439dc4d960", "url": "https://github.com/Azure/azure-sdk-for-java/commit/838bd77906145cd6f59f53fd6a8449439dc4d960", "message": "Merge branch 'master' into mgmt_core_retry-after", "committedDate": "2020-06-05T04:47:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODUxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11809#discussion_r435688519", "bodyText": "In test case, set Retry-After header to different value of default poll interval.", "author": "weidongxu-microsoft", "createdAt": "2020-06-05T04:50:59Z", "path": "sdk/core/azure-core-management/src/test/java/com/azure/core/management/implementation/polling/LROPollerTests.java", "diffHunk": "@@ -324,6 +274,102 @@ public String getName() {\n         }\n     }\n \n+    @Test\n+    public void lroRetryAfter() {\n+        ServerConfigure configure = new ServerConfigure();\n+        Duration expectedPollingDuration = Duration.ofSeconds(3);\n+        configure.pollingCountTillSuccess = 3;\n+        configure.additionalHeaders = new HttpHeaders(new HttpHeader(\"Retry-After\", \"1\"));  // 1 second", "originalCommit": "838bd77906145cd6f59f53fd6a8449439dc4d960", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f4afd944de07b91c1f83944722064747d2979a59", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f4afd944de07b91c1f83944722064747d2979a59", "message": "add some log output", "committedDate": "2020-06-05T05:01:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMDc2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11809#discussion_r435710764", "bodyText": "If we just check polling duration larger than expected. I think we could make Retry-After larger than the original one.", "author": "ChenTanyi", "createdAt": "2020-06-05T06:16:55Z", "path": "sdk/core/azure-core-management/src/test/java/com/azure/core/management/implementation/polling/LROPollerTests.java", "diffHunk": "@@ -324,6 +276,107 @@ public String getName() {\n         }\n     }\n \n+    @Test\n+    public void lroRetryAfter() {\n+        ServerConfigure configure = new ServerConfigure();\n+        Duration expectedPollingDuration = Duration.ofSeconds(3);\n+        configure.pollingCountTillSuccess = 3;\n+        configure.additionalHeaders = new HttpHeaders(new HttpHeader(\"Retry-After\", \"1\"));  // 1 second\n+        WireMockServer lroServer = startServer(configure);\n+        lroServer.start();\n+\n+        try {\n+            final ProvisioningStateLroServiceClient client = RestProxy.create(ProvisioningStateLroServiceClient.class,\n+                createHttpPipeline(lroServer.port()),\n+                SERIALIZER);\n+\n+            PollerFlux<PollResult<FooWithProvisioningState>, FooWithProvisioningState> lroFlux\n+                = PollerFactory.create(SERIALIZER,\n+                new HttpPipelineBuilder().build(),\n+                FooWithProvisioningState.class,\n+                FooWithProvisioningState.class,\n+                POLLING_DURATION,\n+                newLroInitFunction(client, FooWithProvisioningState.class));\n+\n+            long nanoTime = System.nanoTime();\n+\n+            FooWithProvisioningState result = lroFlux\n+                .doOnNext(response -> {\n+                    System.out.println(String.format(\"[%s] status %s\",\n+                        OffsetDateTime.now().toString(), response.getStatus().toString()));\n+                }).blockLast()\n+                .getFinalResult().block();\n+            Assertions.assertNotNull(result);\n+\n+            Duration pollingDuration = Duration.ofNanos(System.nanoTime() - nanoTime);\n+            Assertions.assertTrue(pollingDuration.compareTo(expectedPollingDuration) > 0);", "originalCommit": "f4afd944de07b91c1f83944722064747d2979a59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMTk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11809#discussion_r435711944", "bodyText": "Yes. In this test, Retry-After is 1sec, default interval is 100ms.", "author": "weidongxu-microsoft", "createdAt": "2020-06-05T06:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMDc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMjMwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11809#discussion_r435712305", "bodyText": "Got it. I had thought it was 30s.", "author": "ChenTanyi", "createdAt": "2020-06-05T06:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMDc2NA=="}], "type": "inlineReview"}, {"oid": "c4696539504c8162904766a5b96f0977478df691", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4696539504c8162904766a5b96f0977478df691", "message": "more log output in test", "committedDate": "2020-06-05T07:37:29Z", "type": "commit"}, {"oid": "1ef54296b742072bd7cd5f98b9da9006bd133da7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ef54296b742072bd7cd5f98b9da9006bd133da7", "message": "fix bug that polling result is one slot off", "committedDate": "2020-06-05T08:04:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1NjczMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11809#discussion_r435756731", "bodyText": "Here is the bug. Previously, after doSinglePoll, the previous pollResponse is returned. Should use the latest one after doSinglePoll.", "author": "weidongxu-microsoft", "createdAt": "2020-06-05T08:05:31Z", "path": "sdk/core/azure-core-management/src/main/java/com/azure/core/management/implementation/polling/PollOperation.java", "diffHunk": "@@ -45,35 +46,14 @@\n         return context -> {\n             PollingState pollingState = PollingState.from(serializerAdapter, context);\n             if (pollingState.getOperationStatus().isComplete()) {\n-                if (pollingState.getOperationStatus() == LongRunningOperationStatus.FAILED\n-                    || pollingState.getOperationStatus() == LRO_CANCELLED) {\n-                    // Failed|Cancelled\n-                    Error lroInitError = pollingState.getSynchronouslyFailedLroError();\n-                    if (lroInitError != null) {\n-                        return errorPollResponseMono(pollingState.getOperationStatus(), lroInitError);\n-                    }\n-                    Error pollError = pollingState.getPollError();\n-                    if (pollError != null) {\n-                        return errorPollResponseMono(pollingState.getOperationStatus(), pollError);\n-                    }\n-                    throw new IllegalStateException(\"Either LroError or PollError must\"\n-                        + \"be set when OperationStatus is in Failed|Cancelled State.\");\n-                } else {\n-                    // Succeeded\n-                    return pollResponseMono(serializerAdapter,\n-                        pollingState.getOperationStatus(),\n-                        pollingState.getLastResponseBody(),\n-                        pollResultType);\n-                }\n+                return pollResponseMonoFromPollingState(serializerAdapter, pollResultType, pollingState);\n             } else {\n                 // InProgress|NonTerminal-Status\n-                Mono<PollResponse<PollResult<T>>> pollResponse = pollResponseMono(serializerAdapter,\n-                    pollingState.getOperationStatus(),\n-                    pollingState.getLastResponseBody(),\n-                    pollResultType);\n                 return doSinglePoll(pipeline, pollingState)\n-                    .doOnNext(updatedState -> updatedState.store(context))\n-                    .then(pollResponse);", "originalCommit": "1ef54296b742072bd7cd5f98b9da9006bd133da7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}