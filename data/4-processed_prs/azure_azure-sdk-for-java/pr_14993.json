{"pr_number": 14993, "pr_title": "Adds support for capturing CPU history in the request diagnostics", "pr_createdAt": "2020-09-09T22:11:57Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14993", "timeline": [{"oid": "e51aa628a47caf3f7c17a0b260c6d1ddb45183df", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e51aa628a47caf3f7c17a0b260c6d1ddb45183df", "message": "cpu history initial work", "committedDate": "2020-09-04T19:14:14Z", "type": "commit"}, {"oid": "b167e02350090abc0e6b79059d2e8263edda5930", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b167e02350090abc0e6b79059d2e8263edda5930", "message": "Merge branch 'master' into users/moderakh/cpu-history", "committedDate": "2020-09-08T16:29:03Z", "type": "commit"}, {"oid": "eeff63c5421ad0f2d12d598d71af9db483b81714", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eeff63c5421ad0f2d12d598d71af9db483b81714", "message": "cpu history working", "committedDate": "2020-09-09T20:00:03Z", "type": "commit"}, {"oid": "ad5f140a14adf94d258acc2f799adfae5aaa98c1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad5f140a14adf94d258acc2f799adfae5aaa98c1", "message": "use deamon thread", "committedDate": "2020-09-09T20:01:28Z", "type": "commit"}, {"oid": "6159fd116ddc8bae39ec37ab8a076e1fefc43d12", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6159fd116ddc8bae39ec37ab8a076e1fefc43d12", "message": "counter based model works", "committedDate": "2020-09-09T20:20:31Z", "type": "commit"}, {"oid": "72d48db0b29200835e199315160218adc5bd1616", "url": "https://github.com/Azure/azure-sdk-for-java/commit/72d48db0b29200835e199315160218adc5bd1616", "message": "cpu history with register pattern", "committedDate": "2020-09-09T21:59:04Z", "type": "commit"}, {"oid": "5bd822c6147a00c5ce4ee2a7d9a4f4aee25cc7ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5bd822c6147a00c5ce4ee2a7d9a4f4aee25cc7ea", "message": "comment", "committedDate": "2020-09-09T22:00:47Z", "type": "commit"}, {"oid": "60fd433ceca144c91f7d5e091d155e5098c6cfc7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/60fd433ceca144c91f7d5e091d155e5098c6cfc7", "message": "cleanup", "committedDate": "2020-09-09T22:11:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTAyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486115021", "bodyText": "Negative value should also be mapped to Double.NaN ?", "author": "FabianMeiswinkel", "createdAt": "2020-09-10T07:12:13Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/cpu/CpuReader.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.cpu;\n+\n+import com.azure.cosmos.implementation.Utils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.management.ManagementFactory;\n+\n+public class CpuReader {\n+    private final static Logger logger = LoggerFactory.getLogger(CpuReader.class);\n+    private final com.sun.management.OperatingSystemMXBean operatingSystemMXBean;\n+\n+    public CpuReader() {\n+        java.lang.management.OperatingSystemMXBean mxBean = null;\n+        try {\n+            mxBean =\n+                ManagementFactory.getOperatingSystemMXBean();\n+        } catch (Throwable t) {\n+            logger.error(\"failed to initialized CpuReader\", t);\n+        }\n+\n+        this.operatingSystemMXBean = tryGetAs(mxBean,\n+            com.sun.management.OperatingSystemMXBean.class);\n+    }\n+\n+    public double getSystemWideCpuUsage() {\n+        try {\n+            if (operatingSystemMXBean != null) {\n+                return operatingSystemMXBean.getSystemCpuLoad();", "originalCommit": "60fd433ceca144c91f7d5e091d155e5098c6cfc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxOTUxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486519515", "bodyText": "correct. thanks for catching this. will fix.", "author": "moderakh", "createdAt": "2020-09-10T17:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NTk4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486545987", "bodyText": "addressed the bug. thanks for catching it.", "author": "moderakh", "createdAt": "2020-09-10T18:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjkyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486116924", "bodyText": "I know these are the same values we use in .Net - IMO shorter intervals would have been good. Wondering whether we should start with 1 second when introducing this in Java?", "author": "FabianMeiswinkel", "createdAt": "2020-09-10T07:15:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/cpu/CpuMonitor.java", "diffHunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation.cpu;\n+\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.ref.WeakReference;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Monitors history of CPU consumption. This is a singleton class and can support multiple cosmos clients.\n+ *\n+ * is used for tracking multiple cosmos clients registers to this CPU monitor.\n+ * in the absence of a listener the CpuMonitor will shutdown.\n+ */\n+public class CpuMonitor {\n+    private final static int DEFAULT_REFRESH_INTERVAL_IN_SECONDS = 10;\n+    private final static int HISTORY_LENGTH = 6;", "originalCommit": "60fd433ceca144c91f7d5e091d155e5098c6cfc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyODU4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486528582", "bodyText": "CPU reading is expensive. so I would rather we don't do it every second. that's very aggressive.", "author": "moderakh", "createdAt": "2020-09-10T17:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMjU4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486532585", "bodyText": "From my tests (on .Net) it wouldn't have been a performance problem - especially because in Java we do it for every single TransportException (or requesting request diagnostics) right now. The problem I have with 10 seconds is that timeouts for customers using very aggressive request timeouts are hard to pinpoint to temporarily high CPU usage. 10 seconds is decent - and for .Net covers the vast majority of cases. So not blocking on this. I just think especially when we talk about collecting the metrics for the telemetry workstream Naveen is working on taking CU samples once per second is more useful. Reporting could be constrained to the top 10 values within the last x samples (to keep coverage over the 60 seconds interval in the CPU history text we emit today. But anyway - for this change I would understand if you go with the save assumption of using the same values as in .Net - just don't think that will be sufficient long term.", "author": "FabianMeiswinkel", "createdAt": "2020-09-10T18:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzOTMxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486539315", "bodyText": "the current behaviour on master: In Java we don't do for every single TransportException by default. CPU capture will happen only if the end user explicitly invokes toString on the diagnostics of the request.\nI will lower it to 5 seconds. the middle ground between 1 and 10 seconds :-)", "author": "moderakh", "createdAt": "2020-09-10T18:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NjE4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14993#discussion_r486546180", "bodyText": "lowered to 5 seconds. thanks for the conversation.", "author": "moderakh", "createdAt": "2020-09-10T18:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNjkyNA=="}], "type": "inlineReview"}, {"oid": "1de9ceb3667b560f784b4dd33c14e104ec9cb060", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1de9ceb3667b560f784b4dd33c14e104ec9cb060", "message": "addressed PR review, fixed CI", "committedDate": "2020-09-10T18:21:45Z", "type": "commit"}, {"oid": "1cc99007a7774bfb0f082da30f69df7ce6a1a0eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1cc99007a7774bfb0f082da30f69df7ce6a1a0eb", "message": "cleanup", "committedDate": "2020-09-10T19:08:38Z", "type": "commit"}, {"oid": "a54a8a65892c590035ee70d6d0a1f826a7f7a1af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a54a8a65892c590035ee70d6d0a1f826a7f7a1af", "message": "Merge branch 'master' into users/moderakh/cpu-history", "committedDate": "2020-09-10T21:06:37Z", "type": "commit"}, {"oid": "21c72bed3ada494a5a0b7a4f85204f8afcbf51bb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21c72bed3ada494a5a0b7a4f85204f8afcbf51bb", "message": "fix readme", "committedDate": "2020-09-10T22:51:51Z", "type": "commit"}, {"oid": "0751e89837fd05121664b76d66666b5c3ae7a257", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0751e89837fd05121664b76d66666b5c3ae7a257", "message": "bugfix", "committedDate": "2020-09-10T23:58:30Z", "type": "commit"}]}