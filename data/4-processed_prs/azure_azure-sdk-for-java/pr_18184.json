{"pr_number": 18184, "pr_title": "Spark3: foundation for broadcasting CosmosClient Cache from Spark Driver and re-use the caches in the Spark Executor.", "pr_createdAt": "2020-12-16T19:56:48Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18184", "timeline": [{"oid": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "message": "setting up the foundation for broadcasting cosmos client cache", "committedDate": "2020-12-16T19:50:38Z", "type": "commit"}, {"oid": "73c48ccbfbd74b7e6fce86fb3cfb5225be8d7c2f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73c48ccbfbd74b7e6fce86fb3cfb5225be8d7c2f", "message": "fixed code style", "committedDate": "2020-12-17T20:45:33Z", "type": "commit"}, {"oid": "50c50fd2fabe1220a636ba641b3e01b89b6b5212", "url": "https://github.com/Azure/azure-sdk-for-java/commit/50c50fd2fabe1220a636ba641b3e01b89b6b5212", "message": "fixed checkstyle", "committedDate": "2020-12-17T23:42:53Z", "type": "commit"}, {"oid": "a54d6b758ac5227ef283650edc9ad7ac65571961", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a54d6b758ac5227ef283650edc9ad7ac65571961", "message": "fixed checkstyle", "committedDate": "2020-12-18T00:46:59Z", "type": "commit"}, {"oid": "5dd99e6607f2b394350c11257496ec7b36a98ec1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5dd99e6607f2b394350c11257496ec7b36a98ec1", "message": "fixed tests", "committedDate": "2020-12-18T05:52:26Z", "type": "commit"}, {"oid": "91e58e5af82e5420f652daf3293b28b4851eb1fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/91e58e5af82e5420f652daf3293b28b4851eb1fa", "message": "fixed style", "committedDate": "2020-12-18T05:56:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2ODg4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545868887", "bodyText": "Will intel sense show these contracts?\nAlso can it be made deprecated to start with?", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:35:03Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosBridgeInternal.java", "diffHunk": "@@ -130,6 +131,12 @@ public static CosmosClientBuilder cloneCosmosClientBuilder(CosmosClientBuilder b\n         return copy;\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static CosmosClientBuilder setUsingState(CosmosClientBuilder cosmosClientBuilder, CosmosClientState state) {", "originalCommit": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1ODM1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545958357", "bodyText": "This is an established pattern in the SDK. There are many other methods in this file with the same pattern. We should follow the same pattern here.", "author": "moderakh", "createdAt": "2020-12-18T16:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2ODg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNTE2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r551635166", "bodyText": "removed the CosmosBridgeInternal completely.\nsee this commit please:\n2f31869\nThis is a pattern to get rid of BridgeInternal classes.", "author": "moderakh", "createdAt": "2021-01-04T23:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2ODg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTYzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545869631", "bodyText": "Its actually metadata cache only right.\nState might mean many other aspects.", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:36:17Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {", "originalCommit": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1NDQxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545954410", "bodyText": "Good point. will change the name to reflect it is metadata caches. Thanks.", "author": "moderakh", "createdAt": "2020-12-18T16:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MzQxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545983411", "bodyText": "addressed", "author": "moderakh", "createdAt": "2020-12-18T17:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg2OTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MDI4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545870289", "bodyText": "ni: Indent", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:37:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);\n+        documentClient.serialize(this);\n+    }\n+\n+    public void serializeCollectionInfoByNameCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByNameCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    public void serializeCollectionInfoByIdCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        this.collectionInfoByIdCache = serializeAsyncCollectionCache(cache);\n+    }\n+\n+    private byte[] serializeAsyncCollectionCache(AsyncCache<String, DocumentCollection> cache) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream objectOutputStream = new ObjectOutputStream(baos);\n+        objectOutputStream.writeObject(AsyncCache.SerializableAsyncCache.from(cache, String.class, DocumentCollection.class));\n+\n+        objectOutputStream.close();\n+        return baos.toByteArray();\n+    }\n+\n+    public AsyncCache<String, DocumentCollection> getCollectionInfoByNameCache() throws IOException, ClassNotFoundException {", "originalCommit": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1ODUwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545958509", "bodyText": "This file is revised.", "author": "moderakh", "createdAt": "2020-12-18T16:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MDI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NjE5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545876197", "bodyText": "CosmosException?", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:45:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -384,7 +387,18 @@ public void init() {\n             this.globalEndpointManager.init();\n             this.initializeGatewayConfigurationReader();\n \n-            this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy);\n+            if (state != null ) {\n+                try {\n+                    this.collectionCache = new RxClientCollectionCache(this, this.sessionContainer, this.gatewayProxy, this, this.retryPolicy,\n+                        state.getCollectionInfoByNameCache(),\n+                        state.getCollectionInfoByIdCache()\n+                    );\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);", "originalCommit": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MzAwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545983007", "bodyText": "thanks. addressed.", "author": "moderakh", "createdAt": "2020-12-18T17:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NjE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3Njc1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545876759", "bodyText": "How will be \"backward compatibility\" mnaged?", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:46:08Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosClientState.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosBridgeInternal;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class CosmosClientState implements Serializable {\n+    public byte[] collectionInfoByNameCache;\n+    public byte[] collectionInfoByIdCache;\n+\n+    public CosmosClientState() {\n+        System.out.println(\"initialized Cosmos Client State\");\n+    }\n+\n+    public void serialize(CosmosAsyncClient client) throws IOException {\n+        RxDocumentClientImpl documentClient = (RxDocumentClientImpl) CosmosBridgeInternal.getAsyncDocumentClient(client);", "originalCommit": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTUwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545981508", "bodyText": "I am assuming you are referring to serializing caches of SDK from an older version of the SDK and trying to deserialize on newer version of the SDK.\nAssuming I understood the question correctly.\n\neach of the component that we serialize/deserialize has a \"serialVersionUID\" which ensures the serialization code and deserialization code are on the same version. If they are not Java serialization will throw exception.\n\nsee this please:\nThe serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an InvalidClassException. A serializable class can declare its own serialVersionUID explicitly by declaring a field named \"serialVersionUID\" that must be static, final, and of type long:\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html\n\nif this happens in a spark cluster we have a bigger problem as it means different nodes of the spark cluster are on different versions of the spark-connector, in this situation many other things will go wrong too.", "author": "moderakh", "createdAt": "2020-12-18T17:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3Njc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545881965", "bodyText": "By name is a reference or derived one.\nHow about limit to primitive data only?", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:51:26Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);\n+        state.serializeCollectionInfoByNameCache(cache.collectionInfoByNameCache);", "originalCommit": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NDkwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545974905", "bodyText": "this is by a reference. serializing cache.collectionInfoByIdCache and cache.collectionInfoByIdCache are necessary for taking a snapshot of the CollectionCache.", "author": "moderakh", "createdAt": "2020-12-18T17:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NTk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545885944", "bodyText": "Are routing addresses also cached?", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:55:02Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/caches/RxCollectionCache.java", "diffHunk": "@@ -29,9 +31,18 @@\n     private final AsyncCache<String, DocumentCollection> collectionInfoByNameCache;\n     private final AsyncCache<String, DocumentCollection> collectionInfoByIdCache;\n \n+    public static void serialize(CosmosClientState state, RxCollectionCache cache) throws IOException {\n+        state.serializeCollectionInfoByIdCache(cache.collectionInfoByIdCache);", "originalCommit": "d2a8a9998ac4e2f0b2b31ffbe5e05df2de96b13d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4Njc2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545886763", "bodyText": "Saw this as TODO in description. Thanks.\n\nIn reply to: 545885944 [](ancestors = 545885944)", "author": "kirankumarkolli", "createdAt": "2020-12-18T14:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1OTM2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r545959367", "bodyText": "This PR provides the foundation for the cache broadcast but for now I only wired up the CollectionCache serialization.\nPlease see PR description TODOs for more info.", "author": "moderakh", "createdAt": "2020-12-18T16:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4NTk0NA=="}], "type": "inlineReview"}, {"oid": "c5c3c283ef3090d1d0515308f805477c1c5d5512", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c5c3c283ef3090d1d0515308f805477c1c5d5512", "message": "addressed review comments", "committedDate": "2020-12-18T17:33:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDI3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r546124276", "bodyText": "Just my 2 cents: I don't think the Spark connector should be allowed to use internal API. Instead I think we need to add this to public surface area (as beta first). It encourages customers to use internal API if we start using it across different maven packages/binaries", "author": "FabianMeiswinkel", "createdAt": "2020-12-18T22:40:05Z", "path": "sdk/cosmos/azure-cosmos-spark_3-0_2-12/src/main/scala/com/azure/cosmos/spark/CosmosPartitionReader.scala", "diffHunk": "@@ -25,10 +30,16 @@ case class CosmosPartitionReader(config: Map[String, String], readSchema: Struct\n \n   // TODO: moderakh cache the cosmos clients and manage the lifetime of the clients\n   // we shouldn't recreate everytime, causing resource leak, inefficient behaviour\n-  val cosmosAsyncContainer = new CosmosClientBuilder()\n+  val builder = new CosmosClientBuilder()\n     .endpoint(endpointConfig.endpoint)\n     .key(endpointConfig.key)\n-    .buildAsyncClient()\n+\n+  val state = cosmosClientStateHandle.value;\n+\n+  CosmosBridgeInternal.metadataCaches(builder, cosmosClientStateHandle.value)", "originalCommit": "c5c3c283ef3090d1d0515308f805477c1c5d5512", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r546124455", "bodyText": "This should be public instead (see comment above)", "author": "FabianMeiswinkel", "createdAt": "2020-12-18T22:40:46Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -116,6 +118,15 @@ public CosmosClientBuilder() {\n         this.throttlingRetryOptions = new ThrottlingRetryOptions();\n     }\n \n+    CosmosClientBuilder metadataCaches(CosmosClientMetadataCachesSnapshot metadataCachesSnapshot) {\n+        this.state = metadataCachesSnapshot;\n+        return this;\n+    }", "originalCommit": "c5c3c283ef3090d1d0515308f805477c1c5d5512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNDYxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18184#discussion_r551634610", "bodyText": "please see this commit:\n2f31869\nThe api is internal now and also removed bridge-internal. This is a pattern we can follow elsewhere too.", "author": "moderakh", "createdAt": "2021-01-04T23:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNDQ1NQ=="}], "type": "inlineReview"}, {"oid": "2f31869e9c5d84b230f1664070455ef4a20f81f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2f31869e9c5d84b230f1664070455ef4a20f81f2", "message": "address review comment", "committedDate": "2021-01-04T22:44:21Z", "type": "commit"}]}