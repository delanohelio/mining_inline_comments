{"pr_number": 1251, "pr_title": "Backend JWT token generation support within microgateway (updated)", "pr_createdAt": "2020-05-30T05:48:20Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1251", "timeline": [{"oid": "88c5bee29d8261a9697fa01c4708179fae777758", "url": "https://github.com/wso2/product-microgateway/commit/88c5bee29d8261a9697fa01c4708179fae777758", "message": "added backend jwt token generation", "committedDate": "2020-05-29T08:14:52Z", "type": "commit"}, {"oid": "dd5dbeb5479bd4df4e39a4a3c53fa9b863fdea28", "url": "https://github.com/wso2/product-microgateway/commit/dd5dbeb5479bd4df4e39a4a3c53fa9b863fdea28", "message": "method documentation added for jwt_auth_handler file", "committedDate": "2020-05-29T08:15:45Z", "type": "commit"}, {"oid": "32430dd0220a5dc65acab837c06a7ff84d798c22", "url": "https://github.com/wso2/product-microgateway/commit/32430dd0220a5dc65acab837c06a7ff84d798c22", "message": "enabling jwt generator option added", "committedDate": "2020-05-29T08:16:06Z", "type": "commit"}, {"oid": "f5019e6a0708013662d99377135744e7c8057d8a", "url": "https://github.com/wso2/product-microgateway/commit/f5019e6a0708013662d99377135744e7c8057d8a", "message": "integration tests added", "committedDate": "2020-05-29T08:22:04Z", "type": "commit"}, {"oid": "7e49f0dbcbee140800a05034998722ec409ba1aa", "url": "https://github.com/wso2/product-microgateway/commit/7e49f0dbcbee140800a05034998722ec409ba1aa", "message": "configurations updated, generator class creation moved to initiation, mapvalue to map java side", "committedDate": "2020-05-29T09:10:10Z", "type": "commit"}, {"oid": "a85b9053cb72f1c8f6a3c24689d03300595c52a2", "url": "https://github.com/wso2/product-microgateway/commit/a85b9053cb72f1c8f6a3c24689d03300595c52a2", "message": "seperate bal file added for interop functions", "committedDate": "2020-05-29T09:10:54Z", "type": "commit"}, {"oid": "ab79f8f93dbe058e0beefce892855f9517a76ba3", "url": "https://github.com/wso2/product-microgateway/commit/ab79f8f93dbe058e0beefce892855f9517a76ba3", "message": "error handling moved to ballerina side", "committedDate": "2020-05-29T09:27:16Z", "type": "commit"}, {"oid": "35c303a27ae61c8142bb8420915ea93d571bc456", "url": "https://github.com/wso2/product-microgateway/commit/35c303a27ae61c8142bb8420915ea93d571bc456", "message": "restricted claims array conversion moved to java side", "committedDate": "2020-05-29T09:32:05Z", "type": "commit"}, {"oid": "7233309ef1528e1f0ea5668fc4de6f3dcdf11bd5", "url": "https://github.com/wso2/product-microgateway/commit/7233309ef1528e1f0ea5668fc4de6f3dcdf11bd5", "message": "added multiple audience option, refactored code, added license", "committedDate": "2020-05-30T05:36:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0MTE0Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433041142", "bodyText": "Package name should be jwt.generator", "author": "Rajith90", "createdAt": "2020-06-01T04:56:28Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/jwtgenerator/MGWJWTGeneratorInvoker.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.jwtgenerator;", "originalCommit": "7233309ef1528e1f0ea5668fc4de6f3dcdf11bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0MTc0OA==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433041748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (timestampSkew == -1) {\n          \n          \n            \n                if (timestampSkew == DEFAULT_SERVER_TIMESTAMP_SKEW) {", "author": "Rajith90", "createdAt": "2020-06-01T04:59:46Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -126,7 +126,13 @@ public function isAccessTokenExpired(APIKeyValidationDto apiKeyValidationDto) re\n     if (issueTime is string) {\n         issuedTime = 'int:fromString(issueTime);\n     }\n-    int timestampSkew = getConfigIntValue(KM_CONF_INSTANCE_ID, TIMESTAMP_SKEW, DEFAULT_TIMESTAMP_SKEW);\n+\n+    // provide backward compatibility for skew time\n+    int timestampSkew = getConfigIntValue(SERVER_CONF_ID, SERVER_TIMESTAMP_SKEW, DEFAULT_SERVER_TIMESTAMP_SKEW);\n+    if (timestampSkew == -1) {", "originalCommit": "7233309ef1528e1f0ea5668fc4de6f3dcdf11bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0MTgxNg==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433041816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (self.skewTime == -1) {\n          \n          \n            \n                        if (self.skewTime == DEFAULT_SERVER_TIMESTAMP_SKEW) {", "author": "Rajith90", "createdAt": "2020-06-01T05:00:04Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "diffHunk": "@@ -27,8 +27,97 @@ public type JWTAuthHandler object {\n \n     public JwtAuthProvider jwtAuthProvider;\n \n+    private boolean enabledJWTGenerator = false;\n+    private boolean classLoaded = false;\n+    private string generatorClass = \"\";\n+    private string dialectURI = \"\";\n+    private string signatureAlgorithm = \"\";\n+    private string certificateAlias = \"\";\n+    private string privateKeyAlias = \"\";\n+    private int tokenExpiry = 0;\n+    private any[] restrictedClaims = [];\n+    private string keyStoreLocationUnresolved = \"\";\n+    private string keyStorePassword = \"\";\n+    private string tokenIssuer = \"\";\n+    private any[] tokenAudience = [];\n+    private int skewTime = 0;\n+    private boolean enabledCaching = false;\n+    private int cacheExpiry = 0;\n+\n     public function __init(JwtAuthProvider jwtAuthProvider) {\n         self.jwtAuthProvider = jwtAuthProvider;\n+        // initiating generator class if enabled\n+        self.enabledJWTGenerator = getConfigBooleanValue(JWT_GENERATOR_ID,\n+                                                            JWT_GENERATOR_ENABLED,\n+                                                            DEFAULT_JWT_GENERATOR_ENABLED);\n+        if (self.enabledJWTGenerator) {\n+            self.generatorClass = getConfigValue(JWT_GENERATOR_ID,\n+                                                    JWT_GENERATOR_IMPLEMENTATION,\n+                                                    DEFAULT_JWT_GENERATOR_IMPLEMENTATION);\n+            self.dialectURI = getConfigValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_DIALECT,\n+                                                DEFAULT_JWT_GENERATOR_DIALECT);\n+            self.signatureAlgorithm = getConfigValue(JWT_GENERATOR_ID,\n+                                                        JWT_GENERATOR_SIGN_ALGO,\n+                                                        DEFAULT_JWT_GENERATOR_SIGN_ALGO);\n+            self.certificateAlias = getConfigValue(JWT_GENERATOR_ID,\n+                                                        JWT_GENERATOR_CERTIFICATE_ALIAS,\n+                                                        DEFAULT_JWT_GENERATOR_CERTIFICATE_ALIAS);\n+            self.privateKeyAlias = getConfigValue(JWT_GENERATOR_ID,\n+                                                    JWT_GENERATOR_PRIVATE_KEY_ALIAS,\n+                                                    DEFAULT_JWT_GENERATOR_PRIVATE_KEY_ALIAS);\n+            self.tokenExpiry = getConfigIntValue(JWT_GENERATOR_ID,\n+                                                    JWT_GENERATOR_TOKEN_EXPIRY,\n+                                                    DEFAULT_JWT_GENERATOR_TOKEN_EXPIRY);\n+            self.restrictedClaims = getConfigArrayValue(JWT_GENERATOR_ID,\n+                                                        JWT_GENERATOR_RESTRICTED_CLAIMS);\n+            self.keyStoreLocationUnresolved = getConfigValue(LISTENER_CONF_INSTANCE_ID,\n+                                                                KEY_STORE_PATH,\n+                                                                DEFAULT_KEY_STORE_PATH);\n+            self.keyStorePassword = getConfigValue(LISTENER_CONF_INSTANCE_ID,\n+                                                                    KEY_STORE_PASSWORD,\n+                                                                    DEFAULT_KEY_STORE_PASSWORD);\n+            self.tokenIssuer = getConfigValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_TOKEN_ISSUER,\n+                                                DEFAULT_JWT_GENERATOR_TOKEN_ISSUER);\n+            self.tokenAudience = getConfigArrayValue(JWT_GENERATOR_ID,\n+                                                        JWT_GENERATOR_TOKEN_AUDIENCE);\n+            // provide backward compatibility for skew time\n+            self.skewTime = getConfigIntValue(SERVER_CONF_ID, \n+                                                SERVER_TIMESTAMP_SKEW, \n+                                                DEFAULT_SERVER_TIMESTAMP_SKEW);\n+            if (self.skewTime == -1) {", "originalCommit": "7233309ef1528e1f0ea5668fc4de6f3dcdf11bd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6e37528d19b38718e0809243a244128df2b82485", "url": "https://github.com/wso2/product-microgateway/commit/6e37528d19b38718e0809243a244128df2b82485", "message": "package name changed, default skew time constant used", "committedDate": "2020-06-01T06:07:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3MzE4Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433073187", "bodyText": "we may able to use the above cache default variables for here as well.\nDEFAULT_TOKEN_CACHE_EXPIRY, DEFAULT_TOKEN_CACHE_CAPACITY, DEFAULT_TOKEN_CACHE_EVICTION_FACTOR, etc...", "author": "AmaliMatharaarachchi", "createdAt": "2020-06-01T07:02:04Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/micro_gw_conf_defaults.bal", "diffHunk": "@@ -121,3 +121,19 @@ public const boolean DEFAULT_VALIDATE_APIS_ENABLED = false;\n \n public const boolean DEFAULT_API_KEY_ISSUER_ENABLED = true;\n public const int DEFAULT_API_KEY_VALIDITY_TIME = -1;\n+\n+public const boolean DEFAULT_JWT_GENERATOR_ENABLED = false;\n+public const string DEFAULT_JWT_GENERATOR_DIALECT = \"http://wso2.org/claims\";\n+public const string DEFAULT_JWT_GENERATOR_SIGN_ALGO = \"SHA256withRSA\";\n+public const string DEFAULT_JWT_GENERATOR_CERTIFICATE_ALIAS = \"ballerina\";\n+public const string DEFAULT_JWT_GENERATOR_PRIVATE_KEY_ALIAS = \"ballerina\";\n+public const int DEFAULT_JWT_GENERATOR_TOKEN_EXPIRY = 900000;\n+public const string DEFAULT_JWT_GENERATOR_TOKEN_ISSUER = \"wso2.org/products/am\";\n+public const string DEFAULT_JWT_GENERATOR_IMPLEMENTATION = \"org.wso2.micro.gateway.core.jwt.generator.MGWJWTGeneratorImpl\";\n+\n+public const boolean DEFAULT_JWT_GENERATOR_TOKEN_CACHE_ENABLED = true;", "originalCommit": "6e37528d19b38718e0809243a244128df2b82485", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3MzMyMw==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433073323", "bodyText": "it's better to limit the line length to 120 characters", "author": "AmaliMatharaarachchi", "createdAt": "2020-06-01T07:02:31Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/api_gateway_cache.bal", "diffHunk": "@@ -20,14 +20,18 @@ import ballerina/cache;\n int cacheExpiryTime = getConfigIntValue(CACHING_ID, TOKEN_CACHE_EXPIRY, DEFAULT_TOKEN_CACHE_EXPIRY);\n int cacheSize = getConfigIntValue(CACHING_ID, TOKEN_CACHE_CAPACITY, DEFAULT_TOKEN_CACHE_CAPACITY);\n float evictionFactor = getConfigFloatValue(CACHING_ID, TOKEN_CACHE_EVICTION_FACTOR, DEFAULT_TOKEN_CACHE_EVICTION_FACTOR);\n+int jwtGeneratorCacheExpiryTime = getConfigIntValue(JWT_GENERATOR_CACHING_ID, JWT_GENERATOR_TOKEN_CACHE_EXPIRY, DEFAULT_JWT_GENERATOR_TOKEN_CACHE_EXPIRY);", "originalCommit": "6e37528d19b38718e0809243a244128df2b82485", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzAyMg==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433077022", "bodyText": "I remember this code is duplicated in a similar util method too. If so, can we check whether to combine them?", "author": "AmaliMatharaarachchi", "createdAt": "2020-06-01T07:13:55Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "diffHunk": "@@ -62,22 +151,193 @@ public type JWTAuthHandler object {\n         string credential = headerValue.substring(6, headerValue.length()).trim();\n         var authenticationResult = self.jwtAuthProvider.authenticate(credential);\n         if (authenticationResult is boolean) {\n-            setBackendJwtHeader(credential, req);\n+            boolean generationStatus = generateAndSetBackendJwtHeader(credential,\n+                                                                        req,\n+                                                                        self.enabledJWTGenerator,\n+                                                                        self.classLoaded,\n+                                                                        self.skewTime,\n+                                                                        self.enabledCaching);\n+            if (!generationStatus) {\n+                printError(KEY_JWT_AUTH_PROVIDER, \"JWT Generation failed\");\n+            }\n             return authenticationResult;\n         } else {\n             return prepareAuthenticationError(\"Failed to authenticate with jwt bearer auth handler.\", authenticationResult);\n         }\n     }\n+\n };\n \n-public function setBackendJwtHeader(string credential, http:Request req) {\n-    (jwt:JwtPayload | error) payload = getDecodedJWTPayload(credential);\n-    if (payload is jwt:JwtPayload) {\n-        map<json>? customClaims = payload?.customClaims;\n-        // validate backend jwt claim and set it to jwt header\n-        if (customClaims is map<json> && customClaims.hasKey(BACKEND_JWT)) {\n-            printDebug(KEY_JWT_AUTH_PROVIDER, \"Set backend jwt header.\");\n-            req.setHeader(jwtheaderName, customClaims.get(BACKEND_JWT).toString());\n+# Identify the api details from the subscribed apis in the authentication token.\n+#\n+# + payload - The payload of the authentication token\n+# + apiName - name of the current API\n+# + apiVersion - version of the current API\n+# + return - Returns map<string> with the extracted details.\n+public function getAPIDetails(jwt:JwtPayload payload, string apiName, string apiVersion) returns map<string> {", "originalCommit": "6e37528d19b38718e0809243a244128df2b82485", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEwMjI3OA==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433102278", "bodyText": "@AmaliMatharaarachchi yes. In subscription validation what it does is, it adds some of the details to the auth context. but some of them are not added. I didn't changed it since I have to change the auth context record.", "author": "HeshanSudarshana", "createdAt": "2020-06-01T08:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTcxNw==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433155717", "bodyText": "Can't we move the value reading from token payload to a util method and use it for both subscription method and this? to avoid decoding the payload multiple times.", "author": "AmaliMatharaarachchi", "createdAt": "2020-06-01T10:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3ODk1NQ==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433078955", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              timestampSkew = 5000\n          \n          \n            \n              timestampSkew = 5000", "author": "AmaliMatharaarachchi", "createdAt": "2020-06-01T07:19:29Z", "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -330,3 +328,42 @@\n     [[apikey.issuer.api]]\n       name=\"MyAPI\"\n       versions=\"*\"\n+\n+# JWT Generator configurations\n+[jwtGeneratorConfig]\n+  # Enable jwt generator\n+  jwtGeneratorEnabled=false\n+  # Dialect prefix that can be added to the claims\n+  claimDialect=\"http://wso2.org/claims\"\n+  # Signature algorithm used to sign the JWT token (only SHA256withRSA and NONE is supported)\n+  signingAlgorithm=\"SHA256withRSA\"\n+  # Certificate alias from the keystore\n+  certificateAlias=\"ballerina\"\n+  # Private key alias from the keystore\n+  privateKeyAlias=\"ballerina\"\n+  # JWT token expiry time - ms (valid only if the jwt generator caching mechanism is disabled)\n+  tokenExpiry=900000\n+  # Restricted claims as an array that should not be included in the backend JWT token\n+  # Example: restrictedClaims=[\"claim1\",\"claim2\",\"claim3\"]\n+  restrictedClaims=[]\n+  # Token issuer standard claim\n+  issuer=\"wso2.org/products/am\"\n+  # Token audience standard claim\n+  audience=[\"http://org.wso2.apimgt/gateway\"]\n+  # JWT token generator implementation\n+  generatorImpl=\"org.wso2.micro.gateway.core.jwt.generator.MGWJWTGeneratorImpl\"\n+  # JWT Generator cache configurations\n+  [jwtGeneratorConfig.jwtGeneratorCaching]\n+    # Enable jwt generator token caching\n+    tokenCacheEnable=true\n+    # Token cache expiry time (ms)\n+    tokenCacheExpiryTime=900000\n+    # Token cache capacity\n+    tokenCacheCapacity=10000\n+    # Token cache eviction factor\n+    tokenCacheEvictionFactor=0.25\n+\n+# server configuration\n+[server]\n+  # timestamp skew in seconds which added when checking the token validity period\n+  timestampSkew = 5000", "originalCommit": "6e37528d19b38718e0809243a244128df2b82485", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3OTMzNA==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r433079334", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              timestampSkew=5000\n          \n          \n            \n              timestampSkew=5000", "author": "AmaliMatharaarachchi", "createdAt": "2020-06-01T07:20:27Z", "path": "tests/src/test/resources/confs/base.conf", "diffHunk": "@@ -138,3 +137,6 @@ name = \"jaeger\"\n \n [b7a.observability.tracing.jaeger.reporter]\n port=5775\n+\n+[server]\n+  timestampSkew=5000", "originalCommit": "6e37528d19b38718e0809243a244128df2b82485", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0c3776a2e3096fee3a86ffccb6dc5a1cd86b332", "url": "https://github.com/wso2/product-microgateway/commit/a0c3776a2e3096fee3a86ffccb6dc5a1cd86b332", "message": "unnecessary defaults removed, refactored code", "committedDate": "2020-06-02T08:49:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjkzMzY4OA==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r556933688", "bodyText": "I think we can put the common strings used here in a constant file and use those constants instead. If they are already defined as constants let's use that. Ex: \"customClaims\", \"sub\", \"iss\", \"tier\" etc.", "author": "tharikaGitHub", "createdAt": "2021-01-13T22:59:06Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/jwt/generator/MGWJWTGeneratorImpl.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ *  Class to implement standard claims and custom claims.\n+ */\n+public class MGWJWTGeneratorImpl extends AbstractMGWJWTGenerator {\n+    private static final Log logger = LogFactory.getLog(MGWJWTGeneratorImpl.class);\n+    private static final String AUTH_APPLICATION_USER_LEVEL_TOKEN = \"Application_user\";\n+\n+    public MGWJWTGeneratorImpl(String dialectURI,\n+                               String signatureAlgorithm,\n+                               String trustStorePath,\n+                               String trustStorePassword,\n+                               String certificateAlias,\n+                               String privateKeyAlias,\n+                               int jwtExpiryTime,\n+                               String[] restrictedClaims,\n+                               boolean jwtCacheEnabled,\n+                               int jwtCacheExpiry,\n+                               String tokenIssuer,\n+                               String[] tokenAudience) {\n+        super(dialectURI, signatureAlgorithm, trustStorePath, trustStorePassword, certificateAlias, privateKeyAlias,\n+                jwtExpiryTime, restrictedClaims, jwtCacheEnabled, jwtCacheExpiry, tokenIssuer, tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap<>();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");", "originalCommit": "a0c3776a2e3096fee3a86ffccb6dc5a1cd86b332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc2MDI0Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r571760242", "bodyText": "Done with 45bcd34", "author": "HeshanSudarshana", "createdAt": "2021-02-08T03:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjkzMzY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NTkzMA==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r573045930", "bodyText": "missing try resource", "author": "tharindu1st", "createdAt": "2021-02-09T16:42:21Z", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/jwt/generator/AbstractMGWJWTGenerator.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.jwt.generator;\n+\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import net.minidev.json.JSONArray;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import java.io.FileInputStream;\n+import java.nio.charset.Charset;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.MessageDigest;\n+import java.security.PrivateKey;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ *  Abstract class for generate JWT for backend claims.\n+ */\n+public abstract class AbstractMGWJWTGenerator {\n+    private static final Log logger = LogFactory.getLog(AbstractMGWJWTGenerator.class);\n+    private static final String NONE = \"NONE\";\n+    private static final String SHA256_WITH_RSA = \"SHA256withRSA\";\n+    private String dialectURI;\n+    private String signatureAlgorithm;\n+    private String keyStorePath;\n+    private String keyStorePassword;\n+    private String certificateAlias;\n+    private String privateKeyAlias;\n+    private int jwtExpiryTime;\n+    private ArrayList<String> restrictedClaims;\n+    private boolean cacheEnabled;\n+    private int cacheExpiry;\n+    private String tokenIssuer;\n+    private String[] tokenAudience;\n+    private Map<String, Object> apiDetails;\n+    private List<String> defaultRestrictedClaims;\n+\n+    public AbstractMGWJWTGenerator(String dialectURI,\n+                                   String signatureAlgorithm,\n+                                   String keyStorePath,\n+                                   String keyStorePassword,\n+                                   String certificateAlias,\n+                                   String privateKeyAlias,\n+                                   int jwtExpiryTime,\n+                                   String[] restrictedClaims,\n+                                   boolean cacheEnabled,\n+                                   int cacheExpiry,\n+                                   String tokenIssuer,\n+                                   String[] tokenAudience) {\n+        this.keyStorePath = keyStorePath;\n+        this.keyStorePassword = keyStorePassword;\n+        this.certificateAlias = certificateAlias;\n+        this.privateKeyAlias = privateKeyAlias;\n+        this.jwtExpiryTime = jwtExpiryTime;\n+        this.dialectURI = dialectURI;\n+        this.signatureAlgorithm = signatureAlgorithm;\n+        this.cacheEnabled = cacheEnabled;\n+        this.cacheExpiry = cacheExpiry;\n+        this.tokenIssuer = tokenIssuer;\n+        this.tokenAudience = tokenAudience;\n+        this.restrictedClaims = new ArrayList<>(Arrays.asList(restrictedClaims));\n+        defaultRestrictedClaims = new ArrayList<>(Arrays.asList(\"iss\", \"sub\", \"aud\", \"exp\",\n+                \"nbf\", \"iat\", \"jti\", \"application\", \"tierInfo\", \"subscribedAPIs\", \"keytype\"));\n+        this.restrictedClaims.addAll(defaultRestrictedClaims);\n+    }\n+\n+    public String getPrivateKeyAlias() {\n+        return privateKeyAlias;\n+    }\n+\n+    public void setPrivateKeyAlias(String privateKeyAlias) {\n+        this.privateKeyAlias = privateKeyAlias;\n+    }\n+\n+    public List<String> getDefaultRestrictedClaims() {\n+        return defaultRestrictedClaims;\n+    }\n+\n+    public void setDefaultRestrictedClaims(List<String> defaultRestrictedClaims) {\n+        this.defaultRestrictedClaims = defaultRestrictedClaims;\n+    }\n+\n+    public String getCertificateAlias() {\n+        return certificateAlias;\n+    }\n+\n+    public void setCertificateAlias(String certificateAlias) {\n+        this.certificateAlias = certificateAlias;\n+    }\n+\n+    public Map<String, Object> getApiDetails() {\n+        return apiDetails;\n+    }\n+\n+    public void setApiDetails(Map<String, Object> apiDetails) {\n+        this.apiDetails = apiDetails;\n+    }\n+\n+    public String[] getTokenAudience() {\n+        return tokenAudience;\n+    }\n+\n+    public void setTokenAudience(String[] tokenAudience) {\n+        this.tokenAudience = tokenAudience;\n+    }\n+\n+    public String getTokenIssuer() {\n+        return tokenIssuer;\n+    }\n+\n+    public void setTokenIssuer(String tokenIssuer) {\n+        this.tokenIssuer = tokenIssuer;\n+    }\n+\n+    public boolean isCacheEnabled() {\n+        return cacheEnabled;\n+    }\n+\n+    public void setCacheEnabled(boolean cacheEnabled) {\n+        this.cacheEnabled = cacheEnabled;\n+    }\n+\n+    public int getCacheExpiry() {\n+        return cacheExpiry;\n+    }\n+\n+    public void setCacheExpiry(int cacheExpiry) {\n+        this.cacheExpiry = cacheExpiry;\n+    }\n+\n+    public ArrayList<String> getRestrictedClaims() {\n+        return restrictedClaims;\n+    }\n+\n+    public void setRestrictedClaims(ArrayList<String> restrictedClaims) {\n+        this.restrictedClaims = restrictedClaims;\n+    }\n+\n+    public String getKeyStorePath() {\n+        return keyStorePath;\n+    }\n+\n+    public void setKeyStorePath(String keyStorePath) {\n+        this.keyStorePath = keyStorePath;\n+    }\n+\n+    public String getKeyStorePassword() {\n+        return keyStorePassword;\n+    }\n+\n+    public void setKeyStorePassword(String keyStorePassword) {\n+        this.keyStorePassword = keyStorePassword;\n+    }\n+\n+    public String getDialectURI() {\n+        return dialectURI;\n+    }\n+\n+    public void setDialectURI(String dialectURI) {\n+        this.dialectURI = dialectURI;\n+    }\n+\n+    public String getSignatureAlgorithm() {\n+        return signatureAlgorithm;\n+    }\n+\n+    public void setSignatureAlgorithm(String signatureAlgorithm) {\n+        this.signatureAlgorithm = signatureAlgorithm;\n+    }\n+\n+    public int getJwtExpiryTime() {\n+        return jwtExpiryTime;\n+    }\n+\n+    public void setJwtExpiryTime(int jwtExpiryTime) {\n+        this.jwtExpiryTime = jwtExpiryTime;\n+    }\n+\n+    /**\n+     * Used to generate the JWT token.\n+     */\n+    public String generateToken(Map<String, Object> jwtInfo) throws Exception {\n+        String jwtHeader = buildHeader();\n+        String jwtBody = buildBody(jwtInfo);\n+        String base64UrlEncodedHeader = \"\";\n+        if (jwtHeader != null) {\n+            base64UrlEncodedHeader = encode(jwtHeader.getBytes(Charset.defaultCharset()));\n+        }\n+        String base64UrlEncodedBody = \"\";\n+        if (jwtBody != null) {\n+            base64UrlEncodedBody = encode(jwtBody.getBytes());\n+        }\n+        if (SHA256_WITH_RSA.equals(signatureAlgorithm)) {\n+            String assertion = base64UrlEncodedHeader + '.' + base64UrlEncodedBody;\n+            //get the assertion signed\n+            byte[] signedAssertion = signJWT(assertion);\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"signed assertion value : \" + new String(signedAssertion, Charset.defaultCharset()));\n+            }\n+            String base64UrlEncodedAssertion = encode(signedAssertion);\n+            return base64UrlEncodedHeader + '.' + base64UrlEncodedBody + '.' + base64UrlEncodedAssertion;\n+        } else {\n+            return base64UrlEncodedHeader + '.' + base64UrlEncodedBody + '.';\n+        }\n+    }\n+\n+    /**\n+     * Used to build the JWT header.\n+     */\n+    public String buildHeader() throws Exception {\n+        String jwtHeader = null;\n+        if (NONE.equals(signatureAlgorithm)) {\n+            StringBuilder jwtHeaderBuilder = new StringBuilder();\n+            jwtHeaderBuilder.append(\"{\\\"typ\\\":\\\"JWT\\\",\");\n+            jwtHeaderBuilder.append(\"\\\"alg\\\":\\\"\");\n+            jwtHeaderBuilder.append(\"none\");\n+            jwtHeaderBuilder.append('\\\"');\n+            jwtHeaderBuilder.append('}');\n+            jwtHeader = jwtHeaderBuilder.toString();\n+        } else if (SHA256_WITH_RSA.equals(signatureAlgorithm)) {\n+            jwtHeader = addCertToHeader();\n+        }\n+        return jwtHeader;\n+    }\n+\n+    /**\n+     * Used to sign the JWT using the keystore.\n+     */\n+    public byte[] signJWT(String assertion) throws Exception {\n+        FileInputStream is;\n+        is = new FileInputStream(keyStorePath);\n+        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        keystore.load(is, keyStorePassword.toCharArray());\n+        Key key = keystore.getKey(privateKeyAlias, keyStorePassword.toCharArray());\n+        Key privateKey = null;\n+        if (key instanceof PrivateKey) {\n+            privateKey = key;\n+        }\n+        //initialize signature with private key and algorithm\n+        Signature signature = Signature.getInstance(signatureAlgorithm);\n+        signature.initSign((PrivateKey) privateKey);\n+        //update signature with data to be signed\n+        byte[] dataInBytes = assertion.getBytes(Charset.defaultCharset());\n+        signature.update(dataInBytes);\n+\n+        // close the file stream\n+        is.close();\n+\n+        //sign the assertion and return the signature\n+        return signature.sign();\n+    }\n+\n+    /**\n+     * Used to get the expiration time of the token.\n+     */\n+    public long getTTL() {\n+        if (cacheEnabled) {\n+            return cacheExpiry;\n+        } else {\n+            return jwtExpiryTime;\n+        }\n+    }\n+\n+    /**\n+     * Used to add \"ballerina\"the certificate from the keystore to the header.\n+     */\n+    public String addCertToHeader() throws Exception {\n+        FileInputStream is;\n+        is = new FileInputStream(keyStorePath);", "originalCommit": "a0c3776a2e3096fee3a86ffccb6dc5a1cd86b332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTkyODIzNQ==", "url": "https://github.com/wso2/product-microgateway/pull/1251#discussion_r575928235", "bodyText": "Added with #1638", "author": "HeshanSudarshana", "createdAt": "2021-02-15T03:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NTkzMA=="}], "type": "inlineReview"}]}