{"pr_number": 1132, "pr_title": "Bug fix: allow Basic Auth with custom auth header", "pr_createdAt": "2020-03-12T11:36:18Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1132", "timeline": [{"oid": "d0779235fd78b8b65bd000739fb99d0d92c934b6", "url": "https://github.com/wso2/product-microgateway/commit/d0779235fd78b8b65bd000739fb99d0d92c934b6", "message": "Implement basic auth handler to handle different auth headers", "committedDate": "2020-03-12T11:08:17Z", "type": "commit"}, {"oid": "e1bdfd3152511fd13db7a00a458ed90fff1c0177", "url": "https://github.com/wso2/product-microgateway/commit/e1bdfd3152511fd13db7a00a458ed90fff1c0177", "message": "Implement test cases for basicAuth scopes and different auth header with basicAuth", "committedDate": "2020-03-12T11:13:29Z", "type": "commit"}, {"oid": "8675cb008894edb084ac0e3011dda4a3cebb7452", "url": "https://github.com/wso2/product-microgateway/commit/8675cb008894edb084ac0e3011dda4a3cebb7452", "message": "Change existing 8PerMin policy to 15PerMin policy", "committedDate": "2020-03-12T11:28:20Z", "type": "commit"}, {"oid": "b24922862ce4a1d2fba9a299a21a2f874e2ff38a", "url": "https://github.com/wso2/product-microgateway/commit/b24922862ce4a1d2fba9a299a21a2f874e2ff38a", "message": "Merge branch 'master' into basic-auth-fix", "committedDate": "2020-03-12T11:37:57Z", "type": "commit"}, {"oid": "3830858e73e6cab0e409fdace737373fbd0e3e7f", "url": "https://github.com/wso2/product-microgateway/commit/3830858e73e6cab0e409fdace737373fbd0e3e7f", "message": "Merge branch 'master' into basic-auth-fix", "committedDate": "2020-03-12T12:30:35Z", "type": "commit"}, {"oid": "7eba18f37937e30230bc4374f789115f7ff57e65", "url": "https://github.com/wso2/product-microgateway/commit/7eba18f37937e30230bc4374f789115f7ff57e65", "message": "resolve test failures", "committedDate": "2020-03-12T12:48:58Z", "type": "commit"}, {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1", "url": "https://github.com/wso2/product-microgateway/commit/e49189a3ca6f2bfe5721512fbb41cd4c03e289a1", "message": "Basic auth header value is allowed to be in any case", "committedDate": "2020-03-12T13:10:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxOTY3OA==", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r391719678", "bodyText": "Use the constant for the header", "author": "Rajith90", "createdAt": "2020-03-12T15:55:58Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = \"authorization\";", "originalCommit": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTEzNw==", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r392031137", "bodyText": "fixed via 5f2b131", "author": "VirajSalaka", "createdAt": "2020-03-13T05:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxOTY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNTAwMw==", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r391725003", "bodyText": "There is a method to get authorization header from the service annotation.  Is that method setting the value to the context", "author": "Rajith90", "createdAt": "2020-03-12T16:03:57Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();", "originalCommit": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTc2OQ==", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r392029769", "bodyText": "In the pre authentication filter, it is added to the invocation context. Besides that, it is required to pass the filter context to call that specific method.", "author": "VirajSalaka", "createdAt": "2020-03-13T04:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNTAwMw=="}], "type": "inlineReview"}, {"oid": "5f2b131876a0349201092db9985824582f120fba", "url": "https://github.com/wso2/product-microgateway/commit/5f2b131876a0349201092db9985824582f120fba", "message": "fix commented issues", "committedDate": "2020-03-13T04:56:41Z", "type": "commit"}, {"oid": "f56b7fcef23ec648773909d8714e424b5654e919", "url": "https://github.com/wso2/product-microgateway/commit/f56b7fcef23ec648773909d8714e424b5654e919", "message": "Merge branch 'master' into basic-auth-fix", "committedDate": "2020-03-13T04:59:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTA4Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r422591082", "bodyText": "It is better to remove extra lines", "author": "Shehanir", "createdAt": "2020-05-10T05:58:55Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+", "originalCommit": "f56b7fcef23ec648773909d8714e424b5654e919", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTIyMA==", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r422591220", "bodyText": "Shall we keep an extra line at EOF", "author": "Shehanir", "createdAt": "2020-05-10T06:00:08Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        if (req.hasHeader(authHeader)) {\n+            string headerValue = req.getHeader(authHeader).toLowerAscii();\n+            string authScheme = (auth:AUTH_SCHEME_BASIC).toLowerAscii();\n+            if (headerValue.startsWith(authScheme)) {\n+                printDebug(KEY_AUTHN_FILTER, \"Request will be authenticated via basicAuth handler\");\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    # Authenticates the incoming request with the use of credentials passed as the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if authenticated successfully. Else, returns `false`\n+    # or the `AuthenticationError` in case of an error.\n+    public function process(http:Request req) returns @tainted boolean | http:AuthenticationError {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        string headerValue = req.getHeader(authHeader);\n+        string credential = headerValue.substring(5, headerValue.length()).trim();\n+        var authenticationResult = self.basicAuthProvider.authenticate(credential);\n+        if (authenticationResult is boolean) {\n+            return authenticationResult;\n+        } else {\n+            return prepareAuthenticationError(\"Failed to authenticate with basic auth handler.\", authenticationResult);\n+        }\n+    }\n+};", "originalCommit": "f56b7fcef23ec648773909d8714e424b5654e919", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1OTQ1MA==", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r489559450", "bodyText": "fix is already merged from some other PR.", "author": "VirajSalaka", "createdAt": "2020-09-16T16:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTIyMA=="}], "type": "inlineReview"}]}