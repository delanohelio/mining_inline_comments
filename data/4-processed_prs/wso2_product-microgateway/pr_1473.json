{"pr_number": 1473, "pr_title": "Load API from checkrequest info", "pr_createdAt": "2020-11-09T05:45:14Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1473", "timeline": [{"oid": "db0b948e2dce16bc38be74b9815087df19f8d294", "url": "https://github.com/wso2/product-microgateway/commit/db0b948e2dce16bc38be74b9815087df19f8d294", "message": "filter: jwt: Validate from checkrequest info\n\nFilter chain doesn't need to load openapi defs separately. All\nrequired details will be attached to the checkrequest from envoy\nin ContextAttributes map", "committedDate": "2020-11-09T05:32:00Z", "type": "commit"}, {"oid": "0f2ba786879ca099894bfac455583fe264fb4157", "url": "https://github.com/wso2/product-microgateway/commit/0f2ba786879ca099894bfac455583fe264fb4157", "message": "Merge remote-tracking branch 'upstream/envoy-gw' into check-req-apis", "committedDate": "2020-11-09T12:47:45Z", "type": "commit"}, {"oid": "806eb1b3c0b4f4c0254aab8ab09f7bf39833925b", "url": "https://github.com/wso2/product-microgateway/commit/806eb1b3c0b4f4c0254aab8ab09f7bf39833925b", "message": "filter: log: Enable log4j2 configuration", "committedDate": "2020-11-10T10:17:27Z", "type": "commit"}, {"oid": "bd6d39bc3ec5647d751014e06f5101ac1792cc79", "url": "https://github.com/wso2/product-microgateway/commit/bd6d39bc3ec5647d751014e06f5101ac1792cc79", "message": "filter: conf: Use common config.toml\n\nThere is no point in using separate config file for filter chain.", "committedDate": "2020-11-10T12:17:14Z", "type": "commit"}, {"oid": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f", "url": "https://github.com/wso2/product-microgateway/commit/fc61c8c2b3844288e41d12750fa3ec1cfd27715f", "message": "filter: Fix NPE", "committedDate": "2020-11-10T12:20:14Z", "type": "commit"}, {"oid": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f", "url": "https://github.com/wso2/product-microgateway/commit/fc61c8c2b3844288e41d12750fa3ec1cfd27715f", "message": "filter: Fix NPE", "committedDate": "2020-11-10T12:20:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3ODA4Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521078087", "bodyText": "If multiple http methods are involved with a single path, the filter-core gets a space separated set of Methods (in a pending PR).\nHence shall we split this using space and add a resource for each method.", "author": "VirajSalaka", "createdAt": "2020-11-11T03:21:26Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/api/RestAPI.java", "diffHunk": "@@ -85,63 +74,22 @@ public APIConfig getAPIConfig() {\n         return this.apiConfig;\n     }\n \n-    private List<ResourceConfig> getResourcesFromOpenAPI(Paths paths) {\n-        List<ResourceConfig> resourceConfigs = new ArrayList<>();\n-        paths.forEach((name, path) -> {\n-            path.readOperationsMap().forEach((httpMethod, operation) -> {\n-                ResourceConfig resourceConfig = new ResourceConfig();\n-                resourceConfig.setPath(name);\n-                resourceConfig.setMethod(ResourceConfig.HttpMethods.valueOf(httpMethod.name()));\n-                resourceConfigs.add(resourceConfig);\n-            });\n-        });\n-        return resourceConfigs;\n-    }\n-\n-    private String resolveBasePath() {\n-        String basePath = \"/\";\n-        if (openAPI.getExtensions() != null && openAPI.getExtensions().containsKey(APIConstants.X_WSO2_BASE_PATH)) {\n-            return openAPI.getExtensions().get(APIConstants.X_WSO2_BASE_PATH).toString();\n-        }\n-        List<Server> servers = openAPI.getServers();\n-        if (servers != null) {\n-            Server server = servers.get(0);\n-            String url = replaceOpenAPIServerTemplate(server);\n-            try {\n-                basePath = new URI(url).getPath();\n-            } catch (URISyntaxException e) {\n-                logger.error(e);\n-            }\n-        }\n-        return basePath;\n-    }\n-\n     /**\n-     * Open API server object can have server templating. Ex: https://{customerId}.saas-app.com:{port}/v2.\n-     * When adding the back end url this method will replace the template values with the default value.\n+     * Extract elected resource details from the request attributes.\n      *\n-     * @param server {@link Server} object of the open API definition\n-     * @return templated server url replaced with default values\n+     * @param attributes request attributes\n+     * @return resource configuration identified by the request\n      */\n-    private static String replaceOpenAPIServerTemplate(Server server) {\n-        //server url templating can have urls similar to 'https://{customerId}.saas-app.com:{port}/v2'\n-        String url = server.getUrl();\n-        Pattern serverTemplate = Pattern.compile(\"\\\\{.*?}\");\n-        Matcher matcher = serverTemplate.matcher(url);\n-        while (matcher.find()) {\n-            if (server.getVariables() != null && server.getVariables()\n-                    .containsKey(matcher.group(0).substring(1, matcher.group(0).length() - 1))) {\n-                String defaultValue = server.getVariables()\n-                        .get(matcher.group(0).substring(1, matcher.group(0).length() - 1)).getDefault();\n-                url = url.replaceAll(\"/\" + matcher.group(0), defaultValue);\n-            } else {\n-                logger.error(\"Open API server url templating is used for the url : \" + url\n-                        + \". But default values is not provided for the variable '\" + matcher.group(0)\n-                        + \"'. Hence correct url will not be resolved during the runtime \"\n-                        + \"unless url is overridden during the runtime\");\n-            }\n-        }\n-        return url;\n+    private List<ResourceConfig> extractResourceConfig(Map<String, String> attributes) {\n+        String resPath = attributes.get(APIConstants.GW_RES_PATH_PARAM);\n+        String resMethod = attributes.get(APIConstants.GW_RES_METHOD_PARAM);", "originalCommit": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3ODM5MA==", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521178390", "bodyText": "Fixed with c2b0467", "author": "praminda", "createdAt": "2020-11-11T07:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3ODA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMDU1Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521110553", "bodyText": "Lets use the existing distribution name we used for microgateway runtime", "author": "Rajith90", "createdAt": "2020-11-11T04:45:05Z", "path": "distribution/src/main/assembly/assembly.xml", "diffHunk": "@@ -28,7 +28,7 @@\n         </fileSet>\n         <fileSet>\n             <directory>../resources/conf</directory>\n-            <outputDirectory>WSO2-Microgateway-${project.version}/resources/pilot/conf</outputDirectory>\n+            <outputDirectory>WSO2-Microgateway-${project.version}/resources/conf</outputDirectory>", "originalCommit": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3ODI1MA==", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521178250", "bodyText": "Fixed with 2921e00", "author": "praminda", "createdAt": "2020-11-11T07:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMDU1Mw=="}], "type": "inlineReview"}, {"oid": "2921e002899101ffbfa33e84120f3072e2c1c679", "url": "https://github.com/wso2/product-microgateway/commit/2921e002899101ffbfa33e84120f3072e2c1c679", "message": "dist: Change distribution name\n\ndist naming pattern should be similar to old dist", "committedDate": "2020-11-11T07:23:13Z", "type": "commit"}, {"oid": "c2b0467daef546512143a87746ec6afa3c39221a", "url": "https://github.com/wso2/product-microgateway/commit/c2b0467daef546512143a87746ec6afa3c39221a", "message": "filter: Support multi method resources\n\nIf single resource definition contains multiple http methods gw\nwill return multiple methods as the resoruce list to match. These\nshould be regonized and built as multiple resource configurations\nin filter chain.", "committedDate": "2020-11-11T07:55:37Z", "type": "commit"}, {"oid": "020d9bf0c8874f883845c0bba332af11919d44e2", "url": "https://github.com/wso2/product-microgateway/commit/020d9bf0c8874f883845c0bba332af11919d44e2", "message": "filter: Disable evenhub by default", "committedDate": "2020-11-11T07:56:03Z", "type": "commit"}]}