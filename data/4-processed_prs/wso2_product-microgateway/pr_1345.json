{"pr_number": 1345, "pr_title": "Refactor Backend JWT generation and Implement default claim retriever Implementation", "pr_createdAt": "2020-07-21T07:02:23Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1345", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNTk5Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r458625992", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |};\n          \n          \n            \n            |};", "author": "AmaliMatharaarachchi", "createdAt": "2020-07-22T08:31:01Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/config_dtos/jwt_generator_config.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public type JWTGeneratorConfigDTO record {|\n+    boolean jwtGeneratorEnabled = getConfigBooleanValue(JWT_GENERATOR_ID,\n+                                                        JWT_GENERATOR_ENABLED,\n+                                                        DEFAULT_JWT_GENERATOR_ENABLED);\n+    string dialectURI = getConfigValue(JWT_GENERATOR_ID,\n+                                        JWT_GENERATOR_DIALECT,\n+                                        DEFAULT_JWT_GENERATOR_DIALECT);\n+    string signingAlgorithm = getConfigValue(JWT_GENERATOR_ID,\n+                                            JWT_GENERATOR_SIGN_ALGO,\n+                                            DEFAULT_JWT_GENERATOR_SIGN_ALGO);\n+    string certificateAlias = getConfigValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_CERTIFICATE_ALIAS,\n+                                                DEFAULT_JWT_GENERATOR_CERTIFICATE_ALIAS);\n+    string privateKeyAlias = getConfigValue(JWT_GENERATOR_ID,\n+                                            JWT_GENERATOR_PRIVATE_KEY_ALIAS,\n+                                            DEFAULT_JWT_GENERATOR_PRIVATE_KEY_ALIAS);\n+    int tokenExpiry = getConfigIntValue(JWT_GENERATOR_ID,\n+                                            JWT_GENERATOR_TOKEN_EXPIRY,\n+                                            DEFAULT_JWT_GENERATOR_TOKEN_EXPIRY);\n+    any[] restrictedClaims = getConfigArrayValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_RESTRICTED_CLAIMS);\n+    string issuer = getConfigValue(JWT_GENERATOR_ID,\n+                                        JWT_GENERATOR_TOKEN_ISSUER,\n+                                        DEFAULT_JWT_GENERATOR_TOKEN_ISSUER);\n+    any[] tokenAudience = getConfigArrayValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_TOKEN_AUDIENCE);\n+    string generatorImpl = getConfigValue(JWT_GENERATOR_ID, \n+                                            JWT_GENERATOR_IMPLEMENTATION,\n+                                            DEFAULT_JWT_GENERATOR_IMPLEMENTATION);                                            \n+    JWTGeneratorConfig_jwtGeneratorCaching jwtGeneratorCaching = {};\n+    JWTGeneratorConfig_claimRetrieval claimRetrieval = {};\n+|};\n+\n+//todo: Check if it is required declare new default constants specifically for jwt generator cache\n+public type JWTGeneratorConfig_jwtGeneratorCaching record {|\n+    boolean tokenCacheEnable = getConfigBooleanValue(JWT_GENERATOR_CACHING_ID,\n+                                                    JWT_GENERATOR_TOKEN_CACHE_ENABLED,\n+                                                    DEFAULT_JWT_GENERATOR_TOKEN_CACHE_ENABLED);\n+    int tokenCacheExpiryTime = getConfigIntValue(JWT_GENERATOR_CACHING_ID,\n+                                                JWT_GENERATOR_TOKEN_CACHE_EXPIRY,\n+                                                DEFAULT_TOKEN_CACHE_EXPIRY);   \n+    int tokenCacheCapacity = getConfigIntValue(JWT_GENERATOR_CACHING_ID,\n+                                                JWT_GENERATOR_TOKEN_CACHE_CAPACITY,\n+                                                DEFAULT_TOKEN_CACHE_CAPACITY);\n+    float tokenCacheEvictionFactor = getConfigFloatValue(JWT_GENERATOR_CACHING_ID,\n+                                                JWT_GENERATOR_TOKEN_CACHE_EVICTION_FACTOR,\n+                                                DEFAULT_TOKEN_CACHE_EVICTION_FACTOR);                                                                                         \n+|};\n+\n+public type JWTGeneratorConfig_claimRetrieval record {|\n+    //todo: decide if we are going to keep an empty string instead\n+    string retrieverImpl = getConfigValue(JWT_GENERATOR_CLAIM_RETRIEVAL_INSTANCE_ID,\n+                                            JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION,\n+                                            DEFAULT_JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION);\n+    map<any> configuration = getConfigMapValue(JWT_GENERATOR_CLAIM_RETRIEVAL_CONFIGURATION);                                        \n+|};", "originalCommit": "34b46f7441d183eabb7fde0a04874bf40f7e6bc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNjExNA==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r458626114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            };\n          \n          \n            \n            };", "author": "AmaliMatharaarachchi", "createdAt": "2020-07-22T08:31:12Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/config_dtos/listener_config.bal", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public type ListenerConfigDTO record {\n+    string keyStorePath = getConfigValue(LISTENER_CONF_INSTANCE_ID,\n+                                        KEY_STORE_PATH,\n+                                        DEFAULT_KEY_STORE_PATH);\n+    string keyStorePassword = getConfigValue(LISTENER_CONF_INSTANCE_ID,\n+                                            KEY_STORE_PASSWORD,\n+                                            DEFAULT_KEY_STORE_PASSWORD);\n+    string trustStorePath = getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, DEFAULT_TRUST_STORE_PATH);\n+    string trustStorePassword = getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD,\n+                                                DEFAULT_TRUST_STORE_PASSWORD);                                        \n+};", "originalCommit": "34b46f7441d183eabb7fde0a04874bf40f7e6bc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMDA3OA==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r458630078", "bodyText": "Since you only want to decode the jwt here(not checking in the jwt issuer's cache), use the following method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        (jwt:JwtPayload | error) cachedPayload = getDecodedJWTPayload(cachedToken, tokenContextDTO.issuer);\n          \n          \n            \n                        (jwt:JwtPayload | error) cachedPayload = decodeJWTPayload(cachedToken);", "author": "AmaliMatharaarachchi", "createdAt": "2020-07-22T08:37:46Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/jwt_generator/jwt_gen_util.bal", "diffHunk": "@@ -217,3 +191,89 @@ public function loadJWTGeneratorImpl() returns boolean {\n     }\n     return false;\n }\n+\n+# Refactoring method for setting JWT header\n+#\n+# + tokenContextDTO - BackendJWTGenUserContextDTO record which contains payload, issuer and whether claim retrieval enabled.\n+# + apiDetails - extracted api details for the current api\n+# + req - The `Request` instance.\n+# + cacheKey - key for the jwt generator cache\n+# + enabledCaching - jwt generator caching enabled\n+# + return - Returns `true` if the token generation and setting the header completed successfully\n+public function setJWTHeader(BackendJWTGenUserContextDTO tokenContextDTO,\n+                            map<string> apiDetails,\n+                            http:Request req,\n+                            string cacheKey,\n+                            boolean enabledCaching) returns @tainted boolean {\n+\n+    (handle|error) generatedToken;\n+    jwt:JwtPayload? payload = tokenContextDTO.payload;\n+    if (payload is jwt:JwtPayload) {\n+        if (isSelfContainedToken(payload)) {\n+            generatedToken = generateJWTToken(payload, apiDetails);\n+            return setGeneratedTokenAsHeader(req, cacheKey, enabledCaching, generatedToken);\n+        }\n+    }\n+    ClaimsMapDTO claimsMapDTO = createMapFromRetrievedUserClaimsListDTO(tokenContextDTO);\n+    generatedToken = generateJWTTokenFromUserClaimsMap(claimsMapDTO, apiDetails);\n+    if (generatedToken is error) {\n+        printError(KEY_JWT_AUTH_PROVIDER, \"Token not generated due to error\", generatedToken);\n+        return false;\n+    }\n+    return setGeneratedTokenAsHeader(req, cacheKey, enabledCaching, generatedToken);\n+}\n+\n+# Set the BackendJWT header after checking in the cache.\n+# The JWT token is picked from cache if it is available in the cache and the time duration between current time\n+# and the cached token's expiry time is less than the skew time.\n+# If the token is not picked from the cache, then it will be generated.\n+#\n+# + req - HTTP Request\n+# + cacheKey - Cache key used for jwt generator cache\n+# + enabledCaching - True if caching is enabled for backend JWT generation\n+# + tokenContextDTO - User Context which is used to populate the information required for jwtGenerator Implementation\n+# + apiDetails - API related information which is used to populate the information required for jwtGenerator Implementation\n+# + return - Returns `true` if adding the JWT token to the request is successful.\n+function setJWTTokenWithCacheCheck(http:Request req,\n+                                    string cacheKey,\n+                                    int skewTime,\n+                                    boolean enabledCaching,\n+                                    BackendJWTGenUserContextDTO tokenContextDTO,\n+                                    map<string> apiDetails)\n+                                    returns @tainted boolean {\n+    boolean status = false;\n+    if (enabledCaching) {\n+        var cachedToken = jwtGeneratorCache.get(cacheKey);\n+        printDebug(KEY_JWT_AUTH_PROVIDER, \"Key: \" + cacheKey);\n+        if (cachedToken is string) {\n+            printDebug(KEY_JWT_AUTH_PROVIDER, \"Found in jwt generator cache\");\n+            printDebug(KEY_JWT_AUTH_PROVIDER, \"Token: \" + cachedToken);\n+            (jwt:JwtPayload | error) cachedPayload = getDecodedJWTPayload(cachedToken, tokenContextDTO.issuer);", "originalCommit": "34b46f7441d183eabb7fde0a04874bf40f7e6bc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1MTY0MA==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r459351640", "bodyText": "If I call decodeJWTPayload it will try to decode all the time. But in this case, it will only decode if the token is not there in cache.", "author": "VirajSalaka", "createdAt": "2020-07-23T10:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczMDQ1Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r462730453", "bodyText": "fixed with 7240f2c", "author": "VirajSalaka", "createdAt": "2020-07-30T04:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMDA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMzQ5Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r458633492", "bodyText": "this payload should be retrieved from \"invocationContext[PRINCIPAL][ISSUER_CLAIMS]\" to support claim mapping. Change in the line 231. See issue - #1342 (comment)", "author": "AmaliMatharaarachchi", "createdAt": "2020-07-22T08:43:15Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "diffHunk": "@@ -237,46 +233,15 @@ public function generateAndSetBackendJwtHeader(string credential,\n                 printDebug(KEY_JWT_AUTH_PROVIDER, \"decoded token credential\");\n                 // get the subscribedAPI details\n                 map<string> apiDetails = getAPIDetails(payload, apiName, apiVersion);\n-                // checking if cache is enabled\n-                if (enabledCaching) {\n-                    var cachedToken = jwtGeneratorCache.get(cacheKey);\n-                    printDebug(KEY_JWT_AUTH_PROVIDER, \"Key: \" + cacheKey);\n-                    if (cachedToken is string) {\n-                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Found in jwt generator cache\");\n-                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Token: \" + cachedToken);\n-                        (jwt:JwtPayload | error) cachedPayload = getDecodedJWTPayload(cachedToken, issuer);\n-                        if (cachedPayload is jwt:JwtPayload) {\n-                            int currentTime = getCurrentTime();\n-                            int? cachedTokenExpiry = cachedPayload?.exp;\n-                            if (cachedTokenExpiry is int) {\n-                                cachedTokenExpiry = cachedTokenExpiry * 1000;\n-                                int difference = (cachedTokenExpiry - currentTime);\n-                                if (difference < skewTime) {\n-                                    printDebug(KEY_JWT_AUTH_PROVIDER, \"JWT regenerated because of the skew time\");\n-                                    status = setJWTHeader(<@untainted>payload, req, cacheKey, enabledCaching, apiDetails,\n-                                                            remoteUserClaimRetrievalEnabled);\n-                                } else {\n-                                    req.setHeader(jwtheaderName, cachedToken);\n-                                    status = true;\n-                                }\n-                            } else {\n-                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Failed to read exp from cached token\");\n-                                return false;\n-                            }\n-                        }\n-                    } else {\n-                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Could not find in the jwt generator cache\");\n-                        status = setJWTHeader(<@untainted>payload, req, cacheKey, enabledCaching, apiDetails,\n-                                            remoteUserClaimRetrievalEnabled);\n-                    }\n-                } else {\n-                    printDebug(KEY_JWT_AUTH_PROVIDER, \"JWT generator caching is disabled\");\n-                    status = setJWTHeader(<@untainted>payload, req, cacheKey, enabledCaching, apiDetails,\n-                                            remoteUserClaimRetrievalEnabled);\n-                }\n+                BackendJWTGenUserContextDTO tokenContextDTO = {\n+                    issuer : issuer,\n+                    remoteUserClaimRetrievalEnabled : remoteUserClaimRetrievalEnabled,\n+                    payload : payload", "originalCommit": "34b46f7441d183eabb7fde0a04874bf40f7e6bc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczMDc2Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r462730762", "bodyText": "fixed with cff53e2", "author": "VirajSalaka", "createdAt": "2020-07-30T04:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMzQ5Mg=="}], "type": "inlineReview"}, {"oid": "0b4c9f3782abb2fe60146d06a13a209ce47a4ded", "url": "https://github.com/wso2/product-microgateway/commit/0b4c9f3782abb2fe60146d06a13a209ce47a4ded", "message": "Refactor Jwt Generator Implementation and add DefaultClaimRetriever", "committedDate": "2020-07-23T07:55:15Z", "type": "commit"}, {"oid": "0b4c9f3782abb2fe60146d06a13a209ce47a4ded", "url": "https://github.com/wso2/product-microgateway/commit/0b4c9f3782abb2fe60146d06a13a209ce47a4ded", "message": "Refactor Jwt Generator Implementation and add DefaultClaimRetriever", "committedDate": "2020-07-23T07:55:15Z", "type": "forcePushed"}, {"oid": "03d3390b8bd65340b573c6263aceaf58a1e74c43", "url": "https://github.com/wso2/product-microgateway/commit/03d3390b8bd65340b573c6263aceaf58a1e74c43", "message": "Update components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/config_dtos/jwt_generator_config.bal\n\nCo-authored-by: Amali Matharaarachchi <amalim@wso2.com>", "committedDate": "2020-07-23T10:18:19Z", "type": "commit"}, {"oid": "7104fcc6aca2aad8fd6605c9cb23877acadd9116", "url": "https://github.com/wso2/product-microgateway/commit/7104fcc6aca2aad8fd6605c9cb23877acadd9116", "message": "Update components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/config_dtos/listener_config.bal\n\nCo-authored-by: Amali Matharaarachchi <amalim@wso2.com>", "committedDate": "2020-07-23T10:18:31Z", "type": "commit"}, {"oid": "ad27aa0601bdd2f86b6c61f2db983dfb7c0893f9", "url": "https://github.com/wso2/product-microgateway/commit/ad27aa0601bdd2f86b6c61f2db983dfb7c0893f9", "message": "change jwt scenario's backend jwt generation to take claims from Principal to solve the issue of claim mapping", "committedDate": "2020-07-23T19:22:43Z", "type": "commit"}, {"oid": "c1a5389a1f5741d1e841e5c51f5c32b8cef4b19a", "url": "https://github.com/wso2/product-microgateway/commit/c1a5389a1f5741d1e841e5c51f5c32b8cef4b19a", "message": "Merge branch 'backend-jwt-refactor' of https://github.com/VirajSalaka/product-microgateway into backend-jwt-refactor", "committedDate": "2020-07-23T19:23:14Z", "type": "commit"}, {"oid": "b4bf52cdc8b6b35253c98ff7e12b4cea6d37d058", "url": "https://github.com/wso2/product-microgateway/commit/b4bf52cdc8b6b35253c98ff7e12b4cea6d37d058", "message": "code review notes added", "committedDate": "2020-07-26T12:34:25Z", "type": "commit"}, {"oid": "7240f2c2a2c85d85d83ed3bd29169d6d28ad72aa", "url": "https://github.com/wso2/product-microgateway/commit/7240f2c2a2c85d85d83ed3bd29169d6d28ad72aa", "message": "Add a new cache to hold the expiry time of the generated tokens", "committedDate": "2020-07-26T20:58:38Z", "type": "commit"}, {"oid": "cff53e2f64a348347aaa877d1abc7e7c20bfd9d8", "url": "https://github.com/wso2/product-microgateway/commit/cff53e2f64a348347aaa877d1abc7e7c20bfd9d8", "message": "add modified claims from principal for the self contained access token based approach", "committedDate": "2020-07-28T04:47:45Z", "type": "commit"}, {"oid": "5640b0d52a8c8e392ead6de2039efa12938436d8", "url": "https://github.com/wso2/product-microgateway/commit/5640b0d52a8c8e392ead6de2039efa12938436d8", "message": "add subscriberTenantDomain to the generated JWT and add jackson libraries to gateway module", "committedDate": "2020-07-30T04:47:55Z", "type": "commit"}, {"oid": "5640b0d52a8c8e392ead6de2039efa12938436d8", "url": "https://github.com/wso2/product-microgateway/commit/5640b0d52a8c8e392ead6de2039efa12938436d8", "message": "add subscriberTenantDomain to the generated JWT and add jackson libraries to gateway module", "committedDate": "2020-07-30T04:47:55Z", "type": "forcePushed"}, {"oid": "ab84e3a9350b36c2babbd3071ff8b1e12be52d51", "url": "https://github.com/wso2/product-microgateway/commit/ab84e3a9350b36c2babbd3071ff8b1e12be52d51", "message": "Merge branch 'master' into backend-jwt-refactor", "committedDate": "2020-07-30T05:12:59Z", "type": "commit"}, {"oid": "816f9f29a825e6681c6bd8f3ef56df522071f0e6", "url": "https://github.com/wso2/product-microgateway/commit/816f9f29a825e6681c6bd8f3ef56df522071f0e6", "message": "bug fix: fix the issue where jwtcache is not used to check the backend jwt claim", "committedDate": "2020-07-30T19:20:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5ODQwNQ==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463298405", "bodyText": "Remove the issuer ballerina doc parameter. This gives a warning when building the mgw project.", "author": "menakaj", "createdAt": "2020-07-30T22:06:58Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "diffHunk": "@@ -117,12 +114,16 @@ public type JWTAuthHandler object {\n \n # Check whether backendJwt claim is in the payload and set the header if avaialable.\n #\n+# + jwtValidatorConfig - jwtValidatorConfig to access the jwtCache object\n # + credential - Credential\n # + req - The `Request` instance.\n # + issuer - The jwt issuer who issued the token and comes in the iss claim.", "originalCommit": "816f9f29a825e6681c6bd8f3ef56df522071f0e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNDU3NQ==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463504575", "bodyText": "that commit is reverted.", "author": "VirajSalaka", "createdAt": "2020-07-31T09:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5ODQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNzk1Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463407956", "bodyText": "Use the principal instead. Otherwise, if the cache is disabled, these all locations will decode the JWT repeatedly.", "author": "VirajSalaka", "createdAt": "2020-07-31T05:10:38Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "diffHunk": "@@ -113,12 +114,16 @@ public type JWTAuthHandler object {\n \n # Check whether backendJwt claim is in the payload and set the header if avaialable.\n #\n+# + jwtValidatorConfig - jwtValidatorConfig to access the jwtCache object\n # + credential - Credential\n # + req - The `Request` instance.\n # + issuer - The jwt issuer who issued the token and comes in the iss claim.\n # + return - Returns boolean based on backend jwt setting.\n-public function setBackendJwtHeader(string credential, http:Request req, string? issuer) returns @tainted boolean {\n-    (jwt:JwtPayload | error) payload = getDecodedJWTPayload(credential, issuer);\n+public function setBackendJwtHeader(jwt:JwtValidatorConfig jwtValidatorConfig,\n+                                    string credential,\n+                                    http:Request req)\n+                                    returns @tainted boolean {\n+    (jwt:JwtPayload | error) payload = getDecodedJWTPayload(jwtValidatorConfig, credential);", "originalCommit": "816f9f29a825e6681c6bd8f3ef56df522071f0e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NDA5OA==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463494098", "bodyText": "updated with 07f4cea", "author": "VirajSalaka", "createdAt": "2020-07-31T09:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQwNzk1Ng=="}], "type": "inlineReview"}, {"oid": "82656bc69e7458b3840371dc935efe13a031c924", "url": "https://github.com/wso2/product-microgateway/commit/82656bc69e7458b3840371dc935efe13a031c924", "message": "Revert \"bug fix: fix the issue where jwtcache is not used to check the backend jwt claim\"\n\nThis reverts commit 816f9f29a825e6681c6bd8f3ef56df522071f0e6.", "committedDate": "2020-07-31T05:20:08Z", "type": "commit"}, {"oid": "07f4cea95eef0b1a7edceb32af927a6dcc74ade7", "url": "https://github.com/wso2/product-microgateway/commit/07f4cea95eef0b1a7edceb32af927a6dcc74ade7", "message": "merge 3.1.0 jwt token path and 3.2.0 token path, use principal rather than using payload. The reason is if we are to support disable caching, then the decodeJWT method will be called repeatedly.", "committedDate": "2020-07-31T09:02:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5ODU4Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463498582", "bodyText": "Is there a usage of the authContext in this method? We can remove it.", "author": "AmaliMatharaarachchi", "createdAt": "2020-07-31T09:13:53Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/jwt_generator/jwt_gen_util.bal", "diffHunk": "@@ -295,14 +285,47 @@ function getGeneratedTokenExpTimeFromCache(string cacheKey, string jwtToken) ret\n     }\n }\n \n-# To update the custom claims of jwt payload with principal's custom claims. This is required to pass the mapped claims.\n-# + payload - JWT Payload\n-# + return - modified payload with principal's claims\n-function updateCustomClaimsUsingPrincipal(jwt:JwtPayload payload) returns jwt:JwtPayload {\n-    runtime:Principal? principal = runtime:getInvocationContext()?.principal;\n-    if (principal is runtime:Principal) {\n-            map<any>? principalClaims = principal?.claims;\n-            payload.customClaims = <(map<json>)> principalClaims;\n+# Generate the backend JWT token and set to the header of the outgoing request.\n+#\n+# + credential - Credential\n+# + authContext - Authentication Context\n+# + req - The `Request` instance.\n+# + enabledJWTGenerator - state of jwt generator\n+# + classLoaded - whether the class is loaded successfully\n+# + enabledCaching - jwt generator caching enabled\n+# + skewTime - skew time to backend\n+# + issuer - The jwt issuer who issued the token and comes in the iss claim.\n+# + remoteUserClaimRetrievalEnabled - true if remoteUserClaimRetrieval is enabled\n+# + isJWT - `true` if the user is authenticated using jwt token\n+# + return - Returns `true` if the token generation and setting the header completed successfully\n+# or the `AuthenticationError` in case of an error.\n+public function generateAndSetBackendJwtHeader(string credential,\n+                                                http:Request req,\n+                                                AuthenticationContext authContext,", "originalCommit": "07f4cea95eef0b1a7edceb32af927a6dcc74ade7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNTMyMg==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463505322", "bodyText": "Thanks for pointing out.", "author": "VirajSalaka", "createdAt": "2020-07-31T09:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5ODU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNjU1OQ==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463506559", "bodyText": "fixed with 337f92d", "author": "VirajSalaka", "createdAt": "2020-07-31T09:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5ODU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwODAzOA==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463508038", "bodyText": "I suppose we can remove this now.", "author": "AmaliMatharaarachchi", "createdAt": "2020-07-31T09:33:37Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "diffHunk": "@@ -80,22 +79,27 @@ public type JWTAuthHandler object {\n     # + return - Returns `true` if authenticated successfully. Else, returns `false`\n     # or the `AuthenticationError` in case of an error.\n     public function process(http:Request req) returns @tainted boolean | http:AuthenticationError {\n-        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString();\n+        runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+        string authHeader = invocationContext.attributes[AUTH_HEADER].toString();\n         string headerValue = req.getHeader(authHeader);\n         string credential = headerValue.substring(6, headerValue.length()).trim();\n         var authenticationResult = self.jwtAuthProvider.authenticate(credential);\n         if (authenticationResult is boolean) {\n             string issuer = self.jwtAuthProvider.jwtValidatorConfig?.issuer ?: DEFAULT_JWT_ISSUER;\n             boolean backendJWTfromClaim = setBackendJwtHeader(credential, req, issuer);\n             if (!backendJWTfromClaim) {\n-                boolean generationStatus = generateAndSetBackendJwtHeaderJWT(credential,\n+                AuthenticationContext authContext =", "originalCommit": "07f4cea95eef0b1a7edceb32af927a6dcc74ade7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUxNTMyMw==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463515323", "bodyText": "yeah", "author": "VirajSalaka", "createdAt": "2020-07-31T09:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwODAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUxMDI0Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1345#discussion_r463510246", "bodyText": "Shall we use TODO(gitusername) format?", "author": "AmaliMatharaarachchi", "createdAt": "2020-07-31T09:38:20Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/config_dtos/jwt_generator_config.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public type JWTGeneratorConfigDTO record {|\n+    boolean jwtGeneratorEnabled = getConfigBooleanValue(JWT_GENERATOR_ID,\n+                                                        JWT_GENERATOR_ENABLED,\n+                                                        DEFAULT_JWT_GENERATOR_ENABLED);\n+    string dialectURI = getConfigValue(JWT_GENERATOR_ID,\n+                                        JWT_GENERATOR_DIALECT,\n+                                        DEFAULT_JWT_GENERATOR_DIALECT);\n+    string signingAlgorithm = getConfigValue(JWT_GENERATOR_ID,\n+                                            JWT_GENERATOR_SIGN_ALGO,\n+                                            DEFAULT_JWT_GENERATOR_SIGN_ALGO);\n+    string certificateAlias = getConfigValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_CERTIFICATE_ALIAS,\n+                                                DEFAULT_JWT_GENERATOR_CERTIFICATE_ALIAS);\n+    string privateKeyAlias = getConfigValue(JWT_GENERATOR_ID,\n+                                            JWT_GENERATOR_PRIVATE_KEY_ALIAS,\n+                                            DEFAULT_JWT_GENERATOR_PRIVATE_KEY_ALIAS);\n+    int tokenExpiry = getConfigIntValue(JWT_GENERATOR_ID,\n+                                            JWT_GENERATOR_TOKEN_EXPIRY,\n+                                            DEFAULT_JWT_GENERATOR_TOKEN_EXPIRY);\n+    any[] restrictedClaims = getConfigArrayValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_RESTRICTED_CLAIMS);\n+    string issuer = getConfigValue(JWT_GENERATOR_ID,\n+                                        JWT_GENERATOR_TOKEN_ISSUER,\n+                                        DEFAULT_JWT_GENERATOR_TOKEN_ISSUER);\n+    any[] tokenAudience = getConfigArrayValue(JWT_GENERATOR_ID,\n+                                                JWT_GENERATOR_TOKEN_AUDIENCE);\n+    string generatorImpl = getConfigValue(JWT_GENERATOR_ID, \n+                                            JWT_GENERATOR_IMPLEMENTATION,\n+                                            DEFAULT_JWT_GENERATOR_IMPLEMENTATION);                                            \n+    JWTGeneratorConfig_jwtGeneratorCaching jwtGeneratorCaching = {};\n+    JWTGeneratorConfig_claimRetrieval claimRetrieval = {};\n+|};\n+\n+//todo: Check if it is required declare new default constants specifically for jwt generator cache", "originalCommit": "337f92d8f381cc6a994235a0a15b8671a492c263", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "329d4c14a5d2534e9cea2bcf9179b32f1a670797", "url": "https://github.com/wso2/product-microgateway/commit/329d4c14a5d2534e9cea2bcf9179b32f1a670797", "message": "refactor : remove unused variable", "committedDate": "2020-07-31T09:53:59Z", "type": "commit"}, {"oid": "329d4c14a5d2534e9cea2bcf9179b32f1a670797", "url": "https://github.com/wso2/product-microgateway/commit/329d4c14a5d2534e9cea2bcf9179b32f1a670797", "message": "refactor : remove unused variable", "committedDate": "2020-07-31T09:53:59Z", "type": "forcePushed"}]}