{"pr_number": 1423, "pr_title": "[envoy-gw] Add Go ext auth gRPC server perf testing setup", "pr_createdAt": "2020-09-28T03:45:41Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1423", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MDMwOA==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495690308", "bodyText": "read this only once. not for each request", "author": "AmaliMatharaarachchi", "createdAt": "2020-09-28T05:02:58Z", "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")", "originalCommit": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MzMwMw==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495693303", "bodyText": "Once.Do function execute only once", "author": "chashikajw", "createdAt": "2020-09-28T05:16:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MDMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MDU2Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495690566", "bodyText": "Let's remove any logs/prints in the testing flow for now.", "author": "AmaliMatharaarachchi", "createdAt": "2020-09-28T05:04:10Z", "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")\n+\t\tlog.Info(\"read server.pem file once\")", "originalCommit": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5Mzg0Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495693847", "bodyText": "okay btw since this execute only once, this will be not much affected", "author": "chashikajw", "createdAt": "2020-09-28T05:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MDU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTEzOA==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495691138", "bodyText": "read this only once. not for each request", "author": "AmaliMatharaarachchi", "createdAt": "2020-09-28T05:06:49Z", "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")\n+\t\tlog.Info(\"read server.pem file once\")\n+\n+\t\tcacheEnvVar := os.Getenv(\"ENVOY_GW_CACHE_ENABLE\")\n+\t\tlog.Info(\"env variable\",cacheEnvVar )\n+\n+\t\tif cacheEnvVar != \"\" {\n+\t\t\tisCacheEnabled, err = strconv.ParseBool(cacheEnvVar)\n+\n+\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Error(\"Error reading cache env variable, err\")\n+\t\t\t\tisCacheEnabled = false\n+\t\t\t}\n+\n+\t\t} else {\n+\t\t\tisCacheEnabled = false\n+\t\t}\n+\t})", "originalCommit": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5NDA5Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495694097", "bodyText": "this code inside the Once. Do function. it executes only once", "author": "chashikajw", "createdAt": "2020-09-28T05:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTY4MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495691681", "bodyText": "Do we need to run a for loop for this?", "author": "AmaliMatharaarachchi", "createdAt": "2020-09-28T05:09:25Z", "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")\n+\t\tlog.Info(\"read server.pem file once\")\n+\n+\t\tcacheEnvVar := os.Getenv(\"ENVOY_GW_CACHE_ENABLE\")\n+\t\tlog.Info(\"env variable\",cacheEnvVar )\n+\n+\t\tif cacheEnvVar != \"\" {\n+\t\t\tisCacheEnabled, err = strconv.ParseBool(cacheEnvVar)\n+\n+\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Error(\"Error reading cache env variable, err\")\n+\t\t\t\tisCacheEnabled = false\n+\t\t\t}\n+\n+\t\t} else {\n+\t\t\tisCacheEnabled = false\n+\t\t}\n+\t})\n+\n+\tauth := false\n+\tjwtToken := \"\"\n+\trequestAttributes := req.Attributes.Request.Http.Headers\n+\n+\tfor k := range requestAttributes {", "originalCommit": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5NDYwMQ==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495694601", "bodyText": "yes, there is heders array in the request. So we need to use for loop. btw added a break for improving performance", "author": "chashikajw", "createdAt": "2020-09-28T05:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTY4MQ=="}], "type": "inlineReview"}, {"oid": "8e13ff341073a5a5856570685e6a54df41c9259a", "url": "https://github.com/wso2/product-microgateway/commit/8e13ff341073a5a5856570685e6a54df41c9259a", "message": "add a break for for loop", "committedDate": "2020-09-28T06:42:45Z", "type": "forcePushed"}, {"oid": "93bf0121036143fc4c6e22100f06c36e59caeb39", "url": "https://github.com/wso2/product-microgateway/commit/93bf0121036143fc4c6e22100f06c36e59caeb39", "message": "add a break for for loop", "committedDate": "2020-09-28T06:44:47Z", "type": "forcePushed"}, {"oid": "66cae54ce18837d5a58fd428ad97159a3c7b838c", "url": "https://github.com/wso2/product-microgateway/commit/66cae54ce18837d5a58fd428ad97159a3c7b838c", "message": "add a break for for loop", "committedDate": "2020-09-28T06:47:22Z", "type": "forcePushed"}, {"oid": "a4b302483cec25685675f87bcca032343cd0e0f1", "url": "https://github.com/wso2/product-microgateway/commit/a4b302483cec25685675f87bcca032343cd0e0f1", "message": "add a break for for loop", "committedDate": "2020-09-28T06:51:12Z", "type": "forcePushed"}, {"oid": "3903e58f2a10fcfe80f3c60216fff6d30f8c1c55", "url": "https://github.com/wso2/product-microgateway/commit/3903e58f2a10fcfe80f3c60216fff6d30f8c1c55", "message": "add intial go filter chain testing setup", "committedDate": "2020-09-28T14:50:28Z", "type": "commit"}, {"oid": "5223e8321e999b52dd72a42c00e25c5d0aa2f567", "url": "https://github.com/wso2/product-microgateway/commit/5223e8321e999b52dd72a42c00e25c5d0aa2f567", "message": "add jwt cache imlpementation", "committedDate": "2020-09-28T14:50:28Z", "type": "commit"}, {"oid": "aba3e47e5a864de084c1ea44e9e1b2ef8f13a7ef", "url": "https://github.com/wso2/product-microgateway/commit/aba3e47e5a864de084c1ea44e9e1b2ef8f13a7ef", "message": "document env variable", "committedDate": "2020-09-28T14:50:28Z", "type": "commit"}, {"oid": "eda91004fe4cd9992e6a8fc6743fa0968d9511cc", "url": "https://github.com/wso2/product-microgateway/commit/eda91004fe4cd9992e6a8fc6743fa0968d9511cc", "message": "add dockerfile", "committedDate": "2020-09-28T14:50:28Z", "type": "commit"}, {"oid": "517f92c098cb39c96f168013a1830c71c37a7d6d", "url": "https://github.com/wso2/product-microgateway/commit/517f92c098cb39c96f168013a1830c71c37a7d6d", "message": "add a break for for loop", "committedDate": "2020-09-28T14:50:28Z", "type": "commit"}, {"oid": "e32d479a525f9e4168c7132cdbd7c5193d5d6e53", "url": "https://github.com/wso2/product-microgateway/commit/e32d479a525f9e4168c7132cdbd7c5193d5d6e53", "message": "add readme file", "committedDate": "2020-09-28T14:50:28Z", "type": "commit"}, {"oid": "fc9111be3d3aa1a6518a815a5628701dc1d5d954", "url": "https://github.com/wso2/product-microgateway/commit/fc9111be3d3aa1a6518a815a5628701dc1d5d954", "message": "commnet the print sstateemt", "committedDate": "2020-09-28T14:50:28Z", "type": "commit"}, {"oid": "b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "url": "https://github.com/wso2/product-microgateway/commit/b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "message": "optimize the code", "committedDate": "2020-09-29T04:54:47Z", "type": "commit"}, {"oid": "b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "url": "https://github.com/wso2/product-microgateway/commit/b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "message": "optimize the code", "committedDate": "2020-09-29T04:54:47Z", "type": "forcePushed"}, {"oid": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963", "url": "https://github.com/wso2/product-microgateway/commit/b5fc826a05b4acaab27feaf42f5e7e19ded3c963", "message": "Merge branch 'envoy-gw' into go-filter-chain-testing-setup", "committedDate": "2020-10-02T04:49:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTUzNw==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r568495537", "bodyText": "remove unnecessary commented code", "author": "fazlan-nazeem", "createdAt": "2021-02-02T10:35:50Z", "path": "go-filter-chain/main.go", "diffHunk": "@@ -0,0 +1,76 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"envoy-test-filter/filters\"\n+\t//filters \"envoy-test-filter/filters\"\n+\t\"fmt\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/reflection\"\n+\t\"log\"\n+\t\"net\"\n+\t\"os\"\n+\t\"os/signal\"\n+)\n+\n+type server struct {\n+\tmode string\n+}\n+\n+func main() {\n+\tc := make(chan os.Signal)\n+\tsignal.Notify(c, os.Interrupt)\n+\n+\tgo listen(\":8081\", &server{mode: \"GATEWAY\"})\n+\n+\t<-c\n+}\n+\n+func listen(address string, serverType *server) {\n+\tlis, err := net.Listen(\"tcp\", address)\n+\tif err != nil {\n+\t\tlog.Fatalf(\"failed to listen: %v\", err)\n+\t}\n+\ts := grpc.NewServer()\n+\text_authz.RegisterAuthorizationServer(s, serverType)\n+\treflection.Register(s)\n+\tfmt.Printf(\"Starting %q reciver on %q\\n\", serverType.mode, address)\n+\tif err := s.Serve(lis); err != nil {\n+\t\tlog.Fatalf(\"failed to serve: %v\", err)\n+\t}\n+}\n+\n+func (s *server) Check(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\t//fmt.Printf(\"======================================== %-24s ========================================\\n\", fmt.Sprintf(\"%s Start\", s.mode))", "originalCommit": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyNDM0MA==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r568524340", "bodyText": "This was removed", "author": "chashikajw", "createdAt": "2021-02-02T11:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTY3Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r568495672", "bodyText": "remove commented code", "author": "fazlan-nazeem", "createdAt": "2021-02-02T10:36:02Z", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -34,7 +34,8 @@ public void check (CheckRequest request, StreamObserver<CheckResponse> responseO\n \n         //System.out.println(\"++++++++++hit+++++++++++++++\");\n \n-        //System.out.println(request.getAttributes().getRequest().getHttp());\n+\n+        //System.out.println(request);", "originalCommit": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyNDI4MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r568524281", "bodyText": "This was removed", "author": "chashikajw", "createdAt": "2021-02-02T11:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTY3Mg=="}], "type": "inlineReview"}]}