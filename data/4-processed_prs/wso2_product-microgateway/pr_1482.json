{"pr_number": 1482, "pr_title": "Update README.md with envoy gateway changes", "pr_createdAt": "2020-11-11T11:32:09Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1482", "timeline": [{"oid": "8092f1e40cc4119c8c16deedd2a469caa13efae9", "url": "https://github.com/wso2/product-microgateway/commit/8092f1e40cc4119c8c16deedd2a469caa13efae9", "message": "Update README.md with envoy gateway changes", "committedDate": "2020-11-11T11:30:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5ODM3Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1482#discussion_r521298377", "bodyText": "It is not mandatory to zip the project. The user can simply provide the directory as well.", "author": "VirajSalaka", "createdAt": "2020-11-11T11:38:37Z", "path": "README.md", "diffHunk": "@@ -52,216 +18,126 @@ microservice architectures efficiently.\n \n ## Microgateway quick start\n \n+*Prerequisites*\n+    - Make sure you have installed *docker* on your machine.\n+    - Make sure you have installed the *docker-compose* on your machine\n+\n Let's host our first API on a Microgateway. We will be exposing the publicly available [petstore services](https://petstore.swagger.io/) via  microgateway\n \n-1. First download the microgateway toolkit related to latest release from the product [official page](https://wso2.com/api-management/api-microgateway/) or \n+1. First download the CLI tool(APICTL) and the microgateway distribution from the  \n [github release page](https://github.com/wso2/product-microgateway/releases)\n-and extract it to a folder of your choice.\n+and extract them to a folder of your choice.\n+  * [CLI (APICTL)](https://github.com/wso2/product-microgateway/releases)\n+  * [Microgateway Distribution](https://github.com/wso2/product-microgateway/releases)\n+  \n+CLI tool extracted location will be referred as `CLI_HOME` and Microgateway distribution extracted location would be \n+referred as `MG_HOME`.\n \n-1. Using your command line client tool add the 'bin' directory of the extracted folder to your PATH variable.\n+2. Using your command line client tool add the 'CLI_HOME' folder to your PATH variable.\n ```\n-export PATH=$PATH:<TOOLKIT_EXTRACTED_LOCATION>/bin\n+export PATH=$PATH:<CLI_HOME>\n ```\n \n-3. We are now ready to execute the Microgateway toolkit commands to initialize and build our Microgateway. Let's create \n-our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n+3. Let's create our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n ```\n-micro-gw init petstore -a https://petstore.swagger.io/v2/swagger.json\n+apictl init petstore -oas https://petstore.swagger.io/v2/swagger.json\n ```\n \n 4. The project is now initialized. You should notice a directory with name \"petstore\" being created in the location \n where you executed the command. \n \n  \n-5. Next, Lets build the project and create a microgateway docker image.\n+5. Now lets deploy the microgateway on docker by executing the docker compose script inside the `MG_HOME`. Navigate to `MG_HOME` and execute the following command\n ```\n-micro-gw build petstore --docker-image petstore:v1 --docker-base-image wso2/wso2micro-gw:3.1.0\n+docker-compose up -d\n ```\n \n-Once the build is successful microgateway docker image will be created with name \"petstore:v1\"\n+Once containers are up and running, we can monitor the status of the containers using the following command\n \n-6. Now gateway can be started using the built docker image\n-Execute the command below to run the Microgateway for our Petstore project.\n+```\n+docker ps | grep mg-\n+```\n+\n+6. Now let's deploy our first API to Microgateway using the project created in the step 3. Navigate to the location where the petstore project was initialized.\n+Zip the petstore project and create the file petstore.zip", "originalCommit": "8092f1e40cc4119c8c16deedd2a469caa13efae9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNjQ1MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1482#discussion_r521316451", "bodyText": "It is not mandatory to be zipped.", "author": "VirajSalaka", "createdAt": "2020-11-11T12:14:38Z", "path": "README.md", "diffHunk": "@@ -52,216 +18,126 @@ microservice architectures efficiently.\n \n ## Microgateway quick start\n \n+*Prerequisites*\n+    - Make sure you have installed *docker* on your machine.\n+    - Make sure you have installed the *docker-compose* on your machine\n+\n Let's host our first API on a Microgateway. We will be exposing the publicly available [petstore services](https://petstore.swagger.io/) via  microgateway\n \n-1. First download the microgateway toolkit related to latest release from the product [official page](https://wso2.com/api-management/api-microgateway/) or \n+1. First download the CLI tool(APICTL) and the microgateway distribution from the  \n [github release page](https://github.com/wso2/product-microgateway/releases)\n-and extract it to a folder of your choice.\n+and extract them to a folder of your choice.\n+  * [CLI (APICTL)](https://github.com/wso2/product-microgateway/releases)\n+  * [Microgateway Distribution](https://github.com/wso2/product-microgateway/releases)\n+  \n+CLI tool extracted location will be referred as `CLI_HOME` and Microgateway distribution extracted location would be \n+referred as `MG_HOME`.\n \n-1. Using your command line client tool add the 'bin' directory of the extracted folder to your PATH variable.\n+2. Using your command line client tool add the 'CLI_HOME' folder to your PATH variable.\n ```\n-export PATH=$PATH:<TOOLKIT_EXTRACTED_LOCATION>/bin\n+export PATH=$PATH:<CLI_HOME>\n ```\n \n-3. We are now ready to execute the Microgateway toolkit commands to initialize and build our Microgateway. Let's create \n-our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n+3. Let's create our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n ```\n-micro-gw init petstore -a https://petstore.swagger.io/v2/swagger.json\n+apictl init petstore -oas https://petstore.swagger.io/v2/swagger.json\n ```\n \n 4. The project is now initialized. You should notice a directory with name \"petstore\" being created in the location \n where you executed the command. \n \n  \n-5. Next, Lets build the project and create a microgateway docker image.\n+5. Now lets deploy the microgateway on docker by executing the docker compose script inside the `MG_HOME`. Navigate to `MG_HOME` and execute the following command\n ```\n-micro-gw build petstore --docker-image petstore:v1 --docker-base-image wso2/wso2micro-gw:3.1.0\n+docker-compose up -d\n ```\n \n-Once the build is successful microgateway docker image will be created with name \"petstore:v1\"\n+Once containers are up and running, we can monitor the status of the containers using the following command\n \n-6. Now gateway can be started using the built docker image\n-Execute the command below to run the Microgateway for our Petstore project.\n+```\n+docker ps | grep mg-\n+```\n+\n+6. Now let's deploy our first API to Microgateway using the project created in the step 3. Navigate to the location where the petstore project was initialized.\n+Zip the petstore project and create the file petstore.zip\n+Execute the following command to deploy the API in the microgateway\n \n ```\n-docker run -d -p 9090:9090 -p 9095:9095 petstore:v1\n+apictl mg deploy --host https://localhost:9095 --file \"/Users/viraj/Documents/petstore.zip\"  -u admin -p admin\n ```\n \n-The above will expose an https endpoint on port 9095. The context of the API will be \"/v2\".\n+The user credentials can be configured in the configurations of the `MG_HOME` distribution. `admin:admin` is the default accepted credentials by the \n+microgateway control plane..\n \n-7. The next step would be to invoke the API using a REST tool. Since APIs on the Microgateway are by default secured. We need a valid token or key in order to invoke the API. \n-Microgateway can issue API keys on its own. Execute the command below to get a API key from microgateway. This will set the api key into TOKEN variable.\n+7. The next step would be to invoke the API using a REST tool. Since APIs on the Microgateway are by default secured. We need a valid token in order to invoke the API. \n+Use the following sample token accepted by the microgateway to access the API. Lets set the token to command line as a variable\n \n \n ```\n-TOKEN=$(curl -X get \"https://localhost:9095/apikey\" -H \"Authorization:Basic YWRtaW46YWRtaW4=\" -k)\n+TOKEN=eyJ4NXQiOiJNell4TW1Ga09HWXdNV0kwWldObU5EY3hOR1l3WW1NNFpUQTNNV0kyTkRBelpHUXpOR00wWkdSbE5qSmtPREZrWkRSaU9URmtNV0ZoTXpVMlpHVmxOZyIsImtpZCI6Ik16WXhNbUZrT0dZd01XSTBaV05tTkRjeE5HWXdZbU00WlRBM01XSTJOREF6WkdRek5HTTBaR1JsTmpKa09ERmtaRFJpT1RGa01XRmhNelUyWkdWbE5nX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ==.eyJhdWQiOiJBT2syNFF6WndRXzYyb2QyNDdXQnVtd0VFZndhIiwic3ViIjoiYWRtaW5AY2FyYm9uLnN1cGVyIiwibmJmIjoxNTk2MDA5NTU2LCJhenAiOiJBT2syNFF6WndRXzYyb2QyNDdXQnVtd0VFZndhIiwic2NvcGUiOiJhbV9hcHBsaWNhdGlvbl9zY29wZSBkZWZhdWx0IiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6OTQ0My9vYXV0aDIvdG9rZW4iLCJrZXl0eXBlIjoiUFJPRFVDVElPTiIsImV4cCI6MTYyNzU0NTU1NiwiaWF0IjoxNTk2MDA5NTU2LCJqdGkiOiIyN2ZkMWY4Ny01ZTI1LTQ1NjktYTJkYi04MDA3MTFlZTJjZWMifQ==.otDREOsUUmXuSbIVII7FR59HAWqtXh6WWCSX6NDylVIFfED3GbLkopo6rwCh2EX6yiP-vGTqX8sB9Zfn784cIfD3jz2hCZqOqNzSUrzamZrWui4hlYC6qt4YviMbR9LNtxxu7uQD7QMbpZQiJ5owslaASWQvFTJgBmss5t7cnurrfkatj5AkzVdKOTGxcZZPX8WrV_Mo2-rLbYMslgb2jCptgvi29VMPo9GlAFecoMsSwywL8sMyf7AJ3y4XW5Uzq7vDGxojDam7jI5W8uLVVolZPDstqqZYzxpPJ2hBFC_OZgWG3LqhUgsYNReDKKeWUIEieK7QPgjetOZ5Geb1mA==\n ``` \n \n 8. We can now invoke the API running on the microgateway using cURL as below.\n ```\n-curl -X GET \"https://localhost:9095/v2/pet/1\" -H \"accept: application/json\" -H \"api_key:$TOKEN\" -k\n+curl -X GET \"https://localhost:9095/v2/pet/1\" -H \"accept: application/json\" -H \"Authorization:Bearer $TOKEN\" -k\n ```\n \n \n-#### Features\n-Here is a short summary of the features it hosts.\n-\n-1. Exposing one or more microservices as APIs using the Open API Specification.\n-1. Authentication and Authorization of API requests based on OAuth2.0 (opaque tokens and JWTs), Basic Auth and Mutual TLS.\n-1. Rate Limiting of API requests based on numerous policies.\n-1. Business Insights through API Analytics.\n-1. Service discovery features.\n-1. Request and Response transformations.\n-1. Load balancing, failover and circuit breaking capabilities of API requests.\n-1. Seamless integration with Docker and Kubernetes.\n-1. Integration with WSO2 API Manager to support design first APIs, API Analytics and shared rate limiting. \n-1. Grouping APIs by labels. \n-\n-It also has the following characteristics that makes it a perfect fit for microservice architectures\n-\n-1. Less than 1s startup time, allowing for faster scaling.\n-1. Built on a stateless architecture, allowing for infinite scaling.\n-1. Has an immutable runtime, making it heavily robust.\n-1. Easy integration with CI/CD processes and tools.\n-1. Runs in isolation with no dependencies to other components\n-\n #### Microgateway Components\n-- **Toolkit** : The toolkit is used to initiate microgateway projects. Once the project is initialized API developer can\n-add(copy) open API definitions of the APIs to the  project or import APIs from WSO2 API Manager. Once all the APIs are added the toolkit can be used\n-to build the project and create and executable file.\n+- **APICTL** : The APICTL is used to initiate Microgateway projects as well as to deploy APIs in to Microgateway. This is a developer tool used\n+ to deploy APIs into Microgateway\n+\n+- **Proxy** : The client facing component of the Microgateway. The downstream request will reach the proxy component and it will route the request \n+to the desired destination.\n \n-- **Runtime** : The gateway run time can expose the APIS and serves the API requests. The executable output of the toolkit should be provided as an input when running the microgateway runtime.\n-Then this run time will expose all the APIs which were included in the particular project which used to create the executable file\n+- **Filter Chain** : This component will intercept the request going through the proxy and applies security, rate limiting, publish analytics data and etc.\n+Proxy will forward the request to this component in order to validate and to add additional QoS.\n \n+- **Controller** : The component configures the proxy and the filter chain components dynamically during the runtime upon receiving an event for API \n+creation or update.\n #### Architecture\n \n The following diagram illustrates how the WSO2 API Microgateway expose micro services using Open API definition as well \n-as importing APIs from [WSO2 API Manager](https://wso2.com/api-management/).\n+as exposing APIs from [WSO2 API Manager](https://wso2.com/api-management/).\n \n ![Alt text](Architecture.png?raw=true \"Title\")\n \n-###### Dev Phase\n-\n-* API developer creates a WSO2 API Microgateway project using a WSO2 API Microgateway controller(toolkit)\n-* Adds the open API definitions of microservices into the project\n-* Developer defines endpoints and interceptors for the api/resources using the definition.yaml inside the project\n-* Builds the project and generates executables, images and k8s artifacts\n-\n-#### Running the microgateway\n-\n-Running the WSO2 API Microgateway is a 3 step process. The first two steps are involved in building the executable using the toolkit and the last\n-step is to run that executable file using the microgateway runtime component.\n-\n- 1. Initializing a WSO2 API Microgateway project.\n- 1. Building the WSO2 API Microgateway project and creating an executable file\n- 1. Running the WSO2 API Microgateway distribution.\n-\n-##### Initializing a microgateway project\n-\n-Initializing a WSO2 API Microgateway project creates the default directory structure at the location where the command is run.\n-Empty `api_definitions` directory will be created inside the root project directory. API developer can add multiple open API definitions inside the\n-api_definitions file and define endpoints and interceptors for the resources  by adding open API extensions.\n-API developer can specify the  back end endpoint details, request and response interceptors, throttle policies, CORS config and etc using open API\n-vendor specific extensions.\n-\n \n-##### Building the microgateway project\n+#### WSO2 API Microgateway APICTL commands\n \n-Once the project has been created, the next step is to build the project sources. This output of this operation is a\n-executable file(.balx) which later provided as an input to the runtime\n+Following are the basic commands in APICTL which is used to deploy/update APIs in Microgateway\n \n-##### Running the microgateway\n-The output(.balx file) of toolkit build process is used to run the microgateway runtime component.\n-\n-#### WSO2 API Microgateway toolkit commands\n-\n-Following are the set of commands included within the WSO2 API Microgateway.\n-\n-Note: Before you execute any of the commands below you need to add the path to the <micro-gw-home>/bin directory to the PATH environment variable. Ex: /home/dev/wso2am-micro-gw/bin\n+Note: Before you execute any of the commands below you need to add the path to the `<CLI_HOME` directory to the PATH environment variable. Ex: /home/dev/wso2am-micro-gw/bin\n \n ##### Init\n \n-`$ micro-gw init <project_name>`\n-\n-The \"micro-gw init\" command is used to initialize a project structure with artifacts required in generating a WSO2 API Microgateway distribution. This will create a **api_definitions**  directory.\n-\n-* **api_defintions** - API developer should copy all the open API definitions of microservices inside this directory\n+`$ apictl init <project_name> --oas <filePathToOpenAPI_or_openAPIUrl`\n \n-If the project already exists, a warning will be prompted requesting permission to override existing project.\n+The \"apictl init\" command is used to initialize a project structure with artifacts required to deploy API in Microgateway. This will create a **api_definitions**  directory.\n \n-Execute `micro-gw help init` to get more detailed information regarding the setup command.\n+Execute `apictl help init` to get more detailed information regarding the setup command.\n \n Example\n \n-\n-    $ micro-gw init petstore\n+    $ apictl init petstore --oas https://petstore.swagger.io/v2/swagger.json\n \n Let's see how we can expose the [petstore swagger](samples/petstore_swagger3.yaml) using the micro-gw.\n \n-Let's add the basic microgateway Open API extension to the petstore OAS file.\n+##### Deploy\n \n+`$ apictl mg deploy --host <url_Of_ControlPlane> --file <Zipped_project_initiated_from_apictl>  --username <Username> --password <Password>`", "originalCommit": "8092f1e40cc4119c8c16deedd2a469caa13efae9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNjg3Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1482#discussion_r521316876", "bodyText": "Either -k option needs to be mentioned or else we should advise on how to add the cert.", "author": "VirajSalaka", "createdAt": "2020-11-11T12:15:21Z", "path": "README.md", "diffHunk": "@@ -52,216 +18,126 @@ microservice architectures efficiently.\n \n ## Microgateway quick start\n \n+*Prerequisites*\n+    - Make sure you have installed *docker* on your machine.\n+    - Make sure you have installed the *docker-compose* on your machine\n+\n Let's host our first API on a Microgateway. We will be exposing the publicly available [petstore services](https://petstore.swagger.io/) via  microgateway\n \n-1. First download the microgateway toolkit related to latest release from the product [official page](https://wso2.com/api-management/api-microgateway/) or \n+1. First download the CLI tool(APICTL) and the microgateway distribution from the  \n [github release page](https://github.com/wso2/product-microgateway/releases)\n-and extract it to a folder of your choice.\n+and extract them to a folder of your choice.\n+  * [CLI (APICTL)](https://github.com/wso2/product-microgateway/releases)\n+  * [Microgateway Distribution](https://github.com/wso2/product-microgateway/releases)\n+  \n+CLI tool extracted location will be referred as `CLI_HOME` and Microgateway distribution extracted location would be \n+referred as `MG_HOME`.\n \n-1. Using your command line client tool add the 'bin' directory of the extracted folder to your PATH variable.\n+2. Using your command line client tool add the 'CLI_HOME' folder to your PATH variable.\n ```\n-export PATH=$PATH:<TOOLKIT_EXTRACTED_LOCATION>/bin\n+export PATH=$PATH:<CLI_HOME>\n ```\n \n-3. We are now ready to execute the Microgateway toolkit commands to initialize and build our Microgateway. Let's create \n-our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n+3. Let's create our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n ```\n-micro-gw init petstore -a https://petstore.swagger.io/v2/swagger.json\n+apictl init petstore -oas https://petstore.swagger.io/v2/swagger.json\n ```\n \n 4. The project is now initialized. You should notice a directory with name \"petstore\" being created in the location \n where you executed the command. \n \n  \n-5. Next, Lets build the project and create a microgateway docker image.\n+5. Now lets deploy the microgateway on docker by executing the docker compose script inside the `MG_HOME`. Navigate to `MG_HOME` and execute the following command\n ```\n-micro-gw build petstore --docker-image petstore:v1 --docker-base-image wso2/wso2micro-gw:3.1.0\n+docker-compose up -d\n ```\n \n-Once the build is successful microgateway docker image will be created with name \"petstore:v1\"\n+Once containers are up and running, we can monitor the status of the containers using the following command\n \n-6. Now gateway can be started using the built docker image\n-Execute the command below to run the Microgateway for our Petstore project.\n+```\n+docker ps | grep mg-\n+```\n+\n+6. Now let's deploy our first API to Microgateway using the project created in the step 3. Navigate to the location where the petstore project was initialized.\n+Zip the petstore project and create the file petstore.zip\n+Execute the following command to deploy the API in the microgateway\n \n ```\n-docker run -d -p 9090:9090 -p 9095:9095 petstore:v1\n+apictl mg deploy --host https://localhost:9095 --file \"/Users/viraj/Documents/petstore.zip\"  -u admin -p admin\n ```\n \n-The above will expose an https endpoint on port 9095. The context of the API will be \"/v2\".\n+The user credentials can be configured in the configurations of the `MG_HOME` distribution. `admin:admin` is the default accepted credentials by the \n+microgateway control plane..\n \n-7. The next step would be to invoke the API using a REST tool. Since APIs on the Microgateway are by default secured. We need a valid token or key in order to invoke the API. \n-Microgateway can issue API keys on its own. Execute the command below to get a API key from microgateway. This will set the api key into TOKEN variable.\n+7. The next step would be to invoke the API using a REST tool. Since APIs on the Microgateway are by default secured. We need a valid token in order to invoke the API. \n+Use the following sample token accepted by the microgateway to access the API. Lets set the token to command line as a variable\n \n \n ```\n-TOKEN=$(curl -X get \"https://localhost:9095/apikey\" -H \"Authorization:Basic YWRtaW46YWRtaW4=\" -k)\n+TOKEN=eyJ4NXQiOiJNell4TW1Ga09HWXdNV0kwWldObU5EY3hOR1l3WW1NNFpUQTNNV0kyTkRBelpHUXpOR00wWkdSbE5qSmtPREZrWkRSaU9URmtNV0ZoTXpVMlpHVmxOZyIsImtpZCI6Ik16WXhNbUZrT0dZd01XSTBaV05tTkRjeE5HWXdZbU00WlRBM01XSTJOREF6WkdRek5HTTBaR1JsTmpKa09ERmtaRFJpT1RGa01XRmhNelUyWkdWbE5nX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ==.eyJhdWQiOiJBT2syNFF6WndRXzYyb2QyNDdXQnVtd0VFZndhIiwic3ViIjoiYWRtaW5AY2FyYm9uLnN1cGVyIiwibmJmIjoxNTk2MDA5NTU2LCJhenAiOiJBT2syNFF6WndRXzYyb2QyNDdXQnVtd0VFZndhIiwic2NvcGUiOiJhbV9hcHBsaWNhdGlvbl9zY29wZSBkZWZhdWx0IiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6OTQ0My9vYXV0aDIvdG9rZW4iLCJrZXl0eXBlIjoiUFJPRFVDVElPTiIsImV4cCI6MTYyNzU0NTU1NiwiaWF0IjoxNTk2MDA5NTU2LCJqdGkiOiIyN2ZkMWY4Ny01ZTI1LTQ1NjktYTJkYi04MDA3MTFlZTJjZWMifQ==.otDREOsUUmXuSbIVII7FR59HAWqtXh6WWCSX6NDylVIFfED3GbLkopo6rwCh2EX6yiP-vGTqX8sB9Zfn784cIfD3jz2hCZqOqNzSUrzamZrWui4hlYC6qt4YviMbR9LNtxxu7uQD7QMbpZQiJ5owslaASWQvFTJgBmss5t7cnurrfkatj5AkzVdKOTGxcZZPX8WrV_Mo2-rLbYMslgb2jCptgvi29VMPo9GlAFecoMsSwywL8sMyf7AJ3y4XW5Uzq7vDGxojDam7jI5W8uLVVolZPDstqqZYzxpPJ2hBFC_OZgWG3LqhUgsYNReDKKeWUIEieK7QPgjetOZ5Geb1mA==\n ``` \n \n 8. We can now invoke the API running on the microgateway using cURL as below.\n ```\n-curl -X GET \"https://localhost:9095/v2/pet/1\" -H \"accept: application/json\" -H \"api_key:$TOKEN\" -k\n+curl -X GET \"https://localhost:9095/v2/pet/1\" -H \"accept: application/json\" -H \"Authorization:Bearer $TOKEN\" -k\n ```\n \n \n-#### Features\n-Here is a short summary of the features it hosts.\n-\n-1. Exposing one or more microservices as APIs using the Open API Specification.\n-1. Authentication and Authorization of API requests based on OAuth2.0 (opaque tokens and JWTs), Basic Auth and Mutual TLS.\n-1. Rate Limiting of API requests based on numerous policies.\n-1. Business Insights through API Analytics.\n-1. Service discovery features.\n-1. Request and Response transformations.\n-1. Load balancing, failover and circuit breaking capabilities of API requests.\n-1. Seamless integration with Docker and Kubernetes.\n-1. Integration with WSO2 API Manager to support design first APIs, API Analytics and shared rate limiting. \n-1. Grouping APIs by labels. \n-\n-It also has the following characteristics that makes it a perfect fit for microservice architectures\n-\n-1. Less than 1s startup time, allowing for faster scaling.\n-1. Built on a stateless architecture, allowing for infinite scaling.\n-1. Has an immutable runtime, making it heavily robust.\n-1. Easy integration with CI/CD processes and tools.\n-1. Runs in isolation with no dependencies to other components\n-\n #### Microgateway Components\n-- **Toolkit** : The toolkit is used to initiate microgateway projects. Once the project is initialized API developer can\n-add(copy) open API definitions of the APIs to the  project or import APIs from WSO2 API Manager. Once all the APIs are added the toolkit can be used\n-to build the project and create and executable file.\n+- **APICTL** : The APICTL is used to initiate Microgateway projects as well as to deploy APIs in to Microgateway. This is a developer tool used\n+ to deploy APIs into Microgateway\n+\n+- **Proxy** : The client facing component of the Microgateway. The downstream request will reach the proxy component and it will route the request \n+to the desired destination.\n \n-- **Runtime** : The gateway run time can expose the APIS and serves the API requests. The executable output of the toolkit should be provided as an input when running the microgateway runtime.\n-Then this run time will expose all the APIs which were included in the particular project which used to create the executable file\n+- **Filter Chain** : This component will intercept the request going through the proxy and applies security, rate limiting, publish analytics data and etc.\n+Proxy will forward the request to this component in order to validate and to add additional QoS.\n \n+- **Controller** : The component configures the proxy and the filter chain components dynamically during the runtime upon receiving an event for API \n+creation or update.\n #### Architecture\n \n The following diagram illustrates how the WSO2 API Microgateway expose micro services using Open API definition as well \n-as importing APIs from [WSO2 API Manager](https://wso2.com/api-management/).\n+as exposing APIs from [WSO2 API Manager](https://wso2.com/api-management/).\n \n ![Alt text](Architecture.png?raw=true \"Title\")\n \n-###### Dev Phase\n-\n-* API developer creates a WSO2 API Microgateway project using a WSO2 API Microgateway controller(toolkit)\n-* Adds the open API definitions of microservices into the project\n-* Developer defines endpoints and interceptors for the api/resources using the definition.yaml inside the project\n-* Builds the project and generates executables, images and k8s artifacts\n-\n-#### Running the microgateway\n-\n-Running the WSO2 API Microgateway is a 3 step process. The first two steps are involved in building the executable using the toolkit and the last\n-step is to run that executable file using the microgateway runtime component.\n-\n- 1. Initializing a WSO2 API Microgateway project.\n- 1. Building the WSO2 API Microgateway project and creating an executable file\n- 1. Running the WSO2 API Microgateway distribution.\n-\n-##### Initializing a microgateway project\n-\n-Initializing a WSO2 API Microgateway project creates the default directory structure at the location where the command is run.\n-Empty `api_definitions` directory will be created inside the root project directory. API developer can add multiple open API definitions inside the\n-api_definitions file and define endpoints and interceptors for the resources  by adding open API extensions.\n-API developer can specify the  back end endpoint details, request and response interceptors, throttle policies, CORS config and etc using open API\n-vendor specific extensions.\n-\n \n-##### Building the microgateway project\n+#### WSO2 API Microgateway APICTL commands\n \n-Once the project has been created, the next step is to build the project sources. This output of this operation is a\n-executable file(.balx) which later provided as an input to the runtime\n+Following are the basic commands in APICTL which is used to deploy/update APIs in Microgateway\n \n-##### Running the microgateway\n-The output(.balx file) of toolkit build process is used to run the microgateway runtime component.\n-\n-#### WSO2 API Microgateway toolkit commands\n-\n-Following are the set of commands included within the WSO2 API Microgateway.\n-\n-Note: Before you execute any of the commands below you need to add the path to the <micro-gw-home>/bin directory to the PATH environment variable. Ex: /home/dev/wso2am-micro-gw/bin\n+Note: Before you execute any of the commands below you need to add the path to the `<CLI_HOME` directory to the PATH environment variable. Ex: /home/dev/wso2am-micro-gw/bin\n \n ##### Init\n \n-`$ micro-gw init <project_name>`\n-\n-The \"micro-gw init\" command is used to initialize a project structure with artifacts required in generating a WSO2 API Microgateway distribution. This will create a **api_definitions**  directory.\n-\n-* **api_defintions** - API developer should copy all the open API definitions of microservices inside this directory\n+`$ apictl init <project_name> --oas <filePathToOpenAPI_or_openAPIUrl`\n \n-If the project already exists, a warning will be prompted requesting permission to override existing project.\n+The \"apictl init\" command is used to initialize a project structure with artifacts required to deploy API in Microgateway. This will create a **api_definitions**  directory.\n \n-Execute `micro-gw help init` to get more detailed information regarding the setup command.\n+Execute `apictl help init` to get more detailed information regarding the setup command.\n \n Example\n \n-\n-    $ micro-gw init petstore\n+    $ apictl init petstore --oas https://petstore.swagger.io/v2/swagger.json\n \n Let's see how we can expose the [petstore swagger](samples/petstore_swagger3.yaml) using the micro-gw.\n \n-Let's add the basic microgateway Open API extension to the petstore OAS file.\n+##### Deploy\n \n+`$ apictl mg deploy --host <url_Of_ControlPlane> --file <Zipped_project_initiated_from_apictl>  --username <Username> --password <Password>`\n \n+Upon execution of this command, CLI tool deploy the API described with open API in the Microgateway.\n ```\n-x-wso2-basePath: /petstore/v1\n-x-wso2-production-endpoints:\n-  urls:\n-  - https://petstore.swagger.io/v2\n-\n+ --host - Service url in which the Microgateway control plane is exposed.\n+ --file - File path of the zip file which is the comresseed  project intitiated from apictl tool.\n+ --username - A valid username in order to communicate with the control plane (ex: admin)\n+ --password - The password of the user.\n ```\n-\n-Sample for petstore OAS file with two resources and extensions can be found [here](samples/petstore_basic.yaml)\n-\n-##### Build\n-\n-`$ micro-gw build <project_name>`\n-\n-Upon execution of this command, the WSO2 API Microgateway CLI tool will build the executable file for the specified project.\n-\n-Execute `micro-gw help build` to get more detailed information regarding the build command.\n-\n Example\n \n-\t$ micro-gw build petstore\n+\t$ apictl mg deploy --host https://localhost:9095 --file petstore.zip  --username admin --password admin", "originalCommit": "8092f1e40cc4119c8c16deedd2a469caa13efae9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNzEwNw==", "url": "https://github.com/wso2/product-microgateway/pull/1482#discussion_r521317107", "bodyText": "Either -k option needs to be mentioned or else we should advise on how to add the cert", "author": "VirajSalaka", "createdAt": "2020-11-11T12:15:50Z", "path": "README.md", "diffHunk": "@@ -52,216 +18,126 @@ microservice architectures efficiently.\n \n ## Microgateway quick start\n \n+*Prerequisites*\n+    - Make sure you have installed *docker* on your machine.\n+    - Make sure you have installed the *docker-compose* on your machine\n+\n Let's host our first API on a Microgateway. We will be exposing the publicly available [petstore services](https://petstore.swagger.io/) via  microgateway\n \n-1. First download the microgateway toolkit related to latest release from the product [official page](https://wso2.com/api-management/api-microgateway/) or \n+1. First download the CLI tool(APICTL) and the microgateway distribution from the  \n [github release page](https://github.com/wso2/product-microgateway/releases)\n-and extract it to a folder of your choice.\n+and extract them to a folder of your choice.\n+  * [CLI (APICTL)](https://github.com/wso2/product-microgateway/releases)\n+  * [Microgateway Distribution](https://github.com/wso2/product-microgateway/releases)\n+  \n+CLI tool extracted location will be referred as `CLI_HOME` and Microgateway distribution extracted location would be \n+referred as `MG_HOME`.\n \n-1. Using your command line client tool add the 'bin' directory of the extracted folder to your PATH variable.\n+2. Using your command line client tool add the 'CLI_HOME' folder to your PATH variable.\n ```\n-export PATH=$PATH:<TOOLKIT_EXTRACTED_LOCATION>/bin\n+export PATH=$PATH:<CLI_HOME>\n ```\n \n-3. We are now ready to execute the Microgateway toolkit commands to initialize and build our Microgateway. Let's create \n-our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n+3. Let's create our first project with name \"petstore\" by adding the [open API definition](https://petstore.swagger.io/v2/swagger.json) of the petstore . You can do that by executing the following command using your command line tool.\n ```\n-micro-gw init petstore -a https://petstore.swagger.io/v2/swagger.json\n+apictl init petstore -oas https://petstore.swagger.io/v2/swagger.json\n ```\n \n 4. The project is now initialized. You should notice a directory with name \"petstore\" being created in the location \n where you executed the command. \n \n  \n-5. Next, Lets build the project and create a microgateway docker image.\n+5. Now lets deploy the microgateway on docker by executing the docker compose script inside the `MG_HOME`. Navigate to `MG_HOME` and execute the following command\n ```\n-micro-gw build petstore --docker-image petstore:v1 --docker-base-image wso2/wso2micro-gw:3.1.0\n+docker-compose up -d\n ```\n \n-Once the build is successful microgateway docker image will be created with name \"petstore:v1\"\n+Once containers are up and running, we can monitor the status of the containers using the following command\n \n-6. Now gateway can be started using the built docker image\n-Execute the command below to run the Microgateway for our Petstore project.\n+```\n+docker ps | grep mg-\n+```\n+\n+6. Now let's deploy our first API to Microgateway using the project created in the step 3. Navigate to the location where the petstore project was initialized.\n+Zip the petstore project and create the file petstore.zip\n+Execute the following command to deploy the API in the microgateway\n \n ```\n-docker run -d -p 9090:9090 -p 9095:9095 petstore:v1\n+apictl mg deploy --host https://localhost:9095 --file \"/Users/viraj/Documents/petstore.zip\"  -u admin -p admin", "originalCommit": "8092f1e40cc4119c8c16deedd2a469caa13efae9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b31eebd9603edf937f4d7ae3464c14e674e61c97", "url": "https://github.com/wso2/product-microgateway/commit/b31eebd9603edf937f4d7ae3464c14e674e61c97", "message": "Update Readme", "committedDate": "2020-11-12T04:31:47Z", "type": "commit"}]}