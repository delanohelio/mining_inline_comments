{"pr_number": 934, "pr_title": "Custom proto analytics", "pr_createdAt": "2020-01-16T05:44:06Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/934", "timeline": [{"oid": "d5dfea6a73c3d045b5322d85b7e5a97e68cd68b5", "url": "https://github.com/wso2/product-microgateway/commit/d5dfea6a73c3d045b5322d85b7e5a97e68cd68b5", "message": "merge conflict correction gRPC enabling", "committedDate": "2019-11-01T12:59:08Z", "type": "commit"}, {"oid": "e3da7db3364337a78c702a4a5efc067ad0e58865", "url": "https://github.com/wso2/product-microgateway/commit/e3da7db3364337a78c702a4a5efc067ad0e58865", "message": "config read enabling", "committedDate": "2019-11-05T08:47:25Z", "type": "commit"}, {"oid": "e5c2deff4f671cb3685f7ce3d8f44ce033c0e207", "url": "https://github.com/wso2/product-microgateway/commit/e5c2deff4f671cb3685f7ce3d8f44ce033c0e207", "message": "config read completion", "committedDate": "2019-11-07T04:50:49Z", "type": "commit"}, {"oid": "97289b1dad0082f012d975dd31576946a37f5886", "url": "https://github.com/wso2/product-microgateway/commit/97289b1dad0082f012d975dd31576946a37f5886", "message": "async addition", "committedDate": "2019-11-22T11:20:47Z", "type": "commit"}, {"oid": "4ee7c38a746f48ea98012ed2fd49875d9c7e8128", "url": "https://github.com/wso2/product-microgateway/commit/4ee7c38a746f48ea98012ed2fd49875d9c7e8128", "message": "add optial code", "committedDate": "2019-12-02T09:28:49Z", "type": "commit"}, {"oid": "a16a2b8ddaba9c3a6bb0badba44e8112c8cc64e6", "url": "https://github.com/wso2/product-microgateway/commit/a16a2b8ddaba9c3a6bb0badba44e8112c8cc64e6", "message": "initiate custom proto", "committedDate": "2019-12-07T13:39:49Z", "type": "commit"}, {"oid": "033e5ba33a57f5536018b384a554495c20888cf5", "url": "https://github.com/wso2/product-microgateway/commit/033e5ba33a57f5536018b384a554495c20888cf5", "message": "new changes to implementation", "committedDate": "2019-12-10T11:41:52Z", "type": "commit"}, {"oid": "8dca7c1b37b2d16c6d6afd4e8fa24a363fb3c289", "url": "https://github.com/wso2/product-microgateway/commit/8dca7c1b37b2d16c6d6afd4e8fa24a363fb3c289", "message": "reconnect task and loging implementations", "committedDate": "2020-01-06T04:22:28Z", "type": "commit"}, {"oid": "c19dc66f7706b05da3f24d803543992bc2fbc3e1", "url": "https://github.com/wso2/product-microgateway/commit/c19dc66f7706b05da3f24d803543992bc2fbc3e1", "message": "conflicts resolve", "committedDate": "2020-01-06T06:59:29Z", "type": "commit"}, {"oid": "b54281c6c4cfb614243ba34b0a2e10a80f2786f1", "url": "https://github.com/wso2/product-microgateway/commit/b54281c6c4cfb614243ba34b0a2e10a80f2786f1", "message": "comment change", "committedDate": "2020-01-06T07:06:54Z", "type": "commit"}, {"oid": "5ff5e8fcddccdb5278a87e29f9f967a08d85a6f5", "url": "https://github.com/wso2/product-microgateway/commit/5ff5e8fcddccdb5278a87e29f9f967a08d85a6f5", "message": "changes addition to gRPC configs", "committedDate": "2020-01-09T08:02:52Z", "type": "commit"}, {"oid": "953367da8a8e89a870217a0cb28c2f7c1c032a18", "url": "https://github.com/wso2/product-microgateway/commit/953367da8a8e89a870217a0cb28c2f7c1c032a18", "message": "proto file name change, proto file default string value change", "committedDate": "2020-01-09T08:49:25Z", "type": "commit"}, {"oid": "6cc38357e655a08a8a1775bf826b8a419e8fb794", "url": "https://github.com/wso2/product-microgateway/commit/6cc38357e655a08a8a1775bf826b8a419e8fb794", "message": "change default string values (previously these two values were missed)", "committedDate": "2020-01-09T08:52:33Z", "type": "commit"}, {"oid": "b9a51d1a7e4f812d497ef8652f1099497652d301", "url": "https://github.com/wso2/product-microgateway/commit/b9a51d1a7e4f812d497ef8652f1099497652d301", "message": "config refactor", "committedDate": "2020-01-13T09:58:03Z", "type": "commit"}, {"oid": "b2c67a2e10afd54b8a9e68daa9672ea03247a8ad", "url": "https://github.com/wso2/product-microgateway/commit/b2c67a2e10afd54b8a9e68daa9672ea03247a8ad", "message": "changed and optimized gRPC reconnect task", "committedDate": "2020-01-16T03:17:48Z", "type": "commit"}, {"oid": "02e8379dd9289e8df38c6baeb758b1c98b948c77", "url": "https://github.com/wso2/product-microgateway/commit/02e8379dd9289e8df38c6baeb758b1c98b948c77", "message": "debug messages and comment changes", "committedDate": "2020-01-16T03:36:50Z", "type": "commit"}, {"oid": "7f0b074b1a99d28053ce34939f3b63b920ce0b53", "url": "https://github.com/wso2/product-microgateway/commit/7f0b074b1a99d28053ce34939f3b63b920ce0b53", "message": "comment changes", "committedDate": "2020-01-16T03:46:46Z", "type": "commit"}, {"oid": "5df4819372fcc188e79f4572a8eb47d87f0dfa1c", "url": "https://github.com/wso2/product-microgateway/commit/5df4819372fcc188e79f4572a8eb47d87f0dfa1c", "message": "Merge branch 'master' of https://github.com/wso2/product-microgateway into custom_proto_analytics", "committedDate": "2020-01-16T03:56:21Z", "type": "commit"}, {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "url": "https://github.com/wso2/product-microgateway/commit/6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "message": "version upgrade", "committedDate": "2020-01-16T05:38:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NzQyMg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247422", "bodyText": "Instead of log:printDebug use printDebug(..).", "author": "hasuniea", "createdAt": "2020-01-16T06:17:04Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,184 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        log:printDebug(\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if(gRPCConnection == false){\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else{\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+                var stop = gRPCConnectTimer.stop();\n+                if (stop is error) {\n+                    log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                    return;\n+                }\n+                taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+//registers server message listner (AnalyticsSendServiceMessageListener)\n+public function initGRPCService(){\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \"\n+                                           + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        log:printDebug(\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+//ping MessageSend\n+public function pingMessage(AnalyticsStreamMessage message){\n+    log:printDebug(\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printDebug(\"Error from Connector: \" + connErr.reason() + \" - \"\n+                                       + <string> connErr.detail()[\"message\"]);\n+            \n+        } else {\n+            log:printDebug(\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+//publishes data to relevant stream\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    log:printDebug(\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \"\n+                                       + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            log:printDebug(\"gRPC analytics data published successfully: \");\n+        }\n+}\n+\n+//server message listner\n+service AnalyticsSendServiceMessageListener = service {\n+\n+    resource function onMessage(string message) {\n+    }\n+\n+    resource function onError(error err) {\n+        log:printDebug(\"On error method in gRPC listner.\");", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NzU4OQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247589", "bodyText": "I think it's better to put method level comments.", "author": "hasuniea", "createdAt": "2020-01-16T06:17:51Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,184 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        log:printDebug(\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if(gRPCConnection == false){\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else{\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+                var stop = gRPCConnectTimer.stop();\n+                if (stop is error) {\n+                    log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                    return;\n+                }\n+                taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+//registers server message listner (AnalyticsSendServiceMessageListener)", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0Nzc0MA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247740", "bodyText": "Please remove the new line.", "author": "hasuniea", "createdAt": "2020-01-16T06:18:21Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,184 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        log:printDebug(\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if(gRPCConnection == false){\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else{\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+                var stop = gRPCConnectTimer.stop();\n+                if (stop is error) {\n+                    log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                    return;\n+                }\n+                taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+//registers server message listner (AnalyticsSendServiceMessageListener)\n+public function initGRPCService(){\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \"\n+                                           + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        log:printDebug(\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+//ping MessageSend\n+public function pingMessage(AnalyticsStreamMessage message){\n+    log:printDebug(\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printDebug(\"Error from Connector: \" + connErr.reason() + \" - \"\n+                                       + <string> connErr.detail()[\"message\"]);\n+            ", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NzkwMg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247902", "bodyText": "Please remove extra new line lines.", "author": "hasuniea", "createdAt": "2020-01-16T06:18:59Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +162,170 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    log:printDebug( \"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {\n+     messageStreamName: \"InComingRequestStream\",\n+     meta_clientType : <string>requestResponseExecutionDTO.metaClientType ,\n+     applicationConsumerKey : <string>requestResponseExecutionDTO.applicationConsumerKey ,\n+     applicationName : <string>requestResponseExecutionDTO.applicationName ,\n+     applicationId : <string>requestResponseExecutionDTO.applicationId ,\n+     applicationOwner : <string>requestResponseExecutionDTO.applicationOwner ,\n+     apiContext : <string>requestResponseExecutionDTO.apiContext ,\n+     apiName : <string> requestResponseExecutionDTO.apiName ,\n+     apiVersion : <string>requestResponseExecutionDTO.apiVersion ,\n+     apiResourcePath : <string>requestResponseExecutionDTO.apiResourcePath ,\n+     apiResourceTemplate : <string>requestResponseExecutionDTO.apiResourceTemplate ,\n+     apiMethod : <string>requestResponseExecutionDTO.apiMethod ,\n+     apiCreator : <string>requestResponseExecutionDTO.apiCreator ,\n+     apiCreatorTenantDomain : <string>requestResponseExecutionDTO.apiCreatorTenantDomain ,\n+     apiTier : <string>requestResponseExecutionDTO.apiTier ,\n+     apiHostname : <string>requestResponseExecutionDTO.apiHostname ,\n+     username : <string>requestResponseExecutionDTO.userName ,\n+     userTenantDomain : <string>requestResponseExecutionDTO.userTenantDomain ,\n+     userIp : <string>requestResponseExecutionDTO.userIp ,\n+     userAgent : <string>requestResponseExecutionDTO.userAgent ,\n+     requestTimestamp : requestResponseExecutionDTO.requestTimestamp ,\n+     throttledOut : requestResponseExecutionDTO.throttledOut ,\n+     responseTime :requestResponseExecutionDTO.responseTime ,\n+     serviceTime : requestResponseExecutionDTO.serviceTime ,\n+     backendTime : requestResponseExecutionDTO.backendTime ,\n+     responseCacheHit : requestResponseExecutionDTO.responseCacheHit ,\n+     responseSize : requestResponseExecutionDTO.responseSize ,\n+     protocol : requestResponseExecutionDTO.protocol ,\n+     responseCode  : requestResponseExecutionDTO.responseCode ,\n+     destination : requestResponseExecutionDTO.destination ,\n+     securityLatency  : requestResponseExecutionDTO.executionTime.securityLatency ,\n+     throttlingLatency  : requestResponseExecutionDTO.executionTime.throttlingLatency , \n+     requestMedLat : requestResponseExecutionDTO.executionTime.requestMediationLatency ,\n+     responseMedLat : requestResponseExecutionDTO.executionTime.responseMediationLatency , \n+     backendLatency : requestResponseExecutionDTO.executionTime.backEndLatency , \n+     otherLatency : requestResponseExecutionDTO.executionTime.otherLatency , \n+     gatewayType : <string>requestResponseExecutionDTO.gatewayType , \n+     label  : <string>requestResponseExecutionDTO.label,\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : \"\",\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+\n+    return responseAnalyticsMessage;\n+}\n+\n+//creates throttle stream gRPC Analytics message\n+public function createThrottleMessage(ThrottleAnalyticsEventDTO throttleAnalyticsEventDTO) returns AnalyticsStreamMessage{\n+    log:printDebug( \"createThrottleMessage method called\");\n+    AnalyticsStreamMessage throttleAnalyticsMessage = {\n+     messageStreamName: \"ThrottledOutStream\",\n+     meta_clientType : throttleAnalyticsEventDTO.metaClientType,\n+     applicationConsumerKey : \"\",\n+     applicationName : throttleAnalyticsEventDTO.applicationName,\n+     applicationId : throttleAnalyticsEventDTO.applicationId,\n+     applicationOwner : \"\",\n+     apiContext : throttleAnalyticsEventDTO.apiContext,\n+     apiName : throttleAnalyticsEventDTO.apiName,\n+     apiVersion : throttleAnalyticsEventDTO.apiVersion,\n+     apiResourcePath : \"\",\n+     apiResourceTemplate : \"\",\n+     apiMethod : \"\",\n+     apiCreator : throttleAnalyticsEventDTO.apiCreator,\n+     apiCreatorTenantDomain : throttleAnalyticsEventDTO.apiCreatorTenantDomain,\n+     apiTier : \"\",\n+     apiHostname : \"\",\n+     username : throttleAnalyticsEventDTO.userName,\n+     userTenantDomain : throttleAnalyticsEventDTO.userTenantDomain,\n+     userIp : \"\",\n+     userAgent : \"\",\n+     requestTimestamp : 0,\n+     throttledOut : false,\n+     responseTime :0,\n+     serviceTime : 0,\n+     backendTime : 0,\n+     responseCacheHit : false,\n+     responseSize : 0,\n+     protocol : \"\",\n+     responseCode  : 0,\n+     destination : \"\",\n+     securityLatency  : 0,\n+     throttlingLatency  : 0,\n+     requestMedLat : 0 ,\n+     responseMedLat : 0,\n+     backendLatency : 0 ,\n+     otherLatency : 0,\n+     gatewayType : throttleAnalyticsEventDTO.gatewayType,\n+     label  : \"\",\n+\n+     subscriber : throttleAnalyticsEventDTO.subscriber,\n+     throttledOutReason : throttleAnalyticsEventDTO.throttledOutReason,\n+     throttledOutTimestamp : throttleAnalyticsEventDTO.throttledTime,\n+     hostname : throttleAnalyticsEventDTO.hostname,\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return throttleAnalyticsMessage;\n+}\n+\n+\n+//creates fault stream gRPC Analytics message\n+public function createFaultMessage(FaultDTO faultDTO)returns AnalyticsStreamMessage{\n+    log:printDebug( \"createFaultMessage method called.\");\n+    int errorCodeValue = faultDTO.errorCode;\n+    AnalyticsStreamMessage faultAnalyticsMessage = {\n+     messageStreamName: \"FaultStream\",\n+     meta_clientType : faultDTO. metaClientType,\n+     applicationConsumerKey : faultDTO.consumerKey,\n+     applicationName : faultDTO.applicationName,\n+     applicationId : faultDTO.applicationId,\n+     applicationOwner : \"\",\n+     apiContext : faultDTO.apiContext,\n+     apiName : faultDTO.apiName,\n+     apiVersion : faultDTO.apiVersion,\n+     apiResourcePath : faultDTO.resourcePath,\n+     apiResourceTemplate : \"\",\n+     apiMethod : faultDTO.method,\n+     apiCreator : faultDTO.apiCreator,\n+     apiCreatorTenantDomain : faultDTO.apiCreatorTenantDomain,\n+     apiTier : \"\",\n+     apiHostname : \"\",\n+     username : faultDTO.userName,\n+     userTenantDomain : faultDTO.userTenantDomain,\n+     userIp : \"\",\n+     userAgent : \"\",\n+     requestTimestamp : faultDTO.faultTime,\n+     throttledOut : false,\n+     responseTime :0,\n+     serviceTime : 0,\n+     backendTime : 0,\n+     responseCacheHit : false,\n+     responseSize : 0,\n+     protocol : faultDTO.protocol,\n+     responseCode  : 0,\n+     destination : \"\",\n+     securityLatency  : 0,\n+     throttlingLatency  : 0,\n+     requestMedLat : 0 ,\n+     responseMedLat : 0,\n+     backendLatency : 0 ,\n+     otherLatency : 0,\n+     gatewayType : \"\",\n+     label  : \"\",\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : faultDTO.hostName,\n+ \n+    errorCode : errorCodeValue.toString(),\n+    errorMessage : faultDTO.errorMessage\n+    };\n+\n+", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODA4Mg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248082", "bodyText": "Please correct the formatting issues in the whole file", "author": "hasuniea", "createdAt": "2020-01-16T06:19:41Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +94,23 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n-    if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n-        if (eventDTO is EventDTO) {\n-            eventStream.publish(eventDTO);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    if(faultDTO is FaultDTO) {\n+        log:printDebug( \"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);\n+        if(isgRPCAnalyticsEnabled != false ){\n+            //fault stream gRPC Analytics\n+            log:printDebug(\"gRPC fault stream message creating --->\");\n+            AnalyticsStreamMessage message = createFaultMessage(faultDTO);\n+                future<()> publishedGRPCFaultStream = start dataToAnalytics(message);\n+            return;\n+        }\n+        EventDTO|error eventDTO = trap getEventFromFaultData(faultDTO);\n+        if(eventDTO is EventDTO) {\n+            if(isAnalyticsEnabled != false){", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODIyNg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248226", "bodyText": "Please correct the formatting issue.", "author": "hasuniea", "createdAt": "2020-01-16T06:20:16Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +94,23 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n-    if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n-        if (eventDTO is EventDTO) {\n-            eventStream.publish(eventDTO);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    if(faultDTO is FaultDTO) {\n+        log:printDebug( \"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODUyOA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248528", "bodyText": "Please correct formatting issue", "author": "hasuniea", "createdAt": "2020-01-16T06:21:34Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +35,29 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        log:printDebug(\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n-                    if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n-                        if (eventDTO is EventDTO) {\n-                            eventStream.publish(eventDTO);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    if(throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODY2MA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248660", "bodyText": "Please format the whole file.", "author": "hasuniea", "createdAt": "2020-01-16T06:22:05Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +35,29 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        log:printDebug(\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n-                    if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n-                        if (eventDTO is EventDTO) {\n-                            eventStream.publish(eventDTO);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    if(throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n+                        if(isgRPCAnalyticsEnabled != false){", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0OTI0Nw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367249247", "bodyText": "Correct the formatting issues in this file as well.", "author": "hasuniea", "createdAt": "2020-01-16T06:24:38Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "diffHunk": "@@ -131,9 +142,28 @@ function getAnalyticsEnableConfig() {\n     rotatingTime = <int>vals[ROTATING_TIME];\n     uploadingUrl = <string>vals[UPLOADING_EP];\n     configsRead = true;\n+    log:printDebug(\"File upload analytics uploading URL : \"+ uploadingUrl);\n     printDebug(KEY_UTILS, \"Analytics configuration values read\");\n }\n \n+function initializegRPCAnalytics(){\n+    printDebug(KEY_UTILS, \"gRPC Analytics configuration values read\");\n+    map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+    isgRPCAnalyticsEnabled = <boolean>gRPCConfigs[ENABLE];\n+    endpointURL = <string>gRPCConfigs[GRPC_ENDPOINT_URL];\n+    gRPCReconnectTime = <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+\n+    log:printDebug( \"gRPC endpoint URL : \" + endpointURL);\n+    log:printDebug( \"gRPC keyStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"));\n+    log:printDebug( \"gRPC keyStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\"));\n+    log:printDebug( \"gRPC trustStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"));\n+    log:printDebug( \"gRPC tustStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\"));\n+    log:printDebug( \"gRPC retry time  : \" + gRPCReconnectTime.toString());\n+\n+    if(isgRPCAnalyticsEnabled == true){", "originalCommit": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee946aa2e412bb05f89aea82ae918a11555ad681", "url": "https://github.com/wso2/product-microgateway/commit/ee946aa2e412bb05f89aea82ae918a11555ad681", "message": "code change according to suggestions", "committedDate": "2020-01-16T07:49:43Z", "type": "commit"}, {"oid": "c891e07c94368db9f9be15c3f08279ab97a0af5a", "url": "https://github.com/wso2/product-microgateway/commit/c891e07c94368db9f9be15c3f08279ab97a0af5a", "message": "implementation for remaining suggestions", "committedDate": "2020-01-16T08:32:14Z", "type": "commit"}, {"oid": "148234c99e78c2581c424b9fc1796b15fd7e7efb", "url": "https://github.com/wso2/product-microgateway/commit/148234c99e78c2581c424b9fc1796b15fd7e7efb", "message": "implementing missed suggestions", "committedDate": "2020-01-16T09:01:08Z", "type": "commit"}, {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "url": "https://github.com/wso2/product-microgateway/commit/cb380e242d134b929c1931a0c75dcaf593bc6d69", "message": "formatted  if conditions", "committedDate": "2020-01-16T09:17:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMxOTk5NA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367319994", "bodyText": "Please remove all .factorypath from the PR", "author": "praminda", "createdAt": "2020-01-16T09:44:51Z", "path": "components/micro-gateway-cli/.factorypath", "diffHunk": "@@ -0,0 +1,231 @@\n+<factorypath>", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDIyNQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367320225", "bodyText": "Please uncommit the file", "author": "praminda", "createdAt": "2020-01-16T09:45:23Z", "path": "components/micro-gateway-core/.factorypath", "diffHunk": "@@ -0,0 +1,158 @@\n+<factorypath>", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDQ5NQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367320495", "bodyText": "@VirajSalaka Can you please have a look at the proto file?", "author": "praminda", "createdAt": "2020-01-16T09:45:58Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,61 @@\n+syntax = \"proto3\";", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyOTQzOQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368229439", "bodyText": "looks good.", "author": "VirajSalaka", "createdAt": "2020-01-18T14:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDYwOA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367320608", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "praminda", "createdAt": "2020-01-16T09:46:14Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,61 @@\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+\n+option java_package = \"org.wso2.analytics.mgw.grpc.service\";\n+\n+import \"google/protobuf/empty.proto\";\n+\n+message AnalyticsStreamMessage {\n+    string messageStreamName = 1;\n+    string meta_clientType = 2;\n+    string applicationConsumerKey = 3;\n+    string applicationName = 4;\n+    string applicationId = 5;\n+    string applicationOwner = 6;\n+    string apiContext = 7;\n+    string apiName = 8;\n+    string apiVersion = 9;\n+    string apiResourcePath = 10;\n+    string apiResourceTemplate = 11;\n+    string apiMethod = 12;\n+    string apiCreator = 13;\n+    string apiCreatorTenantDomain = 14;\n+    string apiTier = 15;\n+    string apiHostname = 16;\n+    string username = 17;\n+    string userTenantDomain = 18;\n+    string userIp = 19;\n+    string userAgent = 20;\n+    int64 requestTimestamp  = 21;\n+    bool throttledOut = 22;\n+    int64 responseTime = 23;\n+    int64 serviceTime  = 24;\n+    int64 backendTime = 25;\n+    bool responseCacheHit = 26;\n+    int64 responseSize = 27;\n+    string protocol = 28;\n+    int32 responseCode = 29;\n+    string destination = 30;\n+    int64 securityLatency = 31;\n+    int64 throttlingLatency = 32;\n+    int64 requestMedLat = 33;\n+    int64 responseMedLat = 34;\n+    int64 backendLatency = 35;\n+    int64 otherLatency = 36;\n+    string gatewayType = 37;\n+    string label = 38;\n+\n+    string subscriber = 39;\n+    string throttledOutReason = 40;\n+    int64 throttledOutTimestamp = 41;\n+    string hostname = 42;\n+ \n+    string errorCode = 43;\n+    string errorMessage = 44;\n+}\n+\n+\n+service AnalyticsSendService {\n+    rpc sendAnalytics(stream AnalyticsStreamMessage) returns(google.protobuf.Empty);\n+}", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMTczOA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367321738", "bodyText": "Is this entire block formatted correctly? I think leading ' ' (space) can be removed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             public const string ZIP_EXTENSION = \".zip\";\n          \n          \n            \n            public const string ZIP_EXTENSION = \".zip\";", "author": "praminda", "createdAt": "2020-01-16T09:48:34Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -122,33 +122,38 @@ public const string ENABLE = \"enable\";\n public const string REQUIRE = \"require\";\n \n //Analytics filter related constants\n-public const string ZIP_EXTENSION = \".zip\";\n-public const string UPLOADING_URL = \"uploadingUrl\";\n-public const string API_USAGE_FILE = \"api-usage-data.dat\";\n-public const string TIME_INTERVAL = \"timeInterval\";\n-public const string FILE_NAME = \"FileName\";\n-public const string ACCEPT = \"Accept\";\n-public const string ANALYTICS = \"analytics\";\n-public const string UPLOADING_TIME_SPAN = \"uploadingTimeSpanInMillis\";\n-public const string ROTATING_TIME = \"rotatingPeriod\";\n-public const string UPLOADING_EP = \"uploadingEndpoint\";\n-public const string REQUEST_TIME = \"REQUEST_TIME\";\n-public const string DATACENTER_ID = \"datacenterId\";\n-public const string THROTTLE_LATENCY = \"THROTTLE_LATENCY\";\n-public const string SECURITY_LATENCY_AUTHN = \"SECURITY_LATENCY_AUTHN\";\n-public const string SECURITY_LATENCY_AUTHZ = \"SECURITY_LATENCY_AUTHZ\";\n-public const string SECURITY_LATENCY_AUTHZ_RESPONSE = \"SECURITY_LATENCY_AUTHZ_RESPONSE\";\n-public const string SECURITY_LATENCY_SUBS = \"SECURITY_LATENCY_SUBS\";\n-public const string SECURITY_LATENCY_VALIDATION = \"SECURITY_LATENCY_VALIDATION\";\n-public const string METHOD = \"METHOD\";\n-public const string TS_REQUEST_OUT = \"timeStampRequestOut\";\n-public const string TS_RESPONSE_IN = \"timeStampResponseIn\";\n-public const string API_USAGE_PATH = \"api.usage.data.path\";\n-public const string API_USAGE_DIR = \"api-usage-data\";\n-public const string FILE_UPLOAD_TASK = \"taskUploadFiles\";\n-public const string INITIAL_DELAY = \"initialDelayInMillis\";\n-public const string DESTINATION = \"destination\";\n+ public const string ZIP_EXTENSION = \".zip\";", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMjg3OA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367322878", "bodyText": "This object definition is not formatted properly. Please check the indentation.", "author": "praminda", "createdAt": "2020-01-16T09:50:49Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +157,167 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzA3Mw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323073", "bodyText": "Same here, Please check the indentation", "author": "praminda", "createdAt": "2020-01-16T09:51:12Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +157,167 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {\n+     messageStreamName: \"InComingRequestStream\",\n+     meta_clientType : <string>requestResponseExecutionDTO.metaClientType ,\n+     applicationConsumerKey : <string>requestResponseExecutionDTO.applicationConsumerKey ,\n+     applicationName : <string>requestResponseExecutionDTO.applicationName ,\n+     applicationId : <string>requestResponseExecutionDTO.applicationId ,\n+     applicationOwner : <string>requestResponseExecutionDTO.applicationOwner ,\n+     apiContext : <string>requestResponseExecutionDTO.apiContext ,\n+     apiName : <string> requestResponseExecutionDTO.apiName ,\n+     apiVersion : <string>requestResponseExecutionDTO.apiVersion ,\n+     apiResourcePath : <string>requestResponseExecutionDTO.apiResourcePath ,\n+     apiResourceTemplate : <string>requestResponseExecutionDTO.apiResourceTemplate ,\n+     apiMethod : <string>requestResponseExecutionDTO.apiMethod ,\n+     apiCreator : <string>requestResponseExecutionDTO.apiCreator ,\n+     apiCreatorTenantDomain : <string>requestResponseExecutionDTO.apiCreatorTenantDomain ,\n+     apiTier : <string>requestResponseExecutionDTO.apiTier ,\n+     apiHostname : <string>requestResponseExecutionDTO.apiHostname ,\n+     username : <string>requestResponseExecutionDTO.userName ,\n+     userTenantDomain : <string>requestResponseExecutionDTO.userTenantDomain ,\n+     userIp : <string>requestResponseExecutionDTO.userIp ,\n+     userAgent : <string>requestResponseExecutionDTO.userAgent ,\n+     requestTimestamp : requestResponseExecutionDTO.requestTimestamp ,\n+     throttledOut : requestResponseExecutionDTO.throttledOut ,\n+     responseTime :requestResponseExecutionDTO.responseTime ,\n+     serviceTime : requestResponseExecutionDTO.serviceTime ,\n+     backendTime : requestResponseExecutionDTO.backendTime ,\n+     responseCacheHit : requestResponseExecutionDTO.responseCacheHit ,\n+     responseSize : requestResponseExecutionDTO.responseSize ,\n+     protocol : requestResponseExecutionDTO.protocol ,\n+     responseCode  : requestResponseExecutionDTO.responseCode ,\n+     destination : requestResponseExecutionDTO.destination ,\n+     securityLatency  : requestResponseExecutionDTO.executionTime.securityLatency ,\n+     throttlingLatency  : requestResponseExecutionDTO.executionTime.throttlingLatency , \n+     requestMedLat : requestResponseExecutionDTO.executionTime.requestMediationLatency ,\n+     responseMedLat : requestResponseExecutionDTO.executionTime.responseMediationLatency , \n+     backendLatency : requestResponseExecutionDTO.executionTime.backEndLatency , \n+     otherLatency : requestResponseExecutionDTO.executionTime.otherLatency , \n+     gatewayType : <string>requestResponseExecutionDTO.gatewayType , \n+     label  : <string>requestResponseExecutionDTO.label,\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : \"\",\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return responseAnalyticsMessage;\n+}\n+\n+//creates throttle stream gRPC Analytics message\n+public function createThrottleMessage(ThrottleAnalyticsEventDTO throttleAnalyticsEventDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createThrottleMessage method called\");\n+    AnalyticsStreamMessage throttleAnalyticsMessage = {\n+     messageStreamName: \"ThrottledOutStream\",", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzE4Nw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323187", "bodyText": "Please check the indentation", "author": "praminda", "createdAt": "2020-01-16T09:51:25Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +157,167 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {\n+     messageStreamName: \"InComingRequestStream\",\n+     meta_clientType : <string>requestResponseExecutionDTO.metaClientType ,\n+     applicationConsumerKey : <string>requestResponseExecutionDTO.applicationConsumerKey ,\n+     applicationName : <string>requestResponseExecutionDTO.applicationName ,\n+     applicationId : <string>requestResponseExecutionDTO.applicationId ,\n+     applicationOwner : <string>requestResponseExecutionDTO.applicationOwner ,\n+     apiContext : <string>requestResponseExecutionDTO.apiContext ,\n+     apiName : <string> requestResponseExecutionDTO.apiName ,\n+     apiVersion : <string>requestResponseExecutionDTO.apiVersion ,\n+     apiResourcePath : <string>requestResponseExecutionDTO.apiResourcePath ,\n+     apiResourceTemplate : <string>requestResponseExecutionDTO.apiResourceTemplate ,\n+     apiMethod : <string>requestResponseExecutionDTO.apiMethod ,\n+     apiCreator : <string>requestResponseExecutionDTO.apiCreator ,\n+     apiCreatorTenantDomain : <string>requestResponseExecutionDTO.apiCreatorTenantDomain ,\n+     apiTier : <string>requestResponseExecutionDTO.apiTier ,\n+     apiHostname : <string>requestResponseExecutionDTO.apiHostname ,\n+     username : <string>requestResponseExecutionDTO.userName ,\n+     userTenantDomain : <string>requestResponseExecutionDTO.userTenantDomain ,\n+     userIp : <string>requestResponseExecutionDTO.userIp ,\n+     userAgent : <string>requestResponseExecutionDTO.userAgent ,\n+     requestTimestamp : requestResponseExecutionDTO.requestTimestamp ,\n+     throttledOut : requestResponseExecutionDTO.throttledOut ,\n+     responseTime :requestResponseExecutionDTO.responseTime ,\n+     serviceTime : requestResponseExecutionDTO.serviceTime ,\n+     backendTime : requestResponseExecutionDTO.backendTime ,\n+     responseCacheHit : requestResponseExecutionDTO.responseCacheHit ,\n+     responseSize : requestResponseExecutionDTO.responseSize ,\n+     protocol : requestResponseExecutionDTO.protocol ,\n+     responseCode  : requestResponseExecutionDTO.responseCode ,\n+     destination : requestResponseExecutionDTO.destination ,\n+     securityLatency  : requestResponseExecutionDTO.executionTime.securityLatency ,\n+     throttlingLatency  : requestResponseExecutionDTO.executionTime.throttlingLatency , \n+     requestMedLat : requestResponseExecutionDTO.executionTime.requestMediationLatency ,\n+     responseMedLat : requestResponseExecutionDTO.executionTime.responseMediationLatency , \n+     backendLatency : requestResponseExecutionDTO.executionTime.backEndLatency , \n+     otherLatency : requestResponseExecutionDTO.executionTime.otherLatency , \n+     gatewayType : <string>requestResponseExecutionDTO.gatewayType , \n+     label  : <string>requestResponseExecutionDTO.label,\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : \"\",\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return responseAnalyticsMessage;\n+}\n+\n+//creates throttle stream gRPC Analytics message\n+public function createThrottleMessage(ThrottleAnalyticsEventDTO throttleAnalyticsEventDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createThrottleMessage method called\");\n+    AnalyticsStreamMessage throttleAnalyticsMessage = {\n+     messageStreamName: \"ThrottledOutStream\",\n+     meta_clientType : throttleAnalyticsEventDTO.metaClientType,\n+     applicationConsumerKey : \"\",\n+     applicationName : throttleAnalyticsEventDTO.applicationName,\n+     applicationId : throttleAnalyticsEventDTO.applicationId,\n+     applicationOwner : \"\",\n+     apiContext : throttleAnalyticsEventDTO.apiContext,\n+     apiName : throttleAnalyticsEventDTO.apiName,\n+     apiVersion : throttleAnalyticsEventDTO.apiVersion,\n+     apiResourcePath : \"\",\n+     apiResourceTemplate : \"\",\n+     apiMethod : \"\",\n+     apiCreator : throttleAnalyticsEventDTO.apiCreator,\n+     apiCreatorTenantDomain : throttleAnalyticsEventDTO.apiCreatorTenantDomain,\n+     apiTier : \"\",\n+     apiHostname : \"\",\n+     username : throttleAnalyticsEventDTO.userName,\n+     userTenantDomain : throttleAnalyticsEventDTO.userTenantDomain,\n+     userIp : \"\",\n+     userAgent : \"\",\n+     requestTimestamp : 0,\n+     throttledOut : false,\n+     responseTime :0,\n+     serviceTime : 0,\n+     backendTime : 0,\n+     responseCacheHit : false,\n+     responseSize : 0,\n+     protocol : \"\",\n+     responseCode  : 0,\n+     destination : \"\",\n+     securityLatency  : 0,\n+     throttlingLatency  : 0,\n+     requestMedLat : 0 ,\n+     responseMedLat : 0,\n+     backendLatency : 0 ,\n+     otherLatency : 0,\n+     gatewayType : throttleAnalyticsEventDTO.gatewayType,\n+     label  : \"\",\n+\n+     subscriber : throttleAnalyticsEventDTO.subscriber,\n+     throttledOutReason : throttleAnalyticsEventDTO.throttledOutReason,\n+     throttledOutTimestamp : throttleAnalyticsEventDTO.throttledTime,\n+     hostname : throttleAnalyticsEventDTO.hostname,\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return throttleAnalyticsMessage;\n+}\n+\n+\n+//creates fault stream gRPC Analytics message\n+public function createFaultMessage(FaultDTO faultDTO)returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createFaultMessage method called.\");\n+    int errorCodeValue = faultDTO.errorCode;\n+    AnalyticsStreamMessage faultAnalyticsMessage = {", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzQ0OA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323448", "bodyText": "This empty line is required", "author": "praminda", "createdAt": "2020-01-16T09:51:56Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/throttle_filter.bal", "diffHunk": "@@ -16,7 +16,6 @@\n \n import ballerina/http;\n import ballerina/runtime;\n-", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzcxMg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323712", "bodyText": "Remove unwanted comments", "author": "praminda", "createdAt": "2020-01-16T09:52:27Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzk5Nw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323997", "bodyText": "Renamed to,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            boolean gRPCConnection = false; //check gRPC connection\n          \n          \n            \n            boolean isGRPCConnection = false; //check gRPC connection", "author": "praminda", "createdAt": "2020-01-16T09:53:03Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDEzOQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367324139", "bodyText": "Rename to,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            boolean taskStarted = false;    //to check gRPC reconnect task\n          \n          \n            \n            boolean isTaskStarted = false;    //to check gRPC reconnect task", "author": "praminda", "createdAt": "2020-01-16T09:53:18Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDkyNw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367324927", "bodyText": "Should be\n- }\n- else {\n+ } else {", "author": "praminda", "createdAt": "2020-01-16T09:54:54Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNTEwOA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367325108", "bodyText": "How about,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (gRPCConnection == false) {\n          \n          \n            \n                    if (!gRPCConnection) {", "author": "praminda", "createdAt": "2020-01-16T09:55:19Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNTM0NA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367325344", "bodyText": "Wrong indentation", "author": "praminda", "createdAt": "2020-01-16T09:55:46Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjI4Mw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326283", "bodyText": "Move to a method level comment. (Document the public function with ballerina doc comments)", "author": "praminda", "createdAt": "2020-01-16T09:57:36Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjU5OA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326598", "bodyText": "Missing Ballerina doc comments for public function", "author": "praminda", "createdAt": "2020-01-16T09:58:08Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjcxNQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326715", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-01-16T09:58:22Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           ", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjgzMg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326832", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-01-16T09:58:34Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data published successfully: \");\n+        }\n+}\n+", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNzE5Ng==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367327196", "bodyText": "Correct the message in comment", "author": "praminda", "createdAt": "2020-01-16T09:59:21Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data published successfully: \");\n+        }\n+}\n+\n+\n+service AnalyticsSendServiceMessageListener = service {\n+    //server message listner\n+    resource function onMessage(string message) {\n+    }\n+\n+    resource function onError(error err) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"On error method in gRPC listner.\");\n+        gRPCConnection = false;\n+        //Triggers @ when startup when there is a gRPC connection error.", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNzU4Ng==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367327586", "bodyText": "Please correct the indentation of this code block", "author": "praminda", "createdAt": "2020-01-16T10:00:11Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data published successfully: \");\n+        }\n+}\n+\n+\n+service AnalyticsSendServiceMessageListener = service {\n+    //server message listner\n+    resource function onMessage(string message) {\n+    }\n+\n+    resource function onError(error err) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"On error method in gRPC listner.\");\n+        gRPCConnection = false;\n+        //Triggers @ when startup when there is a gRPC connection error.\n+        if (err.reason() == \"{ballerina/grpc}UnavailableError\" && gRPCConnection == false) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC unavaliable error identified.\");\n+            log:printError(\"Error reported from server: \" + err.reason() + \" - \" + <string> err.detail()[\"message\"]);\n+            //starts gRPC reconnect task\n+            if (taskStarted == false) {\n+                var startResult = gRPCConnectTimer.start();\n+                if (startResult is error ) {\n+                    printDebug(KEY_ANALYTICS_FILTER,\"Starting the gRPC reconnect task is failed.\");\n+                    return;\n+                }   \n+            }\n+        }\n+    }\n+\n+    resource function onComplete() {\n+    }\n+};\n+\n+AnalyticsStreamMessage gRPCPingMessage = {", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyOTA1NQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367329055", "bodyText": "All our bal files are named with _ naming. Rename the file with underscore naming. Also I think this name is not meaningful enough. Shall we rename? @Rajith90 @hasuniea @VirajSalaka WDYT?", "author": "praminda", "createdAt": "2020-01-16T10:03:04Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyOTM3MA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367329370", "bodyText": "Rename the file with more meaningful name. Also start with lowercase letter", "author": "praminda", "createdAt": "2020-01-16T10:03:45Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/Analytics_pb.bal", "diffHunk": "@@ -0,0 +1,94 @@\n+import ballerina/grpc;", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzNzY2Mw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367337663", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-01-16T10:20:41Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/Analytics_pb.bal", "diffHunk": "@@ -0,0 +1,94 @@\n+import ballerina/grpc;\n+\n+public type AnalyticsSendServiceClient client object {\n+\n+    *grpc:AbstractClientEndpoint;\n+\n+    private grpc:Client? grpcClient = ();\n+\n+    public function __init(string url, grpc:ClientConfiguration? config = ()) {\n+        // initialize client endpoint.\n+        grpc:Client c = new(url, config);\n+        grpc:Error? result = c.initStub(self, \"non-blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+        if (result is grpc:Error) {\n+            error err = result;\n+            panic err;\n+        } else {\n+            self.grpcClient = c;\n+        }\n+    }\n+\n+    public remote function sendAnalytics(service msgListener, grpc:Headers? headers = ()) returns (grpc:StreamingClient|grpc:Error) {\n+        if !(self.grpcClient is grpc:Client) {\n+            error err = error(\"UninitializedFieldsErrorType\", message = \"Field(s) are not initialized\");\n+            return grpc:prepareError(grpc:INTERNAL_ERROR, \"Field(s) are not initialized\", err);\n+        }\n+        grpc:Client tempGrpcClient = <grpc:Client> self.grpcClient;\n+        return tempGrpcClient->streamingExecute(\"AnalyticsSendService/sendAnalytics\", msgListener, headers);\n+    }\n+};\n+\n+public type Empty record {|\n+    \n+|};\n+\n+\n+public type AnalyticsStreamMessage record {|\n+    string messageStreamName = \"\";\n+    string meta_clientType = \"\";\n+    string applicationConsumerKey = \"\";\n+    string applicationName = \"\";\n+    string applicationId = \"\";\n+    string applicationOwner = \"\";\n+    string apiContext = \"\";\n+    string apiName = \"\";\n+    string apiVersion = \"\";\n+    string apiResourcePath = \"\";\n+    string apiResourceTemplate = \"\";\n+    string apiMethod = \"\";\n+    string apiCreator = \"\";\n+    string apiCreatorTenantDomain = \"\";\n+    string apiTier = \"\";\n+    string apiHostname = \"\";\n+    string username = \"\";\n+    string userTenantDomain = \"\";\n+    string userIp = \"\";\n+    string userAgent = \"\";\n+    int requestTimestamp = 0;\n+    boolean throttledOut = false;\n+    int responseTime = 0;\n+    int serviceTime = 0;\n+    int backendTime = 0;\n+    boolean responseCacheHit = false;\n+    int responseSize = 0;\n+    string protocol = \"\";\n+    int responseCode = 0;\n+    string destination = \"\";\n+    int securityLatency = 0;\n+    int throttlingLatency = 0;\n+    int requestMedLat = 0;\n+    int responseMedLat = 0;\n+    int backendLatency = 0;\n+    int otherLatency = 0;\n+    string gatewayType = \"\";\n+    string label = \"\";\n+    string subscriber = \"\";\n+    string throttledOutReason = \"\";\n+    int throttledOutTimestamp = 0;\n+    string hostname = \"\";\n+    string errorCode = \"\";\n+    string errorMessage = \"\";\n+    ", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzODI5OQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367338299", "bodyText": "Please uncommit this file", "author": "praminda", "createdAt": "2020-01-16T10:22:00Z", "path": "tests/.factorypath", "diffHunk": "@@ -0,0 +1,220 @@\n+<factorypath>", "originalCommit": "cb380e242d134b929c1931a0c75dcaf593bc6d69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e3af3e1c9663fb387049be2214028decda4842da", "url": "https://github.com/wso2/product-microgateway/commit/e3af3e1c9663fb387049be2214028decda4842da", "message": "Update components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>", "committedDate": "2020-01-16T17:59:27Z", "type": "commit"}, {"oid": "484bdea8abef9be765cbddfd4698dd0ca08e1433", "url": "https://github.com/wso2/product-microgateway/commit/484bdea8abef9be765cbddfd4698dd0ca08e1433", "message": "changes for new suggestions", "committedDate": "2020-01-17T10:46:05Z", "type": "commit"}, {"oid": "2e4c2af219a1cbf8a22ce1b8672cf998be7ed32e", "url": "https://github.com/wso2/product-microgateway/commit/2e4c2af219a1cbf8a22ce1b8672cf998be7ed32e", "message": "Merge branch 'custom_proto_analytics' of https://github.com/7slcode7/product-microgateway into custom_proto_analytics", "committedDate": "2020-01-17T10:47:14Z", "type": "commit"}, {"oid": "8ab6f6bfaa8ff0e4057d7791bded25477328799d", "url": "https://github.com/wso2/product-microgateway/commit/8ab6f6bfaa8ff0e4057d7791bded25477328799d", "message": "config map read changes and test case configs", "committedDate": "2020-01-20T08:59:03Z", "type": "commit"}, {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "url": "https://github.com/wso2/product-microgateway/commit/d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "message": "travis.yml change.", "committedDate": "2020-01-20T11:20:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyOTQ4OQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368929489", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             public const string UPLOADING_URL = \"uploadingUrl\";\n          \n          \n            \n            public const string UPLOADING_URL = \"uploadingUrl\";\n          \n      \n    \n    \n  \n\nBetter to do it for all following lines", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T10:47:24Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -123,32 +123,38 @@ public const string REQUIRE = \"require\";\n \n //Analytics filter related constants\n public const string ZIP_EXTENSION = \".zip\";\n-public const string UPLOADING_URL = \"uploadingUrl\";\n-public const string API_USAGE_FILE = \"api-usage-data.dat\";\n-public const string TIME_INTERVAL = \"timeInterval\";\n-public const string FILE_NAME = \"FileName\";\n-public const string ACCEPT = \"Accept\";\n-public const string ANALYTICS = \"analytics\";\n-public const string UPLOADING_TIME_SPAN = \"uploadingTimeSpanInMillis\";\n-public const string ROTATING_TIME = \"rotatingPeriod\";\n-public const string UPLOADING_EP = \"uploadingEndpoint\";\n-public const string REQUEST_TIME = \"REQUEST_TIME\";\n-public const string DATACENTER_ID = \"datacenterId\";\n-public const string THROTTLE_LATENCY = \"THROTTLE_LATENCY\";\n-public const string SECURITY_LATENCY_AUTHN = \"SECURITY_LATENCY_AUTHN\";\n-public const string SECURITY_LATENCY_AUTHZ = \"SECURITY_LATENCY_AUTHZ\";\n-public const string SECURITY_LATENCY_AUTHZ_RESPONSE = \"SECURITY_LATENCY_AUTHZ_RESPONSE\";\n-public const string SECURITY_LATENCY_SUBS = \"SECURITY_LATENCY_SUBS\";\n-public const string SECURITY_LATENCY_VALIDATION = \"SECURITY_LATENCY_VALIDATION\";\n-public const string METHOD = \"METHOD\";\n-public const string TS_REQUEST_OUT = \"timeStampRequestOut\";\n-public const string TS_RESPONSE_IN = \"timeStampResponseIn\";\n-public const string API_USAGE_PATH = \"api.usage.data.path\";\n-public const string API_USAGE_DIR = \"api-usage-data\";\n-public const string FILE_UPLOAD_TASK = \"taskUploadFiles\";\n-public const string INITIAL_DELAY = \"initialDelayInMillis\";\n-public const string DESTINATION = \"destination\";\n+ public const string UPLOADING_URL = \"uploadingUrl\";", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMTE4Mw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368931183", "bodyText": "Better to add a new line EOF", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T10:50:44Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,60 @@\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+\n+option java_package = \"org.wso2.analytics.mgw.grpc.service\";\n+\n+import \"google/protobuf/empty.proto\";\n+\n+message AnalyticsStreamMessage {\n+    string messageStreamName = 1;\n+    string meta_clientType = 2;\n+    string applicationConsumerKey = 3;\n+    string applicationName = 4;\n+    string applicationId = 5;\n+    string applicationOwner = 6;\n+    string apiContext = 7;\n+    string apiName = 8;\n+    string apiVersion = 9;\n+    string apiResourcePath = 10;\n+    string apiResourceTemplate = 11;\n+    string apiMethod = 12;\n+    string apiCreator = 13;\n+    string apiCreatorTenantDomain = 14;\n+    string apiTier = 15;\n+    string apiHostname = 16;\n+    string username = 17;\n+    string userTenantDomain = 18;\n+    string userIp = 19;\n+    string userAgent = 20;\n+    int64 requestTimestamp  = 21;\n+    bool throttledOut = 22;\n+    int64 responseTime = 23;\n+    int64 serviceTime  = 24;\n+    int64 backendTime = 25;\n+    bool responseCacheHit = 26;\n+    int64 responseSize = 27;\n+    string protocol = 28;\n+    int32 responseCode = 29;\n+    string destination = 30;\n+    int64 securityLatency = 31;\n+    int64 throttlingLatency = 32;\n+    int64 requestMedLat = 33;\n+    int64 responseMedLat = 34;\n+    int64 backendLatency = 35;\n+    int64 otherLatency = 36;\n+    string gatewayType = 37;\n+    string label = 38;\n+\n+    string subscriber = 39;\n+    string throttledOutReason = 40;\n+    int64 throttledOutTimestamp = 41;\n+    string hostname = 42;\n+ \n+    string errorCode = 43;\n+    string errorMessage = 44;\n+}\n+\n+service AnalyticsSendService {\n+    rpc sendAnalytics(stream AnalyticsStreamMessage) returns(google.protobuf.Empty);\n+}", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NjQ3Ng==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r369356476", "bodyText": "Changed according to below suggestion.\n#934 (comment)", "author": "slahirucd7", "createdAt": "2020-01-22T03:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMTE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMjg4OQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368932889", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (isgRPCAnalyticsEnabled != false) {\n          \n          \n            \n                                    if (isgRPCAnalyticsEnabled) {", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T10:54:01Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled != false) {", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMzA4MA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368933080", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        if (isAnalyticsEnabled != false) {\n          \n          \n            \n                                        if (isAnalyticsEnabled) {", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T10:54:26Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled != false) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n+                            future<()> publishedGRPCThrottleStream = start dataToAnalytics(message);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message published.\");\n+                        }\n+                        EventDTO|error eventDTO  = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n                         if (eventDTO is EventDTO) {\n-                            eventStream.publish(eventDTO);\n+                            if (isAnalyticsEnabled != false) {", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMzcxOA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368933718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isgRPCAnalyticsEnabled != false ) {\n          \n          \n            \n                    if (isgRPCAnalyticsEnabled) {\n          \n      \n    \n    \n  \n\nPlease change in other places as well", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T10:55:50Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +90,22 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n     if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n+        printDebug(KEY_ANALYTICS_FILTER,\"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);\n+        if (isgRPCAnalyticsEnabled != false ) {", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzODE4Ng==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368938186", "bodyText": "use printWarn instead of log:printWarn", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T11:05:18Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzODU4MQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368938581", "bodyText": "use printInfo instead of log:printInfo", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T11:06:05Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzODc3OA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368938778", "bodyText": "use printError instead of log:printError", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T11:06:30Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzOTA2NA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368939064", "bodyText": "use printError instead log:printError", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T11:07:10Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            isTaskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+    secureSocket: {\n+        keyStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+            password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+        },\n+        trustStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+            password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+        },\n+        verifyHostname:false //to avoid SSL certificate validation error\n+    },\n+    timeoutInMillis : 2147483647\n+} );\n+\n+# `initGRPCService` function binds gRPC streaming client endpoint with server message listner.\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzOTI2OA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368939268", "bodyText": "use printError instead log:printError", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T11:07:42Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            isTaskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+    secureSocket: {\n+        keyStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+            password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+        },\n+        trustStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+            password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+        },\n+        verifyHostname:false //to avoid SSL certificate validation error\n+    },\n+    timeoutInMillis : 2147483647\n+} );\n+\n+# `initGRPCService` function binds gRPC streaming client endpoint with server message listner.\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MTE0NQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368941145", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (isgRPCAnalyticsEnabled == true) {\n          \n          \n            \n                if (isgRPCAnalyticsEnabled) {", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T11:11:50Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "diffHunk": "@@ -126,14 +132,31 @@ function populateFaultAnalyticsDTO(http:FilterContext context, string err) retur\n \n \n function getAnalyticsEnableConfig() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    isAnalyticsEnabled = <boolean>vals[ENABLE];\n-    rotatingTime = <int>vals[ROTATING_TIME];\n-    uploadingUrl = <string>vals[UPLOADING_EP];\n+    isAnalyticsEnabled = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_ENABLE,false); \n+    rotatingTime = <int>getConfigIntValue(FILE_UPLOAD_ANALYTICS,ROTATING_TIME,600000); \n+    uploadingUrl = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,UPLOADING_EP,\"https://localhost:9444/analytics/v1.0/usage/upload-file\");\n     configsRead = true;\n+    log:printDebug(\"File upload analytics uploading URL : \"+ uploadingUrl);\n     printDebug(KEY_UTILS, \"Analytics configuration values read\");\n }\n \n+function initializegRPCAnalytics() {\n+    printDebug(KEY_UTILS, \"gRPC Analytics configuration values read\");\n+    map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+    isgRPCAnalyticsEnabled = <boolean>gRPCConfigs[ENABLE];\n+    endpointURL = <string>gRPCConfigs[GRPC_ENDPOINT_URL];\n+    gRPCReconnectTime = <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC endpoint URL : \" + endpointURL);\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC keyStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC keyStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC trustStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC tustStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC retry time  : \" + gRPCReconnectTime.toString());\n+\n+    if (isgRPCAnalyticsEnabled == true) {", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MTYyOQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368941629", "bodyText": "use printDebug instead log:printDebug", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-21T11:12:59Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "diffHunk": "@@ -126,14 +132,31 @@ function populateFaultAnalyticsDTO(http:FilterContext context, string err) retur\n \n \n function getAnalyticsEnableConfig() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    isAnalyticsEnabled = <boolean>vals[ENABLE];\n-    rotatingTime = <int>vals[ROTATING_TIME];\n-    uploadingUrl = <string>vals[UPLOADING_EP];\n+    isAnalyticsEnabled = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_ENABLE,false); \n+    rotatingTime = <int>getConfigIntValue(FILE_UPLOAD_ANALYTICS,ROTATING_TIME,600000); \n+    uploadingUrl = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,UPLOADING_EP,\"https://localhost:9444/analytics/v1.0/usage/upload-file\");\n     configsRead = true;\n+    log:printDebug(\"File upload analytics uploading URL : \"+ uploadingUrl);", "originalCommit": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "url": "https://github.com/wso2/product-microgateway/commit/834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "message": "configs for older versions and changes for suggestions", "committedDate": "2020-01-22T10:10:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3NzE3OQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370077179", "bodyText": "Do we still need to read config values from the new file if isOldAnalyticsEnabled is true?", "author": "daneshk", "createdAt": "2020-01-23T11:58:37Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/upload_files_timer.bal", "diffHunk": "@@ -66,14 +66,24 @@ function searchFilesToUpload() returns (error?) {\n }\n \n function timerTask() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    boolean uploadFiles = <boolean>vals[FILE_UPLOAD_TASK];\n-    analyticsUsername = <string>vals[USERNAME];\n-    analyticsPassword = <string>vals[PASSWORD];\n+    boolean uploadFiles = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_TASK,true);\n+    analyticsUsername = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,USERNAME,\"admin\");\n+    analyticsPassword = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,PASSWORD,\"admin\");\n+    if (isOldAnalyticsEnalbed) {\n+        //enables config reads for older versions\n+        uploadFiles = <boolean>getConfigBooleanValue(OLD_FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_TASK,true);\n+        analyticsUsername = <string>getConfigValue(OLD_FILE_UPLOAD_ANALYTICS,USERNAME,\"admin\");\n+        analyticsPassword = <string>getConfigValue(OLD_FILE_UPLOAD_ANALYTICS,PASSWORD,\"admin\");\n+    }", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3NzY3Mg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370077672", "bodyText": "Check spellings? Enabled", "author": "daneshk", "createdAt": "2020-01-23T11:59:51Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/upload_files_timer.bal", "diffHunk": "@@ -66,14 +66,24 @@ function searchFilesToUpload() returns (error?) {\n }\n \n function timerTask() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    boolean uploadFiles = <boolean>vals[FILE_UPLOAD_TASK];\n-    analyticsUsername = <string>vals[USERNAME];\n-    analyticsPassword = <string>vals[PASSWORD];\n+    boolean uploadFiles = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_TASK,true);\n+    analyticsUsername = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,USERNAME,\"admin\");\n+    analyticsPassword = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,PASSWORD,\"admin\");\n+    if (isOldAnalyticsEnalbed) {", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3ODY2NA==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370078664", "bodyText": "Formatting issue? need space in between", "author": "daneshk", "createdAt": "2020-01-23T12:02:34Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4MDE4Nw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370080187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n          \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER, \"gRPC throttle stream message created.\");", "author": "daneshk", "createdAt": "2020-01-23T12:06:22Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4MDkyNw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370080927", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (isgRPCAnalyticsEnabled) {\n          \n          \n            \n                                    if (isGrpcAnalyticsEnabled) {\n          \n      \n    \n    \n  \n\nShall we make it camel case and correct all places", "author": "daneshk", "createdAt": "2020-01-23T12:08:21Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjA1Mw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370086053", "bodyText": "The variable name doesn't look correct. Shall we make it like dataPublishFuture or something similar", "author": "daneshk", "createdAt": "2020-01-23T12:20:23Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n+                            future<()> publishedGRPCThrottleStream = start dataToAnalytics(message);", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjE0Mg==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370086142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message published.\");\n          \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER, \"gRPC throttle stream message published.\");", "author": "daneshk", "createdAt": "2020-01-23T12:20:36Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n+                            future<()> publishedGRPCThrottleStream = start dataToAnalytics(message);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message published.\");", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjcyNQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370086725", "bodyText": "check and correct all places", "author": "daneshk", "createdAt": "2020-01-23T12:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NzEzMw==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370087133", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                printDebug(KEY_ANALYTICS_FILTER,\"doFilterRequestMehtod called\");\n          \n          \n            \n                printDebug(KEY_ANALYTICS_FILTER, \"doFilterRequest method called\");", "author": "daneshk", "createdAt": "2020-01-23T12:23:10Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -66,11 +77,11 @@ public type AnalyticsRequestFilter object {\n         }\n         return true;\n     }\n-\n };\n \n \n function doFilterRequest(http:Request request, http:FilterContext context) {\n+    printDebug(KEY_ANALYTICS_FILTER,\"doFilterRequestMehtod called\");", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4Nzc0Ng==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370087746", "bodyText": "check spelling in the message and correct formating issues", "author": "daneshk", "createdAt": "2020-01-23T12:24:46Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +90,22 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n     if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n+        printDebug(KEY_ANALYTICS_FILTER,\"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwOTQ2NQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370509465", "bodyText": "Please add default config values as in #947. Correct it in all occurrences.", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-24T08:01:40Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/endpoints/api_gateway_endpoint.bal", "diffHunk": "@@ -32,7 +32,7 @@ getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, \"https://localhost:9443\"),\n });\n \n http:Client analyticsFileUploadEndpoint = new (\n-getConfigValue(ANALYTICS, UPLOADING_EP, \"https://localhost:9444/analytics/v1.0/usage/upload-file\"),\n+getConfigValue(FILE_UPLOAD_ANALYTICS, UPLOADING_EP, \"https://localhost:9444/analytics/v1.0/usage/upload-file\"),", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwOTg2OQ==", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370509869", "bodyText": "Add this config to micro-gw-default.cong and test/base.conf", "author": "AmaliMatharaarachchi", "createdAt": "2020-01-24T08:03:15Z", "path": "distribution/resources/conf/micro-gw.conf", "diffHunk": "@@ -65,14 +65,19 @@ tokenCacheCapacity=10000\n tokenCacheEvictionFactor=0.25\n \n [analytics]\n-enable=false\n-uploadingTimeSpanInMillis=600000\n-initialDelayInMillis=5000\n-uploadingEndpoint=\"https://localhost:9444/analytics/v1.0/usage/upload-file\"\n-rotatingPeriod=600000\n-taskUploadFiles=true\n-username=\"admin\"\n-password=\"admin\"\n+  [analytics.fileUpload]", "originalCommit": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c8ed40609e91b683daf6642622580030e68e64c", "url": "https://github.com/wso2/product-microgateway/commit/2c8ed40609e91b683daf6642622580030e68e64c", "message": "changes for reviews and new config changes", "committedDate": "2020-01-24T10:02:10Z", "type": "commit"}, {"oid": "2196814451acb8821d29d85a453f20de7e0159ac", "url": "https://github.com/wso2/product-microgateway/commit/2196814451acb8821d29d85a453f20de7e0159ac", "message": "default values for analytics configs and implemented review suggestions", "committedDate": "2020-01-27T02:23:28Z", "type": "commit"}, {"oid": "53d9bd2982e7c6b9a2626ab8a2f4bbc0fa3ca9fa", "url": "https://github.com/wso2/product-microgateway/commit/53d9bd2982e7c6b9a2626ab8a2f4bbc0fa3ca9fa", "message": "Merge branch 'master' into custom_proto_analytics", "committedDate": "2020-01-27T11:53:09Z", "type": "commit"}, {"oid": "2bb22289f8ae94e8447a9d58a1941695a72328ce", "url": "https://github.com/wso2/product-microgateway/commit/2bb22289f8ae94e8447a9d58a1941695a72328ce", "message": "implemented review suggestions", "committedDate": "2020-01-28T04:59:06Z", "type": "commit"}, {"oid": "168339bfb9258c764fc05c76eaf18fe27a3fc21d", "url": "https://github.com/wso2/product-microgateway/commit/168339bfb9258c764fc05c76eaf18fe27a3fc21d", "message": "Merge branch 'custom_proto_analytics' of https://github.com/7slcode7/product-microgateway into custom_proto_analytics", "committedDate": "2020-01-28T05:05:35Z", "type": "commit"}, {"oid": "e0002d3a010c41a56b186c7f9fa9dfbaa880a68b", "url": "https://github.com/wso2/product-microgateway/commit/e0002d3a010c41a56b186c7f9fa9dfbaa880a68b", "message": "remove unused import module", "committedDate": "2020-01-28T05:44:00Z", "type": "commit"}, {"oid": "22448ab7d79edb1aed8b06b066bb69266399665e", "url": "https://github.com/wso2/product-microgateway/commit/22448ab7d79edb1aed8b06b066bb69266399665e", "message": "fixes after pull request", "committedDate": "2020-01-28T07:32:41Z", "type": "commit"}]}