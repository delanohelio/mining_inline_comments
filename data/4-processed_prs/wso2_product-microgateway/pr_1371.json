{"pr_number": 1371, "pr_title": "Enable kay validation service ", "pr_createdAt": "2020-08-07T05:15:31Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1371", "timeline": [{"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa", "url": "https://github.com/wso2/product-microgateway/commit/c63188857c3bf3ca024cf7df34c39146246d4efa", "message": "Change the legacy mode config name.", "committedDate": "2020-08-07T05:22:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNTQxNg==", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466835416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            if (authenticationResult) {\n          \n          \n            \n                        } else if (authenticationResult) {", "author": "praminda", "createdAt": "2020-08-07T05:52:59Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -91,76 +93,102 @@ public type KeyValidationHandler object {\n         string authHeaderName = getAuthorizationHeader(invocationContext);\n         APIConfiguration? apiConfig = apiConfigAnnotationMap[<string>invocationContext.attributes[http:SERVICE_NAME]];\n         boolean|auth:Error authenticationResult = false;\n-        authenticationResult = self.introspectProvider.authenticate(credential);\n-        if (authenticationResult is auth:Error) {\n-            return prepareAuthenticationError(\"Failed to authenticate with introspect auth provider.\", authenticationResult);\n-        } else if (!authenticationResult) {\n-            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-            return authenticationResult;\n+        if (self.isLegacyKM) {\n+            // In legacy mode, use the KeyValidation service for token validation.\n+            // This is used when API-M versions < 3.2 are being used to support backward compatibility\n+            authenticationResult = self.oauth2KeyValidationProvider.authenticate(credential);\n+            if (authenticationResult is auth:Error) {\n+                return prepareAuthenticationError(\"Failed to authenticate with key validation service.\", authenticationResult);\n+            } else {\n+                if (authenticationResult) {", "originalCommit": "c63188857c3bf3ca024cf7df34c39146246d4efa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNjkxMw==", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466836913", "bodyText": "Here don't we need below else block similar to introspect flow?\n} else if (!authenticationResult) {\n    setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n    return authenticationResult;\n}", "author": "praminda", "createdAt": "2020-08-07T05:58:08Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -91,76 +93,102 @@ public type KeyValidationHandler object {\n         string authHeaderName = getAuthorizationHeader(invocationContext);\n         APIConfiguration? apiConfig = apiConfigAnnotationMap[<string>invocationContext.attributes[http:SERVICE_NAME]];\n         boolean|auth:Error authenticationResult = false;\n-        authenticationResult = self.introspectProvider.authenticate(credential);\n-        if (authenticationResult is auth:Error) {\n-            return prepareAuthenticationError(\"Failed to authenticate with introspect auth provider.\", authenticationResult);\n-        } else if (!authenticationResult) {\n-            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-            return authenticationResult;\n+        if (self.isLegacyKM) {\n+            // In legacy mode, use the KeyValidation service for token validation.\n+            // This is used when API-M versions < 3.2 are being used to support backward compatibility\n+            authenticationResult = self.oauth2KeyValidationProvider.authenticate(credential);\n+            if (authenticationResult is auth:Error) {\n+                return prepareAuthenticationError(\"Failed to authenticate with key validation service.\", authenticationResult);\n+            } else {\n+                if (authenticationResult) {\n+                    boolean tokenGenStatus = generateAndSetBackendJwtHeader(credential,\n+                                                                                        req,\n+                                                                                        self.enabledJWTGenerator,\n+                                                                                        self.classLoaded,\n+                                                                                        self.skewTime,\n+                                                                                        self.enabledCaching,\n+                                                                                        self.issuer,\n+                                                                                        self.remoteUserClaimRetrievalEnabled,\n+                                                                                        false);\n+                    if (!tokenGenStatus) {\n+                        printError(KEY_AUTHN_FILTER, \"Error while adding the Backend JWT header\");\n+                    }\n+                }", "originalCommit": "c63188857c3bf3ca024cf7df34c39146246d4efa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1Mzk0Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466953947", "bodyText": "e85834c", "author": "menakaj", "createdAt": "2020-08-07T10:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNjkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNzYzOA==", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466837638", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              # When Microgateway is used with older APIM versions for subscription validation by using KeyValidation service.\n          \n          \n            \n              # When Microgateway is used with older APIM versions with subscription validation, enable legacy KeyValidation service.", "author": "praminda", "createdAt": "2020-08-07T06:00:31Z", "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -52,6 +52,8 @@\n   serverUrl = \"https://localhost:9443\"\n   # The token endpoint context of the Key Manager server\n   tokenContext = \"oauth2\"\n+  # When Microgateway is used with older APIM versions for subscription validation by using KeyValidation service.", "originalCommit": "c63188857c3bf3ca024cf7df34c39146246d4efa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8157171ffab1f0eb936c10a294aafea0e487bf5", "url": "https://github.com/wso2/product-microgateway/commit/a8157171ffab1f0eb936c10a294aafea0e487bf5", "message": "Re-enable the key validation service to use with older apim versions.", "committedDate": "2020-08-07T10:20:23Z", "type": "commit"}, {"oid": "b9f43b68b15b99e3d13d42ace8dd2ce10e290fe5", "url": "https://github.com/wso2/product-microgateway/commit/b9f43b68b15b99e3d13d42ace8dd2ce10e290fe5", "message": "Add new config to template file.", "committedDate": "2020-08-07T10:20:23Z", "type": "commit"}, {"oid": "dca65300b565ca7250dc07c6a93b60c1090fcaf2", "url": "https://github.com/wso2/product-microgateway/commit/dca65300b565ca7250dc07c6a93b60c1090fcaf2", "message": "Change the legacy mode config name.", "committedDate": "2020-08-07T10:20:23Z", "type": "commit"}, {"oid": "e85834c616c88178149f469c504eab32bc3200f2", "url": "https://github.com/wso2/product-microgateway/commit/e85834c616c88178149f469c504eab32bc3200f2", "message": "Add authentication failure case to the key validation flow.", "committedDate": "2020-08-07T10:20:23Z", "type": "commit"}, {"oid": "e85834c616c88178149f469c504eab32bc3200f2", "url": "https://github.com/wso2/product-microgateway/commit/e85834c616c88178149f469c504eab32bc3200f2", "message": "Add authentication failure case to the key validation flow.", "committedDate": "2020-08-07T10:20:23Z", "type": "forcePushed"}, {"oid": "622c3a5b666e19f5ae1bf51e4cbcc16293cd4005", "url": "https://github.com/wso2/product-microgateway/commit/622c3a5b666e19f5ae1bf51e4cbcc16293cd4005", "message": "Fix key validations conditions logic.", "committedDate": "2020-08-07T14:24:55Z", "type": "commit"}]}