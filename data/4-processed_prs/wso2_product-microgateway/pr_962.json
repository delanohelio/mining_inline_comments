{"pr_number": 962, "pr_title": "Make windows executable work with jballerina", "pr_createdAt": "2020-02-03T09:57:49Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/962", "timeline": [{"oid": "d1b57e66fda054ad67bedd4f8a98706a67e52e76", "url": "https://github.com/wso2/product-microgateway/commit/d1b57e66fda054ad67bedd4f8a98706a67e52e76", "message": "script: Add missing build outputs\n\nImproves #687", "committedDate": "2020-01-31T10:39:41Z", "type": "commit"}, {"oid": "f944f20f6b95e9347611f7675f9a2821439521df", "url": "https://github.com/wso2/product-microgateway/commit/f944f20f6b95e9347611f7675f9a2821439521df", "message": "win: Fix windows batch scripts\n\nWindows batch scripts were not compatible with jballerina upgrade.\nRuntime batch script was rewritten to make it simple and improve\nreadability.", "committedDate": "2020-01-31T11:13:35Z", "type": "commit"}, {"oid": "a55d5bcd2ef731214d55f39ac8d99e2c89b80003", "url": "https://github.com/wso2/product-microgateway/commit/a55d5bcd2ef731214d55f39ac8d99e2c89b80003", "message": "runtime: win: Pick extenal JAVA_HOME\n\nThis is done to make gateway script behavior similar to bash\nscript behavior. If external JAVA_HOME was detected and it is of\njava8 family, then script will pick that JAVA_HOME to start mgw", "committedDate": "2020-02-03T09:48:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyODIyOA==", "url": "https://github.com/wso2/product-microgateway/pull/962#discussion_r374128228", "bodyText": "Needs to have first element of the Args to be in here and the rest of the args to be in the end.\nNeeds to change the shell script as well.\nLike this.\n\n$JAVACMD ...\n-jar ${args[0]} --api.usage.data.path=$GW_HOME/api-usage-data --b7a.http.accesslog.path=$GW_HOME/logs/access_logs --b7a.config.file=$GW_HOME/conf/micro-gw.conf ${args[@]:1}  2>&1 | tee -a $GW_HOME/logs/microgateway.log", "author": "VirajSalaka", "createdAt": "2020-02-03T14:22:00Z", "path": "distribution/resources/bin/gateway.bat", "diffHunk": "@@ -17,151 +17,235 @@ REM  limitations under the License.\n REM ----------------------------------------------------------------------------\n REM Startup Script for Gateway Server\n REM\n-REM Environment Variable Prerequisites\n-REM\n-REM   BALLERINA_HOME      Home of Ballerina installation.\n-REM\n REM NOTE: Borrowed generously from Apache Tomcat startup scripts.\n REM -----------------------------------------------------------------------------\n setlocal EnableDelayedExpansion\n \n-if \"\"%1%\"\"==\"\"-v\"\" ( set verbose=T ) else ( set verbose=F )\n-if %verbose%==T ( echo Verbose mode enabled )\n+REM -----------------------------------------------------------------------------\n+REM --- START OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n \n REM Set Java Xms and Xmx values. The values specified here will set in gateway runtime.\n-SET JAVA_XMS_VALUE=\"256m\"\n-SET JAVA_XMX_VALUE=\"512m\"\n+SET JAVA_XMS_VALUE=256m\n+SET JAVA_XMX_VALUE=512m\n \n-REM Get the location of this(gateway.bat) file\n+REM Set global variables\n SET PRGDIR=%~dp0\n-SET GWHOME=%PRGDIR%..\n+SET GW_HOME=%PRGDIR%..\n SET MGW_VERSION=\"3.1.0\"\n-REM  set BALLERINA_HOME\n-set BALLERINA_HOME=%GWHOME%\\runtime\n-set JAVA_HOME=%GWHOME%\\lib\\jdk8u202-b08-jre\n-if %verbose%==T echo BALLERINA_HOME environment variable is set to %BALLERINA_HOME%\n-if %verbose%==T echo GWHOME environment variable is set to %GWHOME%\n-\n-REM Check if path to runtime executable is available\n-set last=\"\"\n-for %%a in (%*) do set last=%%a\n-if %last%==\"\" set isInvalidPath=T\n-if not exist %last% set isInvalidPath=T\n-if \"%isInvalidPath%\"==\"T\" (\n-\techo Path to executable balx file is invalid\n-    goto end\n+SET CONF_FILE=%GW_HOME%\\conf\\micro-gw.conf\n+SET CONF_OUT_FILE=%GW_HOME%\\.config\n+SET IS_METRICS_ENABLED=F\n+SET EXEC_FILE=\n+SET BAL_ARGS=\n+\n+REM If java_home is set and version is 1.8 in the running environment,\n+REM pick that as the java_home for MGW. If not set internal jre home\n+IF EXIST %JAVA_HOME% (\n+    SET JAVA_CMD=\"%JAVA_HOME%\\bin\\java.exe\"\n+    SET JAVA_VERSION=\n+    FOR /F \"tokens=* USEBACKQ\" %%F IN (`%JAVA_CMD% -fullversion 2^>^&1`) DO (\n+        SET JAVA_VERSION=%%F\n+    )\n+\n+    REM External java_home was detected, now check if it is java8\n+    ECHO \"%JAVA_VERSION%\"|find \"1.8.\" >NUL\n+    IF %ERRORLEVEL% NEQ 0 SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+) ELSE SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+CALL :checkJava\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+CALL :validateExecutable %*\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+SET EXEC_FILE=%~1\n+CALL :buildBalArgs %*\n+\n+CALL :runTools \"getConfig %CONF_FILE% %CONF_OUT_FILE%\"\n+\n+IF \"%b7a_observability_metrics_enabled%\"==\"true\" (\n+    SET IS_METRICS_ENABLED=T\n+) ELSE (\n+    CAll :isMetricsEnabled %*\n )\n \n-REM Extract ballerina runtime\n-if not exist %GW_HOME%\\runtime\\ (\n-    REM TODO: Evaluate the use of powershell `tee` here\n-    call \"%PRGDIR%\\tools.exe\"\n-    if ERRORLEVEL 0 (\n-        xcopy /y \"%GWHOME%\\lib\\gateway\\*.jar\" \"%GWHOME%\\runtime\\bre\\lib\\\" >nul\n+IF EXIST %CONF_OUT_FILE% (\n+    IF \"%IS_METRICS_ENABLED%\"==\"F\" (\n+        FOR /F \"delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            IF %%i==true SET IS_METRICS_ENABLED=T\n+            REM Prevent falling into else block\n+            GOTO :enableAgent\n+        )\n     )\n+) ELSE (\n+    ECHO Error while reading observability configurations from the file\n+    GOTO :continueInit\n )\n \n-REM Needs to identify the ballerina arguments and the last argument which is the path of executable.\n-REM The path of executable should be provided as \\\"<path>\\\" to avoid ballerina when the path includes a space.\n-REM BAL_ARGS variable is used to store formatted string\n-set BAL_ARGS=\n-:formatAndValidateCmdArgs\n-    if \"%~1\"==\"-e\" (\n-        set \"BAL_ARGS=%BAL_ARGS% %1 %2=%3\"\n-        shift\n-        shift\n-        shift\n-        goto :formatAndValidateCmdArgs\n-    ) else (\n-        if \"%~2\"==\"\" (\n-            set \"BAL_ARGS=%BAL_ARGS% \\\"%~1\\\"\"\n-            goto :callBallerina\n-        ) else (\n-            if \"%~1\"==\"--debug\" (\n-                 set \"BAL_ARGS=%BAL_ARGS% %1 %2\"\n-                 shift\n-                 shift\n-                 goto :formatAndValidateCmdArgs\n-            ) else (\n-                 echo %*\n-                 echo \"Provided set of arguments are invalid.\"\n-                 goto end\n-            )\n+:enableAgent\n+    IF \"%IS_METRICS_ENABLED%\"==\"T\" (\n+        FOR /F \"skip=1 delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            SET jmxPort=%%i\n+            GOTO :setJavaOpts\n         )\n+        :setJavaOpts\n+            SET JAVA_OPTS=\"-javaagent:%GW_HOME%\\lib\\gateway\\jmx_prometheus_javaagent-0.12.0.jar=%jmxPort%:%GW_HOME%\\conf\\Prometheus\\config.yml\"\n     )\n \n-REM Slurp the command line arguments. This loop allows for an unlimited number\n-REM of arguments (up to the command line limit, anyway).\n-:setupArgs\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Processing argument : `%1`\n-\tif \"\"%1\"\"==\"\"\"\" goto :formatAndValidateCmdArgs\n-\n-\tif \"\"%1\"\"==\"\"--debug\"\"    goto commandDebug\n-\tshift\n-goto setupArgs\n-\n-:commandDebug\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Running commandDebug\n-\n-\tshift\n-\tset DEBUG_PORT=%1\n-\tif \"%DEBUG_PORT%\"==\"\" goto noDebugPort\n-\techo Please start the remote debugging client to continue...\n-goto :formatAndValidateCmdArgs\n-\n-:noDebugPort\n-\techo Please specify the debug port after the ballerina debug option\n-goto end\n-\n-\n-:callBallerina\n-\tREM ---------- Run balx with ballerina ----------------\n-\tREM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n-\tset \"separator=/\"\n-\tset log_path=\"%GWHOME%\\logs\\access_logs\"\n-\tcall set unix_style_path=%%log_path:\\=%separator%%%\n-\n-\tREM Do the same for analytics data file path\n-\tset usage_data_path=%GWHOME%\\api-usage-data\n-\tcall set usage_data_path=%%usage_data_path:\\=%separator%%%\n-\n-\tif %verbose%==T echo [%date% %time%] DEBUG: b7a.http.accesslog.path = \"%GWHOME%\\logs\\access_logs\"\n-\tif %verbose%==T echo [%date% %time%] DEBUG: configs = %unix_style_path%\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Starting micro gateway server...\n-\n-\tREM Check if powershell is available\n-\tWHERE powershell >nul 2>nul\n-\tIF %ERRORLEVEL% NEQ 0 (\n-\t\techo [%date% %time%] WARN: Can't find powershell in the system!\n-\t\techo [%date% %time%] WARN: STDERR and STDOUT will be piped to %GWHOME%\\logs\\microgateway.log\n-\t\tREM To append to existing logs used `>>` to redirect STDERR to STDOUT used `2>&1`\n-\t\t\"%GWHOME%\\runtime\\bin\\ballerina\" run -e api.usage.data.path=%usage_data_path%  -e b7a.http.accesslog.path=%unix_style_path% --config \"%GWHOME%\\conf\\micro-gw.conf\" %BAL_ARGS% >> \"%GWHOME%\\logs\\microgateway.log\" 2>&1\n-\t) else (\n-\t\tREM Change Java heap Xmx and Xmx values\n-\t\tpowershell -Command \"(Get-Content \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\") | Foreach-Object {$_ -replace 'Xms.*?m','Xms%JAVA_XMS_VALUE% '} | Foreach-Object {$_ -replace 'Xmx.*?m','Xmx%JAVA_XMX_VALUE% '} | Set-Content \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\"\"\n-\t\tpowershell -Command \"Remove-Item \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\"\"\n-\t\tpowershell -Command \"Rename-Item -path \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\" -newName ballerina.bat\"\n-\t\tCD \"%GWHOME%\"\n-\t\tfor /f \"skip=3 tokens=2 delims=:\" %%A in ('powershell -command \"get-host\"') do (\n-\t\t\tset /a n=!n!+1\n-\t\t\tset c=%%A\n-\t\t\tif !n!==1 set PSVersion=!c!\n-\t\t)\n-\t\tset PSVersion=!PSVersion: =!\n-\t\tif %verbose%==T echo [%date% %time%] DEBUG: PowerShell version !PSVersion! detected!\n-\t\tset PSVersion=!PSVersion:~0,1!\n-\t\techo [%date% %time%] Starting Micro-Gateway\n-\t\tIF !PSVersion! LEQ 3 (\n-\t\t\techo [%date% %time%] Starting Micro-Gateway >>  .\\logs\\microgateway.log\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.http.accesslog.path=\\\"%unix_style_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | out-file -encoding ASCII -filepath .\\logs\\microgateway.log -Append\"\n-\t\t ) else (\n-\t\t\tREM For powershell version 4 or above , We can use `tee` command for output to both file stream and stdout (Ref: https://en.wikipedia.org/wiki/PowerShell#PowerShell_4.0)\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.http.accesslog.path=\\\"%unix_style_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | tee -Append .\\logs\\microgateway.log\"\n-\t\t)\n-\t)\n-:end\n-goto endlocal\n-\n-:endlocal\n+    DEL /Q /F %CONF_OUT_FILE%\n+\n+:continueInit\n+    REM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n+    SET \"separator=/\"\n+    SET log_path=\"%GW_HOME%\\logs\\access_logs\"\n+    CALL SET ACCESS_LOG_PATH=%%log_path:\\=%separator%%%\n+\n+    REM Do the same for analytics data file path\n+    SET usage_path=%GW_HOME%\\api-usage-data\n+    CALL SET USAGE_DATA_PATH=%%usage_path:\\=%separator%%%\n+\n+    CALL :startGateway %*\n+\n+    GOTO END\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF FUNCTION DEFINITION ---\n+REM -----------------------------------------------------------------------------\n+\n+REM Start the gateway using internal ballerina distribution as the runtime\n+:startGateway\n+    REM Check if powershell is available\n+    SET JAVA_ARGS=-Xms%JAVA_XMS_VALUE% -Xmx%JAVA_XMX_VALUE% -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=%GW_HOME%\\heap-dump.hprof\n+    WHERE POWERSHELL >NUL 2>NUl\n+\n+    IF %ERRORLEVEL% NEQ 0 (\n+        ECHO WARN: Can't find powershell in the system!\n+        ECHO WARN: STDERR and STDOUT will be piped to %GW_HOME%\\logs\\microgateway.log\n+        \"%JAVA_HOME%\\bin\\java.exe\" %JAVA_ARGS% -Dmgw-runtime.home=%GW_HOME% -Dballerina.home=%GW_HOME%/runtime -jar \"%EXEC_FILE%\" %BAL_ARGS% --api.usage.data.path=%USAGE_DATA_PATH%  --b7a.http.accesslog.path=%ACCESS_LOG_PATH% --b7a.config.file=\"%GW_HOME%\\conf\\micro-gw.conf\" >> \"%GW_HOME%\\logs\\microgateway.log\" 2>&1", "originalCommit": "a55d5bcd2ef731214d55f39ac8d99e2c89b80003", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}