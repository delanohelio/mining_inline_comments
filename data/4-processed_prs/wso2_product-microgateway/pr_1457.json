{"pr_number": 1457, "pr_title": "Refactor JWT authentication", "pr_createdAt": "2020-10-28T12:46:23Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1457", "timeline": [{"oid": "a9c2431e50c5c882112ddd831e54fdf5a3a4cf6d", "url": "https://github.com/wso2/product-microgateway/commit/a9c2431e50c5c882112ddd831e54fdf5a3a4cf6d", "message": "Refactor JWT token validation implementation\n\n* Move classes into proper packages\n* Add subscription data retrieval in startup\n* Add JWKS", "committedDate": "2020-10-28T03:31:00Z", "type": "commit"}, {"oid": "332d64ba3a5f79fb13e98d0c0b41f36fc6f4e1e2", "url": "https://github.com/wso2/product-microgateway/commit/332d64ba3a5f79fb13e98d0c0b41f36fc6f4e1e2", "message": "Add Data retrieval via JMS implementation", "committedDate": "2020-10-28T12:42:51Z", "type": "commit"}, {"oid": "6405a7dd18f7a0431e9d5beaaefd3912e6f06116", "url": "https://github.com/wso2/product-microgateway/commit/6405a7dd18f7a0431e9d5beaaefd3912e6f06116", "message": "Clean up code", "committedDate": "2020-10-28T12:44:02Z", "type": "commit"}, {"oid": "2533bb9448b01cef3aadb1830a3cf12955106636", "url": "https://github.com/wso2/product-microgateway/commit/2533bb9448b01cef3aadb1830a3cf12955106636", "message": "Add initial configuration model for the filter chain\n\n* Include a config file with basic configurations\n* Implement a config file reader", "committedDate": "2020-10-29T18:33:06Z", "type": "commit"}, {"oid": "519303828a664773f14b84f493e12aff46a462b5", "url": "https://github.com/wso2/product-microgateway/commit/519303828a664773f14b84f493e12aff46a462b5", "message": "Modify ssl connection factory creation.", "committedDate": "2020-10-29T18:43:41Z", "type": "commit"}, {"oid": "dc2c6a14d642b5d8b453d914895aefca3b00aeaa", "url": "https://github.com/wso2/product-microgateway/commit/dc2c6a14d642b5d8b453d914895aefca3b00aeaa", "message": "Fix runtime issues\n\n* Change the apim consumer key claim\n* Fix NPE when scope validation failure\n* Clean up configuration", "committedDate": "2020-10-29T19:30:52Z", "type": "commit"}, {"oid": "2d49970f6850f3af67d4d88611e598c0f958ae3b", "url": "https://github.com/wso2/product-microgateway/commit/2d49970f6850f3af67d4d88611e598c0f958ae3b", "message": "Fix all styling issues", "committedDate": "2020-10-29T20:08:36Z", "type": "commit"}, {"oid": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "url": "https://github.com/wso2/product-microgateway/commit/64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "message": "Enable failOnError for code analyzing", "committedDate": "2020-10-29T20:11:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgxMDgwMA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515810800", "bodyText": "Can remove or need to keep ???\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //    void addScope(ScopeEvent event);\n          \n          \n            \n            //\n          \n          \n            \n            //    void deleteScope(ScopeEvent event);", "author": "praminda", "createdAt": "2020-11-02T08:36:39Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ * /\n+ */\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+\n+\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+\n+/**\n+ * \n+ * Interface to call keymanager data maps using events\n+ *\n+ */\n+public interface KeyManagerDataService {\n+    \n+    void addOrUpdateApplication(ApplicationEvent event);\n+\n+    void addOrUpdateAPI(APIEvent event);\n+\n+    void addOrUpdateSubscription(SubscriptionEvent event);\n+\n+    void addOrUpdateApplicationKeyMapping(ApplicationRegistrationEvent event);\n+    \n+    void addOrUpdateSubscriptionPolicy(SubscriptionPolicyEvent event);\n+    \n+    void addOrUpdateApplicationPolicy(ApplicationPolicyEvent event);\n+    \n+    void addOrUpdateAPIPolicy(APIPolicyEvent policyEvent);\n+    \n+    void removeApplication(ApplicationEvent event);\n+\n+    void removeAPI(APIEvent event);\n+\n+    void removeSubscription(SubscriptionEvent event);\n+\n+    void removeApplicationKeyMapping(ApplicationRegistrationEvent event);\n+    \n+    void removeSubscriptionPolicy(SubscriptionPolicyEvent event);\n+    \n+    void removeApplicationPolicy(ApplicationPolicyEvent event);\n+\n+    void removeAPIPolicy(APIPolicyEvent policyEvent);\n+\n+//    void addScope(ScopeEvent event);\n+//\n+//    void deleteScope(ScopeEvent event);", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxMzM4OQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515913389", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied. See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:36:47Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/ApplicationRegistrationEvent.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxMzUyOA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515913528", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-11-02T11:37:09Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/ApplicationPolicyEvent.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.listener.events;\n+", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxMzY4OA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515913688", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied. See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:37:31Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/ApplicationPolicyEvent.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxMzg1NA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515913854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied. See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:37:54Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/ApplicationEvent.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNzkyNw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515917927", "bodyText": "license missing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.wso2.micro.gateway.filter.core.listener.events;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied. See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            package org.wso2.micro.gateway.filter.core.listener.events;", "author": "praminda", "createdAt": "2020-11-02T11:45:51Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/DeployAPIInGatewayEvent.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.wso2.micro.gateway.filter.core.listener.events;", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxODM2MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515918361", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * */\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:46:37Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/DeployAPIInGatewayEvent.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.wso2.micro.gateway.filter.core.listener.events;\n+\n+import java.util.Set;\n+\n+/**\n+ * Deploy API in Gateway Event\n+ * */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxODU3MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515918571", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied. See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:47:03Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/Event.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxOTM0MA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515919340", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:48:40Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/PolicyEvent.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxOTQyMA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515919420", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-11-02T11:48:51Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/PolicyEvent.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.listener.events;\n+", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxOTU4Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515919582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:49:08Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/APIPolicyEvent.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMDEzNA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515920134", "bodyText": "Missing license\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.wso2.micro.gateway.filter.core.listener.events;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            package org.wso2.micro.gateway.filter.core.listener.events;", "author": "praminda", "createdAt": "2020-11-02T11:50:15Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/ScopeEvent.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.wso2.micro.gateway.filter.core.listener.events;", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMDUwMQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515920501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:51:03Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/SubscriptionEvent.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMTMwMg==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515921302", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            \n          \n          \n            \n            package org.wso2.micro.gateway.filter.core.listener.events;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            \n          \n          \n            \n            package org.wso2.micro.gateway.filter.core.listener.events;", "author": "praminda", "createdAt": "2020-11-02T11:52:45Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/SubscriptionPolicyEvent.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.listener.events;\n+", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMTYzNQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515921635", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T11:53:29Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/ThrottlePolicyEvent.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMjM4Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515922382", "bodyText": "Can we pass a dto instead of lots of individual params", "author": "praminda", "createdAt": "2020-11-02T11:54:54Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/KeyValidator.java", "diffHunk": "@@ -198,35 +201,35 @@ private APIKeyValidationInfoDTO validateSubscriptionDetails(APIKeyValidationInfo\n                                 log.debug(\"Valid subscription not found for appId \" + app.getId() + \" and apiId \" + api\n                                         .getApiId());\n                             }\n-        //                            loadInfoFromRestAPIAndValidate(api, app, key, sub, context, version, consumerKey,\n-        //                                    keyManager, datastore, apiTenantDomain, infoDTO, tenantId);\n+                            loadInfoFromRestAPIAndValidate(api, app, key, sub, context, version, consumerKey,", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMzkxNA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515923914", "bodyText": "does this debug log serve any purpose, we throw an error from below line with same info.", "author": "praminda", "createdAt": "2020-11-02T11:58:07Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/jwt/JWTAuthenticator.java", "diffHunk": "@@ -97,21 +104,27 @@ public AuthenticationContext authenticate(RequestContext requestContext) throws\n \n                 // Validate subscriptions\n                 APIKeyValidationInfoDTO apiKeyValidationInfoDTO = new APIKeyValidationInfoDTO();\n+                MGWConfiguration configuration = ReferenceHolder.getInstance().getMGWConfiguration();\n+                TokenIssuerDto issuerDto = configuration.getJWTIssuers().get(jwtValidationInfo.getIssuer());\n                   //TODO: enable subscription validation\n-//                log.debug(\"Begin subscription validation via Key Manager: \" + jwtValidationInfo.getKeyManager());\n-//                apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(requestContext, jwtValidationInfo);\n-//\n-//                if (log.isDebugEnabled()) {\n-//                    log.debug(\"Subscription validation via Key Manager. Status: \" + apiKeyValidationInfoDTO\n-//                            .isAuthorized());\n-//                }\n-//                if (!apiKeyValidationInfoDTO.isAuthorized()) {\n-//                    log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-//                    throw new APISecurityException(apiKeyValidationInfoDTO.getValidationStatus(),\n-//                            \"User is NOT authorized to access the Resource. API Subscription validation failed.\");\n-//\n-//                }\n-//                // Validate scopes\n+                if (issuerDto.isValidateSubscriptions()) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Begin subscription validation via Key Manager: \" +\n+                                jwtValidationInfo.getKeyManager());\n+                    }\n+                    apiKeyValidationInfoDTO = validateSubscriptionUsingKeyManager(requestContext, jwtValidationInfo);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Subscription validation via Key Manager. Status: \" + apiKeyValidationInfoDTO\n+                                .isAuthorized());\n+                    }\n+                    if (!apiKeyValidationInfoDTO.isAuthorized()) {\n+                        log.debug(\"User is NOT authorized to access the Resource. API Subscription validation failed.\");", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNDcxOA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515924718", "bodyText": "is this todo resolved?", "author": "praminda", "createdAt": "2020-11-02T11:59:46Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/subscription/SubscriptionDataStoreImpl.java", "diffHunk": "@@ -100,8 +101,10 @@ private void initializeStore() {\n         this.appPolicyMap = new ConcurrentHashMap<>();\n         this.apiPolicyMap = new ConcurrentHashMap<>();\n         this.subscriptionMap = new ConcurrentHashMap<>();\n-        //TODO: Enable data loading tasks\n-        //initializeLoadingTasks();\n+        //TODO: Enable data loading tasks if event hub is enabled", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MDg3Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516680873", "bodyText": "yes... can be removed", "author": "menakaj", "createdAt": "2020-11-03T13:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNDcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNjI1OA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515926258", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T12:03:14Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/events/APIEvent.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNjQ4NA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515926484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T12:03:46Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/GatewayJMSMessageListener.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNjkwNw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515926907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *  in compliance with the License.\n          \n          \n            \n             *  You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T12:04:37Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNzEzOQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515927139", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * \n          \n          \n            \n             * Interface to call keymanager data maps using events\n          \n          \n            \n             *\n          \n          \n            \n             * Interface to call keymanager data maps using events", "author": "praminda", "createdAt": "2020-11-02T12:05:07Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ * /\n+ */\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+\n+\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+\n+/**\n+ * \n+ * Interface to call keymanager data maps using events\n+ *", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNzMwMw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515927303", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             *   WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             *   Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             *   in compliance with the License.\n          \n          \n            \n             *   You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             *  Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             *  software distributed under the License is distributed on an\n          \n          \n            \n             *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             *  KIND, either express or implied.  See the License for the\n          \n          \n            \n             *  specific language governing permissions and limitations\n          \n          \n            \n             *  under the License.\n          \n          \n            \n             * /\n          \n          \n            \n             */\n          \n          \n            \n            package org.wso2.micro.gateway.filter.core.keymgt;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            package org.wso2.micro.gateway.filter.core.keymgt;", "author": "praminda", "createdAt": "2020-11-02T12:05:29Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *   WSO2 Inc. licenses this file to you under the Apache License,\n+ *   Version 2.0 (the \"License\"); you may not use this file except\n+ *   in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ * /\n+ */\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyODE4NQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515928185", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * */\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T12:07:22Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/constants/ConfigConstants.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.constants;\n+\n+/**\n+ * This class holds the constant keys related to the Microgateway Configurations which will be read from the config file\n+ * or dynamically configured via the control plane.\n+ * */", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyODQ0Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515928446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n            *  Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n            *\n          \n          \n            \n            *  WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n            *  Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n            *  in compliance with the License.\n          \n          \n            \n            *  You may obtain a copy of the License at\n          \n          \n            \n            *\n          \n          \n            \n            *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n            *\n          \n          \n            \n            * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n            * software distributed under the License is distributed on an\n          \n          \n            \n            * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n            * KIND, either express or implied.  See the License for the\n          \n          \n            \n            * specific language governing permissions and limitations\n          \n          \n            \n            * under the License.\n          \n          \n            \n            */\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */", "author": "praminda", "createdAt": "2020-11-02T12:08:01Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/constants/APIStatus.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+*  Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*/", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyODc2NA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515928764", "bodyText": "possible check style failure\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Topic Names\n          \n          \n            \n                 * Topic Names.", "author": "praminda", "createdAt": "2020-11-02T12:08:43Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/constants/APIConstants.java", "diffHunk": "@@ -149,4 +153,49 @@ private SubscriptionValidationResources() {\n \n         }\n     }\n+\n+    /**\n+     * Supported event types\n+     */\n+    public enum EventType {\n+        API_CREATE,\n+        API_UPDATE,\n+        API_DELETE,\n+        API_LIFECYCLE_CHANGE,\n+        APPLICATION_CREATE,\n+        APPLICATION_UPDATE,\n+        APPLICATION_DELETE,\n+        APPLICATION_REGISTRATION_CREATE,\n+        POLICY_CREATE,\n+        POLICY_UPDATE,\n+        POLICY_DELETE,\n+        SUBSCRIPTIONS_CREATE,\n+        SUBSCRIPTIONS_UPDATE,\n+        SUBSCRIPTIONS_DELETE,\n+        SCOPE_CREATE,\n+        SCOPE_UPDATE,\n+        SCOPE_DELETE\n+    }\n+\n+    /**\n+     * Supported policy types\n+     */\n+    public enum PolicyType {\n+        API,\n+        APPLICATION,\n+        SUBSCRIPTION\n+    }\n+\n+    /**\n+     * Topic Names", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyOTA0MA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515929040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Supported policy types\n          \n          \n            \n                 * Supported policy types.", "author": "praminda", "createdAt": "2020-11-02T12:09:20Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/constants/APIConstants.java", "diffHunk": "@@ -149,4 +153,49 @@ private SubscriptionValidationResources() {\n \n         }\n     }\n+\n+    /**\n+     * Supported event types\n+     */\n+    public enum EventType {\n+        API_CREATE,\n+        API_UPDATE,\n+        API_DELETE,\n+        API_LIFECYCLE_CHANGE,\n+        APPLICATION_CREATE,\n+        APPLICATION_UPDATE,\n+        APPLICATION_DELETE,\n+        APPLICATION_REGISTRATION_CREATE,\n+        POLICY_CREATE,\n+        POLICY_UPDATE,\n+        POLICY_DELETE,\n+        SUBSCRIPTIONS_CREATE,\n+        SUBSCRIPTIONS_UPDATE,\n+        SUBSCRIPTIONS_DELETE,\n+        SCOPE_CREATE,\n+        SCOPE_UPDATE,\n+        SCOPE_DELETE\n+    }\n+\n+    /**\n+     * Supported policy types", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyOTExMg==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515929112", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Supported event types\n          \n          \n            \n                 * Supported event types.", "author": "praminda", "createdAt": "2020-11-02T12:09:27Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/constants/APIConstants.java", "diffHunk": "@@ -149,4 +153,49 @@ private SubscriptionValidationResources() {\n \n         }\n     }\n+\n+    /**\n+     * Supported event types", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyOTI4Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r515929287", "bodyText": "Suggested change", "author": "praminda", "createdAt": "2020-11-02T12:09:52Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/config/MGWConfiguration.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.config;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.wso2.micro.gateway.filter.core.constants.ConfigConstants;\n+import org.wso2.micro.gateway.filter.core.dto.EventHubConfigurationDto;\n+import org.wso2.micro.gateway.filter.core.dto.JWKSConfigurationDTO;\n+import org.wso2.micro.gateway.filter.core.dto.TokenIssuerDto;\n+import org.wso2.micro.gateway.filter.core.exception.MGWException;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration holder class for Microgateway\n+ */\n+public class MGWConfiguration {\n+\n+    private static final Logger logger = LogManager.getLogger(MGWConfiguration.class);\n+\n+    private static MGWConfiguration mgwConfiguration;\n+    private static Toml configToml;\n+    private static Map<String, TokenIssuerDto> issuersMap;\n+    private static EventHubConfigurationDto eventHubConfiguration;\n+    private static KeyStore trustStore = null;\n+\n+    public MGWConfiguration() throws MGWException {\n+        try {\n+            init();\n+        } catch (KeyStoreException e) {\n+            throw new MGWException(\"Error while loading configuration from file\", e);\n+        }\n+    }\n+\n+    public static MGWConfiguration getInstance() throws MGWException {\n+        if (mgwConfiguration != null) {\n+            return mgwConfiguration;\n+        }\n+        mgwConfiguration = new MGWConfiguration();\n+        return mgwConfiguration;\n+    }\n+\n+\n+    /**\n+     * Initialize the configuration provider class by reading the Mgw Configuration file.\n+     */\n+    private void init() throws KeyStoreException {\n+        InputStream configFile = MGWConfiguration.class.getClassLoader().getResourceAsStream(\"mgw-config.toml\");\n+        configToml = new Toml().read(configFile);\n+\n+        //Load Client Trust Store\n+        loadTrustStore();\n+\n+        // Read jwt token configuration\n+        populateJWTIssuerConfiguration();\n+\n+        // Set Event Hub related configuration.\n+        populateEventHubConfiguration();\n+    }\n+\n+    private void populateJWTIssuerConfiguration() throws KeyStoreException {\n+        issuersMap = new HashMap<>();\n+        List<Object> jwtIssuers = configToml.getList(ConfigConstants.JWT_TOKEN_CONFIG);\n+        for (Object jwtIssuer : jwtIssuers) {\n+            Map<String, Object> issuer = (Map<String, Object>) jwtIssuer;\n+            TokenIssuerDto issuerDto = new TokenIssuerDto((String) issuer.get(ConfigConstants.JWT_TOKEN_ISSUER));\n+\n+            JWKSConfigurationDTO jwksConfigurationDTO = new JWKSConfigurationDTO();\n+            jwksConfigurationDTO.setEnabled(StringUtils.isNotEmpty(\n+                    (String) issuer.get(ConfigConstants.JWT_TOKEN_JWKS_URL)));\n+            jwksConfigurationDTO.setUrl((String) issuer.get(ConfigConstants.JWT_TOKEN_JWKS_URL));\n+            issuerDto.setJwksConfigurationDTO(jwksConfigurationDTO);\n+\n+            String certificateAlias = (String) issuer.get(ConfigConstants.JWT_TOKEN_CERTIFICATE_ALIAS);\n+            if (trustStore.getCertificate(certificateAlias) != null) {\n+                Certificate issuerCertificate = trustStore.getCertificate(certificateAlias);\n+                issuerDto.setCertificate(issuerCertificate);\n+            }\n+\n+            issuerDto.setConsumerKeyClaim((String) issuer.get(ConfigConstants.JWT_TOKEN_CONSUMER_KEY_CLAIM));\n+            issuerDto.setValidateSubscriptions((boolean) issuer.get(ConfigConstants.JWT_TOKEN_VALIDATE_SUBSCRIPTIONS));\n+            issuersMap.put((String) issuer.get(ConfigConstants.JWT_TOKEN_ISSUER), issuerDto);\n+        }\n+    }\n+\n+    private void populateEventHubConfiguration() {\n+        eventHubConfiguration = new EventHubConfigurationDto();\n+        eventHubConfiguration.setEnabled(configToml.getBoolean(ConfigConstants.EVENT_HUB_ENABLE));\n+        eventHubConfiguration.setServiceUrl(configToml.getString(ConfigConstants.EVENT_HUB_SERVICE_URL));\n+        eventHubConfiguration.setUsername(configToml.getString(ConfigConstants.EVENT_HUB_USERNAME));\n+        eventHubConfiguration.setPassword(configToml.getString(ConfigConstants.EVENT_HUB_PASSWORD).toCharArray());\n+        EventHubConfigurationDto.EventHubReceiverConfiguration receiverConfiguration =\n+                new EventHubConfigurationDto.EventHubReceiverConfiguration();\n+        Properties properties = new Properties();\n+        properties.setProperty(ConfigConstants.EVENT_HUB_EVENT_LISTENING_ENDPOINT,\n+                configToml.getString(ConfigConstants.EVENT_HUB_EVENT_LISTENING_ENDPOINT));\n+        receiverConfiguration.setJmsConnectionParameters(properties);\n+        eventHubConfiguration.setEventHubReceiverConfiguration(receiverConfiguration);\n+    }\n+\n+    private void loadTrustStore() {\n+        String trustStoreLocation = configToml.getString(ConfigConstants.MGW_TRUST_STORE_LOCATION);\n+        String trustStorePassword = configToml.getString(ConfigConstants.MGW_TRUST_STORE_PASSWORD);;\n+        if (trustStoreLocation != null && trustStorePassword != null) {\n+            try {\n+                InputStream inputStream = new FileInputStream(new File(trustStoreLocation));\n+                trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+                trustStore.load(inputStream, trustStorePassword.toCharArray());\n+            } catch (IOException | KeyStoreException | CertificateException | NoSuchAlgorithmException e) {\n+                logger.error(\"Error in loading trust store.\", e);\n+            }\n+        } else {\n+            logger.error(\"Error in loading trust store. Configurations are not set.\");\n+        }\n+    }\n+\n+    /**\n+     * Get the issuer configuration for the provided issuer. Returns null if the config not found.\n+     * @return : JWTIssuerConfig object.\n+     */\n+    public Map<String, TokenIssuerDto> getJWTIssuers() {\n+        return issuersMap;\n+    }\n+\n+    public EventHubConfigurationDto getEventHubConfiguration() {\n+        return eventHubConfiguration;\n+    }\n+\n+    public KeyStore getTrustStore() {\n+        return trustStore;\n+    }\n+\n+", "originalCommit": "64f4c52cda99c0dc342ff5fb343c9f380fbd10ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "url": "https://github.com/wso2/product-microgateway/commit/2ac503f5c23656fd37c6afc15286a914dd0dc533", "message": "Update filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataService.java\n\nCo-authored-by: Praminda <pramindabj@gmail.com>", "committedDate": "2020-11-02T12:23:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyMjY5Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516422697", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Configuration holder class for Microgateway\n          \n          \n            \n             * Configuration holder class for Microgateway.", "author": "praminda", "createdAt": "2020-11-03T04:29:05Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/config/MGWConfiguration.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.config;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.wso2.micro.gateway.filter.core.constants.ConfigConstants;\n+import org.wso2.micro.gateway.filter.core.dto.EventHubConfigurationDto;\n+import org.wso2.micro.gateway.filter.core.dto.JWKSConfigurationDTO;\n+import org.wso2.micro.gateway.filter.core.dto.TokenIssuerDto;\n+import org.wso2.micro.gateway.filter.core.exception.MGWException;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration holder class for Microgateway", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNDExNw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516424117", "bodyText": "Looks like your want this to be a singleton. In that case constructor should be private\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public MGWConfiguration() throws MGWException {\n          \n          \n            \n                private MGWConfiguration() throws MGWException {", "author": "praminda", "createdAt": "2020-11-03T04:36:17Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/config/MGWConfiguration.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.config;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.wso2.micro.gateway.filter.core.constants.ConfigConstants;\n+import org.wso2.micro.gateway.filter.core.dto.EventHubConfigurationDto;\n+import org.wso2.micro.gateway.filter.core.dto.JWKSConfigurationDTO;\n+import org.wso2.micro.gateway.filter.core.dto.TokenIssuerDto;\n+import org.wso2.micro.gateway.filter.core.exception.MGWException;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration holder class for Microgateway\n+ */\n+public class MGWConfiguration {\n+\n+    private static final Logger logger = LogManager.getLogger(MGWConfiguration.class);\n+\n+    private static MGWConfiguration mgwConfiguration;\n+    private static Toml configToml;\n+    private static Map<String, TokenIssuerDto> issuersMap;\n+    private static EventHubConfigurationDto eventHubConfiguration;\n+    private static KeyStore trustStore = null;\n+\n+    public MGWConfiguration() throws MGWException {", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNTI2NA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516425264", "bodyText": "Shall we use toml lib to parse config model to a DTO rather than manually parsing it", "author": "praminda", "createdAt": "2020-11-03T04:42:01Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/config/MGWConfiguration.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.config;\n+\n+import com.moandjiezana.toml.Toml;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.wso2.micro.gateway.filter.core.constants.ConfigConstants;\n+import org.wso2.micro.gateway.filter.core.dto.EventHubConfigurationDto;\n+import org.wso2.micro.gateway.filter.core.dto.JWKSConfigurationDTO;\n+import org.wso2.micro.gateway.filter.core.dto.TokenIssuerDto;\n+import org.wso2.micro.gateway.filter.core.exception.MGWException;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Configuration holder class for Microgateway\n+ */\n+public class MGWConfiguration {\n+\n+    private static final Logger logger = LogManager.getLogger(MGWConfiguration.class);\n+\n+    private static MGWConfiguration mgwConfiguration;\n+    private static Toml configToml;\n+    private static Map<String, TokenIssuerDto> issuersMap;\n+    private static EventHubConfigurationDto eventHubConfiguration;\n+    private static KeyStore trustStore = null;\n+\n+    public MGWConfiguration() throws MGWException {\n+        try {\n+            init();\n+        } catch (KeyStoreException e) {\n+            throw new MGWException(\"Error while loading configuration from file\", e);\n+        }\n+    }\n+\n+    public static MGWConfiguration getInstance() throws MGWException {\n+        if (mgwConfiguration != null) {\n+            return mgwConfiguration;\n+        }\n+        mgwConfiguration = new MGWConfiguration();\n+        return mgwConfiguration;\n+    }\n+\n+\n+    /**\n+     * Initialize the configuration provider class by reading the Mgw Configuration file.\n+     */\n+    private void init() throws KeyStoreException {\n+        InputStream configFile = MGWConfiguration.class.getClassLoader().getResourceAsStream(\"mgw-config.toml\");\n+        configToml = new Toml().read(configFile);\n+\n+        //Load Client Trust Store\n+        loadTrustStore();", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNTQxMw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516425413", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String MGW_TRUST_STORE_TYPE = \"truststore.location\";\n          \n          \n            \n                public static final String MGW_TRUST_STORE_TYPE = \"truststore.type\";", "author": "praminda", "createdAt": "2020-11-03T04:42:51Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/constants/ConfigConstants.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.constants;\n+\n+/**\n+ * This class holds the constant keys related to the Microgateway Configurations which will be read from the config file\n+ * or dynamically configured via the control plane.\n+ * */\n+public class ConfigConstants {\n+    // JWT Token Config\n+    public static final String JWT_TOKEN_CONFIG = \"jwtTokenConfig\";\n+    public static final String JWT_TOKEN_ISSUER = \"issuer\";\n+    public static final String JWT_TOKEN_CERTIFICATE_ALIAS = \"certificateAlias\";\n+    public static final String JWT_TOKEN_JWKS_URL = \"jwksURL\";\n+    public static final String JWT_TOKEN_VALIDATE_SUBSCRIPTIONS = \"validateSubscription\";\n+    public static final String JWT_TOKEN_CONSUMER_KEY_CLAIM = \"consumerKeyClaim\";\n+    public static final String JWT_TOKEN_CLAIM_MAPPER_CLASS_NAME = \"claimMapperClassName\";\n+    public static final String JWT_TOKEN_ENABLE_REMOTE_USER_CLAIM_RETRIEVAL = \"remoteUserClaimRetrievalEnabled\";\n+    public static final String JWT_TOKEN_CLAIMS = \"claims\";\n+\n+    // Event hub configuration\n+    public static final String EVENT_HUB_ENABLE = \"apim.eventHub.enable\";\n+    public static final String EVENT_HUB_SERVICE_URL = \"apim.eventHub.serviceUrl\";\n+    public static final String EVENT_HUB_USERNAME = \"apim.eventHub.username\";\n+    public static final String EVENT_HUB_PASSWORD = \"apim.eventHub.password\";\n+    public static final String EVENT_HUB_EVENT_LISTENING_ENDPOINT = \"apim.eventHub.eventListeningEndpoints\";\n+\n+    //KeyStore and Trust Store configuration\n+    public static final String MGW_KEY_STORE_LOCATION = \"keystore.location\";\n+    public static final String MGW_KEY_STORE_TYPE = \"keystore.type\";\n+    public static final String MGW_KEY_STORE_PASSWORD = \"keystore.password\";\n+    public static final String MGW_TRUST_STORE_LOCATION = \"truststore.location\";\n+    public static final String MGW_TRUST_STORE_TYPE = \"truststore.location\";", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNTc0Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516425747", "bodyText": "shouldn't we use this as a singleton?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MGWConfiguration mgwConfiguration = new MGWConfiguration();\n          \n          \n            \n                    MGWConfiguration mgwConfiguration = MGWConfiguration.getInstance();", "author": "praminda", "createdAt": "2020-11-03T04:44:22Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/grpc/server/AuthServer.java", "diffHunk": "@@ -65,21 +64,32 @@ public static void main(String[] args) throws Exception {\n                 .workerEventLoopGroup(workerGroup).addService(new ExtAuthService())\n                 .channelType(NioServerSocketChannel.class).executor(executor).build();\n \n-        // Start the server\n-        server.start();\n-        loadTrustStore();\n-        logger.info(\"Sever started Listening in port : \" + 8081);\n+        // Load configurations\n+        KeyManagerDataService keyManagerDataService = new KeyManagerDataServiceImpl();\n+        MGWConfiguration mgwConfiguration = new MGWConfiguration();", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNjAyMw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516426023", "bodyText": "lets not commit this local change and keep the default so other can change this locally and try.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String apiPath = \"/Users/menakajayawardena/WSO2/git/microgateway/product-microgateway/resources/apis\";\n          \n          \n            \n                    String apiPath = \"/home/ubuntu/apis/\";", "author": "praminda", "createdAt": "2020-11-03T04:45:52Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/grpc/server/AuthServer.java", "diffHunk": "@@ -65,21 +64,32 @@ public static void main(String[] args) throws Exception {\n                 .workerEventLoopGroup(workerGroup).addService(new ExtAuthService())\n                 .channelType(NioServerSocketChannel.class).executor(executor).build();\n \n-        // Start the server\n-        server.start();\n-        loadTrustStore();\n-        logger.info(\"Sever started Listening in port : \" + 8081);\n+        // Load configurations\n+        KeyManagerDataService keyManagerDataService = new KeyManagerDataServiceImpl();\n+        MGWConfiguration mgwConfiguration = new MGWConfiguration();\n+        ReferenceHolder.getInstance().setKeyManagerDataService(keyManagerDataService);\n+        ReferenceHolder.getInstance().setMGWConfiguration(mgwConfiguration);\n         //TODO: Add API is only for testing this has to come via the rest API.\n         addAPI();\n         CacheProvider.init();\n+\n+        // Start the server\n+        server.start();\n+        logger.info(\"Sever started Listening in port : \" + 8081);\n+\n+        if (mgwConfiguration.getEventHubConfiguration().isEnabled()) {\n+            logger.info(\"Event Hub configuration enabled... Starting JMS listener...\");\n+            GatewayJMSMessageListener.init(mgwConfiguration.getEventHubConfiguration());\n+        }\n+        //TODO: Get the tenant domain from config\n         SubscriptionDataHolder.getInstance().registerTenantSubscriptionStore(\"carbon.super\");\n \n         // Don't exit the main thread. Wait until server is terminated.\n         server.awaitTermination();\n     }\n \n     private static void addAPI() {\n-        String apiPath = \"/home/ubuntu/apis/\";\n+        String apiPath = \"/Users/menakajayawardena/WSO2/git/microgateway/product-microgateway/resources/apis\";", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNzU4Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516427587", "bodyText": "Should we call validate here. Same will happen from https://github.com/wso2/product-microgateway/pull/1457/files#diff-ebab8453f1d0f7f17f6aa3c877a5ccee3f196ba530fa2eb9ad9a0c4724d2d9a9R236 also", "author": "praminda", "createdAt": "2020-11-03T04:53:44Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/KeyValidator.java", "diffHunk": "@@ -362,4 +365,71 @@ private boolean isResourcePathMatching(String resourceString, URLMapping urlMapp\n \n         return false;\n     }\n+\n+    private void loadInfoFromRestAPIAndValidate(API api, Application app, ApplicationKeyMapping key, Subscription sub,\n+                                                String context, String version, String consumerKey, String keyManager,\n+                                                SubscriptionDataStore datastore, String apiTenantDomain,\n+                                                APIKeyValidationInfoDTO infoDTO, int tenantId) {\n+        // TODO Load using a single single rest api.\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Loading missing information in the datastore by invoking the Rest API\");\n+        }\n+        try {\n+            // only loading if the api is not found previously\n+            if (api == null) {\n+                api = new SubscriptionDataLoaderImpl().getApi(context, version);\n+                if (api != null && api.getApiId() != 0) {\n+                    // load to the memory\n+                    log.debug(\"Loading API to the in-memory datastore.\");\n+                    datastore.addOrUpdateAPI(api);\n+                }\n+            }\n+            // only loading if the key is not found previously\n+            if (key == null) {\n+                key = new SubscriptionDataLoaderImpl().getKeyMapping(consumerKey);\n+                if (key != null && !StringUtils.isEmpty(key.getConsumerKey())) {\n+                    // load to the memory\n+                    log.debug(\"Loading Keymapping to the in-memory datastore.\");\n+                    datastore.addOrUpdateApplicationKeyMapping(key);\n+                }\n+            }\n+            // check whether still api and keys are not found\n+            if (api == null || key == null) {\n+                // invalid request. nothing to do. return without any further processing\n+                if (log.isDebugEnabled()) {\n+                    if (api == null) {\n+                        log.debug(\"API not found for the \" + context + \" \" + version);\n+                    }\n+                    if (key == null) {\n+                        log.debug(\"KeyMapping not found for the \" + consumerKey);\n+                    }\n+                }\n+                return;\n+            } else {\n+                //go further and load missing objects\n+                if (app == null) {\n+                    app = new SubscriptionDataLoaderImpl().getApplicationById(key.getApplicationId());\n+                    if (app != null && app.getId() != null && app.getId() != 0) {\n+                        // load to the memory\n+                        log.debug(\"Loading Application to the in-memory datastore. applicationId = \" + app.getId());\n+                        datastore.addOrUpdateApplication(app);\n+                    } else {\n+                        log.debug(\"Application not found. applicationId = \" + key.getApplicationId());\n+                    }\n+                }\n+                if (app != null) {\n+                    sub = new SubscriptionDataLoaderImpl().getSubscriptionById(Integer.toString(api.getApiId()),\n+                            Integer.toString(app.getId()));\n+                    if (sub != null && !StringUtils.isEmpty(sub.getSubscriptionId())) {\n+                        // load to the memory\n+                        log.debug(\"Loading Subscription to the in-memory datastore.\");\n+                        datastore.addOrUpdateSubscription(sub);\n+                        validate(infoDTO, apiTenantDomain, tenantId, datastore, api, key, app, sub, keyManager);", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyODA0Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516428042", "bodyText": "Can we remove these lines or comment?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //        this.jwtTransformer.loadConfiguration(tokenIssuerDto);\n          \n          \n            \n            //        this.tokenIssuer = tokenIssuerDto;", "author": "praminda", "createdAt": "2020-11-03T04:55:47Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/jwt/validator/JWTValidator.java", "diffHunk": "@@ -98,16 +100,10 @@ public JWTValidator() {\n     }\n \n     public void loadTokenIssuerConfiguration() {\n-        String issuer = \"https://localhost:9443/oauth2/token\"; //TODO: get the issuer\n-        TokenIssuerDto tokenIssuerDto = new TokenIssuerDto(issuer);\n-        tokenIssuerDto.setConsumerKeyClaim(\"azp\");\n-        tokenIssuerDto.setPublicKey(readPublicKey());\n-        JWKSConfigurationDTO jwksConfigurationDTO = new JWKSConfigurationDTO();\n-        jwksConfigurationDTO.setEnabled(false);\n-        tokenIssuerDto.setJwksConfigurationDTO(jwksConfigurationDTO);\n+        tokenIssuers = ReferenceHolder.getInstance().getMGWConfiguration().getJWTIssuers();\n         this.jwtTransformer = new DefaultJWTTransformer();\n-        this.jwtTransformer.loadConfiguration(tokenIssuerDto);\n-        this.tokenIssuer = tokenIssuerDto;\n+//        this.jwtTransformer.loadConfiguration(tokenIssuerDto);\n+//        this.tokenIssuer = tokenIssuerDto;", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzNDI4MQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516434281", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Key Manager Data Service Implementation\n          \n          \n            \n             * Key Manager Data Service Implementation.", "author": "praminda", "createdAt": "2020-11-03T05:26:38Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.models.API;\n+import org.wso2.micro.gateway.filter.core.models.ApiPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Application;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationKeyMapping;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Subscription;\n+import org.wso2.micro.gateway.filter.core.models.SubscriptionPolicy;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataHolder;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataStore;\n+\n+/**\n+ * Key Manager Data Service Implementation", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NDQxOQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516484419", "bodyText": "Can remove???\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            //    @Override\n          \n          \n            \n            //    public void addScope(ScopeEvent event) {\n          \n          \n            \n            //\n          \n          \n            \n            //        Scope scope = new Scope();\n          \n          \n            \n            //        scope.setName(event.getName());\n          \n          \n            \n            //        scope.setRoles(event.getRoles());\n          \n          \n            \n            //        scope.setDisplayName(event.getDisplayName());\n          \n          \n            \n            //        scope.setDescription(event.getDescription());\n          \n          \n            \n            //        scope.setTimeStamp(event.getTimeStamp());\n          \n          \n            \n            //        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n          \n          \n            \n            //                .getTenantSubscriptionStore(event.getTenantDomain());\n          \n          \n            \n            //        if (store == null) {\n          \n          \n            \n            //            if (log.isDebugEnabled()) {\n          \n          \n            \n            //                log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" is not loaded\");\n          \n          \n            \n            //            }\n          \n          \n            \n            //            return;\n          \n          \n            \n            //        }\n          \n          \n            \n            //        store.addOrUpdateScope(scope);\n          \n          \n            \n            //    }\n          \n          \n            \n            //\n          \n          \n            \n            //    @Override\n          \n          \n            \n            //    public void deleteScope(ScopeEvent event) {\n          \n          \n            \n            //\n          \n          \n            \n            //        Scope scope = new Scope();\n          \n          \n            \n            //        scope.setName(event.getName());\n          \n          \n            \n            //        scope.setTimeStamp(event.getTimeStamp());\n          \n          \n            \n            //        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n          \n          \n            \n            //                .getTenantSubscriptionStore(event.getTenantDomain());\n          \n          \n            \n            //        if (store == null) {\n          \n          \n            \n            //            if (log.isDebugEnabled()) {\n          \n          \n            \n            //                log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" is not loaded\");\n          \n          \n            \n            //            }\n          \n          \n            \n            //            return;\n          \n          \n            \n            //        }\n          \n          \n            \n            //        store.deleteScope(scope);\n          \n          \n            \n            //    }", "author": "praminda", "createdAt": "2020-11-03T08:12:48Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.models.API;\n+import org.wso2.micro.gateway.filter.core.models.ApiPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Application;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationKeyMapping;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Subscription;\n+import org.wso2.micro.gateway.filter.core.models.SubscriptionPolicy;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataHolder;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataStore;\n+\n+/**\n+ * Key Manager Data Service Implementation\n+ */\n+public class KeyManagerDataServiceImpl implements KeyManagerDataService {\n+\n+    private static final Log log = LogFactory.getLog(KeyManagerDataServiceImpl.class);\n+\n+    @Override\n+    public void addOrUpdateApplication(ApplicationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        store.addOrUpdateApplication(getApplicationFromApplicationEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateAPI(APIEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update API in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateAPIWithUrlTemplates(getAPIFromAPIEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateSubscription(SubscriptionEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Subscription in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateSubscription(getSubscriptionFromSubscriptionEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateApplicationKeyMapping(ApplicationRegistrationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application keymapping in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateApplicationKeyMapping(getApplicationKeyMappingFromApplicationRegistrationEvent(event));\n+\n+    }\n+\n+    @Override\n+    public void addOrUpdateSubscriptionPolicy(SubscriptionPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Subscription Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateSubscriptionPolicy(getSubscriptionPolicyFromSubscriptionPolicyEvent(event));\n+\n+    }\n+\n+    @Override\n+    public void addOrUpdateApplicationPolicy(ApplicationPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateApplicationPolicy(getApplicationPolicyFromApplicationPolicyEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateAPIPolicy(APIPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update API Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        store.addOrUpdateApiPolicy(getAPIPolicyFromAPIPolicyEvent(event));\n+    }\n+\n+    @Override\n+    public void removeApplication(ApplicationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Remove Application in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.removeApplication(getApplicationFromApplicationEvent(event));\n+    }\n+\n+    @Override\n+    public void removeAPI(APIEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Remove API in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.removeAPI(getAPIFromAPIEvent(event));\n+    }\n+\n+    @Override\n+    public void removeSubscription(SubscriptionEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Remove Subscription in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.removeSubscription(getSubscriptionFromSubscriptionEvent(event));\n+    }\n+\n+    @Override\n+    public void removeApplicationKeyMapping(ApplicationRegistrationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Remove ApplicationKey Mapping in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.removeApplicationKeyMapping(getApplicationKeyMappingFromApplicationRegistrationEvent(event));\n+    }\n+\n+    @Override\n+    public void removeSubscriptionPolicy(SubscriptionPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Remove Subscription Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.removeSubscriptionPolicy(getSubscriptionPolicyFromSubscriptionPolicyEvent(event));\n+    }\n+\n+    @Override\n+    public void removeApplicationPolicy(ApplicationPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Remove Application Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.removeApplicationPolicy(getApplicationPolicyFromApplicationPolicyEvent(event));\n+    }\n+\n+    @Override\n+    public void removeAPIPolicy(APIPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Remove API Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.removeApiPolicy(getAPIPolicyFromAPIPolicyEvent(event));\n+    }\n+\n+//    @Override\n+//    public void addScope(ScopeEvent event) {\n+//\n+//        Scope scope = new Scope();\n+//        scope.setName(event.getName());\n+//        scope.setRoles(event.getRoles());\n+//        scope.setDisplayName(event.getDisplayName());\n+//        scope.setDescription(event.getDescription());\n+//        scope.setTimeStamp(event.getTimeStamp());\n+//        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+//                .getTenantSubscriptionStore(event.getTenantDomain());\n+//        if (store == null) {\n+//            if (log.isDebugEnabled()) {\n+//                log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" is not loaded\");\n+//            }\n+//            return;\n+//        }\n+//        store.addOrUpdateScope(scope);\n+//    }\n+//\n+//    @Override\n+//    public void deleteScope(ScopeEvent event) {\n+//\n+//        Scope scope = new Scope();\n+//        scope.setName(event.getName());\n+//        scope.setTimeStamp(event.getTimeStamp());\n+//        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+//                .getTenantSubscriptionStore(event.getTenantDomain());\n+//        if (store == null) {\n+//            if (log.isDebugEnabled()) {\n+//                log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" is not loaded\");\n+//            }\n+//            return;\n+//        }\n+//        store.deleteScope(scope);\n+//    }", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NDg2NA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516484864", "bodyText": "store == null should be added", "author": "praminda", "createdAt": "2020-11-03T08:13:50Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.models.API;\n+import org.wso2.micro.gateway.filter.core.models.ApiPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Application;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationKeyMapping;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Subscription;\n+import org.wso2.micro.gateway.filter.core.models.SubscriptionPolicy;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataHolder;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataStore;\n+\n+/**\n+ * Key Manager Data Service Implementation\n+ */\n+public class KeyManagerDataServiceImpl implements KeyManagerDataService {\n+\n+    private static final Log log = LogFactory.getLog(KeyManagerDataServiceImpl.class);\n+\n+    @Override\n+    public void addOrUpdateApplication(ApplicationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        store.addOrUpdateApplication(getApplicationFromApplicationEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateAPI(APIEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update API in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateAPIWithUrlTemplates(getAPIFromAPIEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateSubscription(SubscriptionEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Subscription in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateSubscription(getSubscriptionFromSubscriptionEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateApplicationKeyMapping(ApplicationRegistrationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application keymapping in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateApplicationKeyMapping(getApplicationKeyMappingFromApplicationRegistrationEvent(event));\n+\n+    }\n+\n+    @Override\n+    public void addOrUpdateSubscriptionPolicy(SubscriptionPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Subscription Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateSubscriptionPolicy(getSubscriptionPolicyFromSubscriptionPolicyEvent(event));\n+\n+    }\n+\n+    @Override\n+    public void addOrUpdateApplicationPolicy(ApplicationPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateApplicationPolicy(getApplicationPolicyFromApplicationPolicyEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateAPIPolicy(APIPolicyEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update API Policy in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        store.addOrUpdateApiPolicy(getAPIPolicyFromAPIPolicyEvent(event));", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NTA5MA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516485090", "bodyText": "store==null should be added", "author": "praminda", "createdAt": "2020-11-03T08:14:15Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.models.API;\n+import org.wso2.micro.gateway.filter.core.models.ApiPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Application;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationKeyMapping;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Subscription;\n+import org.wso2.micro.gateway.filter.core.models.SubscriptionPolicy;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataHolder;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataStore;\n+\n+/**\n+ * Key Manager Data Service Implementation\n+ */\n+public class KeyManagerDataServiceImpl implements KeyManagerDataService {\n+\n+    private static final Log log = LogFactory.getLog(KeyManagerDataServiceImpl.class);\n+\n+    @Override\n+    public void addOrUpdateApplication(ApplicationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NTI5Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516485296", "bodyText": "This is not a valid error in mgw context. there is no tenant loading", "author": "praminda", "createdAt": "2020-11-03T08:14:40Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/keymgt/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.keymgt;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.models.API;\n+import org.wso2.micro.gateway.filter.core.models.ApiPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Application;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationKeyMapping;\n+import org.wso2.micro.gateway.filter.core.models.ApplicationPolicy;\n+import org.wso2.micro.gateway.filter.core.models.Subscription;\n+import org.wso2.micro.gateway.filter.core.models.SubscriptionPolicy;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataHolder;\n+import org.wso2.micro.gateway.filter.core.subscription.SubscriptionDataStore;\n+\n+/**\n+ * Key Manager Data Service Implementation\n+ */\n+public class KeyManagerDataServiceImpl implements KeyManagerDataService {\n+\n+    private static final Log log = LogFactory.getLog(KeyManagerDataServiceImpl.class);\n+\n+    @Override\n+    public void addOrUpdateApplication(ApplicationEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update Application in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        store.addOrUpdateApplication(getApplicationFromApplicationEvent(event));\n+    }\n+\n+    @Override\n+    public void addOrUpdateAPI(APIEvent event) {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Add or Update API in datastore in tenant \" + event.getTenantDomain());\n+        }\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NTQ3NA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516485474", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The JMS listener implementation\n          \n          \n            \n             * The JMS listener implementation.", "author": "praminda", "createdAt": "2020-11-03T08:15:01Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/listener/GatewayJMSMessageListener.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.listener;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.micro.gateway.filter.core.common.ReferenceHolder;\n+import org.wso2.micro.gateway.filter.core.constants.APIConstants;\n+import org.wso2.micro.gateway.filter.core.constants.APIConstants.EventType;\n+import org.wso2.micro.gateway.filter.core.constants.APIConstants.PolicyType;\n+import org.wso2.micro.gateway.filter.core.constants.APIStatus;\n+import org.wso2.micro.gateway.filter.core.constants.ConfigConstants;\n+import org.wso2.micro.gateway.filter.core.dto.EventHubConfigurationDto;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.APIPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationPolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.ApplicationRegistrationEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.PolicyEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionEvent;\n+import org.wso2.micro.gateway.filter.core.listener.events.SubscriptionPolicyEvent;\n+\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.jms.JMSException;\n+import javax.jms.MapMessage;\n+import javax.jms.Message;\n+import javax.jms.MessageListener;\n+import javax.jms.Topic;\n+import javax.jms.TopicConnection;\n+import javax.jms.TopicConnectionFactory;\n+import javax.jms.TopicSession;\n+import javax.jms.TopicSubscriber;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+\n+/**\n+ * The JMS listener implementation", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4OTE1Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516489153", "bodyText": "is todo complete?", "author": "praminda", "createdAt": "2020-11-03T08:22:26Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/oauth/OAuthAuthenticator.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.security.oauth;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.wso2.micro.gateway.filter.core.api.RequestContext;\n+import org.wso2.micro.gateway.filter.core.security.AccessTokenInfo;\n+import org.wso2.micro.gateway.filter.core.security.AuthenticationContext;\n+import org.wso2.micro.gateway.filter.core.security.Authenticator;\n+import org.wso2.micro.gateway.filter.core.security.jwt.validator.JWTValidator;\n+import org.wso2.micro.gateway.filter.core.util.FilterUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * An API consumer authenticator which authenticates user requests using\n+ * the OAuth protocol. This implementation uses some default token/delimiter\n+ * values to parse OAuth headers, but if needed these settings can be overridden\n+ * through the APIManagerConfiguration.\n+ *\n+ * //TODO: Complete the implementation.", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4OTM5NA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516489394", "bodyText": "can remove?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //    protected APIKeyValidator keyValidator;", "author": "praminda", "createdAt": "2020-11-03T08:22:57Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/oauth/OAuthAuthenticator.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.security.oauth;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.wso2.micro.gateway.filter.core.api.RequestContext;\n+import org.wso2.micro.gateway.filter.core.security.AccessTokenInfo;\n+import org.wso2.micro.gateway.filter.core.security.AuthenticationContext;\n+import org.wso2.micro.gateway.filter.core.security.Authenticator;\n+import org.wso2.micro.gateway.filter.core.security.jwt.validator.JWTValidator;\n+import org.wso2.micro.gateway.filter.core.util.FilterUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * An API consumer authenticator which authenticates user requests using\n+ * the OAuth protocol. This implementation uses some default token/delimiter\n+ * values to parse OAuth headers, but if needed these settings can be overridden\n+ * through the APIManagerConfiguration.\n+ *\n+ * //TODO: Complete the implementation.\n+ */\n+public class OAuthAuthenticator implements Authenticator {\n+    private static final Log log = LogFactory.getLog(OAuthAuthenticator.class);\n+    private List<String> keyManagerList;\n+\n+//    protected APIKeyValidator keyValidator;", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5MDQzMQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516490431", "bodyText": "redo the comment", "author": "praminda", "createdAt": "2020-11-03T08:25:00Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/oauth/OAuthAuthenticator.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.security.oauth;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.wso2.micro.gateway.filter.core.api.RequestContext;\n+import org.wso2.micro.gateway.filter.core.security.AccessTokenInfo;\n+import org.wso2.micro.gateway.filter.core.security.AuthenticationContext;\n+import org.wso2.micro.gateway.filter.core.security.Authenticator;\n+import org.wso2.micro.gateway.filter.core.security.jwt.validator.JWTValidator;\n+import org.wso2.micro.gateway.filter.core.util.FilterUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * An API consumer authenticator which authenticates user requests using\n+ * the OAuth protocol. This implementation uses some default token/delimiter\n+ * values to parse OAuth headers, but if needed these settings can be overridden\n+ * through the APIManagerConfiguration.\n+ *\n+ * //TODO: Complete the implementation.\n+ */\n+public class OAuthAuthenticator implements Authenticator {\n+    private static final Log log = LogFactory.getLog(OAuthAuthenticator.class);\n+    private List<String> keyManagerList;\n+\n+//    protected APIKeyValidator keyValidator;\n+    protected JWTValidator jwtValidator;\n+\n+    private String kmEndpoint = \"https://localhost:9443/oauth2\";\n+    private String securityHeader = HttpHeaders.AUTHORIZATION;\n+    private String defaultAPIHeader = \"WSO2_AM_API_DEFAULT_VERSION\";\n+    private String consumerKeyHeaderSegment = \"Bearer\";\n+    private String oauthHeaderSplitter = \",\";\n+    private String consumerKeySegmentDelimiter = \" \";\n+    private String securityContextHeader;\n+    private boolean removeOAuthHeadersFromOutMessage = true;\n+    private boolean removeDefaultAPIHeaderFromOutMessage = true;\n+    private String clientDomainHeader = \"referer\";\n+    private String requestOrigin;\n+    private String remainingAuthHeader;\n+    private boolean isMandatory;\n+\n+    public OAuthAuthenticator() {\n+    }\n+\n+    public OAuthAuthenticator(String authorizationHeader, boolean isMandatory, boolean removeOAuthHeader,\n+                              List<String> keyManagerList) {\n+        this.securityHeader = authorizationHeader;\n+        this.removeOAuthHeadersFromOutMessage = removeOAuthHeader;\n+        this.isMandatory = isMandatory;\n+        this.keyManagerList = keyManagerList;\n+    }\n+\n+    @Override\n+    public boolean canAuthenticate(RequestContext requestContext) {\n+        String token = requestContext.getHeaders().get(\"authorization\");\n+        return !token.contains(\"\\\\.\");\n+    }\n+\n+    @Override\n+    public AuthenticationContext authenticate(RequestContext requestContext) {\n+        String token = requestContext.getHeaders().get(\"authorization\");\n+        AccessTokenInfo accessTokenInfo = new AccessTokenInfo();\n+\n+        if (token.toLowerCase().contains(\"bearer\")) {\n+            token = token.split(\"\\\\s\")[1];\n+        }\n+\n+        try {\n+            IntrospectInfo introspectInfo = validateToken(token);\n+            accessTokenInfo.setAccessToken(token);\n+            accessTokenInfo.setConsumerKey(introspectInfo.getClientId());\n+        } catch (IOException e) {\n+            throw new SecurityException(e);\n+        }\n+\n+        return new AuthenticationContext();\n+    }\n+\n+    /**\n+     * Extracts the customer API key from the OAuth Authentication header. If the required\n+     * security header is present in the provided map, it will be removed from the map\n+     * after processing.\n+     *\n+     * @param headersMap Map of HTTP headers\n+     * @return extracted customer key value or null if the required header is not present\n+     */\n+    public String extractCustomerKeyFromAuthHeader(Map headersMap) {\n+\n+        //From 1.0.7 version of this component onwards remove the OAuth authorization header from", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5MTEzMw==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516491133", "bodyText": "can switch to normal for loop since j is required", "author": "praminda", "createdAt": "2020-11-03T08:26:18Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/oauth/OAuthAuthenticator.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.security.oauth;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.wso2.micro.gateway.filter.core.api.RequestContext;\n+import org.wso2.micro.gateway.filter.core.security.AccessTokenInfo;\n+import org.wso2.micro.gateway.filter.core.security.AuthenticationContext;\n+import org.wso2.micro.gateway.filter.core.security.Authenticator;\n+import org.wso2.micro.gateway.filter.core.security.jwt.validator.JWTValidator;\n+import org.wso2.micro.gateway.filter.core.util.FilterUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * An API consumer authenticator which authenticates user requests using\n+ * the OAuth protocol. This implementation uses some default token/delimiter\n+ * values to parse OAuth headers, but if needed these settings can be overridden\n+ * through the APIManagerConfiguration.\n+ *\n+ * //TODO: Complete the implementation.\n+ */\n+public class OAuthAuthenticator implements Authenticator {\n+    private static final Log log = LogFactory.getLog(OAuthAuthenticator.class);\n+    private List<String> keyManagerList;\n+\n+//    protected APIKeyValidator keyValidator;\n+    protected JWTValidator jwtValidator;\n+\n+    private String kmEndpoint = \"https://localhost:9443/oauth2\";\n+    private String securityHeader = HttpHeaders.AUTHORIZATION;\n+    private String defaultAPIHeader = \"WSO2_AM_API_DEFAULT_VERSION\";\n+    private String consumerKeyHeaderSegment = \"Bearer\";\n+    private String oauthHeaderSplitter = \",\";\n+    private String consumerKeySegmentDelimiter = \" \";\n+    private String securityContextHeader;\n+    private boolean removeOAuthHeadersFromOutMessage = true;\n+    private boolean removeDefaultAPIHeaderFromOutMessage = true;\n+    private String clientDomainHeader = \"referer\";\n+    private String requestOrigin;\n+    private String remainingAuthHeader;\n+    private boolean isMandatory;\n+\n+    public OAuthAuthenticator() {\n+    }\n+\n+    public OAuthAuthenticator(String authorizationHeader, boolean isMandatory, boolean removeOAuthHeader,\n+                              List<String> keyManagerList) {\n+        this.securityHeader = authorizationHeader;\n+        this.removeOAuthHeadersFromOutMessage = removeOAuthHeader;\n+        this.isMandatory = isMandatory;\n+        this.keyManagerList = keyManagerList;\n+    }\n+\n+    @Override\n+    public boolean canAuthenticate(RequestContext requestContext) {\n+        String token = requestContext.getHeaders().get(\"authorization\");\n+        return !token.contains(\"\\\\.\");\n+    }\n+\n+    @Override\n+    public AuthenticationContext authenticate(RequestContext requestContext) {\n+        String token = requestContext.getHeaders().get(\"authorization\");\n+        AccessTokenInfo accessTokenInfo = new AccessTokenInfo();\n+\n+        if (token.toLowerCase().contains(\"bearer\")) {\n+            token = token.split(\"\\\\s\")[1];\n+        }\n+\n+        try {\n+            IntrospectInfo introspectInfo = validateToken(token);\n+            accessTokenInfo.setAccessToken(token);\n+            accessTokenInfo.setConsumerKey(introspectInfo.getClientId());\n+        } catch (IOException e) {\n+            throw new SecurityException(e);\n+        }\n+\n+        return new AuthenticationContext();\n+    }\n+\n+    /**\n+     * Extracts the customer API key from the OAuth Authentication header. If the required\n+     * security header is present in the provided map, it will be removed from the map\n+     * after processing.\n+     *\n+     * @param headersMap Map of HTTP headers\n+     * @return extracted customer key value or null if the required header is not present\n+     */\n+    public String extractCustomerKeyFromAuthHeader(Map headersMap) {\n+\n+        //From 1.0.7 version of this component onwards remove the OAuth authorization header from\n+        // the message is configurable. So we dont need to remove headers at this point.\n+        String authHeader = (String) headersMap.get(securityHeader);\n+        if (authHeader == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"OAuth2 Authentication: Expected authorization header with the name '\"\n+                        .concat(securityHeader).concat(\"' was not found.\"));\n+            }\n+            return null;\n+        }\n+\n+        ArrayList<String> remainingAuthHeaders = new ArrayList<>();\n+        String consumerKey = null;\n+        boolean consumerkeyFound = false;\n+        String[] headers = authHeader.split(oauthHeaderSplitter);\n+        if (headers != null) {\n+            for (int i = 0; i < headers.length; i++) {\n+                String[] elements = headers[i].split(consumerKeySegmentDelimiter);\n+                if (elements != null && elements.length > 1) {\n+                    int j = 0;\n+                    boolean isConsumerKeyHeaderAvailable = false;\n+                    for (String element : elements) {", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5MTY5OQ==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516491699", "bodyText": "credentials hard coded", "author": "praminda", "createdAt": "2020-11-03T08:27:21Z", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/security/oauth/OAuthAuthenticator.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.filter.core.security.oauth;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.wso2.micro.gateway.filter.core.api.RequestContext;\n+import org.wso2.micro.gateway.filter.core.security.AccessTokenInfo;\n+import org.wso2.micro.gateway.filter.core.security.AuthenticationContext;\n+import org.wso2.micro.gateway.filter.core.security.Authenticator;\n+import org.wso2.micro.gateway.filter.core.security.jwt.validator.JWTValidator;\n+import org.wso2.micro.gateway.filter.core.util.FilterUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * An API consumer authenticator which authenticates user requests using\n+ * the OAuth protocol. This implementation uses some default token/delimiter\n+ * values to parse OAuth headers, but if needed these settings can be overridden\n+ * through the APIManagerConfiguration.\n+ *\n+ * //TODO: Complete the implementation.\n+ */\n+public class OAuthAuthenticator implements Authenticator {\n+    private static final Log log = LogFactory.getLog(OAuthAuthenticator.class);\n+    private List<String> keyManagerList;\n+\n+//    protected APIKeyValidator keyValidator;\n+    protected JWTValidator jwtValidator;\n+\n+    private String kmEndpoint = \"https://localhost:9443/oauth2\";\n+    private String securityHeader = HttpHeaders.AUTHORIZATION;\n+    private String defaultAPIHeader = \"WSO2_AM_API_DEFAULT_VERSION\";\n+    private String consumerKeyHeaderSegment = \"Bearer\";\n+    private String oauthHeaderSplitter = \",\";\n+    private String consumerKeySegmentDelimiter = \" \";\n+    private String securityContextHeader;\n+    private boolean removeOAuthHeadersFromOutMessage = true;\n+    private boolean removeDefaultAPIHeaderFromOutMessage = true;\n+    private String clientDomainHeader = \"referer\";\n+    private String requestOrigin;\n+    private String remainingAuthHeader;\n+    private boolean isMandatory;\n+\n+    public OAuthAuthenticator() {\n+    }\n+\n+    public OAuthAuthenticator(String authorizationHeader, boolean isMandatory, boolean removeOAuthHeader,\n+                              List<String> keyManagerList) {\n+        this.securityHeader = authorizationHeader;\n+        this.removeOAuthHeadersFromOutMessage = removeOAuthHeader;\n+        this.isMandatory = isMandatory;\n+        this.keyManagerList = keyManagerList;\n+    }\n+\n+    @Override\n+    public boolean canAuthenticate(RequestContext requestContext) {\n+        String token = requestContext.getHeaders().get(\"authorization\");\n+        return !token.contains(\"\\\\.\");\n+    }\n+\n+    @Override\n+    public AuthenticationContext authenticate(RequestContext requestContext) {\n+        String token = requestContext.getHeaders().get(\"authorization\");\n+        AccessTokenInfo accessTokenInfo = new AccessTokenInfo();\n+\n+        if (token.toLowerCase().contains(\"bearer\")) {\n+            token = token.split(\"\\\\s\")[1];\n+        }\n+\n+        try {\n+            IntrospectInfo introspectInfo = validateToken(token);\n+            accessTokenInfo.setAccessToken(token);\n+            accessTokenInfo.setConsumerKey(introspectInfo.getClientId());\n+        } catch (IOException e) {\n+            throw new SecurityException(e);\n+        }\n+\n+        return new AuthenticationContext();\n+    }\n+\n+    /**\n+     * Extracts the customer API key from the OAuth Authentication header. If the required\n+     * security header is present in the provided map, it will be removed from the map\n+     * after processing.\n+     *\n+     * @param headersMap Map of HTTP headers\n+     * @return extracted customer key value or null if the required header is not present\n+     */\n+    public String extractCustomerKeyFromAuthHeader(Map headersMap) {\n+\n+        //From 1.0.7 version of this component onwards remove the OAuth authorization header from\n+        // the message is configurable. So we dont need to remove headers at this point.\n+        String authHeader = (String) headersMap.get(securityHeader);\n+        if (authHeader == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"OAuth2 Authentication: Expected authorization header with the name '\"\n+                        .concat(securityHeader).concat(\"' was not found.\"));\n+            }\n+            return null;\n+        }\n+\n+        ArrayList<String> remainingAuthHeaders = new ArrayList<>();\n+        String consumerKey = null;\n+        boolean consumerkeyFound = false;\n+        String[] headers = authHeader.split(oauthHeaderSplitter);\n+        if (headers != null) {\n+            for (int i = 0; i < headers.length; i++) {\n+                String[] elements = headers[i].split(consumerKeySegmentDelimiter);\n+                if (elements != null && elements.length > 1) {\n+                    int j = 0;\n+                    boolean isConsumerKeyHeaderAvailable = false;\n+                    for (String element : elements) {\n+                        if (!\"\".equals(element.trim())) {\n+                            if (consumerKeyHeaderSegment.equals(elements[j].trim())) {\n+                                isConsumerKeyHeaderAvailable = true;\n+                            } else if (isConsumerKeyHeaderAvailable) {\n+                                consumerKey = removeLeadingAndTrailing(elements[j].trim());\n+                                consumerkeyFound = true;\n+                            }\n+                        }\n+                        j++;\n+                    }\n+                }\n+                if (!consumerkeyFound) {\n+                    remainingAuthHeaders.add(headers[i]);\n+                } else {\n+                    consumerkeyFound = false;\n+                }\n+            }\n+        }\n+        remainingAuthHeader = String.join(oauthHeaderSplitter, remainingAuthHeaders);\n+        return consumerKey;\n+    }\n+\n+    private String removeLeadingAndTrailing(String base) {\n+        String result = base;\n+\n+        if (base.startsWith(\"\\\"\") || base.endsWith(\"\\\"\")) {\n+            result = base.replace(\"\\\"\", \"\");\n+        }\n+        return result.trim();\n+    }\n+\n+    public String getChallengeString() {\n+        return \"Bearer realm=\\\"WSO2 API Manager\\\"\";\n+    }\n+\n+\n+    /**\n+     * Validate the token via the token introspection.\n+     *\n+     * @param accessToken : The access token which needs to be validated\n+     * @return The IntrospectInfo object\n+     * @throws IOException : If any error occurred during invoking the introspect endpoint.\n+     */\n+    private IntrospectInfo validateToken(String accessToken) throws IOException {\n+        URL url = new URL(kmEndpoint + \"/introspect\");\n+        try (CloseableHttpClient httpClient = (CloseableHttpClient) FilterUtils.getHttpClient(url.getProtocol())) {\n+            HttpPost introspectRequest = new HttpPost(kmEndpoint + \"/introspect\");\n+            List<NameValuePair> params = new ArrayList<>();\n+            NameValuePair token = new BasicNameValuePair(\"token\", accessToken);\n+            params.add(token);\n+            introspectRequest.setEntity(new UrlEncodedFormEntity(params));\n+            introspectRequest.setHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n+            introspectRequest.setHeader(\"Authorization\", \"Basic \" +", "originalCommit": "2ac503f5c23656fd37c6afc15286a914dd0dc533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a6699b1dae67e74dfe9eeb64056740b1f5641f55", "url": "https://github.com/wso2/product-microgateway/commit/a6699b1dae67e74dfe9eeb64056740b1f5641f55", "message": "Fix License header formatting\n\nCo-authored-by: Praminda <pramindabj@gmail.com>", "committedDate": "2020-11-03T13:35:19Z", "type": "commit"}, {"oid": "951b2a6dbc784dfc7efff7342d9ff77c074f7559", "url": "https://github.com/wso2/product-microgateway/commit/951b2a6dbc784dfc7efff7342d9ff77c074f7559", "message": "Format code\n\nCo-authored-by: Praminda <pramindabj@gmail.com>", "committedDate": "2020-11-03T13:35:49Z", "type": "commit"}, {"oid": "e53ce5265cbf477c58ec796c67f7f9b50d371adc", "url": "https://github.com/wso2/product-microgateway/commit/e53ce5265cbf477c58ec796c67f7f9b50d371adc", "message": "Apply suggestions from code review\n\nCo-authored-by: Praminda <pramindabj@gmail.com>", "committedDate": "2020-11-03T13:50:02Z", "type": "commit"}, {"oid": "fbc6bf2445b4d8df217419851d7a3c1d703657dc", "url": "https://github.com/wso2/product-microgateway/commit/fbc6bf2445b4d8df217419851d7a3c1d703657dc", "message": "Apply suggestions from code review\n\nCo-authored-by: Praminda <pramindabj@gmail.com>", "committedDate": "2020-11-03T13:54:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMDcxOA==", "url": "https://github.com/wso2/product-microgateway/pull/1457#discussion_r516720718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            location = \"/Users/menakajayawardena/WSO2/git/microgateway/product-microgateway/filter-core/src/main/resources/client-truststore.jks\"\n          \n          \n            \n            location = \"/home/ubuntu/client-truststore.jks\"", "author": "praminda", "createdAt": "2020-11-03T14:45:37Z", "path": "filter-core/src/main/resources/mgw-config.toml", "diffHunk": "@@ -0,0 +1,66 @@\n+#Key Store Configuration\n+[keystore]\n+location = \"wso2carbon.jks\"\n+type = \"jks\"\n+password = \"wso2carbon\"\n+\n+#Trust store configuration\n+[truststore]\n+location = \"/Users/menakajayawardena/WSO2/git/microgateway/product-microgateway/filter-core/src/main/resources/client-truststore.jks\"", "originalCommit": "fbc6bf2445b4d8df217419851d7a3c1d703657dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "39e66a5344f240e7e7fe2a0025cf3e13677de553", "url": "https://github.com/wso2/product-microgateway/commit/39e66a5344f240e7e7fe2a0025cf3e13677de553", "message": "Change the truststore file location.\n\nCo-authored-by: Praminda <pramindabj@gmail.com>", "committedDate": "2020-11-03T14:47:34Z", "type": "commit"}]}