{"pr_number": 1260, "pr_title": "Add Unit test structure for Envoy mgw oasparser package ", "pr_createdAt": "2020-06-02T11:38:40Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1260", "timeline": [{"oid": "8c88a2deb7e28a685b366b82c8a2a8f17b7a95ec", "url": "https://github.com/wso2/product-microgateway/commit/8c88a2deb7e28a685b366b82c8a2a8f17b7a95ec", "message": "bug fix open api3 vendor extenstion reading", "committedDate": "2020-06-02T11:29:12Z", "type": "commit"}, {"oid": "b0e27f3ed97bed59b3d99d5f3e7d0a0e09f00853", "url": "https://github.com/wso2/product-microgateway/commit/b0e27f3ed97bed59b3d99d5f3e7d0a0e09f00853", "message": "add unit test for oasparser", "committedDate": "2020-06-02T11:29:12Z", "type": "commit"}, {"oid": "dabe7a77f74fc2375f11a623b7746c09670c2978", "url": "https://github.com/wso2/product-microgateway/commit/dabe7a77f74fc2375f11a623b7746c09670c2978", "message": "modify testcase", "committedDate": "2020-06-02T11:29:12Z", "type": "commit"}, {"oid": "3859237d4896fc92390fe67acc97ed78b2bec008", "url": "https://github.com/wso2/product-microgateway/commit/3859237d4896fc92390fe67acc97ed78b2bec008", "message": "add license to the file", "committedDate": "2020-06-02T11:29:12Z", "type": "commit"}, {"oid": "84234247174e44841cc884c60940cf4a97bb0e6b", "url": "https://github.com/wso2/product-microgateway/commit/84234247174e44841cc884c60940cf4a97bb0e6b", "message": "add new line at end of the file", "committedDate": "2020-06-02T11:29:12Z", "type": "commit"}, {"oid": "d933f73de10026dbab0cfbbf0944c66d577bb763", "url": "https://github.com/wso2/product-microgateway/commit/d933f73de10026dbab0cfbbf0944c66d577bb763", "message": "add new line at end of the file", "committedDate": "2020-06-02T11:29:12Z", "type": "commit"}, {"oid": "417df1eb19e6cb114d990dbc0cca3873bff4595d", "url": "https://github.com/wso2/product-microgateway/commit/417df1eb19e6cb114d990dbc0cca3873bff4595d", "message": "remove unused struct", "committedDate": "2020-06-02T11:29:12Z", "type": "commit"}, {"oid": "d75db189e887355658c36886768a93634283253d", "url": "https://github.com/wso2/product-microgateway/commit/d75db189e887355658c36886768a93634283253d", "message": "add a seperate package for unit tests", "committedDate": "2020-06-10T10:39:15Z", "type": "commit"}, {"oid": "24df04047a262d6feda48645b759ad1f953562d5", "url": "https://github.com/wso2/product-microgateway/commit/24df04047a262d6feda48645b759ad1f953562d5", "message": "format the swagger contents", "committedDate": "2020-06-17T18:51:03Z", "type": "commit"}, {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e", "url": "https://github.com/wso2/product-microgateway/commit/b2589049e46729a16296213f3e904b64eebe5f3e", "message": "format the swagger contents", "committedDate": "2020-06-17T19:01:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NjU2OQ==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r441746569", "bodyText": "Reduce the spacing", "author": "menakaj", "createdAt": "2020-06-17T18:31:45Z", "path": "internal/pkg/oasparser/utills/openApiUtills_test.go", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package utills_test\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/wso2/micro-gw/internal/pkg/oasparser/utills\"\n+\t\"testing\"\n+)\n+\n+func TestFindSwaggerVersion(t *testing.T) {\n+\n+\ttype findSwaggerVersionTestItem struct {\n+\t\tinputSwagger   string\n+\t\tresult  string\n+\t\tmessage string\n+\t}\n+\n+\tdataItems := []findSwaggerVersionTestItem {\n+\t\t{", "originalCommit": "d75db189e887355658c36886768a93634283253d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ4MTYwMw==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r569481603", "bodyText": "This is fixed in ac710a1", "author": "chashikajw", "createdAt": "2021-02-03T14:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NjU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2ODgwMg==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r566568802", "bodyText": "If the commented out line is not needed, please remove the empty else block", "author": "chathuranga95", "createdAt": "2021-01-29T04:15:18Z", "path": "internal/pkg/oasparser/models/apiDefinition/openApi.go", "diffHunk": "@@ -34,72 +35,71 @@ func (swagger *MgwSwagger) SetInfoOpenApi(swagger3 openapi3.Swagger) {\n \t\tswagger.title = swagger3.Info.Title\n \t\tswagger.version = swagger3.Info.Version\n \t}\n-\tswagger.vendorExtensible = swagger3.Extensions\n-\tswagger.resources = SetResourcesOpenApi3(swagger3)\n+\n+\tswagger.vendorExtensible = converExtensibletoReadableFormat(swagger3.ExtensionProps)\n+\tswagger.resources = SetResourcesOpenApi(swagger3)\n \n \tif IsServerUrlIsAvailable(swagger3) {\n \t\tfor i, _ := range swagger3.Servers {\n \t\t\tendpoint := getHostandBasepathandPort(swagger3.Servers[i].URL)\n-\t\t\tswagger.productionUrls = append(swagger.productionUrls,endpoint)\n+\t\t\tswagger.productionUrls = append(swagger.productionUrls, endpoint)\n \t\t}\n-\n \t}\n }\n \n func setOperationOpenApi(path string, pathtype string, operation *openapi3.Operation) Resource {\n \tvar resource Resource\n-\tresource = Resource{\n-\t\tpath: path,\n-\t\tpathtype:   pathtype,\n-\t\tiD:      operation.OperationID,\n-\t\tsummary: operation.Summary,\n-\t\t//Schemes: operation.,\n-\t\ttags: operation.Tags,\n-\t\t//Security: operation.Security.,\n-\t\tvendorExtensible: operation.Extensions}\n+\tif operation != nil {\n+\t\tresource = Resource{\n+\t\t\tpath:     path,\n+\t\t\tpathtype: pathtype,\n+\t\t\tiD:       operation.OperationID,\n+\t\t\tsummary:  operation.Summary,\n+\t\t\tdescription: operation.Description,\n+\t\t\t//Schemes: operation.,\n+\t\t\t//tags: operation.Tags,\n+\t\t\t//Security: operation.Security.,\n+\t\t\tvendorExtensible: converExtensibletoReadableFormat(operation.ExtensionProps)}\n+\t}\n \treturn resource\n }\n \n-\n-func SetResourcesOpenApi3(openApi openapi3.Swagger) []Resource {\n+func SetResourcesOpenApi(openApi openapi3.Swagger) []Resource {\n \tvar resources []Resource\n-\n-\tfor path, pathItem := range openApi.Paths {\n-\t\tvar resource Resource\n-\t\tif pathItem.Get != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"get\", pathItem.Get)\n-\t\t} else if pathItem.Post != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"post\", pathItem.Post)\n-\t\t} else if pathItem.Put != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"put\", pathItem.Put)\n-\t\t} else if pathItem.Delete != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"delete\", pathItem.Delete)\n-\t\t} else if pathItem.Head != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"head\", pathItem.Head)\n-\t\t} else if pathItem.Patch != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"patch\", pathItem.Patch)\n-\t\t} else {\n-\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\tif openApi.Paths != nil {\n+\t\tfor path, pathItem := range openApi.Paths {\n+\t\t\tvar resource Resource\n+\t\t\tif pathItem.Get != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"get\", pathItem.Get)\n+\t\t\t} else if pathItem.Post != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"post\", pathItem.Post)\n+\t\t\t} else if pathItem.Put != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"put\", pathItem.Put)\n+\t\t\t} else if pathItem.Delete != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"delete\", pathItem.Delete)\n+\t\t\t} else if pathItem.Head != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"head\", pathItem.Head)\n+\t\t\t} else if pathItem.Patch != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"patch\", pathItem.Patch)\n+\t\t\t} else {\n+\t\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\t\t\t}", "originalCommit": "b2589049e46729a16296213f3e904b64eebe5f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MDk1MA==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r569450950", "bodyText": "This is already removed", "author": "chashikajw", "createdAt": "2021-02-03T14:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2ODgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2OTMyMw==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r566569323", "bodyText": "If the commented out line is not needed, please remove the empty else block.\nFix same in other applicable places as well.", "author": "chathuranga95", "createdAt": "2021-01-29T04:17:18Z", "path": "internal/pkg/oasparser/models/apiDefinition/swagger.go", "diffHunk": "@@ -35,45 +35,51 @@ func (swagger *MgwSwagger) SetInfoSwagger(swagger2 spec.Swagger) {\n \n \tif swagger2.Host != \"\" {\n \t\tendpoint := getHostandBasepathandPort(swagger2.Host + swagger2.BasePath)\n-\t\tswagger.productionUrls = append(swagger.productionUrls,endpoint)\n+\t\tswagger.productionUrls = append(swagger.productionUrls, endpoint)\n \t}\n }\n \n func SetResourcesSwagger(swagger2 spec.Swagger) []Resource {\n \tvar resources []Resource\n-\tfor path, _ := range swagger2.Paths.Paths {\n-\t\tvar pathItem = swagger2.Paths.Paths[path].PathItemProps\n-\t\tvar resource Resource\n-\t\tif pathItem.Get != nil {\n-\t\t\tresource = setOperationSwagger(path, \"get\", pathItem.Get)\n-\t\t} else if pathItem.Post != nil {\n-\t\t\tresource = setOperationSwagger(path, \"post\", pathItem.Post)\n-\t\t} else if pathItem.Put != nil {\n-\t\t\tresource = setOperationSwagger(path, \"put\", pathItem.Put)\n-\t\t} else if pathItem.Delete != nil {\n-\t\t\tresource = setOperationSwagger(path, \"delete\", pathItem.Delete)\n-\t\t} else if pathItem.Head != nil {\n-\t\t\tresource = setOperationSwagger(path, \"head\", pathItem.Head)\n-\t\t} else if pathItem.Patch != nil {\n-\t\t\tresource = setOperationSwagger(path, \"patch\", pathItem.Patch)\n-\t\t} else {\n-\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\tif swagger2.Paths != nil {\n+\t\tfor path, _ := range swagger2.Paths.Paths {\n+\t\t\tvar pathItem = swagger2.Paths.Paths[path].PathItemProps\n+\t\t\tvar resource Resource\n+\t\t\tif pathItem.Get != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"get\", pathItem.Get)\n+\t\t\t} else if pathItem.Post != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"post\", pathItem.Post)\n+\t\t\t} else if pathItem.Put != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"put\", pathItem.Put)\n+\t\t\t} else if pathItem.Delete != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"delete\", pathItem.Delete)\n+\t\t\t} else if pathItem.Head != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"head\", pathItem.Head)\n+\t\t\t} else if pathItem.Patch != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"patch\", pathItem.Patch)\n+\t\t\t} else {\n+\t\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\t\t\t}", "originalCommit": "b2589049e46729a16296213f3e904b64eebe5f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MTQzNw==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r569451437", "bodyText": "This is already fixed", "author": "chashikajw", "createdAt": "2021-02-03T14:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2OTMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2OTk3OA==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r566569978", "bodyText": "Empty if block.", "author": "chathuranga95", "createdAt": "2021-01-29T04:19:43Z", "path": "internal/pkg/oasparser/swaggerOperator/swaggerOperator.go", "diffHunk": "@@ -32,65 +32,73 @@ func GenerateMgwSwagger(location string) ([]apiDefinition.MgwSwagger, error) {\n \n \tfiles, err := ioutil.ReadDir(location)\n \tif err != nil {\n-\t\tlog.Fatal(\"Error reading\",location,\"directory:\", err)\n+\t\tlog.Fatal(\"Error reading\", location, \"directory:\", err)\n \t}\n \n \tfor _, f := range files {\n-\t\tvar mgwSwagger apiDefinition.MgwSwagger\n+\n \t\topenApif, err := os.Open(location + f.Name())\n \n \t\t// if we os.Open returns an error then handle it\n \t\tif err != nil {\n \t\t\tlog.Fatal(\"Error opening a api yaml file:\", err)\n \t\t}\n \t\t//fmt.Println(\"Successfully Opened open api file\",f.Name())\n-\t\tlog.Println(\"Successfully Opened open api file\",f.Name())\n+\t\tlog.Println(\"Successfully Opened open api file\", f.Name())\n \n \t\t// defer the closing of our jsonFile so that we can parse it later on\n \t\tdefer openApif.Close()\n \n \t\t// read our opened jsonFile as a byte array.\n \t\tjsn, _ := ioutil.ReadAll(openApif)\n \n-\t\tapiJsn, err := utills.ToJSON(jsn)\n-\t\tif err != nil {\n-\t\t\t//log.Fatal(\"Error converting api file to json:\", err)\n+\t\tmgwSwagger := GetMgwSwagger(jsn)\n+\t\tmgwSwaggers = append(mgwSwaggers, mgwSwagger)\n \n-\t\t}\n+\t}\n+\treturn mgwSwaggers, err\n+}\n+\n+func GetMgwSwagger(apiContent []byte) apiDefinition.MgwSwagger {\n+\tvar mgwSwagger apiDefinition.MgwSwagger\n \n-\t\tswaggerVerison, err := utills.FindSwaggerVersion(apiJsn)\n+\tapiJsn, err := utills.ToJSON(apiContent)\n+\tif err != nil {\n+\t\t//log.Fatal(\"Error converting api file to json:\", err)\n+\t}", "originalCommit": "b2589049e46729a16296213f3e904b64eebe5f3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ4MTA3Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r569481073", "bodyText": "This is already fixed", "author": "chashikajw", "createdAt": "2021-02-03T14:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2OTk3OA=="}], "type": "inlineReview"}]}