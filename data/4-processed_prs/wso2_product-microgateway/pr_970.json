{"pr_number": 970, "pr_title": "Application and Transport security", "pr_createdAt": "2020-02-06T07:01:50Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/970", "timeline": [{"oid": "61e764f259a4c827b4ab563e6d0b9c529a1e08e5", "url": "https://github.com/wso2/product-microgateway/commit/61e764f259a4c827b4ab563e6d0b9c529a1e08e5", "message": "Add http/https enable/disable with x-wso2-transport extension.", "committedDate": "2020-02-07T09:20:46Z", "type": "forcePushed"}, {"oid": "51254307142291402cd5da3bbd547f5f0bb5eb60", "url": "https://github.com/wso2/product-microgateway/commit/51254307142291402cd5da3bbd547f5f0bb5eb60", "message": "Improve", "committedDate": "2020-02-07T09:17:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MjUwNA==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r376882504", "bodyText": "Rename variable\nSuggestion: extensionSecurity", "author": "praminda", "createdAt": "2020-02-10T06:15:36Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/rest/ext/ExtendedAPI.java", "diffHunk": "@@ -30,6 +32,8 @@\n     private String mgwApiSecurity = null;\n     //Scopes\n     private String mgwApiScope = null;\n+    //support apim application level security\n+    private List<String> apiSecurityByExtension = null;", "originalCommit": "51254307142291402cd5da3bbd547f5f0bb5eb60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMTAzMw==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r377001033", "bodyText": "Renamed to applicationSecurity c023aba", "author": "AmaliMatharaarachchi", "createdAt": "2020-02-10T11:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4MjUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NDI4NQ==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r376884285", "bodyText": "openAPI.getExtensions() Keep this in a variable and refer it.", "author": "praminda", "createdAt": "2020-02-10T06:24:33Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -702,11 +718,25 @@ private static void validateSingleResourceInterceptors(Operation operation, Stri\n      */\n     private static void setMgwAPISecurityAndScopes(ExtendedAPI api, OpenAPI openAPI) {\n         String[] securitySchemasAndScopes = generateMgwSecuritySchemasAndScopes(openAPI.getSecurity());\n+        if (openAPI.getExtensions() != null && !openAPI.getExtensions().isEmpty() &&", "originalCommit": "51254307142291402cd5da3bbd547f5f0bb5eb60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMTIzNQ==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r377001235", "bodyText": "Fixed. Thanks c023aba", "author": "AmaliMatharaarachchi", "createdAt": "2020-02-10T11:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NDI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NDMzOQ==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r376884339", "bodyText": "Use two statements to casting and calling the method", "author": "praminda", "createdAt": "2020-02-10T06:24:46Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -702,11 +718,25 @@ private static void validateSingleResourceInterceptors(Operation operation, Stri\n      */\n     private static void setMgwAPISecurityAndScopes(ExtendedAPI api, OpenAPI openAPI) {\n         String[] securitySchemasAndScopes = generateMgwSecuritySchemasAndScopes(openAPI.getSecurity());\n+        if (openAPI.getExtensions() != null && !openAPI.getExtensions().isEmpty() &&\n+                openAPI.getExtensions().containsKey(OpenAPIConstants.APPLICATION_SECURITY)) {\n+            logger.debug(OpenAPIConstants.APPLICATION_SECURITY + \" extension found in the API Definition\");\n+            try {\n+                api.setAPISecurityByExtension((List<String>) ((Map<String, Object>) openAPI.getExtensions()", "originalCommit": "51254307142291402cd5da3bbd547f5f0bb5eb60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NTU3Nw==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r376885577", "bodyText": "setAuthProviders()???", "author": "praminda", "createdAt": "2020-02-10T06:30:36Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -964,26 +997,38 @@ private static boolean isResourceEpUnavailable(Operation operation) {\n         return false;\n     }\n \n-    public static List<String> getAuthProviders(String schemas) {\n+    public static List<String> getAuthProviders(String schemas, List<String> apiSecurityByExtension) {\n         List<String> authProviders = new ArrayList<>();\n-        boolean basic = false;\n-        boolean oauth2 = false;\n-        if (schemas != null) {\n-            String[] schemasArray = schemas.trim().split(\"\\\\s*,\\\\s*\");\n-            for (String s : schemasArray) {\n-                if (s.equalsIgnoreCase(APISecurity.basic.name())) {\n-                    authProviders.add(APISecurity.basic.name());\n-                } else if (s.equalsIgnoreCase(APISecurity.apikey.name())) {\n-                    authProviders.add(APISecurity.apikey.name());\n-                } else if (s.equalsIgnoreCase(APISecurity.oauth2.name())) {\n-                    authProviders.add(APISecurity.oauth2.name());\n-                    authProviders.add(APISecurity.jwt.name());\n+        // Support api manager application level security\n+        if (apiSecurityByExtension != null && !apiSecurityByExtension.isEmpty()) {\n+            for (String securityType : apiSecurityByExtension) {\n+                if (OpenAPIConstants.APPLICATION_LEVEL_SECURITY.containsKey(securityType)) {\n+                    setDefaultSecurityScheme(\n+                            OpenAPIConstants.APPLICATION_LEVEL_SECURITY.get(securityType), authProviders);\n                 }\n             }\n+        } else if (schemas != null) {\n+            String[] schemasArray = schemas.trim().split(\"\\\\s*,\\\\s*\");\n+            for (String securityType : schemasArray) {\n+                setDefaultSecurityScheme(securityType, authProviders);\n+            }\n         }\n+\n         if (authProviders.isEmpty()) {\n-            authProviders.add(APISecurity.oauth2.name());\n-            authProviders.add(APISecurity.jwt.name());\n+            authProviders.add(OpenAPIConstants.APISecurity.oauth2.name());\n+            authProviders.add(OpenAPIConstants.APISecurity.jwt.name());\n+        }\n+        return authProviders;\n+    }\n+\n+    private static List<String> setDefaultSecurityScheme(String securityType, List<String> authProviders) {", "originalCommit": "51254307142291402cd5da3bbd547f5f0bb5eb60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMTQxMw==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r377001413", "bodyText": "Fixed in c023aba", "author": "AmaliMatharaarachchi", "createdAt": "2020-02-10T11:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg4NTU3Nw=="}], "type": "inlineReview"}, {"oid": "910fbfbc3f6e1c6fb651efdd7ce1ec665b616406", "url": "https://github.com/wso2/product-microgateway/commit/910fbfbc3f6e1c6fb651efdd7ce1ec665b616406", "message": "Application and Transport security", "committedDate": "2020-02-10T07:52:17Z", "type": "commit"}, {"oid": "910fbfbc3f6e1c6fb651efdd7ce1ec665b616406", "url": "https://github.com/wso2/product-microgateway/commit/910fbfbc3f6e1c6fb651efdd7ce1ec665b616406", "message": "Application and Transport security", "committedDate": "2020-02-10T07:52:17Z", "type": "forcePushed"}, {"oid": "c023abac6801c1fdbfbeb4795dac35a90ea8b045", "url": "https://github.com/wso2/product-microgateway/commit/c023abac6801c1fdbfbeb4795dac35a90ea8b045", "message": "Fix review comments", "committedDate": "2020-02-10T11:13:09Z", "type": "commit"}, {"oid": "d736d83d1bca86bab5650370015aa5026f62cc28", "url": "https://github.com/wso2/product-microgateway/commit/d736d83d1bca86bab5650370015aa5026f62cc28", "message": "update readme", "committedDate": "2020-02-10T11:32:39Z", "type": "commit"}, {"oid": "d736d83d1bca86bab5650370015aa5026f62cc28", "url": "https://github.com/wso2/product-microgateway/commit/d736d83d1bca86bab5650370015aa5026f62cc28", "message": "update readme", "committedDate": "2020-02-10T11:32:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1Mjk4OQ==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r377052989", "bodyText": "Can't we directly use the extension here rather than assigning it to a object and then passing it to objectmapper", "author": "Rajith90", "createdAt": "2020-02-10T13:12:28Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -702,11 +722,26 @@ private static void validateSingleResourceInterceptors(Operation operation, Stri\n      */\n     private static void setMgwAPISecurityAndScopes(ExtendedAPI api, OpenAPI openAPI) {\n         String[] securitySchemasAndScopes = generateMgwSecuritySchemasAndScopes(openAPI.getSecurity());\n+        Map<String, Object> apiDefExtensions = openAPI.getExtensions();\n+        if (apiDefExtensions != null && apiDefExtensions.containsKey(OpenAPIConstants.APPLICATION_SECURITY)) {\n+            logger.debug(OpenAPIConstants.APPLICATION_SECURITY + \" extension found in the API\");\n+            try {\n+                Object appSecurityExtension = apiDefExtensions.get(OpenAPIConstants.APPLICATION_SECURITY);\n+                ApplicationSecurity appSecurity =\n+                        new ObjectMapper().convertValue(appSecurityExtension, ApplicationSecurity.class);", "originalCommit": "d736d83d1bca86bab5650370015aa5026f62cc28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1MzA1Mg==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r377053052", "bodyText": "Can't we directly use the extension here rather than assigning it to a object and then passing it to objectmapper", "author": "Rajith90", "createdAt": "2020-02-10T13:12:35Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -255,12 +250,37 @@ public static ExtendedAPI generateAPIFromOpenAPIDef(OpenAPI openAPI, String open\n         api.setId(apiId);\n         api.setName(openAPI.getInfo().getTitle());\n         api.setVersion(openAPI.getInfo().getVersion());\n-        api.setTransport(Arrays.asList(\"http\", \"https\"));\n+        api.setTransport(getTransport(openAPI));\n         //open API content should be set in json in order to validation filter to work.\n         api.setApiDefinition(openAPIContent);\n         return api;\n     }\n \n+    private static List<String> getTransport(OpenAPI openAPI) {\n+        List<String> transports = new ArrayList<>();\n+        Map<String, Object> apiDefExtensions = openAPI.getExtensions();\n+        if (apiDefExtensions.containsKey(OpenAPIConstants.TRANSPORT_SECURITY)) {\n+            logger.debug(OpenAPIConstants.TRANSPORT_SECURITY + \" extension found in the API Definition\");\n+            try {\n+                Object transportSecurityExtension = apiDefExtensions.get(OpenAPIConstants.TRANSPORT_SECURITY);\n+                TransportSecurity transportSecurity =", "originalCommit": "d736d83d1bca86bab5650370015aa5026f62cc28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1MzEyMw==", "url": "https://github.com/wso2/product-microgateway/pull/970#discussion_r377053123", "bodyText": "Can't we directly use the extension here rather than assigning it to a object and then passing it to objectmapper", "author": "Rajith90", "createdAt": "2020-02-10T13:12:44Z", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -776,9 +811,20 @@ private static void setMgwAPISecurityAndScopes(ExtendedAPI api, OpenAPI openAPI)\n         return new String[]{securitySchemas, scopes};\n     }\n \n-    public static List<String> getMgwResourceSecurity(Operation operation) {\n+    public static List<String> getMgwResourceSecurity(Operation operation, ApplicationSecurity appSecurity) {\n+        Map<String, Object> operationExtensions = operation.getExtensions();\n+        //override api level application security extension by operation level extension\n+        if (operationExtensions != null && operationExtensions.containsKey(OpenAPIConstants.APPLICATION_SECURITY)) {\n+            try {\n+                Object appSecurityExtension = operationExtensions.get(OpenAPIConstants.APPLICATION_SECURITY);\n+                appSecurity = new ObjectMapper().convertValue(appSecurityExtension, ApplicationSecurity.class);", "originalCommit": "d736d83d1bca86bab5650370015aa5026f62cc28", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d740d8edaad68118bf6c4b76e0fd4462253e8176", "url": "https://github.com/wso2/product-microgateway/commit/d740d8edaad68118bf6c4b76e0fd4462253e8176", "message": "Fix review comments", "committedDate": "2020-02-11T03:38:10Z", "type": "commit"}]}