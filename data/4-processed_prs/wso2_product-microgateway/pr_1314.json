{"pr_number": 1314, "pr_title": "Add www-Authenticate header in the Error response", "pr_createdAt": "2020-07-06T13:06:56Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1314", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4NDg2Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1314#discussion_r450284862", "bodyText": "Authentication failures can happen due to several reasons. If we set the description to the header, we have to mention the correct reason for the failure.\nIMO, we do not need the error and error_description in the header since the WWW-Authenticate header is meant to contain only the challenge.", "author": "menakaj", "createdAt": "2020-07-06T15:03:16Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -50,6 +50,8 @@ public const string VALIDATE_KEY_SOAP_ACTION = \"urn:validateKey\";\n public const string KEY_VALIDATION_SERVICE_CONTEXT = \"/services/APIKeyValidationService\";\n public const string UTF_8 = \"UTF-8\";\n public const string INVALID_COOKIE = \"Cookie is Invalid\";\n+public const string WWW_AUTHENTICATE = \"WWW-Authenticate\";\n+public const string WWW_AUTHENTICATE_ERROR = \", error=\\\"invalid token\\\" , error_description=\\\"The access token expired\\\"\";", "originalCommit": "f3b33a74fb8d685961ca529df4c7c2f275ce40db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxMTg1Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1314#discussion_r450611853", "bodyText": "This WWW-Authenticate header is already available in the WSO2 APIM. In the APIM, it displays both error and error_description along with the WWW-Authenticate header when authentication fails. And the error_description is set to \"The access token expired\". This implementation is exactly similar to the implementation in APIM.", "author": "ShalkiWenushika", "createdAt": "2020-07-07T05:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4NDg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NjM0Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1314#discussion_r455686342", "bodyText": "Let's use existing constants for these? AUTH_SCHEME_OAUTH2, AUTHN_SCHEME_BASIC", "author": "menakaj", "createdAt": "2020-07-16T10:28:08Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -363,6 +368,32 @@ public function sendErrorResponseFromInvocationContext(http:Response response) {\n     }\n }\n \n+public function getChallengeString(http:FilterContext context) returns string {\n+    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+    string challengeString = invocationContext.attributes[CHALLENGE_STRING].toString();\n+    string[] authProviders = [];\n+    APIConfiguration? apiConfig = apiConfigAnnotationMap[context.getServiceName()];\n+    if (apiConfig is APIConfiguration) {\n+        authProviders = apiConfig.authProviders;\n+        foreach var v in authProviders {\n+            if (v == \"oauth2\") {", "originalCommit": "f3b33a74fb8d685961ca529df4c7c2f275ce40db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NzcyNg==", "url": "https://github.com/wso2/product-microgateway/pull/1314#discussion_r455687726", "bodyText": "Use existing constants. UNAUTHORIZED", "author": "menakaj", "createdAt": "2020-07-16T10:30:36Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -342,13 +342,18 @@ public function sendErrorResponse(http:Caller caller, http:Request request, http\n \n # Default error response sender with json error response.\n # + response - http response object.\n-public function sendErrorResponseFromInvocationContext(http:Response response) {\n-    runtime:InvocationContext context = runtime:getInvocationContext();\n-    string errorDescription = <string>context.attributes[ERROR_DESCRIPTION];\n-    string errorMessage = <string>context.attributes[ERROR_MESSAGE];\n-    int errorCode = <int>context.attributes[ERROR_CODE];\n-    response.statusCode = <int>context.attributes[HTTP_STATUS_CODE];\n+public function sendErrorResponseFromInvocationContext(http:FilterContext context, http:Response response) {\n+    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+    string errorDescription = <string>invocationContext.attributes[ERROR_DESCRIPTION];\n+    string errorMessage = <string>invocationContext.attributes[ERROR_MESSAGE];\n+    int errorCode = <int>invocationContext.attributes[ERROR_CODE];\n+    response.statusCode = <int>invocationContext.attributes[HTTP_STATUS_CODE];\n     response.setContentType(APPLICATION_JSON);\n+    //set WWW_AUTHENTICATE header to error response\n+    if (response.statusCode == 401) {", "originalCommit": "f3b33a74fb8d685961ca529df4c7c2f275ce40db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "caa80c750d1020273002c805f0180f7d053d6d2e", "url": "https://github.com/wso2/product-microgateway/commit/caa80c750d1020273002c805f0180f7d053d6d2e", "message": "Add www-Authenticate header in the Error response", "committedDate": "2020-07-16T12:12:57Z", "type": "forcePushed"}, {"oid": "03bf0b81821cc0b2c0da9fd48c3a1b944061f04b", "url": "https://github.com/wso2/product-microgateway/commit/03bf0b81821cc0b2c0da9fd48c3a1b944061f04b", "message": "add constants to the variable values", "committedDate": "2020-07-16T12:10:04Z", "type": "forcePushed"}, {"oid": "db1e3eb9c49fdba223ab4f2a3369bb6a1d573291", "url": "https://github.com/wso2/product-microgateway/commit/db1e3eb9c49fdba223ab4f2a3369bb6a1d573291", "message": "Add www-Authenticate header in the Error response", "committedDate": "2020-07-16T12:58:23Z", "type": "commit"}, {"oid": "db1e3eb9c49fdba223ab4f2a3369bb6a1d573291", "url": "https://github.com/wso2/product-microgateway/commit/db1e3eb9c49fdba223ab4f2a3369bb6a1d573291", "message": "Add www-Authenticate header in the Error response", "committedDate": "2020-07-16T12:58:23Z", "type": "forcePushed"}, {"oid": "2c6912080a3d81ae2282ae5ecdb3fdf2bd428840", "url": "https://github.com/wso2/product-microgateway/commit/2c6912080a3d81ae2282ae5ecdb3fdf2bd428840", "message": "Change a constant", "committedDate": "2020-07-16T15:28:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4MzkyMA==", "url": "https://github.com/wso2/product-microgateway/pull/1314#discussion_r455883920", "bodyText": "Use proper variable name instead of 'v'", "author": "menakaj", "createdAt": "2020-07-16T15:41:44Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -364,6 +369,32 @@ public function sendErrorResponseFromInvocationContext(http:Response response) {\n     }\n }\n \n+public function getChallengeString(http:FilterContext context) returns string {\n+     runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+     string challengeString = invocationContext.attributes[CHALLENGE_STRING].toString();\n+     string[] authProviders = [];\n+     APIConfiguration? apiConfig = apiConfigAnnotationMap[context.getServiceName()];\n+     if (apiConfig is APIConfiguration) {\n+         authProviders = apiConfig.authProviders;\n+         foreach var v in authProviders {", "originalCommit": "2c6912080a3d81ae2282ae5ecdb3fdf2bd428840", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6acc8f01c3a59b6b0846545644b5179a53fc12b3", "url": "https://github.com/wso2/product-microgateway/commit/6acc8f01c3a59b6b0846545644b5179a53fc12b3", "message": "Change a variable name", "committedDate": "2020-07-16T16:04:16Z", "type": "commit"}]}