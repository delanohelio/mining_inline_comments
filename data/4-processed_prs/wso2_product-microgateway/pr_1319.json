{"pr_number": 1319, "pr_title": "Support analytics versioning.", "pr_createdAt": "2020-07-10T13:34:53Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1319", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQzMw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453297433", "bodyText": "Lets not make this exact match. Starting from 3.2.0 version should be the condition", "author": "Rajith90", "createdAt": "2020-07-12T10:20:48Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,30 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n-    return dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string payloadData = dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n     dto.resourcePath + OBJ + dto.method + OBJ + dto.apiCreator + OBJ + dto.userName + OBJ + dto.userTenantDomain + OBJ +\n     dto.apiCreatorTenantDomain + OBJ + dto.hostName + OBJ + dto.applicationId + OBJ +\n-    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ + dto.faultTime.toString();\n+    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ +\n+    dto.faultTime.toString();\n+\n+    if (amAnalyticsVersion == \"3.1.0\") {\n+        payloadData = payloadData + OBJ + dto.properties;\n+    }\n+    if (amAnalyticsVersion == \"3.2.0\") {", "originalCommit": "7dd4965de40af88524f47f5f579bffb01e67d27b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0OTkwMg==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453549902", "bodyText": "Fixed with 83140f7", "author": "menakaj", "createdAt": "2020-07-13T10:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQ1Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453297457", "bodyText": "Lets not make this exact match. Upto 3.1.0 should be the condition", "author": "Rajith90", "createdAt": "2020-07-12T10:21:03Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,30 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n-    return dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string payloadData = dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n     dto.resourcePath + OBJ + dto.method + OBJ + dto.apiCreator + OBJ + dto.userName + OBJ + dto.userTenantDomain + OBJ +\n     dto.apiCreatorTenantDomain + OBJ + dto.hostName + OBJ + dto.applicationId + OBJ +\n-    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ + dto.faultTime.toString();\n+    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ +\n+    dto.faultTime.toString();\n+\n+    if (amAnalyticsVersion == \"3.1.0\") {", "originalCommit": "7dd4965de40af88524f47f5f579bffb01e67d27b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0OTg1Mw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453549853", "bodyText": "Fixed with 83140f7", "author": "menakaj", "createdAt": "2020-07-13T10:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQ1Nw=="}], "type": "inlineReview"}, {"oid": "6c76ca0323eb40c6f928bfb095e380b824ce81bd", "url": "https://github.com/wso2/product-microgateway/commit/6c76ca0323eb40c6f928bfb095e380b824ce81bd", "message": "Re order the payload parameters of 3.2.0 stream.", "committedDate": "2020-07-14T10:01:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5MzUwNA==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454893504", "bodyText": "Populate from invocation context", "author": "menakaj", "createdAt": "2020-07-15T08:48:07Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/analytics_dtos.bal", "diffHunk": "@@ -51,6 +51,7 @@ public type RequestResponseExecutionDTO record {\n     string label = \"\";\n     string correlationId = \"\";\n     boolean cacheHit = false;\n+    string properties = \"null\"; //New 3.1.0", "originalCommit": "6c76ca0323eb40c6f928bfb095e380b824ce81bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTY0Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454959647", "bodyText": "Fixed with b2e75f7", "author": "menakaj", "createdAt": "2020-07-15T10:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5MzUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5NTgyNw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454895827", "bodyText": "Use 3.2.0 as default, max version", "author": "menakaj", "createdAt": "2020-07-15T08:51:59Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -1114,3 +1114,30 @@ public function buildBasicAuthHeader(string username, string password) returns s\n \n     return BASIC_PREFIX_WITH_SPACE + headerValue;\n }\n+\n+# Get the supported analytics stream version for the configured value.\n+#\n+# + return - Returns the supported analytics version.\n+# True if the version1 is greater than version2, false otherwise.\n+public function getAnalyticsVertion() returns string {\n+    string amAnalyticsVersion = getConfigValue(OLD_FILE_UPLOAD_ANALYTICS, APIM_ANALYTICS_VERSION, DEFAULT_AM_ANALYTICS_VERSION);\n+    string analyticsVersion = replaceAll(amAnalyticsVersion, \"\\\\.\", \"\");\n+    string supportedVersion = DEFAULT_AM_ANALYTICS_VERSION;\n+    // 3.0.0 or 3.1.0 case use the 3.0.0 stream.\n+    if (amAnalyticsVersion == DEFAULT_AM_ANALYTICS_VERSION || amAnalyticsVersion == \"3.1.0\") {", "originalCommit": "6c76ca0323eb40c6f928bfb095e380b824ce81bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTY5OA==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454959698", "bodyText": "Fixed with b2e75f7", "author": "menakaj", "createdAt": "2020-07-15T10:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5NTgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2NzY1NQ==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454967655", "bodyText": "Do we need !== or !=", "author": "Rajith90", "createdAt": "2020-07-15T10:59:31Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,34 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string resourceTemplate = OBJ;\n+    string applicationOwner = OBJ;\n+    string properties = \"\";\n+    // If am analytics version is 3.2.0, append api resource template and application owner\n+    if (amAnalyticsVersion == DEFAULT_AM_ANALYTICS_VERSION) {\n+        resourceTemplate = resourceTemplate + dto.apiResourceTemplate + OBJ;\n+        applicationOwner = applicationOwner + dto.applicationOwner + OBJ;\n+    }\n+    // If analytics version is 3.1.0, append properties.\n+    if (amAnalyticsVersion !== DEFAULT_AM_ANALYTICS_VERSION_300) {", "originalCommit": "b2e75f7250069ff2c58351c09277ece331ac9425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTM3Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001376", "bodyText": "It is !=.\nFixed in b694c69", "author": "menakaj", "createdAt": "2020-07-15T12:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2NzY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODM5Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454968397", "bodyText": "Lets remove empty line", "author": "Rajith90", "createdAt": "2020-07-15T11:01:00Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "diffHunk": "@@ -149,29 +153,59 @@ public function generateRequestResponseExecutionDataEvent(http:Response response\n         requestResponseExecutionDTO.apiResourceTemplate = httpResourceConfig.path;\n     }\n     //request method\n-    requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n-    int initTime = <int>context.attributes[REQUEST_TIME];\n-    int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n-    int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n-    requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n-    requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n-    requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    if (context.attributes[API_METHOD_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n+    }\n+    \n+    if (context.attributes[REQUEST_TIME] is int && invocationContext.attributes[TS_RESPONSE_IN] is int && invocationContext.attributes[TS_REQUEST_OUT] is int) {\n+        int initTime = <int>context.attributes[REQUEST_TIME];\n+        int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n+        int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n+        requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n+        requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n+        requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    }\n+    \n     //dummy values for protocol and destination for now\n-    requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n-    requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    if (context.attributes[PROTOCOL_PROPERTY] is string) {\n+        requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n+    }\n+    if (invocationContext.attributes[DESTINATION] is string) {\n+        requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    }\n \n     //Set data which were set to context in the Request path\n-    requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n-    requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n-    requestResponseExecutionDTO.apiTier = <string>context.attributes[API_TIER_PROPERTY];\n-    requestResponseExecutionDTO.throttledOut = <boolean>context.attributes[CONTINUE_ON_TROTTLE_PROPERTY];\n-    requestResponseExecutionDTO.userAgent = <string>context.attributes[USER_AGENT_PROPERTY];\n-    requestResponseExecutionDTO.userIp = <string>context.attributes[USER_IP_PROPERTY];\n-    requestResponseExecutionDTO.requestTimestamp = <int>context.attributes[REQUEST_TIME_PROPERTY];\n+    if (context.attributes[APPLICATION_OWNER_PROPERTY] is string) {\n+        requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n+    }\n+    ", "originalCommit": "b2e75f7250069ff2c58351c09277ece331ac9425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTIwOA==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001208", "bodyText": "Fixed in b694c69", "author": "menakaj", "createdAt": "2020-07-15T12:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODQ2Mg==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454968462", "bodyText": "Lets remove empty line", "author": "Rajith90", "createdAt": "2020-07-15T11:01:08Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "diffHunk": "@@ -149,29 +153,59 @@ public function generateRequestResponseExecutionDataEvent(http:Response response\n         requestResponseExecutionDTO.apiResourceTemplate = httpResourceConfig.path;\n     }\n     //request method\n-    requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n-    int initTime = <int>context.attributes[REQUEST_TIME];\n-    int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n-    int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n-    requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n-    requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n-    requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    if (context.attributes[API_METHOD_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n+    }\n+    \n+    if (context.attributes[REQUEST_TIME] is int && invocationContext.attributes[TS_RESPONSE_IN] is int && invocationContext.attributes[TS_REQUEST_OUT] is int) {\n+        int initTime = <int>context.attributes[REQUEST_TIME];\n+        int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n+        int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n+        requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n+        requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n+        requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    }\n+    \n     //dummy values for protocol and destination for now\n-    requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n-    requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    if (context.attributes[PROTOCOL_PROPERTY] is string) {\n+        requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n+    }\n+    if (invocationContext.attributes[DESTINATION] is string) {\n+        requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    }\n \n     //Set data which were set to context in the Request path\n-    requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n-    requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n-    requestResponseExecutionDTO.apiTier = <string>context.attributes[API_TIER_PROPERTY];\n-    requestResponseExecutionDTO.throttledOut = <boolean>context.attributes[CONTINUE_ON_TROTTLE_PROPERTY];\n-    requestResponseExecutionDTO.userAgent = <string>context.attributes[USER_AGENT_PROPERTY];\n-    requestResponseExecutionDTO.userIp = <string>context.attributes[USER_IP_PROPERTY];\n-    requestResponseExecutionDTO.requestTimestamp = <int>context.attributes[REQUEST_TIME_PROPERTY];\n+    if (context.attributes[APPLICATION_OWNER_PROPERTY] is string) {\n+        requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n+    }\n+    \n+    if (context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n+    }\n+", "originalCommit": "b2e75f7250069ff2c58351c09277ece331ac9425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTE2Ng==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001166", "bodyText": "Fixed in b694c69", "author": "menakaj", "createdAt": "2020-07-15T12:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2OTAxNw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454969017", "bodyText": "Shall we use some name like \"ADDITIONAL_ANALYTICS_PROPS\"", "author": "Rajith90", "createdAt": "2020-07-15T11:02:13Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -122,6 +122,7 @@ public const string USER_IP_PROPERTY = \"userIp\";\n public const string REQUEST_TIME_PROPERTY = \"requestTimestamp\";\n public const string GATEWAY_TYPE_PROPERTY = \"gatewayType\";\n public const string GATEWAY_TYPE = \"MICRO\";\n+public const string ADDITIONAL_PROPS = \"ADDITIONAL_PROPS\";", "originalCommit": "b2e75f7250069ff2c58351c09277ece331ac9425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTEwOA==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001108", "bodyText": "Fixed in b694c69", "author": "menakaj", "createdAt": "2020-07-15T12:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2OTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDQyMg==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454970422", "bodyText": "Let's not call getAnalyticsVertion() method for each request . Save it in a global variable during startup and reuse it", "author": "Rajith90", "createdAt": "2020-07-15T11:05:02Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -20,19 +20,23 @@ import ballerina/runtime;\n public type AnalyticsRequestFilter object {\n \n     public function filterRequest(http:Caller caller, http:Request request, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();\n+        printDebug(KEY_ANALYTICS_FILTER, \"Analytics Version \" + amAnalyticsVersion);\n         if (context.attributes.hasKey(SKIP_ALL_FILTERS) && <boolean>context.attributes[SKIP_ALL_FILTERS]) {\n             printDebug(KEY_ANALYTICS_FILTER, \"Skip all filter annotation set in the service. Skip the filter\");\n             return true;\n         }\n         //Filter only if analytics is enabled.\n         if (isAnalyticsEnabled || isGrpcAnalyticsEnabled) {\n             context.attributes[PROTOCOL_PROPERTY] = caller.protocol;\n-            doFilterRequest(request, context);\n+            doFilterRequest(request, context, amAnalyticsVersion);\n         }\n         return true;\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();", "originalCommit": "b2e75f7250069ff2c58351c09277ece331ac9425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTA2MA==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001060", "bodyText": "Fixed in b694c69", "author": "menakaj", "createdAt": "2020-07-15T12:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDc5Nw==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454970797", "bodyText": "Let's not call getAnalyticsVertion() method for each request . Save it in a global variable during startup and reuse it", "author": "Rajith90", "createdAt": "2020-07-15T11:05:44Z", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -20,19 +20,23 @@ import ballerina/runtime;\n public type AnalyticsRequestFilter object {\n \n     public function filterRequest(http:Caller caller, http:Request request, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();", "originalCommit": "b2e75f7250069ff2c58351c09277ece331ac9425", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTAyMA==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001020", "bodyText": "Fixed in b694c69", "author": "menakaj", "createdAt": "2020-07-15T12:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTYxMQ==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454971611", "bodyText": "Lets use this as stream version, because in APIm analytics 3.3.0 also might have the 3.2.0 streams if there are no changes", "author": "Rajith90", "createdAt": "2020-07-15T11:07:25Z", "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -165,6 +165,8 @@\n \n # Analytics configurations\n [analytics]\n+  # The configured API Manager analytics version\n+  version = \"3.2.0\"", "originalCommit": "57aeb746a4a51ed215a0f91e28f04bedbb8444c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMDkxNQ==", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455000915", "bodyText": "Fixed in 4c69077", "author": "menakaj", "createdAt": "2020-07-15T12:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTYxMQ=="}], "type": "inlineReview"}, {"oid": "08182f520b6c38b245db5e60439c8abf3cc7fb81", "url": "https://github.com/wso2/product-microgateway/commit/08182f520b6c38b245db5e60439c8abf3cc7fb81", "message": "Set username after subs validation.", "committedDate": "2020-07-15T12:02:07Z", "type": "commit"}, {"oid": "4a7bf79491729e87bfcfec7e661bca13e2b86599", "url": "https://github.com/wso2/product-microgateway/commit/4a7bf79491729e87bfcfec7e661bca13e2b86599", "message": "Analytics filter update.\n\n* Make analytics version configurable\n* Add new fields to DTOs.\n* Set publishing streams\n* Add default configurations to the template file.", "committedDate": "2020-07-15T12:02:07Z", "type": "commit"}, {"oid": "e3c24730dc58c0203a931c7a89c734f3b5487c53", "url": "https://github.com/wso2/product-microgateway/commit/e3c24730dc58c0203a931c7a89c734f3b5487c53", "message": "Fix analytics version selection.", "committedDate": "2020-07-15T12:02:07Z", "type": "commit"}, {"oid": "01d3a98bfaef06cc15a4dfaf6348ad27371b46e2", "url": "https://github.com/wso2/product-microgateway/commit/01d3a98bfaef06cc15a4dfaf6348ad27371b46e2", "message": "Fix method comment", "committedDate": "2020-07-15T12:02:07Z", "type": "commit"}, {"oid": "c06cf100b1c6e185a259a57139cc2d4c17441fdb", "url": "https://github.com/wso2/product-microgateway/commit/c06cf100b1c6e185a259a57139cc2d4c17441fdb", "message": "Re order the payload parameters of 3.2.0 stream.", "committedDate": "2020-07-15T12:02:07Z", "type": "commit"}, {"oid": "00de86987d48b9223c155219c64912e443c04dae", "url": "https://github.com/wso2/product-microgateway/commit/00de86987d48b9223c155219c64912e443c04dae", "message": "Fix code review suggestions.\n\n* Support 3.2.0 as the default analytics version.\n* Read the properties from the invocation context.\n* Restructure the payload to match the stream definition.", "committedDate": "2020-07-15T12:02:07Z", "type": "commit"}, {"oid": "2aff1143416300215b7d1e5665b73488c9b46f69", "url": "https://github.com/wso2/product-microgateway/commit/2aff1143416300215b7d1e5665b73488c9b46f69", "message": "Set default version to 3.2.0 in config template.", "committedDate": "2020-07-15T12:02:08Z", "type": "commit"}, {"oid": "b694c6960318d34763d343da195320faf623a55f", "url": "https://github.com/wso2/product-microgateway/commit/b694c6960318d34763d343da195320faf623a55f", "message": "Fix review comments.", "committedDate": "2020-07-15T12:02:08Z", "type": "commit"}, {"oid": "b694c6960318d34763d343da195320faf623a55f", "url": "https://github.com/wso2/product-microgateway/commit/b694c6960318d34763d343da195320faf623a55f", "message": "Fix review comments.", "committedDate": "2020-07-15T12:02:08Z", "type": "forcePushed"}, {"oid": "4c690770f6f86c3a209ac3bb9cc5d76a85640091", "url": "https://github.com/wso2/product-microgateway/commit/4c690770f6f86c3a209ac3bb9cc5d76a85640091", "message": "Reword the config element.", "committedDate": "2020-07-15T12:06:08Z", "type": "commit"}]}