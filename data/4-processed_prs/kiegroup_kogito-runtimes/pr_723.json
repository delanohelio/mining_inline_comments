{"pr_number": 723, "pr_title": "[KOGITO-2758] Refactor publisher-consumer code", "pr_createdAt": "2020-08-25T11:03:20Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/723", "timeline": [{"oid": "f2f78e5268369e0f2fe752c9e79e5a0f45cf04b5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f2f78e5268369e0f2fe752c9e79e5a0f45cf04b5", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-25T11:09:13Z", "type": "forcePushed"}, {"oid": "b5f257ffb14952389de0e5588bd5f318fb7c7f9b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b5f257ffb14952389de0e5588bd5f318fb7c7f9b", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-25T11:09:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjYyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r476432629", "bodyText": "Removing this won't affect JSON unmarshal/marshal in runtime?", "author": "ricardozanini", "createdAt": "2020-08-25T13:05:33Z", "path": "api/kogito-services/src/main/java/org/kie/kogito/services/event/AbstractProcessDataEvent.java", "diffHunk": "@@ -78,7 +107,11 @@ public String getKogitoReferenceId() {\n         return this.kogitoReferenceId;\n     }\n \n-    public void setKogitoReferenceId(String kogitoReferenceId) {", "originalCommit": "b5f257ffb14952389de0e5588bd5f318fb7c7f9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ1OTU3Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r476459576", "bodyText": "A getter makes a non public field serializable/deserializble by jackson\nhttps://www.baeldung.com/jackson-field-serializable-deserializable-or-not", "author": "fjtirado", "createdAt": "2020-08-25T13:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcwMjI2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480702267", "bodyText": "@fjtirado so why add setKogitoStartFromNode then? shouldnt we keep consistency?", "author": "cristianonicolai", "createdAt": "2020-09-01T03:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjYyOQ=="}], "type": "inlineReview"}, {"oid": "e8f4e4deb2933a295e24aa80ea6b727d1d2420b9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e8f4e4deb2933a295e24aa80ea6b727d1d2420b9", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-26T19:40:22Z", "type": "forcePushed"}, {"oid": "125c4430eac68828a5b5e7bfbc55e1758d889c9f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/125c4430eac68828a5b5e7bfbc55e1758d889c9f", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T08:05:31Z", "type": "forcePushed"}, {"oid": "92ed59429287feba58856a7c8bdad6a5c388cc3c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/92ed59429287feba58856a7c8bdad6a5c388cc3c", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T08:06:14Z", "type": "forcePushed"}, {"oid": "990f5d7247ab859bc50f4a54e506f51864c5703a", "url": "https://github.com/kiegroup/kogito-runtimes/commit/990f5d7247ab859bc50f4a54e506f51864c5703a", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T09:37:32Z", "type": "forcePushed"}, {"oid": "39fbf643f743b537e5f31e9257665a8165145600", "url": "https://github.com/kiegroup/kogito-runtimes/commit/39fbf643f743b537e5f31e9257665a8165145600", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T09:43:09Z", "type": "forcePushed"}, {"oid": "dce1c3c84ca0fe1038d62922acb567ce49040848", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dce1c3c84ca0fe1038d62922acb567ce49040848", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T10:31:59Z", "type": "forcePushed"}, {"oid": "4127716c48b2936f51c0f549773e864c3f30e5de", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4127716c48b2936f51c0f549773e864c3f30e5de", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T10:33:22Z", "type": "forcePushed"}, {"oid": "42cc1818c27541c433164314f68fd3b8e1f2a472", "url": "https://github.com/kiegroup/kogito-runtimes/commit/42cc1818c27541c433164314f68fd3b8e1f2a472", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T11:55:24Z", "type": "forcePushed"}, {"oid": "4fec3ab2859ab7b48c07573b8b8f93ce79234907", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4fec3ab2859ab7b48c07573b8b8f93ce79234907", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T12:38:47Z", "type": "forcePushed"}, {"oid": "a7ed0b2cc6930c763ab70bc678607b9f53358740", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a7ed0b2cc6930c763ab70bc678607b9f53358740", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T13:32:32Z", "type": "forcePushed"}, {"oid": "671b9c37fc4953b94e9cc206626bab70a8c22e1d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/671b9c37fc4953b94e9cc206626bab70a8c22e1d", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T15:09:23Z", "type": "forcePushed"}, {"oid": "2744cdfb4b10c0997cdaff2e6a1b06265ac4690f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2744cdfb4b10c0997cdaff2e6a1b06265ac4690f", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-27T15:15:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5NTY1MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r478695650", "bodyText": "Is this a typo? \ud83e\udd14", "author": "ricardozanini", "createdAt": "2020-08-27T21:06:26Z", "path": "kogito-codegen/src/main/resources/class-templates/events/CloudEventsMessageProducerTemplate.java", "diffHunk": "@@ -38,33 +32,18 @@ public void produce(ProcessInstance pi, $Type$ eventData) {\n         } else {\n         }\n     }\n-\n+    \n+\u00a1", "originalCommit": "2744cdfb4b10c0997cdaff2e6a1b06265ac4690f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5cd1805613afef8b89080935ffda9ffd3b2ee5c3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5cd1805613afef8b89080935ffda9ffd3b2ee5c3", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-28T08:41:14Z", "type": "forcePushed"}, {"oid": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-08-28T14:45:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcwMzk1Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480703953", "bodyText": "please review code formatting in this class", "author": "cristianonicolai", "createdAt": "2020-09-01T03:31:27Z", "path": "integration-tests/integration-tests-quarkus/src/main/java/org/acme/travels/Traveller.java", "diffHunk": "@@ -21,21 +21,24 @@\n \tprivate String lastName;\n \tprivate String email;\n \tprivate String nationality;\n-\tprivate Address address;\n+    private Address address;", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI4NDg2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r484284867", "bodyText": "I did not want to introduce noise in the review by formatting the whole class, but if it is ok, lets go ahead", "author": "fjtirado", "createdAt": "2020-09-07T08:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcwMzk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcwNTM3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480705377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public CloudEventConsumer(Function<D, M> function,\n          \n          \n            \n                                          Class<T> cloudEventClass) {\n          \n          \n            \n                public CloudEventConsumer(Function<D, M> function, Class<T> cloudEventClass) {", "author": "cristianonicolai", "createdAt": "2020-09-01T03:32:24Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.event.impl;\n+\n+import java.util.function.Function;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.Sig;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.EventConsumer;\n+import org.kie.kogito.services.uow.UnitOfWorkExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CloudEventConsumer<D, M extends Model, T extends AbstractProcessDataEvent<D>>\n+                               implements EventConsumer<M> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CloudEventConsumer.class);\n+\n+    private Function<D, M> function;\n+    private Class<T> cloudEventClass;\n+\n+    public CloudEventConsumer(Function<D, M> function,\n+                              Class<T> cloudEventClass) {", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcwNTcyNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480705726", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void\n          \n          \n            \n                    consume(Application application, Process<M> process, String payload, String trigger) {\n          \n          \n            \n                public void consume(Application application, Process<M> process, String payload, String trigger) {", "author": "cristianonicolai", "createdAt": "2020-09-01T03:32:37Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.event.impl;\n+\n+import java.util.function.Function;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.Sig;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.EventConsumer;\n+import org.kie.kogito.services.uow.UnitOfWorkExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CloudEventConsumer<D, M extends Model, T extends AbstractProcessDataEvent<D>>\n+                               implements EventConsumer<M> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CloudEventConsumer.class);\n+\n+    private Function<D, M> function;\n+    private Class<T> cloudEventClass;\n+\n+    public CloudEventConsumer(Function<D, M> function,\n+                              Class<T> cloudEventClass) {\n+        this.function = function;\n+        this.cloudEventClass = cloudEventClass;\n+    }\n+\n+    @Override\n+    public void\n+        consume(Application application, Process<M> process, String payload, String trigger) {", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcwNzIzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480707234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger\n          \n          \n            \n                                    .debug(\n          \n          \n            \n                                        \"Received message without reference id, staring new process instance with trigger '{}'\",\n          \n          \n            \n                                        trigger);\n          \n          \n            \n                                logger.debug(\"Received message without reference id, staring new process instance with trigger '{}'\",\n          \n          \n            \n                                                     trigger);", "author": "cristianonicolai", "createdAt": "2020-09-01T03:33:43Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.event.impl;\n+\n+import java.util.function.Function;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.Sig;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.EventConsumer;\n+import org.kie.kogito.services.uow.UnitOfWorkExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CloudEventConsumer<D, M extends Model, T extends AbstractProcessDataEvent<D>>\n+                               implements EventConsumer<M> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CloudEventConsumer.class);\n+\n+    private Function<D, M> function;\n+    private Class<T> cloudEventClass;\n+\n+    public CloudEventConsumer(Function<D, M> function,\n+                              Class<T> cloudEventClass) {\n+        this.function = function;\n+        this.cloudEventClass = cloudEventClass;\n+    }\n+\n+    @Override\n+    public void\n+        consume(Application application, Process<M> process, String payload, String trigger) {\n+        try {\n+            T cloudEvent = EventUtils.readEvent(payload, cloudEventClass);\n+            M model = function.apply(cloudEvent.getData());\n+            UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+                if (cloudEvent.getKogitoReferenceId() != null) {\n+                    logger\n+                        .debug(\n+                            \"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                            cloudEvent.getKogitoReferenceId(),\n+                            trigger);\n+                    process\n+                        .instances()\n+                        .findById(cloudEvent.getKogitoReferenceId())\n+                        .ifPresent(\n+                            pi -> pi\n+                                .send(\n+                                    Sig\n+                                        .of(\n+                                            \"Message-\" + trigger,\n+                                            cloudEvent.getData(),\n+                                            cloudEvent.getKogitoProcessinstanceId())));\n+                } else {\n+                    logger\n+                        .debug(\n+                            \"Received message without reference id, staring new process instance with trigger '{}'\",\n+                            trigger);", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcxMDA4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480710084", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                ProcessInstance<M> pi =\n          \n          \n            \n                                        process.createInstance(model);\n          \n          \n            \n                                ProcessInstance<M> pi = process.createInstance(model);", "author": "cristianonicolai", "createdAt": "2020-09-01T03:35:45Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/CloudEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.event.impl;\n+\n+import java.util.function.Function;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.impl.Sig;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.EventConsumer;\n+import org.kie.kogito.services.uow.UnitOfWorkExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CloudEventConsumer<D, M extends Model, T extends AbstractProcessDataEvent<D>>\n+                               implements EventConsumer<M> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(CloudEventConsumer.class);\n+\n+    private Function<D, M> function;\n+    private Class<T> cloudEventClass;\n+\n+    public CloudEventConsumer(Function<D, M> function,\n+                              Class<T> cloudEventClass) {\n+        this.function = function;\n+        this.cloudEventClass = cloudEventClass;\n+    }\n+\n+    @Override\n+    public void\n+        consume(Application application, Process<M> process, String payload, String trigger) {\n+        try {\n+            T cloudEvent = EventUtils.readEvent(payload, cloudEventClass);\n+            M model = function.apply(cloudEvent.getData());\n+            UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+                if (cloudEvent.getKogitoReferenceId() != null) {\n+                    logger\n+                        .debug(\n+                            \"Received message with reference id '{}' going to use it to send signal '{}'\",\n+                            cloudEvent.getKogitoReferenceId(),\n+                            trigger);\n+                    process\n+                        .instances()\n+                        .findById(cloudEvent.getKogitoReferenceId())\n+                        .ifPresent(\n+                            pi -> pi\n+                                .send(\n+                                    Sig\n+                                        .of(\n+                                            \"Message-\" + trigger,\n+                                            cloudEvent.getData(),\n+                                            cloudEvent.getKogitoProcessinstanceId())));\n+                } else {\n+                    logger\n+                        .debug(\n+                            \"Received message without reference id, staring new process instance with trigger '{}'\",\n+                            trigger);\n+                    ProcessInstance<M> pi =\n+                            process.createInstance(model);", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcxMDg5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480710892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DataEventConsumer(Function<D, M> function,\n          \n          \n            \n                                         Class<D> dataEventClass) {\n          \n          \n            \n                public DataEventConsumer(Function<D, M> function, Class<D> dataEventClass) {", "author": "cristianonicolai", "createdAt": "2020-09-01T03:36:20Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/DataEventConsumer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.event.impl;\n+\n+import java.util.function.Function;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.services.event.EventConsumer;\n+import org.kie.kogito.services.uow.UnitOfWorkExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DataEventConsumer<M extends Model, D> implements EventConsumer<M> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DataEventConsumer.class);\n+\n+    private Function<D, M> function;\n+    private Class<D> dataEventClass;\n+\n+    public DataEventConsumer(Function<D, M> function,\n+                             Class<D> dataEventClass) {", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcxMTQzMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480711431", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger\n          \n          \n            \n                                .debug(\n          \n          \n            \n                            logger .debug(", "author": "cristianonicolai", "createdAt": "2020-09-01T03:36:45Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/DataEventConsumer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.event.impl;\n+\n+import java.util.function.Function;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.kie.kogito.Application;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.services.event.EventConsumer;\n+import org.kie.kogito.services.uow.UnitOfWorkExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DataEventConsumer<M extends Model, D> implements EventConsumer<M> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DataEventConsumer.class);\n+\n+    private Function<D, M> function;\n+    private Class<D> dataEventClass;\n+\n+    public DataEventConsumer(Function<D, M> function,\n+                             Class<D> dataEventClass) {\n+        this.function = function;\n+        this.dataEventClass = dataEventClass;\n+    }\n+\n+    @Override\n+    public void consume(Application application, Process<M> process, String payload, String trigger) {\n+        try {\n+            D eventData = EventUtils.readEvent(payload, dataEventClass);\n+            M model = function.apply(eventData);\n+            UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+                logger\n+                    .debug(", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcxMjc1Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480712752", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T, P extends AbstractProcessDataEvent<T>> String\n          \n          \n            \n                    marshall(T dataEvent, Function<T, P> cloudFunction, Optional<Boolean> isCloudEvent) {\n          \n          \n            \n                public <T, P extends AbstractProcessDataEvent<T>> String marshall(T dataEvent, Function<T, P> cloudFunction, Optional<Boolean> isCloudEvent) {", "author": "cristianonicolai", "createdAt": "2020-09-01T03:37:45Z", "path": "jbpm/jbpm-flow/src/main/java/org/kie/kogito/event/impl/DefaultEventMarshaller.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.event.impl;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.kie.kogito.services.event.AbstractProcessDataEvent;\n+import org.kie.kogito.services.event.EventMarshaller;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class DefaultEventMarshaller implements EventMarshaller {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultEventMarshaller.class);\n+\n+    @Override\n+    public <T, P extends AbstractProcessDataEvent<T>> String\n+        marshall(T dataEvent, Function<T, P> cloudFunction, Optional<Boolean> isCloudEvent) {", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI4Mzc1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r484283754", "bodyText": "Formatter changed to do not wrap method declaration", "author": "fjtirado", "createdAt": "2020-09-07T08:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcxMjc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcyMjE0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r480722140", "bodyText": "@fjtirado this is resolved at compile time right, so why dont we inject a DefaultEventMarshaller or CloudEventMarshaller depending on that so we dont need to check at runtime? Instead we would have to concrete classes. Wouldnt that make things easier in the code we have to maintain?", "author": "cristianonicolai", "createdAt": "2020-09-01T03:44:42Z", "path": "kogito-codegen/src/main/resources/class-templates/MessageProducerTemplate.java", "diffHunk": "@@ -1,29 +1,21 @@\n package com.myspace.demo;\n \n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.util.StdDateFormat;\n-import org.kie.api.runtime.process.ProcessInstance;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.kogito.services.event.EventMarshaller;\n+import org.kie.kogito.event.impl.DefaultEventMarshaller;\n import java.util.Optional;\n-import java.util.TimeZone;\n \n public class MessageProducer {\n \n     Object emitter;\n \n     Optional<Boolean> useCloudEvents = Optional.of(true);", "originalCommit": "a5d98c05a6d42ea103fdd1813a5c2140d4cce8d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwMjUzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r484302535", "bodyText": "Im afraid this is not resolved at compilation time (I agree that it will be far easier if it was)\nSee generated code\n@org.eclipse.microprofile.config.inject.ConfigProperty(name = \"kogito.messaging.as-cloudevents\")\nthis is decided by configuration at runtime", "author": "fjtirado", "createdAt": "2020-09-07T09:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcyMjE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM5NzIwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/723#discussion_r484397209", "bodyText": "yep, you're right. Although I feel that is something that could be defined at compile time, but that's another story.", "author": "cristianonicolai", "createdAt": "2020-09-07T12:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDcyMjE0MA=="}], "type": "inlineReview"}, {"oid": "c2c91e2a2e460bedd34d8f56fe05fb1dc4d62e8e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c2c91e2a2e460bedd34d8f56fe05fb1dc4d62e8e", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-09-07T08:42:27Z", "type": "forcePushed"}, {"oid": "3b2d074b4ed602d7f45f036a73eaace3be6d25a5", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3b2d074b4ed602d7f45f036a73eaace3be6d25a5", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-09-07T08:46:10Z", "type": "forcePushed"}, {"oid": "294078feee23c1227dc04db62c4c37f541352d3f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/294078feee23c1227dc04db62c4c37f541352d3f", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-09-07T12:43:45Z", "type": "commit"}, {"oid": "294078feee23c1227dc04db62c4c37f541352d3f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/294078feee23c1227dc04db62c4c37f541352d3f", "message": "[KOGITO-2758] Refactory publisher-consumer code\n\nMoving most of the code to \"constant classes.", "committedDate": "2020-09-07T12:43:45Z", "type": "forcePushed"}]}