{"pr_number": 910, "pr_title": "[KOGITO-3911] [1.0.x] Fix to ack received kafka messages on QuarkusCloudEventPublisher", "pr_createdAt": "2020-11-24T17:34:53Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/910", "timeline": [{"oid": "be2933d9e0a2230c6819a93a858160fccc79f569", "url": "https://github.com/kiegroup/kogito-runtimes/commit/be2933d9e0a2230c6819a93a858160fccc79f569", "message": "Fix to ack received kafka messages on QuarkusCloudEventPublisher", "committedDate": "2020-11-24T17:20:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1NTk2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/910#discussion_r530155967", "bodyText": "so we ack the message but what happens if the message cannot be read by the subscriber ? isn't there already a ack process on subscriber side ?", "author": "radtriste", "createdAt": "2020-11-25T07:27:08Z", "path": "addons/cloudevents/cloudevents-quarkus-addon/src/main/java/org/kie/kogito/addon/cloudevents/quarkus/QuarkusCloudEventPublisher.java", "diffHunk": "@@ -35,13 +36,15 @@\n @ApplicationScoped\n public class QuarkusCloudEventPublisher {\n     @Channel(KogitoEventStreams.INCOMING)\n-    Multi<String> events;\n+    Multi<Message<String>> events;\n \n     @Produces\n     @ApplicationScoped\n     @Named(KogitoEventStreams.PUBLISHER)\n     public Multi<String> makeMulti() {\n-        return events.broadcast().toAllSubscribers();\n-    }\n-\n-}\n+        return events\n+                .invoke(Message::ack)", "originalCommit": "be2933d9e0a2230c6819a93a858160fccc79f569", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMTY5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/910#discussion_r530311698", "bodyText": "Yeah, this is a possible issue @radtriste, this fix is basically to ack the message when it is received before it is handled by the subscriber, without the fix no acks were being done, there is no way to ack the message on the subscriber side, or after it, with the current, because we are passing the payload (as a String), and we need the Message to do the ack. We could have an abstraction for the massage and have an impl for Quarkus and Spring, anyway, IMO this would be an improvement that could be done in a new Jira because this requires bigger refactoring.\n@evacchi @cristianonicolai ^", "author": "tiagodolphine", "createdAt": "2020-11-25T11:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1NTk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0NDMzNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/910#discussion_r530344334", "bodyText": "that was my concern. we had a similar issue on data-index when a protobuf is being updated. you may receive messages with new format before it is updated on data-index for example. and thus, the message raised an exception and the it was not ack to have a retry later.\nWould that change have such an impact here ?\ncc @sutaakar also", "author": "radtriste", "createdAt": "2020-11-25T12:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1NTk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4NDk0NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/910#discussion_r530384945", "bodyText": "nop, this is an unrelated change, basically, this is how the messages are received in the runtime, like if in a process there is a Start Message Event or an Intermediate Message Event, that consumes a message from a topic to interact with a process in the runtime. The part the publishes the events that are consumed by the data-index is decoupled from this.", "author": "tiagodolphine", "createdAt": "2020-11-25T13:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1NTk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5Nzc3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/910#discussion_r530397773", "bodyText": "ok for quick fix here then for me but on master we should have a better correction IMO :)", "author": "radtriste", "createdAt": "2020-11-25T14:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1NTk2Nw=="}], "type": "inlineReview"}]}