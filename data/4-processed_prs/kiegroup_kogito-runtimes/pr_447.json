{"pr_number": 447, "pr_title": "[KOGITO-1869] Assign unique id to DMN evaluations", "pr_createdAt": "2020-04-15T15:14:49Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/447", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzg2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r409013864", "bodyText": "Can you please wrap the UUID in a ExecutionIDProvider interface or similar so that we can change ID logic in a single place? You can add this object to the constructor. This logic will become more complex when we will extend tracing to processes and rules because we want to have end to end tracing and this ID needs to be stable for the whole execution.", "author": "danielezonca", "createdAt": "2020-04-15T17:31:14Z", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnDecisionModel.java", "diffHunk": "@@ -25,11 +27,17 @@ public DMNContext newContext(Map<String, Object> variables) {\n \n     @Override\n     public DMNResult evaluateAll(DMNContext context) {\n-        return dmnRuntime.evaluateAll(dmnRuntime.getModel(namespace, name), context);\n+        return dmnRuntime.evaluateAll(dmnRuntime.getModel(namespace, name), injectEvaluationId(context));\n     }\n \n     @Override\n     public DMNResult evaluateDecisionService(DMNContext context, String decisionServiceName) {\n-        return dmnRuntime.evaluateDecisionService(dmnRuntime.getModel(namespace, name), context, decisionServiceName);\n+        return dmnRuntime.evaluateDecisionService(dmnRuntime.getModel(namespace, name), injectEvaluationId(context), decisionServiceName);\n+    }\n+\n+    private static DMNContext injectEvaluationId(DMNContext context) {\n+        context.getMetadata().set(EVALUATION_ID_KEY, UUID.randomUUID().toString());", "originalCommit": "f61533e2d3aad20699f6ed999aa95f3445c694fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MzQ0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r409373440", "bodyText": "I think it's a good idea, but then I this ExecutionIdProvider in my opinion should also contain the logic to extract the evaluation ID and be injected as part of the DecisionConfig object (maybe we could call it ExecutionIdManager).\nPros:\n\nIt completely encapsulates the execution ID logic, so that it can be completely swapped if needed. The only \"contract\" would be that the ID is a String and is injected/extracted in/from the DMNContext.\nOther components that need to deal with DMN execution IDs (e.g. the tracing addon I'm implementing) don't need to know how to extract it in order to read it, they will only rely on the provider object referenced in the DecisionConfig.\n\nWhat do you think?", "author": "kostola", "createdAt": "2020-04-16T08:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4Njk2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r410286962", "bodyText": "Based on your suggestion, I wrapped the ID generation logic in ExecutionIdSupplier.", "author": "kostola", "createdAt": "2020-04-17T15:09:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzg2NA=="}], "type": "inlineReview"}, {"oid": "acc7e5a18502673faa0e09ce641bb0b0400b8445", "url": "https://github.com/kiegroup/kogito-runtimes/commit/acc7e5a18502673faa0e09ce641bb0b0400b8445", "message": "[KOGITO-1869] Add ExecutionIdSupplier and use it for DMN execution id generation", "committedDate": "2020-04-17T14:12:47Z", "type": "forcePushed"}, {"oid": "f0bd410ed31fe39541a9d71680e9e54a0888280f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f0bd410ed31fe39541a9d71680e9e54a0888280f", "message": "[KOGITO-1869] Add DecisionExecutionIdUtilsTest", "committedDate": "2020-04-20T08:26:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI4NTM1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411285355", "bodyText": "Sorry, no. This shall be parametrised in some way, we cannot enforce all users to be impacted by this UUID, especially considering then also Trusty will need to plug their own supplied (for instance, process execution ID).", "author": "tarilabs", "createdAt": "2020-04-20T10:58:59Z", "path": "kogito-codegen/src/main/resources/class-templates/DMNApplicationClassDeclTemplate.java", "diffHunk": "@@ -8,7 +8,7 @@ public void init(org.kie.kogito.Application app) {\n     }\n \n     public org.kie.kogito.decision.DecisionModel getDecisionModel(java.lang.String namespace, java.lang.String name) {\n-        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name);\n+        return new org.kie.kogito.dmn.DmnDecisionModel(dmnRuntime, namespace, name, new org.kie.kogito.dmn.DmnExecutionIdSupplier());", "originalCommit": "f0bd410ed31fe39541a9d71680e9e54a0888280f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1MjQxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411352419", "bodyText": "I created a new ticket for the task of making the injection logic pluggable.\nIn fact the ID is not required in this phase, since the Trusty addon that requires it is not yet ready. I will revert this row back to the previous version and do the injection properly only later when really needed.", "author": "kostola", "createdAt": "2020-04-20T12:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI4NTM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MzI1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411363258", "bodyText": "sounds ok, you can use JavaParser on the kogito codegen side to append the last argument when configured for the ID provider my2c", "author": "tarilabs", "createdAt": "2020-04-20T13:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI4NTM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwMzc1Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411403757", "bodyText": "Yes that could be a valid idea \ud83d\udc4d", "author": "kostola", "createdAt": "2020-04-20T14:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI4NTM1NQ=="}], "type": "inlineReview"}, {"oid": "ee64e945b7d0e26bdfacd8a8c4184776fc4740bb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ee64e945b7d0e26bdfacd8a8c4184776fc4740bb", "message": "[KOGITO-1869] DmnDecisionModel injects evaluation id", "committedDate": "2020-04-20T13:03:59Z", "type": "commit"}, {"oid": "242ce11dae5937b4140be30eb08c139d4ab3511f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/242ce11dae5937b4140be30eb08c139d4ab3511f", "message": "[KOGITO-1869] Add ExecutionIdSupplier and use it for DMN execution id generation", "committedDate": "2020-04-20T13:03:59Z", "type": "commit"}, {"oid": "ee76095384debbae24ae8b4c798a5bc58a400f97", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ee76095384debbae24ae8b4c798a5bc58a400f97", "message": "[KOGITO-1869] ExecutionIdSupplier is now optional in DmnDecisionModel", "committedDate": "2020-04-20T13:03:59Z", "type": "commit"}, {"oid": "9410b8af8c4a9fe2f01580a66d58d704a370a3e2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9410b8af8c4a9fe2f01580a66d58d704a370a3e2", "message": "[KOGITO-1869] Add DecisionExecutionIdUtilsTest", "committedDate": "2020-04-20T13:03:59Z", "type": "commit"}, {"oid": "241ff049ccc9b8fed0f2b0120ee7d9722136c731", "url": "https://github.com/kiegroup/kogito-runtimes/commit/241ff049ccc9b8fed0f2b0120ee7d9722136c731", "message": "[KOGITO-1869] Revert DMNApplicationClassDeclTemplate", "committedDate": "2020-04-20T13:03:59Z", "type": "commit"}, {"oid": "241ff049ccc9b8fed0f2b0120ee7d9722136c731", "url": "https://github.com/kiegroup/kogito-runtimes/commit/241ff049ccc9b8fed0f2b0120ee7d9722136c731", "message": "[KOGITO-1869] Revert DMNApplicationClassDeclTemplate", "committedDate": "2020-04-20T13:03:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDAwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411364009", "bodyText": "missing license header.", "author": "tarilabs", "createdAt": "2020-04-20T13:10:49Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/ExecutionIdSupplier.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.kie.kogito;", "originalCommit": "241ff049ccc9b8fed0f2b0120ee7d9722136c731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwOTE4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411409181", "bodyText": "Added missing header", "author": "kostola", "createdAt": "2020-04-20T14:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDA2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411364064", "bodyText": "missing license header.", "author": "tarilabs", "createdAt": "2020-04-20T13:10:54Z", "path": "api/kogito-api/src/main/java/org/kie/kogito/decision/DecisionExecutionIdUtils.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.kie.kogito.decision;", "originalCommit": "241ff049ccc9b8fed0f2b0120ee7d9722136c731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwOTI3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411409279", "bodyText": "Added missing header", "author": "kostola", "createdAt": "2020-04-20T14:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDExNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411364114", "bodyText": "missing license header.", "author": "tarilabs", "createdAt": "2020-04-20T13:10:59Z", "path": "api/kogito-api/src/test/java/org/kie/kogito/decision/DecisionExecutionIdUtilsTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.decision;", "originalCommit": "241ff049ccc9b8fed0f2b0120ee7d9722136c731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwOTM3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411409379", "bodyText": "Added missing header", "author": "kostola", "createdAt": "2020-04-20T14:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDE5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411364190", "bodyText": "missing license header.", "author": "tarilabs", "createdAt": "2020-04-20T13:11:06Z", "path": "drools/kogito-dmn/src/main/java/org/kie/kogito/dmn/DmnExecutionIdSupplier.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.kie.kogito.dmn;", "originalCommit": "241ff049ccc9b8fed0f2b0120ee7d9722136c731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwOTQ0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/447#discussion_r411409447", "bodyText": "Added missing header", "author": "kostola", "createdAt": "2020-04-20T14:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NDE5MA=="}], "type": "inlineReview"}, {"oid": "9d16e04cfe67c4a2e810fec547b82fb6c0984d15", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9d16e04cfe67c4a2e810fec547b82fb6c0984d15", "message": "[KOGITO-1869] Add missing license headers", "committedDate": "2020-04-20T14:08:57Z", "type": "commit"}]}