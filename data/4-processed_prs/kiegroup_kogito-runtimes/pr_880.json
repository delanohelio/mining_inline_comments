{"pr_number": 880, "pr_title": "KOGITO-3819 Ensure same Process instance is returned in Processes.fin\u2026", "pr_createdAt": "2020-11-10T09:52:34Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/880", "timeline": [{"oid": "9b625364793d3b8c4bfabad4bbc7ecdfac9ca21f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/9b625364793d3b8c4bfabad4bbc7ecdfac9ca21f", "message": "KOGITO-3819 Ensure same Process instance is returned in Processes.findProcessById", "committedDate": "2020-11-10T09:51:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MTE0Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/880#discussion_r525361143", "bodyText": "just a question, keeping all  Processes in-memory and never removing them, could bring issues? I mean because it has references to all processInstances for example, right?", "author": "tiagodolphine", "createdAt": "2020-11-17T17:47:05Z", "path": "kogito-codegen/src/main/resources/class-templates/ProcessContainerTemplate.java", "diffHunk": "@@ -3,14 +3,16 @@\n public class Processes implements org.kie.kogito.process.Processes {\n \n     private final Application application;\n+    private java.util.Map<String, org.kie.kogito.process.Process<? extends org.kie.kogito.Model>> mappedProcesses = new java.util.concurrent.ConcurrentHashMap<>();\n \n     public Processes(Application application) {\n         this.application = application;\n     }\n \n     public org.kie.kogito.process.Process<? extends org.kie.kogito.Model> processById(String processId) {\n-        if (\"$ProcessId\".equals(processId))\n-            return new $ProcessClassName$(application).configure();\n+        if (\"$ProcessId\".equals(processId)) {\n+            return mappedProcesses.computeIfAbsent(\"$ProcessId\", k -> new $ProcessClassName$(application).configure());", "originalCommit": "9b625364793d3b8c4bfabad4bbc7ecdfac9ca21f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYxNTA1Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/880#discussion_r525615057", "bodyText": "I think is fine for Process to be available in memory, this is just the amount of process inside the project, so should be minimal number. Regarding process instances, if you use inmemory they will remain in memory anyway ( inside a map ) while they are running. To avoid that, or if that is somehow a limitation, people should switch to one of the db options.\nThe issue here is that we were creating more Processes ( object instances of it ) than needed, missing the correct references to the in memory map of ProcessInstances.", "author": "cristianonicolai", "createdAt": "2020-11-18T00:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MTE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwNjY3MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/880#discussion_r525906670", "bodyText": "+1 for keeping processes (process definitions) in memory. It is roughly the same as with KIE Server where all deployed processes were held in memory inside deployments.", "author": "MarianMacik", "createdAt": "2020-11-18T08:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MTE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNTc0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/880#discussion_r526015744", "bodyText": "+1", "author": "tiagodolphine", "createdAt": "2020-11-18T11:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MTE0Mw=="}], "type": "inlineReview"}]}