{"pr_number": 516, "pr_title": "KOGITO-2215 - generate operational and domain specific grafana dashboards", "pr_createdAt": "2020-05-19T13:00:02Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/516", "timeline": [{"oid": "02058e852e090d3f0ad38d6bac66d740530e30a6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/02058e852e090d3f0ad38d6bac66d740530e30a6", "message": "generate operational and domain specific grafana dashboards", "committedDate": "2020-05-19T12:49:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNjM4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427306389", "bodyText": "is this intended?", "author": "evacchi", "createdAt": "2020-05-19T13:35:02Z", "path": "kogito-codegen/src/main/resources/grafana-dashboard-template/operational-dashboard-template.json", "diffHunk": "@@ -481,7 +481,7 @@\n     ]\n   },\n   \"timezone\": \"\",\n-  \"title\": \"$handlerName$ endpoint metrics\",\n+  \"title\": \"\",", "originalCommit": "02058e852e090d3f0ad38d6bac66d740530e30a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMjgxNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427332814", "bodyText": "Yeah, the title of the dashboard is set at code level when the template is imported", "author": "r00ta", "createdAt": "2020-05-19T14:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzI5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427943297", "bodyText": "Is it possible to have a null type?\nCan you please log (warning?) the node ID in this case?", "author": "danielezonca", "createdAt": "2020-05-20T11:43:09Z", "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -39,60 +41,52 @@ private GrafanaConfigurationWriter() {\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates an operational grafana dashboard based on a given template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param handlerName: The name of the endpoint.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param handlerName:  The name of the endpoint.\n      * @return: The template customized for the endpoint.\n      */\n-    public static String generateDashboardForEndpoint(String templatePath, String handlerName) {\n+    public static String generateOperationalDashboard(String templatePath, String handlerName) throws IOException {\n         String template = readStandardDashboard(templatePath);\n-        return customizeTemplate(template, handlerName);\n+        template = customizeTemplate(template, handlerName);\n+        JGrafana jgrafana;\n+        jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint operational dashboard\", handlerName));\n+\n+        return jgrafana.serialize();\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates domain specific dashboard from a given dashboard template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param endpoint: The name of the endpoint.\n-     * @param decisions: The decisions in the DMN model.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param endpoint:     The name of the endpoint.\n+     * @param decisions:    The decisions in the DMN model.\n      * @return: The customized template containing also specific panels for the DMN decisions that have been specified in the arguments.\n      */\n-    public static String generateDashboardForDMNEndpoint(String templatePath, String endpoint, List<Decision> decisions) {\n+    public static String generateDomainSpecificDMNDashboard(String templatePath, String endpoint, List<Decision> decisions) throws IOException {\n         String template = readStandardDashboard(templatePath);\n         template = customizeTemplate(template, endpoint);\n \n-        JGrafana jgrafana;\n-        try {\n-            jgrafana = JGrafana.parse(template);\n-        } catch (IOException e) {\n-            logger.warn(\"Could not read the grafana dashboard template.\", e);\n-            return null;\n-        }\n+        JGrafana jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint domain specific dashboard\", endpoint));\n \n         for (Decision decision : decisions) {\n-            String type = decision.getVariable().getTypeRef().getLocalPart();\n-            if (SupportedDecisionTypes.isSupported(type)) {\n+            QName type = decision.getVariable().getTypeRef();\n+            if (type != null && SupportedDecisionTypes.isSupported(type.getLocalPart())) {", "originalCommit": "02058e852e090d3f0ad38d6bac66d740530e30a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NzM5Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427947396", "bodyText": "I found during the demo that yes, this is possible for some dmn model. I will add a log", "author": "r00ta", "createdAt": "2020-05-20T11:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzIyNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427963224", "bodyText": "Good to know :)", "author": "danielezonca", "createdAt": "2020-05-20T12:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0MzI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDIyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427944227", "bodyText": "I think error fit better", "author": "danielezonca", "createdAt": "2020-05-20T11:44:59Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -168,16 +171,29 @@ public DecisionContainerGenerator moduleGenerator() {\n         return generatedFiles;\n     }\n \n-    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+    private void generateAndStoreGrafanaDashboards(DMNRestResourceGenerator resourceGenerator) {\n         Definitions definitions = resourceGenerator.getDmnModel().getDefinitions();\n         List<Decision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof Decision).map(x -> (Decision) x).collect(Collectors.toList());\n \n-        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(grafanaTemplatePath, resourceGenerator.getNameURL(), decisions);\n+        String operationalDashboard = null;\n+        String domainDashboard = null;\n+\n+        try {\n+            operationalDashboard = GrafanaConfigurationWriter.generateOperationalDashboard(operationalDashboardDmnTemplate, resourceGenerator.getNameURL());\n+            domainDashboard = GrafanaConfigurationWriter.generateDomainSpecificDMNDashboard(domainDashboardDmnTemplate, resourceGenerator.getNameURL(), decisions);\n+        } catch (IOException e) {\n+            logger.warn(\"Could not create the grafana dashboards for the endpoint \" + resourceGenerator.getNameURL(), e);", "originalCommit": "02058e852e090d3f0ad38d6bac66d740530e30a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0ODg2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427948868", "bodyText": "Fine, do you think we should also stop the execution? For me if we log it as error, then we should not move forward with the compilation wdyt @danielezonca ?", "author": "r00ta", "createdAt": "2020-05-20T11:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk1MDM4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427950384", "bodyText": "Will move to a runtime exception btw, so the execution will terminate", "author": "r00ta", "createdAt": "2020-05-20T11:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDIyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MzU0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427963546", "bodyText": "I think it is fine to stop the execution for now. If we want to make dashboard generation as optional, we will do in another ticket :)", "author": "danielezonca", "createdAt": "2020-05-20T12:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDQwNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427944406", "bodyText": "Can you please format both method invocation in the same way?", "author": "danielezonca", "createdAt": "2020-05-20T11:45:23Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/decision/DecisionCodegen.java", "diffHunk": "@@ -168,16 +171,29 @@ public DecisionContainerGenerator moduleGenerator() {\n         return generatedFiles;\n     }\n \n-    private void generateAndStoreGrafanaDashboard(DMNRestResourceGenerator resourceGenerator) {\n+    private void generateAndStoreGrafanaDashboards(DMNRestResourceGenerator resourceGenerator) {\n         Definitions definitions = resourceGenerator.getDmnModel().getDefinitions();\n         List<Decision> decisions = definitions.getDrgElement().stream().filter(x -> x.getParentDRDElement() instanceof Decision).map(x -> (Decision) x).collect(Collectors.toList());\n \n-        String dashboard = GrafanaConfigurationWriter.generateDashboardForDMNEndpoint(grafanaTemplatePath, resourceGenerator.getNameURL(), decisions);\n+        String operationalDashboard = null;\n+        String domainDashboard = null;\n+\n+        try {\n+            operationalDashboard = GrafanaConfigurationWriter.generateOperationalDashboard(operationalDashboardDmnTemplate, resourceGenerator.getNameURL());\n+            domainDashboard = GrafanaConfigurationWriter.generateDomainSpecificDMNDashboard(domainDashboardDmnTemplate, resourceGenerator.getNameURL(), decisions);\n+        } catch (IOException e) {\n+            logger.warn(\"Could not create the grafana dashboards for the endpoint \" + resourceGenerator.getNameURL(), e);\n+            return;\n+        }\n+\n+        generatedFiles.add(new org.kie.kogito.codegen.GeneratedFile( org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n+                                                                     \"dashboards/operational-dashboard-\" + resourceGenerator.getNameURL() + \".json\",\n+                                                                     operationalDashboard));\n         generatedFiles.add(\n                 new org.kie.kogito.codegen.GeneratedFile(\n                         org.kie.kogito.codegen.GeneratedFile.Type.RESOURCE,\n-                        \"dashboards/dashboard-endpoint-\" + resourceGenerator.getNameURL() + \".json\",\n-                        dashboard));\n+                        \"dashboards/domain-dashboard-\" + resourceGenerator.getNameURL() + \".json\",\n+                        domainDashboard));", "originalCommit": "02058e852e090d3f0ad38d6bac66d740530e30a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MTIxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427961217", "bodyText": "Fixed", "author": "r00ta", "createdAt": "2020-05-20T12:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NDQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTg3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427945875", "bodyText": "Can you please try-catch the checked exception, log it and propagate a runtime exception?", "author": "danielezonca", "createdAt": "2020-05-20T11:48:18Z", "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -39,60 +41,52 @@ private GrafanaConfigurationWriter() {\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates an operational grafana dashboard based on a given template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param handlerName: The name of the endpoint.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param handlerName:  The name of the endpoint.\n      * @return: The template customized for the endpoint.\n      */\n-    public static String generateDashboardForEndpoint(String templatePath, String handlerName) {\n+    public static String generateOperationalDashboard(String templatePath, String handlerName) throws IOException {\n         String template = readStandardDashboard(templatePath);\n-        return customizeTemplate(template, handlerName);\n+        template = customizeTemplate(template, handlerName);\n+        JGrafana jgrafana;\n+        jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint operational dashboard\", handlerName));\n+\n+        return jgrafana.serialize();", "originalCommit": "02058e852e090d3f0ad38d6bac66d740530e30a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MTUxMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427961513", "bodyText": "Done, feel free to close resolve the conversation if you are ok with the new implementation", "author": "r00ta", "createdAt": "2020-05-20T12:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NjI3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427946271", "bodyText": "Why have you decided to propagate IOException? I prefer the previous code :)", "author": "danielezonca", "createdAt": "2020-05-20T11:49:08Z", "path": "grafana-api/src/main/java/org/kie/kogito/grafana/GrafanaConfigurationWriter.java", "diffHunk": "@@ -39,60 +41,52 @@ private GrafanaConfigurationWriter() {\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates an operational grafana dashboard based on a given template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param handlerName: The name of the endpoint.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param handlerName:  The name of the endpoint.\n      * @return: The template customized for the endpoint.\n      */\n-    public static String generateDashboardForEndpoint(String templatePath, String handlerName) {\n+    public static String generateOperationalDashboard(String templatePath, String handlerName) throws IOException {\n         String template = readStandardDashboard(templatePath);\n-        return customizeTemplate(template, handlerName);\n+        template = customizeTemplate(template, handlerName);\n+        JGrafana jgrafana;\n+        jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint operational dashboard\", handlerName));\n+\n+        return jgrafana.serialize();\n     }\n \n     /**\n-     * Adds a panel of a type to the dashboard.\n+     * Generates domain specific dashboard from a given dashboard template.\n      *\n-     * @param templatePath:  The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n-     * @param endpoint: The name of the endpoint.\n-     * @param decisions: The decisions in the DMN model.\n+     * @param templatePath: The path to the dashboard template. It must be a valid grafana dashboard in JSON format.\n+     * @param endpoint:     The name of the endpoint.\n+     * @param decisions:    The decisions in the DMN model.\n      * @return: The customized template containing also specific panels for the DMN decisions that have been specified in the arguments.\n      */\n-    public static String generateDashboardForDMNEndpoint(String templatePath, String endpoint, List<Decision> decisions) {\n+    public static String generateDomainSpecificDMNDashboard(String templatePath, String endpoint, List<Decision> decisions) throws IOException {\n         String template = readStandardDashboard(templatePath);\n         template = customizeTemplate(template, endpoint);\n \n-        JGrafana jgrafana;\n-        try {\n-            jgrafana = JGrafana.parse(template);\n-        } catch (IOException e) {\n-            logger.warn(\"Could not read the grafana dashboard template.\", e);\n-            return null;\n-        }\n+        JGrafana jgrafana = JGrafana.parse(template).setTitle(String.format(\"%s endpoint domain specific dashboard\", endpoint));\n \n         for (Decision decision : decisions) {\n-            String type = decision.getVariable().getTypeRef().getLocalPart();\n-            if (SupportedDecisionTypes.isSupported(type)) {\n+            QName type = decision.getVariable().getTypeRef();\n+            if (type != null && SupportedDecisionTypes.isSupported(type.getLocalPart())) {\n                 jgrafana.addPanel(PanelType.GRAPH,\n                                   \"Decision \" + decision.getName(),\n                                   String.format(\"%s_dmn_result{endpoint = \\\"%s\\\", decision = \\\"%s\\\"}\",\n                                                 type,\n                                                 endpoint,\n                                                 decision.getName()),\n-                                  SupportedDecisionTypes.getGrafanaFunction(type));\n+                                  SupportedDecisionTypes.getGrafanaFunction(type.getLocalPart()));\n             }\n         }\n \n-        try {\n-            return jgrafana.serialize();\n-        } catch (IOException e) {\n-            logger.warn(\"Could not serialize the grafana dashboard template.\", e);\n-            return null;\n-        }\n+        return jgrafana.serialize();", "originalCommit": "02058e852e090d3f0ad38d6bac66d740530e30a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MTk3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/516#discussion_r427961971", "bodyText": "Done", "author": "r00ta", "createdAt": "2020-05-20T12:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NjI3MQ=="}], "type": "inlineReview"}, {"oid": "ec9ba96ef3e718fb2a9eecb715ea5161f0f54e3c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ec9ba96ef3e718fb2a9eecb715ea5161f0f54e3c", "message": "Move to unchecked exceptions and fix comments", "committedDate": "2020-05-20T12:14:52Z", "type": "commit"}, {"oid": "3487f2596ed7bb47e38e676baaf1720fd07e83ff", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3487f2596ed7bb47e38e676baaf1720fd07e83ff", "message": "Merge branch 'master' into KOGITO-2215-split-dashboards", "committedDate": "2020-05-21T08:09:16Z", "type": "commit"}, {"oid": "68914eb3f1a1d40cf12d788276c6e023edb14c34", "url": "https://github.com/kiegroup/kogito-runtimes/commit/68914eb3f1a1d40cf12d788276c6e023edb14c34", "message": "Merge branch 'master' into KOGITO-2215-split-dashboards", "committedDate": "2020-05-21T13:07:56Z", "type": "commit"}, {"oid": "e3ba588cb8e99a07aa2d678d35e26b32ca4ff8ac", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e3ba588cb8e99a07aa2d678d35e26b32ca4ff8ac", "message": "update dmn dashboard test", "committedDate": "2020-05-21T13:16:59Z", "type": "commit"}]}