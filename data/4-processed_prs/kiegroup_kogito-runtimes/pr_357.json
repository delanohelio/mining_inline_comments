{"pr_number": 357, "pr_title": "KOGITO-1163 Call to Jobs service fails on OpenShift ", "pr_createdAt": "2020-03-06T20:36:58Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/357", "timeline": [{"oid": "60083e31fb1af295260e909608cc5208a20bcd83", "url": "https://github.com/kiegroup/kogito-runtimes/commit/60083e31fb1af295260e909608cc5208a20bcd83", "message": "KOGITO-1163 Call to Jobs service fails on OpenShift - fix url without host", "committedDate": "2020-03-06T20:32:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNTY3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r389305675", "bodyText": "Wouldn't it have more sense to thrown an exception in case jobServiceUrl is null?\nFrom my point of view it is not valid value and we should fail fast.", "author": "sutaakar", "createdAt": "2020-03-07T19:22:40Z", "path": "addons/jobs/jobs-management-common/src/main/java/org/kie/kogito/jobs/management/RestJobsService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.management;\n+\n+import java.net.URI;\n+import java.util.Objects;\n+\n+import org.kie.kogito.jobs.JobsService;\n+import org.kie.kogito.jobs.ProcessInstanceJobDescription;\n+import org.kie.kogito.jobs.api.URIBuilder;\n+\n+public abstract class RestJobsService implements JobsService {\n+\n+    public static final String JOBS_PATH = \"/jobs\";\n+\n+    private URI jobsServiceUri;\n+    private String callbackEndpoint;\n+\n+    public RestJobsService(String jobServiceUrl, String callbackEndpoint) {\n+        this.jobsServiceUri = Objects.nonNull(jobServiceUrl) ? buildJobsServiceURI(jobServiceUrl) : null;", "originalCommit": "60083e31fb1af295260e909608cc5208a20bcd83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyOTgxOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r389629818", "bodyText": "That is a point but when initializing the runtime with quarkus, in some step it instantiates the bean on CDI using the default constructor, with no args and in this case throwing an exception will break the startup, I tested it =/\nSee https://quarkus.io/guides/cdi-reference on item 5.4", "author": "tiagodolphine", "createdAt": "2020-03-09T12:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNTY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0ODEyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r389648127", "bodyText": "ok", "author": "sutaakar", "createdAt": "2020-03-09T13:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwNTY3NQ=="}], "type": "inlineReview"}, {"oid": "e65165b6b9be74e22033635a71bcbcba45b93f12", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e65165b6b9be74e22033635a71bcbcba45b93f12", "message": "Adding unit tests in job management modules", "committedDate": "2020-03-10T19:25:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390729197", "bodyText": "test scope?", "author": "cristianonicolai", "createdAt": "2020-03-11T03:35:51Z", "path": "addons/jobs/jobs-api/pom.xml", "diffHunk": "@@ -11,6 +11,18 @@\n   <name>Jobs API</name>\n   <description>Jobs API used by both service and client</description>\n \n+  <dependencies>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>", "originalCommit": "e65165b6b9be74e22033635a71bcbcba45b93f12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxMzMwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390913303", "bodyText": "AFAIK the test scope is inherited from dependency declaration.\nThough it would be good to declare it here explicitly.", "author": "sutaakar", "createdAt": "2020-03-11T11:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTcxNA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390729714", "bodyText": "maybe just do import static here as well", "author": "cristianonicolai", "createdAt": "2020-03-11T03:38:18Z", "path": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.management.quarkus;\n+\n+import javax.enterprise.inject.Instance;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.WebClient;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.jobs.ExactExpirationTime;\n+import org.kie.kogito.jobs.ProcessInstanceJobDescription;\n+import org.kie.kogito.jobs.ProcessJobDescription;\n+import org.kie.kogito.jobs.api.Job;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxJobsServiceTest {\n+\n+    public static final String CALLBACK_URL = \"http://localhost\";\n+    public static final String JOB_SERVICE_URL = \"http://localhost:8085\";\n+\n+    private VertxJobsService tested;\n+\n+    @Mock\n+    private Vertx vertx;\n+\n+    @Mock\n+    private WebClient webClient;\n+\n+    @Mock\n+    private Instance instance;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        when(instance.isResolvable()).thenReturn(true);\n+        when(instance.get()).thenReturn(webClient);\n+\n+        tested = new VertxJobsService(JOB_SERVICE_URL, CALLBACK_URL, vertx, instance);\n+        tested.initialize();\n+    }\n+\n+    @Test\n+    void scheduleProcessJob() {\n+        ProcessJobDescription processJobDescription = ProcessJobDescription.of(ExactExpirationTime.now(),\n+                                                                               1,\n+                                                                               \"processId\");\n+        Assertions", "originalCommit": "e65165b6b9be74e22033635a71bcbcba45b93f12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MjgxMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390952813", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-03-11T13:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTk1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390729955", "bodyText": "if you need to declare a depency version, that should be done via depencymanagement in the root pom.", "author": "cristianonicolai", "createdAt": "2020-03-11T03:39:13Z", "path": "addons/jobs/jobs-management-springboot-addon/pom.xml", "diffHunk": "@@ -53,5 +56,28 @@\n       <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n       <scope>provided</scope>\n     </dependency>\n+\n+    <!-- Test -->\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-logging</groupId>\n+      <artifactId>commons-logging</artifactId>\n+      <version>1.2</version>", "originalCommit": "e65165b6b9be74e22033635a71bcbcba45b93f12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1Nzk3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390957979", "bodyText": "great point, I need to add this dependency because it is required running the spring tests, but I added the commons-logging-jboss-logging instead and it works fine now, there is already this dep on bom.", "author": "tiagodolphine", "createdAt": "2020-03-11T13:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyOTk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDA2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390730066", "bodyText": "same here about using import static instead.", "author": "cristianonicolai", "createdAt": "2020-03-11T03:39:45Z", "path": "addons/jobs/jobs-management-springboot-addon/src/test/java/org/kie/kogito/jobs/management/springboot/SpringRestJobsServiceTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.jobs.management.springboot;\n+\n+import java.net.URI;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.jobs.ExactExpirationTime;\n+import org.kie.kogito.jobs.ProcessInstanceJobDescription;\n+import org.kie.kogito.jobs.ProcessJobDescription;\n+import org.kie.kogito.jobs.api.Job;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestTemplate;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SpringRestJobsServiceTest {\n+\n+    public static final String CALLBACK_URL = \"http://localhost\";\n+    public static final String JOB_SERVICE_URL = \"http://localhost:8085\";\n+\n+    private SpringRestJobsService tested;\n+\n+    @Mock\n+    private RestTemplate restTemplate;\n+\n+    @BeforeEach\n+    void setUp() {\n+        this.tested = new SpringRestJobsService(JOB_SERVICE_URL, CALLBACK_URL, restTemplate);\n+        tested.initialize();\n+    }\n+\n+    @Test\n+    void scheduleProcessJob() {\n+        ProcessJobDescription processJobDescription = ProcessJobDescription.of(ExactExpirationTime.now(),\n+                                                                               1,\n+                                                                               \"processId\");\n+        Assertions", "originalCommit": "e65165b6b9be74e22033635a71bcbcba45b93f12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1Mjg3OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390952879", "bodyText": "done", "author": "tiagodolphine", "createdAt": "2020-03-11T13:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDI2NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390730264", "bodyText": "should it be added before quarkus and springboot?", "author": "cristianonicolai", "createdAt": "2020-03-11T03:40:41Z", "path": "addons/jobs/pom.xml", "diffHunk": "@@ -13,5 +13,6 @@\n     <module>jobs-api</module>\n     <module>jobs-management-quarkus-addon</module>\n     <module>jobs-management-springboot-addon</module>\n+    <module>jobs-management-common</module>", "originalCommit": "e65165b6b9be74e22033635a71bcbcba45b93f12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MDY4Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/357#discussion_r390960687", "bodyText": "I'll change it to be more semantically correct, but maven during the build has its own mechanism to sort the order the modules are built, http://maven.apache.org/guides/mini/guide-multiple-modules.html, on in the end it does not make difference the order we declare.", "author": "tiagodolphine", "createdAt": "2020-03-11T13:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczMDI2NA=="}], "type": "inlineReview"}, {"oid": "702d1a9f0b558fa447117441d4583e4d127edbbe", "url": "https://github.com/kiegroup/kogito-runtimes/commit/702d1a9f0b558fa447117441d4583e4d127edbbe", "message": "Applying PR comments", "committedDate": "2020-03-11T13:16:18Z", "type": "commit"}, {"oid": "6b20e64535772d5f82e45344a2fdd54f39d0cf93", "url": "https://github.com/kiegroup/kogito-runtimes/commit/6b20e64535772d5f82e45344a2fdd54f39d0cf93", "message": "Fix some sonar issues", "committedDate": "2020-03-11T14:47:20Z", "type": "commit"}]}