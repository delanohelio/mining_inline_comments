{"pr_number": 794, "pr_title": "[KOGITO-3495] Error handling on RestworkItemhandler", "pr_createdAt": "2020-09-30T09:51:42Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/794", "timeline": [{"oid": "800dee1f7e166c900fe59b753907e58e450eb44b", "url": "https://github.com/kiegroup/kogito-runtimes/commit/800dee1f7e166c900fe59b753907e58e450eb44b", "message": "[KOGITO-3495] Error handling on RestworkItemhandler\n\nIf call fails, event will be null, then exception is thrown", "committedDate": "2020-09-30T10:20:14Z", "type": "forcePushed"}, {"oid": "19f32f5af8ec9f64e0ffbbc5a40308f337d0b4aa", "url": "https://github.com/kiegroup/kogito-runtimes/commit/19f32f5af8ec9f64e0ffbbc5a40308f337d0b4aa", "message": "[KOGITO-3495] Error handling on RestworkItemhandler\n\nIf call fails, event will be null, then exception is thrown", "committedDate": "2020-10-02T13:34:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODc1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498818754", "bodyText": "Probably a better message would be welcome.", "author": "MarianMacik", "createdAt": "2020-10-02T13:24:27Z", "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "diffHunk": "@@ -87,28 +88,24 @@ public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         endPoint = resolvePathParams(endPoint, parameters, resolver);\n         URI uri = URI.create(endPoint);\n         String host = uri.getHost() != null ? uri.getHost() : hostProp;\n-        int port = uri.getPort() > 0? uri.getPort() : Integer.parseInt(portProp);\n+        int port = uri.getPort() > 0 ? uri.getPort() : Integer.parseInt(portProp);\n         HttpRequest<Buffer> request = client.request(method, port, host, uri.getPath());\n         if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n             request.basicAuthentication(user, password);\n         }\n         // execute request\n-         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n-                manager\n-                .completeWorkItem(\n-                                  workItem.getId(),\n-                                  Collections\n-                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> {\n+            if (event.cause() != null) {\n+                throw new WorkItemExecutionError(\"500\", event.cause());", "originalCommit": "800dee1f7e166c900fe59b753907e58e450eb44b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NTgwMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498845801", "bodyText": "As discussed, the code is expected.", "author": "MarianMacik", "createdAt": "2020-10-02T14:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0ODQxNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498848415", "bodyText": "This is required by WorkItemExecutionError. Since there is not easy way to extract the http error code of the rest invocation, a generic \"500\" is returned", "author": "fjtirado", "createdAt": "2020-10-02T14:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNDU1Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498824557", "bodyText": "Probably more straightforward would be\nif (event.failed()) {\n    throw new WorkItemExecutionError(\"500\", event.cause());\n}", "author": "MarianMacik", "createdAt": "2020-10-02T13:34:24Z", "path": "kogito-workitems/kogito-rest-workitem/src/main/java/org/kogito/workitem/rest/RestWorkItemHandler.java", "diffHunk": "@@ -87,28 +88,24 @@ public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {\n         endPoint = resolvePathParams(endPoint, parameters, resolver);\n         URI uri = URI.create(endPoint);\n         String host = uri.getHost() != null ? uri.getHost() : hostProp;\n-        int port = uri.getPort() > 0? uri.getPort() : Integer.parseInt(portProp);\n+        int port = uri.getPort() > 0 ? uri.getPort() : Integer.parseInt(portProp);\n         HttpRequest<Buffer> request = client.request(method, port, host, uri.getPath());\n         if (user != null && !user.trim().isEmpty() && password != null && !password.trim().isEmpty()) {\n             request.basicAuthentication(user, password);\n         }\n         // execute request\n-         Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> \n-                manager\n-                .completeWorkItem(\n-                                  workItem.getId(),\n-                                  Collections\n-                                      .singletonMap(RESULT, resultHandler.apply(inputModel, event.result().bodyAsJsonObject())));\n+        Handler<AsyncResult<HttpResponse<Buffer>>> handler = event -> {\n+            if (event.cause() != null) {", "originalCommit": "800dee1f7e166c900fe59b753907e58e450eb44b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0Nzk3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/794#discussion_r498847977", "bodyText": "thats better indeed", "author": "fjtirado", "createdAt": "2020-10-02T14:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNDU1Nw=="}], "type": "inlineReview"}, {"oid": "fcfc5e638e52a328b1c41ab783d837374e7773d2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fcfc5e638e52a328b1c41ab783d837374e7773d2", "message": "[KOGITO-3495] Error handling on RestworkItemhandler\n\nIf call fails, event will be null, then exception is thrown", "committedDate": "2020-10-02T14:21:20Z", "type": "forcePushed"}, {"oid": "0d3d61844ef2f4e6fd6b1d81da08b8c5fc4bb6a6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0d3d61844ef2f4e6fd6b1d81da08b8c5fc4bb6a6", "message": "[KOGITO-3495] Error handling on RestworkItemhandler\n\nIf call fails, event will be null, then exception is thrown", "committedDate": "2020-10-06T08:31:15Z", "type": "forcePushed"}, {"oid": "fea7bd34ff274c63b2c2e3eb5ea2e795aae2271e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/fea7bd34ff274c63b2c2e3eb5ea2e795aae2271e", "message": "[KOGITO-3495] Error handling on RestworkItemhandler\n\nIf call fails, event will be null, then work item is aborted", "committedDate": "2020-10-06T08:46:15Z", "type": "forcePushed"}, {"oid": "868798935118f87569890765c2daf6a9d9c16a5c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/868798935118f87569890765c2daf6a9d9c16a5c", "message": "[KOGITO-3495] Error handling on RestworkItemhandler\n\nIf call fails, event will be null, then work item is aborted", "committedDate": "2020-10-06T08:46:59Z", "type": "commit"}, {"oid": "868798935118f87569890765c2daf6a9d9c16a5c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/868798935118f87569890765c2daf6a9d9c16a5c", "message": "[KOGITO-3495] Error handling on RestworkItemhandler\n\nIf call fails, event will be null, then work item is aborted", "committedDate": "2020-10-06T08:46:59Z", "type": "forcePushed"}]}