{"pr_number": 699, "pr_title": "KOGITO-3071 - Explainability predict-api", "pr_createdAt": "2020-08-13T11:35:05Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/699", "timeline": [{"oid": "afcbf8cce71299be126b31e750ffcf78b0dfae16", "url": "https://github.com/kiegroup/kogito-runtimes/commit/afcbf8cce71299be126b31e750ffcf78b0dfae16", "message": "Predict API scaffolding", "committedDate": "2020-07-15T06:33:40Z", "type": "commit"}, {"oid": "375b14fcf8dcb0246f0bd70bd1c213122fa34086", "url": "https://github.com/kiegroup/kogito-runtimes/commit/375b14fcf8dcb0246f0bd70bd1c213122fa34086", "message": "rebase + fix Daniele's implementation + add tests", "committedDate": "2020-08-13T11:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkxNDY2NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469914665", "bodyText": "Scope test?", "author": "danielezonca", "createdAt": "2020-08-13T12:29:36Z", "path": "addons/tracing/tracing-decision-quarkus-addon/pom.xml", "diffHunk": "@@ -30,7 +30,16 @@\n       <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-vertx</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+      <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n \n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>", "originalCommit": "375b14fcf8dcb0246f0bd70bd1c213122fa34086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMTg0OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469921848", "bodyText": "Please create a ticket to refactor this code and use a proper discovery mechanism (SPI or similar)", "author": "danielezonca", "createdAt": "2020-08-13T12:42:28Z", "path": "addons/tracing/tracing-decision-common/src/main/java/org/kie/kogito/tracing/decision/explainability/ExplainabilityService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.explainability;\n+\n+import java.util.Collection;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictInput;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictOutput;\n+\n+import static java.util.Collections.singletonList;\n+\n+public class ExplainabilityService {\n+\n+    public static ExplainabilityService INSTANCE = new ExplainabilityService(singletonList(new DecisionExplainabilityResourceExecutor()));", "originalCommit": "375b14fcf8dcb0246f0bd70bd1c213122fa34086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMjI4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469922285", "bodyText": "What about log the exception too?", "author": "danielezonca", "createdAt": "2020-08-13T12:43:14Z", "path": "addons/tracing/tracing-decision-quarkus-addon/src/main/java/org/kie/kogito/tracing/decision/QuarkusExplainableResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictInput;\n+import org.kie.kogito.tracing.decision.explainability.ExplainabilityService;\n+\n+@Path(\"/predict\")\n+public class QuarkusExplainableResource {\n+\n+    private final Application application;\n+    private final ExplainabilityService explainabilityService = ExplainabilityService.INSTANCE;\n+\n+    @Inject\n+    public QuarkusExplainableResource(Application application) {\n+        this.application = application;\n+    }\n+\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_JSON})\n+    public Response predict(PredictInput input) {\n+        try {\n+            return Response.ok(explainabilityService.processRequest(application, input)).build();\n+        } catch (Exception e) {\n+            return Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();", "originalCommit": "375b14fcf8dcb0246f0bd70bd1c213122fa34086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMjU1NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r469922555", "bodyText": "What about log the exception too?", "author": "danielezonca", "createdAt": "2020-08-13T12:43:39Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootExplainableResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision;\n+\n+import org.kie.kogito.Application;\n+import org.kie.kogito.tracing.decision.explainability.ExplainabilityService;\n+import org.kie.kogito.tracing.decision.event.explainability.PredictInput;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+@RestController\n+@RequestMapping(\"/predict\")\n+public class SpringBootExplainableResource {\n+\n+    private final Application application;\n+    private final ExplainabilityService explainabilityService = ExplainabilityService.INSTANCE;\n+\n+    @Autowired\n+    public SpringBootExplainableResource(Application application) {\n+        this.application = application;\n+    }\n+\n+    @PostMapping(produces = APPLICATION_JSON_VALUE,\n+            consumes = APPLICATION_JSON_VALUE)\n+    public ResponseEntity<?> predict(PredictInput input) {\n+        try {\n+            return ResponseEntity.ok(explainabilityService.processRequest(application, input));\n+        } catch (Exception e) {\n+            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());", "originalCommit": "375b14fcf8dcb0246f0bd70bd1c213122fa34086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ccc5eeb7940c79f185e2be1882c2d8fe99df79c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5ccc5eeb7940c79f185e2be1882c2d8fe99df79c", "message": "add integration test with rest", "committedDate": "2020-08-13T20:50:04Z", "type": "commit"}, {"oid": "a4dc49828c9aab44d4090d7ffca0c551a6ac05df", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a4dc49828c9aab44d4090d7ffca0c551a6ac05df", "message": "remove unused dependency", "committedDate": "2020-08-13T20:51:19Z", "type": "commit"}, {"oid": "40466506f67cfabaa0f9247d3c280b03c03d881c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/40466506f67cfabaa0f9247d3c280b03c03d881c", "message": "Update SpringBootExplainableResource.java", "committedDate": "2020-08-17T08:05:02Z", "type": "commit"}, {"oid": "a01a7c91b0deb9865925b2274c1b4ba77931a319", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a01a7c91b0deb9865925b2274c1b4ba77931a319", "message": "Update QuarkusExplainableResource.java", "committedDate": "2020-08-17T08:05:25Z", "type": "commit"}, {"oid": "e7f1c30a968899f414cd310c0de1745511bc3cbc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e7f1c30a968899f414cd310c0de1745511bc3cbc", "message": "DTO update", "committedDate": "2020-08-17T16:09:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUwOTM1NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/699#discussion_r471509354", "bodyText": "I think it would be generally better to avoid the term perturbed here if possible. Not that it makes any practical difference, but it may sound confusing to read about perturbation where this is actually just covering an execution (which contains perturbed inputs). So I would suggest to change that from perturbedResult to executionResult.", "author": "tteofili", "createdAt": "2020-08-17T14:16:23Z", "path": "addons/tracing/tracing-decision-api/src/main/java/org/kie/kogito/tracing/decision/event/explainability/PredictOutput.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.tracing.decision.event.explainability;\n+\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class PredictOutput {\n+\n+    @JsonProperty(\"modelIdentifier\")\n+    private ModelIdentifier modelIdentifier;\n+\n+    @JsonProperty(\"perturbedResult\")\n+    private Map<String, Object> perturbedResult;\n+\n+    public PredictOutput() {\n+    }\n+\n+    public PredictOutput(ModelIdentifier modelIdentifier, Map<String, Object> perturbedResult) {\n+        this.modelIdentifier = modelIdentifier;\n+        this.perturbedResult = perturbedResult;\n+    }\n+\n+    public ModelIdentifier getModelIdentifier() {\n+        return modelIdentifier;\n+    }\n+\n+    public void setModelIdentifier(ModelIdentifier modelIdentifier) {\n+        this.modelIdentifier = modelIdentifier;\n+    }\n+\n+    public Map<String, Object> getPerturbedResult() {\n+        return perturbedResult;\n+    }\n+\n+    public void setPerturbedResult(Map<String, Object> perturbedResult) {\n+        this.perturbedResult = perturbedResult;\n+    }", "originalCommit": "a01a7c91b0deb9865925b2274c1b4ba77931a319", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}