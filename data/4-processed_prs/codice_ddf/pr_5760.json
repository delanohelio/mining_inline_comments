{"pr_number": 5760, "pr_title": "DDF-5581 Cosmetic Changes to Ruler on Map", "pr_createdAt": "2020-01-13T19:01:29Z", "pr_url": "https://github.com/codice/ddf/pull/5760", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDM1Mw==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366070353", "bodyText": "\u2753 Should we use this util class instead of doing it manually?\n\n  \n    \n      ddf/ui/packages/catalog-ui-search/src/main/webapp/js/DistanceUtils.js\n    \n    \n         Line 62\n      in\n      6a3da70\n    \n    \n    \n    \n\n        \n          \n           getDistanceFromMeters(distance, units) {", "author": "brjeter", "createdAt": "2020-01-13T22:48:01Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/presentation.tsx", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+type Props = {\n+  currentDistance: number\n+  left: String\n+  top: String\n+}\n+\n+const Root = styled.div<Props>`\n+  font-family: 'Inconsolata', 'Lucida Console', monospace;\n+  background: ${props => props.theme.backgroundModal};\n+  display: block;\n+  width: auto;\n+  height: auto;\n+  font-size: ${props => props.theme.mediumFontSize};\n+  position: absolute;\n+  text-align: left;\n+  padding: ${props => props.theme.minimumSpacing};\n+  max-width: 50%;\n+`\n+\n+const DistanceInfoText = styled.div`\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+`\n+\n+/*\n+ * Formats the current distance value to a string with the appropriate unit of measurement.\n+ */\n+const getDistanceText = (distance: number) => {\n+  // use meters when distance is under 1000m and convert to kilometers when \u22651000m\n+  const distanceText =\n+    distance < 1000 ? `${distance} m` : `${(distance * 0.001).toFixed(2)} km`", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDYyNA==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366070624", "bodyText": "\u2753 Same question.", "author": "brjeter", "createdAt": "2020-01-13T22:48:43Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/map-info/presentation.tsx", "diffHunk": "@@ -53,6 +55,29 @@ const metacardInfo = ({ attributes }: Props) =>\n     <MetacardInfo>{formatAttribute({ name, value })}</MetacardInfo>\n   ))\n \n+/*\n+   * Formats the current distance value to a string with the appropriate unit of measurement.\n+   */\n+const getDistanceText = (distance: number) => {\n+  // use meters when distance is under 1000m and convert to kilometers when \u22651000m\n+  const distanceText =\n+    distance < 1000\n+      ? `${distance.toFixed(2)} m`\n+      : `${(distance * 0.001).toFixed(2)} km`", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMTI5NQ==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366301295", "bodyText": "\u2753 Can we still use the addPointWithText() method with a different set of options to avoid having duplicate code here?", "author": "mdang8", "createdAt": "2020-01-14T12:05:00Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/cesium/map.cesium.js", "diffHunk": "@@ -507,24 +508,51 @@ module.exports = function CesiumMap(\n      */\n     addRulerPoint(coordinates, markerLabel) {\n       const { lat, lon } = coordinates\n+\n       // a point requires an altitude value so just use 0\n       const point = [lon, lat, 0]\n-      const options = {\n+      const pointObject = convertPointCoordinate(point)\n+      const cartographicPosition = Cesium.Cartographic.fromDegrees(\n+        pointObject.longitude,\n+        pointObject.latitude,\n+        pointObject.altitude\n+      )\n+      let cartesianPosition = map.scene.globe.ellipsoid.cartographicToCartesian(\n+        cartographicPosition\n+      )\n+      const billboardRef = billboardCollection.add({\n+        image: DrawingUtility.getCircle({\n+          fillColor: rulerColor,\n+          icon: null,\n+        }),\n+        position: cartesianPosition,\n         id: markerLabel,\n-        title: `Selected ruler coordinate '${markerLabel}'`,\n-        color: '#FC2803',\n-        icon: null,\n-        view: this,\n+        eyeOffset,\n+      })\n+      //if there is a terrain provider and no altitude has been specified, sample it from the configured terrain provider\n+      if (!pointObject.altitude && map.scene.terrainProvider) {\n+        const promise = Cesium.sampleTerrain(map.scene.terrainProvider, 5, [\n+          cartographicPosition,\n+        ])\n+        Cesium.when(promise, updatedCartographic => {\n+          if (updatedCartographic[0].height && !this.isDestroyed) {\n+            cartesianPosition = map.scene.globe.ellipsoid.cartographicToCartesian(\n+              updatedCartographic[0]\n+            )\n+            billboardRef.position = cartesianPosition\n+          }\n+        })\n       }\n-      const useCustomText = true\n+      map.scene.requestRender()\n \n-      return this.addPointWithText(point, options, useCustomText)\n+      return billboardRef", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMjkzMA==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366302930", "bodyText": "\u2753 Should these properties have defaults defined at the top?", "author": "mdang8", "createdAt": "2020-01-14T12:09:20Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.model.js", "diffHunk": "@@ -102,12 +102,27 @@ module.exports = Backbone.AssociatedModel.extend({\n   clearPoints() {\n     this.set({ points: [] })\n   },\n+  /*\n+   * Set coordinates of the ruler measurements starting point\n+   */\n+  setStartingCoordinates(coordinates) {\n+    this.set({ startingCoordinates: coordinates })\n+  },\n   /*\n    * Sets the current distance to the new given distance (in meters).\n    */\n   setCurrentDistance(distance) {\n     this.set({ currentDistance: distance })\n   },\n+  addDistanceInfo(distanceInfo) {\n+    this.set({ distanceInfo })\n+  },\n+  /*\n+   * set the position of DistanceInfo in px relative to the top left of the Cesium component\n+   */\n+  setDistanceInfoPosition(left, top) {\n+    this.set({ distanceInfo: { left, top } })", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwNDEyMw==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366304123", "bodyText": "\u270f\ufe0f const", "author": "mdang8", "createdAt": "2020-01-14T12:12:24Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.view.js", "diffHunk": "@@ -351,6 +361,21 @@ module.exports = Marionette.LayoutView.extend({\n       targetMetacard,\n     })\n   },\n+  updateDistance() {\n+    if (this.mapModel.get('measurementState') === 'START') {\n+        let lat = this.mapModel.get('mouseLat')\n+        let lon = this.mapModel.get('mouseLon')", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxMDQxMw==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366310413", "bodyText": "\u2757\ufe0f I don't think you should call setState() in the constructor. If you still want to use mapPropsToState() here, you could do this.state = { ...mapPropsToState(props), showDistance: false }.", "author": "mdang8", "createdAt": "2020-01-14T12:28:24Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import { hot } from 'react-hot-loader'\n+import withListenTo, { WithBackboneProps } from '../backbone-container'\n+\n+const LEFT_OFFSET = 390\n+const TOP_OFFSET = 180\n+\n+const DistanceInfoPresentation = require('./presentation').default\n+\n+const mapPropsToState = (props: Props) => {\n+  const { map } = props\n+  const distance = map.get('currentDistance')\n+  return {\n+    showDistance: map.get('measurementState') === 'START' && distance,\n+    currentDistance: distance,\n+    left: map.get('distanceInfo')['left'] - LEFT_OFFSET + 'px',\n+    top: map.get('distanceInfo')['top'] - TOP_OFFSET + 'px',\n+  }\n+}\n+\n+type Props = {\n+  map: Backbone.Model\n+} & WithBackboneProps\n+\n+type State = {\n+  showDistance: Boolean\n+  currentDistance: Number\n+  left: String\n+  top: String\n+}\n+\n+class DistanceInfo extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props)\n+    this.state = mapPropsToState(props)\n+    this.setState({ showDistance: false })", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxNDc2OQ==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366314769", "bodyText": "\u270f\ufe0f Can you add something here to tell the user that they can still use Ctrl+C to manually copy it?", "author": "mdang8", "createdAt": "2020-01-14T12:38:46Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/select-coordinates/select-coordinates.tsx", "diffHunk": "@@ -149,7 +131,7 @@ const generateClipboardHandler = (\n     })\n     clipboardInstance.on('error', (e: any) => {\n       announcement.announce({\n-        title: 'Press Ctrl+C to copy',\n+        title: 'Could not copy distance to clipboard',", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxOTUzNA==", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366319534", "bodyText": "\u2757\ufe0f It might be better to put this in componentDidMount() and remove the listeners in componentWillUnmount().", "author": "mdang8", "createdAt": "2020-01-14T12:50:16Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import { hot } from 'react-hot-loader'\n+import withListenTo, { WithBackboneProps } from '../backbone-container'\n+\n+const LEFT_OFFSET = 390\n+const TOP_OFFSET = 180\n+\n+const DistanceInfoPresentation = require('./presentation').default\n+\n+const mapPropsToState = (props: Props) => {\n+  const { map } = props\n+  const distance = map.get('currentDistance')\n+  return {\n+    showDistance: map.get('measurementState') === 'START' && distance,\n+    currentDistance: distance,\n+    left: map.get('distanceInfo')['left'] - LEFT_OFFSET + 'px',\n+    top: map.get('distanceInfo')['top'] - TOP_OFFSET + 'px',\n+  }\n+}\n+\n+type Props = {\n+  map: Backbone.Model\n+} & WithBackboneProps\n+\n+type State = {\n+  showDistance: Boolean\n+  currentDistance: Number\n+  left: String\n+  top: String\n+}\n+\n+class DistanceInfo extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props)\n+    this.state = mapPropsToState(props)\n+    this.setState({ showDistance: false })\n+    this.listenToMap()", "originalCommit": "d067fbffb2536863243e3ee2a39a9521bc739c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c25ff74b04b6423523217db0f14a857110bbddf8", "url": "https://github.com/codice/ddf/commit/c25ff74b04b6423523217db0f14a857110bbddf8", "message": "DDF-5581 initial cosmetic changes", "committedDate": "2020-01-16T18:39:29Z", "type": "commit"}, {"oid": "cdd8106daac16e1781f12b40da8a0f9bf99af424", "url": "https://github.com/codice/ddf/commit/cdd8106daac16e1781f12b40da8a0f9bf99af424", "message": "DDF-5581 added distance info component", "committedDate": "2020-01-16T18:39:30Z", "type": "commit"}, {"oid": "e4e05c0686021bd01669f08b3fcc0b065dfe45f6", "url": "https://github.com/codice/ddf/commit/e4e05c0686021bd01669f08b3fcc0b065dfe45f6", "message": "DDF-5581 map distance moves and dissapears according to measurement state", "committedDate": "2020-01-16T18:39:30Z", "type": "commit"}, {"oid": "def7d3dd622b49d125a4a9ee12566bb90a867655", "url": "https://github.com/codice/ddf/commit/def7d3dd622b49d125a4a9ee12566bb90a867655", "message": "DDF-5581  formatting and refactoring", "committedDate": "2020-01-16T18:39:30Z", "type": "commit"}, {"oid": "14a7df6097224c2ef944463fafbafccf922cd5a5", "url": "https://github.com/codice/ddf/commit/14a7df6097224c2ef944463fafbafccf922cd5a5", "message": "DDF-5581 fixes to distance listener", "committedDate": "2020-01-16T18:39:30Z", "type": "commit"}, {"oid": "1b7a9e752b0dbc31ec70a8d1725cfa7735e82879", "url": "https://github.com/codice/ddf/commit/1b7a9e752b0dbc31ec70a8d1725cfa7735e82879", "message": "DDF-5581 refactoring", "committedDate": "2020-01-16T18:39:30Z", "type": "commit"}, {"oid": "e0ce6873d88b2957a855f92739d6b9170915f2eb", "url": "https://github.com/codice/ddf/commit/e0ce6873d88b2957a855f92739d6b9170915f2eb", "message": "DDF-5581 merge for dynamic rulers", "committedDate": "2020-01-16T18:39:30Z", "type": "commit"}, {"oid": "824d12bcddaa19438a31a4bb01002e3db46efaa0", "url": "https://github.com/codice/ddf/commit/824d12bcddaa19438a31a4bb01002e3db46efaa0", "message": "DDF-5581 matt's suggestions", "committedDate": "2020-01-16T18:39:31Z", "type": "commit"}, {"oid": "aabe6db61dfd3aa60c1f2c91c4ba9d86f141aa24", "url": "https://github.com/codice/ddf/commit/aabe6db61dfd3aa60c1f2c91c4ba9d86f141aa24", "message": "DDF-5581 added default for startingCoordinates", "committedDate": "2020-01-16T18:39:31Z", "type": "commit"}, {"oid": "41d7bad2bce8dfe0cafbc0cff9637547172edc68", "url": "https://github.com/codice/ddf/commit/41d7bad2bce8dfe0cafbc0cff9637547172edc68", "message": "DDF-5581 jeter's suggestions", "committedDate": "2020-01-16T18:39:31Z", "type": "commit"}, {"oid": "41d7bad2bce8dfe0cafbc0cff9637547172edc68", "url": "https://github.com/codice/ddf/commit/41d7bad2bce8dfe0cafbc0cff9637547172edc68", "message": "DDF-5581 jeter's suggestions", "committedDate": "2020-01-16T18:39:31Z", "type": "forcePushed"}, {"oid": "5cb072d31ddf4aa435a467c72ae7a522330bc04f", "url": "https://github.com/codice/ddf/commit/5cb072d31ddf4aa435a467c72ae7a522330bc04f", "message": "DDF-5581 reformatting", "committedDate": "2020-01-16T19:24:58Z", "type": "commit"}, {"oid": "f670293bb35bcf4c9d1f021779305bc2629c3875", "url": "https://github.com/codice/ddf/commit/f670293bb35bcf4c9d1f021779305bc2629c3875", "message": "DDF-5581 ruler drawing pauses on map context menu", "committedDate": "2020-01-16T21:01:03Z", "type": "commit"}, {"oid": "cf58e42248fc7093283cc89f5a73b1c596416205", "url": "https://github.com/codice/ddf/commit/cf58e42248fc7093283cc89f5a73b1c596416205", "message": "DDF-5581 redraw ruler line on menu update", "committedDate": "2020-01-16T22:05:53Z", "type": "commit"}]}