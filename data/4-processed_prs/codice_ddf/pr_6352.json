{"pr_number": 6352, "pr_title": "Address some SonarQube findings and missing unit tests in catalog-solr-offline-gazetteer", "pr_createdAt": "2020-09-28T21:59:49Z", "pr_url": "https://github.com/codice/ddf/pull/6352", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDQ1OA==", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496260458", "bodyText": "NOTE: This will be easier to review if you ignore whitespace in the diff.", "author": "emmberk", "createdAt": "2020-09-28T22:00:18Z", "path": "catalog/solr/catalog-solr-offline-gazetteer/pom.xml", "diffHunk": "@@ -14,8 +14,8 @@\n \n  -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "originalCommit": "99dc4920674f517ce017191d8a47ad9b7fb700af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NTAzOQ==", "url": "https://github.com/codice/ddf/pull/6352#discussion_r497095039", "bodyText": "\ud83e\udd2f", "author": "bakejeyner", "createdAt": "2020-09-29T22:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDQ1OA=="}], "type": "inlineReview"}, {"oid": "dc521e8f64ea68916b97ed74ee2d5b60e376745f", "url": "https://github.com/codice/ddf/commit/dc521e8f64ea68916b97ed74ee2d5b60e376745f", "message": "Address SonarQube findings in BuildGazetteerSuggesterIndexCommand and add unit tests", "committedDate": "2020-09-28T22:04:55Z", "type": "commit"}, {"oid": "344f091a41a10a70d56148d6ba7b29064ffb2af4", "url": "https://github.com/codice/ddf/commit/344f091a41a10a70d56148d6ba7b29064ffb2af4", "message": "Extract common code to get the SolrClient and check the availability\n\ncleanup\n\nWIP Add force back", "committedDate": "2020-09-29T02:21:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0MTIzMg==", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496341232", "bodyText": "\u2757 @emmberk reminder to add this back in", "author": "emmberk", "createdAt": "2020-09-29T02:26:39Z", "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/SyncCatalogCommand.java", "diffHunk": "@@ -54,62 +45,25 @@\n     scope = \"offline-solr-gazetteer\",\n     name = \"synccatalog\",\n     description = \"Syncs all catalog items to the solr gazetteer collection\")\n-public class SyncCatalogCommand implements Action {\n+public class SyncCatalogCommand extends AbstractSolrClientCommand {\n \n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(RemoveAllOfflineSolrGazetteerCommand.class);\n-  public static final int PARTITION_SIZE = 256;\n+  private static final int PARTITION_SIZE = 256;\n \n-  @Reference private SolrClientFactory clientFactory;\n-\n-  @Reference private Session session;\n-\n-  @Reference private CatalogFramework catalogFramework;\n-  @Reference private FilterBuilder filterBuilder;\n-  @Reference private Security security;\n-\n-  private final RetryPolicy retryPolicy =\n-      new RetryPolicy()\n-          .retryOn(ImmutableList.of(UnavailableSolrException.class, SolrServerException.class))\n-          .withMaxDuration(5, TimeUnit.SECONDS)\n-          .withBackoff(50, 1_000, TimeUnit.MILLISECONDS);\n+  @Reference CatalogFramework catalogFramework;\n+  @Reference FilterBuilder filterBuilder;\n \n   @Override\n-  public Object execute() throws Exception {\n-    return security.runWithSubjectOrElevate(this::executeWithSubject);\n-  }\n-\n-  public Object executeWithSubject() throws Exception {\n-    SolrClient solrClient = clientFactory.newClient(COLLECTION_NAME);\n-\n-    Boolean response =\n-        Failsafe.with(\n-                new RetryPolicy()\n-                    .retryWhen(false)\n-                    .withMaxDuration(5, TimeUnit.SECONDS)\n-                    .withBackoff(50, 1_000, TimeUnit.MILLISECONDS))\n-            .get(() -> solrClient.isAvailable());\n-    if (response == null || !response) {\n-      LOGGER.error(\"Could not contact solr to remove all\");\n-      session.getConsole().println(\"Could not contact solr to remove all, exiting.\");\n-      return null;\n-    }\n-\n+  void executeWithSolrClient(SolrClient solrClient) throws SolrServerException, IOException {\n     Iterable<Result> iterable =\n         ResultIterable.resultIterable(catalogFramework, getGazetteerFilter());\n \n-    session.getConsole().println(\"Starting sync...\");\n+    console.println(\"Starting sync...\");\n     long counter = 0;\n     Instant start = Instant.now();\n \n     for (List<Result> results : Iterables.partition(iterable, PARTITION_SIZE)) {\n-      if (Thread.interrupted()) {\n-        LOGGER.info(\"Catalog sync interrupted early, exiting\");\n-        session.getConsole().println(\"Catalog sync interrupted, exiting\");\n-        Thread.currentThread().interrupt();\n-        throw new InterruptedException();\n-      }", "originalCommit": "344f091a41a10a70d56148d6ba7b29064ffb2af4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a19a137bab1743b4e3a05937b9d4872c464e425", "url": "https://github.com/codice/ddf/commit/1a19a137bab1743b4e3a05937b9d4872c464e425", "message": "Add back in Thread.interrupted() check in SyncCatalogCommand", "committedDate": "2020-09-29T17:26:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNzY1MQ==", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496917651", "bodyText": "I extracted the force option and the logic to check if the SolrClient is available to this class. I also made this extend SubjectCommands so that the runWithSubjectOrElevate logic didn't need to be included in these classes.", "author": "emmberk", "createdAt": "2020-09-29T17:32:44Z", "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/AbstractSolrClientCommand.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.offlinegazetteer;\n+\n+import static ddf.catalog.solr.offlinegazetteer.GazetteerConstants.COLLECTION_NAME;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.codice.ddf.commands.catalog.SubjectCommands;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.client.solrj.UnavailableSolrException;\n+import org.codice.solr.factory.SolrClientFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSolrClientCommand extends SubjectCommands {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSolrClientCommand.class);\n+\n+  @Reference protected SolrClientFactory clientFactory;\n+\n+  @Option(\n+      name = \"--force\",\n+      aliases = \"-f\",\n+      description = \"Force the command without a confirmation message.\")\n+  protected boolean force = false;\n+\n+  @SuppressWarnings({\"java:S2139\" /* Logging and rethrowing failure exception intentionally */})\n+  @Override\n+  protected Object executeWithSubject() throws Exception {", "originalCommit": "1a19a137bab1743b4e3a05937b9d4872c464e425", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxODA4MA==", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496918080", "bodyText": "Note that this can throw InterruptedException, which just bubbles up.", "author": "emmberk", "createdAt": "2020-09-29T17:33:26Z", "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/AbstractSolrClientCommand.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.offlinegazetteer;\n+\n+import static ddf.catalog.solr.offlinegazetteer.GazetteerConstants.COLLECTION_NAME;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.codice.ddf.commands.catalog.SubjectCommands;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.client.solrj.UnavailableSolrException;\n+import org.codice.solr.factory.SolrClientFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSolrClientCommand extends SubjectCommands {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSolrClientCommand.class);\n+\n+  @Reference protected SolrClientFactory clientFactory;\n+\n+  @Option(\n+      name = \"--force\",\n+      aliases = \"-f\",\n+      description = \"Force the command without a confirmation message.\")\n+  protected boolean force = false;\n+\n+  @SuppressWarnings({\"java:S2139\" /* Logging and rethrowing failure exception intentionally */})\n+  @Override\n+  protected Object executeWithSubject() throws Exception {\n+    if (!force) {\n+      String answer =\n+          session.readLine(\"Are you sure you want to continue?(y/n)\", ' ').toLowerCase();\n+      if (!(\"y\".equals(answer) || \"yes\".equals(answer))) {\n+        printSuccessMessage(\"Aborting.\");\n+        return null;\n+      }\n+    }\n+\n+    try (SolrClient solrClient = clientFactory.newClient(COLLECTION_NAME)) {\n+      Callable<Boolean> booleanCallable = solrClient::isAvailable;\n+      boolean response =\n+          Failsafe.with(\n+                  new RetryPolicy()\n+                      .retryWhen(false)\n+                      .withMaxDuration(5, TimeUnit.SECONDS)\n+                      .withBackoff(25, 1_000, TimeUnit.MILLISECONDS))\n+              .get(booleanCallable);\n+      if (!response) {\n+        LOGGER.error(\"Could not contact solr\");\n+        printErrorMessage(\"Could not contact solr, exiting.\");\n+        return null;\n+      }\n+      executeWithSolrClient(solrClient);", "originalCommit": "1a19a137bab1743b4e3a05937b9d4872c464e425", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2d3acb957ef2898d5ab30d61c808def63c83f86", "url": "https://github.com/codice/ddf/commit/b2d3acb957ef2898d5ab30d61c808def63c83f86", "message": "Remove unnecessary try-catch", "committedDate": "2020-09-29T17:40:50Z", "type": "commit"}, {"oid": "bd8844ab9ee84e382dc76c12b3964e3d8bac4553", "url": "https://github.com/codice/ddf/commit/bd8844ab9ee84e382dc76c12b3964e3d8bac4553", "message": "Remove success print color when aborting", "committedDate": "2020-09-29T20:17:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NjA0OA==", "url": "https://github.com/codice/ddf/pull/6352#discussion_r497096048", "bodyText": "\u270f\ufe0f Nitpick: could use equalsIgnoreCase here instead.", "author": "bakejeyner", "createdAt": "2020-09-29T22:25:23Z", "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/AbstractSolrClientCommand.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.offlinegazetteer;\n+\n+import static ddf.catalog.solr.offlinegazetteer.GazetteerConstants.COLLECTION_NAME;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.codice.ddf.commands.catalog.SubjectCommands;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.client.solrj.UnavailableSolrException;\n+import org.codice.solr.factory.SolrClientFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSolrClientCommand extends SubjectCommands {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSolrClientCommand.class);\n+\n+  @Reference protected SolrClientFactory clientFactory;\n+\n+  @Option(\n+      name = \"--force\",\n+      aliases = \"-f\",\n+      description = \"Force the command without a confirmation message.\")\n+  protected boolean force = false;\n+\n+  @SuppressWarnings({\"java:S2139\" /* Logging and rethrowing failure exception intentionally */})\n+  @Override\n+  protected Object executeWithSubject() throws Exception {\n+    if (!force) {\n+      String answer =\n+          session.readLine(\"Are you sure you want to continue?(y/n)\", ' ').toLowerCase();\n+      if (!(\"y\".equals(answer) || \"yes\".equals(answer))) {", "originalCommit": "bd8844ab9ee84e382dc76c12b3964e3d8bac4553", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b2f2e941a702336b3154cb0ae5983740f24f279", "url": "https://github.com/codice/ddf/commit/4b2f2e941a702336b3154cb0ae5983740f24f279", "message": "Clarify that offline-solr-gazetteer:removeall does not block", "committedDate": "2020-09-29T23:46:07Z", "type": "commit"}, {"oid": "66249c2103351fcb7fd62faac53de0d0249b409a", "url": "https://github.com/codice/ddf/commit/66249c2103351fcb7fd62faac53de0d0249b409a", "message": "Ignore case when checking user y/n input", "committedDate": "2020-09-29T23:46:07Z", "type": "commit"}]}