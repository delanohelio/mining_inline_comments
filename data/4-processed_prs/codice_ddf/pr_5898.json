{"pr_number": 5898, "pr_title": "[2.19.x] DDF-5897: Fixed drawing polygons without buffers", "pr_createdAt": "2020-03-13T13:20:31Z", "pr_url": "https://github.com/codice/ddf/pull/5898", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1MzYxMg==", "url": "https://github.com/codice/ddf/pull/5898#discussion_r392353612", "bodyText": "\u270f\ufe0f May want to list the version with the bug, so that it's clear down-the-line later on if this has been resolved", "author": "bennuttle", "createdAt": "2020-03-13T16:56:57Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/js/widgets/openlayers.polygon.js", "diffHunk": "@@ -50,19 +50,49 @@ const translateFromOpenlayersCoordinates = coords => {\n     .flatten()\n }\n \n+const isValidBufferWidth = bufferWidth =>\n+  !_.isNull(bufferWidth) && !_.isUndefined(bufferWidth) && '' != bufferWidth\n+\n /**\n- * Returns buffer width in meters with the lowest value of 1 meter.\n+ * Returns buffer width in meters, if applicable, with the lowest value of 1 meter.\n  */\n const getConstrainedBufferWidth = model => {\n+  const polygonWidthValue = model.get('polygonBufferWidth')\n+\n+  if (!isValidBufferWidth(polygonWidthValue)) return undefined\n+\n+  if (0 == polygonWidthValue) return undefined\n+\n   const bufferWidth =\n     DistanceUtils.getDistanceInMeters(\n-      model.get('polygonBufferWidth'),\n+      polygonWidthValue,\n       model.get('polygonBufferUnits')\n     ) || 1\n \n   return bufferWidth >= 1 ? bufferWidth : 1\n }\n \n+const getPolygonCoordSegments = (polySegment, bufferWidth) => {\n+  if (isValidBufferWidth(bufferWidth))\n+    return Turf.buffer(\n+      polySegment,\n+      bufferWidth,\n+      'meters'\n+    ).geometry.coordinates.map(set => {\n+      return Turf.polygon([set])\n+    })\n+\n+  return polySegment.geometry.coordinates.map(set => {\n+    /**\n+     * There appears to be a bug in the current version of Turf that produces 2-point arrays instead of 4\n+     * which results in an exception\n+     */", "originalCommit": "e71ad214e0526f1249cf0843e003e327d539af86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzY5NQ==", "url": "https://github.com/codice/ddf/pull/5898#discussion_r408583695", "bodyText": "+1", "author": "Lambeaux", "createdAt": "2020-04-15T05:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1MzYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1NjkzNQ==", "url": "https://github.com/codice/ddf/pull/5898#discussion_r392356935", "bodyText": "\u270f\ufe0f This seems readable to me, but I know some folks don't like single-line ifs without brackets.", "author": "bennuttle", "createdAt": "2020-03-13T17:03:06Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/js/widgets/openlayers.polygon.js", "diffHunk": "@@ -50,19 +50,49 @@ const translateFromOpenlayersCoordinates = coords => {\n     .flatten()\n }\n \n+const isValidBufferWidth = bufferWidth =>\n+  !_.isNull(bufferWidth) && !_.isUndefined(bufferWidth) && '' != bufferWidth\n+\n /**\n- * Returns buffer width in meters with the lowest value of 1 meter.\n+ * Returns buffer width in meters, if applicable, with the lowest value of 1 meter.\n  */\n const getConstrainedBufferWidth = model => {\n+  const polygonWidthValue = model.get('polygonBufferWidth')\n+\n+  if (!isValidBufferWidth(polygonWidthValue)) return undefined\n+\n+  if (0 == polygonWidthValue) return undefined", "originalCommit": "e71ad214e0526f1249cf0843e003e327d539af86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MjkxOQ==", "url": "https://github.com/codice/ddf/pull/5898#discussion_r408582919", "bodyText": "If this doesn't bother you guys then I won't make a fuss in JavaScript land, but I personally don't like debugging through code and losing my current context without clearly seeing what the result of the if statement was. Sure you could infer it from your loss of context but that strikes me as error prone.", "author": "Lambeaux", "createdAt": "2020-04-15T05:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1NjkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQyNDU2Nw==", "url": "https://github.com/codice/ddf/pull/5898#discussion_r412424567", "bodyText": "Sorry, @Lambeaux are you talking about the lack of {} here? I'm not quite following.", "author": "leo-sakh", "createdAt": "2020-04-21T19:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1NjkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzMjcwMQ==", "url": "https://github.com/codice/ddf/pull/5898#discussion_r412432701", "bodyText": "Yeah I'm talking directly to the behavior of (at least the Java) debugger when returns are on the same line as control flow decisions. I prefer to know the result of the decision before losing part of my call stack.", "author": "Lambeaux", "createdAt": "2020-04-21T19:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1NjkzNQ=="}], "type": "inlineReview"}, {"oid": "efc8112193911f430aeab5793425172d181ecd87", "url": "https://github.com/codice/ddf/commit/efc8112193911f430aeab5793425172d181ecd87", "message": "[2.19.x] DDF-5897: Fixed drawing polygons without buffers", "committedDate": "2020-04-21T19:26:00Z", "type": "commit"}, {"oid": "33b9e1ef286eeb2ef2b0fb7272c598a5126dda81", "url": "https://github.com/codice/ddf/commit/33b9e1ef286eeb2ef2b0fb7272c598a5126dda81", "message": "[2.19.x] DDF-5897: Added comment with related issue", "committedDate": "2020-04-21T20:23:24Z", "type": "forcePushed"}, {"oid": "bd56c5332c9c6d3d058fe28da47e8e72b9ae911e", "url": "https://github.com/codice/ddf/commit/bd56c5332c9c6d3d058fe28da47e8e72b9ae911e", "message": "[2.19.x] DDF-5897: Added comment with related issue", "committedDate": "2020-04-21T20:39:28Z", "type": "commit"}, {"oid": "bd56c5332c9c6d3d058fe28da47e8e72b9ae911e", "url": "https://github.com/codice/ddf/commit/bd56c5332c9c6d3d058fe28da47e8e72b9ae911e", "message": "[2.19.x] DDF-5897: Added comment with related issue", "committedDate": "2020-04-21T20:39:28Z", "type": "forcePushed"}]}