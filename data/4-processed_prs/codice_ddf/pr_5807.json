{"pr_number": 5807, "pr_title": "DDF-5538 - Add InjectedAttributes to DynamicSchemaResolver field cache", "pr_createdAt": "2020-01-31T00:35:12Z", "pr_url": "https://github.com/codice/ddf/pull/5807", "timeline": [{"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29", "url": "https://github.com/codice/ddf/commit/4a442c97f32298f838adcc6ba40b8802a4d84f29", "message": "DDF-5538 - Improve DynamicSchemaResolver to be aware of injected attributes", "committedDate": "2020-01-31T00:22:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MjUxMA==", "url": "https://github.com/codice/ddf/pull/5807#discussion_r374872510", "bodyText": "Could you add some javadoc that gives a high level description?", "author": "glenhein", "createdAt": "2020-02-04T19:21:13Z", "path": "catalog/solr/catalog-solr-provider/src/main/java/ddf/catalog/solr/provider/InjectedAttributeListener.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.provider;\n+\n+import ddf.catalog.data.AttributeDescriptor;\n+import ddf.catalog.data.AttributeRegistry;\n+import ddf.catalog.data.InjectableAttribute;\n+import ddf.catalog.source.solr.DynamicSchemaResolver;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class InjectedAttributeListener implements ServiceListener {", "originalCommit": "4a442c97f32298f838adcc6ba40b8802a4d84f29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg4NTMyMg==", "url": "https://github.com/codice/ddf/pull/5807#discussion_r374885322", "bodyText": "done", "author": "derekwilhelm", "createdAt": "2020-02-04T19:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MjUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MzQyOQ==", "url": "https://github.com/codice/ddf/pull/5807#discussion_r374873429", "bodyText": "\u270f\ufe0f \u270f\ufe0f I would eliminate the eventType variable, since it's only used once and doesn't add to readability.", "author": "glenhein", "createdAt": "2020-02-04T19:23:03Z", "path": "catalog/solr/catalog-solr-provider/src/main/java/ddf/catalog/solr/provider/InjectedAttributeListener.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.provider;\n+\n+import ddf.catalog.data.AttributeDescriptor;\n+import ddf.catalog.data.AttributeRegistry;\n+import ddf.catalog.data.InjectableAttribute;\n+import ddf.catalog.source.solr.DynamicSchemaResolver;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class InjectedAttributeListener implements ServiceListener {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(InjectedAttributeListener.class);\n+\n+  private BundleContext context;\n+  private DynamicSchemaResolver resolver;\n+  private AttributeRegistry attributeRegistry;\n+\n+  public InjectedAttributeListener(\n+      DynamicSchemaResolver resolver, AttributeRegistry attributeRegistry) {\n+    this.resolver = resolver;\n+    this.attributeRegistry = attributeRegistry;\n+  }\n+\n+  public void init() {\n+    Bundle bundle = FrameworkUtil.getBundle(this.getClass());\n+    context = bundle.getBundleContext();\n+    try {\n+      String filter = \"(objectClass=\" + InjectableAttribute.class.getName() + \")\";\n+      context.addServiceListener(this, filter);\n+\n+      Collection<ServiceReference<InjectableAttribute>> alreadyRegistered =\n+          context.getServiceReferences(InjectableAttribute.class, null);\n+      alreadyRegistered\n+          .stream()\n+          .map(context::getService)\n+          .filter(Objects::nonNull)\n+          .map(InjectableAttribute::attribute)\n+          .forEach(this::registerAttribute);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.warn(\"Unable to register listener for injected attributes\", e);\n+    }\n+  }\n+\n+  public void close() {\n+    if (context != null) {\n+      context.removeServiceListener(this);\n+    }\n+  }\n+\n+  public void serviceChanged(ServiceEvent event) {\n+    ServiceReference serviceRef = event.getServiceReference();\n+    Object service = context.getService(serviceRef);\n+    if (service instanceof InjectableAttribute) {\n+      int eventType = event.getType();", "originalCommit": "4a442c97f32298f838adcc6ba40b8802a4d84f29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f03c578e7a3d062f0a7644b1e8137f5a01ffd6f", "url": "https://github.com/codice/ddf/commit/0f03c578e7a3d062f0a7644b1e8137f5a01ffd6f", "message": "Add javadoc class description, clean up code", "committedDate": "2020-02-04T19:45:57Z", "type": "commit"}]}