{"pr_number": 6003, "pr_title": "DDF-5996 Simplifies the Web Context Policy Manager's authentication type configuration", "pr_createdAt": "2020-04-17T07:22:28Z", "pr_url": "https://github.com/codice/ddf/pull/6003", "timeline": [{"oid": "9882afb010aae25f2878309fa063a02fa8bf9fca", "url": "https://github.com/codice/ddf/commit/9882afb010aae25f2878309fa063a02fa8bf9fca", "message": "DDF-5996 Simplifies the Web Context Policy Manager's authentication type configuration", "committedDate": "2020-04-17T07:23:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTE2OQ==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411505169", "bodyText": "\u2753 What's the expected use case requiring different auth configurations for endpoints and web pages? I'm unclear why we need this distinction.", "author": "SmithJosh", "createdAt": "2020-04-20T16:10:12Z", "path": "distribution/docs/src/main/resources/content/_developing/_devComponents/managed-service-factories.adoc", "diffHunk": "@@ -142,14 +142,8 @@ See the documentation for https://docs.oracle.com/javase/7/docs/api/java/lang/Lo\n .Sample configuration file\n [source,linenums]\n ----\n-authenticationTypes=[ \\\n-  \"/\\=\", \\\n-  \"/admin\\=basic\", \\\n-  \"/system\\=basic\", \\\n-  \"/sources\\=basic\", \\\n-  \"/security-config\\=basic\", \\\n-  \"/search\\=basic\", \\\n-  ]\n+webAuthenticationTypes=\"basic\"\n+endpointAuthenticationTypes=\"\"", "originalCommit": "9882afb010aae25f2878309fa063a02fa8bf9fca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1OTI2Nw==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411559267", "bodyText": "I can think of cases where web pages need to be locked down by OIDC / Keycloak, but external clients need to authenticate via PKI or basic.", "author": "jlcsmith", "createdAt": "2020-04-20T17:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2ODYzNw==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411568637", "bodyText": "In that case, it sounds like the distinction we need is not web pages vs. endpoints, but browser clients vs. non-browser clients. Is there actually a need for the former?", "author": "SmithJosh", "createdAt": "2020-04-20T17:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3MjQ2OA==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411572468", "bodyText": "Also, PKI isn't terminating, so in the case you described, you could apply PKI|OIDC to the whole system, and that would accommodate both types of clients. For BASIC, that wouldn't work, but I wonder if we could add a non-terminating basic handler (no prompt, just pulls credentials off the request). Then you could do PKI|BASIC|OIDC.\nJust trying to make sure the config isn't more complicated than it needs to be", "author": "SmithJosh", "createdAt": "2020-04-20T17:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3Mjg2Mw==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r413972863", "bodyText": "Ok had an out-of-band discussion with @stustison. The conclusion was:\n\nThere's no way we could make a single auth type work for all the use cases we need to support. Our auth types are extensible, and that limits the assumptions we can make about how they will be used.\nMaking the configs browser clients vs. non-browser clients instead of web pages vs. endpoints would require changing the auth flow, which was not the intent of this issue. If we decide to do that, it will be in a separate PR.", "author": "SmithJosh", "createdAt": "2020-04-23T17:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzM0MQ==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411513341", "bodyText": "\u2753 What about endpoints that aren't under /services? I.e. Intrigue internal endpoints, the Jolokia endpoints, etc.", "author": "SmithJosh", "createdAt": "2020-04-20T16:21:12Z", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/web-context-policy-manager.adoc", "diffHunk": "@@ -27,14 +27,33 @@ Note that the `SAML` and `OIDC` authentication types require session storage to\n \n === Authentication Types\n \n-As you add REST endpoints, you may need to add different types of authentication through the Web Context Policy Manager.\n+Through the Web Context Policy Manager, authentication types for ${branding} may be configured with the following format:\n \n-Any web context that allows or requires specific authentication types should be added here with the following format:\n+----\n+<AUTH_TYPE>|<AUTH_TYPE|...\n+----\n+\n+Authentication types can be configured separately for:\n+* web pages (these are all context paths that do not start with `/services` such as `/admin` and `/search`)\n+* endpoints (these are all context paths that start with `/services`)", "originalCommit": "9882afb010aae25f2878309fa063a02fa8bf9fca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1NTM3OQ==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411555379", "bodyText": "Those are put under web pages\nweb pages (these are all context paths that do not start with `/services` such\nas `/admin` and `/search`)", "author": "blen-desta", "createdAt": "2020-04-20T17:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4MTY5Ng==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411581696", "bodyText": "If endpoints need to be handled differently, though, why only the endpoints under /services? I guess my confusion comes down to why we handle endpoints and web pages differently in the first place. #6003 (comment)", "author": "SmithJosh", "createdAt": "2020-04-20T18:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNjU1Mw==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411516553", "bodyText": "\u2753 Did you change this, or were the docs just wrong?", "author": "SmithJosh", "createdAt": "2020-04-20T16:25:31Z", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/web-context-policy-manager.adoc", "diffHunk": "@@ -64,21 +83,20 @@ Non-Terminating authentication types are authentication types where, once hit, m\n If the client supports the non-terminating authentication type's method of obtaining credentials, it either allows or forbids access to the system.\n However if the client does not support the non-terminating authentication type's method of obtaining credentials, the system will continue to the next configured authentication type.\n \n-`BASIC` is the only terminating authentication type.\n-Every other authentication type is non-terminating.\n+`PKI` is the only non-terminating authentication type.\n+`BASIC`, `OIDC`, and `SAML` are terminating authentication types.", "originalCommit": "9882afb010aae25f2878309fa063a02fa8bf9fca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzU1MQ==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411647551", "bodyText": "The docs were incorrect. For example, if you setup OIDC|BASIC as your authentication type and you don't provide OIDC credentials, you won't get the chance to enter basic credentials", "author": "blen-desta", "createdAt": "2020-04-20T19:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNjU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU4OTQ4Mw==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411589483", "bodyText": "I wonder if this sentence would be clearer if we revised it to If your infrastructure supports multiple authentication methods, you may specify them here.\nI read they may be specified as they may already be there, but I think we are trying to say you have the option to specify, if desired.", "author": "ricklarsen", "createdAt": "2020-04-20T18:15:13Z", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/securing-admin-console.adoc", "diffHunk": "@@ -19,8 +19,7 @@ To set access restrictions on the ${admin-console}, consult the organization's s\n . Select the *Configuration* tab.\n . Select the *Web Context Policy Manager*.\n .. A dialogue will pop up that allows you to edit ${branding} access restrictions.\n-.. Once you have configured your <<{reference-prefix}org.codice.ddf.security.policy.context.impl.PolicyManager,realms>> in your security infrastructure, you can associate them with ${branding} contexts.\n-.. If your infrastructure supports multiple <<{reference-prefix}org.codice.ddf.security.policy.context.impl.PolicyManager,authentication methods>>, they may be specified on a per-context basis.\n+.. If your infrastructure supports multiple <<{reference-prefix}org.codice.ddf.security.policy.context.impl.PolicyManager,authentication methods>>, they may be specified.", "originalCommit": "9882afb010aae25f2878309fa063a02fa8bf9fca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MTk2MA==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r411591960", "bodyText": "\u270f\ufe0f Minor nit-pick to be sure, but \"contrarily\" ? Could we maybe say \"Otherwise\" instead?", "author": "ricklarsen", "createdAt": "2020-04-20T18:19:23Z", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/web-context-policy-manager.adoc", "diffHunk": "@@ -64,21 +83,20 @@ Non-Terminating authentication types are authentication types where, once hit, m\n If the client supports the non-terminating authentication type's method of obtaining credentials, it either allows or forbids access to the system.\n However if the client does not support the non-terminating authentication type's method of obtaining credentials, the system will continue to the next configured authentication type.\n \n-`BASIC` is the only terminating authentication type.\n-Every other authentication type is non-terminating.\n+`PKI` is the only non-terminating authentication type.\n+`BASIC`, `OIDC`, and `SAML` are terminating authentication types.\n \n-For example: assume a context is protected by the non-terminating `SAML` authorization type.\n+For example: assume ${branding} is protected by the terminating `SAML` authorization type.\n The system first checks to see if the client supports the acquisition of SAML credentials.\n \n - If the connecting client is a browser, the system can acquire SAML credentials.\n - If the connecting client is a machine that supports SAML ECP, the system can acquire SAML credentials.\n - If the connecting client is a machine that does not support SAML ECP, the system cannot acquire SAML credentials.\n \n If the system can acquire SAML credentials from the client, the system will attempt to acquire said credentials and either allow or forbid access.\n-If the system cannot acquire SAML credentials from the client, the system will continue to the next configured authentication type.\n+If the system cannot acquire SAML credentials from the client, the system will forbid access.\n \n-Contrarily, assume a context is protected by the terminating `BASIC` authentication type.\n-Once this authentication type is hit, the system either allows or forbids access to the system, without checking if the client supports the acquisition of BASIC credentials.\n+Contrarily, if ${branding} is protected by the non-terminating `PKI` authorization type and the system cannot acquire PKI certificates from the client, the system will continue to the next configured authentication type.", "originalCommit": "9882afb010aae25f2878309fa063a02fa8bf9fca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9d6c4286d43cd160440dfc995a505c4d26c40437", "url": "https://github.com/codice/ddf/commit/9d6c4286d43cd160440dfc995a505c4d26c40437", "message": "DDF-5996 Simplifies the Web Context Policy Manager's authentication type configuration", "committedDate": "2020-04-22T19:24:45Z", "type": "forcePushed"}, {"oid": "f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "url": "https://github.com/codice/ddf/commit/f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "message": "DDF-5996 Simplifies the Web Context Policy Manager's authentication type configuration", "committedDate": "2020-05-04T23:09:35Z", "type": "commit"}, {"oid": "f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "url": "https://github.com/codice/ddf/commit/f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "message": "DDF-5996 Simplifies the Web Context Policy Manager's authentication type configuration", "committedDate": "2020-05-04T23:09:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyODA5Ng==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r420328096", "bodyText": "\u270f\ufe0f\nFor example, if you wanted to secure the entire system with the IDP, but still allow PKI authentication for legacy clients that don't understand the SAML ECP specification to connect, you could set Authentication Types for Web Pages and Authentication Types for Endpoints to SAML|PKI.", "author": "bakejeyner", "createdAt": "2020-05-05T18:43:22Z", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/securing-idp-sp.adoc", "diffHunk": "@@ -77,10 +77,8 @@ Set the authentication types in the `WebContextPolicyManager` to SAML.\n . Select the *${ddf-security}* application.\n . Select the *Configuration* tab.\n . Select *Web Context Policy Manager*\n-. Under *Authentication Types*, set the SAML authentication type_ as necessary.\n-For example:\n-- `/search=SAML`\n+. Under *Authentication Types for Web Pages* and *Authentication Types for Endpoints*, set the SAML authentication type_ as necessary.\n \n Other authentication types can also be used in conjunction with the SAML type.\n-For example, if you wanted to secure the entire system with the IDP, but still allow legacy clients that don't understand the SAML ECP specification to connect, you could set `/=SAML|PKI`.\n+For example, if you wanted to secure the entire system with the IDP, but still allow legacy clients that don't understand the SAML ECP specification to connect, you could set *Authentication Types for Web Pages* and *Authentication Types for Endpoints* to `SAML|PKI`.", "originalCommit": "f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzg3NQ==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r420337875", "bodyText": "\u2753 Also, if SAML is a terminating auth type, shouldn't it appear after PKI?\nI.E. PKI|SAML", "author": "bakejeyner", "createdAt": "2020-05-05T19:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyODA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMzQ3NA==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r420333474", "bodyText": "\u270f\ufe0f Configuring separate authentication types for web pages or endpoints for specific contexts is supported through ...", "author": "bakejeyner", "createdAt": "2020-05-05T18:52:26Z", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/web-context-policy-manager.adoc", "diffHunk": "@@ -27,14 +27,33 @@ Note that the `SAML` and `OIDC` authentication types require session storage to\n \n === Authentication Types\n \n-As you add REST endpoints, you may need to add different types of authentication through the Web Context Policy Manager.\n+Through the Web Context Policy Manager, authentication types for ${branding} may be configured with the following format:\n \n-Any web context that allows or requires specific authentication types should be added here with the following format:\n+----\n+<AUTH_TYPE>|<AUTH_TYPE|...\n+----\n+\n+Authentication types can be configured separately for:\n+* web pages (these are all context paths that do not start with `/services` such as `/admin` and `/search`)\n+* endpoints (these are all context paths that start with `/services`)\n+\n+Configuring separate authentication types for web pages or endpoints is supported through the `web-context-policy-config.properties` configuration file.", "originalCommit": "f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjU3Nw==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r420336577", "bodyText": "\u2753 When the file based configuration is present, shouldn't we overwrite the admin consoles authentication type rather than ignore the admin consoles authentication type?\nFor instance: Lets say I specify BASIC in the admin console, and in the file configuration I specify  SAML for /services/csw/subscription. Now when I try to access /admin, should I get prompted for basic credentials (overwrite admin console configuration) or should there be no authentication (ignore admin console configuration)?", "author": "bakejeyner", "createdAt": "2020-05-05T18:58:01Z", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/web-context-policy-manager.adoc", "diffHunk": "@@ -27,14 +27,33 @@ Note that the `SAML` and `OIDC` authentication types require session storage to\n \n === Authentication Types\n \n-As you add REST endpoints, you may need to add different types of authentication through the Web Context Policy Manager.\n+Through the Web Context Policy Manager, authentication types for ${branding} may be configured with the following format:\n \n-Any web context that allows or requires specific authentication types should be added here with the following format:\n+----\n+<AUTH_TYPE>|<AUTH_TYPE|...\n+----\n+\n+Authentication types can be configured separately for:\n+* web pages (these are all context paths that do not start with `/services` such as `/admin` and `/search`)\n+* endpoints (these are all context paths that start with `/services`)\n+\n+Configuring separate authentication types for web pages or endpoints is supported through the `web-context-policy-config.properties` configuration file.\n+* Navigate to `${home_directory}/etc/`\n+* Edit the `web-context-policy-config.properties` file\n+* Restart ${branding}\n+\n+The `web-context-policy-config.properties` file format is:\n \n ----\n-/<CONTEXT>=<AUTH_TYPE>|<AUTH_TYPE|...\n+/<CONTEXT>=<AUTH_TYPE> then <AUTH_TYPE then ...\n ----\n \n+[WARNING]\n+====\n+If the file-based configuration is used, the *authentication type* configuration for web pages and endpoints in the ${admin-console} is ignored.", "originalCommit": "f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3Mjk2NA==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r420372964", "bodyText": "It would be confusing to pull configurations from two different sources. It makes more sense to pick and use one. Hopefully, no one uses the file-based one and we can get rid of it.", "author": "blen-desta", "createdAt": "2020-05-05T20:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MjE0OA==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r420342148", "bodyText": "\u270f\ufe0f Maybe leave a comment on what \\\\s+then\\\\s+ is doing. Cause I ain't regex literate\n\u2753 Looks like we now have two authentication type formats:\nPKI|SAML\n\nand\nPKI then SAML\n\nShould we decide on one form and use that throughout the system?", "author": "bakejeyner", "createdAt": "2020-05-05T19:07:45Z", "path": "platform/security/policy/security-policy-context/src/main/java/org/codice/ddf/security/policy/context/impl/PolicyManager.java", "diffHunk": "@@ -457,6 +468,40 @@ public boolean getSessionAccess() {\n     return sessionAccess;\n   }\n \n+  public void setPolicyFilePath(String policyFilePath) {\n+    Map<String, String> properties =\n+        PropertiesLoader.getInstance()\n+            .toMap(PropertiesLoader.getInstance().loadProperties(policyFilePath));\n+\n+    if (properties.isEmpty()) {\n+      LOGGER.debug(\"File-based authentication type configuration not found.\");\n+      return;\n+    }\n+\n+    LOGGER.info(\"Proceeding with file-based authentication type configuration ...\");\n+\n+    Map<String, List<String>> contextToAuthTypes = new HashMap<>();\n+\n+    for (Map.Entry<String, String> authTypes : properties.entrySet()) {\n+      List<String> finalAuthTypes = new ArrayList<>();\n+      String[] auths = authTypes.getValue().trim().split(\"\\\\s+then\\\\s+\");", "originalCommit": "f375ca6baa8cfb7e952ba3ac0f1ef11d09d14ec6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3NDc2Mw==", "url": "https://github.com/codice/ddf/pull/6003#discussion_r420374763", "bodyText": "The file-based config can be more verbose and explicit. I don't think there is an issue with having | or then in different configs. Like I mentioned we're hoping no one uses the file-based config and we can get rid of it.", "author": "blen-desta", "createdAt": "2020-05-05T20:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MjE0OA=="}], "type": "inlineReview"}, {"oid": "1ceb02b4b0632b7cf4c9a8e7ed50e6e64a883db5", "url": "https://github.com/codice/ddf/commit/1ceb02b4b0632b7cf4c9a8e7ed50e6e64a883db5", "message": "Addressed doc change PR comments", "committedDate": "2020-05-06T16:48:04Z", "type": "commit"}]}