{"pr_number": 6378, "pr_title": "[2.19.x] DDF-UI-409 Unable to create new List with filter", "pr_createdAt": "2020-10-12T22:38:12Z", "pr_url": "https://github.com/codice/ddf/pull/6378", "timeline": [{"oid": "247fb0668ad78c909f04ab2a85e2857dc8c85693", "url": "https://github.com/codice/ddf/commit/247fb0668ad78c909f04ab2a85e2857dc8c85693", "message": "DDF-UI-409 Unable to create new List with filter", "committedDate": "2020-10-12T22:21:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwMTUzOQ==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r504201539", "bodyText": "\u2753 why is there an empty span here?", "author": "cassandrabailey293", "createdAt": "2020-10-13T19:24:50Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/list-create/list-create.js", "diffHunk": "@@ -43,6 +43,7 @@ const AddButton = props => {\n       style={{ width: '100%' }}\n     >\n       <span className=\"fa fa-plus\" />\n+      <span> </span>", "originalCommit": "247fb0668ad78c909f04ab2a85e2857dc8c85693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwMzM0OA==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r504203348", "bodyText": "(Issue 5) To give the space between the + and the word for these. \"+Create New List\" and \"+Create New List with Result(s)\". Original added the space on line 47 to the existing span, but thought this would make it more apparent", "author": "abel-connexta", "createdAt": "2020-10-13T19:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwMTUzOQ=="}], "type": "inlineReview"}, {"oid": "3378b5a380422e1d7747bb47ec8e16bfedaf8b5d", "url": "https://github.com/codice/ddf/commit/3378b5a380422e1d7747bb47ec8e16bfedaf8b5d", "message": "DDF-UI-409 list.cql deprecated in favor of list.filters", "committedDate": "2020-10-14T20:03:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NDA4MQ==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r508644081", "bodyText": "\u270f\ufe0f I think we should add a comment above LIST_CQL on line 31 to explain how it is being deprecated in favor of list.filters and should now be considered read-only", "author": "mojogitoverhere", "createdAt": "2020-10-20T15:56:49Z", "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/metacard/workspace/ListMetacardTypeImpl.java", "diffHunk": "@@ -34,6 +34,8 @@\n \n   public static final String LIST_BOOKMARKS = \"list.bookmarks\";\n \n+  public static final String LIST_FILTERS = \"list.filters\";", "originalCommit": "3378b5a380422e1d7747bb47ec8e16bfedaf8b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2NDA2OA==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r508664068", "bodyText": "\u270f\ufe0f you can still use the shorthand notation without the return here\n      if (list['list.filters']) {\n        list.matchesFilter = this.model.every(result => \n          result.matchesFilters(list['list.filters'])\n        )", "author": "mojogitoverhere", "createdAt": "2020-10-20T16:16:54Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/component/result-add/result-add.view.js", "diffHunk": "@@ -83,13 +83,13 @@ module.exports = Marionette.LayoutView.extend({\n     let listJSON = store\n       .getCurrentWorkspace()\n       .get('lists')\n-      .toJSON()\n+      .models.map(listModel => listModel.toJSON('keepObjs'))\n     listJSON = listJSON.map(list => {\n       list.matchesFilter = true\n-      if (list['list.cql'] !== '') {\n-        list.matchesFilter = this.model.every(result =>\n-          result.matchesCql(list['list.cql'])\n-        )\n+      if (list['list.filters']) {\n+        list.matchesFilter = this.model.every(result => {\n+          return result.matchesFilters(list['list.filters'])\n+        })", "originalCommit": "3378b5a380422e1d7747bb47ec8e16bfedaf8b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTA3OQ==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r508691079", "bodyText": "\u2753 This looks like a code smell to me. Does the code expect list.filters to be a string and in some places and an object in others?", "author": "mojogitoverhere", "createdAt": "2020-10-20T16:57:49Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/js/model/List.js", "diffHunk": "@@ -86,6 +112,47 @@ module.exports = Backbone.AssociatedModel.extend(\n         this.updateQuery\n       )\n     },\n+    set(data, ...args) {\n+      if (typeof data === 'object') {\n+        // for backwards compatability\n+        if (data['list.cql'] && !data['list.filters']) {\n+          try {\n+            const filterTree = CQLUtils.transformCQLToFilter(data['list.cql'])\n+            data['list.filters'] = simplifyListFilter(filterTree)\n+          } catch (e) {\n+            console.log('Invalid cql: ' + data['list.cql'])\n+          }\n+          data['list.cql'] = undefined\n+        } else if (\n+          data['list.filters'] &&\n+          typeof data['list.filters'] === 'string'\n+        ) {\n+          try {\n+            data['list.filters'] = JSON.parse(data['list.filters'])\n+          } catch (e) {\n+            data['list.filters'] = undefined\n+          }\n+        }\n+      } else if (data === 'list.filters' && args.length == 1) {\n+        args = [simplifyListFilter(args[0])]\n+      }\n+      if (!IGNORED_DEPRECATED_ATTRIBUTES.includes(data)) {\n+        return Backbone.AssociatedModel.prototype.set.call(this, data, ...args)\n+      }\n+    },\n+    get(attr) {\n+      if (!IGNORED_DEPRECATED_ATTRIBUTES.includes(attr)) {\n+        return Backbone.AssociatedModel.prototype.get.call(this, attr)\n+      }\n+    },\n+    toJSON(...args) {\n+      const json = Backbone.AssociatedModel.prototype.toJSON.call(this, ...args)\n+      const keepObjs = args.length > 0 ? args.includes('keepObjs') : false\n+      if (!keepObjs && typeof json['list.filters'] === 'object') {\n+        json['list.filters'] = JSON.stringify(json['list.filters'])", "originalCommit": "3378b5a380422e1d7747bb47ec8e16bfedaf8b5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1MzQ4Nw==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r508753487", "bodyText": "In some cases such as here \n  \n    \n      ddf/ui/packages/catalog-ui-search/src/main/webapp/component/result-add/result-add.view.js\n    \n    \n         Line 90\n      in\n      3378b5a\n    \n    \n    \n    \n\n        \n          \n           list.matchesFilter = this.model.every(result => { \n        \n    \n  \n\n we want to iterate through the list.filters as an object and have no use of its stringify version. I could get it as a string, but will need to convert it as an object to iterate through it, thought this would be more efficient since won't need to do 2 conversions. Should I change it so each time want to use it as an object, the person calling it, should be responsible for converting it?", "author": "abel-connexta", "createdAt": "2020-10-20T18:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5NjA1NQ==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r508796055", "bodyText": "I think we can store it as an object by default", "author": "mojogitoverhere", "createdAt": "2020-10-20T19:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczODQ5NA==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r508738494", "bodyText": "\u2757 If we handle the list.cql backwards compatibility case in the initialize method, I think we will be able to simplify a lot of this logic or remove it completely. Do you think there will be any issues doing it this way?\ninitialize() {\n    if model has list.cql and not list.filters\n        convertCqlToFilters()        \n    }\n\n    // rest of initialize\n}\n\nOr we might want to think about updating the backend to do the conversion for us so that the ui only ever has to worry about list.filters", "author": "mojogitoverhere", "createdAt": "2020-10-20T18:14:01Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/js/model/List.js", "diffHunk": "@@ -86,6 +112,47 @@ module.exports = Backbone.AssociatedModel.extend(\n         this.updateQuery\n       )\n     },\n+    set(data, ...args) {\n+      if (typeof data === 'object') {\n+        // for backwards compatability\n+        if (data['list.cql'] && !data['list.filters']) {\n+          try {\n+            const filterTree = CQLUtils.transformCQLToFilter(data['list.cql'])\n+            data['list.filters'] = simplifyListFilter(filterTree)\n+          } catch (e) {\n+            console.log('Invalid cql: ' + data['list.cql'])\n+          }\n+          data['list.cql'] = undefined\n+        } else if (\n+          data['list.filters'] &&\n+          typeof data['list.filters'] === 'string'\n+        ) {\n+          try {\n+            data['list.filters'] = JSON.parse(data['list.filters'])\n+          } catch (e) {\n+            data['list.filters'] = undefined\n+          }\n+        }\n+      } else if (data === 'list.filters' && args.length == 1) {\n+        args = [simplifyListFilter(args[0])]\n+      }\n+      if (!IGNORED_DEPRECATED_ATTRIBUTES.includes(data)) {\n+        return Backbone.AssociatedModel.prototype.set.call(this, data, ...args)\n+      }\n+    },\n+    get(attr) {\n+      if (!IGNORED_DEPRECATED_ATTRIBUTES.includes(attr)) {\n+        return Backbone.AssociatedModel.prototype.get.call(this, attr)\n+      }\n+    },", "originalCommit": "3378b5a380422e1d7747bb47ec8e16bfedaf8b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "88d32149a0e5825ffa472f9c8d0697e5b7c1b0ae", "url": "https://github.com/codice/ddf/commit/88d32149a0e5825ffa472f9c8d0697e5b7c1b0ae", "message": "DDF-UI-409 Addressed comments", "committedDate": "2020-10-22T17:46:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NzQ3OQ==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r510357479", "bodyText": "\u270f\ufe0f we can move the check on L83 here to reduce the amount of nesting\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              if (data['list.cql']) {\n          \n          \n            \n              if (data['list.cql'] && !data['list.filters']) {", "author": "mojogitoverhere", "createdAt": "2020-10-22T18:04:20Z", "path": "ui/packages/catalog-ui-search/src/main/webapp/js/model/List.js", "diffHunk": "@@ -53,13 +54,56 @@ function generateCql(bookmarks) {\n   })\n }\n \n+function simplifyListFilter(listFilters) {\n+  if (!listFilters) {\n+    return listFilters\n+  }\n+  let filtersArray = listFilters.filters || [listFilters]\n+  filtersArray = filtersArray\n+    .filter(filter => !filter.filters) //Only supports one filter group type, no nested filter groups\n+    .map(filter => {\n+      return {\n+        ...filter,\n+        value:\n+          filter.value && filter.value.value\n+            ? filter.value.value\n+            : filter.value,\n+      }\n+    })\n+  return {\n+    type: listFilters.filters ? listFilters.type : 'AND',\n+    filters: filtersArray,\n+  }\n+}\n+\n+function parseList(data) {\n+  // for backwards compatability\n+  if (data['list.cql']) {", "originalCommit": "88d32149a0e5825ffa472f9c8d0697e5b7c1b0ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2MTA2OQ==", "url": "https://github.com/codice/ddf/pull/6378#discussion_r510361069", "bodyText": "Had it there originally, but since no matter what, we always want to delete list.cql, hence why moved it bellow. Else if scenario of if for some reason there is a list.cql and a list.filters, we will delete that list.cql.", "author": "abel-connexta", "createdAt": "2020-10-22T18:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NzQ3OQ=="}], "type": "inlineReview"}]}