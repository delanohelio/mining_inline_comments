{"pr_number": 5961, "pr_title": "Upgrade to Solr 8.5", "pr_createdAt": "2020-04-02T00:08:49Z", "pr_url": "https://github.com/codice/ddf/pull/5961", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NDQ3Ng==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r401984476", "bodyText": "Why not 2182:2182?", "author": "Bdthomson", "createdAt": "2020-04-02T00:21:58Z", "path": "distribution/docker/solrcloud/docker-compose.yml", "diffHunk": "@@ -5,22 +5,23 @@ version: '3.7'\n services:\n \n   zoo:\n-    image: zookeeper:3.4\n+    image: zookeeper:3.5\n     container_name: zoo\n     restart: always\n     ports:\n       - \"2181:2181\"\n+      - \"2182:8080\"", "originalCommit": "395e3492aa18e7826b4e6b19dd25c3c03f7f1624", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NDg1Ng==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r401984856", "bodyText": "8080 is the port Zookeeper opens but that is a common developer default port.  I am exposing it on 2182 instead to keep it close to the other exposed Zookeeper port.", "author": "pklinef", "createdAt": "2020-04-02T00:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NDQ3Ng=="}], "type": "inlineReview"}, {"oid": "e25bedfb7fedde5054a8d1205ac3cb2ba1543d8f", "url": "https://github.com/codice/ddf/commit/e25bedfb7fedde5054a8d1205ac3cb2ba1543d8f", "message": "DDF-5961 Upgrade to Solr 8.5", "committedDate": "2020-04-02T00:28:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzI1NQ==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402063255", "bodyText": "\u270f\ufe0f  Did you mean which goes through getProxiedClient() instead?", "author": "Lambeaux", "createdAt": "2020-04-02T05:41:44Z", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/SolrClientAdapter.java", "diffHunk": "@@ -446,7 +446,15 @@ public void whenAvailable(Initializer initializer) {\n   // which goes throw getProxiedClient() which would throw back an unavailable error instead of\n   // returning the response\n   public SolrPingResponse ping() throws SolrServerException, IOException {\n-    return ping(\"from the API\");\n+    return ping(true, null);\n+  }\n+\n+  @Override\n+  // overridden to always send the ping to the client; avoiding the intercept in handle()\n+  // which goes throw getProxiedClient() which would throw back an unavailable error instead of", "originalCommit": "e25bedfb7fedde5054a8d1205ac3cb2ba1543d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4OTg2Ng==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402389866", "bodyText": "The comment was copied and pasted from the method above.  Looks like that was missed in the original review.", "author": "pklinef", "createdAt": "2020-04-02T15:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTI2Mg==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402065262", "bodyText": "\u2753 I was reading the docs and it looks like this is for Hadoop APIs? Is it a case where we need it because it's a transitive but we might not be invoking it?\nSee: https://github.com/apache/zookeeper/blob/release-3.5.5/zookeeper-jute/src/main/java/org/apache/jute/package.html", "author": "Lambeaux", "createdAt": "2020-04-02T05:48:47Z", "path": "platform/solr/solr-dependencies/pom.xml", "diffHunk": "@@ -156,8 +166,8 @@\n                             solr-solrj,\n                             commons-io,\n                             httpmime,\n-                            noggit,\n                             zookeeper,\n+                            zookeeper-jute,", "originalCommit": "e25bedfb7fedde5054a8d1205ac3cb2ba1543d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4ODQxOA==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402388418", "bodyText": "I think Hadoop is where they copied Jute from originally.  Zookeeper uses it to serialize data into znodes. The Solr upgrade did not work until adding this dependency because the Zookeeper client used by the Solr clients needs it at runtime.\nhttps://github.com/apache/zookeeper/search?q=jute+record&unscoped_q=jute+record\nhttps://lucene.apache.org/solr/guide/8_5/setting-up-an-external-zookeeper-ensemble.html", "author": "pklinef", "createdAt": "2020-04-02T15:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMDc3NA==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402430774", "bodyText": "how is this get used? beside just being logged?", "author": "lamhuy", "createdAt": "2020-04-02T16:04:50Z", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/SolrClientAdapter.java", "diffHunk": "@@ -786,15 +794,22 @@ boolean wasNotRecent(AtomicLong previous, long freq) {\n   }\n \n   private SolrPingResponse backgroundPing() throws SolrServerException, IOException {\n-    return ping(\"in the background\");\n+    return ping(false, null);\n   }\n \n   @SuppressWarnings(\"squid:S1181\" /* bubbling out VirtualMachineError */)\n-  private SolrPingResponse ping(String how) throws SolrServerException, IOException {\n+  private SolrPingResponse ping(boolean fromApi, String collection)\n+      throws SolrServerException, IOException {\n+    String how = fromApi ? \"from the API\" : \"in the background\";", "originalCommit": "e25bedfb7fedde5054a8d1205ac3cb2ba1543d8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNDkxOQ==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402434919", "bodyText": "Just for logging.  I was trying to keep the logic similar to how it was before.  Though now that you ask, I could probably pull that logging up into the calling methods.", "author": "pklinef", "createdAt": "2020-04-02T16:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMDc3NA=="}], "type": "inlineReview"}, {"oid": "0849b26ec9d8af8c1b00ca08f4d4112305d69349", "url": "https://github.com/codice/ddf/commit/0849b26ec9d8af8c1b00ca08f4d4112305d69349", "message": "DDF-5961 Upgrade to Solr 8.5", "committedDate": "2020-04-02T16:18:47Z", "type": "commit"}, {"oid": "0849b26ec9d8af8c1b00ca08f4d4112305d69349", "url": "https://github.com/codice/ddf/commit/0849b26ec9d8af8c1b00ca08f4d4112305d69349", "message": "DDF-5961 Upgrade to Solr 8.5", "committedDate": "2020-04-02T16:18:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3MDcwMg==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402470702", "bodyText": "Just double checking, a broad Exception was required here?", "author": "rzwiefel", "createdAt": "2020-04-02T17:05:00Z", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/SolrCloudClientFactory.java", "diffHunk": "@@ -86,19 +86,22 @@ SolrClient createSolrCloudClient(String zookeeperHosts, String collection) {\n       try {\n         uploadCoreConfiguration(collection, client);\n       } catch (SolrFactoryException e) {\n-        LOGGER.debug(\"Solr({}): Unable to upload configuration to Solr Cloud\", collection, e);\n+        LOGGER.debug(\"Solr({}): Unable to upload configuration to SolrCloud\", collection, e);\n         return null;\n       }\n \n       try {\n         createCollection(collection, client);\n       } catch (SolrFactoryException e) {\n-        LOGGER.debug(\"Solr({}): Unable to create collection on Solr Cloud\", collection, e);\n+        LOGGER.debug(\"Solr({}): Unable to create collection on SolrCloud\", collection, e);\n         return null;\n       }\n \n       client.setDefaultCollection(collection);\n       return closer.returning(client);\n+    } catch (LinkageError | Exception e) {", "originalCommit": "0849b26ec9d8af8c1b00ca08f4d4112305d69349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyNTk0NQ==", "url": "https://github.com/codice/ddf/pull/5961#discussion_r402525945", "bodyText": "I was not able to figure out what code was catching the escaping exceptions but wherever it was it is swallowing them based on the logs.  I know I needed the LinkageError to find a class def issue.  I am not sure about Exception but wanted to save the next person from wasting a lot of hours hunting down the swallowed exceptions like I did.", "author": "pklinef", "createdAt": "2020-04-02T18:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3MDcwMg=="}], "type": "inlineReview"}]}