{"pr_number": 6219, "pr_title": "[2.25.x] DDF-6218 Remove usage of PropertiesWrapper from AttributeQueryClaimsHandler", "pr_createdAt": "2020-08-04T22:18:23Z", "pr_url": "https://github.com/codice/ddf/pull/6219", "timeline": [{"oid": "545bcdb68289eb4cd39d3f5e0469b929561ff2c1", "url": "https://github.com/codice/ddf/commit/545bcdb68289eb4cd39d3f5e0469b929561ff2c1", "message": "Remove usage of PropertiesWrapper from AttributeQueryClaimsHandler\nAdd file reading logic to PropertyResolver\nLower unit test log levels on some security bundles", "committedDate": "2020-08-04T22:02:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjA2NA==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465366064", "bodyText": "\u270f\ufe0f Nit: Looks like this isn't being used.", "author": "emmberk", "createdAt": "2020-08-04T22:29:32Z", "path": "libs/common-system/src/main/java/org/codice/ddf/configuration/PropertyResolver.java", "diffHunk": "@@ -13,15 +13,21 @@\n  */\n package org.codice.ddf.configuration;\n \n+import java.io.FileInputStream;\n+import java.io.IOException;\n import java.util.List;\n import java.util.ListIterator;\n+import java.util.Properties;\n import org.apache.commons.lang.text.StrSubstitutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Class holds a string potentially containing variables of the format ${system.prop} and handles\n  * resolving those variables by trying to replace them with system properties\n  */\n public class PropertyResolver {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(PropertyResolver.class);", "originalCommit": "545bcdb68289eb4cd39d3f5e0469b929561ff2c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyOTY5Ng==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465929696", "bodyText": "Opting to keep it in. I like having loggers in classes, even when they aren't being used.", "author": "bakejeyner", "createdAt": "2020-08-05T18:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2Nzc3NQ==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465367775", "bodyText": "\u270f\ufe0f Nit: Add @VisibleForTesting to setSignatureProperties and setEncryptionProperties.", "author": "emmberk", "createdAt": "2020-08-04T22:34:24Z", "path": "platform/security/claims/security-claims-attributequerycommon/src/main/java/org/codice/ddf/security/claims/attributequery/common/AttributeQueryClaimsHandler.java", "diffHunk": "@@ -281,11 +288,37 @@ private void auditRemoteConnection(URL wsdlURL) {\n     return dispatch;\n   }\n \n-  public void setSignatureProperties(Object signatureProperties) {\n+  public void setSignaturePropertiesLocation(String signaturePropertiesLocation) {\n+    this.signaturePropertiesLocation =\n+        PropertyResolver.resolveProperties(signaturePropertiesLocation);\n+\n+    try {\n+      this.setSignatureProperties(\n+          PropertyResolver.resolvePropertiesFromLocation(this.signaturePropertiesLocation));\n+    } catch (IOException e) {\n+      LOGGER.warn(\n+          \"Problem reading signature properties file {}.\", this.signaturePropertiesLocation);\n+    }\n+  }\n+\n+  public void setEncryptionPropertiesLocation(String encryptionPropertiesLocation) {\n+    this.encryptionPropertiesLocation =\n+        PropertyResolver.resolveProperties(encryptionPropertiesLocation);\n+\n+    try {\n+      this.setEncryptionProperties(\n+          PropertyResolver.resolvePropertiesFromLocation(this.encryptionPropertiesLocation));\n+    } catch (IOException e) {\n+      LOGGER.warn(\n+          \"Problem reading encryption properties file {}.\", this.encryptionPropertiesLocation, e);\n+    }\n+  }\n+\n+  public void setSignatureProperties(Properties signatureProperties) {\n     this.signatureProperties = signatureProperties;\n   }\n \n-  public void setEncryptionProperties(Object encryptionProperties) {\n+  public void setEncryptionProperties(Properties encryptionProperties) {", "originalCommit": "545bcdb68289eb4cd39d3f5e0469b929561ff2c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODA4Mg==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465368082", "bodyText": "\u270f\ufe0f Nit: Add unit tests for setSignaturePropertiesLocation and setEncryptionPropertiesLocation.", "author": "emmberk", "createdAt": "2020-08-04T22:35:14Z", "path": "platform/security/claims/security-claims-attributequerycommon/src/main/java/org/codice/ddf/security/claims/attributequery/common/AttributeQueryClaimsHandler.java", "diffHunk": "@@ -281,11 +288,37 @@ private void auditRemoteConnection(URL wsdlURL) {\n     return dispatch;\n   }\n \n-  public void setSignatureProperties(Object signatureProperties) {\n+  public void setSignaturePropertiesLocation(String signaturePropertiesLocation) {\n+    this.signaturePropertiesLocation =\n+        PropertyResolver.resolveProperties(signaturePropertiesLocation);\n+\n+    try {\n+      this.setSignatureProperties(\n+          PropertyResolver.resolvePropertiesFromLocation(this.signaturePropertiesLocation));\n+    } catch (IOException e) {\n+      LOGGER.warn(\n+          \"Problem reading signature properties file {}.\", this.signaturePropertiesLocation);\n+    }\n+  }\n+\n+  public void setEncryptionPropertiesLocation(String encryptionPropertiesLocation) {", "originalCommit": "545bcdb68289eb4cd39d3f5e0469b929561ff2c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzMDc0OA==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465930748", "bodyText": "TLDR: lazy\nThose setters call a static method and that static method is already being tested, so I don't see much value in adding complexity to the test cases (I would need to throw in properties file for that static method to read, and assert properties have been replaced). Let me know if I am mis-judging \ud83d\ude04", "author": "bakejeyner", "createdAt": "2020-08-05T18:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODUxMQ==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465368511", "bodyText": "\u270f\ufe0f Nit: Can these be arguments instead of properties since they'll never change, right?", "author": "emmberk", "createdAt": "2020-08-04T22:36:33Z", "path": "platform/security/claims/security-claims-attributequery/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -46,8 +46,8 @@\n         <property name=\"simpleSign\" ref=\"simpleSign\"/>\n         <property name=\"issuer\" value=\"\"/>\n         <property name=\"destination\" value=\"\"/>\n-        <property name=\"signatureProperties\" ref=\"signatureProperties\"/>\n-        <property name=\"encryptionProperties\" ref=\"encryptionProperties\"/>\n+        <property name=\"signaturePropertiesLocation\" value=\"${ddf.etc}/ws-security/server/signature.properties\"/>\n+        <property name=\"encryptionPropertiesLocation\" value=\"${ddf.etc}/ws-security/server/encryption.properties\"/>", "originalCommit": "545bcdb68289eb4cd39d3f5e0469b929561ff2c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzMjEwMg==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465932102", "bodyText": "The entire class only uses properties, so I'm going to leave it as is for now.", "author": "bakejeyner", "createdAt": "2020-08-05T18:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0MTg3OQ==", "url": "https://github.com/codice/ddf/pull/6219#discussion_r465941879", "bodyText": "My suggestion was just a nit, but by arguments, I meant constructor arguments, as opposed to setting the fields via setters. Constructor arguments would allow the fields to be final, and the fields could still be used by the entire class.", "author": "emmberk", "createdAt": "2020-08-05T19:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODUxMQ=="}], "type": "inlineReview"}, {"oid": "9db4c332fa4377f5ee580616d59e240826a19437", "url": "https://github.com/codice/ddf/commit/9db4c332fa4377f5ee580616d59e240826a19437", "message": "Add VisibleForTesting to AttributeQueryClaimsHander setters", "committedDate": "2020-08-05T18:49:49Z", "type": "commit"}, {"oid": "9db4c332fa4377f5ee580616d59e240826a19437", "url": "https://github.com/codice/ddf/commit/9db4c332fa4377f5ee580616d59e240826a19437", "message": "Add VisibleForTesting to AttributeQueryClaimsHander setters", "committedDate": "2020-08-05T18:49:49Z", "type": "forcePushed"}]}