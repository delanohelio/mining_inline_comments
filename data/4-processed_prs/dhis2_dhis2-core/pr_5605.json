{"pr_number": 5605, "pr_title": "feat: Tracker importer validation", "pr_createdAt": "2020-05-18T09:16:45Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5605", "timeline": [{"oid": "21c84c0db3d33dd6263e06d6934bbdff2d29351f", "url": "https://github.com/dhis2/dhis2-core/commit/21c84c0db3d33dd6263e06d6934bbdff2d29351f", "message": "* Merge of all tracker import validation branches to new main branch\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-18T09:12:33Z", "type": "commit"}, {"oid": "5e0d4b9de9da59f687c4f2cc67fbd10a85b6dc1d", "url": "https://github.com/dhis2/dhis2-core/commit/5e0d4b9de9da59f687c4f2cc67fbd10a85b6dc1d", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-19T06:00:19Z", "type": "commit"}, {"oid": "b986f1dc55917586b477be5e3b6b8b657a50e0d9", "url": "https://github.com/dhis2/dhis2-core/commit/b986f1dc55917586b477be5e3b6b8b657a50e0d9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-21T04:55:42Z", "type": "commit"}, {"oid": "22a7eda7d313950a75783605244dcf56c3e35cc5", "url": "https://github.com/dhis2/dhis2-core/commit/22a7eda7d313950a75783605244dcf56c3e35cc5", "message": "* UncompleteEventAuth test\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-21T06:38:30Z", "type": "commit"}, {"oid": "e50ab71d87ce2218b6dd55eed679fcfa2bec972e", "url": "https://github.com/dhis2/dhis2-core/commit/e50ab71d87ce2218b6dd55eed679fcfa2bec972e", "message": "* merge\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-22T07:27:46Z", "type": "commit"}, {"oid": "2b68e1f95dff93021876602cd8e730721ca884b8", "url": "https://github.com/dhis2/dhis2-core/commit/2b68e1f95dff93021876602cd8e730721ca884b8", "message": "* disable the programrule and eventrule on bundle create\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-22T10:01:24Z", "type": "commit"}, {"oid": "117c496f747dc21c9820e3564adecab2b56ec035", "url": "https://github.com/dhis2/dhis2-core/commit/117c496f747dc21c9820e3564adecab2b56ec035", "message": "* add more enrollment attribute tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-23T15:55:37Z", "type": "commit"}, {"oid": "684a65237d259949c26df7e987fbd94382f2f9da", "url": "https://github.com/dhis2/dhis2-core/commit/684a65237d259949c26df7e987fbd94382f2f9da", "message": "* add more enrollment geo tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-23T17:11:26Z", "type": "commit"}, {"oid": "ab6cd262851f8e7eedcf529900f5d799ff78af20", "url": "https://github.com/dhis2/dhis2-core/commit/ab6cd262851f8e7eedcf529900f5d799ff78af20", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-25T06:34:37Z", "type": "commit"}, {"oid": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "url": "https://github.com/dhis2/dhis2-core/commit/a5f6d361402efd03ab461bcffa6bcc50be96c520", "message": "* add tests for enrollment exist checks\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-25T09:32:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0OTQ2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429849462", "bodyText": "It's a very common scenario to have a mix of new and updates when sending to /api/tracker so this mode allows it to internally sort (if the trackedEntityInstance already exists) into updates and creates. We default to this on all our data endpoints.", "author": "mortenoh", "createdAt": "2020-05-25T10:01:12Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -170,8 +170,12 @@ public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameter\n             ValidationMode.FULL ) );\n         params.setImportMode( getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n         params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n+\n+        // TODO: Why is default CREATE_AND_UPDATE here and CREATE on TrackerImportStrategy?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "url": "https://github.com/dhis2/dhis2-core/commit/a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "message": "* add tests for enrollment note\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-25T10:55:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTUxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851517", "bodyText": "Can probably be safely removed", "author": "mortenoh", "createdAt": "2020-05-25T10:05:18Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -222,11 +222,12 @@ private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle\n                 trackedEntityInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                trackedEntityInstance.setCreated( now );\n-                trackedEntityInstance.setCreatedAtClient( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTU4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851588", "bodyText": "Can probably be safely removed", "author": "mortenoh", "createdAt": "2020-05-25T10:05:27Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -271,11 +272,12 @@ private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bund\n                 programInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                programInstance.setCreated( now );\n-                programInstance.setCreatedAtClient( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTYyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851628", "bodyText": "Can probably be safely removed", "author": "mortenoh", "createdAt": "2020-05-25T10:05:33Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -329,11 +331,12 @@ private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n \n             Date now = new Date();\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                programStageInstance.setCreated( now );\n-                programStageInstance.setCreatedAtClient( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTY5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851698", "bodyText": "Can probably be safely removed", "author": "mortenoh", "createdAt": "2020-05-25T10:05:43Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -386,10 +389,11 @@ private TrackerTypeReport handleRelationships( Session session, TrackerBundle bu\n \n             Date now = new Date();\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                toRelationship.setCreated( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjM4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429852388", "bodyText": "We need to setup a call for this, what to do if we send in just a subset of attribute values, or a some attribute values er null, it needs to be clear what will happen. There should be a mode here to replace all attribute values no in current payload also. The same applies to data values in events.", "author": "mortenoh", "createdAt": "2020-05-25T10:07:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -445,6 +449,7 @@ private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat\n \n             TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n                 at.getAttribute() );\n+            // TODO: What to do here? Should attribute == NULL this be allowed?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0OTk2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448249962", "bodyText": "I guess the decision here is:\nShould null values result in deletion, or should we ignore them? I think they way people use the api now, deletion kinda makes sense. But we can have a separate parameter to support both.\nNote that any attributes the user dont have read or write access to should not result in a delete :)", "author": "stian-sandvold", "createdAt": "2020-07-01T09:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5MDk3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448290973", "bodyText": "This is a little complicated... we need to redo this from scratch. The workflow we have is per program, but then attribute values are linked with the TE ... so if a TE is enrolled in multiple programs - which is often the case - almost all the time we will be sending a subset of attribute values. so nulling those not available in the payload is disastrous. May be sending program can help, that way we narrow down to the mentioned program attributes ... an of course further sharing setting", "author": "abyot", "createdAt": "2020-07-01T11:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjkxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429852911", "bodyText": "No, but this should be handled in the validation code?", "author": "mortenoh", "createdAt": "2020-05-25T10:08:31Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -467,19 +472,35 @@ private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat\n                 attributeValues.add( attributeValue );\n             }\n \n-            if ( !attributeValuesForDeletion.contains( at.getAttribute() )\n-                && attributeValue.getAttribute().getValueType().isFile() )\n+            // TODO: What to do here? Should this be allowed? i.e ,  attributeValue.getAttribute() != null  this makes a NP\n+            if ( !attributeValuesForDeletion.contains( at.getAttribute() ) &&\n+                attributeValue.getAttribute() != null && attributeValue.getAttribute().getValueType().isFile() )\n             {\n                 assignedFileResources.add( at.getValue() );\n             }\n+\n+\n+//            if ( !attributeValuesForDeletion.contains( at.getAttribute() )\n+//                && attributeValue.getAttribute().getValueType().isFile() )\n+//            {\n+//                assignedFileResources.add( at.getValue() );\n+//            }\n         }\n \n         for ( TrackedEntityAttributeValue attributeValue : attributeValues )\n         {\n             // since TEAV is the owning side here, we don't bother updating the TE.teav\n             // collection\n             // as it will be reloaded on session clear\n-            if ( attributeValuesForDeletion.contains( attributeValue.getAttribute().getUid() ) )\n+            TrackedEntityAttribute attribute = attributeValue.getAttribute();\n+\n+//            // TODO: What to do here? Should this be allowed?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgxNjE5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433816197", "bodyText": "Yes, it is now. If validation is done before commit and fails this state should not be possible. Added a NP (assert) to explicitly explain this state.", "author": "netroms", "createdAt": "2020-06-02T11:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDYzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429854638", "bodyText": "Why?", "author": "mortenoh", "createdAt": "2020-05-25T10:12:36Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java", "diffHunk": "@@ -110,8 +110,8 @@ public Event to( ProgramStageInstance programStageInstance )\n             event.setCompletedAt( DateUtils.getIso8601NoTz( psi.getCompletedDate() ) );\n             event.setCreatedAt( DateUtils.getIso8601NoTz( psi.getCreated() ) );\n             event.setUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdated() ) );\n-            event.setClientCreatedAt( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );\n-            event.setClientUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdatedAtClient() ) );\n+//            event.setClientCreatedAt( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzODI5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433338292", "bodyText": "This was decided to remove according to @stian-sandvold, will double check.", "author": "netroms", "createdAt": "2020-06-01T16:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1ODI0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429858240", "bodyText": "Possibly, but this is also set in the TrackerController so user should really never be null (unless running under tests)", "author": "mortenoh", "createdAt": "2020-05-25T10:20:56Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java", "diffHunk": "@@ -141,9 +146,13 @@ public TrackerPreheat preheat( TrackerPreheatParams params )\n         Timer timer = new SystemTimer().start();\n \n         TrackerPreheat preheat = new TrackerPreheat();\n+        preheat.setIdentifiers( params.getIdentifiers() );\n         preheat.setUser( params.getUser() );\n         preheat.setDefaults( manager.getDefaults() );\n \n+        // TODO: Morten/Stian could this be done earlier, and rather not allow user to be set to NULL above, ?\n+        //  since this has big security implication it would be nicer to separate out this to\n+        //  a dedicated security controller/place...?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzOTc5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433339793", "bodyText": "I would very much try to avoid using null as a valid value for users. I think it is better to have a clearly defined test user instead. Using null here makes it hard to reason if it is a null pointer bug or intentional. Since at many places a NULL value gives super user access this is even more dangerous.", "author": "netroms", "createdAt": "2020-06-01T16:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1ODI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1OTMyMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429859323", "bodyText": "All the category* stuff has only had stable identifiers for 3-4 releases, so generally we don't want to assume the UID for defaults can be trusted, and we would rather just remove them (if default), and let the system handle it", "author": "mortenoh", "createdAt": "2020-05-25T10:23:38Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java", "diffHunk": "@@ -306,7 +316,11 @@ public boolean isEmpty( TrackerIdScheme identifier, Class<? extends Identifiable\n     {\n         for ( T object : objects )\n         {\n-            if ( isDefault( object ) ) continue;\n+            boolean isDefault = isDefault( object );\n+//            if ( isDefault )\n+//                continue;\n+            //TODO: Investigate why we need to disable this, see Category combo tests, fails if ignore put idDefault", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTk1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429869957", "bodyText": "We need to make sure we want this... value == null can also mean delete this value", "author": "mortenoh", "createdAt": "2020-05-25T10:50:27Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 105;\n+    }\n+\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1MDIzOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448250239", "bodyText": "I guess the decision here is:\nShould null values result in deletion, or should we ignore them? I think they way people use the api now, deletion kinda makes sense. But we can have a separate parameter to support both.\nNote that any attributes the user dont have read or write access to should not result in a delete :)", "author": "stian-sandvold", "createdAt": "2020-07-01T09:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MDk1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429870953", "bodyText": "I think this special authority is used for import mode SYNC, I'm not sure we want this as a general rule (but its something that needs to be discussed)", "author": "mortenoh", "createdAt": "2020-05-25T10:53:01Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 105;\n+    }\n+\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getAttribute() != null )\n+        {\n+            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            if ( teAttribute == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1017 )\n+                    .addArg( attribute.getAttribute() ) );\n+            }\n+        }\n+    }\n+\n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n+        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+    {\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n+\n+        // TODO: This is my attempt to fix this after impl. Abyot's comments on the initial/original version.\n+        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n+        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .collect( Collectors.toSet() );\n+\n+        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n+        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n+            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+            .collect( Collectors.toMap(\n+                ProgramTrackedEntityAttribute::getAttribute,\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n+\n+        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n+        {\n+            TrackedEntityAttribute attribute = entry.getKey();\n+            Boolean attributeIsMandatory = entry.getValue();\n+\n+            boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n+                .getUser()\n+\n+             .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1MTY2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448251667", "bodyText": "For now, we keep it. @ameenhere will be taking over a bit of the sync code, so this seems like something we can revisit in the future when we make sure the new importer supports sync, the same way the old one does.", "author": "stian-sandvold", "createdAt": "2020-07-01T09:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MDk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTY5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429871697", "bodyText": "Unsure, make a note of it.. we can discuss", "author": "mortenoh", "createdAt": "2020-05-25T10:55:00Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 107;\n+    }\n+\n+    public EnrollmentDateValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        validateMandatoryDates( reporter, enrollment );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+\n+        validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n+\n+        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTg5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429871897", "bodyText": "Unsure, make a note of it.. and we can discuss", "author": "mortenoh", "createdAt": "2020-05-25T10:55:32Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 107;\n+    }\n+\n+    public EnrollmentDateValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        validateMandatoryDates( reporter, enrollment );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+\n+        validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n+\n+        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?\n+        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() )\n+            && !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1023 )\n+                .addArg( enrollment.getOccurredAt() ) );\n+        }\n+    }\n+\n+    private void validateMandatoryDates( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        Objects.requireNonNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+\n+        // NOTE: getEnrollmentDate is always mandatory?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNDkxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448304919", "bodyText": "Its not possible to enroll without a date from the tracker at least. Perhaps we just remove this question and update the docs that this is mandatory period.", "author": "Bekkalizer", "createdAt": "2020-07-01T11:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MjM4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429882380", "bodyText": "How does this scale? could potentially be very slow if lots of notes per patient?", "author": "mortenoh", "createdAt": "2020-05-25T11:23:36Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java", "diffHunk": "@@ -0,0 +1,260 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.EnrollmentStatus;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.USER_CANT_BE_NULL;\n+import static org.hisp.dhis.util.DateUtils.getIso8601;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentInExistingValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected TrackerOwnershipManager trackerOwnershipManager;\n+\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 104;\n+    }\n+\n+    public EnrollmentInExistingValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+\n+        // TODO: check existing on update...\n+        if ( EnrollmentStatus.CANCELLED == enrollment.getStatus() )\n+        {\n+            return;\n+        }\n+\n+        Program program = validationContext.getProgram( enrollment.getProgram() );\n+\n+        if ( (EnrollmentStatus.COMPLETED == enrollment.getStatus()\n+            && Boolean.FALSE.equals( program.getOnlyEnrollOnce() )) )\n+        {\n+            return;\n+        }\n+\n+        validateTeiNotEnrolledAlready( reporter, enrollment, program );\n+    }\n+\n+    protected void validateTeiNotEnrolledAlready( ValidationErrorReporter reporter,\n+        Enrollment enrollment, Program program )\n+    {\n+        User actingUser = reporter.getValidationContext().getBundle().getUser();\n+\n+        Objects.requireNonNull( actingUser, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( enrollment.getTrackedEntity(), TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        TrackedEntityInstance tei = reporter.getValidationContext()\n+            .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        // TODO:  create a dedicated sql query....?\n+        Set<Enrollment> activeAndCompleted = getAllEnrollments( reporter, actingUser, program, tei )\n+            .stream()\n+            .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() || EnrollmentStatus.COMPLETED == e.getStatus() )\n+            .collect( Collectors.toSet() );\n+\n+        if ( EnrollmentStatus.ACTIVE == enrollment.getStatus() )\n+        {\n+            Set<Enrollment> activeOnly = activeAndCompleted.stream()\n+                .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() )\n+                .collect( Collectors.toSet() );\n+\n+            if ( !activeOnly.isEmpty() )\n+            {\n+                // TODO: How do we do this check on an import set, this only checks when the DB already contains it\n+                //Error: TrackedEntityInstance already has an active enrollment in another program...\n+                reporter.addError( newReport( TrackerErrorCode.E1015 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+        }\n+\n+        // Enrollment(\u00b64.b.ii) - The error of enrolling more than once is possible only if the imported enrollment\n+        // has a state other than CANCELLED... i.e. ACTIVE OR COMPLETED!\n+        if ( Boolean.TRUE.equals( program.getOnlyEnrollOnce() ) && !activeAndCompleted.isEmpty() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1016 )\n+                .addArg( tei )\n+                .addArg( program ) );\n+        }\n+    }\n+\n+    public List<Enrollment> getAllEnrollments( ValidationErrorReporter reporter, User actingUser,\n+        Program program, TrackedEntityInstance trackedEntityInstance )\n+    {\n+        Objects.requireNonNull( actingUser, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setSkipPaging( true );\n+        params.setProgram( program );\n+        params.setTrackedEntityInstance( trackedEntityInstance );\n+        List<ProgramInstance> programInstances = programInstanceService.getProgramInstances( params );\n+\n+        List<Enrollment> all = new ArrayList<>();\n+\n+        for ( ProgramInstance programInstance : programInstances )\n+        {\n+            // TODO: Move to ownership/security pre check hook if possible?\n+            if ( trackerOwnershipManager\n+                .hasAccess( actingUser, programInstance.getEntityInstance(), programInstance.getProgram() ) )\n+            {\n+                // Always create a fork of the reporter when used for checking/counting errors,\n+                // this is needed for thread safety in parallel mode.\n+                ValidationErrorReporter reporterFork = reporter.fork();\n+\n+                trackerImportAccessManager.checkReadEnrollmentAccess( reporterFork, actingUser, programInstance );\n+\n+                if ( reporterFork.hasErrors() )\n+                {\n+                    reporter.merge( reporterFork );\n+                }\n+                else\n+                {\n+                    all.add( getEnrollmentFromProgramInstance( programInstance ) );\n+                }\n+            }\n+        }\n+\n+        return all;\n+    }\n+\n+    public Enrollment getEnrollmentFromProgramInstance( ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+        Enrollment enrollment = new Enrollment();\n+        enrollment.setEnrollment( programInstance.getUid() );\n+\n+        if ( programInstance.getEntityInstance() != null )\n+        {\n+            enrollment.setTrackedEntityType( programInstance.getEntityInstance().getTrackedEntityType().getUid() );\n+            enrollment.setTrackedEntity( programInstance.getEntityInstance().getUid() );\n+        }\n+\n+        if ( programInstance.getOrganisationUnit() != null )\n+        {\n+            enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n+//            enrollment.setOrgUnitName( programInstance.getOrganisationUnit().getName() );\n+        }\n+\n+        if ( programInstance.getGeometry() != null )\n+        {\n+            enrollment.setGeometry( programInstance.getGeometry() );\n+\n+//            if ( programInstance.getProgram().getFeatureType() == FeatureType.POINT )\n+//            {\n+//                com.vividsolutions.jts.geom.Coordinate co = programInstance.getGeometry().getCoordinate();\n+//                enrollment.setCoordinate( new Coordinate( co.x, co.y ) );\n+//            }\n+        }\n+\n+        enrollment.setCreatedAt( DateUtils.getIso8601NoTz( programInstance.getCreated() ) );\n+//        enrollment.setCreatedAtClient( DateUtils.getIso8601NoTz( programInstance.getCreatedAtClient() ) );\n+        enrollment.setUpdatedAt( DateUtils.getIso8601NoTz( programInstance.getLastUpdated() ) );\n+//        enrollment.setLastUpdatedAtClient( DateUtils.getIso8601NoTz( programInstance.getLastUpdatedAtClient() ) );\n+        enrollment.setProgram( programInstance.getProgram().getUid() );\n+        enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n+        enrollment.setEnrolledAt( getIso8601( programInstance.getEnrollmentDate() ) );\n+        enrollment.setOccurredAt( getIso8601( programInstance.getIncidentDate() ) );\n+        enrollment.setFollowUp( programInstance.getFollowup() );\n+        enrollment.setCreatedAt( getIso8601( programInstance.getEndDate() ) );\n+        enrollment.setCompletedBy( programInstance.getCompletedBy() );\n+        enrollment.setStoredBy( programInstance.getStoredBy() );\n+        enrollment.setDeleted( programInstance.isDeleted() );\n+\n+        List<TrackedEntityComment> comments = programInstance.getComments();", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTI2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448255262", "bodyText": "Do we actually need all this information for validating? It seems we are just counting the number of active enrollments in a program for a TEI?", "author": "stian-sandvold", "createdAt": "2020-07-01T10:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MjM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTg0Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429885842", "bodyText": "Yes, sounds like a reasonable performance gain, please look into it", "author": "mortenoh", "createdAt": "2020-05-25T11:31:55Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventCountValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 305;\n+    }\n+\n+    public EventCountValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        User user = validationContext.getBundle().getUser();\n+\n+        Program program = validationContext.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setTrackedEntityInstance( tei );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+            params.setUser( user );\n+\n+            int count = programInstanceService.countProgramInstances( params );\n+\n+            if ( count == 0 )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1037 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+            else if ( count > 1 )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1038 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+        }\n+        else\n+        {\n+            //TODO: I don't understand the purpose of this here. This could be moved to preheater?\n+            // possibly...(Stian-1.4.20)\n+            // For isRegistraion=false, there can only exist a single tei and program instance across the entire program.\n+            // Both these counts could potentially be preheated, and then just make sure we just have 1 program instance.?", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODE3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446898178", "bodyText": "This class will be reworked by @luciano-fiandesio. We will move the SQL into preheater, and just verify the results here.", "author": "stian-sandvold", "createdAt": "2020-06-29T11:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTg0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODc1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446898759", "bodyText": "This class is also a bit strangely named, we are checking ProgramInstances, not ProgramStageInstances. This will also be dealt with later :) We can commit this as-is for now, since we planned the refactoring work already.", "author": "stian-sandvold", "createdAt": "2020-06-29T11:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MDU5NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429890595", "bodyText": "Yeah, could be a candidate for TrackerAccessManger?", "author": "mortenoh", "createdAt": "2020-05-25T11:43:39Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 302;\n+    }\n+\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        Objects.requireNonNull( actingUser, Constants.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+\n+        // TODO: Check is completeEventsExpiryDays actually in use, can't find any code usage other than in import validation.\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTAwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449695000", "bodyText": "Reopening this, as we have to check and allow exceptions for F_EDIT_EXPIRED somewhere.", "author": "Bekkalizer", "createdAt": "2020-07-03T20:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MDU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MDkwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429890900", "bodyText": "@abyot do you know?", "author": "mortenoh", "createdAt": "2020-05-25T11:44:29Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 302;\n+    }\n+\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        Objects.requireNonNull( actingUser, Constants.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+\n+        // TODO: Check is completeEventsExpiryDays actually in use, can't find any code usage other than in import validation.\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n+//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+//            {\n+//                return;\n+//            }\n+\n+            Date completedDate = null;\n+\n+            if ( programStageInstance != null )\n+            {\n+                completedDate = programStageInstance.getCompletedDate();\n+            }\n+\n+            else if ( event.getCompletedAt() != null )\n+            {\n+                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+            }\n+\n+            if ( completedDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1042 )\n+                    .addArg( event ) );\n+            }\n+\n+            //TODO: This is troublesome, according to the error text this actually an auth check...\n+            // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n+//            if ( completedDate != null && (new Date()).after(\n+//                DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+//            {\n+//                errorReporter.addError( newReport( TrackerErrorCode.E1043 )\n+//                    .addArg( event ) );\n+//            }\n+        }\n+    }\n+\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n+        Program program, ProgramStageInstance programStageInstance )\n+    {\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+\n+        //TODO: Cant find any reference outside validation code... is this still in use?", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NjQ2OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429896468", "bodyText": "I know this is needed to make this work, but can we optimize this somehow? seems it can be quite heavy", "author": "mortenoh", "createdAt": "2020-05-25T11:58:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.category.CategoryService;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckDataRelationsValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+\n+    @Autowired\n+    private CategoryService categoryService;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 4;\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity )\n+    {\n+        // NOTHING TO DO HERE\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+\n+        if ( !program.isRegistration() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1014 )\n+                .addArg( program ) );\n+        }\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        if ( tei == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1068 )\n+                .addArg( enrollment.getTrackedEntity() ) );\n+        }\n+\n+        if ( tei != null && program.getTrackedEntityType() != null\n+            && !program.getTrackedEntityType().equals( tei.getTrackedEntityType() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1022 )\n+                .addArg( tei )\n+                .addArg( program ) );\n+        }\n+\n+        //TODO: This dont make sense\n+//        ProgramInstance programInstance = context.getProgramInstance(  enrollment.getEnrollment() );\n+//        if ( !bundle.getImportStrategy().isCreateOrCreateAndUpdate() && programInstance == null )\n+//        {\n+//            reporter.addError( newReport( TrackerErrorCode.E1015 )\n+//                .addArg( enrollment )\n+//                .addArg( enrollment.getEnrollment() ) );\n+//        }\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( event );\n+\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            if ( context.getTrackedEntityInstance( event.getTrackedEntity() ) == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1036 )\n+                    .addArg( event ) );\n+            }\n+\n+            if ( strategy.isCreate() )\n+            {\n+                ProgramInstance programInstance = context.getProgramInstance( event.getEnrollment() );\n+                ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+\n+                if ( programStage != null && programInstance != null\n+                    && !programStage.getRepeatable()\n+                    && programInstance.hasProgramStageInstance( programStage ) )\n+                {\n+                    reporter.addError( newReport( TrackerErrorCode.E1039 ) );\n+                }\n+            }\n+        }\n+\n+        validateEventCategoryCombo( reporter, event, program );\n+    }\n+\n+    protected void validateEventCategoryCombo( ValidationErrorReporter reporter,\n+        Event event, Program program )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        // if event has \"attribute option combo\" set only, fetch the aoc directly\n+        boolean aocEmpty = StringUtils.isEmpty( event.getAttributeOptionCombo() );\n+        boolean acoEmpty = StringUtils.isEmpty( event.getAttributeCategoryOptions() );\n+\n+        CategoryOptionCombo categoryOptionCombo = (CategoryOptionCombo) reporter.getValidationContext().getBundle()\n+            .getPreheat().getDefaults().get( CategoryOptionCombo.class );\n+\n+        if ( !aocEmpty && acoEmpty )\n+        {\n+            categoryOptionCombo = context.getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+        }\n+        else if ( !aocEmpty && !acoEmpty && program.getCategoryCombo() != null )\n+        {\n+            String attributeCategoryOptions = event.getAttributeCategoryOptions();\n+            CategoryCombo categoryCombo = program.getCategoryCombo();\n+            String cacheKey = attributeCategoryOptions + categoryCombo.getUid();\n+\n+            Optional<String> cachedEventAOCProgramCC = reporter.getValidationContext()\n+                .getCachedEventAOCProgramCC( cacheKey );\n+\n+            if ( cachedEventAOCProgramCC.isPresent() )\n+            {\n+                categoryOptionCombo = context.getCategoryOptionCombo( cachedEventAOCProgramCC.get() );\n+            }\n+            else\n+            {\n+                Set<String> categoryOptions = TextUtils\n+                    .splitToArray( attributeCategoryOptions, TextUtils.SEMICOLON );\n+\n+                categoryOptionCombo = resolveCategoryOptionCombo( reporter,\n+                    categoryCombo, categoryOptions );\n+\n+                reporter.getValidationContext().putCachedEventAOCProgramCC( cacheKey,\n+                    categoryOptionCombo != null ? categoryOptionCombo.getUid() : null );\n+            }\n+        }\n+\n+        if ( categoryOptionCombo == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1115 )\n+                .addArg( event.getAttributeOptionCombo() ) );\n+        }\n+        else\n+        {\n+            reporter.getValidationContext()\n+                .cacheEventCategoryOptionCombo( event.getEvent(), categoryOptionCombo.getUid() );\n+        }\n+    }\n+\n+    private CategoryOptionCombo resolveCategoryOptionCombo( ValidationErrorReporter reporter,\n+        CategoryCombo programCategoryCombo, Set<String> attributeCategoryOptions )\n+    {\n+        Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+        for ( String uid : attributeCategoryOptions )\n+        {\n+            CategoryOption categoryOption = reporter.getValidationContext().getCategoryOption( uid );\n+            if ( categoryOption == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1116 )\n+                    .addArg( uid ) );\n+                return null;\n+            }\n+\n+            categoryOptions.add( categoryOption );\n+        }\n+\n+        CategoryOptionCombo attrOptCombo = categoryService", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NzkzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429897931", "bodyText": "No, this is an error, it would break the model completely", "author": "mortenoh", "createdAt": "2020-05-25T12:01:51Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java", "diffHunk": "@@ -0,0 +1,203 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckMetaValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 2;\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( tei.getOrgUnit() );\n+\n+        if ( organisationUnit == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1011 )\n+                .addArg( reporter ) );\n+        }\n+\n+        TrackedEntityType entityType = context.getTrackedEntityType( tei.getTrackedEntityType() );\n+        if ( entityType == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1005 )\n+                .addArg( tei.getTrackedEntityType() ) );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n+\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        if ( organisationUnit == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1070 )\n+                .addArg( enrollment.getOrgUnit() ) );\n+        }\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        if ( program == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1069 )\n+                .addArg( enrollment.getProgram() ) );\n+        }\n+\n+        if ( (program != null && organisationUnit != null) && !program.hasOrganisationUnit( organisationUnit ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1041 )\n+                .addArg( organisationUnit )\n+                .addArg( program )\n+                .addArg( program.getOrganisationUnits() ) );\n+        }\n+\n+        //TODO: Change program is not allowed?", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMTc3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433831778", "bodyText": "Ok \ud83d\udc4d", "author": "netroms", "createdAt": "2020-06-02T12:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDg0Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429900847", "bodyText": "TrackedEntityAttribute.valueType has not-null=true so I don't think we need to double verify anything here", "author": "mortenoh", "createdAt": "2020-05-25T12:08:50Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,277 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    protected ReservedValueService reservedValueService;\n+\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 53;\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n+\n+        validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n+    }\n+\n+    protected void validateAttributes( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+    {\n+        Objects.requireNonNull( trackedEntity, Constants.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        if ( tei != null )\n+        {\n+            valueMap = tei.getTrackedEntityAttributeValues()\n+                .stream()\n+                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+        }\n+\n+        for ( Attribute attribute : trackedEntity.getAttributes() )\n+        {\n+            TrackedEntityAttribute tea = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( tea == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1006 )\n+                    .addArg( attribute.getAttribute() ) );\n+                continue;\n+            }\n+\n+//            if ( StringUtils.isEmpty( attribute.getValue() ) )\n+            if ( attribute.getValue() == null )\n+            {\n+                //continue; ??? Just continue on empty and null?\n+                // TODO: Is this really correct? This check was not here originally\n+                //  Enrollment attr check fails on null so why not here too?\n+                reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                    .addArg( attribute ) );\n+                continue;\n+            }\n+\n+            // TODO: Should we really validate existing data? this sounds like a mix of con\n+//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n+//            if ( trackedEntityAttributeValue == null )\n+//            {\n+            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n+            trackedEntityAttributeValue.setEntityInstance( tei );\n+            trackedEntityAttributeValue.setValue( attribute.getValue() );\n+            trackedEntityAttributeValue.setAttribute( tea );\n+//            }\n+\n+            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n+            validateAttrValueType( reporter, attribute, tea );\n+\n+            // TODO: This is one \"THE\" potential performance killer...\n+            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+\n+            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+        }\n+    }\n+\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n+    {\n+        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+\n+        // TODO: Should this be tested here, cant provoke? Is this not validation in metadata? Probably not according to Stian.", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMjEyMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429902123", "bodyText": "@Bekkalizer", "author": "mortenoh", "createdAt": "2020-05-25T12:12:07Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java", "diffHunk": "@@ -0,0 +1,308 @@\n+package org.hisp.dhis.tracker.validation.service;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.hooks.Constants;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_TYPE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class DefaultTrackerImportAccessManager\n+    implements TrackerImportAccessManager\n+{\n+    private final AclService aclService;\n+\n+    private final TrackerOwnershipManager ownershipAccessManager;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    public DefaultTrackerImportAccessManager( AclService aclService, TrackerOwnershipManager ownershipAccessManager,\n+        OrganisationUnitService organisationUnitService )\n+    {\n+        Objects.requireNonNull( aclService );\n+        Objects.requireNonNull( ownershipAccessManager );\n+        Objects.requireNonNull( organisationUnitService );\n+\n+        this.aclService = aclService;\n+        this.ownershipAccessManager = ownershipAccessManager;\n+        this.organisationUnitService = organisationUnitService;\n+    }\n+\n+    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, \n+        OrganisationUnit orgUnit )\n+    {\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        User user = bundle.getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1093 )\n+                .addArg( user )\n+                .addArg( orgUnit ) );\n+        }\n+    }\n+\n+    public void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, \n+        OrganisationUnit orgUnit )\n+    {\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        User user = bundle.getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        if ( !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1000 )\n+                .addArg( user )\n+                .addArg( orgUnit ) );\n+        }\n+    }\n+\n+    public void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, User user,\n+        TrackedEntityType trackedEntityType )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityType, TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n+\n+        if ( !aclService.canDataWrite( user, trackedEntityType ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1001 )\n+                .addArg( user )\n+                .addArg( trackedEntityType ) );\n+        }\n+    }\n+\n+    @Override\n+    public void checkReadEnrollmentAccess( ValidationErrorReporter reporter, User user,\n+        ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( programInstance.getProgram(), PROGRAM_CANT_BE_NULL );\n+\n+        checkProgramReadAccess( reporter, user, programInstance.getProgram() );\n+\n+        if ( programInstance.getProgram().isRegistration() )\n+        {\n+            checkTeiTypeAndTeiProgramAccess( reporter, user, programInstance.getEntityInstance(),\n+                programInstance.getProgram() );\n+        }\n+        else\n+        {\n+            OrganisationUnit ou = programInstance.getOrganisationUnit();\n+            if ( ou != null && !organisationUnitService.isInUserSearchHierarchyCached( user, ou ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1101 )\n+                    .addArg( user )\n+                    .addArg( ou ) );\n+            }\n+        }\n+    }\n+\n+    protected void checkTeiTypeAndTeiProgramAccess( ValidationErrorReporter reporter, User user,\n+        TrackedEntityInstance trackedEntityInstance,\n+        Program program )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        if ( !aclService.canDataRead( user, program.getTrackedEntityType() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1104 )\n+                .addArg( user )\n+                .addArg( program )\n+                .addArg( program.getTrackedEntityType() ) );\n+        }\n+\n+        if ( !ownershipAccessManager.hasAccess( user, trackedEntityInstance, program ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1102 )\n+                .addArg( user )\n+                .addArg( trackedEntityInstance )\n+                .addArg( program ) );\n+        }\n+    }\n+\n+    @Override\n+    public void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, User user, Program program,\n+        ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        checkProgramWriteAccess( reporter, user, program );\n+\n+        if ( program.isRegistration() )\n+        {\n+            Objects.requireNonNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n+            checkTeiTypeAndTeiProgramAccess( reporter, user, programInstance.getEntityInstance(), program );\n+        }\n+    }\n+\n+    @Override\n+    public void checkEventWriteAccess( ValidationErrorReporter reporter, User user,\n+        ProgramStageInstance programStageInstance )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance, PROGRAM_STAGE_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance.getProgramStage(), PROGRAM_STAGE_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance.getProgramStage().getProgram(), PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance.getOrganisationUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        OrganisationUnit ou = programStageInstance.getOrganisationUnit();\n+\n+        // TODO: Get better explanation for isCreatableInSearchScope() what is this", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "606c9bcaff72da6066f29c6a4add5ecfa0005b8e", "url": "https://github.com/dhis2/dhis2-core/commit/606c9bcaff72da6066f29c6a4add5ecfa0005b8e", "message": "* add tests for cat. combo\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-25T12:56:49Z", "type": "commit"}, {"oid": "89412058d0c985e12f6a918553fc821aee448577", "url": "https://github.com/dhis2/dhis2-core/commit/89412058d0c985e12f6a918553fc821aee448577", "message": "* add tests for cat. combo with invalid start and/or end dates\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-26T06:45:00Z", "type": "commit"}, {"oid": "2983ed58cdedc8eda673cc48da8c217f43b1c927", "url": "https://github.com/dhis2/dhis2-core/commit/2983ed58cdedc8eda673cc48da8c217f43b1c927", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-27T11:06:49Z", "type": "commit"}, {"oid": "7cca3c481cc1a8298b2892d63285519b0d004505", "url": "https://github.com/dhis2/dhis2-core/commit/7cca3c481cc1a8298b2892d63285519b0d004505", "message": "* add tests for cat. tei enrollment existence\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-27T12:47:20Z", "type": "commit"}, {"oid": "c689c5196d0dfc3e5aa01bcc5ad92690b5bec643", "url": "https://github.com/dhis2/dhis2-core/commit/c689c5196d0dfc3e5aa01bcc5ad92690b5bec643", "message": "* refactor not yet working deleted checks\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-28T07:25:00Z", "type": "commit"}, {"oid": "0d63699ec0505559cb064cb9898690f280820120", "url": "https://github.com/dhis2/dhis2-core/commit/0d63699ec0505559cb064cb9898690f280820120", "message": "* add wrong date format string on events\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-28T08:08:45Z", "type": "commit"}, {"oid": "2b9f7802c04f8bf2ebb2d3c6e4945111d44c6c85", "url": "https://github.com/dhis2/dhis2-core/commit/2b9f7802c04f8bf2ebb2d3c6e4945111d44c6c85", "message": "* more event cat. combo tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-28T10:13:16Z", "type": "commit"}, {"oid": "98b3f66959949b5cdddb4ba10ec900de4de4e435", "url": "https://github.com/dhis2/dhis2-core/commit/98b3f66959949b5cdddb4ba10ec900de4de4e435", "message": "* merge master\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-30T12:06:24Z", "type": "commit"}, {"oid": "746adc68e288421fae02872e611faec4d25ce807", "url": "https://github.com/dhis2/dhis2-core/commit/746adc68e288421fae02872e611faec4d25ce807", "message": "* more tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-01T13:01:15Z", "type": "commit"}, {"oid": "ec4703268d379e2dde4ed22a1cc192e9e4b6c62c", "url": "https://github.com/dhis2/dhis2-core/commit/ec4703268d379e2dde4ed22a1cc192e9e4b6c62c", "message": "* more tests for invalid uuid\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-01T15:56:28Z", "type": "commit"}, {"oid": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "url": "https://github.com/dhis2/dhis2-core/commit/3e77f4b8e597ba000a126e053ebb3af75e7a664f", "message": "* Code review fixes\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-02T12:01:47Z", "type": "commit"}, {"oid": "a36d297c77b1689defcbd1fb3a3d3057545deffe", "url": "https://github.com/dhis2/dhis2-core/commit/a36d297c77b1689defcbd1fb3a3d3057545deffe", "message": "* Code review fixes\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-02T12:34:55Z", "type": "commit"}, {"oid": "7ada2f10737c6ca69ecd459ae33c7f81da78876d", "url": "https://github.com/dhis2/dhis2-core/commit/7ada2f10737c6ca69ecd459ae33c7f81da78876d", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-07T13:57:18Z", "type": "commit"}, {"oid": "630fd95223e7f44ec6b0a387218e0fce8abf3e20", "url": "https://github.com/dhis2/dhis2-core/commit/630fd95223e7f44ec6b0a387218e0fce8abf3e20", "message": "* Remove unnecessary use of integration test super class\n* Fix some broken tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-07T15:14:18Z", "type": "commit"}, {"oid": "7ad7d29d225df3d013efa64c526f4cd4a17eb82e", "url": "https://github.com/dhis2/dhis2-core/commit/7ad7d29d225df3d013efa64c526f4cd4a17eb82e", "message": "* Moved validation hook order configuration into a separate config file\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-07T16:34:42Z", "type": "commit"}, {"oid": "f08573476a30f321fcae15d305755925dd18ff14", "url": "https://github.com/dhis2/dhis2-core/commit/f08573476a30f321fcae15d305755925dd18ff14", "message": "* Rename new class\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-07T16:37:06Z", "type": "commit"}, {"oid": "fcd1be9fe5724a0ee5a6f02206cf7719166e5508", "url": "https://github.com/dhis2/dhis2-core/commit/fcd1be9fe5724a0ee5a6f02206cf7719166e5508", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-08T05:58:09Z", "type": "commit"}, {"oid": "b0d0fc69208bc9161ce1c8fdcc91b92957c2c4b9", "url": "https://github.com/dhis2/dhis2-core/commit/b0d0fc69208bc9161ce1c8fdcc91b92957c2c4b9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-09T09:41:04Z", "type": "commit"}, {"oid": "40f89ff55e5df34ea050ac72668ff0a73787dc86", "url": "https://github.com/dhis2/dhis2-core/commit/40f89ff55e5df34ea050ac72668ff0a73787dc86", "message": "* Adjust for testing performance\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-11T08:39:03Z", "type": "commit"}, {"oid": "674cf17f6073d2438cba1e61439a6f0c8bc7afa5", "url": "https://github.com/dhis2/dhis2-core/commit/674cf17f6073d2438cba1e61439a6f0c8bc7afa5", "message": "* Adjust for testing performance\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-11T10:59:51Z", "type": "commit"}, {"oid": "b66213acf4ca2bbe9c7cb7e8c74791d37dc334b5", "url": "https://github.com/dhis2/dhis2-core/commit/b66213acf4ca2bbe9c7cb7e8c74791d37dc334b5", "message": "* Adjust for testing performance\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-12T05:13:49Z", "type": "commit"}, {"oid": "afdba080fe2b6e6c32180fe175c0e48d67d611e2", "url": "https://github.com/dhis2/dhis2-core/commit/afdba080fe2b6e6c32180fe175c0e48d67d611e2", "message": "* Master merge\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-12T05:16:17Z", "type": "commit"}, {"oid": "6ccecbd0f6da424e90174d23f11e6a6498621100", "url": "https://github.com/dhis2/dhis2-core/commit/6ccecbd0f6da424e90174d23f11e6a6498621100", "message": "* Minor clean up & refactor of commit code\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-13T07:25:51Z", "type": "commit"}, {"oid": "1be1b94dc7d58b48904fad7162f6bfe6db25a93b", "url": "https://github.com/dhis2/dhis2-core/commit/1be1b94dc7d58b48904fad7162f6bfe6db25a93b", "message": "* Tracker import performance testing/measure\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-15T08:40:39Z", "type": "commit"}, {"oid": "4b7320ae91b2a1bae6327ba05fe8af93034deb66", "url": "https://github.com/dhis2/dhis2-core/commit/4b7320ae91b2a1bae6327ba05fe8af93034deb66", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-17T09:55:36Z", "type": "commit"}, {"oid": "f5e7725a4401d586f0a0fe5f59e1d0f12bea829e", "url": "https://github.com/dhis2/dhis2-core/commit/f5e7725a4401d586f0a0fe5f59e1d0f12bea829e", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-23T09:26:58Z", "type": "commit"}, {"oid": "c60fc745e12b8137c2948e2d26aceb8619d59717", "url": "https://github.com/dhis2/dhis2-core/commit/c60fc745e12b8137c2948e2d26aceb8619d59717", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-24T07:53:16Z", "type": "commit"}, {"oid": "9cb1e1c80ec5cfee6c87cd12f3b92a3badfa9bd4", "url": "https://github.com/dhis2/dhis2-core/commit/9cb1e1c80ec5cfee6c87cd12f3b92a3badfa9bd4", "message": "* Fix logic bug in tracker import controller\n* Preserve nano sec precision on timer\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-25T10:53:16Z", "type": "commit"}, {"oid": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "url": "https://github.com/dhis2/dhis2-core/commit/e7e003a2211cdf3f412ce75f95ef0f6be1973434", "message": "* Minor cleanup\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-25T12:25:19Z", "type": "commit"}, {"oid": "c8f1d91dc8c64e9f31110bddf98e14be69bacbf9", "url": "https://github.com/dhis2/dhis2-core/commit/c8f1d91dc8c64e9f31110bddf98e14be69bacbf9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-25T14:23:33Z", "type": "commit"}, {"oid": "28422ee34ab2b3e4d8dc49e80b2de1cf44622371", "url": "https://github.com/dhis2/dhis2-core/commit/28422ee34ab2b3e4d8dc49e80b2de1cf44622371", "message": "* Fix test, add new case.\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-26T02:41:03Z", "type": "commit"}, {"oid": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "url": "https://github.com/dhis2/dhis2-core/commit/ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "message": "* Fix SonarCloud : RSPEC-2229 : Bug\nExplained well in this: https://stackoverflow.com/questions/54567006/calling-transactional-method-from-non-transactional-method-in-spring-4-3\n\nhttps://rules.sonarsource.com/java/RSPEC-2229\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-26T07:11:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3Njk5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445576993", "bodyText": "Commented line", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:55:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -101,41 +102,52 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             notifier.notify( params.getJobConfiguration(), message );\n         }\n \n-        TrackerImportReport importReport = new TrackerImportReport();\n+        Timer preheatTimer = new SystemTimer().start();\n \n         TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n         List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+\n         Timer validationTimer = new SystemTimer().start();\n \n         TrackerValidationReport validationReport = new TrackerValidationReport();\n-        trackerBundles.forEach( tb -> validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer.toString();\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n+\n+        String validationTimeFormatted = validationTimer.toString();\n+        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n         log.info( message );\n \n+        importReport.getTimings().setValidation( validationTimeFormatted );\n+\n+        importReport.setTrackerValidationReport( validationReport );\n+\n         if ( params.hasJobConfiguration() )\n         {\n             notifier.update( params.getJobConfiguration(), message );\n         }\n \n-        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n+//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3Nzg3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445577878", "bodyText": "Commented line", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:56:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -146,10 +158,14 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             importReport.setStatus( TrackerStatus.ERROR );\n         }\n \n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + timer.toString();\n+        String totalTimeFormatted = totalTimer.toString();\n+        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n         log.info( message );\n \n-        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n+        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+\n+//        params.getReportMode() -->", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODI1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445578250", "bodyText": "Is this logic ok to be removed (I mean, AtomicMode?)", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:56:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -101,41 +102,52 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             notifier.notify( params.getJobConfiguration(), message );\n         }\n \n-        TrackerImportReport importReport = new TrackerImportReport();\n+        Timer preheatTimer = new SystemTimer().start();\n \n         TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n         List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+\n         Timer validationTimer = new SystemTimer().start();\n \n         TrackerValidationReport validationReport = new TrackerValidationReport();\n-        trackerBundles.forEach( tb -> validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer.toString();\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n+\n+        String validationTimeFormatted = validationTimer.toString();\n+        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n         log.info( message );\n \n+        importReport.getTimings().setValidation( validationTimeFormatted );\n+\n+        importReport.setTrackerValidationReport( validationReport );\n+\n         if ( params.hasJobConfiguration() )\n         {\n             notifier.update( params.getJobConfiguration(), message );\n         }\n \n-        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNzA0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446627043", "bodyText": "There are no feature implemented for this yet. I would argue we remove it and keep the code clean until we implement this feature.", "author": "netroms", "createdAt": "2020-06-28T09:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNzIxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446627215", "bodyText": "I have added this question to the next meeting.", "author": "netroms", "createdAt": "2020-06-28T09:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTk3NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445579974", "bodyText": "Can this method be refactored, so that it's easier to follow what's happening?\nparams.setUser( getUser( params.getUser(), params.getUserId() ) );\n\nTrackerImportReport importReport = new TrackerImportReport();\n\nTimer totalTimer = initImportTimer( params );\n\nList<TrackerBundle> trackerBundles = createBundle( params, \n\nvalidateBundle( trackerBundles, importReport, params);\n\nif ( !importReport.getTrackerValidationReport().hasErrors() ) \n{\n...", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:59:06Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -92,7 +91,9 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjk3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626972", "bodyText": "Yes, very good point. I split it up into preheat, validate, commit now.", "author": "netroms", "createdAt": "2020-06-28T09:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4OTk3NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445589974", "bodyText": "Can we use Lombok, since it is now supported in DHIS2", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:13:17Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java", "diffHunk": "@@ -29,20 +29,28 @@\n  */\n \n import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n public class TrackerErrorMessage", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTA3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445595070", "bodyText": "The method importTracker is marked as @Transactional: do we need to open a r/w TX that early, considering that we are calling commit on the trackerBundleService, which is also transactional. This is just a  consideration, perhaps is not a problem.", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:20:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -92,7 +91,9 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMzgzMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446623830", "bodyText": "Probably not, I will remove it if everyone think that is ok.", "author": "netroms", "createdAt": "2020-06-28T09:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5ODU4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445598587", "bodyText": "would it be possible to add a Javadoc to this class and to the public methods, it's not very clear what is the purpose of this class", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:24:48Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java", "diffHunk": "@@ -48,6 +51,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Stream;", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMDQ4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445600487", "bodyText": "Possible optimization: since, as far as I can see, this class is not using Hibernate, we could collect the IDs of the various entities in parallel.", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:27:26Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java", "diffHunk": "@@ -82,11 +86,13 @@ private static void collectTrackedEntities(\n         Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<TrackedEntity> trackedEntities )\n     {\n         trackedEntities.forEach( trackedEntity -> {\n-            addIdentifier( map, TrackedEntity.class, params.getIdScheme().getIdScheme(), trackedEntity.getTrackedEntity() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(), trackedEntity.getOrgUnit() );\n+            addIdentifier( map, TrackedEntity.class, params.getIdScheme().getIdScheme(),\n+                trackedEntity.getTrackedEntity() );\n+            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n+                trackedEntity.getOrgUnit() );\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n-            collectAttributes( map, params, trackedEntity.getAttributes() );\n+            collectTrackedEntityAttribute( map, params, trackedEntity.getAttributes() );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDEyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624121", "bodyText": "Added todo in the code.", "author": "netroms", "createdAt": "2020-06-28T09:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMDQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMTE1Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445601156", "bodyText": "Commented line", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:28:18Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java", "diffHunk": "@@ -225,8 +227,8 @@ public ProgramStageInstance from( TrackerPreheat preheat, Event event )\n                 preheat.get( TrackerIdScheme.UID, CategoryOptionCombo.class, e.getAttributeOptionCombo() ) );\n             programStageInstance.setGeometry( e.getGeometry() );\n             programStageInstance.setStatus( e.getStatus() );\n-            programStageInstance.setCreatedAtClient( DateUtils.parseDate( e.getClientCreatedAt() ) );\n-            programStageInstance.setLastUpdatedAtClient( DateUtils.parseDate( e.getClientUpdatedAt() ) );\n+//            programStageInstance.setCreatedAtClient( DateUtils.parseDate( e.getClientCreatedAt() ) );\n+//            programStageInstance.setLastUpdatedAtClient( DateUtils.parseDate( e.getClientUpdatedAt() ) );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMjAyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445602028", "bodyText": "Question: why does a \"converter\" service needs to be transactional?", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:29:30Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java", "diffHunk": "@@ -128,9 +128,11 @@ public ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment )\n \n         enrollments.forEach( enrollment -> {\n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n-            OrganisationUnit organisationUnit = preheat.get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+            OrganisationUnit organisationUnit = preheat", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDM4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624384", "bodyText": "I'm not sure, discuss with @mortenoh", "author": "netroms", "createdAt": "2020-06-28T09:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMjAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzNjk0NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446636945", "bodyText": "Added to next meeting", "author": "netroms", "createdAt": "2020-06-28T11:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMjAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzA2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446063063", "bodyText": "This is a question rather than a comment: why does the actual validation take place in a separate class? Wouldn't be better to have these ValidationHooks to encapsulate the required validation logic?", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:07:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHook\n+{\n+    public EnrollmentNoteValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = validationContext.getStrategy( enrollment );\n+\n+        List<Note> notes = enrollment.getNotes();\n+\n+        validateNotes( reporter, strategy, notes );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDUxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624519", "bodyText": "This is code de-duplication , since we do the exact validation on notes for notes on enrollments and notes on events.", "author": "netroms", "createdAt": "2020-06-28T09:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDg0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446064846", "bodyText": "Please use the DHIS2 standard injection (based on Constructor), like so:\nprotected final FileResourceService fileResourceService;\n\n    protected final TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n\n    protected final ReservedValueService reservedValueService;\n\n    private final DhisConfigurationProvider dhisConfigurationProvider;\n\n    public TrackedEntityAttributeValidationHook( FileResourceService fileResourceService,\n        TrackedEntityAttributeValueService trackedEntityAttributeValueService,\n        ReservedValueService reservedValueService, DhisConfigurationProvider dhisConfigurationProvider )\n    {\n        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n\n        checkNotNull( fileResourceService );\n        checkNotNull( trackedEntityAttributeValueService );\n        checkNotNull( reservedValueService );\n        checkNotNull( dhisConfigurationProvider );\n        this.fileResourceService = fileResourceService;\n        this.trackedEntityAttributeValueService = trackedEntityAttributeValueService;\n        this.reservedValueService = reservedValueService;\n        this.dhisConfigurationProvider = dhisConfigurationProvider;\n    }", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:10:55Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDk3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624975", "bodyText": "The way the hook classes are created this is complicated, not sure if it is possible. Please tell if you know how.\nThe hooks are created via an autowired line here:\n@Autowired( required = false )\npublic void setValidationHooks( List validationHooks )", "author": "netroms", "createdAt": "2020-06-28T09:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NTQyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446065426", "bodyText": "Use private: it seems that this dependency is only used locally (same for the other dependencies)", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:12:02Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NjYwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446066600", "bodyText": "Looks like this class requires some additional analysis, since there are many TODOs and commented out code.", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:14:15Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    protected ReservedValueService reservedValueService;\n+\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n+\n+        validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n+    }\n+\n+    protected void validateAttributes( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+    {\n+        Objects.requireNonNull( trackedEntity, Constants.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        if ( tei != null )\n+        {\n+            valueMap = tei.getTrackedEntityAttributeValues()\n+                .stream()\n+                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+        }\n+\n+        for ( Attribute attribute : trackedEntity.getAttributes() )\n+        {\n+            TrackedEntityAttribute tea = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( tea == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1006 )\n+                    .addArg( attribute.getAttribute() ) );\n+                continue;\n+            }\n+\n+//            if ( StringUtils.isEmpty( attribute.getValue() ) )\n+            if ( attribute.getValue() == null )\n+            {\n+                //continue; ??? Just continue on empty and null?\n+                // TODO: Is this really correct? This check was not here originally\n+                //  Enrollment attr check fails on null so why not here too?\n+                reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                    .addArg( attribute ) );\n+                continue;\n+            }\n+\n+            // TODO: Should we really validate existing data? this sounds like a mix of con\n+//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n+//            if ( trackedEntityAttributeValue == null )\n+//            {\n+            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n+            trackedEntityAttributeValue.setEntityInstance( tei );\n+            trackedEntityAttributeValue.setValue( attribute.getValue() );\n+            trackedEntityAttributeValue.setAttribute( tea );\n+//            }\n+\n+            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n+            validateAttrValueType( reporter, attribute, tea );\n+\n+            // TODO: This is one \"THE\" potential performance killer...\n+            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+\n+            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+        }\n+    }\n+\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n+    {\n+        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+\n+        if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1077 )\n+                .addArg( teav )\n+                .addArg( MAX_ATTR_VALUE_LENGTH ) );\n+        }\n+\n+        boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n+        boolean isConfidential = teav.getAttribute().isConfidentialBool();\n+        if ( isConfidential && !encryptionStatusOk )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1112 )\n+                .addArg( teav ) );\n+        }\n+\n+        String result = dataValueIsValid( teav.getValue(), teav.getAttribute().getValueType() );\n+        if ( result != null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1085 )\n+                .addArg( teav.getAttribute() )\n+                .addArg( result ) );\n+        }\n+    }\n+\n+    protected void validateTextPattern( ValidationErrorReporter reporter,\n+        Attribute attribute, TrackedEntityAttribute tea, TrackedEntityAttributeValue existingValue )\n+    {\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        Objects.requireNonNull( attribute, ATTRIBUTE_CANT_BE_NULL );\n+        Objects.requireNonNull( tea, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n+\n+        if ( !tea.isGenerated() )\n+        {\n+            return;\n+        }\n+\n+        // TODO: Should we check the text pattern even if its not generated?\n+        // TextPatternValidationUtils.validateTextPatternValue( attribute.getTextPattern(), value )\n+\n+        //TODO: Can't provoke this error since metadata importer won't allow null, empty or invalid patterns.\n+        if ( tea.getTextPattern() == null && !bundle.isSkipTextPatternValidation() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1111 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( tea.getTextPattern() != null && !bundle.isSkipTextPatternValidation() )\n+        {\n+            String oldValue = existingValue != null ? existingValue.getValue() : null;\n+\n+            // We basically ignore the pattern validation if the value is reserved or already\n+            // assigned i.e. input eq. already persisted value.\n+            boolean isReservedOrAlreadyAssigned = Objects.equals( attribute.getValue(), oldValue ) ||\n+                reservedValueService.isReserved( tea.getTextPattern(), attribute.getValue() );\n+\n+            boolean isValidPattern = TextPatternValidationUtils\n+                .validateTextPatternValue( tea.getTextPattern(), attribute.getValue() );\n+\n+            if ( !isReservedOrAlreadyAssigned && !isValidPattern )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1008 )\n+                    .addArg( attribute.getValue() )\n+                    .addArg( tea.getTextPattern() ) );\n+            }\n+        }\n+    }\n+\n+    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter,\n+        Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n+    {\n+        Objects.requireNonNull( attr, ATTRIBUTE_CANT_BE_NULL );\n+\n+        boolean attrIsFile = attr.getValueType() != null && attr.getValueType().isFile();\n+        if ( !attrIsFile )\n+        {\n+            return;\n+        }\n+\n+        TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( attr.getAttribute() );\n+\n+        // Todo: how can this be possible? is this acceptable?\n+        if ( trackedEntityAttributeValue != null &&\n+            !trackedEntityAttributeValue.getAttribute().getValueType().isFile() )\n+        {\n+            return;\n+        }\n+\n+        FileResource fileResource = reporter.getValidationContext().getBundle().getPreheat()\n+            .get( TrackerIdScheme.UID, FileResource.class, attr.getValue() );\n+\n+        if ( fileResource == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1084 )\n+                .addArg( attr.getValue() ) );\n+        }\n+\n+        if ( fileResource != null && fileResource.isAssigned() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1009 )\n+                .addArg( attr.getValue() ) );\n+        }\n+    }\n+}", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNTM3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446625370", "bodyText": "Yes, this is still under todo work for next meeting.", "author": "netroms", "createdAt": "2020-06-28T09:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NjYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NjgxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446066815", "bodyText": "Would be useful to have a Javadoc here that explains the basic validation steps: what are we validating for", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:14:48Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    protected ReservedValueService reservedValueService;\n+\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n+\n+        validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n+    }\n+\n+    protected void validateAttributes( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+    {\n+        Objects.requireNonNull( trackedEntity, Constants.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        if ( tei != null )\n+        {\n+            valueMap = tei.getTrackedEntityAttributeValues()\n+                .stream()\n+                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+        }\n+\n+        for ( Attribute attribute : trackedEntity.getAttributes() )\n+        {\n+            TrackedEntityAttribute tea = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( tea == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1006 )\n+                    .addArg( attribute.getAttribute() ) );\n+                continue;\n+            }\n+\n+//            if ( StringUtils.isEmpty( attribute.getValue() ) )\n+            if ( attribute.getValue() == null )\n+            {\n+                //continue; ??? Just continue on empty and null?\n+                // TODO: Is this really correct? This check was not here originally\n+                //  Enrollment attr check fails on null so why not here too?\n+                reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                    .addArg( attribute ) );\n+                continue;\n+            }\n+\n+            // TODO: Should we really validate existing data? this sounds like a mix of con\n+//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n+//            if ( trackedEntityAttributeValue == null )\n+//            {\n+            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n+            trackedEntityAttributeValue.setEntityInstance( tei );\n+            trackedEntityAttributeValue.setValue( attribute.getValue() );\n+            trackedEntityAttributeValue.setAttribute( tea );\n+//            }\n+\n+            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n+            validateAttrValueType( reporter, attribute, tea );\n+\n+            // TODO: This is one \"THE\" potential performance killer...\n+            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+\n+            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+        }\n+    }\n+\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NzUzMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446067532", "bodyText": "The default is to use com.google.api.client.util.Preconditions.checkNotNull.checkNotNull", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:16:17Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.hisp.dhis.tracker.validation.service;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.hooks.Constants;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_TYPE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class DefaultTrackerImportAccessManager\n+    implements TrackerImportAccessManager\n+{\n+    private final AclService aclService;\n+\n+    private final TrackerOwnershipManager ownershipAccessManager;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    public DefaultTrackerImportAccessManager( AclService aclService, TrackerOwnershipManager ownershipAccessManager,\n+        OrganisationUnitService organisationUnitService )\n+    {\n+        Objects.requireNonNull( aclService );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjc4Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626783", "bodyText": "This is build into the JDK now and is the exact similar functionality. I would strongly argue that using JDK features should have precedence over 3rd party libs when they do the same.", "author": "netroms", "createdAt": "2020-06-28T09:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NzUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446070276", "bodyText": "Commented out code", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:21:26Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java", "diffHunk": "@@ -111,14 +113,15 @@ protected void setUpTest() throws IOException\n         objectBundleService.commit( bundle );\n     }\n \n-    @Override\n-    public boolean emptyDatabaseAfterTest()\n-    {\n-        return true;\n-    }\n+//    @Override", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1OTM0OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446159348", "bodyText": "Perhaps it would be better to rename this class to \"TrackerImporterErrors\" or something in this direction", "author": "luciano-fiandesio", "createdAt": "2020-06-26T12:41:38Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class Constants", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2MDY0Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446160642", "bodyText": "Javadoc missing", "author": "luciano-fiandesio", "createdAt": "2020-06-26T12:44:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.tracker.validation.service;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public interface TrackerImportAccessManager", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4NTg5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446185898", "bodyText": "Please add some Javadoc explaining what are this class responsibilities.", "author": "luciano-fiandesio", "createdAt": "2020-06-26T13:32:06Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+\n+@Data\n+@Builder\n+@Slf4j\n+public class ValidateAndCommit", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c882c19214b4717357e0cb2784acf3e0e66ebeaa", "url": "https://github.com/dhis2/dhis2-core/commit/c882c19214b4717357e0cb2784acf3e0e66ebeaa", "message": "* Temp commit for perf testing\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T04:52:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzEyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613121", "bodyText": "This is a very small thing.. but we generally prefer using \"metadata\" now, and not \"metaData\", just for consitency", "author": "mortenoh", "createdAt": "2020-06-28T07:28:42Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java", "diffHunk": "@@ -0,0 +1,574 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import org.hisp.dhis.H2DhisConfigurationProvider;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.encryption.EncryptionStatus;\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceDomain;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public class TeTaValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private FileResourceService fileResourceService;\n+\n+    public void setupMetaData( String metaDataFile )", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNTg3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446625873", "bodyText": "Replaced all MetaData with metadata", "author": "netroms", "createdAt": "2020-06-28T09:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzQwMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613403", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-28T07:31:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckValidateAndGenerateUidHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        String uid = trackedEntity.getTrackedEntity();", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzU0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613540", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-28T07:33:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckValidateAndGenerateUidHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        String uid = trackedEntity.getTrackedEntity();\n+        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1048 )\n+                .addArg( trackedEntity )\n+                .addArg( trackedEntity.getTrackedEntityType() ) );\n+            return;\n+        }\n+\n+        if ( uid == null )\n+        {\n+            trackedEntity.setUid( CodeGenerator.generateUid() );\n+        }\n+        else\n+        {\n+            trackedEntity.setUid( uid );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        String uid = enrollment.getEnrollment();", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzU2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613562", "bodyText": "newline", "author": "mortenoh", "createdAt": "2020-06-28T07:33:35Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckValidateAndGenerateUidHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        String uid = trackedEntity.getTrackedEntity();\n+        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1048 )\n+                .addArg( trackedEntity )\n+                .addArg( trackedEntity.getTrackedEntityType() ) );\n+            return;\n+        }\n+\n+        if ( uid == null )\n+        {\n+            trackedEntity.setUid( CodeGenerator.generateUid() );\n+        }\n+        else\n+        {\n+            trackedEntity.setUid( uid );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        String uid = enrollment.getEnrollment();\n+        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1048 )\n+                .addArg( enrollment )\n+                .addArg( enrollment.getEnrollment() ) );\n+            return;\n+        }\n+\n+        if ( uid == null )\n+        {\n+            enrollment.setUid( CodeGenerator.generateUid() );\n+        }\n+        else\n+        {\n+            enrollment.setUid( uid );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        String uid = event.getEvent();", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTE3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446615176", "bodyText": "Is there a mixup here? the error code used (E1048) both says uuid and uid... i assume this should all be renamed to uid?", "author": "mortenoh", "createdAt": "2020-06-28T07:50:33Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java", "diffHunk": "@@ -0,0 +1,750 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.program.ProgramStageInstanceService;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EventImportValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramStageService programStageService;\n+\n+    @Autowired\n+    private ProgramStageInstanceService programStageServiceInstance;\n+\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data.json\" );\n+\n+        User user = userService.getUser( ADMIN_USER_UID );\n+        trackerBundleParams.setUser( user );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+\n+        ////////////////////////////////////////\n+\n+        trackerBundleParams = renderService\n+            .fromJson(\n+                new ClassPathResource( \"tracker/validations/enrollments_te_enrollments-data.json\" ).getInputStream(),\n+                TrackerBundleParams.class );\n+\n+        trackerBundleParams.setUser( user );\n+\n+        trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getEnrollments().size() );\n+\n+        report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    @Test\n+    public void testEventValidationOkAll()\n+        throws IOException\n+    {\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson( \"tracker/validations/events-data.json\" );\n+\n+        ValidateAndCommit createAndUpdate = doValidateAndCommit( trackerBundleParams, TrackerImportStrategy.CREATE );\n+        assertEquals( 1, createAndUpdate.getTrackerBundle().getEvents().size() );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+    }\n+\n+    @Test\n+    public void testEventInvalidUidFormat()\n+        throws IOException\n+    {\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/events-invalid-uuid-format.json\" );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjIwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626202", "bodyText": "This is mix up, good catch.", "author": "netroms", "createdAt": "2020-06-28T09:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTYxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446615619", "bodyText": "Maybe instead of just the ///// a few places, if could be /***** assert output ****/ or something if you want to separate the test run from the verification...", "author": "mortenoh", "createdAt": "2020-06-28T07:55:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java", "diffHunk": "@@ -0,0 +1,682 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EnrollmentImportValidationTest\n+    extends AbstractImportValidationTest\n+\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        /////", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjM2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626366", "bodyText": "This is just some left over scribbling. Will remove", "author": "netroms", "createdAt": "2020-06-28T09:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNzYyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446617621", "bodyText": "Is this handled somewhere? or its missing the error report?", "author": "mortenoh", "createdAt": "2020-06-28T08:14:30Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCategoryOptValidationHook.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.ObjectUtils;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.i18n.I18nFormat;\n+import org.hisp.dhis.i18n.I18nManager;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+@Slf4j\n+public class EventCategoryOptValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected I18nManager i18nManager;\n+\n+    public EventCategoryOptValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( event.getProgram() );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( context.getBundle().getUser(), Constants.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+\n+        CategoryOptionCombo categoryOptionCombo = context\n+            .getCategoryOptionCombo(\n+                reporter.getValidationContext().getCachedEventCategoryOptionCombo( event.getUid() ) );\n+\n+        Objects.requireNonNull( categoryOptionCombo, Constants.CATEGORY_OPTION_COMBO_CANT_BE_NULL );\n+\n+        if ( categoryOptionCombo.isDefault()\n+            && program.getCategoryCombo() != null\n+            && !program.getCategoryCombo().isDefault() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1055 ) );\n+            return;\n+        }\n+\n+        Date eventDate;\n+        try\n+        {\n+            eventDate = DateUtils.parseDate( ObjectUtils\n+                .firstNonNull( event.getOccurredAt(), event.getScheduledAt(), DateUtils.getIso8601( new Date() ) ) );\n+        }\n+        catch ( IllegalArgumentException e )\n+        {\n+            log.debug( \"Failed to parse dates, an error should already be reported.\" );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjU2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626563", "bodyText": "Yes, this will get into the error report at an earlier stage. So this is just to not fall out of the validation if something is broken.", "author": "netroms", "createdAt": "2020-06-28T09:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNzYyMQ=="}], "type": "inlineReview"}, {"oid": "c5a94c3d798ab59a16b994801255c4ac2631887b", "url": "https://github.com/dhis2/dhis2-core/commit/c5a94c3d798ab59a16b994801255c4ac2631887b", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T09:56:58Z", "type": "commit"}, {"oid": "4eecdedb144686a3a82d802b7279dfc9bc52e09c", "url": "https://github.com/dhis2/dhis2-core/commit/4eecdedb144686a3a82d802b7279dfc9bc52e09c", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-28T09:57:07Z", "type": "commit"}, {"oid": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "url": "https://github.com/dhis2/dhis2-core/commit/d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T15:04:29Z", "type": "commit"}, {"oid": "12bd589850367af9ce124e78ea519bd7842cb3c5", "url": "https://github.com/dhis2/dhis2-core/commit/12bd589850367af9ce124e78ea519bd7842cb3c5", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T15:08:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTg1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446859855", "bodyText": "A couple of things I noticed on this class:\n\n\nuniqueTrackedEntityAttributes mutators are never accessed, and variable is never used internally\n\n\nmandatoryProgramAttributes mutators are never accessed,  and variable is never used internally\n\n\nidentifiers is never used\n\n\nwhy do we need an empty constructor?", "author": "luciano-fiandesio", "createdAt": "2020-06-29T08:33:05Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java", "diffHunk": "@@ -127,6 +130,11 @@\n      */\n     private Map<TrackerIdScheme, Map<String, Relationship>> relationships = new EnumMap<>( TrackerIdScheme.class );\n \n+    /**\n+     * Identifier map\n+     */\n+    private TrackerIdentifierParams identifiers = new TrackerIdentifierParams();\n+\n     public TrackerPreheat()", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MTgxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446881817", "bodyText": "This is a good catch, this is not implemented yet.\nWe need to discuss this next meeting.\nAdded to the list.", "author": "netroms", "createdAt": "2020-06-29T09:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzU3Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446873577", "bodyText": "This method call may return null. Is that ok that we set a null value in programInstance?", "author": "luciano-fiandesio", "createdAt": "2020-06-29T08:56:37Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java", "diffHunk": "@@ -127,10 +127,13 @@ public ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment )\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n+\n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n-            OrganisationUnit organisationUnit = preheat.get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+            OrganisationUnit organisationUnit = preheat\n+                .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n-            TrackedEntityInstance trackedEntityInstance = preheat.getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n+            TrackedEntityInstance trackedEntityInstance = preheat", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTg5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999896", "bodyText": "I think this is a very good question.\nThe validation is supposed to make sure it don't happen.\nI would argue that this is not ok and we should call an assert/np error here to make it very clear we don't allow persistence with out this critical references.", "author": "netroms", "createdAt": "2020-06-29T14:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDMyOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447000329", "bodyText": "I have added Objects.nonNull checks. Let's discuss this in next meeting.", "author": "netroms", "createdAt": "2020-06-29T14:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjM2NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446832365", "bodyText": "TYPO: Enrollment should be called enrollment, not event", "author": "enricocolasante", "createdAt": "2020-06-29T07:43:54Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+@Component\n+public class PreCheckExistenceValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerBundle bundle = context.getBundle();\n+        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+\n+        TrackedEntityInstance existingTe = context\n+            .getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            if ( existingTe == null )\n+            {\n+                context.setStrategy( trackedEntity, TrackerImportStrategy.CREATE );\n+            }\n+            else\n+            {\n+                context.setStrategy( trackedEntity, TrackerImportStrategy.UPDATE );\n+            }\n+        }\n+        else if ( existingTe != null && importStrategy.isCreate() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1002 )\n+                .addArg( trackedEntity.getTrackedEntity() ) );\n+        }\n+        else if ( existingTe != null && existingTe.isDeleted() && importStrategy.isDelete() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1114 )\n+                .addArg( trackedEntity.getTrackedEntity() ) );\n+        }\n+        else if ( existingTe == null && importStrategy.isUpdateOrDelete() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1063 )\n+                .addArg( trackedEntity.getTrackedEntity() ) );\n+        }\n+        else\n+        {\n+            context.setStrategy( trackedEntity, importStrategy );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment event )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTI3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446835273", "bodyText": "It seems that the code is repeated for each \"entity\" TEI, Enrollment and event.\nMaybe it would be possible to make the errors a little bit more generic, or passing the name of the entity and extract the whole logic to a private method", "author": "enricocolasante", "createdAt": "2020-06-29T07:49:29Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+@Component\n+public class PreCheckExistenceValidationHook", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTY0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999649", "bodyText": "Not quite sure what you mean here. We need to check every entity if it is an update or create, since that will decide different validations to that entity later.", "author": "netroms", "createdAt": "2020-06-29T14:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2NDkyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448264928", "bodyText": "@netroms - for all the three entities we are doing the same thing and consolidating them to a generic method will be nice.", "author": "abyot", "createdAt": "2020-07-01T10:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzQxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446837419", "bodyText": "Same as before, repeated code", "author": "enricocolasante", "createdAt": "2020-06-29T07:53:18Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.EVENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckSecurityValidationHook", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTU4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999587", "bodyText": "Not sure what you mean is duplicated. Intellij and SonarCube usually informs of duplicated code, I get no warnings here.", "author": "netroms", "createdAt": "2020-06-29T14:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MjE4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446842188", "bodyText": "You can remove this if.\nPrint report will do nothing if there are not error reports.\nIn general, if you need to do something with the elements on the list, you don't need to check the size", "author": "enricocolasante", "createdAt": "2020-06-29T08:01:43Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java", "diffHunk": "@@ -28,53 +28,114 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.commons.timer.Timer;\n import org.hisp.dhis.tracker.ValidationMode;\n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.TrackerValidationHookTimerReport;\n import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER;\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER_MAP;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n @Slf4j\n @Service\n-public class DefaultTrackerValidationService implements TrackerValidationService\n+public class DefaultTrackerValidationService\n+    implements TrackerValidationService\n {\n     private List<TrackerValidationHook> validationHooks = new ArrayList<>();\n \n     @Autowired( required = false )\n     public void setValidationHooks( List<TrackerValidationHook> validationHooks )\n     {\n         this.validationHooks = validationHooks;\n+\n+        if ( !VALIDATION_ORDER\n+            .containsAll(\n+                validationHooks.stream().map( TrackerValidationHook::getClass ).collect( Collectors.toList() ) ) )\n+        {\n+            String orderList = VALIDATION_ORDER.stream().map( Class::getName )\n+                .collect( Collectors.joining( \",\" ) );\n+\n+            String internList = validationHooks.stream().map( i -> i.getClass().getName() )\n+                .collect( Collectors.joining( \",\" ) );\n+\n+            throw new RuntimeException(\n+                String.format(\n+                    \"ValidationConfig.class is missing a validation hook in the validation order list, \" +\n+                        \"please add it to the list. Order list: %s, service list: %s\",\n+                    orderList, internList ) );\n+        }\n+\n+        this.validationHooks.sort( Comparator.comparingInt( o -> VALIDATION_ORDER_MAP.get( o.getClass() ) ) );\n     }\n \n     @Override\n     public TrackerValidationReport validate( TrackerBundle bundle )\n     {\n         TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        if ( (bundle.getUser() == null || bundle.getUser().isSuper()) && ValidationMode.SKIP == bundle.getValidationMode() )\n+        User user = bundle.getUser();\n+\n+        if ( (user == null || user.isSuper()) && ValidationMode.SKIP == bundle.getValidationMode() )\n         {\n-            log.warn( \"Skipping validation for metadata import by user '\" + bundle.getUsername() + \"'. Not recommended.\" );\n+            log.warn( \"Skipping validation for metadata import by user '\" +\n+                bundle.getUsername() + \"'. Not recommended.\" );\n             return validationReport;\n         }\n \n-        for ( TrackerValidationHook hook : validationHooks )\n-        {\n-            validationReport.add( hook.validate( bundle ) );\n+        TrackerImportValidationContext context = new TrackerImportValidationContext( bundle );\n \n-            if ( !validationReport.isEmpty() && ValidationMode.FAIL_FAST == bundle.getValidationMode() )\n+        try\n+        {\n+            for ( TrackerValidationHook hook : validationHooks )\n             {\n-                break;\n+                if ( hook.isEnabled() )\n+                {\n+                    Timer hookTimer = Timer.startTimer();\n+\n+                    List<TrackerErrorReport> errors = hook.validate( context );\n+                    if ( !errors.isEmpty() )\n+                    {\n+                        validationReport.add( errors );\n+                    }\n+\n+                    validationReport.add( TrackerValidationHookTimerReport.builder()\n+                        .name( hook.getClass().getName() )\n+                        .totalTime( hookTimer.toString() ).build() );\n+                }\n             }\n         }\n+        catch ( ValidationFailFastException e )\n+        {\n+            validationReport.add( e.getErrors() );\n+        }\n+\n+        if ( validationReport.getErrorReports().size() > 0 )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTI2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446845263", "bodyText": "Maybe extracting this logic to a private method with a meaningful name will help understanding what is happening here.\nVERY IMPORTANT: We must have a test for this that will fail if such an exception is thrown.\nThis validation is showing an error in the code, so such codebase should never be deployed", "author": "enricocolasante", "createdAt": "2020-06-29T08:07:35Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java", "diffHunk": "@@ -28,53 +28,114 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.commons.timer.Timer;\n import org.hisp.dhis.tracker.ValidationMode;\n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.TrackerValidationHookTimerReport;\n import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER;\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER_MAP;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n @Slf4j\n @Service\n-public class DefaultTrackerValidationService implements TrackerValidationService\n+public class DefaultTrackerValidationService\n+    implements TrackerValidationService\n {\n     private List<TrackerValidationHook> validationHooks = new ArrayList<>();\n \n     @Autowired( required = false )\n     public void setValidationHooks( List<TrackerValidationHook> validationHooks )\n     {\n         this.validationHooks = validationHooks;\n+\n+        if ( !VALIDATION_ORDER", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTM3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999379", "bodyText": "Agree this should be in a test!", "author": "netroms", "createdAt": "2020-06-29T14:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzAxMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446847013", "bodyText": "I am not sure if I understand the meaning of this private method", "author": "enricocolasante", "createdAt": "2020-06-29T08:10:46Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java", "diffHunk": "@@ -75,6 +76,11 @@ public TrackedEntity to( org.hisp.dhis.trackedentity.TrackedEntityInstance track\n     @Override\n     @Transactional( readOnly = true )\n     public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n+    {\n+        return _to( trackedEntityInstances );\n+    }\n+\n+    private List<TrackedEntity> _to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4NDMzNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446884336", "bodyText": "This is was done due to en error from SonarCube:\n\nFix SonarCloud : RSPEC-2229 : Bug Explained well in this: https://stackoverflow.com/questions/54567006/calling-transactional-method-from-non-transactional-method-in-spring-4-3  https://rules.sonarsource.com/java/RSPEC-2229 Signed-off-by: Morten Svanaes msvanaes@dhis2.org\n\nBasically you cant call a method in the same class with @transaction from another public non transaction method.\nThe \"entry\" method to the class must be the one @transaction, so this is to work around the polymorphism issue here.", "author": "netroms", "createdAt": "2020-06-29T10:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzEwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446847102", "bodyText": "Some as above", "author": "enricocolasante", "createdAt": "2020-06-29T08:10:57Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java", "diffHunk": "@@ -120,14 +132,22 @@ public TrackedEntity to( org.hisp.dhis.trackedentity.TrackedEntityInstance track\n     @Transactional( readOnly = true )\n     public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n         List<TrackedEntity> trackedEntityInstances )\n+    {\n+        return _from( preheat, trackedEntityInstances );\n+    }\n+\n+    private List<org.hisp.dhis.trackedentity.TrackedEntityInstance> _from( TrackerPreheat preheat,", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MjcxMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446862710", "bodyText": "The name of the method could be getNameAndId", "author": "enricocolasante", "createdAt": "2020-06-29T08:38:14Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java", "diffHunk": "@@ -80,4 +80,9 @@\n         throw new RuntimeException( \"Unhandled identifier type.\" );\n     }\n \n+    public <T extends IdentifiableObject> String getIdAndName( T object )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NjQyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446866421", "bodyText": "Remove commented code", "author": "enricocolasante", "createdAt": "2020-06-29T08:44:23Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java", "diffHunk": "@@ -109,17 +111,19 @@ protected void setUpTest() throws IOException\n         objectBundleService.commit( bundle );\n     }\n \n-    @Override\n-    public boolean emptyDatabaseAfterTest()\n-    {\n-        return true;\n-    }\n+//    @Override", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2ODMzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446868335", "bodyText": "Same as other classes, try to avoid duplicated code.\nHere the organisation unit part could be extracted to a shared method", "author": "enricocolasante", "createdAt": "2020-06-29T08:47:45Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckMetaValidationHook", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5ODMzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446998338", "bodyText": "Don't see what you mean here, all orgUnit==null checks returns different error codes.", "author": "netroms", "createdAt": "2020-06-29T14:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2ODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMTQ2MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448301461", "bodyText": "@netroms  - what is the difference between this validation hook and PrecheckExistenceValidationHook? We also have PreCheckSecurityValidationHook. Any possibility to merge these three?\nMy worry is we could be checking an entity with a failed validation hook multiple times. The first time we have a failed validation, we should reject. Now with our checks in multiple places, not sure if we are keeping track of the validation statuses.", "author": "abyot", "createdAt": "2020-07-01T11:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2ODMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MTU1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446871557", "bodyText": "Not sure how to solve it, anyway it make sense to put it as last in the method", "author": "enricocolasante", "createdAt": "2020-06-29T08:53:19Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java", "diffHunk": "@@ -0,0 +1,323 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.vividsolutions.jts.geom.Geometry;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.organisationunit.FeatureType;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.Ordered;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.DATE_STRING_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.GEOMETRY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public abstract class AbstractTrackerDtoValidationHook\n+    implements TrackerValidationHook\n+{\n+    private int order = Ordered.LOWEST_PRECEDENCE;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return order;\n+    }\n+\n+    public void setOrder( int order )\n+    {\n+        this.order = order;\n+    }\n+\n+    public static final String IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD = \"Implementing class fail to override this method!\";\n+\n+    @Autowired\n+    protected TrackedEntityAttributeService teAttrService;\n+\n+    @Autowired\n+    private TrackedEntityCommentService commentService;\n+\n+    private final TrackerImportStrategy strategy;\n+\n+    private final boolean removeOnError;\n+\n+    private final Class<?> dtoTypeClass;\n+\n+    public AbstractTrackerDtoValidationHook()\n+    {\n+        this.removeOnError = true;\n+        this.dtoTypeClass = null;\n+        this.strategy = null;\n+    }\n+\n+    public <T extends TrackerDto> AbstractTrackerDtoValidationHook( Class<T> dtoClass, TrackerImportStrategy strategy )\n+    {\n+        this.removeOnError = false;\n+        this.dtoTypeClass = dtoClass;\n+        this.strategy = strategy;\n+    }\n+\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    @Override\n+    public List<TrackerErrorReport> validate( TrackerImportValidationContext context )\n+    {\n+        TrackerBundle bundle = context.getBundle();\n+\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n+\n+        if ( this.strategy != null )\n+        {\n+            TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+\n+            if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n+            {\n+                return reporter.getReportList();\n+            }\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( TrackedEntity.class ) )\n+        {\n+            validateTrackerDTOs( reporter, ( o, r ) -> validateTrackedEntity( r, o ),\n+                bundle.getTrackedEntities() );\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( Enrollment.class ) )\n+        {\n+            validateTrackerDTOs( reporter, ( o, r ) -> validateEnrollment( r, o ), bundle.getEnrollments() );\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( Event.class ) )\n+        {\n+            validateTrackerDTOs( reporter, ( o, r ) -> validateEvent( r, o ), bundle.getEvents() );\n+        }\n+\n+        return reporter.getReportList();\n+    }\n+\n+    public <T extends TrackerDto> void validateTrackerDTOs( ValidationErrorReporter reporter,\n+        ValidationFunction<T> function, List<T> dtoInstances )\n+    {\n+        Iterator<T> iterator = dtoInstances.iterator();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            T dto = iterator.next();\n+\n+            // Fork the report in order to be thread-safe so we can support multi-threaded validation in future.\n+            // Iterator needs to be changed to split variant also...\n+            ValidationErrorReporter reportFork = reporter.fork( dto );\n+\n+            function.validateTrackerDto( dto, reportFork );\n+\n+            if ( this.removeOnError && reportFork.hasErrors() )\n+            {\n+                iterator.remove();\n+            }\n+\n+            reporter.merge( reportFork );\n+        }\n+    }\n+\n+    protected void validateAttrValueType( ValidationErrorReporter errorReporter, Attribute attr,\n+        TrackedEntityAttribute teAttr )\n+    {\n+        Objects.requireNonNull( attr, ATTRIBUTE_CANT_BE_NULL );\n+        Objects.requireNonNull( teAttr, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n+\n+        String error;\n+\n+        // We need to do try/catch here since validateValueType() since validateValueType can cast IllegalArgumentException e.g.\n+        // on at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)\n+        try\n+        {\n+            error = teAttrService.validateValueType( teAttr, attr.getValue() );\n+        }\n+        catch ( Exception e )\n+        {\n+            error = e.getMessage();\n+        }\n+\n+        if ( error != null )\n+        {\n+            ValueType valueType = teAttr.getValueType();\n+            errorReporter.addError( newReport( TrackerErrorCode.E1007 )\n+                .addArg( valueType.toString() )\n+                .addArg( error ) );\n+        }\n+    }\n+\n+    protected void validateAttributeUniqueness( ValidationErrorReporter errorReporter,\n+        String value,\n+        TrackedEntityAttribute trackedEntityAttribute,\n+        TrackedEntityInstance trackedEntityInstanceUid,\n+        OrganisationUnit organisationUnit )\n+    {\n+        Objects.requireNonNull( trackedEntityAttribute, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n+\n+        if ( Boolean.FALSE.equals( trackedEntityAttribute.isUnique() ) )\n+            return;\n+\n+        String error = teAttrService.validateAttributeUniquenessWithinScope(\n+            trackedEntityAttribute,\n+            value,\n+            trackedEntityInstanceUid,\n+            organisationUnit );\n+\n+        if ( error != null )\n+        {\n+            errorReporter.addError( newReport( TrackerErrorCode.E1064 )\n+                .addArg( error ) );\n+        }\n+    }\n+\n+    protected void validateGeometry( ValidationErrorReporter errorReporter, Geometry geometry, FeatureType featureType )\n+    {\n+        Objects.requireNonNull( geometry, GEOMETRY_CANT_BE_NULL );\n+\n+        if ( featureType == null )\n+        {\n+            errorReporter.addError( newReport( TrackerErrorCode.E1074 ) );\n+            return;\n+        }\n+\n+        FeatureType typeFromName = FeatureType.getTypeFromName( geometry.getGeometryType() );\n+\n+        if ( FeatureType.NONE == featureType || featureType != typeFromName )\n+        {\n+            errorReporter.addError( newReport( TrackerErrorCode.E1012 )\n+                .addArg( featureType.name() ) );\n+        }\n+    }\n+\n+    protected void validateNotes( ValidationErrorReporter reporter, TrackerImportStrategy strategy, List<Note> notes )\n+    {\n+        for ( Note note : notes )\n+        {\n+            boolean validUid = CodeGenerator.isValidUid( note.getNote() );\n+            if ( !validUid )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1118 )\n+                    .addArg( note.toString() ) );\n+            }\n+\n+            if ( strategy.isCreate() )\n+            {\n+                //TODO: This looks like a potential performance killer, existence check on every note...", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1ODc5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448258798", "bodyText": "If we are checking DB for existance, that implies the data already exists, so we can probably fetch these in the preheater.\nI think it's ok to leave it as is for this PR, but we should move this to preheater after.", "author": "stian-sandvold", "createdAt": "2020-07-01T10:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MTU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDQ4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446874482", "bodyText": "Yes, TrackerDto should have something like a getId method so we could remove the instanceof here", "author": "enricocolasante", "createdAt": "2020-06-29T08:57:55Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.Data;\n+import org.hisp.dhis.tracker.ValidationMode;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.ValidationFailFastException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Data\n+public class ValidationErrorReporter\n+{\n+    private final List<TrackerErrorReport> reportList;\n+\n+    private final boolean isFailFast;\n+\n+    private final TrackerImportValidationContext validationContext;\n+\n+    private final Class<?> mainKlass;\n+\n+    private final AtomicInteger listIndex = new AtomicInteger( 0 );\n+\n+    private String mainId;\n+\n+    public ValidationErrorReporter( TrackerImportValidationContext context, Class<?> mainKlass )\n+    {\n+        this.validationContext = context;\n+        this.reportList = new ArrayList<>();\n+        this.isFailFast = validationContext.getBundle().getValidationMode() == ValidationMode.FAIL_FAST;\n+        this.mainKlass = mainKlass;\n+    }\n+\n+    private ValidationErrorReporter( TrackerImportValidationContext context, Class<?> mainKlass, boolean isFailFast,\n+        int listIndex )\n+    {\n+        this.validationContext = context;\n+        this.reportList = new ArrayList<>();\n+        this.isFailFast = isFailFast;\n+        this.mainKlass = mainKlass;\n+        this.listIndex.set( listIndex );\n+    }\n+\n+    public boolean hasErrors()\n+    {\n+        return !this.reportList.isEmpty();\n+    }\n+\n+    public static TrackerErrorReport.TrackerErrorReportBuilder newReport( TrackerErrorCode errorCode )\n+    {\n+        return TrackerErrorReport.builder().errorCode( errorCode );\n+    }\n+\n+    public void addError( TrackerErrorReport.TrackerErrorReportBuilder builder )\n+    {\n+        builder.mainKlass( this.mainKlass );\n+        builder.listIndex( this.listIndex.get() );\n+\n+        if ( this.mainId != null )\n+        {\n+            builder.mainId( this.mainId );\n+        }\n+\n+        getReportList().add( builder.build( this.validationContext.getBundle() ) );\n+\n+        if ( isFailFast() )\n+        {\n+            throw new ValidationFailFastException( getReportList() );\n+        }\n+    }\n+\n+    public <T extends TrackerDto> ValidationErrorReporter fork()\n+    {\n+        return fork( null );\n+    }\n+\n+    public <T extends TrackerDto> ValidationErrorReporter fork( T dto )\n+    {\n+        ValidationErrorReporter fork = new ValidationErrorReporter( this.validationContext, this.mainKlass,\n+            isFailFast(),\n+            listIndex.incrementAndGet() );\n+\n+        if ( dto == null )\n+        {\n+            fork.mainId = this.mainId;\n+            return fork;\n+        }\n+\n+        // TODO: Use interface method to build name?", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MTgzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446881834", "bodyText": "Not using this method outside this class so this can potentially be private.", "author": "zubaira", "createdAt": "2020-06-29T09:48:52Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java", "diffHunk": "@@ -0,0 +1,574 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import org.hisp.dhis.H2DhisConfigurationProvider;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.encryption.EncryptionStatus;\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceDomain;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public class TeTaValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private FileResourceService fileResourceService;\n+\n+    public void setupMetadata( String metaDataFile )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "url": "https://github.com/dhis2/dhis2-core/commit/68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T09:54:26Z", "type": "commit"}, {"oid": "5bd4c4a413adbc1e587b0e1194af3da352084268", "url": "https://github.com/dhis2/dhis2-core/commit/5bd4c4a413adbc1e587b0e1194af3da352084268", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T10:43:21Z", "type": "commit"}, {"oid": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "url": "https://github.com/dhis2/dhis2-core/commit/676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T10:52:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3Mzk0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446873940", "bodyText": "This description seems incomplete.", "author": "stian-sandvold", "createdAt": "2020-06-29T08:57:11Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+\n+/**\n+ * Helper class to", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446874708", "bodyText": "I assume this will be removed before merging?", "author": "stian-sandvold", "createdAt": "2020-06-29T08:58:20Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java", "diffHunk": "@@ -90,13 +99,24 @@ public TrackerController(\n         this.notifier = notifier;\n     }\n \n+    @PostMapping( value = \"/empty\", consumes = MediaType.APPLICATION_JSON_VALUE )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NzY5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446997696", "bodyText": "This is used for perf. testing. Will be removed", "author": "netroms", "createdAt": "2020-06-29T14:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDk0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446874940", "bodyText": "Remember to add these back in before merging.", "author": "stian-sandvold", "createdAt": "2020-06-29T08:58:42Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java", "diffHunk": "@@ -90,13 +99,24 @@ public TrackerController(\n         this.notifier = notifier;\n     }\n \n+    @PostMapping( value = \"/empty\", consumes = MediaType.APPLICATION_JSON_VALUE )\n+    @ResponseStatus( HttpStatus.OK )\n+    public String emptyCall( HttpServletRequest request, HttpServletResponse response,\n+        User currentUser )\n+        throws IOException\n+    {\n+        return \"empty\";\n+    }\n+\n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NTkzMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446875930", "bodyText": "Remove this before merge?\nSince we want a sync option, maybe we could take some of this code and reuse in a new PR for adding sync import.", "author": "stian-sandvold", "createdAt": "2020-06-29T09:00:11Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java", "diffHunk": "@@ -118,8 +138,46 @@ public void postJsonTracker( HttpServletRequest request, HttpServletResponse res\n             ) );\n     }\n \n+    @PostMapping( value = \"/sync\", consumes = MediaType.APPLICATION_JSON_VALUE )\n+    public TrackerImportReport postJsonTrackerSync( HttpServletRequest request, HttpServletResponse response,", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NzQxMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446997412", "bodyText": "Yes, this was very convenient for doing the perf testing. Will remove before merge.", "author": "netroms", "createdAt": "2020-06-29T14:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NTkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MDczMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446880732", "bodyText": "These can be uncommented if we revert the payload changes", "author": "stian-sandvold", "createdAt": "2020-06-29T09:46:15Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        Objects.requireNonNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n+//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+//            {\n+//                return;\n+//            }\n+\n+            Date completedDate = null;\n+\n+            if ( programStageInstance != null )\n+            {\n+                completedDate = programStageInstance.getCompletedDate();\n+            }\n+\n+            else if ( event.getCompletedAt() != null )\n+            {\n+                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+            }\n+\n+            if ( completedDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1042 )\n+                    .addArg( event ) );\n+            }\n+\n+            //TODO: This is troublesome, according to the error text this actually an auth check...\n+            // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n+            if ( completedDate != null && (new Date())\n+                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1043 )\n+                    .addArg( event ) );\n+            }\n+        }\n+    }\n+\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n+        Program program, ProgramStageInstance programStageInstance )\n+    {\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        //TODO: Cant find any reference outside validation code... is this still in use?\n+        PeriodType periodType = program.getExpiryPeriodType();\n+\n+        if ( periodType == null || program.getExpiryDays() == 0 )\n+        {\n+            // Nothing more to check here, return out\n+            return;\n+        }\n+\n+        if ( programStageInstance != null )\n+        {\n+            if ( programStageInstance.getExecutionDate() == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1044 )\n+                    .addArg( event ) );\n+            }\n+\n+            Period period = periodType.createPeriod( programStageInstance.getExecutionDate() );\n+\n+            if ( (new Date()).after(\n+                DateUtils.getDateAfterAddition( period.getEndDate(), program.getExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1045 )\n+                    .addArg( program ) );\n+            }\n+        }\n+        else\n+        {\n+            String referenceDate = event.getOccurredAt() != null ? event.getOccurredAt() : event.getScheduledAt();\n+            if ( referenceDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1046 )\n+                    .addArg( event ) );\n+            }\n+\n+            Period period = periodType.createPeriod( new Date() );\n+\n+            if ( DateUtils.parseDate( referenceDate ).before( period.getStartDate() ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1047 )\n+                    .addArg( event ) );\n+            }\n+        }\n+    }\n+\n+    private void validateDateFormat( ValidationErrorReporter reporter, Event event )\n+    {\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+\n+        if ( event.getScheduledAt() != null && isNotValidDateString( event.getScheduledAt() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1051 )\n+                .addArg( event.getScheduledAt() ) );\n+        }\n+\n+        if ( event.getOccurredAt() != null && isNotValidDateString( event.getOccurredAt() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1052 )\n+                .addArg( event.getOccurredAt() ) );\n+        }\n+\n+//        if ( event.getCreatedAtClient() != null && isNotValidDateString( event.getCreatedAtClient() ) )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5MzE3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446893170", "bodyText": "I agree. leave it as it is for now, then we need to figure out the usecase for this and see if we can solve it differently.", "author": "stian-sandvold", "createdAt": "2020-06-29T11:19:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getAttribute() != null )\n+        {\n+            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            if ( teAttribute == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1017 )\n+                    .addArg( attribute.getAttribute() ) );\n+            }\n+        }\n+    }\n+\n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n+        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+    {\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n+\n+        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n+        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .collect( Collectors.toSet() );\n+\n+        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n+        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n+            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+            .collect( Collectors.toMap(\n+                ProgramTrackedEntityAttribute::getAttribute,\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n+\n+        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n+        {\n+            TrackedEntityAttribute attribute = entry.getKey();\n+            Boolean attributeIsMandatory = entry.getValue();\n+\n+            // TODO: This is quite ugly and should be considered to be solved differently,", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5NjExMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446896110", "bodyText": "Remember to remove/uncomment this code before merge.", "author": "stian-sandvold", "createdAt": "2020-06-29T11:24:48Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java", "diffHunk": "@@ -0,0 +1,562 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class TrackedEntityImportValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> errorReports1 = commit.getErrorReports();\n+        assertTrue( errorReports1.isEmpty() );\n+\n+    }\n+\n+    @Test\n+    public void testTeValidationOkGenerateId()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_ok_no_uuids.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 0, report.getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+    }\n+\n+    @Test\n+    public void testValidateInvalidUid()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_invalid_uids.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1048 ) ) ) );\n+    }\n+\n+    @Test\n+    public void testTeValidationOkAll()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 0, report.getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessFailFast()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_2 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 13, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessToOrg()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_2 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 13, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessInAcl()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_1 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 13, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1001 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testWriteAccessInAclViaUserGroup()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_3 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 0, report.getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+    }\n+\n+    @Test\n+    public void testNonExistingTeType()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_error_teType-non-existing.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1005 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNoOrgUnit()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_error_orgunit-null.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1011 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNonExistingOrgUnit()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_error_orgunit-non-existing.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1011 ) ) ) );\n+    }\n+\n+//    @Test", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5ca59f3146a74d32ee856088e163893fd73a6ec", "url": "https://github.com/dhis2/dhis2-core/commit/f5ca59f3146a74d32ee856088e163893fd73a6ec", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T11:25:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5Njg5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446896898", "bodyText": "Technically DataElement can also be files, but I don't remember if we support this for Tracker specifically yet. @Bekkalizer ?", "author": "stian-sandvold", "createdAt": "2020-06-29T11:26:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/hooks/FileResourceTrackerPreheatHook.java", "diffHunk": "@@ -72,14 +72,17 @@ public void preheat( TrackerPreheatParams params, TrackerPreheat preheat )\n \n         List<String> fileResourceIds = new ArrayList<>();\n \n-        params.getTrackedEntities().forEach( te -> collectResourceIds( fileResourceAttributes, fileResourceIds, te.getAttributes() ) );\n-        params.getEnrollments().forEach( en -> collectResourceIds( fileResourceAttributes, fileResourceIds, en.getAttributes() ) );\n+        params.getTrackedEntities()\n+            .forEach( te -> collectResourceIds( fileResourceAttributes, fileResourceIds, te.getAttributes() ) );\n+        params.getEnrollments()", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTIxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449915211", "bodyText": "DataElements can be file resources too!", "author": "Bekkalizer", "createdAt": "2020-07-05T20:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5Njg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDE5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446900193", "bodyText": "@netroms can you note down this as well for the next meeting. Delete + TODO error usage comments.", "author": "stian-sandvold", "createdAt": "2020-06-29T11:32:28Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public enum TrackerErrorCode\n+{\n+    NONE( \"No error message given.\" ),\n+\n+    E1016( \"TrackedEntityInstance: `{0}`, already has an active enrollment in Program: `{1}`, and this \" +\n+        \"program only allows enrolling one time.\" ),\n+    E1038( \"TrackedEntityInstance: `{0}`, has multiple active enrollments in Program `{1}`.\" ),\n+    E1037( \"TrackedEntityInstance: `{0}`, is not enrolled in Program `{1}`.\" ),\n+    E1002( \"TrackedEntityInstance: `{0}`, already exists.\" ),\n+    E1064( \"Error validating attribute, not unique; Error `{0}`\" ),\n+    E1074( \"FeatureType is missing.\" ),\n+    E1031( \"Event OccurredAt date is missing.\" ),\n+    E1036( \"Event: `{0}`, TrackedEntityInstance does not point to a existing object.\" ),\n+    E1042( \"Event: `{0}`, needs to have completed date.\" ),\n+    E1056( \"Event date: `{0}`, is before start date: `{1}`, for AttributeOption: `{2}`.\" ),\n+    E1057( \"Event date: `{0}`, is after end date: `{1}`, for AttributeOption; `{2}`.\" ),\n+    E1051( \"Invalid event due date: `{0}`.\" ),\n+    E1052( \"Invalid event date: `{0}`.\" ),\n+    E1019( \"Only Program attributes is allowed for enrollment; Non valid attribute: `{0}`.\" ),\n+    E1008( \"Value: `{0}`, does not match the attribute pattern: `{1}`.\" ),\n+    E1007( \"Error validating attribute value type: `{0}`; Error: `{1}`.\" ),\n+    E1018( \"Missing mandatory attribute: `{0}`.\" ),\n+    E1075( \"Attribute: `{0}`, is missing uid.\" ),\n+    E1076( \"Attribute: `{0}`, value is null.\" ),\n+    E1077( \"Attribute: `{0}`, text value exceed the maximum allowed length: `{0}`.\" ),\n+    E1085( \"Attribute: `{0}`, value does not match value type: `{1}`.\" ),\n+    E1083( \"User: `{0}`, is not authorized to modify completed events.\" ),\n+    E1009( \"File resource: `{0}`, has already been assigned to a different object.\" ),\n+    E1084( \"File resource: `{0}`, reference could not be found.\" ),\n+    E1015( \"TrackedEntityInstance: `{0}`, already has an active Enrollment in Program `{1}`.\" ),\n+    E1022( \"TrackedEntityInstance: `{0}`, must have same TrackedEntityType as Program `{1}`.\" ),\n+    E1063( \"TrackedEntityInstance: `{0}`, does not exist.\" ),\n+    E1005( \"Could not find TrackedEntityType: `{0}`.\" ),\n+    E1006( \"Attribute: `{0}`, does not exist.\" ),\n+    E1011( \"Could not find OrganisationUnit with this uid: `{0}`.\" ),\n+    E1012( \"Geometry does not conform to FeatureType: `{0}`.\" ),\n+    E1014( \"Provided Program: `{0}`, is a Program without registration. \" +\n+        \"An Enrollment cannot be created into Program without registration.\" ),\n+    E1020( \"Enrollment date: `{0}`, can`t be future date.\" ),\n+    E1021( \"Incident date: `{0}`, can`t be future date.\" ),\n+    E1023( \"DisplayIncidentDate is true but IncidentDate is null or invalid formatted: `{0}`.\" ),\n+    E1025( \"Invalid Enrollment date: `{0}`.\" ),\n+    E1041( \"Enrollment OrganisationUnit: `{0}`, and Program: `{1}`, OrganisationUnit: `{2}`, don't match.\" ),\n+    E1068( \"Could not find TrackedEntityInstance: `{0}`, linked to Enrollment.\" ),\n+    E1069( \"Could not find Program: `{0}`, linked to Enrollment.\" ),\n+    E1070( \"Could not find OrganisationUnit: `{0}`, linked to Enrollment.\" ),\n+    E1080( \"Enrollment: `{0}`, already exists.\" ),\n+    E1081( \"Enrollment: `{0}`, do not exist.\" ),\n+    E1030( \"Event: `{0}`, already exists.\" ),\n+    E1032( \"Event: `{0}`, do not exist.\" ),\n+    E1035( \"Event: `{0}`, ProgramStage value is NULL.\" ),\n+    E1086( \"Event: `{0}`, has a program: `{1}`, that is a registration but its ProgramStage is not valid or missing.\" ),\n+    E1088( \"Event: `{0}`, program: `{1}`, and ProgramStage: `{2}`, could not be found.\" ),\n+    E1089( \"Event: `{0}`, ProgramStage Program and Event Program don't match.\" ),\n+    E1000( \"User: `{0}`, has no write access to OrganisationUnit: `{1}`.\" ),\n+    E1001( \"User: `{0}`, has no data write access to TrackedEntityType: `{1}`.\" ),\n+    E1091( \"User: `{0}`, has no data write access to Program: `{1}`.\" ),\n+    E1095( \"User: `{0}`, has no data write access to ProgramStage: `{1}`.\" ),\n+    E1096( \"User: `{0}`, has no data read access to Program: `{1}`.\" ),\n+    E1100( \"User: `{0}`, is lacking 'F_TEI_CASCADE_DELETE' authority to delete TrackedEntityInstance: `{1}`.\" ),\n+    E1102( \"User: `{0}`, does not have access to the tracked entity: `{1}`, Program: `{2}`, combination.\" ),\n+    E1103( \"User: `{0}`, is lacking 'F_ENROLLMENT_CASCADE_DELETE' authority to delete Enrollment : `{1}`.\" ),\n+    E1104( \"User: `{0}`, has no data read access to program: `{1}`, TrackedEntityType: `{2}`.\" ),\n+    E1112( \"Attribute value: `{0}`, is set to confidential but system is not properly configured to encrypt data.\" ),\n+    E1118( \"Note does not have a valid uuid: `{0}`.\" ),\n+    E1119( \"Note does not have a value: `{0}`.\" ),\n+    E1121( \"Note stored at date is invalid: `{0}`; Error: `{1}`.\" ),\n+    E1055( \"Default AttributeOptionCombo is not allowed since program has non-default CategoryCombo.\" ),\n+    E1115( \"Could not find CategoryOptionCombo: `{0}`.\" ),\n+    E1116( \"Could not find CategoryOption: `{0}`.\" ),\n+    E1117( \"CategoryOptionCombo does not exist for given category combo and category options: `{0}`.\" ),\n+    E1099( \"User: `{0}`, has no write access to CategoryOption: `{1}`.\" ),\n+    E1039( \"ProgramStage: `{0}`, is not repeatable and an event already exists.\" ),\n+    E1048( \"Object: `{0}`, uid: `{1}`, has an invalid uid format.\" ),\n+\n+    // TODO: Delete not working yet", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5ODE5NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446998194", "bodyText": "Done", "author": "netroms", "createdAt": "2020-06-29T14:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDY3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446900676", "bodyText": "Is there a reason we are overriding with an empty method?", "author": "stian-sandvold", "createdAt": "2020-06-29T11:33:26Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityGeoValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public TrackedEntityGeoValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDk1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446900953", "bodyText": "UID should be the same as trackedEntity", "author": "stian-sandvold", "createdAt": "2020-06-29T11:34:01Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java", "diffHunk": "@@ -45,8 +45,10 @@\n @Builder\n @NoArgsConstructor\n @AllArgsConstructor\n-public class TrackedEntity\n+public class TrackedEntity implements TrackerDto\n {\n+    private String uid;", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MjgxMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446992810", "bodyText": "This uid is used as a temp holder for the new uid when separating between create/update", "author": "netroms", "createdAt": "2020-06-29T13:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwNTk1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447005959", "bodyText": "A brief java doc would be helpful here.", "author": "zubaira", "createdAt": "2020-06-29T14:17:04Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java", "diffHunk": "@@ -26,24 +26,24 @@\n  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n  */\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Builder;\n+import lombok.Data;\n+\n /**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-public enum TrackerErrorCode\n+@Data\n+@Builder\n+public class TrackerValidationHookTimerReport", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwOTE1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447009155", "bodyText": "This method shows duplication of code with TrackedEntityImportValidatioTest.java.", "author": "zubaira", "createdAt": "2020-06-29T14:21:27Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java", "diffHunk": "@@ -0,0 +1,680 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EnrollmentImportValidationTest\n+    extends AbstractImportValidationTest\n+\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data.json\" );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    @Test\n+    public void testEnrollmentValidationOkAll()", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMzEwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447013108", "bodyText": "code duplication", "author": "zubaira", "createdAt": "2020-06-29T14:26:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EnrollmentAttrValidationTests\n+    extends AbstractImportValidationTest\n+{\n+\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private TrackedEntityAttributeService trackedEntityAttributeService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata_mandatory_attr.json\" ).getInputStream(),\n+            RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data_2.json\" );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 1, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    @Test\n+    public void testAttributesOk()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-data.json\" );", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNjY2OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447016669", "bodyText": "this code can be removed.", "author": "zubaira", "createdAt": "2020-06-29T14:31:29Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.EnrollmentStatus;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+import static org.hisp.dhis.util.DateUtils.getIso8601;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentInExistingValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected TrackerOwnershipManager trackerOwnershipManager;\n+\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    public EnrollmentInExistingValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+\n+        if ( EnrollmentStatus.CANCELLED == enrollment.getStatus() )\n+        {\n+            return;\n+        }\n+\n+        Program program = validationContext.getProgram( enrollment.getProgram() );\n+\n+        if ( (EnrollmentStatus.COMPLETED == enrollment.getStatus()\n+            && Boolean.FALSE.equals( program.getOnlyEnrollOnce() )) )\n+        {\n+            return;\n+        }\n+\n+        validateTeiNotEnrolledAlready( reporter, enrollment, program );\n+    }\n+\n+    protected void validateTeiNotEnrolledAlready( ValidationErrorReporter reporter,\n+        Enrollment enrollment, Program program )\n+    {\n+        User user = reporter.getValidationContext().getBundle().getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( enrollment.getTrackedEntity(), TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        TrackedEntityInstance tei = reporter.getValidationContext()\n+            .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        // TODO: Create a dedicated sql query....?\n+        Set<Enrollment> activeAndCompleted = getAllEnrollments( reporter, program, tei )\n+            .stream()\n+            .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() || EnrollmentStatus.COMPLETED == e.getStatus() )\n+            .collect( Collectors.toSet() );\n+\n+        if ( EnrollmentStatus.ACTIVE == enrollment.getStatus() )\n+        {\n+            Set<Enrollment> activeOnly = activeAndCompleted.stream()\n+                .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() )\n+                .collect( Collectors.toSet() );\n+\n+            if ( !activeOnly.isEmpty() )\n+            {\n+                // TODO: How do we do this check on an import set, this only checks when the DB already contains it\n+                reporter.addError( newReport( TrackerErrorCode.E1015 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+        }\n+\n+        if ( Boolean.TRUE.equals( program.getOnlyEnrollOnce() ) && !activeAndCompleted.isEmpty() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1016 )\n+                .addArg( tei )\n+                .addArg( program ) );\n+        }\n+    }\n+\n+    public List<Enrollment> getAllEnrollments( ValidationErrorReporter reporter, Program program,\n+        TrackedEntityInstance trackedEntityInstance )\n+    {\n+        User user = reporter.getValidationContext().getBundle().getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setSkipPaging( true );\n+        params.setProgram( program );\n+        params.setTrackedEntityInstance( trackedEntityInstance );\n+        List<ProgramInstance> programInstances = programInstanceService.getProgramInstances( params );\n+\n+        List<Enrollment> all = new ArrayList<>();\n+\n+        for ( ProgramInstance programInstance : programInstances )\n+        {\n+            // TODO: Move to ownership/security pre check hook if possible?\n+            if ( trackerOwnershipManager\n+                .hasAccess( user, programInstance.getEntityInstance(), programInstance.getProgram() ) )\n+            {\n+                // Always create a fork of the reporter when used for checking/counting errors,\n+                // this is needed for thread safety in parallel mode.\n+                ValidationErrorReporter reporterFork = reporter.fork();\n+\n+                trackerImportAccessManager.checkReadEnrollmentAccess( reporterFork, programInstance );\n+\n+                if ( reporterFork.hasErrors() )\n+                {\n+                    reporter.merge( reporterFork );\n+                }\n+                else\n+                {\n+                    all.add( getEnrollmentFromProgramInstance( programInstance ) );\n+                }\n+            }\n+        }\n+\n+        return all;\n+    }\n+\n+    public Enrollment getEnrollmentFromProgramInstance( ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+        Enrollment enrollment = new Enrollment();\n+        enrollment.setEnrollment( programInstance.getUid() );\n+\n+        if ( programInstance.getEntityInstance() != null )\n+        {\n+            enrollment.setTrackedEntityType( programInstance.getEntityInstance().getTrackedEntityType().getUid() );\n+            enrollment.setTrackedEntity( programInstance.getEntityInstance().getUid() );\n+        }\n+\n+        if ( programInstance.getOrganisationUnit() != null )\n+        {\n+            enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n+//            enrollment.setOrgUnitName( programInstance.getOrganisationUnit().getName() );\n+        }\n+\n+        if ( programInstance.getGeometry() != null )\n+        {\n+            enrollment.setGeometry( programInstance.getGeometry() );\n+\n+//            if ( programInstance.getProgram().getFeatureType() == FeatureType.POINT )", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "url": "https://github.com/dhis2/dhis2-core/commit/3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:33:35Z", "type": "commit"}, {"oid": "e969ffd48a52467420ef0b6e724d2324d41d328a", "url": "https://github.com/dhis2/dhis2-core/commit/e969ffd48a52467420ef0b6e724d2324d41d328a", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:36:19Z", "type": "commit"}, {"oid": "9794e609238425fa205be611d59b1202dfb4ce17", "url": "https://github.com/dhis2/dhis2-core/commit/9794e609238425fa205be611d59b1202dfb4ce17", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:38:02Z", "type": "commit"}, {"oid": "3f9b65636059a5bba5b3e2d603fe5b83bc2e122b", "url": "https://github.com/dhis2/dhis2-core/commit/3f9b65636059a5bba5b3e2d603fe5b83bc2e122b", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:38:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447033589", "bodyText": "I think this can be optimized by using Map<Class, ValidationFunction<T extends TrackerDto>.", "author": "zubaira", "createdAt": "2020-06-29T14:54:02Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java", "diffHunk": "@@ -0,0 +1,323 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.vividsolutions.jts.geom.Geometry;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.organisationunit.FeatureType;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.Ordered;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.DATE_STRING_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.GEOMETRY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public abstract class AbstractTrackerDtoValidationHook\n+    implements TrackerValidationHook\n+{\n+    private int order = Ordered.LOWEST_PRECEDENCE;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return order;\n+    }\n+\n+    public void setOrder( int order )\n+    {\n+        this.order = order;\n+    }\n+\n+    public static final String IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD = \"Implementing class fail to override this method!\";\n+\n+    @Autowired\n+    protected TrackedEntityAttributeService teAttrService;\n+\n+    @Autowired\n+    private TrackedEntityCommentService commentService;\n+\n+    private final TrackerImportStrategy strategy;\n+\n+    private final boolean removeOnError;\n+\n+    private final Class<?> dtoTypeClass;\n+\n+    public AbstractTrackerDtoValidationHook()\n+    {\n+        this.removeOnError = true;\n+        this.dtoTypeClass = null;\n+        this.strategy = null;\n+    }\n+\n+    public <T extends TrackerDto> AbstractTrackerDtoValidationHook( Class<T> dtoClass, TrackerImportStrategy strategy )\n+    {\n+        this.removeOnError = false;\n+        this.dtoTypeClass = dtoClass;\n+        this.strategy = strategy;\n+    }\n+\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    @Override\n+    public List<TrackerErrorReport> validate( TrackerImportValidationContext context )\n+    {\n+        TrackerBundle bundle = context.getBundle();\n+\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n+\n+        if ( this.strategy != null )\n+        {\n+            TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+\n+            if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n+            {\n+                return reporter.getReportList();\n+            }\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( TrackedEntity.class ) )", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NTYwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447055606", "bodyText": "Hi, I don't like this method and am very happy to get some tips on how to improve it. I am not quite sure what you mean with the map optimization you mention here. Can you please explain at bit more?", "author": "netroms", "createdAt": "2020-06-29T15:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5OTIwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447099209", "bodyText": "I have improved a little on it now. I am not sure it was the same as you had in mind :)", "author": "netroms", "createdAt": "2020-06-29T16:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxOTk3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449019970", "bodyText": "yes, that's way better now :)", "author": "zubaira", "createdAt": "2020-07-02T13:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ=="}], "type": "inlineReview"}, {"oid": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "url": "https://github.com/dhis2/dhis2-core/commit/5a88b9789ef69ff8e77ed519a08a51be23a852b0", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T16:51:29Z", "type": "commit"}, {"oid": "31226e1b78f88b637ba9fafd107bda982a178ec9", "url": "https://github.com/dhis2/dhis2-core/commit/31226e1b78f88b637ba9fafd107bda982a178ec9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-07-01T07:25:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1ODEzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448258134", "bodyText": "Can we have a more readable name here - we are not as such validating the TE, rather the importStarategy of the TE... so can we say validateTEImportStrategy instead of validateTrackedEntity ?\none more thing on the readability ... will it make the flow better if we organize the code into two blocks?\nif ( existingTe == null) //allow only create, other strategies throw error\nelse // create strategy should through error, others are accepted", "author": "abyot", "createdAt": "2020-07-01T10:05:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+@Component\n+public class PreCheckExistenceValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter,", "originalCommit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4NjAzMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448286030", "bodyText": "Do we need this method?", "author": "abyot", "createdAt": "2020-07-01T11:01:41Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "diffHunk": "@@ -74,7 +78,13 @@ public Relationship to( org.hisp.dhis.relationship.Relationship relationship )\n     }\n \n     @Override\n+    @Transactional( readOnly = true )\n     public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n+    {\n+        return _to( relationships );\n+    }\n+\n+    private List<Relationship> _to( List<org.hisp.dhis.relationship.Relationship> relationships )", "originalCommit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMjk4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448312980", "bodyText": "Emm... I am not really sure whether we need to validate notes. Under normal circumstances (importStrategy) we always append to event notes.\nHowever, if we have SYNC ... we might consider checking notes ... but again here also we could overwrite existing notes with incoming notes. What exactly we do during SYNC - we do a merge or full update/overwrite ?", "author": "abyot", "createdAt": "2020-07-01T11:58:05Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook", "originalCommit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "01afca4f0fcdcaab5cac82598d4b671f8ba3ee58", "url": "https://github.com/dhis2/dhis2-core/commit/01afca4f0fcdcaab5cac82598d4b671f8ba3ee58", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-07-02T12:43:04Z", "type": "commit"}, {"oid": "ec14261db1f790e1be25e5bb27b45226087a9dd5", "url": "https://github.com/dhis2/dhis2-core/commit/ec14261db1f790e1be25e5bb27b45226087a9dd5", "message": "* PR comment fixes\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-07-02T12:53:13Z", "type": "commit"}, {"oid": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "url": "https://github.com/dhis2/dhis2-core/commit/58917c0ff1988692a4906ea00a0e0670d4d251d7", "message": "* Merge master\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-07-03T12:06:52Z", "type": "commit"}, {"oid": "a6afb3aa2bbf5634d26be17ddf74f1ddd4630493", "url": "https://github.com/dhis2/dhis2-core/commit/a6afb3aa2bbf5634d26be17ddf74f1ddd4630493", "message": "* Sonar code comment adjustments", "committedDate": "2020-07-05T09:03:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MTU4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449691581", "bodyText": "Opinion: Would we either put the statement directly in the IF statement, alternatively rename b1 and b2 to what they actually mean?", "author": "Bekkalizer", "createdAt": "2020-07-03T19:47:02Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.EVENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckOwnershipValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( trackedEntity );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( bundle.getUser(), USER_CANT_BE_NULL );\n+        checkNotNull( trackedEntity, TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            checkNotNull( tei, TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+            if ( tei.getProgramInstances().stream().anyMatch( pi -> !pi.isDeleted() )\n+                && !user.isAuthorized( Authorities.F_TEI_CASCADE_DELETE.getAuthority() ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1100 )\n+                    .addArg( bundle.getUser() )\n+                    .addArg( tei ) );\n+            }\n+        }\n+\n+        // Check acting user is allowed to change/write existing tei type\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            TrackedEntityType trackedEntityType = tei.getTrackedEntityType();\n+            trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+        }\n+\n+        TrackedEntityType trackedEntityType = context\n+            .getTrackedEntityType( trackedEntity.getTrackedEntityType() );\n+        trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment.getOrgUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        checkNotNull( tei, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n+            checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+            boolean b1 = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MTkzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449691931", "bodyText": "Are we assuming that the programStage param is null when the program does not have registration?", "author": "Bekkalizer", "createdAt": "2020-07-03T19:49:22Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.EVENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckOwnershipValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( trackedEntity );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( bundle.getUser(), USER_CANT_BE_NULL );\n+        checkNotNull( trackedEntity, TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            checkNotNull( tei, TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+            if ( tei.getProgramInstances().stream().anyMatch( pi -> !pi.isDeleted() )\n+                && !user.isAuthorized( Authorities.F_TEI_CASCADE_DELETE.getAuthority() ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1100 )\n+                    .addArg( bundle.getUser() )\n+                    .addArg( tei ) );\n+            }\n+        }\n+\n+        // Check acting user is allowed to change/write existing tei type\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            TrackedEntityType trackedEntityType = tei.getTrackedEntityType();\n+            trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+        }\n+\n+        TrackedEntityType trackedEntityType = context\n+            .getTrackedEntityType( trackedEntity.getTrackedEntityType() );\n+        trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment.getOrgUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        checkNotNull( tei, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n+            checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+            boolean b1 = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n+            boolean b2 = !user.isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n+            if ( b1\n+                && b2 )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1103 )\n+                    .addArg( user )\n+                    .addArg( pi ) );\n+            }\n+        }\n+\n+        // Check acting user is allowed to change/write existing pi and program\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            ProgramInstance programInstance = context.getProgramInstance( enrollment.getEnrollment() );\n+            trackerImportAccessManager\n+                .checkWriteEnrollmentAccess( reporter, programInstance.getProgram(), programInstance );\n+        }\n+\n+        trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n+            new ProgramInstance( program, tei, organisationUnit ) );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( event );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( event, EVENT_CANT_BE_NULL );\n+\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n+        Program program = context.getProgram( event.getProgram() );\n+        ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+        ProgramInstance programInstance = context.getProgramInstance( event.getEnrollment() );\n+\n+        // Check acting user is allowed to change existing/write event\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            validateUpdateAndDeleteEvent( reporter, event, context.getProgramStageInstance( event.getEvent() ) );\n+        }\n+\n+        CategoryOptionCombo categoryOptionCombo = context\n+            .getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+\n+        validateCreateEvent( reporter, user,\n+            categoryOptionCombo,\n+            programStage,\n+            programInstance,\n+            organisationUnit,\n+            program );\n+    }\n+\n+    protected void validateCreateEvent( ValidationErrorReporter reporter, User actingUser,\n+        CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, ProgramInstance programInstance,\n+        OrganisationUnit organisationUnit, Program program )\n+    {\n+        checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( actingUser, USER_CANT_BE_NULL );\n+        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        boolean noProgramStageAndProgramIsWithoutReg = programStage == null && program.isWithoutRegistration();\n+\n+        programStage = noProgramStageAndProgramIsWithoutReg ? program.getProgramStageByStage( 1 ) : programStage;", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNTU0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450035546", "bodyText": "This is copied from the existing old code, I'm not sure why this is written like this, to me it looks like when programStage == null && program.isWithoutRegistration() then it will pick program.getProgramStageByStage( 1 ) in all other cases it til pick the incoming/parameter programStage.", "author": "netroms", "createdAt": "2020-07-06T07:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MTkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MzEwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449693102", "bodyText": "Is this a TODO, or would you remove it :)", "author": "Bekkalizer", "createdAt": "2020-07-03T19:56:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java", "diffHunk": "@@ -161,17 +169,22 @@ public void testCollectIdentifiersEvents() throws IOException\n         assertTrue( dataElements.contains( \"gfEoDU4GtXK\" ) );\n         assertTrue( dataElements.contains( \"qw67QlOlzdp\" ) );\n \n-        assertTrue( collectedMap.containsKey( Program.class ) );\n-        assertTrue( collectedMap.containsKey( ProgramStage.class ) );\n-        assertTrue( collectedMap.containsKey( OrganisationUnit.class ) );\n+        Set<String> categoryCombos = collectedMap.get( CategoryOptionCombo.class );\n+        assertTrue( categoryCombos.contains( \"HllvX50cXC0\" ) );\n+\n+        Set<String> categoryOptions = collectedMap.get( CategoryOption.class );\n+        assertTrue( categoryOptions.contains( \"xYerKDKCefk\" ) );\n+//        assertTrue( categoryOptions.contains( \"XXX\" ) );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MzY1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449693650", "bodyText": "occurredAt will always be present, even before the event is activated, and also after the event is completed. Would simply check the occurredAt not being null here.", "author": "Bekkalizer", "createdAt": "2020-07-03T19:59:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449694817", "bodyText": "Whats the difference between Event and ProgramStageInstance here? In the database those two things would be the same. Would different callers populate different params?", "author": "Bekkalizer", "createdAt": "2020-07-03T20:07:37Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5ODU4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450098586", "bodyText": "Good question, this comes from the conversion from the old to new. This looks strange, I think I can improve this.", "author": "netroms", "createdAt": "2020-07-06T09:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwMzUzMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450103532", "bodyText": "It's a lot of strange behaviour in this class. E.g. it is checking/validating the already persisted object several places.", "author": "netroms", "createdAt": "2020-07-06T09:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTI4NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449695285", "bodyText": "If program.getCompleteEventsExpiryDays is not present, we should not check for the expired condition at all. The second part of the if here seems to allow the execution into the if even when no program.getCompleteEventsExpiryDays is set?", "author": "Bekkalizer", "createdAt": "2020-07-03T20:10:43Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwNTIwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450105207", "bodyText": "What do you mean not present? getCompleteEventsExpiryDays is an int, it can never be null. I'm not sure what you mean here, I think we need to discuss this in a meeting. Adding to meeting document.", "author": "netroms", "createdAt": "2020-07-06T09:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTU4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449695581", "bodyText": "Are we sure about the assumption here? I would think that when a periodtype is set, 0 would mean that the we need to enter all the events within the period. So - just check periodtype, not the ExpiryDays.", "author": "Bekkalizer", "createdAt": "2020-07-03T20:12:34Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n+//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+//            {\n+//                return;\n+//            }\n+\n+            Date completedDate = null;\n+\n+            if ( programStageInstance != null )\n+            {\n+                completedDate = programStageInstance.getCompletedDate();\n+            }\n+\n+            else if ( event.getCompletedAt() != null )\n+            {\n+                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+            }\n+\n+            if ( completedDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1042 )\n+                    .addArg( event ) );\n+            }\n+\n+            //TODO: This is troublesome, according to the error text this actually an auth check...\n+            // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n+            if ( completedDate != null && (new Date())\n+                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1043 )\n+                    .addArg( event ) );\n+            }\n+        }\n+    }\n+\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n+        Program program, ProgramStageInstance programStageInstance )\n+    {\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        PeriodType periodType = program.getExpiryPeriodType();\n+\n+        if ( periodType == null || program.getExpiryDays() == 0 )", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwNjMzOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450106339", "bodyText": "Added for discussion to meeting document.", "author": "netroms", "createdAt": "2020-07-06T09:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Nzc2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449697762", "bodyText": "If we add this to the check we are changing the endpoint behavior. The endppoint did not require SYNC mode to ignore required value validation. Not saying its not sensible, but I think we should not have this additional check before we also sync this behavior with the frontend. If you agree, lets keep this as is, and add a feature jira issue where we document the new behavior and client updates.", "author": "Bekkalizer", "createdAt": "2020-07-03T20:26:22Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getAttribute() != null )\n+        {\n+            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            if ( teAttribute == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1017 )\n+                    .addArg( attribute.getAttribute() ) );\n+            }\n+        }\n+    }\n+\n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n+        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+    {\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n+\n+        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n+        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .collect( Collectors.toSet() );\n+\n+        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n+        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n+            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+            .collect( Collectors.toMap(\n+                ProgramTrackedEntityAttribute::getAttribute,\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n+\n+        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n+        {\n+            TrackedEntityAttribute attribute = entry.getKey();\n+            Boolean attributeIsMandatory = entry.getValue();\n+\n+            // TODO: This is quite ugly and should be considered to be solved differently,\n+            //  e.i. authorization should be handled in one common place.\n+            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwNjg0MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450106841", "bodyText": "Added to meeting document for further discussing next meeting.", "author": "netroms", "createdAt": "2020-07-06T09:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Nzc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTc3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449915776", "bodyText": "A few of these sets can be done outside the if statements, instead of doing it both in if and else.", "author": "Bekkalizer", "createdAt": "2020-07-05T20:31:22Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventCountValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    public EventCountValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        User user = validationContext.getBundle().getUser();\n+\n+        Program program = validationContext.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setTrackedEntityInstance( tei );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+            params.setUser( user );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTkwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449915901", "bodyText": "Whats the purpose of setting the params in this validation hook?", "author": "Bekkalizer", "createdAt": "2020-07-05T20:32:51Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventCountValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    public EventCountValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        User user = validationContext.getBundle().getUser();\n+\n+        Program program = validationContext.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setTrackedEntityInstance( tei );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMDIyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450110228", "bodyText": "Not sure what you mean. Where do you suggest to set them?", "author": "netroms", "createdAt": "2020-07-06T09:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzk4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449917987", "bodyText": "It would be good to also add a test that ensures we cannot access an event from an org unit outside the search and capture scopes. Assuming this test testNoWriteAccessToProgramStage checks only wether the user has write access to the program stage in question.", "author": "Bekkalizer", "createdAt": "2020-07-05T20:57:11Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java", "diffHunk": "@@ -0,0 +1,391 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.enrollment.EnrollmentService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ProgramStageDataElementService;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.ProgramStageInstanceService;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.security.acl.AccessStringHelper;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.trackedentity.TrackedEntityTypeService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EventSecurityImportValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramStageService programStageService;\n+\n+    @Autowired\n+    private ProgramStageInstanceService programStageServiceInstance;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private ProgramStageDataElementService programStageDataElementService;\n+\n+    @Autowired\n+    private TrackedEntityTypeService trackedEntityTypeService;\n+\n+    @Autowired\n+    private EnrollmentService enrollmentService;\n+\n+    @Autowired\n+    private ProgramInstanceService programInstanceService;\n+\n+    @Autowired\n+    private OrganisationUnitService organisationUnitService;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance maleA;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance maleB;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance femaleA;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance femaleB;\n+\n+    private OrganisationUnit organisationUnitA;\n+\n+    private OrganisationUnit organisationUnitB;\n+\n+    private Program programA;\n+\n+    private DataElement dataElementA;\n+\n+    private DataElement dataElementB;\n+\n+    private ProgramStage programStageA;\n+\n+    private ProgramStage programStageB;\n+\n+    private TrackedEntityType trackedEntityType;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data.json\" );\n+\n+        User user = userService.getUser( \"M5zQapPyTZI\" );\n+        trackerBundleParams.setUser( user );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+\n+        trackerBundleParams = renderService\n+            .fromJson(\n+                new ClassPathResource( \"tracker/validations/enrollments_te_enrollments-data.json\" ).getInputStream(),\n+                TrackerBundleParams.class );\n+\n+        trackerBundleParams.setUser( user );\n+\n+        trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getEnrollments().size() );\n+\n+        report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    private void setupMetadata()\n+    {\n+        organisationUnitA = createOrganisationUnit( 'A' );\n+        organisationUnitB = createOrganisationUnit( 'B' );\n+        manager.save( organisationUnitA );\n+        manager.save( organisationUnitB );\n+\n+        dataElementA = createDataElement( 'A' );\n+        dataElementB = createDataElement( 'B' );\n+        dataElementA.setValueType( ValueType.INTEGER );\n+        dataElementB.setValueType( ValueType.INTEGER );\n+\n+        manager.save( dataElementA );\n+        manager.save( dataElementB );\n+\n+        programStageA = createProgramStage( 'A', 0 );\n+        programStageB = createProgramStage( 'B', 0 );\n+        programStageB.setRepeatable( true );\n+\n+        manager.save( programStageA );\n+        manager.save( programStageB );\n+\n+        programA = createProgram( 'A', new HashSet<>(), organisationUnitA );\n+        programA.setProgramType( ProgramType.WITH_REGISTRATION );\n+\n+        trackedEntityType = createTrackedEntityType( 'A' );\n+        trackedEntityTypeService.addTrackedEntityType( trackedEntityType );\n+\n+        TrackedEntityType trackedEntityTypeFromProgram = createTrackedEntityType( 'C' );\n+        trackedEntityTypeService.addTrackedEntityType( trackedEntityTypeFromProgram );\n+\n+        manager.save( programA );\n+\n+        ProgramStageDataElement programStageDataElement = new ProgramStageDataElement();\n+        programStageDataElement.setDataElement( dataElementA );\n+        programStageDataElement.setProgramStage( programStageA );\n+        programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n+\n+        programStageA.getProgramStageDataElements().add( programStageDataElement );\n+        programStageA.setProgram( programA );\n+\n+        programStageDataElement = new ProgramStageDataElement();\n+        programStageDataElement.setDataElement( dataElementB );\n+        programStageDataElement.setProgramStage( programStageB );\n+        programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n+\n+        programStageB.getProgramStageDataElements().add( programStageDataElement );\n+        programStageB.setProgram( programA );\n+        programStageB.setMinDaysFromStart( 2 );\n+\n+        programA.getProgramStages().add( programStageA );\n+        programA.getProgramStages().add( programStageB );\n+\n+        programA.setTrackedEntityType( trackedEntityType );\n+        trackedEntityType.setPublicAccess( AccessStringHelper.DATA_READ_WRITE );\n+\n+        manager.update( programStageA );\n+        manager.update( programStageB );\n+        manager.update( programA );\n+\n+        maleA = createTrackedEntityInstance( 'A', organisationUnitA );\n+        maleB = createTrackedEntityInstance( organisationUnitB );\n+        femaleA = createTrackedEntityInstance( organisationUnitA );\n+        femaleB = createTrackedEntityInstance( organisationUnitB );\n+\n+        maleA.setTrackedEntityType( trackedEntityType );\n+        maleB.setTrackedEntityType( trackedEntityType );\n+        femaleA.setTrackedEntityType( trackedEntityType );\n+        femaleB.setTrackedEntityType( trackedEntityType );\n+\n+        manager.save( maleA );\n+        manager.save( maleB );\n+        manager.save( femaleA );\n+        manager.save( femaleB );\n+\n+        int testYear = Calendar.getInstance().get( Calendar.YEAR ) - 1;\n+        Date dateMar20 = getDate( testYear, 3, 20 );\n+        Date dateApr10 = getDate( testYear, 4, 10 );\n+\n+        ProgramInstance programInstance = programInstanceService\n+            .enrollTrackedEntityInstance( maleA, programA, dateMar20, dateApr10, organisationUnitA );\n+        programInstanceService.addProgramInstance( programInstance );\n+\n+        manager.update( programA );\n+\n+        User user = userService.getUser( USER_5 );\n+\n+        OrganisationUnit qfUVllTs6cS = organisationUnitService.getOrganisationUnit( \"QfUVllTs6cS\" );\n+        user.addOrganisationUnit( qfUVllTs6cS );\n+        user.addOrganisationUnit( organisationUnitA );\n+\n+        manager.update( user );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessToProgramStage()", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c469e1350e645b019954827553da9f855b7dcb4", "url": "https://github.com/dhis2/dhis2-core/commit/0c469e1350e645b019954827553da9f855b7dcb4", "message": "* PR comments adjustments", "committedDate": "2020-07-06T14:44:28Z", "type": "commit"}, {"oid": "971eecb46d414a2bf18f530223bef7a041abf919", "url": "https://github.com/dhis2/dhis2-core/commit/971eecb46d414a2bf18f530223bef7a041abf919", "message": "* PR comments adjustments", "committedDate": "2020-07-07T07:28:32Z", "type": "commit"}, {"oid": "323c5b586a83132f0ad8fd3039a6e21c85d51caf", "url": "https://github.com/dhis2/dhis2-core/commit/323c5b586a83132f0ad8fd3039a6e21c85d51caf", "message": "* Disable test that works locally but fail on Travis", "committedDate": "2020-07-07T08:16:17Z", "type": "commit"}, {"oid": "3b7b1ca2a01816b677631bc99928a71091860d75", "url": "https://github.com/dhis2/dhis2-core/commit/3b7b1ca2a01816b677631bc99928a71091860d75", "message": "* Fix default category option behaviour", "committedDate": "2020-07-07T10:47:37Z", "type": "commit"}, {"oid": "c9dbe7965959518882dbad8401946ed9a65ab742", "url": "https://github.com/dhis2/dhis2-core/commit/c9dbe7965959518882dbad8401946ed9a65ab742", "message": "* Fix more comments from PR", "committedDate": "2020-07-07T11:08:10Z", "type": "commit"}, {"oid": "fb6290fc467ede9d1e84928bae02aedeaaad6550", "url": "https://github.com/dhis2/dhis2-core/commit/fb6290fc467ede9d1e84928bae02aedeaaad6550", "message": "* Fix broken test", "committedDate": "2020-07-07T11:29:05Z", "type": "commit"}, {"oid": "26ccbc16a70acb1756192089cfbb9f0e7e548478", "url": "https://github.com/dhis2/dhis2-core/commit/26ccbc16a70acb1756192089cfbb9f0e7e548478", "message": "* Add suppress warnings to ignore false positive on Sonar", "committedDate": "2020-07-07T14:33:33Z", "type": "commit"}, {"oid": "0a0dfd78bf3cc7bdb4a1dfffe466ebc8707ce619", "url": "https://github.com/dhis2/dhis2-core/commit/0a0dfd78bf3cc7bdb4a1dfffe466ebc8707ce619", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-07-07T14:37:40Z", "type": "commit"}, {"oid": "bced6ffbdfe5501113754dedc6b20db674d04a4d", "url": "https://github.com/dhis2/dhis2-core/commit/bced6ffbdfe5501113754dedc6b20db674d04a4d", "message": "* Add set user to failing test", "committedDate": "2020-07-07T14:46:16Z", "type": "commit"}, {"oid": "1f743e7bc3db7848d57244dc5c3f2e1a8c3c4f5f", "url": "https://github.com/dhis2/dhis2-core/commit/1f743e7bc3db7848d57244dc5c3f2e1a8c3c4f5f", "message": "* Fix complaining Sonar", "committedDate": "2020-07-07T15:33:52Z", "type": "commit"}, {"oid": "692f75069aadcba0807b5c2c4bade15fa731c0db", "url": "https://github.com/dhis2/dhis2-core/commit/692f75069aadcba0807b5c2c4bade15fa731c0db", "message": "* Fix complaining Sonar", "committedDate": "2020-07-08T02:25:10Z", "type": "commit"}, {"oid": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "url": "https://github.com/dhis2/dhis2-core/commit/898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "message": "* Small adjustments to PR comments", "committedDate": "2020-07-09T06:17:04Z", "type": "commit"}, {"oid": "f068ebf76171126118f6f9d3a804e60957e8821a", "url": "https://github.com/dhis2/dhis2-core/commit/f068ebf76171126118f6f9d3a804e60957e8821a", "message": "* Small adjustments to PR comments", "committedDate": "2020-07-09T07:40:30Z", "type": "commit"}]}