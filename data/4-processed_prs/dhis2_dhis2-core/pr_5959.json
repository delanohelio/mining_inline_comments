{"pr_number": 5959, "pr_title": "feat: Add support for deletion of tracker objects [DHIS2-9085]", "pr_createdAt": "2020-08-19T14:11:46Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5959", "timeline": [{"oid": "0eda3deb89e3617936ee652a1de908319b752ad1", "url": "https://github.com/dhis2/dhis2-core/commit/0eda3deb89e3617936ee652a1de908319b752ad1", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085]", "committedDate": "2020-08-19T14:09:33Z", "type": "commit"}, {"oid": "4d59decd7c59d11f9d4076891c6954cde0606425", "url": "https://github.com/dhis2/dhis2-core/commit/4d59decd7c59d11f9d4076891c6954cde0606425", "message": "Add support for event deletion", "committedDate": "2020-08-19T14:37:12Z", "type": "commit"}, {"oid": "e56dd54092efed90919b697c3a7db0edcf06fb85", "url": "https://github.com/dhis2/dhis2-core/commit/e56dd54092efed90919b697c3a7db0edcf06fb85", "message": "Add deletion support for relationship", "committedDate": "2020-08-19T16:45:10Z", "type": "commit"}, {"oid": "b45265daf37ebc58af0b42d0c0168299bb8c2a85", "url": "https://github.com/dhis2/dhis2-core/commit/b45265daf37ebc58af0b42d0c0168299bb8c2a85", "message": "add void return type", "committedDate": "2020-08-19T16:53:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMDQwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r473730406", "bodyText": "This part of the code is one candidate to become a really unreadable one because the logic tree here is quite complex.\nMaybe we can try to understand all the different parameters that will create a different execution and the find a good way to put it in the code.\nI am saying that because I am changing this chunk of code in a different PR in the same way you are doing.", "author": "enricocolasante", "createdAt": "2020-08-20T07:58:39Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -102,19 +102,28 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n-\n-        trackerBundles = preProcessBundle( trackerBundles, importReport );\n-\n-        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n-\n-        if ( validationReport.hasErrors() )\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n         {", "originalCommit": "b45265daf37ebc58af0b42d0c0168299bb8c2a85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTQ2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r473731462", "bodyText": "This declaration is repeated in the if and in the else, put it outside of the block to remove the duplication of code", "author": "enricocolasante", "createdAt": "2020-08-20T07:59:25Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -102,19 +102,28 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n-\n-        trackerBundles = preProcessBundle( trackerBundles, importReport );\n-\n-        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n-\n-        if ( validationReport.hasErrors() )\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );", "originalCommit": "b45265daf37ebc58af0b42d0c0168299bb8c2a85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxOTUwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r474719502", "bodyText": "fixed", "author": "zubaira", "createdAt": "2020-08-21T14:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNTU2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r473735566", "bodyText": "Suggestion:\nto remove the duplication of code here you can create a map to link the TrackerType to the function to delete, then use iterate over this map to run the delete method, that will take the TrackedType, the function and the bundle as parameters. This way, we will have just one delete method instead of 4.", "author": "enricocolasante", "createdAt": "2020-08-20T08:02:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -228,6 +233,69 @@ public TrackerBundleReport commit( TrackerBundle bundle )\n         return bundleReport;\n     }\n \n+    @Override\n+    @Transactional\n+    public TrackerBundleReport delete( TrackerBundle bundle )\n+    {\n+        TrackerBundleReport bundleReport = new TrackerBundleReport();\n+\n+        if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n+        {\n+            return bundleReport;\n+        }\n+\n+        TrackerTypeReport trackedEntityReport = deleteTrackedEntities( bundle );\n+        TrackerTypeReport enrollmentReport = deleteEnrollments( bundle );\n+        TrackerTypeReport eventReport = deleteEvents( bundle );\n+        TrackerTypeReport relationshipReport = deleteRelationShips( bundle );\n+\n+        bundleReport.getTypeReportMap().put( TrackerType.TRACKED_ENTITY, trackedEntityReport );\n+        bundleReport.getTypeReportMap().put( TrackerType.ENROLLMENT, enrollmentReport );\n+        bundleReport.getTypeReportMap().put( TrackerType.EVENT, eventReport );\n+        bundleReport.getTypeReportMap().put( TrackerType.RELATIONSHIP, relationshipReport );\n+\n+        dbmsManager.clearSession();\n+        cacheManager.clearCache();\n+\n+        return bundleReport;\n+    }\n+", "originalCommit": "b45265daf37ebc58af0b42d0c0168299bb8c2a85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxOTU3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r474719575", "bodyText": "fixed", "author": "zubaira", "createdAt": "2020-08-21T14:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNTU2Ng=="}], "type": "inlineReview"}, {"oid": "fa4e4f0818f56db6f8899e58e7267888555b26a3", "url": "https://github.com/dhis2/dhis2-core/commit/fa4e4f0818f56db6f8899e58e7267888555b26a3", "message": "Merge branch 'master' into DHIS2-9085", "committedDate": "2020-08-21T12:25:11Z", "type": "commit"}, {"oid": "f3cdf0713090bccc62d8177001dc21430d48cac4", "url": "https://github.com/dhis2/dhis2-core/commit/f3cdf0713090bccc62d8177001dc21430d48cac4", "message": "refactor to fix review comments", "committedDate": "2020-08-21T14:04:32Z", "type": "commit"}, {"oid": "5779b1c791daff290b675d13d90e15ec49cc8566", "url": "https://github.com/dhis2/dhis2-core/commit/5779b1c791daff290b675d13d90e15ec49cc8566", "message": "code refactor", "committedDate": "2020-08-21T14:22:48Z", "type": "commit"}, {"oid": "4780e010c95936e4275fb6e5cbd66817f7e14f14", "url": "https://github.com/dhis2/dhis2-core/commit/4780e010c95936e4275fb6e5cbd66817f7e14f14", "message": "Merge branch 'master' into DHIS2-9085", "committedDate": "2020-08-23T12:33:01Z", "type": "commit"}, {"oid": "a80ce02f067226abe2d5afddcda9dd1a62a9aa70", "url": "https://github.com/dhis2/dhis2-core/commit/a80ce02f067226abe2d5afddcda9dd1a62a9aa70", "message": "add integration tests for tracker object deletion", "committedDate": "2020-08-23T13:02:21Z", "type": "commit"}, {"oid": "24aa72b2898850544ec61192a049749c5b00a165", "url": "https://github.com/dhis2/dhis2-core/commit/24aa72b2898850544ec61192a049749c5b00a165", "message": "fix: unit tests issues", "committedDate": "2020-08-23T13:23:03Z", "type": "commit"}, {"oid": "2a34f6efc94c5257c4aee971ee10052d7e226802", "url": "https://github.com/dhis2/dhis2-core/commit/2a34f6efc94c5257c4aee971ee10052d7e226802", "message": "update unit test", "committedDate": "2020-08-23T13:34:12Z", "type": "commit"}, {"oid": "9c1300265e72c39ee70a1149b68f733c83597e59", "url": "https://github.com/dhis2/dhis2-core/commit/9c1300265e72c39ee70a1149b68f733c83597e59", "message": "add sample payload for tei deletion", "committedDate": "2020-08-23T13:44:19Z", "type": "commit"}, {"oid": "fe96094ff338a4c2d3d4423ad08f65bb2fdc28d4", "url": "https://github.com/dhis2/dhis2-core/commit/fe96094ff338a4c2d3d4423ad08f65bb2fdc28d4", "message": "add unit test for enrollment deletion", "committedDate": "2020-08-23T17:14:53Z", "type": "commit"}, {"oid": "177553cb01142f7dc05329e2ba28c0b30da47e12", "url": "https://github.com/dhis2/dhis2-core/commit/177553cb01142f7dc05329e2ba28c0b30da47e12", "message": "rename method", "committedDate": "2020-08-23T17:18:03Z", "type": "commit"}, {"oid": "c07ff14643c8ae07004f0ced267ba827c924053d", "url": "https://github.com/dhis2/dhis2-core/commit/c07ff14643c8ae07004f0ced267ba827c924053d", "message": "add unit test for event deletion", "committedDate": "2020-08-24T08:50:38Z", "type": "commit"}, {"oid": "4f93ba2ecc2bc5f6b5b91e8d80e7e4d53efff7f0", "url": "https://github.com/dhis2/dhis2-core/commit/4f93ba2ecc2bc5f6b5b91e8d80e7e4d53efff7f0", "message": "add checks for deletion of associated events", "committedDate": "2020-08-24T11:41:58Z", "type": "commit"}, {"oid": "dd1d976b2067da4c828374c498d38f70f558ffab", "url": "https://github.com/dhis2/dhis2-core/commit/dd1d976b2067da4c828374c498d38f70f558ffab", "message": "Merge branch 'master' into DHIS2-9085", "committedDate": "2020-08-24T13:20:22Z", "type": "commit"}, {"oid": "ef1184b3fc0ef5a91313f98c4a6eee6d4dc8d6b8", "url": "https://github.com/dhis2/dhis2-core/commit/ef1184b3fc0ef5a91313f98c4a6eee6d4dc8d6b8", "message": "resolved conflicts", "committedDate": "2020-08-24T14:30:10Z", "type": "commit"}, {"oid": "a05179b9be01c4d44a13433cd788f96d1466506d", "url": "https://github.com/dhis2/dhis2-core/commit/a05179b9be01c4d44a13433cd788f96d1466506d", "message": "Merge branch 'DHIS2-9085' of github.com:dhis2/dhis2-core into DHIS2-9085", "committedDate": "2020-08-24T14:31:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NjM1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r476286355", "bodyText": "It wouldnt be easier to understand the flow if we just validate also the delete payload and make assumptions when actually deleting?\nIt seems to me that all this errors that we are raising here would be covered by the validation.\nAre there some false errors that would be raised?", "author": "enricocolasante", "createdAt": "2020-08-25T08:52:00Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerObjectsDeletionService.java", "diffHunk": "@@ -0,0 +1,444 @@\n+package org.hisp.dhis.tracker;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Lists;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.ProgramStageInstanceService;\n+import org.hisp.dhis.relationship.RelationshipService;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.system.notification.Notifier;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.converter.EnrollmentTrackerConverterService;\n+import org.hisp.dhis.tracker.converter.EventTrackerConverterService;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Relationship;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.TrackerObjectReport;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Zubair Asghar\n+ */\n+\n+@Service\n+public class DefaultTrackerObjectsDeletionService\n+    implements TrackerObjectDeletionService\n+{\n+    private final ProgramInstanceService programInstanceService;\n+\n+    private final TrackedEntityInstanceService teiService;\n+\n+    private final ProgramStageInstanceService programStageInstanceService;\n+\n+    private final RelationshipService relationshipService;\n+\n+    private final TrackerAccessManager trackerAccessManager;\n+\n+    private final EnrollmentTrackerConverterService enrollmentTrackerConverterService;\n+\n+    private final EventTrackerConverterService eventTrackerConverterService;\n+\n+    private final Notifier notifier;\n+\n+    public DefaultTrackerObjectsDeletionService( ProgramInstanceService programInstanceService,\n+         TrackedEntityInstanceService entityInstanceService,\n+         ProgramStageInstanceService stageInstanceService,\n+         RelationshipService relationshipService,\n+         TrackerAccessManager trackerAccessManager,\n+         EnrollmentTrackerConverterService enrollmentTrackerConverterService,\n+         EventTrackerConverterService eventTrackerConverterService,\n+         Notifier notifier )\n+    {\n+        this.programInstanceService = programInstanceService;\n+        this.teiService = entityInstanceService;\n+        this.programStageInstanceService = stageInstanceService;\n+        this.relationshipService = relationshipService;\n+        this.trackerAccessManager = trackerAccessManager;\n+        this.enrollmentTrackerConverterService = enrollmentTrackerConverterService;\n+        this.eventTrackerConverterService = eventTrackerConverterService;\n+        this.notifier = notifier;\n+    }\n+\n+    @Override\n+    public TrackerTypeReport deleteEnrollments( TrackerBundle bundle, TrackerType trackerType )\n+    {\n+        TrackerTypeReport typeReport = new TrackerTypeReport( trackerType );\n+\n+        List<Enrollment> enrollments = bundle.getEnrollments();\n+\n+        for ( int idx = 0; idx < enrollments.size(); idx++ )\n+        {\n+            String uid = enrollments.get( idx ).getEnrollment();\n+\n+            boolean existsEnrollment = programInstanceService.programInstanceExists( uid );\n+\n+            TrackerObjectReport trackerObjectReport = new TrackerObjectReport( TrackerType.ENROLLMENT );\n+\n+            if ( existsEnrollment )\n+            {\n+                ProgramInstance programInstance = programInstanceService.getProgramInstance( uid );\n+\n+                if ( bundle.getUser() != null )\n+                {\n+                    List<TrackerErrorReport> trackerErrorReports = isAllowedToDeleteEnrollment( idx, bundle.getUser(), programInstance, bundle );\n+\n+                    if ( !trackerErrorReports.isEmpty() )\n+                    {\n+                        trackerObjectReport.getErrorReports().addAll( trackerErrorReports );\n+                        trackerObjectReport.setIndex( idx );\n+                        trackerObjectReport.setUid( uid );\n+\n+                        typeReport.addObjectReport( trackerObjectReport );\n+                        typeReport.getStats().incIgnored();\n+                        return typeReport;\n+                    }\n+                }\n+\n+                List<Event> events = eventTrackerConverterService.to( Lists.newArrayList( programInstance.getProgramStageInstances() ) );\n+\n+                TrackerBundle trackerBundle = TrackerBundle.builder().events( events ).user( bundle.getUser() ).build();\n+\n+                // Associated events should be deleted provided user has authority for that.\n+                TrackerTypeReport eventReport = deleteEvents( trackerBundle, TrackerType.EVENT );\n+\n+                if ( !eventReport.isEmpty() )\n+                {\n+                    trackerObjectReport.getErrorReports().addAll( eventReport.getErrorReports() );\n+                }\n+\n+                programInstanceService.deleteProgramInstance( programInstance );\n+                teiService.updateTrackedEntityInstance( programInstance.getEntityInstance() );\n+\n+                typeReport.addObjectReport( trackerObjectReport );\n+                typeReport.getStats().incDeleted();\n+            }\n+            else\n+            {\n+                trackerObjectReport.getErrorReports().add( TrackerErrorReport.builder()", "originalCommit": "a05179b9be01c4d44a13433cd788f96d1466506d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NDY4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r476354689", "bodyText": "fixed", "author": "zubaira", "createdAt": "2020-08-25T10:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NjM1NQ=="}], "type": "inlineReview"}, {"oid": "e1959dd857c95ab26185657759345e5b99a3b57b", "url": "https://github.com/dhis2/dhis2-core/commit/e1959dd857c95ab26185657759345e5b99a3b57b", "message": "Merge branch 'master' into DHIS2-9085", "committedDate": "2020-08-25T09:33:06Z", "type": "commit"}, {"oid": "f64f8bd2e4ad8c21a7318850f17a1e8f117ffb83", "url": "https://github.com/dhis2/dhis2-core/commit/f64f8bd2e4ad8c21a7318850f17a1e8f117ffb83", "message": "include validation step while deletion", "committedDate": "2020-08-25T10:45:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5MTQ2NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r476391465", "bodyText": "This error reports should be here. They should be in the validation phase.\nSame thing for all the other errors in this class.", "author": "enricocolasante", "createdAt": "2020-08-25T11:56:31Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerObjectsDeletionService.java", "diffHunk": "@@ -0,0 +1,365 @@\n+package org.hisp.dhis.tracker;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Lists;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.ProgramStageInstanceService;\n+import org.hisp.dhis.relationship.RelationshipService;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.trackedentity.TrackerAccessManager;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.converter.EnrollmentTrackerConverterService;\n+import org.hisp.dhis.tracker.converter.EventTrackerConverterService;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Relationship;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.TrackerObjectReport;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Zubair Asghar\n+ */\n+\n+@Service\n+public class DefaultTrackerObjectsDeletionService\n+    implements TrackerObjectDeletionService\n+{\n+    private final ProgramInstanceService programInstanceService;\n+\n+    private final TrackedEntityInstanceService teiService;\n+\n+    private final ProgramStageInstanceService programStageInstanceService;\n+\n+    private final RelationshipService relationshipService;\n+\n+    private final TrackerAccessManager trackerAccessManager;\n+\n+    private final EnrollmentTrackerConverterService enrollmentTrackerConverterService;\n+\n+    private final EventTrackerConverterService eventTrackerConverterService;\n+\n+    public DefaultTrackerObjectsDeletionService( ProgramInstanceService programInstanceService,\n+         TrackedEntityInstanceService entityInstanceService,\n+         ProgramStageInstanceService stageInstanceService,\n+         RelationshipService relationshipService,\n+         TrackerAccessManager trackerAccessManager,\n+         EnrollmentTrackerConverterService enrollmentTrackerConverterService,\n+         EventTrackerConverterService eventTrackerConverterService )\n+    {\n+        this.programInstanceService = programInstanceService;\n+        this.teiService = entityInstanceService;\n+        this.programStageInstanceService = stageInstanceService;\n+        this.relationshipService = relationshipService;\n+        this.trackerAccessManager = trackerAccessManager;\n+        this.enrollmentTrackerConverterService = enrollmentTrackerConverterService;\n+        this.eventTrackerConverterService = eventTrackerConverterService;\n+    }\n+\n+    @Override\n+    public TrackerTypeReport deleteEnrollments( TrackerBundle bundle, TrackerType trackerType )\n+    {\n+        TrackerTypeReport typeReport = new TrackerTypeReport( trackerType );\n+\n+        List<Enrollment> enrollments = bundle.getEnrollments();\n+\n+        for ( int idx = 0; idx < enrollments.size(); idx++ )\n+        {\n+            String uid = enrollments.get( idx ).getEnrollment();\n+\n+            TrackerObjectReport trackerObjectReport = new TrackerObjectReport( TrackerType.ENROLLMENT );\n+\n+            ProgramInstance programInstance = programInstanceService.getProgramInstance( uid );\n+\n+            if ( bundle.getUser() != null )\n+            {\n+                List<TrackerErrorReport> trackerErrorReports = isAllowedToDeleteEnrollment( idx, bundle.getUser(), programInstance, bundle );\n+\n+                if ( !trackerErrorReports.isEmpty() )\n+                {\n+                    trackerObjectReport.getErrorReports().addAll( trackerErrorReports );\n+                    trackerObjectReport.setIndex( idx );\n+                    trackerObjectReport.setUid( uid );\n+\n+                    typeReport.addObjectReport( trackerObjectReport );\n+                    typeReport.getStats().incIgnored();\n+                    return typeReport;\n+                }\n+            }\n+\n+            List<Event> events = eventTrackerConverterService.to( Lists.newArrayList( programInstance.getProgramStageInstances() ) );\n+\n+            TrackerBundle trackerBundle = TrackerBundle.builder().events( events ).user( bundle.getUser() ).build();\n+\n+            // Associated events should be deleted provided user has authority for that.\n+            TrackerTypeReport eventReport = deleteEvents( trackerBundle, TrackerType.EVENT );\n+\n+            if ( !eventReport.isEmpty() )\n+            {\n+                trackerObjectReport.getErrorReports().addAll( eventReport.getErrorReports() );\n+            }\n+\n+            programInstanceService.deleteProgramInstance( programInstance );\n+            teiService.updateTrackedEntityInstance( programInstance.getEntityInstance() );\n+\n+            typeReport.addObjectReport( trackerObjectReport );\n+            typeReport.getStats().incDeleted();\n+        }\n+\n+        return typeReport;\n+    }\n+\n+    @Override\n+    public TrackerTypeReport deleteEvents( TrackerBundle bundle, TrackerType trackerType )\n+    {\n+        TrackerTypeReport typeReport = new TrackerTypeReport( trackerType );\n+\n+        List<Event> events = bundle.getEvents();\n+\n+        for ( int idx = 0; idx < events.size(); idx++ )\n+        {\n+            String uid = events.get( idx ).getEvent();\n+\n+            TrackerObjectReport trackerObjectReport = new TrackerObjectReport( TrackerType.EVENT );\n+\n+            List<TrackerErrorReport> trackerErrorReports = new ArrayList<>();\n+\n+            ProgramStageInstance programStageInstance = programStageInstanceService.getProgramStageInstance( uid );\n+\n+            List<String> errors = trackerAccessManager.canDelete( bundle.getUser(), programStageInstance, false );\n+\n+            if ( !errors.isEmpty() )\n+            {\n+                errors.forEach( error -> trackerErrorReports.add( TrackerErrorReport.builder()\n+                    .mainKlass( ProgramStageInstance.class )\n+                    .errorMessage( error )\n+                    .build( bundle ) ) );\n+\n+                trackerObjectReport.getErrorReports().addAll( trackerErrorReports );\n+                trackerObjectReport.setIndex( idx );\n+                trackerObjectReport.setUid( uid );\n+\n+                typeReport.addObjectReport( trackerObjectReport );\n+                typeReport.getStats().incIgnored();\n+                return typeReport;\n+            }\n+\n+            programStageInstanceService.deleteProgramStageInstance( programStageInstance );\n+\n+            if ( programStageInstance.getProgramStage().getProgram().isRegistration() )\n+            {\n+                teiService.updateTrackedEntityInstance( programStageInstance.getProgramInstance().getEntityInstance() );\n+            }\n+\n+            typeReport.addObjectReport( trackerObjectReport );\n+            typeReport.getStats().incDeleted();\n+        }\n+\n+        return typeReport;\n+    }\n+\n+    @Override\n+    public TrackerTypeReport deleteTrackedEntityInstances( TrackerBundle bundle, TrackerType trackerType )\n+    {\n+        TrackerTypeReport typeReport = new TrackerTypeReport( trackerType );\n+\n+        List<TrackedEntity> trackedEntities = bundle.getTrackedEntities();\n+\n+        for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n+        {\n+            String uid = trackedEntities.get( idx ).getTrackedEntity();\n+\n+            TrackerObjectReport trackerObjectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY );\n+\n+            org.hisp.dhis.trackedentity.TrackedEntityInstance daoEntityInstance = teiService\n+                    .getTrackedEntityInstance( uid );\n+\n+            if ( bundle.getUser() != null )\n+            {\n+                List<TrackerErrorReport> trackerErrorReports = isAllowedToDeleteTrackedEntity( idx, bundle.getUser(), daoEntityInstance, bundle );\n+\n+                if ( !trackerErrorReports.isEmpty() )\n+                {\n+                    trackerObjectReport.getErrorReports().addAll( trackerErrorReports );\n+                    trackerObjectReport.setIndex( idx );\n+                    trackerObjectReport.setUid( uid );\n+\n+                    typeReport.addObjectReport( trackerObjectReport );\n+                    typeReport.getStats().incIgnored();\n+                    return typeReport;\n+                }\n+            }\n+\n+            Set<ProgramInstance> programInstances = daoEntityInstance.getProgramInstances();\n+\n+            List<Enrollment> enrollments = enrollmentTrackerConverterService.to( Lists.newArrayList( programInstances ) );\n+\n+            TrackerBundle trackerBundle = TrackerBundle.builder().enrollments( enrollments ).user( bundle.getUser() ).build();\n+\n+            // Associated enrollments should be deleted provided user has authority for that.\n+            TrackerTypeReport enrollmentReport = deleteEnrollments( trackerBundle, TrackerType.ENROLLMENT );\n+\n+            if ( !enrollmentReport.isEmpty() )\n+            {\n+                trackerObjectReport.getErrorReports().addAll( enrollmentReport.getErrorReports() );\n+            }\n+\n+            teiService.deleteTrackedEntityInstance( daoEntityInstance );\n+\n+            typeReport.addObjectReport( trackerObjectReport );\n+            typeReport.getStats().incDeleted();\n+        }\n+\n+        return typeReport;\n+    }\n+\n+    @Override\n+    public TrackerTypeReport deleteRelationShips( TrackerBundle bundle, TrackerType trackerType )\n+    {\n+        TrackerTypeReport typeReport = new TrackerTypeReport( trackerType );\n+\n+        List<Relationship> relationships = bundle.getRelationships();\n+\n+        for ( int idx = 0; idx < relationships.size(); idx++ )\n+        {\n+            String uid = relationships.get( idx ).getRelationship();\n+\n+            TrackerObjectReport trackerObjectReport = new TrackerObjectReport( TrackerType.RELATIONSHIP );\n+\n+            List<TrackerErrorReport> trackerErrorReports = new ArrayList<>();\n+\n+            org.hisp.dhis.relationship.Relationship relationship = relationshipService.getRelationship( uid );\n+\n+            List<String> errors = trackerAccessManager.canWrite( bundle.getUser(), relationship );\n+\n+            if ( !errors.isEmpty() )\n+            {\n+                errors.forEach( error -> trackerErrorReports.add( TrackerErrorReport.builder()\n+                    .mainKlass( org.hisp.dhis.relationship.Relationship.class )\n+                    .errorMessage( error )\n+                    .build( bundle ) ) );\n+\n+                trackerObjectReport.getErrorReports().addAll( trackerErrorReports );\n+                trackerObjectReport.setIndex( idx );\n+                trackerObjectReport.setUid( uid );\n+\n+                typeReport.addObjectReport( trackerObjectReport );\n+                typeReport.getStats().incIgnored();\n+                return typeReport;\n+            }\n+\n+            relationshipService.deleteRelationship( relationship );\n+\n+            typeReport.getStats().incDeleted();\n+        }\n+\n+        return typeReport;\n+    }\n+\n+    private List<TrackerErrorReport> isAllowedToDeleteEnrollment( int index, User user, ProgramInstance pi, TrackerBundle bundle )\n+    {\n+        List<TrackerErrorReport> errorReports = new ArrayList<>();\n+\n+        Set<ProgramStageInstance> notDeletedProgramStageInstances = pi.getProgramStageInstances().stream()\n+            .filter( psi -> !psi.isDeleted() )\n+            .collect( Collectors.toSet() );\n+\n+        if ( !notDeletedProgramStageInstances.isEmpty() && !user.isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() ) )\n+        {\n+            TrackerErrorReport trackerErrorReport = TrackerErrorReport.builder()", "originalCommit": "f64f8bd2e4ad8c21a7318850f17a1e8f117ffb83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5MjE1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r476392150", "bodyText": "Why is this a warning?\nIf import error is not empty it means that the importer didnt manage to delete something that was supposed to delete.", "author": "enricocolasante", "createdAt": "2020-08-25T11:57:51Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -181,6 +188,26 @@ protected void commitBundle( TrackerImportParams params, TrackerImportReport imp\n         }\n     }\n \n+    protected void deleteBundle( TrackerImportParams params, TrackerImportReport importReport, List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n+\n+        trackerBundles.forEach( tb -> importReport.getBundleReports().add( trackerBundleService.delete( tb ) ) );\n+\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );", "originalCommit": "f64f8bd2e4ad8c21a7318850f17a1e8f117ffb83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwMTg0Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5959#discussion_r476401842", "bodyText": "In case of validation errors neither delete nor commit would be executed. In other cases, execution will flow as it should and if there is any error then it will log it as WARNING without stopping the execution.", "author": "zubaira", "createdAt": "2020-08-25T12:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5MjE1MA=="}], "type": "inlineReview"}, {"oid": "f690112f51dcdfcdc56f33be9afecdf92607d4ef", "url": "https://github.com/dhis2/dhis2-core/commit/f690112f51dcdfcdc56f33be9afecdf92607d4ef", "message": "MWT", "committedDate": "2020-08-25T15:36:27Z", "type": "commit"}, {"oid": "d8e02a452803d49e83ccddb8ae7fff665c22a208", "url": "https://github.com/dhis2/dhis2-core/commit/d8e02a452803d49e83ccddb8ae7fff665c22a208", "message": "Merge branch 'master' into DHIS2-9085", "committedDate": "2020-08-25T15:52:35Z", "type": "commit"}, {"oid": "ab903680fcbc655359feb5b4795496c5d38f56b5", "url": "https://github.com/dhis2/dhis2-core/commit/ab903680fcbc655359feb5b4795496c5d38f56b5", "message": "Merge branch 'master' into DHIS2-9085", "committedDate": "2020-08-25T16:06:48Z", "type": "commit"}, {"oid": "049259bfa5c19f02cad21be20dc212b08cd49a0a", "url": "https://github.com/dhis2/dhis2-core/commit/049259bfa5c19f02cad21be20dc212b08cd49a0a", "message": "fix unit tests", "committedDate": "2020-08-25T18:52:38Z", "type": "commit"}, {"oid": "b10e04b9187082df79c3555a6bed7c9e350aa7e9", "url": "https://github.com/dhis2/dhis2-core/commit/b10e04b9187082df79c3555a6bed7c9e350aa7e9", "message": "fix code smells", "committedDate": "2020-08-26T09:05:11Z", "type": "commit"}, {"oid": "9a579a4574bdb7ba235aec6bd511ed3e7b4e4c4a", "url": "https://github.com/dhis2/dhis2-core/commit/9a579a4574bdb7ba235aec6bd511ed3e7b4e4c4a", "message": "refactor to fix duplicate code", "committedDate": "2020-08-26T09:39:43Z", "type": "commit"}, {"oid": "4d1af865923538153014e32306cedb8418c41623", "url": "https://github.com/dhis2/dhis2-core/commit/4d1af865923538153014e32306cedb8418c41623", "message": "Merge branch 'master' into DHIS2-9085", "committedDate": "2020-08-27T11:02:38Z", "type": "commit"}, {"oid": "f0aaa82b90a7f043400b5b5f18418012ee14a379", "url": "https://github.com/dhis2/dhis2-core/commit/f0aaa82b90a7f043400b5b5f18418012ee14a379", "message": "code style", "committedDate": "2020-08-27T11:03:23Z", "type": "commit"}, {"oid": "f189743e0891773e7a9076cb06d3e12830130e30", "url": "https://github.com/dhis2/dhis2-core/commit/f189743e0891773e7a9076cb06d3e12830130e30", "message": "Add todo message", "committedDate": "2020-08-27T12:26:02Z", "type": "commit"}]}