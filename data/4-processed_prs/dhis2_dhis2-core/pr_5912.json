{"pr_number": 5912, "pr_title": "feat: fetch Org Unit coordinate in event analytics query", "pr_createdAt": "2020-08-11T15:10:13Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5912", "timeline": [{"oid": "f28e03fc66dd70330d27e42abf03433cefdedfb3", "url": "https://github.com/dhis2/dhis2-core/commit/f28e03fc66dd70330d27e42abf03433cefdedfb3", "message": "test: add more unit tests", "committedDate": "2020-08-12T09:06:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMTkxMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469211913", "bodyText": "This feels a bit \"iffy\". Could we instead change it so that the QueryItem contains the correct value type? We do have ValueType.COORDINATE. If the Query item contains this value type in the case of org unit, we can remove this if statement.", "author": "larshelge", "createdAt": "2020-08-12T12:13:33Z", "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/event/data/AbstractAnalyticsService.java", "diffHunk": "@@ -102,7 +104,21 @@ protected Grid getGrid( EventQueryParams params )\n \n         for ( QueryItem item : params.getItems() )\n         {\n-            grid.addHeader( new GridHeader( item.getItem().getUid(), item.getItem().getDisplayProperty( params.getDisplayProperty() ), item.getValueType(), item.getTypeAsString(), false, true, item.getOptionSet(), item.getLegendSet() ) );\n+            if ( item.getValueType() == ValueType.ORGANISATION_UNIT\n+                && params.getCoordinateField().equals( item.getItem().getUid() ) )\n+            {   // Special case: if the request contains an item of Org Unit value type and the item uid\n+                // is linked to coordinates (coordinateField), then create an Header of ValueType\n+                // COORDINATE and type \"Point\"\n+                grid.addHeader( new GridHeader( item.getItem().getUid(),\n+                    item.getItem().getDisplayProperty( params.getDisplayProperty() ), COORDINATE,\n+                    Point.class.getName(), false, true, item.getOptionSet(), item.getLegendSet() ) );", "originalCommit": "f28e03fc66dd70330d27e42abf03433cefdedfb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2MTg2OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469261868", "bodyText": "Do we only support Point in analytics? Org Units can be any type of Geometry, right? While Coordinates is always a Point?", "author": "stian-sandvold", "createdAt": "2020-08-12T13:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMTkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4OTU1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469289555", "bodyText": "@stian-sandvold I have some back and forth with Bjorn regarding this: Org Units can be Point, but also Polygons etc. So, there were two possibilities: only return data for OrgUnit which use Point Geometry or use the \"Centroid\" function in Postgres, which returns the center of a \"geometry\". That's what we decided to use: we always return a type \"Point\" and when we query the db we use the ST_Centroid function against the org unit coordinates, which will always return a Point, no matter what geometry the OU has.\nThe problem is a bit more complicated actually: let's say that a client requests 100 events, and they all have an attribute that has type OU and this OU is a complex polygon.\nThe resulting payload will contain 100 events with the super-large polygon data attached to it.\nThe best solution would actually to have a \"OU\" section in the payload so that every event in the payload event can reference it and we only return the Geometry data once. Since this is something that should be discussed, we decided to go for this \"compromise\", since the Point data are small, and it's no harm to duplicated it over and over. Hope it makes sense...", "author": "luciano-fiandesio", "createdAt": "2020-08-12T14:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMTkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MTY2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469341666", "bodyText": "@larshelge I agree 100% but it's a bit tricky to do it differently: I'll explain. If I do for example something like that when we map the http request to the actual params:\nfinal QueryItem queryItem = getQueryItem( dim, pr, request.getOutputType() );\n                    \nif ( queryItem.getValueType() == ValueType.ORGANISATION_UNIT\n    && request.getCoordinateField().equals( queryItem.getItem().getUid() ) )\n{\n    queryItem.setValueType( COORDINATE );\n}\n\nIf I do something like this, then I \"loose\" the knowlege that the attribute was actually ORG UNIT. When I get to the point where I need to build the SQL query, I need to know the actual column \"_geom\", but since the query item is now a coordinate type I will not be able to do that. I hope it makes sense. Pretty sure there is some other way, just can't see it now. Lets have a quick chat when you have a second?", "author": "luciano-fiandesio", "createdAt": "2020-08-12T15:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMTkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDA1OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469264058", "bodyText": "This comes back to my previous question. Do we only support Point for OrgUnit Geometry? I would expect org units most often to be areas? Also, will this result in the correct numbers? I don't remember which standard Bj\u00f8rn told me to use, but he mentioned a specific one.", "author": "stian-sandvold", "createdAt": "2020-08-12T13:36:01Z", "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/event/data/AbstractJdbcEventAnalyticsManager.java", "diffHunk": "@@ -268,6 +269,16 @@ else if ( ValueType.COORDINATE == queryItem.getValueType() )\n \n                 columns.add( coordSql );\n             }\n+            else if ( ValueType.ORGANISATION_UNIT == queryItem.getValueType()\n+                && params.getCoordinateField().equals( queryItem.getItem().getUid() ) )\n+            {\n+                String colName = quote( queryItem.getItemId() + OU_GEOMETRY_COL_SUFFIX );\n+\n+                String coordSql =  \"'[' || round(ST_X(ST_Centroid(\" + colName + \"))::numeric, 6) || ',' || round(ST_Y(ST_Centroid(\" + colName + \"))::numeric, 6) || ']' as \" + colName;", "originalCommit": "f28e03fc66dd70330d27e42abf03433cefdedfb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4OTgyNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469289827", "bodyText": "See comment above.", "author": "luciano-fiandesio", "createdAt": "2020-08-12T14:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDIyOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469264229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return getCoordinateFieldOrFail( dataElement.getValueType(), coordinateField, ErrorCode.E7219);\n          \n          \n            \n                        return getCoordinateFieldOrFail( dataElement.getValueType(), coordinateField, ErrorCode.E7219 );", "author": "stian-sandvold", "createdAt": "2020-08-12T13:36:17Z", "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/event/data/DefaultEventDataQueryService.java", "diffHunk": "@@ -326,24 +327,14 @@ public String getCoordinateField( String coordinateField )\n \n         if ( dataElement != null )\n         {\n-            if ( ValueType.COORDINATE != dataElement.getValueType() )\n-            {\n-                throwIllegalQueryEx( ErrorCode.E7219, coordinateField );\n-            }\n-\n-            return dataElement.getUid();\n+            return getCoordinateFieldOrFail( dataElement.getValueType(), coordinateField, ErrorCode.E7219);", "originalCommit": "f28e03fc66dd70330d27e42abf03433cefdedfb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NDMwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469264307", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return getCoordinateFieldOrFail( attribute.getValueType(), coordinateField, ErrorCode.E7220);\n          \n          \n            \n                        return getCoordinateFieldOrFail( attribute.getValueType(), coordinateField, ErrorCode.E7220 );", "author": "stian-sandvold", "createdAt": "2020-08-12T13:36:25Z", "path": "dhis-2/dhis-services/dhis-service-analytics/src/main/java/org/hisp/dhis/analytics/event/data/DefaultEventDataQueryService.java", "diffHunk": "@@ -326,24 +327,14 @@ public String getCoordinateField( String coordinateField )\n \n         if ( dataElement != null )\n         {\n-            if ( ValueType.COORDINATE != dataElement.getValueType() )\n-            {\n-                throwIllegalQueryEx( ErrorCode.E7219, coordinateField );\n-            }\n-\n-            return dataElement.getUid();\n+            return getCoordinateFieldOrFail( dataElement.getValueType(), coordinateField, ErrorCode.E7219);\n         }\n \n         TrackedEntityAttribute attribute = attributeService.getTrackedEntityAttribute( coordinateField );\n \n         if ( attribute != null )\n         {\n-            if ( ValueType.COORDINATE != attribute.getValueType() )\n-            {\n-                throwIllegalQueryEx( ErrorCode.E7220, coordinateField );\n-            }\n-\n-            return attribute.getUid();\n+            return getCoordinateFieldOrFail( attribute.getValueType(), coordinateField, ErrorCode.E7220);", "originalCommit": "f28e03fc66dd70330d27e42abf03433cefdedfb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NTc0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5912#discussion_r469265746", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat( whereClause, containsString( \"and ax.\\\"\" + deA.getUid() + \"_geom\" + \"\\\" is not null\" ));\n          \n          \n            \n                    assertThat( whereClause, containsString( \"and ax.\\\"\" + deA.getUid() + \"_geom\" + \"\\\" is not null\" ) );", "author": "stian-sandvold", "createdAt": "2020-08-12T13:38:31Z", "path": "dhis-2/dhis-services/dhis-service-analytics/src/test/java/org/hisp/dhis/analytics/event/data/AbstractJdbcEventAnalyticsManagerTest.java", "diffHunk": "@@ -224,18 +236,86 @@ public void verifyGetAggregateClauseWithProgramIndicatorAndCustomAggregationType\n     public void verifyGetAggregateClauseWithEnrollmentDimension()\n     {\n         ProgramIndicator programIndicator = createProgramIndicator( 'A', programA, \"9.0\", null );\n-        programIndicator.setAnalyticsType(AnalyticsType.ENROLLMENT);\n+        programIndicator.setAnalyticsType( AnalyticsType.ENROLLMENT );\n         EventQueryParams params = new EventQueryParams.Builder( createRequestParams() )\n             .withProgramIndicator( programIndicator )\n             .build();\n \n         when( programIndicatorService.getAnalyticsSql( programIndicator.getExpression(), programIndicator,\n-                params.getEarliestStartDate(), params.getLatestEndDate() ) )\n+            params.getEarliestStartDate(), params.getLatestEndDate() ) )\n                 .thenReturn( \"select * from table\" );\n \n         String clause = subject.getAggregateClause( params );\n \n         assertThat( clause, is( \"avg(select * from table)\" ) );\n     }\n \n+    @Test\n+    public void verifyGetColumnsWithAttributeOrgUnitTypeAndCoordinatesReturnsFetchesCoordinatesFromOrgUnite()\n+    {\n+        // Given\n+\n+        DataElement deA = createDataElement( 'A', ValueType.ORGANISATION_UNIT, AggregationType.NONE );\n+        DimensionalObject periods = new BaseDimensionalObject( DimensionalObject.PERIOD_DIM_ID, DimensionType.PERIOD,\n+            Lists.newArrayList( MonthlyPeriodType.getPeriodFromIsoString( \"201701\" ) ) );\n+\n+        DimensionalObject orgUnits = new BaseDimensionalObject( DimensionalObject.ORGUNIT_DIM_ID,\n+            DimensionType.ORGANISATION_UNIT, \"ouA\", Lists.newArrayList( createOrganisationUnit( 'A' ) ) );\n+\n+        QueryItem qiA = new QueryItem( deA, null, deA.getValueType(), deA.getAggregationType(), null );\n+\n+        // When\n+        EventQueryParams params = new EventQueryParams.Builder()\n+            .addDimension( periods )\n+            .addDimension( orgUnits )\n+            .addItem( qiA )\n+            .withCoordinateField( deA.getUid() )\n+            .withSkipData( true )\n+            .withSkipMeta( false )\n+            .build();\n+\n+        final List<String> columns = this.subject.getSelectColumns( params );\n+\n+        // Then\n+\n+        assertThat( columns, hasSize( 3 ) );\n+        assertThat( columns, containsInAnyOrder( \"ax.\\\"pe\\\"\", \"ax.\\\"ou\\\"\",\n+            \"'[' || round(ST_X(ST_Centroid(\\\"\" + deA.getUid() + \"_geom\"\n+                + \"\\\"))::numeric, 6) || ',' || round(ST_Y(ST_Centroid(\\\"\" + deA.getUid() + \"_geom\"\n+                + \"\\\"))::numeric, 6) || ']' as \\\"\" + deA.getUid() + \"_geom\" + \"\\\"\" ) );\n+    }\n+\n+    @Test\n+    public void verifyGetWhereClauseWithAttributeOrgUnitTypeAndCoordinatesReturnsFetchesCoordinatesFromOrgUnite()\n+    {\n+        // Given\n+\n+        DataElement deA = createDataElement( 'A', ValueType.ORGANISATION_UNIT, AggregationType.NONE );\n+        DimensionalObject periods = new BaseDimensionalObject( DimensionalObject.PERIOD_DIM_ID, DimensionType.PERIOD,\n+                Lists.newArrayList( MonthlyPeriodType.getPeriodFromIsoString( \"201701\" ) ) );\n+\n+        DimensionalObject orgUnits = new BaseDimensionalObject( DimensionalObject.ORGUNIT_DIM_ID,\n+                DimensionType.ORGANISATION_UNIT, \"ouA\", Lists.newArrayList( createOrganisationUnit( 'A' ) ) );\n+\n+        QueryItem qiA = new QueryItem( deA, null, deA.getValueType(), deA.getAggregationType(), null );\n+\n+        // When\n+        EventQueryParams params = new EventQueryParams.Builder()\n+                .addDimension( periods )\n+                .addDimension( orgUnits )\n+                .addItem( qiA )\n+                .withCoordinateField( deA.getUid() )\n+                .withSkipData( true )\n+                .withSkipMeta( false )\n+                .withStartDate(new Date() )\n+                .withEndDate( new Date() )\n+                // the not null condition is only triggered by this flag (or withGeometry) being true\n+                .withCoordinatesOnly( true )\n+                .build();\n+\n+        final String whereClause = this.subject.getWhereClause( params );\n+\n+        // Then\n+        assertThat( whereClause, containsString( \"and ax.\\\"\" + deA.getUid() + \"_geom\" + \"\\\" is not null\" ));", "originalCommit": "f28e03fc66dd70330d27e42abf03433cefdedfb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9162ae788eadacb7fbbf1f2359d9bebe6ebe687a", "url": "https://github.com/dhis2/dhis2-core/commit/9162ae788eadacb7fbbf1f2359d9bebe6ebe687a", "message": "rebased after conflicts + resolve review comments", "committedDate": "2020-08-12T14:14:21Z", "type": "forcePushed"}, {"oid": "a2f289b251d5f1c29c74a9e4877e0ff367a9714b", "url": "https://github.com/dhis2/dhis2-core/commit/a2f289b251d5f1c29c74a9e4877e0ff367a9714b", "message": "feat: fetch Org Unit coordinate in event analytics query\n\nAllows to return the Org Unit coordinates of an Event attribute, if present.\n\nGiven: `S33cRBsnXPo` as Event attribute UID of type `OrganizationalUnit` with name \"Inpatient Place of Infection\"\n\nGiven the following query: `/api/34/analytics/events/query/eBAyeGv0exc.json?dimension=ou:ImspTQPwCqd&dimension=S33cRBsnXPo&filter=pe:THIS_MONTH&stage=Zj7UnCAulEk&coordinatesOnly=true&coordinateField=S33cRBsnXPo`\n\nThe system will return the following payload:\n\n```\n{\n\t\"headers\": [\n\t\t. . .\n\t\t{\n\t      \"name\": \"S33cRBsnXPo\",\n\t      \"column\": \"Inpatient Place of Infection\",\n\t      \"valueType\": \"COORDINATE\",\n\t      \"type\": \"org.opengis.geometry.primitive.Point\",\n\t      \"hidden\": false,\n\t      \"meta\": true\n    \t}\n\n\t],\n\t\"rows\": [\n    [\n      \"BAU1evNg3ua\",\n      \"Zj7UnCAulEk\",\n      \"2020-08-11 00:00:00.0\",\n      \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-11.840027,8.640035]}\",\n      \"-11.840027\",\n      \"8.640035\",\n      \"Ngelehun CHC\",\n      \"OU_559\",\n      \"DiszpKrYNg8\",\n      \"[-12.387800,8.055700]\"\n    ]\n  ]\n}\n```\n\nThe type of value is always `org.opengis.geometry.primitive.Point`. If the Org Unit has a geometry which is not a Point, the system will return the centre point of the shape (using the `ST_Centroid` function in Postgres).\n\nmissing:\n\t- tests\n\nref: DHIS2-3351", "committedDate": "2020-08-13T07:01:34Z", "type": "commit"}, {"oid": "343215d73b8aa3c43d4f5eb177050ee588320b58", "url": "https://github.com/dhis2/dhis2-core/commit/343215d73b8aa3c43d4f5eb177050ee588320b58", "message": "test: add more unit tests", "committedDate": "2020-08-13T07:01:34Z", "type": "commit"}, {"oid": "6c6b72b86cacf8b82c62ecdf397d1defb1fa76e0", "url": "https://github.com/dhis2/dhis2-core/commit/6c6b72b86cacf8b82c62ecdf397d1defb1fa76e0", "message": "rebased after conflicts + resolve review comments", "committedDate": "2020-08-13T07:01:34Z", "type": "commit"}, {"oid": "e59db06ad0477dd991a392c4894361c80872270f", "url": "https://github.com/dhis2/dhis2-core/commit/e59db06ad0477dd991a392c4894361c80872270f", "message": "fix unit test after rebase/fix conflicts", "committedDate": "2020-08-13T07:01:34Z", "type": "commit"}, {"oid": "e59db06ad0477dd991a392c4894361c80872270f", "url": "https://github.com/dhis2/dhis2-core/commit/e59db06ad0477dd991a392c4894361c80872270f", "message": "fix unit test after rebase/fix conflicts", "committedDate": "2020-08-13T07:01:34Z", "type": "forcePushed"}]}