{"pr_number": 6699, "pr_title": "fix: NPE when retrieving relationship with event", "pr_createdAt": "2020-11-17T10:47:36Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/6699", "timeline": [{"oid": "93ecdcce1df3b6987da6a0fde26dc6a2af4b02ef", "url": "https://github.com/dhis2/dhis2-core/commit/93ecdcce1df3b6987da6a0fde26dc6a2af4b02ef", "message": "Updated the Converter class; Fixed failing tests", "committedDate": "2020-11-15T14:43:09Z", "type": "commit"}, {"oid": "c3f11e59a52bb38b78c029df4d75d05fa8db08ed", "url": "https://github.com/dhis2/dhis2-core/commit/c3f11e59a52bb38b78c029df4d75d05fa8db08ed", "message": "expand import for Assert.*", "committedDate": "2020-11-16T07:58:29Z", "type": "commit"}, {"oid": "efac254e3ce0af93a656b68a1ab97f42f6af735d", "url": "https://github.com/dhis2/dhis2-core/commit/efac254e3ce0af93a656b68a1ab97f42f6af735d", "message": "Fixed code based on initial feedback", "committedDate": "2020-11-17T09:27:41Z", "type": "commit"}, {"oid": "1adca824b3dd60095d1350829836a0463e1d9d8c", "url": "https://github.com/dhis2/dhis2-core/commit/1adca824b3dd60095d1350829836a0463e1d9d8c", "message": "Merge branch 'NTI-converter-update' of github.com:dhis2/dhis2-core into NTI-converter-update", "committedDate": "2020-11-17T09:31:19Z", "type": "commit"}, {"oid": "46d87f4dfbf8ecf3b7e6a75823ac54ee2eddc70e", "url": "https://github.com/dhis2/dhis2-core/commit/46d87f4dfbf8ecf3b7e6a75823ac54ee2eddc70e", "message": "Add a null check for a stream that could cause NPE", "committedDate": "2020-11-17T10:45:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1ODA1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/6699#discussion_r526658055", "bodyText": "As we discussed, make sure that we only generate UID for enrollment.getEnrollment()\nThe trackedEntity property should be left empty if it's not present in the original payload\nEnrollment:\nupdateReference(enrollment.getEnrollment)\nenrollment.getTei -> isEmpty() ? null : tei", "author": "luciano-fiandesio", "createdAt": "2020-11-19T07:56:07Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverter.java", "diffHunk": "@@ -84,174 +82,238 @@\n     extends\n     StdConverter<TrackerBundleParams, TrackerBundleParams>\n {\n+\n+    /**\n+     * Iterates over the collections of a dataBundle. If any objects in those collections have objects nested within\n+     * them, they are extracted. For each object we process, we make sure all references are valid as well.\n+     *\n+     * @param dataBundle containing collections to check and update.\n+     * @return a dataBundle with a flattened data structure, and valid uid references.\n+     */\n     @Override\n-    public TrackerBundleParams convert( TrackerBundleParams bundle )\n+    public TrackerBundleParams convert( TrackerBundleParams dataBundle )\n     {\n-        // pre assign UIDs to entities, if UIDs are missing\n-        generateUid( bundle );\n+        Map<String, TrackedEntity> trackedEntityMap = new HashMap<>();\n+        Map<String, Enrollment> enrollmentHashMap = new HashMap<>();\n+        Map<String, Event> eventHashMap = new HashMap<>();\n+        Map<String, Relationship> relationshipHashMap = new HashMap<>();\n \n-        if ( hasNestedStructure( bundle ) )\n+        // Extract all enrollments and relationships, and set parent reference.\n+        for ( TrackedEntity te : dataBundle.getTrackedEntities() )\n         {\n-            flattenPayload( bundle );\n-        }\n+            updateTrackedEntityReferences( te );\n+            trackedEntityMap.put( te.getTrackedEntity(), te );\n \n-        return bundle;\n-    }\n+            extractEnrollments( te )\n+                .forEach( enrollment -> enrollmentHashMap.put( enrollment.getEnrollment(), enrollment ) );\n \n-    private void flattenPayload( TrackerBundleParams bundle )\n-    {\n+            extractRelationships( te )\n+                .forEach( relationship -> relationshipHashMap.put( relationship.getRelationship(), relationship ) );\n+        }\n \n-        List<Event> events = new ArrayList<>();\n+        // Set UID for all enrollments and notes\n+        dataBundle.getEnrollments().stream()\n+            .peek( enrollment -> updateEnrollmentReferences( enrollment, enrollment.getTrackedEntity() ) )", "originalCommit": "46d87f4dfbf8ecf3b7e6a75823ac54ee2eddc70e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1ODk1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/6699#discussion_r526658959", "bodyText": "As we discussed, make sure that we only generate UID for event.setEvent()\nThe trackedEntity and enrollment property should be left empty if it's not present in the original payload.\nEvent:\nUpdateReference(event.getEvent)\nevent.getEnrollment -> isEmpty() ? null : enrollment\nevent.getTei -> isEmpty()? null : tei", "author": "luciano-fiandesio", "createdAt": "2020-11-19T07:57:58Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverter.java", "diffHunk": "@@ -84,174 +82,238 @@\n     extends\n     StdConverter<TrackerBundleParams, TrackerBundleParams>\n {\n+\n+    /**\n+     * Iterates over the collections of a dataBundle. If any objects in those collections have objects nested within\n+     * them, they are extracted. For each object we process, we make sure all references are valid as well.\n+     *\n+     * @param dataBundle containing collections to check and update.\n+     * @return a dataBundle with a flattened data structure, and valid uid references.\n+     */\n     @Override\n-    public TrackerBundleParams convert( TrackerBundleParams bundle )\n+    public TrackerBundleParams convert( TrackerBundleParams dataBundle )\n     {\n-        // pre assign UIDs to entities, if UIDs are missing\n-        generateUid( bundle );\n+        Map<String, TrackedEntity> trackedEntityMap = new HashMap<>();\n+        Map<String, Enrollment> enrollmentHashMap = new HashMap<>();\n+        Map<String, Event> eventHashMap = new HashMap<>();\n+        Map<String, Relationship> relationshipHashMap = new HashMap<>();\n \n-        if ( hasNestedStructure( bundle ) )\n+        // Extract all enrollments and relationships, and set parent reference.\n+        for ( TrackedEntity te : dataBundle.getTrackedEntities() )\n         {\n-            flattenPayload( bundle );\n-        }\n+            updateTrackedEntityReferences( te );\n+            trackedEntityMap.put( te.getTrackedEntity(), te );\n \n-        return bundle;\n-    }\n+            extractEnrollments( te )\n+                .forEach( enrollment -> enrollmentHashMap.put( enrollment.getEnrollment(), enrollment ) );\n \n-    private void flattenPayload( TrackerBundleParams bundle )\n-    {\n+            extractRelationships( te )\n+                .forEach( relationship -> relationshipHashMap.put( relationship.getRelationship(), relationship ) );\n+        }\n \n-        List<Event> events = new ArrayList<>();\n+        // Set UID for all enrollments and notes\n+        dataBundle.getEnrollments().stream()\n+            .peek( enrollment -> updateEnrollmentReferences( enrollment, enrollment.getTrackedEntity() ) )\n+            .forEach( enrollment -> enrollmentHashMap.put( enrollment.getEnrollment(), enrollment ) );\n \n-        List<Enrollment> enrollments = new ArrayList<>();\n+        // Extract all events and relationships, and set parent references\n+        for ( Enrollment enrollment : enrollmentHashMap.values() )\n+        {\n+            extractEvents( enrollment )\n+                .forEach( event -> eventHashMap.put( event.getEvent(), event ) );\n \n-        Set<Relationship> relationships = new HashSet<>();\n+            extractRelationships( enrollment )\n+                .forEach( relationship -> relationshipHashMap.put( relationship.getRelationship(), relationship ) );\n \n-        // Iterate over **all** enrollments\n-        for ( Enrollment enrollment : bundle.getTrackedEntities().stream()\n-            .flatMap( l -> l.getEnrollments().stream() ).collect( Collectors.toList() ) )\n-        {\n-            // collect all events from enrollments and add them to the flattened events collection\n-            events.addAll( enrollment.getEvents().stream().map( e -> addParent( e, enrollment.getEnrollment() ) )\n-                .collect( Collectors.toList() ) );\n-\n-            // Extract relationships from enrollment\n-            relationships.addAll( enrollment.getRelationships() );\n-\n-            // Extract relationships from events\n-            relationships\n-                .addAll( events.stream().flatMap( l -> l.getRelationships().stream() ).collect( Collectors.toSet() ) );\n-\n-            // remove events and relationships from enrollment\n-            enrollment.setEvents( Collections.emptyList() );\n-            enrollment.setRelationships( Collections.emptyList() );\n-            // remove relationships from events\n-            events.forEach( e -> e.setRelationships( Collections.emptyList() ) );\n+            enrollment.setNotes( enrollment.getNotes().stream()", "originalCommit": "46d87f4dfbf8ecf3b7e6a75823ac54ee2eddc70e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b7f6af3ac02f10f68bb8e904db64d4edc36b0518", "url": "https://github.com/dhis2/dhis2-core/commit/b7f6af3ac02f10f68bb8e904db64d4edc36b0518", "message": "fix invalid generation of uids", "committedDate": "2020-11-23T08:28:28Z", "type": "commit"}, {"oid": "3e10e59f4133c7407a44141f97cfea5a6d05b865", "url": "https://github.com/dhis2/dhis2-core/commit/3e10e59f4133c7407a44141f97cfea5a6d05b865", "message": "Merge branch 'master' into NPE-fix-relationship-with-event", "committedDate": "2020-11-23T08:30:12Z", "type": "commit"}, {"oid": "a957cdc59953e02c6cd9ea26548ecd171f8240dc", "url": "https://github.com/dhis2/dhis2-core/commit/a957cdc59953e02c6cd9ea26548ecd171f8240dc", "message": "Merge branch 'master' into NPE-fix-relationship-with-event", "committedDate": "2020-12-15T14:35:18Z", "type": "commit"}, {"oid": "389c36e85bae9ab1c2c1854fb3076b65528c8850", "url": "https://github.com/dhis2/dhis2-core/commit/389c36e85bae9ab1c2c1854fb3076b65528c8850", "message": "Merge branch 'master' into NPE-fix-relationship-with-event", "committedDate": "2020-12-16T14:22:41Z", "type": "commit"}]}