{"pr_number": 4881, "pr_title": "feat: tracker import: support nested TEI structure", "pr_createdAt": "2020-02-17T09:05:35Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/4881", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1OTAzMA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r380059030", "bodyText": "@mortenoh I have introduced this class, because I couldn't find a specific Import exception. Perhaps there is another way?", "author": "luciano-fiandesio", "createdAt": "2020-02-17T09:11:45Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/ImportException.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class ImportException", "originalCommit": "a1e2c2b6e050661a4e365c81302afac0858f5441", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTczOTE0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r381739149", "bodyText": "You are right, we don't really use much exceptions in the new importer, so it makes sense to add it (normally errors would be included in the TrackerImportReport)", "author": "mortenoh", "createdAt": "2020-02-20T04:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1OTAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5MDI2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r380190266", "bodyText": "@mortenoh not sure this is the best way to \"decide\" if a TrackerBundleParams should be flattened. Thoughts?", "author": "luciano-fiandesio", "createdAt": "2020-02-17T13:46:19Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverter.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker.converter;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.tracker.AtomicMode;\n+import org.hisp.dhis.tracker.ImportException;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+\n+import com.fasterxml.jackson.databind.util.StdConverter;\n+\n+/**\n+ * Converts a {@see TrackerBundleParams} containing a nested Tracked Entity structure into a \"flat\" structure and\n+ * verifies that all Enrollment have a valid TEI parent and all Events have a valid Enrollment parent.\n+ *\n+ * Assuming a structure like:\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *   |\n+ *   __TEI\n+ *      |_ENROLLMENT 1\n+ *      |      |\n+ *      |      |_ EVENT 1\n+ *      |      |\n+ *      |      |_ EVENT 2\n+ *      |\n+ *      |_ENROLLMENT 2\n+ *            |\n+ *            |_ EVENT 3\n+ *            |_ EVENT 4\n+ * </pre>\n+ *\n+ * This converter will transform the object into:\n+ *\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *   |\n+ *   __TEI\n+ *  |__ENROLLMENT 1, ENROLLMENT 2\n+ *  |\n+ *  |__EVENT 1, EVENT 2, EVENT 3, EVENT 4\n+ *\n+ * </pre>\n+ *\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackerBundleParamsConverter\n+    extends\n+    StdConverter<TrackerBundleParams, TrackerBundleParams>\n+{\n+    @Override\n+    public TrackerBundleParams convert( TrackerBundleParams bundle )\n+    {\n+        if ( hasNestedStructure( bundle ) )\n+        {\n+            // collect a list of TEI ids\n+            List<String> teiIds = bundle.getTrackedEntities().stream().map( TrackedEntity::getTrackedEntity )\n+                .collect( Collectors.toList() );\n+            \n+            // collect all the enrollments of the TEIs\n+            List<Enrollment> enrollments = bundle.getTrackedEntities().stream()\n+                .flatMap( l -> l.getEnrollments().stream() ).collect( Collectors.toList() );\n+\n+            for ( Enrollment enrollment : enrollments )\n+            {\n+                if ( teiIds.contains( enrollment.getTrackedEntityInstance() ) )\n+                {\n+                    bundle.getEnrollments().add( enrollment );\n+                }\n+                else\n+                {\n+                    if ( bundle.getAtomicMode().equals( AtomicMode.ALL ) )\n+                    {\n+                        fail( \"Enrollment\", enrollment.getEnrollment(), \"Tracked Entity Instance\" );\n+                    }\n+                }\n+            }\n+            List<String> enrollmentIds = bundle.getEnrollments().stream().map( Enrollment::getEnrollment )\n+                .collect( Collectors.toList() );\n+\n+            List<Event> events = bundle.getEnrollments().stream().flatMap( l -> l.getEvents().stream() )\n+                .collect( Collectors.toList() );\n+            for ( Event event : events )\n+            {\n+                if ( enrollmentIds.contains( event.getEnrollment() ) )\n+                {\n+                    bundle.getEvents().add( event );\n+                }\n+                else\n+                {\n+                    if ( bundle.getAtomicMode().equals( AtomicMode.ALL ) )\n+                    {\n+                        fail( \"Event\", event.getEvent(), \"Enrollment\" );\n+                    }\n+                }\n+            }\n+            // remove the nested structure\n+            for ( TrackedEntity tei : bundle.getTrackedEntities() )\n+            {\n+                tei.setEnrollments( Collections.emptyList()  );\n+            }\n+        }\n+\n+        return bundle;\n+    }\n+\n+    private boolean hasNestedStructure( TrackerBundleParams bundle )", "originalCommit": "36e4cd453a5f7d163ffce5d926708d49779e47e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc0MTk3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r381741970", "bodyText": "Hm, i think this is fine.. the only thing this won't support i guess is it we also want top level enrollments which also includes events, not sure how common it is to be honest.. but it was supported before", "author": "mortenoh", "createdAt": "2020-02-20T04:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5MDI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc0Mjc4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r381742780", "bodyText": "I wonder if this maybe would be better done in the validation stages that @netroms is working on, so that we can check for invalid items and remove / report them there... it would probably play better with the rest of the importer", "author": "mortenoh", "createdAt": "2020-02-20T04:34:42Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverter.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker.converter;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.tracker.AtomicMode;\n+import org.hisp.dhis.tracker.ImportException;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+\n+import com.fasterxml.jackson.databind.util.StdConverter;\n+\n+/**\n+ * Converts a {@see TrackerBundleParams} containing a nested Tracked Entity structure into a \"flat\" structure and\n+ * verifies that all Enrollment have a valid TEI parent and all Events have a valid Enrollment parent.\n+ *\n+ * Assuming a structure like:\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *   |\n+ *   __TEI\n+ *      |_ENROLLMENT 1\n+ *      |      |\n+ *      |      |_ EVENT 1\n+ *      |      |\n+ *      |      |_ EVENT 2\n+ *      |\n+ *      |_ENROLLMENT 2\n+ *            |\n+ *            |_ EVENT 3\n+ *            |_ EVENT 4\n+ * </pre>\n+ *\n+ * This converter will transform the object into:\n+ *\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *   |\n+ *   __TEI\n+ *  |__ENROLLMENT 1, ENROLLMENT 2\n+ *  |\n+ *  |__EVENT 1, EVENT 2, EVENT 3, EVENT 4\n+ *\n+ * </pre>\n+ *\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackerBundleParamsConverter\n+    extends\n+    StdConverter<TrackerBundleParams, TrackerBundleParams>\n+{\n+    @Override\n+    public TrackerBundleParams convert( TrackerBundleParams bundle )\n+    {\n+        if ( hasNestedStructure( bundle ) )\n+        {\n+            // collect a list of TEI ids\n+            List<String> teiIds = getTrackedEntityIds( bundle );\n+            List<String> enrollmentIds = new ArrayList<>();\n+\n+            // collect all the enrollments of the TEIs\n+            List<Enrollment> enrollments = bundle.getTrackedEntities().stream()\n+                .flatMap( l -> l.getEnrollments().stream() ).collect( Collectors.toList() );\n+\n+            List<Event> events = new ArrayList<>();\n+\n+            for ( Enrollment enrollment : enrollments )\n+            {\n+                if ( teiIds.contains( enrollment.getTrackedEntityInstance() ) )\n+                {\n+                    bundle.getEnrollments().add( enrollment );\n+                    // accumulate all enrollment ids\n+                    enrollmentIds.add( enrollment.getEnrollment() );\n+                    // accumulate all events\n+                    events.addAll( enrollment.getEvents() );\n+                }\n+                else\n+                {\n+                    failOrSkip( \"Enrollment\", enrollment.getEnrollment(), \"Tracked Entity Instance\", bundle.getAtomicMode() );\n+                }\n+            }\n+\n+            for ( Event event : events )\n+            {\n+                if ( enrollmentIds.contains( event.getEnrollment() ) )\n+                {\n+                    bundle.getEvents().add( event );\n+                }\n+                else\n+                {\n+                    failOrSkip( \"Event\", event.getEvent(), \"Enrollment\", bundle.getAtomicMode() );\n+                }\n+            }\n+\n+            // remove the nested structure\n+            for ( TrackedEntity tei : bundle.getTrackedEntities() )\n+            {\n+                tei.setEnrollments( Collections.emptyList()  );\n+            }\n+        }\n+\n+        return bundle;\n+    }\n+\n+    private List<String> getTrackedEntityIds( TrackerBundleParams bundle )\n+    {\n+        return bundle.getTrackedEntities().stream().map( TrackedEntity::getTrackedEntity )\n+            .collect( Collectors.toList() );\n+    }\n+\n+    private boolean hasNestedStructure( TrackerBundleParams bundle )\n+    {\n+        return bundle.getEnrollments().isEmpty();\n+    }\n+\n+    private void failOrSkip( String type, String uid, String parent, AtomicMode atomicMode )\n+    {\n+        if ( atomicMode.equals( AtomicMode.ALL ) )\n+        {\n+            throw new ImportException(", "originalCommit": "622a2046f16dad4778f09430447b851b2cd45fff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjE4Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r381812183", "bodyText": "Yes, responsibility-wise, it would make more sense to move the validation logic in the validation stage but this code is executed at deserialization stage (see the @JsonDeserialize(converter = TrackerBundleParamsConverter.class) on top of the TrackerBundleParams object) so, this kind of validation has to be done here - unless  we flatten the data regardless of any parent child relationship", "author": "luciano-fiandesio", "createdAt": "2020-02-20T06:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc0Mjc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMTU2MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r385031561", "bodyText": "Validation has been removed from this component and delegated to the validation layer", "author": "luciano-fiandesio", "createdAt": "2020-02-27T10:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc0Mjc4MA=="}], "type": "inlineReview"}, {"oid": "586176bea82263bfb8258af3fef0d916491371da", "url": "https://github.com/dhis2/dhis2-core/commit/586176bea82263bfb8258af3fef0d916491371da", "message": "fix: fix code after rebase", "committedDate": "2020-02-26T10:27:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NDg1Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r384494856", "bodyText": "Should we also check if parent set.. that it is correct parent?", "author": "mortenoh", "createdAt": "2020-02-26T13:36:14Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverter.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker.converter;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.springframework.util.StringUtils;\n+\n+import com.fasterxml.jackson.databind.util.StdConverter;\n+\n+/**\n+ * Converts a {@see TrackerBundleParams} containing a nested Tracked Entity structure into a \"flat\" structure\n+ *\n+ * Assuming a structure like:\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *   |\n+ *   __TEI\n+ *      |_ENROLLMENT 1\n+ *      |      |\n+ *      |      |_ EVENT 1\n+ *      |      |\n+ *      |      |_ EVENT 2\n+ *      |\n+ *      |_ENROLLMENT 2\n+ *            |\n+ *            |_ EVENT 3\n+ *            |_ EVENT 4\n+ * </pre>\n+ *\n+ * This converter will transform the object into:\n+ *\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *  |\n+ *  |___TEI\n+ *  |___ENROLLMENT 1, ENROLLMENT 2\n+ *  |\n+ *  |___EVENT 1, EVENT 2, EVENT 3, EVENT 4\n+ *\n+ * </pre>\n+ *\n+ * This converter also assigns UIDs to Tracked Entities, Enrollment and Events if the payload does not contain UIDs\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackerBundleParamsConverter\n+    extends\n+    StdConverter<TrackerBundleParams, TrackerBundleParams>\n+{\n+    @Override\n+    public TrackerBundleParams convert( TrackerBundleParams bundle )\n+    {\n+        if ( hasNestedStructure( bundle ) )\n+        {\n+            // pre assign UIDs to entities, if UIDs are missing\n+            generateUid( bundle );\n+\n+            flattenPayload( bundle );\n+        }\n+\n+        return bundle;\n+    }\n+\n+    private void flattenPayload( TrackerBundleParams bundle ) {\n+\n+        List<Event> events = new ArrayList<>();\n+\n+        List<Enrollment> enrollments = new ArrayList<>();\n+\n+        for ( Enrollment enrollment : bundle.getTrackedEntities().stream()\n+                .flatMap( l -> l.getEnrollments().stream() ).collect( Collectors.toList() ) )\n+        {\n+            events.addAll( enrollment.getEvents().stream().map( e -> addParent( e, enrollment.getEnrollment() ) )\n+                .collect( Collectors.toList() ) );\n+\n+            // remove events from enrollment\n+            enrollment.setEvents( Collections.emptyList() );\n+        }\n+\n+        for ( TrackedEntity trackedEntity : bundle.getTrackedEntities() )\n+        {\n+            enrollments.addAll( trackedEntity.getEnrollments().stream()\n+                .map( e -> addParent( e, trackedEntity.getTrackedEntity() ) ).collect( Collectors.toList() ) );\n+\n+            // remove enrollments from tracked entities\n+            trackedEntity.setEnrollments( Collections.emptyList() );\n+        }\n+\n+        bundle.getEvents().addAll( events );\n+        bundle.getEnrollments().addAll( enrollments );\n+    }\n+\n+    /**\n+     * Make sure that the Enrollment has the parent ID correctly set\n+     *\n+     */\n+    private Enrollment addParent( Enrollment enrollment, String trackerEntityId )\n+    {\n+        if ( StringUtils.isEmpty( enrollment.getTrackedEntity() ) )", "originalCommit": "b863b5fa3f9765a3e8217e6b1c3402432de32da2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5MzQ4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r384993480", "bodyText": "Discussed with Morten, validation should not be taking place in this component", "author": "luciano-fiandesio", "createdAt": "2020-02-27T09:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NDg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NTA2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r384495066", "bodyText": "Same here.. what if nested event is pointing to different enrollment... validation error", "author": "mortenoh", "createdAt": "2020-02-26T13:36:38Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverter.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker.converter;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.springframework.util.StringUtils;\n+\n+import com.fasterxml.jackson.databind.util.StdConverter;\n+\n+/**\n+ * Converts a {@see TrackerBundleParams} containing a nested Tracked Entity structure into a \"flat\" structure\n+ *\n+ * Assuming a structure like:\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *   |\n+ *   __TEI\n+ *      |_ENROLLMENT 1\n+ *      |      |\n+ *      |      |_ EVENT 1\n+ *      |      |\n+ *      |      |_ EVENT 2\n+ *      |\n+ *      |_ENROLLMENT 2\n+ *            |\n+ *            |_ EVENT 3\n+ *            |_ EVENT 4\n+ * </pre>\n+ *\n+ * This converter will transform the object into:\n+ *\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *  |\n+ *  |___TEI\n+ *  |___ENROLLMENT 1, ENROLLMENT 2\n+ *  |\n+ *  |___EVENT 1, EVENT 2, EVENT 3, EVENT 4\n+ *\n+ * </pre>\n+ *\n+ * This converter also assigns UIDs to Tracked Entities, Enrollment and Events if the payload does not contain UIDs\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackerBundleParamsConverter\n+    extends\n+    StdConverter<TrackerBundleParams, TrackerBundleParams>\n+{\n+    @Override\n+    public TrackerBundleParams convert( TrackerBundleParams bundle )\n+    {\n+        if ( hasNestedStructure( bundle ) )\n+        {\n+            // pre assign UIDs to entities, if UIDs are missing\n+            generateUid( bundle );\n+\n+            flattenPayload( bundle );\n+        }\n+\n+        return bundle;\n+    }\n+\n+    private void flattenPayload( TrackerBundleParams bundle ) {\n+\n+        List<Event> events = new ArrayList<>();\n+\n+        List<Enrollment> enrollments = new ArrayList<>();\n+\n+        for ( Enrollment enrollment : bundle.getTrackedEntities().stream()\n+                .flatMap( l -> l.getEnrollments().stream() ).collect( Collectors.toList() ) )\n+        {\n+            events.addAll( enrollment.getEvents().stream().map( e -> addParent( e, enrollment.getEnrollment() ) )\n+                .collect( Collectors.toList() ) );\n+\n+            // remove events from enrollment\n+            enrollment.setEvents( Collections.emptyList() );\n+        }\n+\n+        for ( TrackedEntity trackedEntity : bundle.getTrackedEntities() )\n+        {\n+            enrollments.addAll( trackedEntity.getEnrollments().stream()\n+                .map( e -> addParent( e, trackedEntity.getTrackedEntity() ) ).collect( Collectors.toList() ) );\n+\n+            // remove enrollments from tracked entities\n+            trackedEntity.setEnrollments( Collections.emptyList() );\n+        }\n+\n+        bundle.getEvents().addAll( events );\n+        bundle.getEnrollments().addAll( enrollments );\n+    }\n+\n+    /**\n+     * Make sure that the Enrollment has the parent ID correctly set\n+     *\n+     */\n+    private Enrollment addParent( Enrollment enrollment, String trackerEntityId )\n+    {\n+        if ( StringUtils.isEmpty( enrollment.getTrackedEntity() ) )\n+        {\n+            enrollment.setTrackedEntity( trackerEntityId );\n+        }\n+        return enrollment;\n+    }\n+\n+    /**\n+     * Make sure that the Event has the parent ID correctly set\n+     *\n+     */\n+    private Event addParent( Event event, String enrollmentId )\n+    {\n+\n+        if ( StringUtils.isEmpty( event.getEnrollment() ) )", "originalCommit": "b863b5fa3f9765a3e8217e6b1c3402432de32da2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5MzU1OA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r384993558", "bodyText": "Discussed with Morten, validation should not be taking place in this component", "author": "luciano-fiandesio", "createdAt": "2020-02-27T09:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NTA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NTQxOA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r384495418", "bodyText": "If we have it here.. should we remove it from other places? its a small performance opt... but no need if we are doing it before anyways...", "author": "mortenoh", "createdAt": "2020-02-26T13:37:15Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverter.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker.converter;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.springframework.util.StringUtils;\n+\n+import com.fasterxml.jackson.databind.util.StdConverter;\n+\n+/**\n+ * Converts a {@see TrackerBundleParams} containing a nested Tracked Entity structure into a \"flat\" structure\n+ *\n+ * Assuming a structure like:\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *   |\n+ *   __TEI\n+ *      |_ENROLLMENT 1\n+ *      |      |\n+ *      |      |_ EVENT 1\n+ *      |      |\n+ *      |      |_ EVENT 2\n+ *      |\n+ *      |_ENROLLMENT 2\n+ *            |\n+ *            |_ EVENT 3\n+ *            |_ EVENT 4\n+ * </pre>\n+ *\n+ * This converter will transform the object into:\n+ *\n+ * <pre>\n+ *\n+ * TrackerBundleParams\n+ *  |\n+ *  |___TEI\n+ *  |___ENROLLMENT 1, ENROLLMENT 2\n+ *  |\n+ *  |___EVENT 1, EVENT 2, EVENT 3, EVENT 4\n+ *\n+ * </pre>\n+ *\n+ * This converter also assigns UIDs to Tracked Entities, Enrollment and Events if the payload does not contain UIDs\n+ *\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackerBundleParamsConverter\n+    extends\n+    StdConverter<TrackerBundleParams, TrackerBundleParams>\n+{\n+    @Override\n+    public TrackerBundleParams convert( TrackerBundleParams bundle )\n+    {\n+        if ( hasNestedStructure( bundle ) )\n+        {\n+            // pre assign UIDs to entities, if UIDs are missing\n+            generateUid( bundle );\n+\n+            flattenPayload( bundle );\n+        }\n+\n+        return bundle;\n+    }\n+\n+    private void flattenPayload( TrackerBundleParams bundle ) {\n+\n+        List<Event> events = new ArrayList<>();\n+\n+        List<Enrollment> enrollments = new ArrayList<>();\n+\n+        for ( Enrollment enrollment : bundle.getTrackedEntities().stream()\n+                .flatMap( l -> l.getEnrollments().stream() ).collect( Collectors.toList() ) )\n+        {\n+            events.addAll( enrollment.getEvents().stream().map( e -> addParent( e, enrollment.getEnrollment() ) )\n+                .collect( Collectors.toList() ) );\n+\n+            // remove events from enrollment\n+            enrollment.setEvents( Collections.emptyList() );\n+        }\n+\n+        for ( TrackedEntity trackedEntity : bundle.getTrackedEntities() )\n+        {\n+            enrollments.addAll( trackedEntity.getEnrollments().stream()\n+                .map( e -> addParent( e, trackedEntity.getTrackedEntity() ) ).collect( Collectors.toList() ) );\n+\n+            // remove enrollments from tracked entities\n+            trackedEntity.setEnrollments( Collections.emptyList() );\n+        }\n+\n+        bundle.getEvents().addAll( events );\n+        bundle.getEnrollments().addAll( enrollments );\n+    }\n+\n+    /**\n+     * Make sure that the Enrollment has the parent ID correctly set\n+     *\n+     */\n+    private Enrollment addParent( Enrollment enrollment, String trackerEntityId )\n+    {\n+        if ( StringUtils.isEmpty( enrollment.getTrackedEntity() ) )\n+        {\n+            enrollment.setTrackedEntity( trackerEntityId );\n+        }\n+        return enrollment;\n+    }\n+\n+    /**\n+     * Make sure that the Event has the parent ID correctly set\n+     *\n+     */\n+    private Event addParent( Event event, String enrollmentId )\n+    {\n+\n+        if ( StringUtils.isEmpty( event.getEnrollment() ) )\n+        {\n+            event.setEnrollment( enrollmentId );\n+        }\n+        return event;\n+    }\n+\n+    /**\n+     * Check if the {@see TrackerBundleParams} has a nested structure\n+     *\n+     * @param bundle a {@see TrackerBundleParams}\n+     * @return true, if TEIs have nested enrollments\n+     */\n+    private boolean hasNestedStructure( TrackerBundleParams bundle )\n+    {\n+        return bundle.getEnrollments().isEmpty();\n+    }\n+\n+    private void generateUid( TrackerBundleParams params )", "originalCommit": "b863b5fa3f9765a3e8217e6b1c3402432de32da2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "72e3b0c5a830fe6194946e138e0bd05e0495adbe", "url": "https://github.com/dhis2/dhis2-core/commit/72e3b0c5a830fe6194946e138e0bd05e0495adbe", "message": "fix: fix test code after rebase", "committedDate": "2020-02-27T09:36:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzMzE5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r385033198", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @JsonDeserialize(converter = TrackerBundleParamsConverter.class)\n          \n          \n            \n            @JsonDeserialize( converter = TrackerBundleParamsConverter.class )", "author": "stian-sandvold", "createdAt": "2020-02-27T10:18:43Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/TrackerBundleParams.java", "diffHunk": "@@ -59,6 +61,7 @@\n @Builder\n @NoArgsConstructor\n @AllArgsConstructor\n+@JsonDeserialize(converter = TrackerBundleParamsConverter.class)", "originalCommit": "72e3b0c5a830fe6194946e138e0bd05e0495adbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNDUyMA==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r385034520", "bodyText": "Remove comment?", "author": "stian-sandvold", "createdAt": "2020-02-27T10:21:08Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverterTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker.converter;\n+\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.hisp.dhis.random.BeanRandomizer;\n+import org.hisp.dhis.tracker.AtomicMode;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackerBundleParamsConverterTest\n+{\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private BeanRandomizer rnd = new BeanRandomizer();\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setUp()\n+    {\n+        objectMapper.configure( DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false );\n+    }\n+\n+    @Test\n+    public void verifyNestedTeiStructureIsFlattenedDuringDeserialization()\n+        throws IOException\n+    {\n+        List<Event> events1 = createEvent( 3, \"ev1\", \"enr1\" );\n+        List<Event> events2 = createEvent( 7, \"ev2\", \"enr2\" );\n+\n+        List<Enrollment> enrollments = new ArrayList<>();\n+        enrollments.add( createEnrollment( \"enr1\", \"teiABC\", events1 ) );\n+        enrollments.add( createEnrollment( \"enr2\", \"teiABC\", events2 ) );\n+\n+        TrackedEntity trackedEntity = createTrackedEntity( \"teiABC\", enrollments );\n+\n+        TrackerBundleParams build = TrackerBundleParams.builder()\n+            .trackedEntities( Collections.singletonList( trackedEntity ) )\n+            .identifier( TrackerIdentifier.UID )\n+            .atomicMode( AtomicMode.ALL )\n+            .build();\n+\n+        String jsonPayload = toJson( build );\n+        TrackerBundleParams b2 = this.objectMapper.readValue( jsonPayload, TrackerBundleParams.class );\n+\n+        assertThat( b2.getTrackedEntities(), hasSize( 1 ) );\n+        assertThat( b2.getEnrollments(), hasSize( 2 ) );\n+        assertThat( b2.getEvents(), hasSize( 10 ) );\n+\n+        //assertThat( b2.getTrackedEntities().get(0).getEnrollments(), hasSize( 0 ));", "originalCommit": "72e3b0c5a830fe6194946e138e0bd05e0495adbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNDcxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/4881#discussion_r385034717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat( b2.getTrackedEntities().get(0).getEnrollments(), hasSize( 0 ));\n          \n          \n            \n                    assertThat( b2.getTrackedEntities().get( 0 ).getEnrollments(), hasSize( 0 ) );", "author": "stian-sandvold", "createdAt": "2020-02-27T10:21:28Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/converter/TrackerBundleParamsConverterTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+package org.hisp.dhis.tracker.converter;\n+\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.hisp.dhis.random.BeanRandomizer;\n+import org.hisp.dhis.tracker.AtomicMode;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * @author Luciano Fiandesio\n+ */\n+public class TrackerBundleParamsConverterTest\n+{\n+    private ObjectMapper objectMapper = new ObjectMapper();\n+\n+    private BeanRandomizer rnd = new BeanRandomizer();\n+\n+    @Rule\n+    public ExpectedException exception = ExpectedException.none();\n+\n+    @Before\n+    public void setUp()\n+    {\n+        objectMapper.configure( DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false );\n+    }\n+\n+    @Test\n+    public void verifyNestedTeiStructureIsFlattenedDuringDeserialization()\n+        throws IOException\n+    {\n+        List<Event> events1 = createEvent( 3, \"ev1\", \"enr1\" );\n+        List<Event> events2 = createEvent( 7, \"ev2\", \"enr2\" );\n+\n+        List<Enrollment> enrollments = new ArrayList<>();\n+        enrollments.add( createEnrollment( \"enr1\", \"teiABC\", events1 ) );\n+        enrollments.add( createEnrollment( \"enr2\", \"teiABC\", events2 ) );\n+\n+        TrackedEntity trackedEntity = createTrackedEntity( \"teiABC\", enrollments );\n+\n+        TrackerBundleParams build = TrackerBundleParams.builder()\n+            .trackedEntities( Collections.singletonList( trackedEntity ) )\n+            .identifier( TrackerIdentifier.UID )\n+            .atomicMode( AtomicMode.ALL )\n+            .build();\n+\n+        String jsonPayload = toJson( build );\n+        TrackerBundleParams b2 = this.objectMapper.readValue( jsonPayload, TrackerBundleParams.class );\n+\n+        assertThat( b2.getTrackedEntities(), hasSize( 1 ) );\n+        assertThat( b2.getEnrollments(), hasSize( 2 ) );\n+        assertThat( b2.getEvents(), hasSize( 10 ) );\n+\n+        //assertThat( b2.getTrackedEntities().get(0).getEnrollments(), hasSize( 0 ));\n+    }\n+\n+    @Test\n+    public void verifyNestedTeiStructureHasNestedDataClearedAfterFlattening()\n+            throws IOException\n+    {\n+        List<Event> events1 = createEvent( 3, \"ev1\", \"enr1\" );\n+        List<Event> events2 = createEvent( 7, \"ev2\", \"enr2\" );\n+\n+        List<Enrollment> enrollments = new ArrayList<>();\n+        enrollments.add( createEnrollment( \"enr1\", \"teiABC\", events1 ) );\n+        enrollments.add( createEnrollment( \"enr2\", \"teiABC\", events2 ) );\n+\n+        TrackedEntity trackedEntity = createTrackedEntity( \"teiABC\", enrollments );\n+\n+        TrackerBundleParams build = TrackerBundleParams.builder()\n+                .trackedEntities( Collections.singletonList( trackedEntity ) )\n+                .identifier( TrackerIdentifier.UID )\n+                .atomicMode( AtomicMode.ALL )\n+                .build();\n+\n+        String jsonPayload = toJson( build );\n+        TrackerBundleParams b2 = this.objectMapper.readValue( jsonPayload, TrackerBundleParams.class );\n+\n+        assertThat( b2.getTrackedEntities().get(0).getEnrollments(), hasSize( 0 ));", "originalCommit": "72e3b0c5a830fe6194946e138e0bd05e0495adbe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "12904654fc08aa9a1eaf92510209d42a47c9d2a4", "url": "https://github.com/dhis2/dhis2-core/commit/12904654fc08aa9a1eaf92510209d42a47c9d2a4", "message": "feat: tracker import: support nested TEI structure\n\n- DHIS2-8258", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "d785e728f7f21b7250bc92ba1d0b746c35eef847", "url": "https://github.com/dhis2/dhis2-core/commit/d785e728f7f21b7250bc92ba1d0b746c35eef847", "message": "chore: formatting", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "fc053d0427c71582e722599f08a8859e27444003", "url": "https://github.com/dhis2/dhis2-core/commit/fc053d0427c71582e722599f08a8859e27444003", "message": "fix: use AtomicMode to skip error", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "5b90f78bad3308fac06040f844efb2776f0faa7d", "url": "https://github.com/dhis2/dhis2-core/commit/5b90f78bad3308fac06040f844efb2776f0faa7d", "message": "chore: removed sonarqube warning", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "e350acab82e737a41955ef2d03d48e55ea4ae200", "url": "https://github.com/dhis2/dhis2-core/commit/e350acab82e737a41955ef2d03d48e55ea4ae200", "message": "removed validation of orphan enrollments/events", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "3db66715ea91171e217fbee48413ecf9043d2d2a", "url": "https://github.com/dhis2/dhis2-core/commit/3db66715ea91171e217fbee48413ecf9043d2d2a", "message": "fix: fix code after rebase", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "264179d09b0859024336ecf2a93d023d0e40ff3c", "url": "https://github.com/dhis2/dhis2-core/commit/264179d09b0859024336ecf2a93d023d0e40ff3c", "message": "fix: fix test code after rebase", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "a18bc83ff43c7a0b24e2a9c3e060aa83198abad7", "url": "https://github.com/dhis2/dhis2-core/commit/a18bc83ff43c7a0b24e2a9c3e060aa83198abad7", "message": "fix: better auto-assignment of uids, more tests", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "09a7f089ad41ea13ec3101798765e99b3a4dabe3", "url": "https://github.com/dhis2/dhis2-core/commit/09a7f089ad41ea13ec3101798765e99b3a4dabe3", "message": "chore: formatting", "committedDate": "2020-02-27T10:34:58Z", "type": "commit"}, {"oid": "816f332893b2f8c8592f1365da70f7511fb53055", "url": "https://github.com/dhis2/dhis2-core/commit/816f332893b2f8c8592f1365da70f7511fb53055", "message": "fix: fixed compilation error after rebase", "committedDate": "2020-02-27T10:36:30Z", "type": "commit"}, {"oid": "816f332893b2f8c8592f1365da70f7511fb53055", "url": "https://github.com/dhis2/dhis2-core/commit/816f332893b2f8c8592f1365da70f7511fb53055", "message": "fix: fixed compilation error after rebase", "committedDate": "2020-02-27T10:36:30Z", "type": "forcePushed"}]}