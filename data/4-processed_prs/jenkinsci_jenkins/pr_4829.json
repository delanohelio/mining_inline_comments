{"pr_number": 4829, "pr_title": "[JENKINS-46175] SimpleBuildStep/SimpleBuildWrapper without workspace (alternative approach)", "pr_createdAt": "2020-07-05T12:54:47Z", "pr_url": "https://github.com/jenkinsci/jenkins/pull/4829", "timeline": [{"oid": "6f09cb782d72d9bc4846ccfd3a664d4400be7667", "url": "https://github.com/jenkinsci/jenkins/commit/6f09cb782d72d9bc4846ccfd3a664d4400be7667", "message": "[JENKINS-46175] Add API to SimpleBuildStep\n\nTwo new methods are added:\n- requiresWorkspace(), defaulted to returning true\n- an overload of perform() that only takes a Run, EnvVars and listener\n  - the \"full-fat\" perform() delegates to this one when requiresWorkspace() returns false\n\nThis enables steps to declare they do not need a workspace context.\nBuildStepCompatibilityLayer honors this and won't try to get a workspace when one is not required.", "committedDate": "2020-07-05T10:13:24Z", "type": "commit"}, {"oid": "d60492d75697b4f911320f6b60abc7fccd078e6d", "url": "https://github.com/jenkinsci/jenkins/commit/d60492d75697b4f911320f6b60abc7fccd078e6d", "message": "[JENKINS-46175] Add API to SimpleBuildWrapper\n\nThese changes mirror those in SimpleBuildStep.\n\nDisposer has the same changes applied except that the choice of requiring a workspace is made as part of the constructor, based on a wrapper instance.\nAlternatively, it could choose this on its own, the way the step and wrapper do.", "committedDate": "2020-07-05T12:18:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MzAyNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450373025", "bodyText": "This is for developers so should not be a localized message.", "author": "jglick", "createdAt": "2020-07-06T17:26:32Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -104,15 +104,51 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithWorkspace());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNDAxNw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450404017", "bodyText": "Figured as much; if this path is taken, I'll delocalize them.", "author": "Zastai", "createdAt": "2020-07-06T18:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MzAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MzM2OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450373368", "bodyText": "ditto, and should be an IllegalStateException or similar", "author": "jglick", "createdAt": "2020-07-06T17:27:11Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -104,15 +104,51 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithWorkspace());\n+        }\n+    }\n+\n+    /**\n+     * Determines whether or not this step requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener)} applies.\n+     * Otherwise, {@link #perform(Run, EnvVars, TaskListener)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    default boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Run this step, without a workspace context.\n+     * @param run a build this is running as a part of\n+     * @param env environment variables applicable to this step\n+     * @param listener a place to send output\n+     * @throws InterruptedException if the step is interrupted\n+     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @since TODO\n+     */\n+    default void perform(@NonNull Run<?, ?> run, @NonNull EnvVars env, @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // If this step requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildStep_WorkspaceContextNeeded());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MzQwNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450373405", "bodyText": "ditto", "author": "jglick", "createdAt": "2020-07-06T17:27:17Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -104,15 +104,51 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithWorkspace());\n+        }\n+    }\n+\n+    /**\n+     * Determines whether or not this step requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #perform(Run, FilePath, EnvVars, Launcher, TaskListener)} applies.\n+     * Otherwise, {@link #perform(Run, EnvVars, TaskListener)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    default boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Run this step, without a workspace context.\n+     * @param run a build this is running as a part of\n+     * @param env environment variables applicable to this step\n+     * @param listener a place to send output\n+     * @throws InterruptedException if the step is interrupted\n+     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @since TODO\n+     */\n+    default void perform(@NonNull Run<?, ?> run, @NonNull EnvVars env, @NonNull TaskListener listener) throws InterruptedException, IOException {\n+        // If this step requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildStep_WorkspaceContextNeeded());\n         }\n+        // Otherwise, this method must have an implementation.\n+        throw new AbstractMethodError(Messages.SimpleBuildStep_NeedPerformMethodWithoutWorkspace());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374405", "bodyText": "Invert the sense of the field since a deserialized Disposer from a Jenkins session prior to upgrade (for Pipeline builds) will have fields set to default values like false unless you implement readResolve.", "author": "jglick", "createdAt": "2020-07-06T17:29:19Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,6 +156,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        /**\n+         * Creates a new end-of-wrapped-block callback.\n+         *\n+         * @deprecated Use the constructor that takes a wrapper instance instead.\n+         */\n+        @Deprecated\n+        protected Disposer() {\n+            this.requiresWorkspace = true;\n+        }\n+\n+        /**\n+         * Creates a new end-of-wrapped-block callback.\n+         *\n+         * @param wrapper The wrapper for which this is a callback; used to determine whether or not this callback\n+         *                requires a workspace context (working directory and launcher). That choice determines whether\n+         *                {@link #tearDown(Run, FilePath, Launcher, TaskListener)} or\n+         *                {@link #tearDown(Run, TaskListener)} applies.\n+         * @since TODO\n+         */\n+        protected Disposer(@NonNull SimpleBuildWrapper wrapper) {\n+            this.requiresWorkspace = wrapper.requiresWorkspace();\n+        }\n+\n+        private final boolean requiresWorkspace;", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTMxMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450405311", "bodyText": "Do these actually get persisted? I thought they were only serialized for sending to the agent for execution.\nBut sure, inverting the field's meaning is easy.\nOr, I could just make this a method like on the other objects, avoiding the serialization issue entirely.", "author": "Zastai", "createdAt": "2020-07-06T18:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwODAxOQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450408019", "bodyText": "Disposers are not sent to the agent. They are serialized in a Pipeline build, so that you can write for example\nxvnc {\n  sh 'make world'\n}\nand have Jenkins restart in the middle of the make command but still know what to clean up later.", "author": "jglick", "createdAt": "2020-07-06T18:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwODUyMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450408521", "bodyText": "a method like on the other objects\n\nAs noted in the other PR, I would prefer to have a single flag for an implementor that covers both setup and teardown.", "author": "jglick", "createdAt": "2020-07-06T18:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMzI4OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450533288", "bodyText": "I know - but unfortunately neither the creation nor the execution of a Disposer is directly tied to a SimpleBuildWrapper.\nUnless it would be acceptable to add a constructor to Disposer that takes a SimpleBuildWrapper; then it could set its internal flag from that.", "author": "Zastai", "createdAt": "2020-07-06T23:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NDM4OQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453774389", "bodyText": "see #4829 (comment)", "author": "jglick", "createdAt": "2020-07-13T16:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMjk5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453822998", "bodyText": "OK, will look at how to arrange it like that.", "author": "Zastai", "createdAt": "2020-07-13T17:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDcwMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374703", "bodyText": "no i18n", "author": "jglick", "createdAt": "2020-07-06T17:29:49Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -126,7 +191,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n          * @throws IOException if something fails; {@link AbortException} for user errors\n          * @throws InterruptedException if tear down is interrupted\n          */\n-        public abstract void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException;\n+        public void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {\n+            // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+            if (!this.requiresWorkspace) {\n+                this.tearDown(build, listener);\n+                return;\n+            }\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithWorkspace());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDc2Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374763", "bodyText": "ditto", "author": "jglick", "createdAt": "2020-07-06T17:29:55Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -126,7 +191,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n          * @throws IOException if something fails; {@link AbortException} for user errors\n          * @throws InterruptedException if tear down is interrupted\n          */\n-        public abstract void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException;\n+        public void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {\n+            // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+            if (!this.requiresWorkspace) {\n+                this.tearDown(build, listener);\n+                return;\n+            }\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithWorkspace());\n+        }\n+\n+        /**\n+         * Attempt to clean up anything that was done in the initial setup.\n+         * @param build a build being run\n+         * @param listener a way to report progress\n+         * @throws IOException if something fails; {@link AbortException} for user errors\n+         * @throws InterruptedException if tear down is interrupted\n+         * @since TODO\n+         */\n+        public void tearDown(Run<?,?> build, TaskListener listener) throws IOException, InterruptedException {\n+            // If this callback requires a workspace, this is the wrong method to call.\n+            if (this.requiresWorkspace) {\n+                throw new AbortException(Messages.SimpleBuildWrapper_Disposer_WorkspaceContextNeeded());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDgwNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374806", "bodyText": "ditto", "author": "jglick", "createdAt": "2020-07-06T17:30:00Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -126,7 +191,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n          * @throws IOException if something fails; {@link AbortException} for user errors\n          * @throws InterruptedException if tear down is interrupted\n          */\n-        public abstract void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException;\n+        public void tearDown(Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {\n+            // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+            if (!this.requiresWorkspace) {\n+                this.tearDown(build, listener);\n+                return;\n+            }\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithWorkspace());\n+        }\n+\n+        /**\n+         * Attempt to clean up anything that was done in the initial setup.\n+         * @param build a build being run\n+         * @param listener a way to report progress\n+         * @throws IOException if something fails; {@link AbortException} for user errors\n+         * @throws InterruptedException if tear down is interrupted\n+         * @since TODO\n+         */\n+        public void tearDown(Run<?,?> build, TaskListener listener) throws IOException, InterruptedException {\n+            // If this callback requires a workspace, this is the wrong method to call.\n+            if (this.requiresWorkspace) {\n+                throw new AbortException(Messages.SimpleBuildWrapper_Disposer_WorkspaceContextNeeded());\n+            }\n+            // Otherwise, this method must have an implementation.\n+            throw new AbstractMethodError(Messages.SimpleBuildWrapper_Disposer_NeedTearDownMethodWithoutWorkspace());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NDkxNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450374916", "bodyText": "ditto", "author": "jglick", "createdAt": "2020-07-06T17:30:12Z", "path": "core/src/main/resources/jenkins/tasks/Messages.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+SimpleBuildStep.NeedPerformMethodWithWorkspace=Unless a build step is marked as not requiring a workspace context, you must implement the overload of the perform() method that takes both a workspace and a launcher.\n+SimpleBuildStep.NeedPerformMethodWithoutWorkspace=When a build step is marked as not requiring a workspace context, you must implement the overload of the perform() method that does not take a workspace or launcher.\n+SimpleBuildStep.WorkspaceContextNeeded=This build step requires a workspace context, but none was provided.\n+SimpleBuildWrapper.NeedSetUpMethodWithWorkspace=Unless a build wrapper is marked as not requiring a workspace context, you must implement the overload of the setUp() method that takes both a workspace and a launcher.\n+SimpleBuildWrapper.NeedSetUpMethodWithoutWorkspace=When a build wrapper is marked as not requiring a workspace context, you must implement the overload of the setUp() method that does not take a workspace or launcher.\n+SimpleBuildWrapper.WorkspaceContextNeeded=This build wrapper requires a workspace context, but none was provided.\n+SimpleBuildWrapper_Disposer.NeedTearDownMethodWithWorkspace=Unless an end-of-wrapped-block callback is marked as not requiring a workspace context, you must implement the overload of the tearDown() method that takes both a workspace and a launcher.\n+SimpleBuildWrapper_Disposer.NeedTearDownMethodWithoutWorkspace=When an end-of-wrapped-block callback is marked as not requiring a workspace context, you must implement the overload of the tearDown() method that does not take a workspace or launcher.\n+SimpleBuildWrapper_Disposer.WorkspaceContextNeeded=This end-of-wrapped-block callback requires a workspace context, but none was provided.", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTAxMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450375013", "bodyText": "ditto", "author": "jglick", "createdAt": "2020-07-06T17:30:23Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -75,7 +75,46 @@\n      * @throws IOException if something fails; {@link AbortException} for user errors\n      * @throws InterruptedException if setup is interrupted\n      */\n-    public abstract void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException;\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithWorkspace());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTA3MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450375070", "bodyText": "ditto", "author": "jglick", "createdAt": "2020-07-06T17:30:28Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -75,7 +75,46 @@\n      * @throws IOException if something fails; {@link AbortException} for user errors\n      * @throws InterruptedException if setup is interrupted\n      */\n-    public abstract void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException;\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithWorkspace());\n+    }\n+\n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * @param context a way of collecting modifications to the environment for nested steps\n+     * @param build a build being run\n+     * @param listener a way to report progress\n+     * @param initialEnvironment the environment variables set at the outset\n+     * @throws IOException if something fails; {@link AbortException} for user errors\n+     * @throws InterruptedException if setup is interrupted\n+     * @since TODO\n+     */\n+    public void setUp(Context context, Run<?,?> build, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this wrapper requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildWrapper_WorkspaceContextNeeded());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3NTIxNQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450375215", "bodyText": "ditto", "author": "jglick", "createdAt": "2020-07-06T17:30:42Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -75,7 +75,46 @@\n      * @throws IOException if something fails; {@link AbortException} for user errors\n      * @throws InterruptedException if setup is interrupted\n      */\n-    public abstract void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException;\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithWorkspace());\n+    }\n+\n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When this returns {@code true}, {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n+    /**\n+     * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * @param context a way of collecting modifications to the environment for nested steps\n+     * @param build a build being run\n+     * @param listener a way to report progress\n+     * @param initialEnvironment the environment variables set at the outset\n+     * @throws IOException if something fails; {@link AbortException} for user errors\n+     * @throws InterruptedException if setup is interrupted\n+     * @since TODO\n+     */\n+    public void setUp(Context context, Run<?,?> build, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this wrapper requires a workspace, this is the wrong method to call.\n+        if (this.requiresWorkspace()) {\n+            throw new AbortException(Messages.SimpleBuildWrapper_WorkspaceContextNeeded());\n+        }\n+        // Otherwise, this method must have an implementation.\n+        throw new AbstractMethodError(Messages.SimpleBuildWrapper_NeedSetUpMethodWithoutWorkspace());", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTk0Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r450575943", "bodyText": "Should not be necessary. Context can be told whether its associated wrapper requests a workspace; then setDisposer can pass this bit of information along to the Disposer.", "author": "jglick", "createdAt": "2020-07-07T02:23:11Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,6 +156,32 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        /**\n+         * Creates a new end-of-wrapped-block callback.\n+         *\n+         * @deprecated Use the constructor that takes a wrapper instance instead.", "originalCommit": "d60492d75697b4f911320f6b60abc7fccd078e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MTgyMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453841822", "bodyText": "That is possible for non-pipeline cases only. When we're dealing with AbstractBuild, then the final overrides of setUp() and preCheckout() offer a place where I can tell the Context whether or not the wrapper needs a workspace context. Then I can just use a private Boolean field on both Context and Disposer to pass the flag across.\nBut for pipeline use, all methods involved are virtual and non-final, so there does not seem to be any place in code where I can guarantee interaction between the created Context and the SimpleBuildWrapper instance. The equivalent place in CoreWrapperStep would be the doStart() method. But then I would have to add public API to Context to flag the requirement there, which feels worse than simply allowing the Dispatcher to be told at construction time.", "author": "Zastai", "createdAt": "2020-07-13T18:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0OTg2Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453849866", "bodyText": "add public API to Context to flag the requirement there\n\nWhat is the problem with that? Plugin authors would never notice such an API; would be used only from workflow-basic-steps plus core itself.", "author": "jglick", "createdAt": "2020-07-13T18:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2OTYwMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453869601", "bodyText": "Are there really no use cases supported other than AbstractBuild or pipeline? If not, then I suppose it's fine as long as workflow-basic-steps sets things up correctly.", "author": "Zastai", "createdAt": "2020-07-13T19:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MjUzMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453872533", "bodyText": "Are there really no use cases supported other than AbstractBuild or pipeline?\n\nNo, that is it.", "author": "jglick", "createdAt": "2020-07-13T19:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTQ5NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453881494", "bodyText": "OK, I think I have something that works. Note that I think this does mean that when an old version of workflow-basic-steps is used with new core + a plugin with a wrapper marked as no-workspace-required, then any Disposer for that wrapper will require that context and potentially fail (because the Context.setWorkspaceRequirement() won't have been called).", "author": "Zastai", "createdAt": "2020-07-13T19:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTk0Mw=="}], "type": "inlineReview"}, {"oid": "bb5da032d321d738eabfc1a8586e98b31d8235f2", "url": "https://github.com/jenkinsci/jenkins/commit/bb5da032d321d738eabfc1a8586e98b31d8235f2", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-07-13T17:43:00Z", "type": "commit"}, {"oid": "a5e32c67fcfdbb314fcf9c2d121865b1ed0cd7e9", "url": "https://github.com/jenkinsci/jenkins/commit/a5e32c67fcfdbb314fcf9c2d121865b1ed0cd7e9", "message": "Remove i18n for developer messages", "committedDate": "2020-07-13T17:58:54Z", "type": "commit"}, {"oid": "b1168dbac5ee370a1fc1985c29e6da909634daaf", "url": "https://github.com/jenkinsci/jenkins/commit/b1168dbac5ee370a1fc1985c29e6da909634daaf", "message": "Adjust Disposer setup\n\nThis now uses a field with inverted meaning (for compatibility with\nold serialized instances).\nIt also adds a constructor taking a boolean as well as a\nrequiresWorkspace() predicate method (for use by callers to determine\nwhich of the tearDown() methods to call).\nExtended JavaDoc for the tearDown methods.", "committedDate": "2020-07-13T18:43:16Z", "type": "commit"}, {"oid": "e68337c16b14404ab655522593baa5e34f504dce", "url": "https://github.com/jenkinsci/jenkins/commit/e68337c16b14404ab655522593baa5e34f504dce", "message": "Adjust exception use\n\nUse IllegalStateException() instead of AbortException().\nTweaked and aligned JavaDoc.\nAdjusted method order.", "committedDate": "2020-07-13T19:01:29Z", "type": "commit"}, {"oid": "49b81c60070f59d38486dff9edae3359bc5b5dd0", "url": "https://github.com/jenkinsci/jenkins/commit/49b81c60070f59d38486dff9edae3359bc5b5dd0", "message": "More Disposer changes\n\nIts workspace requirement now tracks that of the wrapper via Context.", "committedDate": "2020-07-13T19:23:59Z", "type": "commit"}, {"oid": "f054885d5439f4b9bbb448104e875dfae3264cf9", "url": "https://github.com/jenkinsci/jenkins/commit/f054885d5439f4b9bbb448104e875dfae3264cf9", "message": "Finish a sentence in a comment.", "committedDate": "2020-07-13T19:31:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDAxMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453910011", "bodyText": "I do not think we generally try to align Javadoc.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IOException          if something goes wrong; use {@link AbortException} for a polite error\n          \n          \n            \n                 * @throws IOException if something goes wrong; use {@link AbortException} for a polite error", "author": "jglick", "createdAt": "2020-07-13T20:23:58Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -93,28 +93,76 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n \n     /**\n      * Run this step.\n-     * @param run a build this is running as a part of\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step requires a workspace context. If such a context is\n+     * <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #perform(Run, EnvVars, TaskListener)}.\n+     *\n+     * @param run       a build this is running as a part of\n      * @param workspace a workspace to use for any file operations\n-     * @param env environment variables applicable to this step\n-     * @param launcher a way to start processes\n-     * @param listener a place to send output\n+     * @param env       environment variables applicable to this step\n+     * @param launcher  a way to start processes\n+     * @param listener  a place to send output\n+     * @throws AbstractMethodError  if this step requires a workspace context and this method is not overridden\n      * @throws InterruptedException if the step is interrupted\n-     * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n+     * @throws IOException          if something goes wrong; use {@link AbortException} for a polite error", "originalCommit": "f054885d5439f4b9bbb448104e875dfae3264cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkyODkzMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453928933", "bodyText": "It's something IntelliJ does; I can remove the indents manually if needed.", "author": "Zastai", "createdAt": "2020-07-13T20:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDkxMQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453910911", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean requiresWorkspace() {\n          \n          \n            \n                protected boolean requiresWorkspace() {\n          \n      \n    \n    \n  \n\nas you will see when you try to write a test for this", "author": "jglick", "createdAt": "2020-07-13T20:25:27Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -64,18 +64,69 @@\n @SuppressWarnings(\"rawtypes\") // inherited\n public abstract class SimpleBuildWrapper extends BuildWrapper {\n \n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When such a context is required (the default), {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this wrapper requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    boolean requiresWorkspace() {", "originalCommit": "f054885d5439f4b9bbb448104e875dfae3264cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkzMjU5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453932598", "bodyText": "Right.", "author": "Zastai", "createdAt": "2020-07-13T21:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkzNzg2NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453937864", "bodyText": "Actually, no. This needs to be public - it's the method you override to show you don't need a workspace context, which is information the caller needs to call the right setUp overload.", "author": "Zastai", "createdAt": "2020-07-13T21:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMDkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTQ3Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453911476", "bodyText": "Should be either @Restricted(Beta.class) or otherwise make it clear that an implementation of SimpleBuildWrapper can ignore this.", "author": "jglick", "createdAt": "2020-07-13T20:26:24Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -97,6 +148,17 @@ public void env(String key, String value) {\n             }\n             env.put(key, value);\n         }\n+        private Boolean wrapperRequiresWorkspace;\n+        /**\n+         * Keeps track of whether or not the specified wrapper requires a workspace context (working directory and\n+         * launcher).\n+         * <p>", "originalCommit": "f054885d5439f4b9bbb448104e875dfae3264cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkzNjQ3MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453936470", "bodyText": "Not sure I follow. This is on Context, so an implementation of SimpleBuildWrapper generally does not need to care anyway.\nAnd I'm not sure why the restriction to Beta would make sense; for example, workflow-basic-steps needs to use this.", "author": "Zastai", "createdAt": "2020-07-13T21:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NDQ5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453944498", "bodyText": "This is on Context, so an implementation of SimpleBuildWrapper generally does not need to care anyway.\n\nImplementations would call other methods on Context.\n\nfor example, workflow-basic-steps needs to use this\n\nAnd that is intended to be the only example. Beta would just be a way of reminding other plugins not to use it.\nNot important, just one suggestion to help clarify that this is part of the implementation, not the normal API.", "author": "jglick", "createdAt": "2020-07-13T21:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTYyNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453911626", "bodyText": "Similarly here.", "author": "jglick", "createdAt": "2020-07-13T20:26:38Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,16 +182,70 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        private Boolean wrapperRequiresWorkspace;\n+\n+        /**\n+         * Determines whether or not this end-of-wrapped-block callback requires a workspace context (working\n+         * directory and launcher).\n+         * <p>", "originalCommit": "f054885d5439f4b9bbb448104e875dfae3264cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0MDE5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453940198", "bodyText": "Not sure why this would be restricted - the caller needs this info to call the right tearDown overload.", "author": "Zastai", "createdAt": "2020-07-13T21:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NDc3Ng==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453944776", "bodyText": "Again, the only external caller should be in workflow-basic-steps, so this is a reminder that \u201cregular\u201d plugins should not touch it.", "author": "jglick", "createdAt": "2020-07-13T21:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODc0Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453948742", "bodyText": "Oh, so workflow-basic-steps is already using a useBeta flag? Fair enough then.", "author": "Zastai", "createdAt": "2020-07-13T21:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTgzNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453911836", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private Boolean wrapperRequiresWorkspace;\n          \n          \n            \n                    @CheckForNull\n          \n          \n            \n                    private Boolean wrapperRequiresWorkspace;", "author": "jglick", "createdAt": "2020-07-13T20:26:59Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -117,16 +182,70 @@ public void setDisposer(@NonNull Disposer disposer) {\n      * Must be safely serializable, so it receives runtime context comparable to that of the original setup.\n      */\n     public static abstract class Disposer implements Serializable {\n+\n+        private Boolean wrapperRequiresWorkspace;", "originalCommit": "f054885d5439f4b9bbb448104e875dfae3264cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0MDI4NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r453940284", "bodyText": "Done", "author": "Zastai", "createdAt": "2020-07-13T21:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTgzNg=="}], "type": "inlineReview"}, {"oid": "09bec81313b8597476c936abfd2f0a3444ded43f", "url": "https://github.com/jenkinsci/jenkins/commit/09bec81313b8597476c936abfd2f0a3444ded43f", "message": "Correct method accessibility.\n\nWhile `SimpleBuildStep` is an interface, `SimpleBuildWrapper` is a\nclass, so needs an explicit `public`.", "committedDate": "2020-07-13T21:12:03Z", "type": "commit"}, {"oid": "9087ee6842a9fa5e3e3b5a3351b181e84351e3b4", "url": "https://github.com/jenkinsci/jenkins/commit/9087ee6842a9fa5e3e3b5a3351b181e84351e3b4", "message": "Add nullability annotations", "committedDate": "2020-07-13T21:19:05Z", "type": "commit"}, {"oid": "21369f03cd53bbc9c14c1572faac8c7f3a06f935", "url": "https://github.com/jenkinsci/jenkins/commit/21369f03cd53bbc9c14c1572faac8c7f3a06f935", "message": "Undo JavaDoc param/throws alignment", "committedDate": "2020-07-13T21:24:39Z", "type": "commit"}, {"oid": "ceb1e5d4d4e0051a78d70ab65e1390ca1da5c3a6", "url": "https://github.com/jenkinsci/jenkins/commit/ceb1e5d4d4e0051a78d70ab65e1390ca1da5c3a6", "message": "Enable optional-but-handled workspace context\n\nThis adjusts the call sites to always call the with-workspace-context\nmethods when such a context is available, regardless of whether it is\nrequired.", "committedDate": "2020-07-13T21:36:41Z", "type": "commit"}, {"oid": "945136b4934e8b8e4dc1fa564eed8e84f3a5f1ab", "url": "https://github.com/jenkinsci/jenkins/commit/945136b4934e8b8e4dc1fa564eed8e84f3a5f1ab", "message": "Correct JavaDoc", "committedDate": "2020-07-13T21:37:10Z", "type": "commit"}, {"oid": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06", "url": "https://github.com/jenkinsci/jenkins/commit/cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06", "message": "Mark internal API\n\nThis adds `@Restricted(Beta.class)` as suggested, to indicate methods\nthat are part of an internal-only API (essentially they should be\ncalled by the workflow-basic-steps plugin only).\n(Does feel like there should be a better tag than \"BETA\" to indicate\nthis.)", "committedDate": "2020-07-13T21:47:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMDM0NA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r456500344", "bodyText": "this comment doesn't seem right? beta just means that it's a new API and it may change in some way? To me anyway", "author": "timja", "createdAt": "2020-07-17T15:04:25Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -64,18 +66,70 @@\n @SuppressWarnings(\"rawtypes\") // inherited\n public abstract class SimpleBuildWrapper extends BuildWrapper {\n \n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When such a context is required (the default), {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this wrapper requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API", "originalCommit": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMDcyMw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r456600723", "bodyText": "jenkinsci/lib-access-modifier#25", "author": "jglick", "createdAt": "2020-07-17T18:15:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMDM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MjMwOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r456652308", "bodyText": "It's also why I added the comment, to make it clear its not \"regular\" Beta.", "author": "Zastai", "createdAt": "2020-07-17T20:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMDM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTg5MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457565891", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API\n          \n      \n    \n    \n  \n\nWrong here.", "author": "jglick", "createdAt": "2020-07-20T17:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMDM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTM2Mg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457565362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.kohsuke.accmod.restrictions.Beta;", "author": "jglick", "createdAt": "2020-07-20T17:12:02Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -54,6 +54,7 @@\n import jenkins.model.RunAction2;\n import jenkins.model.TransientActionFactory;\n import org.kohsuke.accmod.Restricted;\n+import org.kohsuke.accmod.restrictions.Beta;", "originalCommit": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NTU2Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457565563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API\n          \n      \n    \n    \n  \n\nNo, this is key to the public API for plugins implementing build steps.", "author": "jglick", "createdAt": "2020-07-20T17:12:23Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -159,6 +160,7 @@ default void perform(@NonNull Run<?, ?> run, @NonNull EnvVars env, @NonNull Task\n      * @return {@code true} if this step requires a workspace context; {@code false} otherwise.\n      * @since TODO\n      */\n+    @Restricted(Beta.class) // to indicate it is to be called by Jenkins internals only; not part of the normal API", "originalCommit": "cfe16f60d3ee76e6efc0e2380dc0a7dd4c402e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0ae41bdfff295ea09014e38d38d75a10f55816ee", "url": "https://github.com/jenkinsci/jenkins/commit/0ae41bdfff295ea09014e38d38d75a10f55816ee", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-07-20T17:32:07Z", "type": "commit"}, {"oid": "d2fe4bcf272e7268a332b46d393fd9b93de6c91e", "url": "https://github.com/jenkinsci/jenkins/commit/d2fe4bcf272e7268a332b46d393fd9b93de6c91e", "message": "Remove Beta restriction from requiresWorkspace", "committedDate": "2020-07-20T17:41:45Z", "type": "commit"}, {"oid": "35d311a3feb38a8b1791afce2c21c33847b63dd7", "url": "https://github.com/jenkinsci/jenkins/commit/35d311a3feb38a8b1791afce2c21c33847b63dd7", "message": "Remove Beta restriction from requiresWorkspace", "committedDate": "2020-07-20T17:45:36Z", "type": "commit"}, {"oid": "f1d10ecbbed1343b9b604557405f95b8b2e7f632", "url": "https://github.com/jenkinsci/jenkins/commit/f1d10ecbbed1343b9b604557405f95b8b2e7f632", "message": "Add back a Beta restriction\n\nThe one the Disposer is not for implementers to override.\nI need more coffee.", "committedDate": "2020-07-20T17:48:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MDY5MA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457640690", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <strong>must not</strong> be called when such a context <em>is</em> required.\n          \n          \n            \n                 * will not be called when such a context <em>is</em> required.\n          \n      \n    \n    \n  \n\n(write from the PoV of an implementor)", "author": "jglick", "createdAt": "2020-07-20T19:26:56Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -93,28 +93,76 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n \n     /**\n      * Run this step.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step requires a workspace context. If such a context is\n+     * <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #perform(Run, EnvVars, TaskListener)}.\n+     *\n      * @param run a build this is running as a part of\n      * @param workspace a workspace to use for any file operations\n      * @param env environment variables applicable to this step\n      * @param launcher a way to start processes\n      * @param listener a place to send output\n+     * @throws AbstractMethodError if this step requires a workspace context and neither this method nor {@link #perform(Run, FilePath, Launcher, TaskListener)} is overridden\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n      * @since TODO\n      */\n     default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher,\n                          @NonNull TaskListener listener) throws InterruptedException, IOException {\n-        // If this is called, this must be an implementer of the previous API, in which case we call that, discarding\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.perform(run, env, listener);\n+            return;\n+        }\n+        // If we get here, this must be an implementer of the previous API, in which case we call that, discarding\n         // the environment we were given.\n         // But for that to work, that API method must have been implemented.\n         if (Util.isOverridden(SimpleBuildStep.class, this.getClass(),\n                 \"perform\", Run.class, FilePath.class, Launcher.class, TaskListener.class)) {\n             this.perform(run, workspace, launcher, listener);\n         } else {\n-            throw new AbstractMethodError();\n+            throw new AbstractMethodError(\"Unless a build step is marked as not requiring a workspace context, you must implement the overload of the perform() method that takes both a workspace and a launcher.\");\n         }\n     }\n \n+    /**\n+     * Run this step, without a workspace context.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step does not require a workspace context, and\n+     * <strong>must not</strong> be called when such a context <em>is</em> required.", "originalCommit": "f1d10ecbbed1343b9b604557405f95b8b2e7f632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMTA5NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457711095", "bodyText": "OK. I generally always write docs for the user of the method. But this change makes sense, and kind of works for the user/caller too.", "author": "Zastai", "createdAt": "2020-07-20T21:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MDY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMjEwNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457712106", "bodyText": "My point is that the Javadoc is mostly going to read by plugin implementors of build steps/wrappers, and this emphasis was only relevant for the two call sites (in core and workflow-basic-steps).", "author": "jglick", "createdAt": "2020-07-20T21:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MTE5OA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457641198", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <strong>must not</strong> be called when such a context <em>is</em> required.\n          \n          \n            \n                 * will not be called when such a context <em>is</em> required.", "author": "jglick", "createdAt": "2020-07-20T19:28:00Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -64,18 +66,69 @@\n @SuppressWarnings(\"rawtypes\") // inherited\n public abstract class SimpleBuildWrapper extends BuildWrapper {\n \n+    /**\n+     * Determines whether or not this wrapper requires a workspace context (working directory and launcher).\n+     * <p>\n+     * When such a context is required (the default), {@link #setUp(Context, Run, FilePath, Launcher, TaskListener, EnvVars)} applies.\n+     * Otherwise, {@link #setUp(Context, Run, TaskListener, EnvVars)} applies.\n+     *\n+     * @return {@code true} if this wrapper requires a workspace context; {@code false} otherwise.\n+     * @since TODO\n+     */\n+    public boolean requiresWorkspace() {\n+        return true;\n+    }\n+\n     /**\n      * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this wrapper requires a workspace context. If such a context\n+     * is <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #setUp(Context, Run, TaskListener, EnvVars)}.\n+     *\n      * @param context a way of collecting modifications to the environment for nested steps\n      * @param build a build being run\n      * @param workspace a workspace of the build\n      * @param launcher a way to start commands\n      * @param listener a way to report progress\n      * @param initialEnvironment the environment variables set at the outset\n+     * @throws AbstractMethodError if this wrapper requires a workspace context, and this method is not overridden\n+     * @throws IOException if something fails; {@link AbortException} for user errors\n+     * @throws InterruptedException if setup is interrupted\n+     */\n+    public void setUp(Context context, Run<?,?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n+        // If this does not require a workspace, defer to the version that does not take a workspace and launcher.\n+        if (!this.requiresWorkspace()) {\n+            this.setUp(context, build, listener, initialEnvironment);\n+            return;\n+        }\n+        throw new AbstractMethodError(\"Unless a build wrapper is marked as not requiring a workspace context, you must implement the overload of the setUp() method that takes both a workspace and a launcher.\");\n+    }\n+\n+    /**\n+     * Called when a segment of a build is started that is to be enhanced with this wrapper.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this wrapper does not require a workspace context, and\n+     * <strong>must not</strong> be called when such a context <em>is</em> required.", "originalCommit": "f1d10ecbbed1343b9b604557405f95b8b2e7f632", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NTA4NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457645085", "bodyText": "Purely stylistic, but to make all this logic easier to follow:\n\nremove setWorkspaceRequirement\ndeprecate the implicit no-arg Context constructor (by first declaring it explicitly)\nintroduce a private (or package-scope) constructor taking a boolean requiresWorkspace argument\ncall that from a new \u201cbeta\u201d method SimpleBuildWrapper.createContext()\nthen you can\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final Context c = new Context();\n          \n          \n            \n                        c.setWorkspaceRequirement(this);\n          \n          \n            \n                        final Context c = createContext();", "author": "jglick", "createdAt": "2020-07-20T19:35:40Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -143,6 +268,7 @@ protected boolean runPreCheckout() {\n             return new Environment() {};\n         } else {\n             final Context c = new Context();\n+            c.setWorkspaceRequirement(this);", "originalCommit": "f1d10ecbbed1343b9b604557405f95b8b2e7f632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMTEzOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457711138", "bodyText": "OK", "author": "Zastai", "createdAt": "2020-07-20T21:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNjk1Nw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457726957", "bodyText": "Done", "author": "Zastai", "createdAt": "2020-07-20T22:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NTA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjcxNA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457646714", "bodyText": "Note: not actually necessary. Not sure if there is some style guide saying to use this. when not necessary to disambiguate but merely as a reminder that the reference is to a field.", "author": "jglick", "createdAt": "2020-07-20T19:38:49Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildWrapper.java", "diffHunk": "@@ -172,7 +299,7 @@ protected boolean runPreCheckout() {\n         }\n         @Override public boolean tearDown(AbstractBuild build, BuildListener listener) throws IOException, InterruptedException {\n             if (c.disposer != null) {\n-                c.disposer.tearDown(build, build.getWorkspace(), launcher, listener);\n+                c.disposer.tearDown(build, build.getWorkspace(), this.launcher, listener);", "originalCommit": "f1d10ecbbed1343b9b604557405f95b8b2e7f632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMTY2NQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457711665", "bodyText": "I tend towards always qualifiying with this (or the declaring class for static items) because I find it really helps when reading new codebases. I can drop this diff, no problem.", "author": "Zastai", "createdAt": "2020-07-20T21:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMjM2MQ==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457712361", "bodyText": "Whatever you find more legible is fine.", "author": "jglick", "createdAt": "2020-07-20T21:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxNjUxNg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457716516", "bodyText": "Shrug. In this particular case, the class is so small it hardly matters either way, so I'll leave the change out of the PR.", "author": "Zastai", "createdAt": "2020-07-20T22:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxNDA5Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457714093", "bodyText": "Side note: I thought these were supposed to be updated as part of the release process? This particular method was added in 2.241 I think.", "author": "Zastai", "createdAt": "2020-07-20T21:55:56Z", "path": "core/src/main/java/jenkins/tasks/SimpleBuildStep.java", "diffHunk": "@@ -93,28 +93,76 @@ default void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNu\n \n     /**\n      * Run this step.\n+     * <p>\n+     * This method <strong>must</strong> be overridden when this step requires a workspace context. If such a context is\n+     * <em>not</em> required, it does not need to be overridden; it will then forward to\n+     * {@link #perform(Run, EnvVars, TaskListener)}.\n+     *\n      * @param run a build this is running as a part of\n      * @param workspace a workspace to use for any file operations\n      * @param env environment variables applicable to this step\n      * @param launcher a way to start processes\n      * @param listener a place to send output\n+     * @throws AbstractMethodError if this step requires a workspace context and neither this method nor {@link #perform(Run, FilePath, Launcher, TaskListener)} is overridden\n      * @throws InterruptedException if the step is interrupted\n      * @throws IOException if something goes wrong; use {@link AbortException} for a polite error\n      * @since TODO", "originalCommit": "f1d10ecbbed1343b9b604557405f95b8b2e7f632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNjcwOA==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457726708", "bodyText": "(This pointed to the @since TODO but apparently a line-based comment like this does not get updated by GH when more commits are added)", "author": "Zastai", "createdAt": "2020-07-20T22:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxNDA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNzI2Mw==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457727263", "bodyText": "Not sure, @daniel-beck?", "author": "jglick", "createdAt": "2020-07-20T22:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxNDA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwODMwMg==", "url": "https://github.com/jenkinsci/jenkins/pull/4829#discussion_r457808302", "bodyText": "Contributors update them every now and then, it\u2019s not automated", "author": "timja", "createdAt": "2020-07-21T03:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxNDA5Mw=="}], "type": "inlineReview"}, {"oid": "ff8dfbfd84276f310f945e23462695873c74efc0", "url": "https://github.com/jenkinsci/jenkins/commit/ff8dfbfd84276f310f945e23462695873c74efc0", "message": "Tweak JavaDoc as suggested by @jglick\n\nThis also removes some unnecessary diffs (one `this.` qualifier), and\none automated import ordering.", "committedDate": "2020-07-20T22:03:13Z", "type": "commit"}, {"oid": "ec5a6df2c67b362e48e014509beb36864f3e3987", "url": "https://github.com/jenkinsci/jenkins/commit/ec5a6df2c67b362e48e014509beb36864f3e3987", "message": "Adjust wrapper context creation\n\nAs suggested by @jglick; a Context is now canonically created via\nSimpleBuildWrapper.createContext(), which will tell the context\nwhether or not there is a workspace requirement (which is then\npassed on to any Disposer as before).", "committedDate": "2020-07-20T22:24:40Z", "type": "commit"}, {"oid": "a0b1239d14839785bc9da043a985932b010538d1", "url": "https://github.com/jenkinsci/jenkins/commit/a0b1239d14839785bc9da043a985932b010538d1", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-07-22T17:55:17Z", "type": "commit"}, {"oid": "9ba996d437dd6ad21b6ea30c7e75284622c6544a", "url": "https://github.com/jenkinsci/jenkins/commit/9ba996d437dd6ad21b6ea30c7e75284622c6544a", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-07-25T12:49:29Z", "type": "commit"}, {"oid": "853c8f053a5d406d68a67d8349b48f61564ecf66", "url": "https://github.com/jenkinsci/jenkins/commit/853c8f053a5d406d68a67d8349b48f61564ecf66", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-07-27T21:02:11Z", "type": "commit"}, {"oid": "080505b2a8f680fe92115c89fdc93deb5cc9e3f1", "url": "https://github.com/jenkinsci/jenkins/commit/080505b2a8f680fe92115c89fdc93deb5cc9e3f1", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-08-08T23:28:31Z", "type": "commit"}, {"oid": "3ca33f30706d40151ae5aad85e1af33ad7c9805c", "url": "https://github.com/jenkinsci/jenkins/commit/3ca33f30706d40151ae5aad85e1af33ad7c9805c", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-08-23T13:49:36Z", "type": "commit"}, {"oid": "1f38c7e25bfca2937560d1094b2963d254852ff9", "url": "https://github.com/jenkinsci/jenkins/commit/1f38c7e25bfca2937560d1094b2963d254852ff9", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-08-24T17:53:02Z", "type": "commit"}, {"oid": "a271a2a0bc577b45bacacedf4e2f866813705071", "url": "https://github.com/jenkinsci/jenkins/commit/a271a2a0bc577b45bacacedf4e2f866813705071", "message": "Merge branch 'master' into JENKINS-46175B", "committedDate": "2020-09-19T16:54:46Z", "type": "commit"}]}