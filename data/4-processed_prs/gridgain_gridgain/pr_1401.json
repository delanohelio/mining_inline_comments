{"pr_number": 1401, "pr_title": "GG-30665", "pr_createdAt": "2020-08-31T12:54:29Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1401", "timeline": [{"oid": "211f0040afdcd684c1cf83abefc2ed06e91a915f", "url": "https://github.com/gridgain/gridgain/commit/211f0040afdcd684c1cf83abefc2ed06e91a915f", "message": "GG-30665 WIP", "committedDate": "2020-08-31T11:42:15Z", "type": "commit"}, {"oid": "6d4707e82f6493600f9d421848f2b9de26636b8f", "url": "https://github.com/gridgain/gridgain/commit/6d4707e82f6493600f9d421848f2b9de26636b8f", "message": "GG-30665 WIP", "committedDate": "2020-08-31T12:55:32Z", "type": "commit"}, {"oid": "aca7903587eb3a57c8d2fd7a4c59b97415b0003c", "url": "https://github.com/gridgain/gridgain/commit/aca7903587eb3a57c8d2fd7a4c59b97415b0003c", "message": "GG-30665 WIP", "committedDate": "2020-09-01T07:19:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2OTM0OQ==", "url": "https://github.com/gridgain/gridgain/pull/1401#discussion_r481069349", "bodyText": "This is incorrect. ctx.node(nodeId) can become null after the first null check and throw NPE on subsequent get(null).\nI would suggest to make rebalancingParts = Map<UUID, Set> instead and use\nrebalancingParts.getOrDefault(nodeId, Collections.emptySet())", "author": "ascherbakoff", "createdAt": "2020-09-01T11:31:53Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java", "diffHunk": "@@ -2006,47 +2006,43 @@ private void onChainFinished() {\n         private void logSupplierDone(UUID nodeId) {\n             int remainingRoutines = remaining.size() - 1;\n \n-            try {\n-                Map<Boolean, Long> partCnts = rebalancingParts.get(ctx.node(nodeId)).stream()\n-                    .collect(partitioningBy(historical::contains, counting()));\n-\n-                int fullParts = partCnts.getOrDefault(Boolean.FALSE, 0L).intValue();\n-                int histParts = partCnts.getOrDefault(Boolean.TRUE, 0L).intValue();\n-\n-                long fullEntries = fullReceivedKeys.get(nodeId).sum();\n-                long histEntries = histReceivedKeys.get(nodeId).sum();\n-\n-                long fullBytes = fullReceivedBytes.get(nodeId).sum();\n-                long histBytes = histReceivedBytes.get(nodeId).sum();\n-\n-                long duration = System.currentTimeMillis() - startTime;\n-                long durationSec = Math.max(1, TimeUnit.MILLISECONDS.toSeconds(duration));\n-\n-                U.log(log, \"Completed \" + (remainingRoutines == 0 ? \"(final) \" : \"\") +\n-                    \"rebalancing [rebalanceId=\" + rebalanceId +\n-                    \", grp=\" + grp.cacheOrGroupName() +\n-                    \", supplier=\" + nodeId +\n-                    \", partitions=\" + (fullParts + histParts) +\n-                    \", entries=\" + (fullEntries + histEntries) +\n-                    \", duration=\" + U.humanReadableDuration(duration) +\n-                    \", bytesRcvd=\" + U.humanReadableByteCount(fullBytes + histBytes) +\n-                    \", bandwidth=\" + U.humanReadableByteCount((fullBytes + histBytes) / durationSec) + \"/sec\" +\n-                    \", histPartitions=\" + histParts +\n-                    \", histEntries=\" + histEntries +\n-                    \", histBytesRcvd=\" + U.humanReadableByteCount(histBytes) +\n-                    \", fullPartitions=\" + fullParts +\n-                    \", fullEntries=\" + fullEntries +\n-                    \", fullBytesRcvd=\" + U.humanReadableByteCount(fullBytes) +\n-                    \", topVer=\" + topologyVersion() +\n-                    \", progress=\" + (routines - remainingRoutines) + \"/\" + routines + \"]\");\n-            }\n-            catch (Throwable t){\n-                U.error(log, \"Completed \" + ((remainingRoutines == 0 ? \"(final) \" : \"\") +\n-                    \"rebalancing [grp=\" + grp.cacheOrGroupName() +\n-                    \", supplier=\" + nodeId +\n-                    \", topVer=\" + topologyVersion() +\n-                    \", progress=\" + (routines - remainingRoutines) + \"/\" + routines + \"]\"), t);\n-            }\n+            // Node can left and by discovery we will not receive it.\n+            Set<Integer> parts = nonNull(ctx.node(nodeId)) ? rebalancingParts.get(ctx.node(nodeId)) :", "originalCommit": "aca7903587eb3a57c8d2fd7a4c59b97415b0003c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3MDAzNA==", "url": "https://github.com/gridgain/gridgain/pull/1401#discussion_r481070034", "bodyText": "Are you 100% sure this code never throws any exception ? Let's keep the try - catch to avoid node shutdown on logging error. I suggest to do it for each complex logging block.", "author": "ascherbakoff", "createdAt": "2020-09-01T11:33:13Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java", "diffHunk": "@@ -2006,47 +2006,43 @@ private void onChainFinished() {\n         private void logSupplierDone(UUID nodeId) {\n             int remainingRoutines = remaining.size() - 1;\n \n-            try {\n-                Map<Boolean, Long> partCnts = rebalancingParts.get(ctx.node(nodeId)).stream()\n-                    .collect(partitioningBy(historical::contains, counting()));\n-\n-                int fullParts = partCnts.getOrDefault(Boolean.FALSE, 0L).intValue();\n-                int histParts = partCnts.getOrDefault(Boolean.TRUE, 0L).intValue();\n-\n-                long fullEntries = fullReceivedKeys.get(nodeId).sum();\n-                long histEntries = histReceivedKeys.get(nodeId).sum();\n-\n-                long fullBytes = fullReceivedBytes.get(nodeId).sum();\n-                long histBytes = histReceivedBytes.get(nodeId).sum();\n-\n-                long duration = System.currentTimeMillis() - startTime;\n-                long durationSec = Math.max(1, TimeUnit.MILLISECONDS.toSeconds(duration));\n-\n-                U.log(log, \"Completed \" + (remainingRoutines == 0 ? \"(final) \" : \"\") +\n-                    \"rebalancing [rebalanceId=\" + rebalanceId +\n-                    \", grp=\" + grp.cacheOrGroupName() +\n-                    \", supplier=\" + nodeId +\n-                    \", partitions=\" + (fullParts + histParts) +\n-                    \", entries=\" + (fullEntries + histEntries) +\n-                    \", duration=\" + U.humanReadableDuration(duration) +\n-                    \", bytesRcvd=\" + U.humanReadableByteCount(fullBytes + histBytes) +\n-                    \", bandwidth=\" + U.humanReadableByteCount((fullBytes + histBytes) / durationSec) + \"/sec\" +\n-                    \", histPartitions=\" + histParts +\n-                    \", histEntries=\" + histEntries +\n-                    \", histBytesRcvd=\" + U.humanReadableByteCount(histBytes) +\n-                    \", fullPartitions=\" + fullParts +\n-                    \", fullEntries=\" + fullEntries +\n-                    \", fullBytesRcvd=\" + U.humanReadableByteCount(fullBytes) +\n-                    \", topVer=\" + topologyVersion() +\n-                    \", progress=\" + (routines - remainingRoutines) + \"/\" + routines + \"]\");\n-            }\n-            catch (Throwable t){\n-                U.error(log, \"Completed \" + ((remainingRoutines == 0 ? \"(final) \" : \"\") +\n-                    \"rebalancing [grp=\" + grp.cacheOrGroupName() +\n-                    \", supplier=\" + nodeId +\n-                    \", topVer=\" + topologyVersion() +\n-                    \", progress=\" + (routines - remainingRoutines) + \"/\" + routines + \"]\"), t);\n-            }\n+            // Node can left and by discovery we will not receive it.\n+            Set<Integer> parts = nonNull(ctx.node(nodeId)) ? rebalancingParts.get(ctx.node(nodeId)) :\n+                rebalancingParts.entrySet().stream().filter(e -> nodeId.equals(e.getKey().id()))\n+                    .map(Map.Entry::getValue).findAny().orElse(Collections.emptySet());\n+\n+            Map<Boolean, Long> partCnts = parts.stream()\n+                .collect(partitioningBy(historical::contains, counting()));\n+\n+            int fullParts = partCnts.getOrDefault(Boolean.FALSE, 0L).intValue();\n+            int histParts = partCnts.getOrDefault(Boolean.TRUE, 0L).intValue();\n+\n+            long fullEntries = fullReceivedKeys.get(nodeId).sum();\n+            long histEntries = histReceivedKeys.get(nodeId).sum();\n+\n+            long fullBytes = fullReceivedBytes.get(nodeId).sum();\n+            long histBytes = histReceivedBytes.get(nodeId).sum();\n+\n+            long duration = System.currentTimeMillis() - startTime;\n+            long durationSec = Math.max(1, TimeUnit.MILLISECONDS.toSeconds(duration));\n+\n+            U.log(log, \"Completed \" + (remainingRoutines == 0 ? \"(final) \" : \"\") +\n+                \"rebalancing [rebalanceId=\" + rebalanceId +\n+                \", grp=\" + grp.cacheOrGroupName() +\n+                \", supplier=\" + nodeId +\n+                \", partitions=\" + (fullParts + histParts) +\n+                \", entries=\" + (fullEntries + histEntries) +\n+                \", duration=\" + U.humanReadableDuration(duration) +\n+                \", bytesRcvd=\" + U.humanReadableByteCount(fullBytes + histBytes) +\n+                \", bandwidth=\" + U.humanReadableByteCount((fullBytes + histBytes) / durationSec) + \"/sec\" +\n+                \", histPartitions=\" + histParts +\n+                \", histEntries=\" + histEntries +\n+                \", histBytesRcvd=\" + U.humanReadableByteCount(histBytes) +\n+                \", fullPartitions=\" + fullParts +\n+                \", fullEntries=\" + fullEntries +\n+                \", fullBytesRcvd=\" + U.humanReadableByteCount(fullBytes) +\n+                \", topVer=\" + topologyVersion() +\n+                \", progress=\" + (routines - remainingRoutines) + \"/\" + routines + \"]\");", "originalCommit": "aca7903587eb3a57c8d2fd7a4c59b97415b0003c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5f40108f73cd5c703898cc0b1da5eee9c7dacd0", "url": "https://github.com/gridgain/gridgain/commit/d5f40108f73cd5c703898cc0b1da5eee9c7dacd0", "message": "Merge branch 'master' into gg-30665", "committedDate": "2020-09-02T13:33:02Z", "type": "commit"}, {"oid": "133a401df44065b2a91916f250bd583529c0fa48", "url": "https://github.com/gridgain/gridgain/commit/133a401df44065b2a91916f250bd583529c0fa48", "message": "GG-30665 WIP", "committedDate": "2020-09-02T13:55:06Z", "type": "commit"}]}