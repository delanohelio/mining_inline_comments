{"pr_number": 869, "pr_title": "GG-27064 Task to get value in cache with specified key.", "pr_createdAt": "2020-01-22T11:54:55Z", "pr_url": "https://github.com/gridgain/gridgain/pull/869", "timeline": [{"oid": "a8ebe33b3f0717e285b0cba791b24871cd5e187b", "url": "https://github.com/gridgain/gridgain/commit/a8ebe33b3f0717e285b0cba791b24871cd5e187b", "message": "GG-27064 Task to get value in cache with specified key.", "committedDate": "2020-01-22T11:00:20Z", "type": "commit"}, {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1", "url": "https://github.com/gridgain/gridgain/commit/d57b566ad803bee760d275f1b19485a30817bcb1", "message": "GG-27064 Task to get value in cache with specified key.", "committedDate": "2020-01-22T14:20:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwOTk0MA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369909940", "bodyText": "missing javadoc", "author": "nva", "createdAt": "2020-01-23T02:44:44Z", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -147,6 +150,8 @@\n     /** Used to sent request charset. */\n     private static final String CHARSET = StandardCharsets.UTF_8.name();\n \n+    private static final String UNSUPPORTED_KEY_TYPE = \"Specified key type is not supported\";", "originalCommit": "d57b566ad803bee760d275f1b19485a30817bcb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExOTcyMQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370119721", "bodyText": "Added.", "author": "vsisko", "createdAt": "2020-01-23T13:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwOTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369911980", "bodyText": "Why do you send enum as string?", "author": "nva", "createdAt": "2020-01-23T02:55:56Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTaskArg.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import org.apache.ignite.internal.dto.IgniteDataTransferObject;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+/**\n+ * Argument for {@link VisorCacheGetValueTask}.\n+ */\n+public class VisorCacheGetValueTaskArg extends IgniteDataTransferObject {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Cache name. */\n+    private String cacheName;\n+\n+    /** Type of key object. String presentation of {@link VisorObjectType} value. */\n+    private String type;", "originalCommit": "d57b566ad803bee760d275f1b19485a30817bcb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDEzNA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120134", "bodyText": "To send of error from task if new key types will be added.", "author": "vsisko", "createdAt": "2020-01-23T13:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MDI4NQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370490285", "bodyText": "I think we shouldn't send request with invalid params. For example disable such variant in UI, by features.\n@akuznetsov-gridgain What do you think?", "author": "nva", "createdAt": "2020-01-24T06:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2MDgwNg==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r371660806", "bodyText": "Changed to Enum. Implemented deserializer for BinaryObject type.", "author": "vsisko", "createdAt": "2020-01-28T08:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjA1OA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369912058", "bodyText": "Should throw exception in this case.", "author": "nva", "createdAt": "2020-01-23T02:56:24Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);\n+\n+                        return constructBinaryValue(obj);\n+                    }\n+                    catch (IOException e) {\n+                        throw new IgniteException(\"Failed to read key object\", e);\n+                    }\n+\n+                default:\n+                    return value;", "originalCommit": "d57b566ad803bee760d275f1b19485a30817bcb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDM0Mg==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120342", "bodyText": "Changed.", "author": "vsisko", "createdAt": "2020-01-23T13:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjc5Ng==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369912796", "bodyText": "Please define wrapper class and map to it:\n{\nclassName,\nfields: [...]\n}", "author": "nva", "createdAt": "2020-01-23T03:00:05Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);", "originalCommit": "d57b566ad803bee760d275f1b19485a30817bcb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDQyNA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120424", "bodyText": "Wrapper implemented.", "author": "vsisko", "createdAt": "2020-01-23T13:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDIzNA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369914234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"Failed to find cache with specified name [cacheName=\" + arg.getCacheName() + \"]\");\n          \n          \n            \n                            throw new IllegalArgumentException(\"Failed to find cache with specified name: \" + arg.getCacheName());", "author": "nva", "createdAt": "2020-01-23T03:07:51Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);\n+\n+                        return constructBinaryValue(obj);\n+                    }\n+                    catch (IOException e) {\n+                        throw new IgniteException(\"Failed to read key object\", e);\n+                    }\n+\n+                default:\n+                    return value;\n+            }\n+        }\n+\n+        /**\n+         * Construct {@link BinaryObject} value specified in JSON object.\n+         *\n+         * @param value JSON specification of {@link BinaryObject} value.\n+         * @return {@link BinaryObject} for specified value.\n+         */\n+        private BinaryObject constructBinaryValue(JsonNode value) {\n+            String clsName = value.get(\"className\").textValue();\n+\n+            BinaryObjectBuilder b = ignite.binary().builder(clsName);\n+\n+            for (Iterator<JsonNode> it = value.get(\"fields\").elements(); it.hasNext();) {\n+                JsonNode fld = it.next();\n+\n+                String fldName = fld.get(\"name\").textValue();\n+                VisorObjectType fldType = VisorObjectType.valueOf(fld.get(\"type\").textValue());\n+                JsonNode fldValue = fld.get(\"value\");\n+\n+                if (fldType == VisorObjectType.BINARY)\n+                    b.setField(fldName, constructBinaryValue(fldValue));\n+                else\n+                    b.setField(fldName, parseArgumentValue(fldType, fldValue.asText()));\n+            }\n+\n+            return b.build();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected VisorCacheModifyTaskResult run(final VisorCacheGetValueTaskArg arg) {\n+            assert arg != null;\n+\n+            String cacheName = arg.getCacheName();\n+            assert cacheName != null;\n+\n+            @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);\n+\n+            ignite.context().cache().internalCache(cacheName);\n+\n+            if (cache == null)\n+                throw new IllegalArgumentException(\"Failed to find cache with specified name [cacheName=\" + arg.getCacheName() + \"]\");", "originalCommit": "d57b566ad803bee760d275f1b19485a30817bcb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDU0OA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120548", "bodyText": "Message changed.", "author": "vsisko", "createdAt": "2020-01-23T13:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDIzNA=="}], "type": "inlineReview"}, {"oid": "93cf656d9aecea5701daa135bbef1a676ec93634", "url": "https://github.com/gridgain/gridgain/commit/93cf656d9aecea5701daa135bbef1a676ec93634", "message": "GG-27064 Task to get value in cache with specified key.", "committedDate": "2020-01-23T12:59:31Z", "type": "commit"}, {"oid": "031748c9beb2c6b9b46b28ba73ae06a382e91e2a", "url": "https://github.com/gridgain/gridgain/commit/031748c9beb2c6b9b46b28ba73ae06a382e91e2a", "message": "GG-27064 Task to get value in cache with specified key.", "committedDate": "2020-01-23T13:34:15Z", "type": "commit"}, {"oid": "d967f62de05addaad814c36f3f07caac2fda3c04", "url": "https://github.com/gridgain/gridgain/commit/d967f62de05addaad814c36f3f07caac2fda3c04", "message": "GG-27064 Task to get value in cache with specified key.", "committedDate": "2020-01-23T16:11:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDI2Nw==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370320267", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                WC_CACHE_GET_VALUE(31);\n          \n          \n            \n                WC_GET_CACHE_VALUE(31);", "author": "akuznetsov-gridgain", "createdAt": "2020-01-23T19:47:34Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/IgniteFeatures.java", "diffHunk": "@@ -112,7 +112,10 @@\n     MANAGEMENT_CONSOLE(28),\n \n     /** Long operations dump timeout. */\n-    LONG_OPERATIONS_DUMP_TIMEOUT(30);\n+    LONG_OPERATIONS_DUMP_TIMEOUT(30),\n+\n+    /** Cluster has task to get value from cache by key value. */\n+    WC_CACHE_GET_VALUE(31);", "originalCommit": "d967f62de05addaad814c36f3f07caac2fda3c04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2MDUxMg==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r371660512", "bodyText": "Renamed", "author": "vsisko", "createdAt": "2020-01-28T08:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDI2Nw=="}], "type": "inlineReview"}, {"oid": "cd24623ee091a83d5503d84ef141952a4bb97c17", "url": "https://github.com/gridgain/gridgain/commit/cd24623ee091a83d5503d84ef141952a4bb97c17", "message": "GG-27064 Task to get value in cache with specified key.", "committedDate": "2020-01-24T15:04:11Z", "type": "commit"}, {"oid": "bdc7413c8ba5209cfee7a0e86182a2014671f4b9", "url": "https://github.com/gridgain/gridgain/commit/bdc7413c8ba5209cfee7a0e86182a2014671f4b9", "message": "Merge branches 'gg-27064' and 'master' of https://github.com/gridgain/gridgain into gg-27064", "committedDate": "2020-01-24T15:04:58Z", "type": "commit"}, {"oid": "b41e4db22a4ab87554c969624bf318b9d7727e6d", "url": "https://github.com/gridgain/gridgain/commit/b41e4db22a4ab87554c969624bf318b9d7727e6d", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-01-27T18:17:24Z", "type": "commit"}, {"oid": "3759462de963070d51c1df0c4a5155fc9853f7b1", "url": "https://github.com/gridgain/gridgain/commit/3759462de963070d51c1df0c4a5155fc9853f7b1", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-01-28T08:25:03Z", "type": "commit"}, {"oid": "175ab400e333bb2d5aaf0eaae03e1a1647a08f45", "url": "https://github.com/gridgain/gridgain/commit/175ab400e333bb2d5aaf0eaae03e1a1647a08f45", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-01-28T10:15:07Z", "type": "commit"}, {"oid": "2d94a9aaf2d5ae63ca87652dc8e592b2b8174045", "url": "https://github.com/gridgain/gridgain/commit/2d94a9aaf2d5ae63ca87652dc8e592b2b8174045", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-01-29T17:37:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5Mjg4NQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r372792885", "bodyText": "Do we need this?", "author": "nva", "createdAt": "2020-01-30T07:29:06Z", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,184 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.INT, \"1\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.UUID, uuidKey.toString()));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.TIMESTAMP, timestamp));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.", "originalCommit": "2d94a9aaf2d5ae63ca87652dc8e592b2b8174045", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NTAxMQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375095011", "bodyText": "It can be uncommented to reproduce bug with transaction lock.", "author": "vsisko", "createdAt": "2020-02-05T07:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5Mjg4NQ=="}], "type": "inlineReview"}, {"oid": "c5c30d35b53de6bce1fdd416a4604e104ee50f34", "url": "https://github.com/gridgain/gridgain/commit/c5c30d35b53de6bce1fdd416a4604e104ee50f34", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-01-30T13:18:26Z", "type": "commit"}, {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6", "url": "https://github.com/gridgain/gridgain/commit/871b6051869edb0cc4bb0cb697b15a6ac9731fe6", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-02-03T08:22:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5OTEwMw==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374699103", "bodyText": "Maybe String.format() would help to save some space and would be better to read", "author": "MaxLosevskoy", "createdAt": "2020-02-04T14:24:16Z", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));\n+\n+        // Check object key.\n+        jcache().put(p, 5);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +", "originalCommit": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMxODQ1OA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375318458", "bodyText": "Changed.", "author": "vsisko", "createdAt": "2020-02-05T15:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5OTEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwODIzOQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374708239", "bodyText": "I guess the following line is missing:\nassertTrue(err.isNull());", "author": "MaxLosevskoy", "createdAt": "2020-02-04T14:39:41Z", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));\n+\n+        // Check object key.\n+        jcache().put(p, 5);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +\n+                    \"\\\"value\\\":{\" +\n+                        \"\\\"className\\\":\\\"\" + Person.class.getName() + \"\\\",\" +\n+                        \"\\\"fields\\\":[\" +\n+                        \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + p.getId() + \"},\" +\n+                        \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"orgId\\\",\\\"value\\\":\" + p.getOrganizationId() + \"},\" +\n+                        \"{\\\"type\\\":\\\"STRING\\\",\\\"name\\\":\\\"firstName\\\",\\\"value\\\":\\\"\" + p.getFirstName() + \"\\\"},\" +\n+                        \"{\\\"type\\\":\\\"STRING\\\",\\\"name\\\":\\\"lastName\\\",\\\"value\\\":\\\"\" + p.getLastName() + \"\\\"},\" +\n+                        \"{\\\"type\\\":\\\"DOUBLE\\\",\\\"name\\\":\\\"salary\\\",\\\"value\\\":\" + p.getSalary() + \"}\" +\n+                        \"]\" +\n+                    \"}\" +\n+                \"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for binary key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        assertEquals(\"5\", res.get(\"result\").toString());\n+\n+        // Check composite object key.\n+        CompositeKeyExternal key = new CompositeKeyExternal(new CompositeKeyInternal());\n+\n+        jcache().put(key, 6);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +\n+                    \"\\\"value\\\":{\" +\n+                        \"\\\"className\\\":\\\"\" + CompositeKeyExternal.class.getName() + \"\\\",\" +\n+                        \"\\\"fields\\\":[\" +\n+                            \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + key.getId() + \"},\" +\n+                            \"{\\\"type\\\":\\\"BINARY\\\",\\\"name\\\":\\\"internal\\\",\\\"value\\\":{\" +\n+                                \"\\\"className\\\":\\\"\" + CompositeKeyInternal.class.getName() + \"\\\",\" +\n+                                \"\\\"fields\\\":[{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + key.getInternal().getId() + \"}]\" +\n+                            \"}}\" +\n+                        \"]\" +\n+                    \"}\" +\n+                \"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for binary key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        assertEquals(\"6\", res.get(\"result\").toString());\n+    }\n+\n+    /**\n+     * Tests work of VisorCacheGetValueTask with unsupported key type.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueForUnsupportedKey() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"UNSUPPORTED\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for unsupported key type: \" + ret);\n+\n+        JsonNode err = jsonTaskErrorResult(ret);\n+\n+        assertFalse(err.isNull());\n+        assertTrue(err.textValue().contains(UNSUPPORTED_KEY_TYPE));\n+    }\n+\n+    /**\n+     * Tests work of VisorCacheGetValueTask result with missed value.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueWithMissedValue() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for integer key type with missed value: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+", "originalCommit": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NTM5Mg==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375095392", "bodyText": "jsonTaskResult function contains check assertTrue(res.get(\"error\").isNull()).", "author": "vsisko", "createdAt": "2020-02-05T07:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwODIzOQ=="}], "type": "inlineReview"}, {"oid": "ffa484f1b897277d54022f94082b28051b49edf2", "url": "https://github.com/gridgain/gridgain/commit/ffa484f1b897277d54022f94082b28051b49edf2", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-02-05T08:17:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMjMzMA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374612330", "bodyText": "Please add comment like \\\\ TODO GG-XXXXX Investigate why DATE_SQL hangs during test.", "author": "akuznetsov-gridgain", "createdAt": "2020-02-04T11:17:30Z", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));", "originalCommit": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMzI0OQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374613249", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Custom deserializer for {@link BinaryObjectImpl} */\n          \n          \n            \n                /** Custom deserializer for {@link VisorCacheKeyObject} */", "author": "akuznetsov-gridgain", "createdAt": "2020-02-04T11:19:39Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "diffHunk": "@@ -121,6 +138,226 @@ public GridJettyObjectMapper() {\n         }\n     }\n \n+    /** Custom deserializer for {@link BinaryObjectImpl} */", "originalCommit": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODQ1OA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808458", "bodyText": "Fixed.", "author": "vsisko", "createdAt": "2020-02-06T12:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMzI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzQ3NA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374663474", "bodyText": "\"java\" imports should be first, please configure you IDE.", "author": "akuznetsov-gridgain", "createdAt": "2020-02-04T13:17:42Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "diffHunk": "@@ -32,13 +32,29 @@\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n-\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Date;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.text.DateFormat;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;", "originalCommit": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODUwOQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808509", "bodyText": "Sorted.", "author": "vsisko", "createdAt": "2020-02-06T12:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MTk0OA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375791948", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //Check Date key.\n          \n          \n            \n                    // TODO GG-XXXXX Check Date key.", "author": "akuznetsov-gridgain", "createdAt": "2020-02-06T11:53:43Z", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1645,246 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.INT, 1)));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.UUID, uuidKey.toString())\n+            )\n+        );\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.TIMESTAMP, timestamp)\n+            )\n+        );\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        //Check Date key.", "originalCommit": "ffa484f1b897277d54022f94082b28051b49edf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODYzMw==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808633", "bodyText": "Link added.", "author": "vsisko", "createdAt": "2020-02-06T12:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MTk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzM1Mg==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375793352", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);\n          \n          \n            \n                        IgniteCache<Object, Object> cache = ignite.cache(cacheName);", "author": "akuznetsov-gridgain", "createdAt": "2020-02-06T11:57:05Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheGetValueJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheGetValueJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheGetValueJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheGetValueJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected VisorCacheModifyTaskResult run(final VisorCacheGetValueTaskArg arg) {\n+            assert arg != null;\n+\n+            String cacheName = arg.getCacheName();\n+            assert cacheName != null;\n+\n+            @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);", "originalCommit": "ffa484f1b897277d54022f94082b28051b49edf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODI0OQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808249", "bodyText": "Removed nullable.", "author": "vsisko", "createdAt": "2020-02-06T12:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzQ4OA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375793488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.jetbrains.annotations.Nullable;", "author": "akuznetsov-gridgain", "createdAt": "2020-02-06T11:57:25Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;", "originalCommit": "ffa484f1b897277d54022f94082b28051b49edf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODM1MA==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808350", "bodyText": "Removed nullable.", "author": "vsisko", "createdAt": "2020-02-06T12:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NDUzOQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375794539", "bodyText": "Please sort types in groups.", "author": "akuznetsov-gridgain", "createdAt": "2020-02-06T12:00:03Z", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorDataType.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Enumeration of all supported cache key types in {@link VisorCacheGetValueTask}.\n+ */\n+public enum VisorDataType {\n+    /**  */\n+    STRING,\n+\n+    /**  */\n+    CHARACTER,\n+\n+    /**  */\n+    INT,\n+\n+    /**  */\n+    LONG,\n+\n+    /**  */\n+    SHORT,\n+\n+    /**  */\n+    BYTE,\n+\n+    /**  */\n+    FLOAT,\n+\n+    /**  */\n+    DOUBLE,\n+\n+    /**  */\n+    BOOLEAN,\n+\n+    /**  */\n+    DATE_UTIL,\n+\n+    /**  */\n+    DATE_SQL,\n+\n+    /**  */\n+    TIMESTAMP,\n+\n+    /**  */\n+    UUID,\n+\n+    /**  */\n+    BINARY,\n+\n+    /**  */\n+    INSTANT,\n+\n+    /**  */\n+    BIG_DECIMAL,\n+\n+    /**  */\n+    BIG_INTEGER;", "originalCommit": "ffa484f1b897277d54022f94082b28051b49edf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODA4MQ==", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808081", "bodyText": "Sorted.", "author": "vsisko", "createdAt": "2020-02-06T12:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NDUzOQ=="}], "type": "inlineReview"}, {"oid": "ccd4543d33855daa1c11e3e4dea299e8a8f14878", "url": "https://github.com/gridgain/gridgain/commit/ccd4543d33855daa1c11e3e4dea299e8a8f14878", "message": "GG-27064 WIP Task to get value in cache with specified key.", "committedDate": "2020-02-06T12:29:20Z", "type": "commit"}, {"oid": "68d4287f8441c08d218371592b6b638f85431bdb", "url": "https://github.com/gridgain/gridgain/commit/68d4287f8441c08d218371592b6b638f85431bdb", "message": "Merge branches 'gg-27064' and 'master' of https://github.com/gridgain/gridgain into gg-27064\n\n\u0001 Conflicts:\n\u0001\tmodules/core/src/main/java/org/apache/ignite/internal/IgniteFeatures.java", "committedDate": "2020-02-06T14:58:51Z", "type": "commit"}]}