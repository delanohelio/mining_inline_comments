{"pr_number": 1039, "pr_title": "GG-27288: Implemented column-wise binding for result rows", "pr_createdAt": "2020-04-08T00:37:43Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1039", "timeline": [{"oid": "70541d9abf15ae854581df421480aca9b4598163", "url": "https://github.com/gridgain/gridgain/commit/70541d9abf15ae854581df421480aca9b4598163", "message": "GG-27288: Added test", "committedDate": "2020-04-07T22:59:42Z", "type": "commit"}, {"oid": "fc8a080f40bb7fd445d1ec44631c7edc0eba1168", "url": "https://github.com/gridgain/gridgain/commit/fc8a080f40bb7fd445d1ec44631c7edc0eba1168", "message": "GG-27288: Added to projects", "committedDate": "2020-04-07T22:59:42Z", "type": "commit"}, {"oid": "4d95f447643796aa7f451cf23e21bf14224da852", "url": "https://github.com/gridgain/gridgain/commit/4d95f447643796aa7f451cf23e21bf14224da852", "message": "GG-27288: Compilation fix for test", "committedDate": "2020-04-07T22:59:42Z", "type": "commit"}, {"oid": "fc15ef8eba2a1aa51db8b47f7bd6bd0ec91eb9f1", "url": "https://github.com/gridgain/gridgain/commit/fc15ef8eba2a1aa51db8b47f7bd6bd0ec91eb9f1", "message": "GG-27288: Implemented column-wise binding for result rows", "committedDate": "2020-04-07T22:59:42Z", "type": "commit"}, {"oid": "e31abd8fb3ebc0138a217a92eea7b5ec596333b5", "url": "https://github.com/gridgain/gridgain/commit/e31abd8fb3ebc0138a217a92eea7b5ec596333b5", "message": "GG-27288: Minor fixes for test", "committedDate": "2020-04-07T22:59:42Z", "type": "commit"}, {"oid": "dd40b9ef4d7a2048cdbc72db68380750856306b4", "url": "https://github.com/gridgain/gridgain/commit/dd40b9ef4d7a2048cdbc72db68380750856306b4", "message": "GG-27288: Re-factoring for tests", "committedDate": "2020-04-07T23:52:24Z", "type": "commit"}, {"oid": "9d76f95449c772fd4b3942c0958b8d28737a065e", "url": "https://github.com/gridgain/gridgain/commit/9d76f95449c772fd4b3942c0958b8d28737a065e", "message": "GG-27288: Workaround for old Boost.test versions", "committedDate": "2020-04-07T23:59:17Z", "type": "commit"}, {"oid": "c86808d6e3259610c1619a5eeac6b262db19c558", "url": "https://github.com/gridgain/gridgain/commit/c86808d6e3259610c1619a5eeac6b262db19c558", "message": "GG-27288: Improved test", "committedDate": "2020-04-08T00:34:51Z", "type": "commit"}, {"oid": "7b87a09328fe2832e4104bf5a051ee5cb17f2354", "url": "https://github.com/gridgain/gridgain/commit/7b87a09328fe2832e4104bf5a051ee5cb17f2354", "message": "GG-27288: Implemented test for row-wise binding", "committedDate": "2020-04-08T00:59:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzOTkyNg==", "url": "https://github.com/gridgain/gridgain/pull/1039#discussion_r405339926", "bodyText": "This blank line is sometimes present, sometimes isn't", "author": "ptupitsyn", "createdAt": "2020-04-08T08:15:11Z", "path": "modules/platforms/cpp/odbc-test/include/odbc_test_suite.h", "diffHunk": "@@ -129,13 +139,176 @@ namespace ignite\n              */\n             void InsertNonFullBatchSelect(int recordsNum, int splitAt);\n \n+            /**\n+             * Get test i8Field.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding i8Field value.\n+             */\n+            static int8_t GetTestI8Field(int64_t idx);\n+\n+            /**\n+             * Check i8Field test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestI8Value(int idx, int8_t value);\n+\n+            /**\n+             * Get test i16Field.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding i16Field value.\n+             */\n+            static int16_t GetTestI16Field(int64_t idx);\n+\n+            /**\n+             * Check i16Field test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestI16Value(int idx, int16_t value);\n+\n+            /**\n+             * Get test i32Field.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding i32Field value.\n+             */\n+            static int32_t GetTestI32Field(int64_t idx);\n+\n+            /**\n+             * Check i32Field test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestI32Value(int idx, int32_t value);\n+\n             /**\n              * Get test string.\n              *\n-             * @param ind Index.\n+             * @param idx Index.\n              * @return Corresponding test string.\n              */\n-            static std::string getTestString(int64_t ind);\n+            static std::string GetTestString(int64_t idx);\n+\n+            /**\n+             * Check strField test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestStringValue(int idx, const std::string& value);\n+\n+            /**\n+             * Get test floatField.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding floatField value.\n+             */\n+            static float GetTestFloatField(int64_t idx);\n+\n+            /**\n+             * Check floatField test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestFloatValue(int idx, float value);\n+\n+            /**\n+             * Get test doubleField.\n+             *", "originalCommit": "7b87a09328fe2832e4104bf5a051ee5cb17f2354", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}