{"pr_number": 1302, "pr_title": "GG-28800  [IGNITE-2890] .NET: Add CacheConfiguration.NodeFilter", "pr_createdAt": "2020-07-13T08:22:44Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1302", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzNTgzNw==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453535837", "bodyText": "I don't think this is a rolling upgrade breaker. This data does not go over the wire.\nAlso, we could keep existing format and just write null/empty values for detached nodes, to minimize changes.", "author": "ptupitsyn", "createdAt": "2020-07-13T09:58:41Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Cluster/ClusterNodeImpl.cs", "diffHunk": "@@ -73,23 +76,60 @@ internal class ClusterNodeImpl : IClusterNode\n         /// <param name=\"reader\">The reader.</param>\n         public ClusterNodeImpl(IBinaryRawReader reader)\n         {\n-            var id = reader.ReadGuid();\n+            //C++ breaker.\n+            _isDetached = reader.ReadBoolean();\n+\n+            //If there would be any errors, the cluster will hang.\n+            //Rolling upgrade breaker.", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzNzkxOA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453537918", "bodyText": "This id is already present in the base class", "author": "ptupitsyn", "createdAt": "2020-07-13T10:02:04Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cluster/PlatformClusterNodeFilterImpl.java", "diffHunk": "@@ -29,10 +33,12 @@\n /**\n  * Interop cluster node filter.\n  */\n-public class PlatformClusterNodeFilterImpl extends PlatformAbstractPredicate implements PlatformClusterNodeFilter {\n+public class PlatformClusterNodeFilterImpl extends PlatformAbstractPredicate implements PlatformClusterNodeFilter, Binarylizable {\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    private int handleId = -1;", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzODk5OA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453538998", "bodyText": "This likely breaks rolling upgrades compatibility, and I'm not sure if we need to override at all.", "author": "ptupitsyn", "createdAt": "2020-07-13T10:03:40Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cluster/PlatformClusterNodeFilterImpl.java", "diffHunk": "@@ -80,4 +114,14 @@ public void setIgniteInstance(Ignite ignite) {\n     public Object getInternalPredicate() {\n         return pred;\n     }\n+\n+    @Override\n+    public void writeBinary(BinaryWriter writer) throws BinaryObjectException {", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzNzczMQ==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453637731", "bodyText": "Unfortunately, the whole change is breaking RU and the C++ platform.\nI think this is kind of expected if you are dealing with cache configuration changes?", "author": "ashapkin", "createdAt": "2020-07-13T13:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzODk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MDc2Mg==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453650762", "bodyText": "It is fine to say that \"if you use this new feature, RU will break\". But here we break RU for Service Node Filters, because we change the format.\nAnd this format change looks unnecessary to me, we can remove those overrides.", "author": "ptupitsyn", "createdAt": "2020-07-13T13:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzODk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzOTI0Ng==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453539246", "bodyText": "Can we call ctx.createClusterNodeFilter instead?", "author": "ptupitsyn", "createdAt": "2020-07-13T10:04:06Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java", "diffHunk": "@@ -227,6 +231,16 @@ public static CacheConfiguration readCacheConfiguration(BinaryRawReaderEx in) {\n         ccfg.setAffinity(readAffinityFunction(in));\n         ccfg.setExpiryPolicyFactory(readExpiryPolicyFactory(in));\n \n+        if (in.readBoolean())\n+            ccfg.setNodeFilter(readAttributeNodeFilter(in));\n+        else {\n+            Object nativeFilter = in.readObjectDetached();\n+            if (nativeFilter != null) {\n+                PlatformClusterNodeFilterImpl filter = new PlatformClusterNodeFilterImpl(nativeFilter, ctx);", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MDQ0MQ==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453540441", "bodyText": "We should throw a descriptive exception instead. Using .NET node filter in mixed cluster is not supported. Silently ignoring this will lead to unexpected behavior.", "author": "ptupitsyn", "createdAt": "2020-07-13T10:06:09Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cluster/PlatformClusterNodeFilterImpl.java", "diffHunk": "@@ -48,21 +54,49 @@ public PlatformClusterNodeFilterImpl() {\n      */\n     public PlatformClusterNodeFilterImpl(Object pred, PlatformContext ctx) {\n         super(pred, 0, ctx);\n+\n+        init();\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public boolean apply(ClusterNode clusterNode) {\n+    /* Initializes the cluster node filter */\n+    public void init(){\n         try (PlatformMemory mem = ctx.memory().allocate()) {\n             PlatformOutputStream out = mem.output();\n \n             BinaryRawWriterEx writer = ctx.writer(out);\n \n             writer.writeObject(pred);\n+            out.synchronize();\n+\n+            handleId = ctx.gateway().clusterNodeFilterCreate(mem.pointer());\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean apply(ClusterNode clusterNode)  {\n+\n+        if(ctx == null){\n+            return false;", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MTM1MQ==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453541351", "bodyText": "This should be in Apache.Ignite.Core.Cluster namespace / folder.", "author": "ptupitsyn", "createdAt": "2020-07-13T10:07:46Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,113 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Cluster", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MTczMA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453541730", "bodyText": "Everything in Impl should be internal", "author": "ptupitsyn", "createdAt": "2020-07-13T10:08:31Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Cache/NodeFilter.cs", "diffHunk": "@@ -0,0 +1,84 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+\n+namespace Apache.Ignite.Core.Impl.Cache\n+{\n+    using Apache.Ignite.Core.Cache.Store;\n+    using Apache.Ignite.Core.Cluster;\n+    using Apache.Ignite.Core.Common;\n+    using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Cache.Store;\n+    using Apache.Ignite.Core.Impl.Handle;\n+\n+    public class NodeFilter", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0NDAxOA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453544018", "bodyText": "Looks like there is no test for initial cache configuration:\n            var igniteCfg = new IgniteConfiguration\n            {\n                CacheConfiguration = new[]\n                {\n                    new CacheConfiguration\n                    {\n                        Name = \"abc\",\n                        NodeFilter = new CustomFilter()\n                    },\n                }\n            };", "author": "ptupitsyn", "createdAt": "2020-07-13T10:12:41Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheNodeFilterTest.cs", "diffHunk": "@@ -0,0 +1,311 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Cache\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.IO;\n+    using System.Linq;\n+    using Apache.Ignite.Core.Cache.Configuration;\n+    using Apache.Ignite.Core.Cluster;\n+    using Apache.Ignite.Core.Impl.Cluster;\n+    using NUnit.Framework;\n+\n+    /// <summary>\n+    /// Cache node filter tests.\n+    /// </summary>\n+    [TestFixture]\n+    public class CacheNodeFilterTest\n+    {\n+        /** */\n+        private const string AttrKey2 = \"attr2\";\n+\n+        /**  */\n+        private const int AttrVal2 = 3;\n+\n+        /** */\n+        private const string AttrKey3 = \"my-key\";\n+\n+        /**  */\n+        private const string AttrVal3 = \"my-val\";\n+\n+        /** Grid instances. */\n+        private IIgnite _grid1, _grid2, _grid3;\n+\n+        /// <summary>\n+        ///  Fixture setup.\n+        /// </summary>\n+        [TestFixtureSetUp]\n+        public void TestFixtureSetUp()\n+        {", "originalCommit": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "322f31708e93995804b0dd28594181078c0c12ff", "url": "https://github.com/gridgain/gridgain/commit/322f31708e93995804b0dd28594181078c0c12ff", "message": "AttibuteNodeFilter implementation", "committedDate": "2020-08-23T22:38:19Z", "type": "commit"}, {"oid": "322f31708e93995804b0dd28594181078c0c12ff", "url": "https://github.com/gridgain/gridgain/commit/322f31708e93995804b0dd28594181078c0c12ff", "message": "AttibuteNodeFilter implementation", "committedDate": "2020-08-23T22:38:19Z", "type": "forcePushed"}, {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "url": "https://github.com/gridgain/gridgain/commit/7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "message": "Xsd", "committedDate": "2020-08-23T23:54:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MzMyOQ==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482883329", "bodyText": "Extra blank line", "author": "ptupitsyn", "createdAt": "2020-09-03T10:44:58Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,112 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. \n+    /// </summary>\n+    public sealed class AttributeNodeFilter : IClusterNodeFilter\n+    {\n+        /// <summary>\n+        /// Attributes dictionary match.\n+        /// </summary>\n+        public IDictionary<string, object> Attributes { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        public AttributeNodeFilter()\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        /// <param name=\"attrName\">Attribute name.</param>\n+        /// <param name=\"attrValue\">Attribute value.</param>\n+        public AttributeNodeFilter(string attrName, object attrValue)\n+        {\n+            IgniteArgumentCheck.NotNullOrEmpty(attrName, \"attrName\");\n+\n+            Attributes = new Dictionary<string, object>(1)\n+            {\n+                {attrName, attrValue}\n+            };\n+        }\n+", "originalCommit": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MzQzNw==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482883437", "bodyText": "// No-op.", "author": "ptupitsyn", "createdAt": "2020-09-03T10:45:07Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,112 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. \n+    /// </summary>\n+    public sealed class AttributeNodeFilter : IClusterNodeFilter\n+    {\n+        /// <summary>\n+        /// Attributes dictionary match.\n+        /// </summary>\n+        public IDictionary<string, object> Attributes { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        public AttributeNodeFilter()\n+        {", "originalCommit": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MzgyNg==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482883826", "bodyText": "Attributes can be set to null by the user", "author": "ptupitsyn", "createdAt": "2020-09-03T10:45:51Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,112 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. \n+    /// </summary>\n+    public sealed class AttributeNodeFilter : IClusterNodeFilter\n+    {\n+        /// <summary>\n+        /// Attributes dictionary match.\n+        /// </summary>\n+        public IDictionary<string, object> Attributes { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        public AttributeNodeFilter()\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        /// <param name=\"attrName\">Attribute name.</param>\n+        /// <param name=\"attrValue\">Attribute value.</param>\n+        public AttributeNodeFilter(string attrName, object attrValue)\n+        {\n+            IgniteArgumentCheck.NotNullOrEmpty(attrName, \"attrName\");\n+\n+            Attributes = new Dictionary<string, object>(1)\n+            {\n+                {attrName, attrValue}\n+            };\n+        }\n+\n+\n+        /** <inheritdoc /> */\n+        public bool Invoke(IClusterNode node)\n+        {\n+            throw new NotSupportedException(\"Should not be called from .NET side.\");\n+        }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/> from a binary reader.\n+        /// </summary>\n+        /// <param name=\"reader\">Reader.</param>\n+        internal AttributeNodeFilter(IBinaryRawReader reader)\n+        {\n+            IgniteArgumentCheck.NotNull(reader, \"reader\");\n+\n+            int count = reader.ReadInt();\n+\n+            Debug.Assert(count > 0);\n+\n+            Attributes = new Dictionary<string, object>(count);\n+\n+            while (count > 0)\n+            {\n+                string attrKey = reader.ReadString();\n+                object attrVal = reader.ReadObject<object>();\n+\n+                Debug.Assert(attrKey != null);\n+\n+                Attributes[attrKey] = attrVal;\n+\n+                count--;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Writes the instance to a writer.\n+        /// </summary>\n+        /// <param name=\"writer\">Writer.</param>\n+        internal void Write(IBinaryRawWriter writer)\n+        {\n+            writer.WriteInt(Attributes.Count);", "originalCommit": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDE0MA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482884140", "bodyText": "Please add a test for this case", "author": "ptupitsyn", "createdAt": "2020-09-03T10:46:21Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cache/Configuration/CacheConfiguration.cs", "diffHunk": "@@ -447,6 +450,26 @@ internal void Write(BinaryWriter writer)\n             AffinityFunctionSerializer.Write(writer, AffinityFunction);\n             ExpiryPolicySerializer.WritePolicyFactory(writer, ExpiryPolicyFactory);\n \n+            if (NodeFilter != null)\n+            {\n+                writer.WriteBoolean(true);\n+\n+                var attributeNodeFilter = NodeFilter as AttributeNodeFilter;\n+                if (attributeNodeFilter == null)\n+                {\n+                    throw new NotSupportedException(string.Format(", "originalCommit": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "61af126dae78e0aa6d84d607584ebb51d094bdd6", "url": "https://github.com/gridgain/gridgain/commit/61af126dae78e0aa6d84d607584ebb51d094bdd6", "message": "Fixes", "committedDate": "2020-09-20T17:18:21Z", "type": "commit"}, {"oid": "b5641b30e74c1fd1d6fd720038ac7e5ce9f983f8", "url": "https://github.com/gridgain/gridgain/commit/b5641b30e74c1fd1d6fd720038ac7e5ce9f983f8", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-28800", "committedDate": "2020-09-20T17:34:40Z", "type": "commit"}, {"oid": "42c93b5bc5f79e74cf30e7e8e91e15ab8cbe2c83", "url": "https://github.com/gridgain/gridgain/commit/42c93b5bc5f79e74cf30e7e8e91e15ab8cbe2c83", "message": "TC fixes", "committedDate": "2020-09-23T22:43:40Z", "type": "commit"}, {"oid": "51c80cd9bd310089df30c707aa1c05df949c75d3", "url": "https://github.com/gridgain/gridgain/commit/51c80cd9bd310089df30c707aa1c05df949c75d3", "message": "Fix line separator", "committedDate": "2020-09-24T09:14:17Z", "type": "commit"}, {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "url": "https://github.com/gridgain/gridgain/commit/3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "message": "Fix tests", "committedDate": "2020-09-24T11:24:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDE3Mg==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500172", "bodyText": "The filter will evaluate to true if a node has all specified attributes with corresponding values", "author": "ptupitsyn", "createdAt": "2020-09-24T17:46:05Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to", "originalCommit": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDM3OA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500378", "bodyText": "/// <para />", "author": "ptupitsyn", "createdAt": "2020-09-24T17:46:29Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///", "originalCommit": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDQ0OQ==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500449", "bodyText": "/// <para />", "author": "ptupitsyn", "createdAt": "2020-09-24T17:46:36Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///", "originalCommit": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDczNg==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500736", "bodyText": "You can set node attributes using ...", "author": "ptupitsyn", "createdAt": "2020-09-24T17:47:05Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. ", "originalCommit": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMzE5OA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494503198", "bodyText": "Gets or sets the cluster node filter. Cache will be started only on nodes that match the filter.", "author": "ptupitsyn", "createdAt": "2020-09-24T17:51:16Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cache/Configuration/CacheConfiguration.cs", "diffHunk": "@@ -948,5 +971,12 @@ public string MemoryPolicyName\n         /// </summary>\n         [IgniteExperimental]\n         public PlatformCacheConfiguration PlatformCacheConfiguration { get; set; }\n+\n+        /// <summary>\n+        /// Cluster node filter.", "originalCommit": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNDA2MA==", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494504060", "bodyText": "attributeNodeFilter.Write(writer);", "author": "ptupitsyn", "createdAt": "2020-09-24T17:52:52Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cache/Configuration/CacheConfiguration.cs", "diffHunk": "@@ -447,6 +450,26 @@ internal void Write(BinaryWriter writer)\n             AffinityFunctionSerializer.Write(writer, AffinityFunction);\n             ExpiryPolicySerializer.WritePolicyFactory(writer, ExpiryPolicyFactory);\n \n+            if (NodeFilter != null)\n+            {\n+                writer.WriteBoolean(true);\n+\n+                var attributeNodeFilter = NodeFilter as AttributeNodeFilter;\n+                if (attributeNodeFilter == null)\n+                {\n+                    throw new NotSupportedException(string.Format(\n+                        \"Unsupported CacheConfiguration.NodeFilter: '{0}'. \" +\n+                        \"Only predefined implementations are supported: '{1}'\",\n+                        NodeFilter.GetType().Name, typeof(AttributeNodeFilter).Name));\n+                }\n+\n+                ((AttributeNodeFilter) NodeFilter).Write(writer);", "originalCommit": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c334080f5833d720d5ba74a6cfc85ef8e5cad79", "url": "https://github.com/gridgain/gridgain/commit/8c334080f5833d720d5ba74a6cfc85ef8e5cad79", "message": "Fix xml docs", "committedDate": "2020-10-07T16:38:10Z", "type": "commit"}, {"oid": "a420f635a2e258c2c01daa2fe0b962f3cd760b1b", "url": "https://github.com/gridgain/gridgain/commit/a420f635a2e258c2c01daa2fe0b962f3cd760b1b", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-28800", "committedDate": "2020-10-08T10:39:43Z", "type": "commit"}, {"oid": "e0e3cc07a2e99f5239047bac12e7df1e806cd96f", "url": "https://github.com/gridgain/gridgain/commit/e0e3cc07a2e99f5239047bac12e7df1e806cd96f", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-28800", "committedDate": "2020-10-08T20:37:19Z", "type": "commit"}]}