{"pr_number": 1591, "pr_title": "GG-31027: statistics store", "pr_createdAt": "2020-11-23T16:18:56Z", "pr_url": "https://github.com/gridgain/gridgain/pull/1591", "timeline": [{"oid": "c377675f4b2c1e0fe9c21750f3891a4b6ec3efc7", "url": "https://github.com/gridgain/gridgain/commit/c377675f4b2c1e0fe9c21750f3891a4b6ec3efc7", "message": "GG-31027: Statistics storage implementation", "committedDate": "2020-11-23T13:55:33Z", "type": "commit"}, {"oid": "fdd5a74c4ee6c1509a5f2115fef9af91801580ce", "url": "https://github.com/gridgain/gridgain/commit/fdd5a74c4ee6c1509a5f2115fef9af91801580ce", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-31027", "committedDate": "2020-11-23T16:17:37Z", "type": "commit"}, {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f", "url": "https://github.com/gridgain/gridgain/commit/652ab10b366070d91d2396b14dfc2cfad786f99f", "message": "GG-31027: minor autotests fixes", "committedDate": "2020-11-24T10:56:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMzU5Mg==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530323592", "bodyText": "why we are collecting them then?", "author": "korlov42", "createdAt": "2020-11-25T12:04:40Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/ColumnStatisticsCollector.java", "diffHunk": "@@ -136,6 +137,13 @@ public ColumnStatistics finish() {\n \n         int averageSize = averageSize(size, total, nullsCnt);\n \n+        TypeInfo colTypeInfo = col.getType();\n+\n+        // Avoid serializing complex types.\n+        if (colTypeInfo == TypeInfo.TYPE_ARRAY || colTypeInfo == TypeInfo.TYPE_ENUM_UNDEFINED", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2MzEzOA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530363138", "bodyText": "We still can use some its statistics, null counter, for example.", "author": "Berkof", "createdAt": "2020-11-25T13:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMzU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4Njg2NQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530386865", "bodyText": "I mean why we are still collecting part with min|max? It takes time to compare these values, but at the end we just discard work. May be we need to skip collecting min|max at all for those types", "author": "korlov42", "createdAt": "2020-11-25T13:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMzU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3MjA0Ng==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532572046", "bodyText": "Got it. Fixed.", "author": "Berkof", "createdAt": "2020-11-30T12:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMzU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyNDQ1OQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530324459", "bodyText": "missed in javadoc", "author": "korlov42", "createdAt": "2020-11-25T12:06:14Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyNTQyOQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530325429", "bodyText": "The log param got renamed", "author": "korlov42", "createdAt": "2020-11-25T12:08:04Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzMDY0NQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530330645", "bodyText": "missed space", "author": "korlov42", "createdAt": "2020-11-25T12:17:37Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n             IgniteStatisticsManagerImpl statisticsManager,\n-            IgniteLogger log) {\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n         if (storeData) {\n             // Persistence store\n-            partsStats = (persistence) ? null : new ConcurrentHashMap<>();\n+            if (persistence) {\n+                store = new IgniteStatisticsStoreImpl(subscriptionProcessor, database,this, logSupplier);", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzMTY1MA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530331650", "bodyText": "whether the store should be persistent or not could be defined by presence of database", "author": "korlov42", "createdAt": "2020-11-25T12:19:31Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n             IgniteStatisticsManagerImpl statisticsManager,\n-            IgniteLogger log) {\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n         if (storeData) {\n             // Persistence store\n-            partsStats = (persistence) ? null : new ConcurrentHashMap<>();\n+            if (persistence) {", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyNDE2OQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530424169", "bodyText": "Is is possible to split implementation for 2 particular cases: persistent and non-persistent?", "author": "AMashenkov", "createdAt": "2020-11-25T14:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzMTY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3MzA0NQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532573045", "bodyText": "Done", "author": "Berkof", "createdAt": "2020-11-30T12:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzMTY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzNjk1Nw==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530336957", "bodyText": "it's just a common store interface. And this should has two implementation: one is in-memory and another is persistent", "author": "korlov42", "createdAt": "2020-11-25T12:28:41Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsStore.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Statistics persistence store interface.", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3MzE0MQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532573141", "bodyText": "Done", "author": "Berkof", "createdAt": "2020-11-30T12:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzNjk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NjY5OA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533196698", "bodyText": "please remove persistence from the description", "author": "korlov42", "createdAt": "2020-12-01T09:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzNjk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3MjU2Ng==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533272566", "bodyText": "Fixed", "author": "Berkof", "createdAt": "2020-12-01T10:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzNjk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzODY0MA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530338640", "bodyText": "let's get rid of all these local collections in favor of a in-memory store implementation", "author": "korlov42", "createdAt": "2020-11-25T12:31:30Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n             IgniteStatisticsManagerImpl statisticsManager,\n-            IgniteLogger log) {\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n         if (storeData) {\n             // Persistence store\n-            partsStats = (persistence) ? null : new ConcurrentHashMap<>();\n+            if (persistence) {\n+                store = new IgniteStatisticsStoreImpl(subscriptionProcessor, database,this, logSupplier);\n+                partsStats = null;\n+            }\n+            else {\n+                store = null;\n+                partsStats = new ConcurrentHashMap<>();\n+            }\n             localStats = new ConcurrentHashMap<>();\n         }\n         else {\n             // Cache only global statistics, no store\n+            store = null;\n             partsStats = null;", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3NDIyOA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532574228", "bodyText": "Store won't keep local and global lvl of statistics. We can implement it there, but in my opinion store should be just easy wrapper around metastorage or in memory data structure, while repository should care some logic with updating and call manager to aggregate statistics on startup.", "author": "Berkof", "createdAt": "2020-11-30T12:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzODY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIxNjQ2OA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533216468", "bodyText": "Now I see. Yes, agree with you", "author": "korlov42", "createdAt": "2020-12-01T09:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzODY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTA5OQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530421099", "bodyText": "I think passing \"null\" to vararg is a misusage.\nMethod calls below are equal, in the first 2 cases a implicit empty array will be created.\nmethod((Object)null)\nmethod()\nmethod(new Object[0])", "author": "AMashenkov", "createdAt": "2020-11-25T14:38:19Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsManagerImpl.java", "diffHunk": "@@ -103,7 +105,7 @@ public IgniteStatisticsRepository statisticsRepository() {\n      * @param colNames Column names.\n      * @return Column with specified names.\n      */\n-    private Column[] filterColumns(Column[] columns, String... colNames) {\n+    private Column[] filterColumns(Column[] columns, @Nullable String... colNames) {", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3NDk0MA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532574940", "bodyText": "Yes, misused of Nullable annotation.", "author": "Berkof", "createdAt": "2020-11-30T12:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyNjEwNw==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530426107", "bodyText": "static long serialVersionUid  is mandatory.", "author": "AMashenkov", "createdAt": "2020-11-25T14:45:15Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/StatsKey.java", "diffHunk": "@@ -15,12 +15,13 @@\n  */\n package org.apache.ignite.internal.processors.query.stat;\n \n+import java.io.Serializable;\n import java.util.Objects;\n \n /**\n  * Statistics key.\n  */\n-public class StatsKey {\n+public class StatsKey implements Serializable {\n     /** Object schema. */", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3NTQyMA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532575420", "bodyText": "Done", "author": "Berkof", "createdAt": "2020-11-30T12:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyNjEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0OTQxNg==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530449416", "bodyText": "this is not related to the current PR", "author": "korlov42", "createdAt": "2020-11-25T15:16:48Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsPropagationMessage.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.GridDirectCollection;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageCollectionItemType;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Message to send statistics.\n+ */\n+public class StatsPropagationMessage implements Message {", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3NzM5Nw==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532577397", "bodyText": "Removed", "author": "Berkof", "createdAt": "2020-11-30T12:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0OTQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1OTgxNw==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530459817", "bodyText": "is there a reason to expose all these fields?", "author": "korlov42", "createdAt": "2020-11-25T15:31:08Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsObjectData.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.processors.query.stat.StatsKey;\n+import org.apache.ignite.internal.processors.query.stat.StatsType;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/**\n+ * Statistics for some object (index or table) in database,\n+ */\n+public class StatsObjectData implements Message {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** */\n+    public static final short TYPE_CODE = 178;\n+\n+    /** Statistics key. */\n+    public StatsKey key;", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU3OTQyMw==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532579423", "bodyText": "no, I made it private.", "author": "Berkof", "createdAt": "2020-11-30T13:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1OTgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MjU1MQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530542551", "bodyText": "the same about Message", "author": "korlov42", "createdAt": "2020-11-25T17:35:02Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsObjectData.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.processors.query.stat.StatsKey;\n+import org.apache.ignite.internal.processors.query.stat.StatsType;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/**\n+ * Statistics for some object (index or table) in database,\n+ */\n+public class StatsObjectData implements Message {", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzOTIwMQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530839201", "bodyText": "think, for now it could be just Serializable, not Message", "author": "korlov42", "createdAt": "2020-11-26T08:10:09Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsColumnData.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.processors.query.h2.twostep.msg.GridH2ValueMessage;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+\n+public class StatsColumnData implements Message {", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MTMwOQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532581309", "bodyText": "Done", "author": "Berkof", "createdAt": "2020-11-30T13:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzOTIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5OTc2NA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530899764", "bodyText": "Could it be private?", "author": "korlov42", "createdAt": "2020-11-26T09:47:06Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsStoreImpl.java", "diffHunk": "@@ -0,0 +1,468 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.MetastorageLifecycleListener;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadOnlyMetastorage;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadWriteMetastorage;\n+import org.apache.ignite.internal.processors.query.stat.messages.StatsObjectData;\n+import org.apache.ignite.internal.processors.subscription.GridInternalSubscriptionProcessor;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsStoreImpl implements IgniteStatisticsStore, MetastorageLifecycleListener {\n+    // In local meta store it store partitions statistics by path: stats.<SCHEMA>.<OBJECT>.<partId>\n+    private static final String META_SEPARATOR = \".\";\n+\n+    /** Local metastore statistics prefix. */\n+    private static final String META_STAT_PREFIX = \"stats\";\n+\n+    /** Logger. */\n+    private IgniteLogger log;\n+\n+    /** Database shared manager. */\n+    IgniteCacheDatabaseSharedManager database;", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MjEzMQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r532582131", "bodyText": "Sure", "author": "Berkof", "createdAt": "2020-11-30T13:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5OTc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMjQyNQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530902425", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Integer.valueOf(partIdStr);\n          \n          \n            \n                    return Integer.parseInt(partIdStr);", "author": "korlov42", "createdAt": "2020-11-26T09:51:13Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsStoreImpl.java", "diffHunk": "@@ -0,0 +1,468 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.MetastorageLifecycleListener;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadOnlyMetastorage;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadWriteMetastorage;\n+import org.apache.ignite.internal.processors.query.stat.messages.StatsObjectData;\n+import org.apache.ignite.internal.processors.subscription.GridInternalSubscriptionProcessor;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsStoreImpl implements IgniteStatisticsStore, MetastorageLifecycleListener {\n+    // In local meta store it store partitions statistics by path: stats.<SCHEMA>.<OBJECT>.<partId>\n+    private static final String META_SEPARATOR = \".\";\n+\n+    /** Local metastore statistics prefix. */\n+    private static final String META_STAT_PREFIX = \"stats\";\n+\n+    /** Logger. */\n+    private IgniteLogger log;\n+\n+    /** Database shared manager. */\n+    IgniteCacheDatabaseSharedManager database;\n+\n+    /** Statistics repository. */\n+    private IgniteStatisticsRepository repository;\n+\n+    /** Metastorage. */\n+    private volatile ReadWriteMetastorage metastore;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param subscriptionProcessor Grid subscription processor to track metastorage availability.\n+     * @param database Database shared manager to lock db while reading/writing metastorage.\n+     * @param repository Repository to fulfill on metastore available.\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsStoreImpl(\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n+            IgniteCacheDatabaseSharedManager database,\n+            IgniteStatisticsRepository repository,\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n+        this.database = database;\n+        this.repository = repository;\n+        subscriptionProcessor.registerMetastorageListener(this);\n+\n+        this.log = logSupplier.apply(IgniteStatisticsStoreImpl.class);\n+    }\n+\n+    /**\n+     * Get partition id from storage key.\n+     *\n+     * @param metaKey Meta key to get partition id from.\n+     * @return Partition id.\n+     */\n+    private int getPartitionId(String metaKey) {\n+        int partIdx = metaKey.lastIndexOf(META_SEPARATOR);\n+        String partIdStr = metaKey.substring(partIdx + 1);\n+\n+        return Integer.valueOf(partIdStr);", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNzU1NQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530917555", "bodyText": "space is missing", "author": "korlov42", "createdAt": "2020-11-26T10:13:53Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/stat/StatisticsAbstractTest.java", "diffHunk": "@@ -271,4 +283,29 @@ protected void updateStatistics(String table, String... tables) {\n             throw new IgniteException(ex);\n         }\n     }\n+\n+    /**\n+     * Get object statistics.\n+     *\n+     * @param rowsCnt Rows count.\n+     * @return Object statistics.\n+     */\n+    protected ObjectStatisticsImpl getStatistics(long rowsCnt) {\n+        ColumnStatistics columnStatistics = new ColumnStatistics(null, null,100,0, 100,", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNzgwNA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530917804", "bodyText": "space is missing", "author": "korlov42", "createdAt": "2020-11-26T10:14:14Z", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/stat/StatisticsAbstractTest.java", "diffHunk": "@@ -271,4 +283,29 @@ protected void updateStatistics(String table, String... tables) {\n             throw new IgniteException(ex);\n         }\n     }\n+\n+    /**\n+     * Get object statistics.\n+     *\n+     * @param rowsCnt Rows count.\n+     * @return Object statistics.\n+     */\n+    protected ObjectStatisticsImpl getStatistics(long rowsCnt) {\n+        ColumnStatistics columnStatistics = new ColumnStatistics(null, null,100,0, 100,\n+                0, new byte[0]);\n+        return new ObjectStatisticsImpl(rowsCnt, Collections.singletonMap(\"col1\", columnStatistics));\n+    }\n+\n+    /**\n+     * Get object partition statistics.\n+     *\n+     * @param partId Partition id.\n+     * @return Object partition statistics with specified partition id.\n+     */\n+    protected ObjectPartitionStatisticsImpl getPartitionStatistics(int partId) {\n+        ColumnStatistics columnStatistics = new ColumnStatistics(null, null,100,0, 100,", "originalCommit": "652ab10b366070d91d2396b14dfc2cfad786f99f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "45181f017b009a524e2959fa27ee0dfbfff752a0", "url": "https://github.com/gridgain/gridgain/commit/45181f017b009a524e2959fa27ee0dfbfff752a0", "message": "GG-31027: add more test, fix minor review notices.", "committedDate": "2020-11-30T13:13:56Z", "type": "commit"}, {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "url": "https://github.com/gridgain/gridgain/commit/aa95d5d267f92975dfef1dce0232d22e72212dfd", "message": "GG-31027: checkstyle fixes", "committedDate": "2020-11-30T13:21:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MDI4NA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533150284", "bodyText": "it's better to make it final, because it should not be changed", "author": "korlov42", "createdAt": "2020-12-01T08:25:52Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/ColumnStatisticsCollector.java", "diffHunk": "@@ -43,6 +44,9 @@\n     /** Maximum value. */\n     private Value max = null;\n \n+    /** Is column has complex type. */\n+    private boolean complexType;", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MzY4Mg==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533153682", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    partsStats.put(key,buildStatisticsMap(key, statistics));\n          \n          \n            \n                    partsStats.put(key, buildStatisticsMap(key, statistics));", "author": "korlov42", "createdAt": "2020-12-01T08:31:40Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1NDYzNw==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533154637", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        StatsKey key,\n          \n          \n            \n                        Collection<ObjectPartitionStatisticsImpl> statistics\n          \n          \n            \n                    StatsKey key,\n          \n          \n            \n                    Collection<ObjectPartitionStatisticsImpl> statistics", "author": "korlov42", "createdAt": "2020-12-01T08:33:21Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1NjAwOQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533156009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            v = new HashMap<>();\n          \n          \n            \n                        v.put(statistics.partId(), statistics);\n          \n          \n            \n                            v = new HashMap<>();\n          \n          \n            \n                            \n          \n          \n            \n                        v.put(statistics.partId(), statistics);", "author": "korlov42", "createdAt": "2020-12-01T08:35:39Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MDM1NA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533160354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return objPartsStat.get(partId);\n          \n          \n            \n                        return objPartsStat.get(partId);", "author": "korlov42", "createdAt": "2020-12-01T08:42:54Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MDY1MA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533160650", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    partsStats.computeIfPresent(key, (k,v) -> {\n          \n          \n            \n                        v.remove(partId);\n          \n          \n            \n                        return v;\n          \n          \n            \n                    partsStats.computeIfPresent(key, (k, v) -> {\n          \n          \n            \n                        v.remove(partId);\n          \n          \n            \n                        \n          \n          \n            \n                        return v;", "author": "korlov42", "createdAt": "2020-12-01T08:43:25Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionStatistics(StatsKey key, int partId) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            v.remove(partId);\n+            return v;", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MDgwNA==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533160804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    partsStats.computeIfPresent(key, (k,v) -> {\n          \n          \n            \n                        for (Integer partId : partIds)\n          \n          \n            \n                            v.remove(partId);\n          \n          \n            \n                        return v;\n          \n          \n            \n                    partsStats.computeIfPresent(key, (k, v) -> {\n          \n          \n            \n                        for (Integer partId : partIds)\n          \n          \n            \n                            v.remove(partId);\n          \n          \n            \n                            \n          \n          \n            \n                        return v;", "author": "korlov42", "createdAt": "2020-12-01T08:43:40Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionStatistics(StatsKey key, int partId) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            v.remove(partId);\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key, Collection<Integer> partIds) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            for (Integer partId : partIds)\n+                v.remove(partId);\n+            return v;", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4OTA4Nw==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533189087", "bodyText": "Returning a projection of the original map could lead to an error since it is possible to clear the collection outside the store", "author": "korlov42", "createdAt": "2020-12-01T09:08:44Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDEzMQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533194131", "bodyText": "it should be CHM since it's possible for two different threads to read and modify statistics by the same object concurrently", "author": "korlov42", "createdAt": "2020-12-01T09:12:53Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMjUxMQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533332511", "bodyText": "Fixed", "author": "Berkof", "createdAt": "2020-12-01T11:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDY2OQ==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533194669", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<Integer, ObjectPartitionStatisticsImpl> buildStatisticsMap(\n          \n          \n            \n                        StatsKey key,\n          \n          \n            \n                        Collection<ObjectPartitionStatisticsImpl> statistics\n          \n          \n            \n                ) {\n          \n          \n            \n                private Map<Integer, ObjectPartitionStatisticsImpl> buildStatisticsMap(\n          \n          \n            \n                    StatsKey key,\n          \n          \n            \n                    Collection<ObjectPartitionStatisticsImpl> statistics\n          \n          \n            \n                ) {", "author": "korlov42", "createdAt": "2020-12-01T09:13:21Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionStatistics(StatsKey key, int partId) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            v.remove(partId);\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key, Collection<Integer> partIds) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            for (Integer partId : partIds)\n+                v.remove(partId);\n+            return v;\n+        });\n+    }\n+\n+    /**\n+     * Convert collection of partition level statistics into map(partId->partStatistics).\n+     *\n+     * @param key Object key.\n+     * @param statistics Collection of tables partition statistics.\n+     * @return Partition id to statistics map.\n+     */\n+    private Map<Integer, ObjectPartitionStatisticsImpl> buildStatisticsMap(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIyMTUyNg==", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533221526", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    statsRepos = new IgniteStatisticsRepositoryImpl(storeData, db, ctx.internalSubscriptionProcessor(),this,\n          \n          \n            \n                    statsRepos = new IgniteStatisticsRepositoryImpl(storeData, db, ctx.internalSubscriptionProcessor(), this,", "author": "korlov42", "createdAt": "2020-12-01T09:31:56Z", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsManagerImpl.java", "diffHunk": "@@ -71,9 +72,10 @@ public IgniteStatisticsManagerImpl(GridKernalContext ctx, SchemaManager schemaMg\n         log = ctx.log(IgniteStatisticsManagerImpl.class);\n \n         boolean storeData = !(ctx.config().isClientMode() || ctx.isDaemon());\n-        boolean persistence = GridCacheUtils.isPersistenceEnabled(ctx.config());\n-        IgniteLogger repositoryLogger = ctx.log(IgniteStatisticsRepositoryImpl.class);\n-        statsRepos = new IgniteStatisticsRepositoryImpl(storeData, persistence, this, repositoryLogger);\n+        IgniteCacheDatabaseSharedManager db = (GridCacheUtils.isPersistenceEnabled(ctx.config())) ?\n+                ctx.cache().context().database() : null;\n+        statsRepos = new IgniteStatisticsRepositoryImpl(storeData, db, ctx.internalSubscriptionProcessor(),this,", "originalCommit": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2f786bbe782af37be10c1954244c19710827be06", "url": "https://github.com/gridgain/gridgain/commit/2f786bbe782af37be10c1954244c19710827be06", "message": "GG-31027: fix concurrent access issue in statistics in memory store; style fixes.", "committedDate": "2020-12-01T11:21:34Z", "type": "commit"}, {"oid": "351278fa680ea673c8aeabe77c54396b795c855a", "url": "https://github.com/gridgain/gridgain/commit/351278fa680ea673c8aeabe77c54396b795c855a", "message": "GG-31027: codestyle fixes", "committedDate": "2020-12-01T19:31:03Z", "type": "commit"}, {"oid": "24b139f8b94099cd13c104753dc7142e93be1f9d", "url": "https://github.com/gridgain/gridgain/commit/24b139f8b94099cd13c104753dc7142e93be1f9d", "message": "GG-31027: remove abstract test class from suite", "committedDate": "2020-12-03T11:20:03Z", "type": "commit"}]}