{"pr_number": 4352, "pr_title": "feat(tbd-9855): adapt Timestamp or Date according to schema", "pr_createdAt": "2020-01-20T14:23:26Z", "pr_url": "https://github.com/Talend/tdi-studio-se/pull/4352", "timeline": [{"oid": "99a88b2ec876d1fe129d2b5cf206d6cf88cee727", "url": "https://github.com/Talend/tdi-studio-se/commit/99a88b2ec876d1fe129d2b5cf206d6cf88cee727", "message": "added new migration task", "committedDate": "2020-01-20T10:04:57Z", "type": "commit"}, {"oid": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "url": "https://github.com/Talend/tdi-studio-se/commit/18f9bdff6eb1091a96934902464b6830cb8cf2f4", "message": "migration task", "committedDate": "2020-01-20T14:21:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjQyOA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368592428", "bodyText": "variable name should start from lower case character", "author": "amedvedenko", "createdAt": "2020-01-20T15:02:11Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public ExecutionResult execute(Item item) {\n+        ProcessType processType = getProcessType(item);\n+        if (processType == null) {\n+            return ExecutionResult.NOTHING_TO_DO;\n+        }\n+\n+        List<String> impactedComponents =\n+                Arrays.asList(\"tFileOutputParquet\", \"tHiveOutput\", \"tRedshiftOutput\", \"tSqlRow\", \"tMatchPairing\",\n+                        \"tMatchPredict\", \"tMatchModel\", \"tDataShuffling\");\n+\n+        IComponentConversion AdaptSchemaForDateType = new AdaptSchemaForDateType();", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDc2Nw==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368620767", "bodyText": "sorry about that !", "author": "AlixMetivier", "createdAt": "2020-01-20T15:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjY5Mw==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368592693", "bodyText": "I think it should be class-level constant (Arrays.asList returns unmodifiable list)", "author": "amedvedenko", "createdAt": "2020-01-20T15:02:47Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public ExecutionResult execute(Item item) {\n+        ProcessType processType = getProcessType(item);\n+        if (processType == null) {\n+            return ExecutionResult.NOTHING_TO_DO;\n+        }\n+\n+        List<String> impactedComponents =\n+                Arrays.asList(\"tFileOutputParquet\", \"tHiveOutput\", \"tRedshiftOutput\", \"tSqlRow\", \"tMatchPairing\",", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMTA1Ng==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368621056", "bodyText": "since this is a fixed components list i'm ok with it being unmodifiable, don't you think ?", "author": "AlixMetivier", "createdAt": "2020-01-20T15:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MTA4OA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r369641088", "bodyText": "Andrii remark is only to put this list as a class level constant. Agree with that.\nBeing unmodifiable is ok.", "author": "lbourgeois", "createdAt": "2020-01-22T15:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1MDAyMA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r369650020", "bodyText": "yes, I mean that it should be moven to class-level.\nUnder list is modifiable - I mean that it's safe to put it to class level because list is unmodifiable and all elements are immutable so it can't be changed and it's safe to extract it to the constant", "author": "amedvedenko", "createdAt": "2020-01-22T16:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MjY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MzMxNQ==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368593315", "bodyText": "return Arrays.asList(ERepositoryObjectType.PROCESS_MR, ERepositoryObjectType.PROCESS_STORM)\nif it needs to be modifiable - add new ArrayList<>(...)", "author": "amedvedenko", "createdAt": "2020-01-20T15:04:02Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMTEzNA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368621134", "bodyText": "agreed", "author": "AlixMetivier", "createdAt": "2020-01-20T15:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MzMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5Mzc5NA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368593794", "bodyText": "IMO exception should be logged as well, in order to not lose information", "author": "amedvedenko", "createdAt": "2020-01-20T15:05:03Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public ExecutionResult execute(Item item) {\n+        ProcessType processType = getProcessType(item);\n+        if (processType == null) {\n+            return ExecutionResult.NOTHING_TO_DO;\n+        }\n+\n+        List<String> impactedComponents =\n+                Arrays.asList(\"tFileOutputParquet\", \"tHiveOutput\", \"tRedshiftOutput\", \"tSqlRow\", \"tMatchPairing\",\n+                        \"tMatchPredict\", \"tMatchModel\", \"tDataShuffling\");\n+\n+        IComponentConversion AdaptSchemaForDateType = new AdaptSchemaForDateType();\n+\n+        try {\n+            for (String componentName : impactedComponents) {\n+                ModifyComponentsAction.searchAndModify(item, processType, new NameComponentFilter(componentName),\n+                        Arrays.<IComponentConversion> asList(AdaptSchemaForDateType));\n+            }\n+            return ExecutionResult.SUCCESS_NO_ALERT;\n+        } catch (Exception e) {\n+            return ExecutionResult.FAILURE;", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxOTE2Mg==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368619162", "bodyText": "I think this is done in TUP code, this would not be logged anywhere but inside the eclipse console since it runs on job import ? Thats why i think we can leave it as it is ? What do you think", "author": "AlixMetivier", "createdAt": "2020-01-20T15:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5Mzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNzMwNA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r369637304", "bodyText": "I don't think e.getMessage will be logged anywhere else. Do we have similar situation in existing migration tasks ?", "author": "lbourgeois", "createdAt": "2020-01-22T15:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5Mzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1NTI0Mw==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r369655243", "bodyText": "AFAIK the error is never logged and all migration task returns the failure", "author": "AlixMetivier", "createdAt": "2020-01-22T16:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5Mzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjU5MA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r369662590", "bodyText": "tdi-studio-se/main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/StripslachesOnQuotesForTCollectAndCheck.java\n    \n    \n         Line 57\n      in\n      e031dfc\n    \n    \n    \n    \n\n        \n          \n           ExceptionHandler.process(e); \n        \n    \n  \n\n and \n  \n    \n      tdi-studio-se/main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/SetSparkDataframeAlphabeticalSortOrder.java\n    \n    \n         Line 78\n      in\n      e031dfc\n    \n    \n    \n    \n\n        \n          \n           ExceptionHandler.process(e); \n        \n    \n  \n\n\nThere is exception handler class that, as I understand, log exception and shows the popup with the error (in case of priority is FATAL). We can ask DI team.\nAlso I see that some other migration tasks doesn't contain it so it isn't a concern/blocker of the PR.", "author": "amedvedenko", "createdAt": "2020-01-22T16:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5Mzc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NDYxNQ==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368594615", "bodyText": "java.util.Collections.singletonList(obj)", "author": "amedvedenko", "createdAt": "2020-01-20T15:06:43Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public ExecutionResult execute(Item item) {\n+        ProcessType processType = getProcessType(item);\n+        if (processType == null) {\n+            return ExecutionResult.NOTHING_TO_DO;\n+        }\n+\n+        List<String> impactedComponents =\n+                Arrays.asList(\"tFileOutputParquet\", \"tHiveOutput\", \"tRedshiftOutput\", \"tSqlRow\", \"tMatchPairing\",\n+                        \"tMatchPredict\", \"tMatchModel\", \"tDataShuffling\");\n+\n+        IComponentConversion AdaptSchemaForDateType = new AdaptSchemaForDateType();\n+\n+        try {\n+            for (String componentName : impactedComponents) {\n+                ModifyComponentsAction.searchAndModify(item, processType, new NameComponentFilter(componentName),\n+                        Arrays.<IComponentConversion> asList(AdaptSchemaForDateType));", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDcwNg==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368620706", "bodyText": "agreed", "author": "AlixMetivier", "createdAt": "2020-01-20T15:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NDYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NTM3Mw==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368595373", "bodyText": "constant name must be in UPPER_CASE. Also, could you please rename it to more readable version? It isn't clear what does this name mean.", "author": "amedvedenko", "createdAt": "2020-01-20T15:08:16Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public ExecutionResult execute(Item item) {\n+        ProcessType processType = getProcessType(item);\n+        if (processType == null) {\n+            return ExecutionResult.NOTHING_TO_DO;\n+        }\n+\n+        List<String> impactedComponents =\n+                Arrays.asList(\"tFileOutputParquet\", \"tHiveOutput\", \"tRedshiftOutput\", \"tSqlRow\", \"tMatchPairing\",\n+                        \"tMatchPredict\", \"tMatchModel\", \"tDataShuffling\");\n+\n+        IComponentConversion AdaptSchemaForDateType = new AdaptSchemaForDateType();\n+\n+        try {\n+            for (String componentName : impactedComponents) {\n+                ModifyComponentsAction.searchAndModify(item, processType, new NameComponentFilter(componentName),\n+                        Arrays.<IComponentConversion> asList(AdaptSchemaForDateType));\n+            }\n+            return ExecutionResult.SUCCESS_NO_ALERT;\n+        } catch (Exception e) {\n+            return ExecutionResult.FAILURE;\n+        }\n+    }\n+\n+    private class AdaptSchemaForDateType implements IComponentConversion {\n+\n+        private String name = \"DATE_TO_TIMESTAMP_DF_TYPE_SUBSTITUTION\"; //$NON-NLS-1$", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NTYzOA==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368595638", "bodyText": "It isn't type safe. Are you sure that all objects are MetadataType?", "author": "amedvedenko", "createdAt": "2020-01-20T15:08:53Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public ExecutionResult execute(Item item) {\n+        ProcessType processType = getProcessType(item);\n+        if (processType == null) {\n+            return ExecutionResult.NOTHING_TO_DO;\n+        }\n+\n+        List<String> impactedComponents =\n+                Arrays.asList(\"tFileOutputParquet\", \"tHiveOutput\", \"tRedshiftOutput\", \"tSqlRow\", \"tMatchPairing\",\n+                        \"tMatchPredict\", \"tMatchModel\", \"tDataShuffling\");\n+\n+        IComponentConversion AdaptSchemaForDateType = new AdaptSchemaForDateType();\n+\n+        try {\n+            for (String componentName : impactedComponents) {\n+                ModifyComponentsAction.searchAndModify(item, processType, new NameComponentFilter(componentName),\n+                        Arrays.<IComponentConversion> asList(AdaptSchemaForDateType));\n+            }\n+            return ExecutionResult.SUCCESS_NO_ALERT;\n+        } catch (Exception e) {\n+            return ExecutionResult.FAILURE;\n+        }\n+    }\n+\n+    private class AdaptSchemaForDateType implements IComponentConversion {\n+\n+        private String name = \"DATE_TO_TIMESTAMP_DF_TYPE_SUBSTITUTION\"; //$NON-NLS-1$\n+\n+        public void transform(NodeType node) {\n+            \n+            for(Object om : node.getMetadata()){\n+                MetadataType metadata = (MetadataType) om;", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDA3MQ==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368620071", "bodyText": "\"Returns the value of the 'Metadata' containment reference list.The list contents are of type org.talend.designer.core.model.utils.emf.talendfile.MetadataType. \", description of getMetadata() :)", "author": "AlixMetivier", "createdAt": "2020-01-20T15:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NTYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NjYzNQ==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368596635", "bodyText": "Btw, can be re-written to stream usages :)", "author": "amedvedenko", "createdAt": "2020-01-20T15:11:07Z", "path": "main/plugins/org.talend.repository/src/main/java/org/talend/repository/model/migration/spark/UpdateDatesPatternAccordingToDeletedTimestampOption.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// ============================================================================\n+//\n+// Copyright (C) 2006-2019 Talend Inc. - www.talend.com\n+//\n+// This source code is available under agreement available at\n+// %InstallDIR%\\features\\org.talend.rcp.branding.%PRODUCTNAME%\\%PRODUCTNAME%license.txt\n+//\n+// You should have received a copy of the agreement\n+// along with this program; if not, write to Talend SA\n+// 9 rue Pages 92150 Suresnes, France\n+//\n+// ============================================================================\n+package org.talend.repository.model.migration.spark;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.talend.core.model.components.ComponentUtilities;\n+import org.talend.core.model.components.ModifyComponentsAction;\n+import org.talend.core.model.components.conversions.IComponentConversion;\n+import org.talend.core.model.components.filters.NameComponentFilter;\n+import org.talend.core.model.migration.AbstractJobMigrationTask;\n+import org.talend.core.model.properties.Item;\n+import org.talend.core.model.repository.ERepositoryObjectType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ColumnType;\n+import org.talend.designer.core.model.utils.emf.talendfile.MetadataType;\n+import org.talend.designer.core.model.utils.emf.talendfile.NodeType;\n+import org.talend.designer.core.model.utils.emf.talendfile.ProcessType;\n+\n+/**\n+ *\n+ * @author ametivier\n+ *\n+ * Since we removed the timestamp option from certain components, we need to update the pattern in the schema\n+ * according to the value of the checkbox\n+ *\n+ */\n+public class UpdateDatesPatternAccordingToDeletedTimestampOption extends AbstractJobMigrationTask {\n+\n+    @Override\n+    public Date getOrder() {\n+        GregorianCalendar gc = new GregorianCalendar(2020, 01, 19, 10, 0, 0);\n+        return gc.getTime();\n+    }\n+    \n+    @Override\n+    public List<ERepositoryObjectType> getTypes() {\n+        List<ERepositoryObjectType> toReturn = new ArrayList<ERepositoryObjectType>();\n+        toReturn.add(ERepositoryObjectType.PROCESS_MR);\n+        toReturn.add(ERepositoryObjectType.PROCESS_STORM);\n+        return toReturn;\n+    }\n+\n+    @Override\n+    public ExecutionResult execute(Item item) {\n+        ProcessType processType = getProcessType(item);\n+        if (processType == null) {\n+            return ExecutionResult.NOTHING_TO_DO;\n+        }\n+\n+        List<String> impactedComponents =\n+                Arrays.asList(\"tFileOutputParquet\", \"tHiveOutput\", \"tRedshiftOutput\", \"tSqlRow\", \"tMatchPairing\",\n+                        \"tMatchPredict\", \"tMatchModel\", \"tDataShuffling\");\n+\n+        IComponentConversion AdaptSchemaForDateType = new AdaptSchemaForDateType();\n+\n+        try {\n+            for (String componentName : impactedComponents) {\n+                ModifyComponentsAction.searchAndModify(item, processType, new NameComponentFilter(componentName),\n+                        Arrays.<IComponentConversion> asList(AdaptSchemaForDateType));\n+            }\n+            return ExecutionResult.SUCCESS_NO_ALERT;\n+        } catch (Exception e) {\n+            return ExecutionResult.FAILURE;\n+        }\n+    }\n+\n+    private class AdaptSchemaForDateType implements IComponentConversion {\n+\n+        private String name = \"DATE_TO_TIMESTAMP_DF_TYPE_SUBSTITUTION\"; //$NON-NLS-1$\n+\n+        public void transform(NodeType node) {\n+            \n+            for(Object om : node.getMetadata()){\n+                MetadataType metadata = (MetadataType) om;\n+                for(Object oc : metadata.getColumn()){\n+                    ColumnType column = (ColumnType) oc;\n+                    if(column.getType().equals(\"id_Date\")) {\n+                        if(\"true\".equals(ComponentUtilities.getNodePropertyValue(node, name))){\n+                            column.setPattern(\"\\\"yyyy-MM-dd HH:mm:ss\\\"\");\n+                        } else if (\"false\".equals(ComponentUtilities.getNodePropertyValue(node, name))) {\n+                            column.setPattern(\"\\\"dd-MM-yyyy\\\"\");\n+                        }\n+                    }\n+                }\n+            }\n+        }", "originalCommit": "18f9bdff6eb1091a96934902464b6830cb8cf2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMDYyNw==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r368620627", "bodyText": "what do you mean stream usages ? I'm not dealing with lists here ?", "author": "AlixMetivier", "createdAt": "2020-01-20T15:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NjYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MTc4MQ==", "url": "https://github.com/Talend/tdi-studio-se/pull/4352#discussion_r369671781", "bodyText": "I mean Stream API, but it's also good - it's enough readable, resolving", "author": "amedvedenko", "createdAt": "2020-01-22T16:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NjYzNQ=="}], "type": "inlineReview"}, {"oid": "e031dfcb96352681822625a22732b0faa88fec8f", "url": "https://github.com/Talend/tdi-studio-se/commit/e031dfcb96352681822625a22732b0faa88fec8f", "message": "changes according to comments", "committedDate": "2020-01-20T15:59:27Z", "type": "commit"}, {"oid": "bb09ec7359d2893f052a57f82c886aad599c6795", "url": "https://github.com/Talend/tdi-studio-se/commit/bb09ec7359d2893f052a57f82c886aad599c6795", "message": "fix declaration", "committedDate": "2020-01-22T16:21:12Z", "type": "commit"}, {"oid": "2f2b96339ebbb06210368ed62ef42d8d979d49e4", "url": "https://github.com/Talend/tdi-studio-se/commit/2f2b96339ebbb06210368ed62ef42d8d979d49e4", "message": "fix declaration", "committedDate": "2020-01-22T16:25:36Z", "type": "commit"}, {"oid": "e45503ae9ac9f0643a29be53c58be5e6e4483b62", "url": "https://github.com/Talend/tdi-studio-se/commit/e45503ae9ac9f0643a29be53c58be5e6e4483b62", "message": "fix name", "committedDate": "2020-01-22T16:31:26Z", "type": "commit"}, {"oid": "d2458eb44c1a09d22888071dd2e5c56d1592bc3e", "url": "https://github.com/Talend/tdi-studio-se/commit/d2458eb44c1a09d22888071dd2e5c56d1592bc3e", "message": "added log", "committedDate": "2020-01-22T16:36:02Z", "type": "commit"}, {"oid": "883d996f25ef51965e859f901b5b39091a1ef51d", "url": "https://github.com/Talend/tdi-studio-se/commit/883d996f25ef51965e859f901b5b39091a1ef51d", "message": "typo", "committedDate": "2020-01-22T16:36:21Z", "type": "commit"}, {"oid": "0f75568575d02675624cb370e75be2497d915e1b", "url": "https://github.com/Talend/tdi-studio-se/commit/0f75568575d02675624cb370e75be2497d915e1b", "message": "typo", "committedDate": "2020-01-22T16:37:18Z", "type": "commit"}, {"oid": "699f6cf0816b736f455fd00bdc6141716dde4eda", "url": "https://github.com/Talend/tdi-studio-se/commit/699f6cf0816b736f455fd00bdc6141716dde4eda", "message": "Merge branch 'master' of https://github.com/Talend/tdi-studio-se into ametivier/fix/TBD-9855", "committedDate": "2020-01-30T15:54:58Z", "type": "commit"}, {"oid": "4726cbcee796aa0f9faf840d36e4d4544fb45624", "url": "https://github.com/Talend/tdi-studio-se/commit/4726cbcee796aa0f9faf840d36e4d4544fb45624", "message": "Merge branch 'master' of https://github.com/Talend/tdi-studio-se into ametivier/fix/TBD-9855", "committedDate": "2020-02-11T19:52:20Z", "type": "commit"}, {"oid": "2aa79e348ca9c08e1c527190959bd91834b625bd", "url": "https://github.com/Talend/tdi-studio-se/commit/2aa79e348ca9c08e1c527190959bd91834b625bd", "message": "Merge branch 'master' of https://github.com/Talend/tdi-studio-se into ametivier/fix/TBD-9855", "committedDate": "2020-02-12T08:41:52Z", "type": "commit"}, {"oid": "9e63a68bbe0ebd58423ad22ae2f3a9b48978cb2e", "url": "https://github.com/Talend/tdi-studio-se/commit/9e63a68bbe0ebd58423ad22ae2f3a9b48978cb2e", "message": "Merge branch 'master' into ametivier/fix/TBD-9855", "committedDate": "2020-02-13T15:37:42Z", "type": "commit"}]}