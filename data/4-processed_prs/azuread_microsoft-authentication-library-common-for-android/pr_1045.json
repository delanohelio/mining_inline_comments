{"pr_number": 1045, "pr_title": "Add support for encryption/decryption of data using AndroidKeystore", "pr_createdAt": "2020-09-22T02:08:13Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045", "timeline": [{"oid": "e93f2c0793c6a00fdbea346c1a8cb0981961649a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e93f2c0793c6a00fdbea346c1a8cb0981961649a", "message": "Stubbing out ciphers, adding support for RSA paddings (encryption)", "committedDate": "2020-09-22T01:13:59Z", "type": "commit"}, {"oid": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "message": "WIP - Encryption/decryption support", "committedDate": "2020-09-22T02:06:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MDM4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492440386", "bodyText": "Javadoc", "author": "iambmelt", "createdAt": "2020-09-22T02:10:24Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MDgyMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492440822", "bodyText": "Probably shouldn't even bother to support this", "author": "iambmelt", "createdAt": "2020-09-22T02:12:45Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA1AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_224AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-224AndMGF1Padding\"),", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4Mjk5MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492982990", "bodyText": "c6240d5", "author": "iambmelt", "createdAt": "2020-09-22T19:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MDgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MTk4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492441987", "bodyText": "const", "author": "iambmelt", "createdAt": "2020-09-22T02:18:47Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwOTQ0Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493009446", "bodyText": "Removed https://issuetracker.google.com/issues/37091211", "author": "iambmelt", "createdAt": "2020-09-22T20:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0MTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU3Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455576", "bodyText": "Use interface", "author": "iambmelt", "createdAt": "2020-09-22T03:26:25Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2Mjc4OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492462789", "bodyText": "wontfix (using #toByteArray())", "author": "iambmelt", "createdAt": "2020-09-22T04:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU5NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455595", "bodyText": "Use interface", "author": "iambmelt", "createdAt": "2020-09-22T03:26:32Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2MzI2NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492463264", "bodyText": "3bc1a53", "author": "iambmelt", "createdAt": "2020-09-22T04:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTYzMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455633", "bodyText": "Multi-catch block", "author": "iambmelt", "createdAt": "2020-09-22T03:26:42Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(\n+                    outputStream,\n+                    input\n+            );\n+            cipherOutputStream.write(plaintext.getBytes(\"UTF-8\"));\n+            cipherOutputStream.close();\n+\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (Exception e) {\n+            // TODO Cleanup", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2ODA3MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492468071", "bodyText": "52021d2", "author": "iambmelt", "createdAt": "2020-09-22T04:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTY2Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455666", "bodyText": "throw", "author": "iambmelt", "createdAt": "2020-09-22T03:26:49Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +617,42 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        try {\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+            final RSAPublicKey publicKey = (RSAPublicKey) privateKeyEntry.getCertificate().getPublicKey();\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(\n+                    cipher.toString(),\n+                    \"AndroidOpenSSL\"\n+            );\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            final CipherOutputStream cipherOutputStream = new CipherOutputStream(\n+                    outputStream,\n+                    input\n+            );\n+            cipherOutputStream.write(plaintext.getBytes(\"UTF-8\"));\n+            cipherOutputStream.close();\n+\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (Exception e) {\n+            // TODO Cleanup\n+        }\n+\n+        return null;", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2ODI0OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492468249", "bodyText": "52021d2", "author": "iambmelt", "createdAt": "2020-09-22T04:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492455904", "bodyText": "Remove (deprecated)", "author": "iambmelt", "createdAt": "2020-09-22T03:28:07Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA1AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-1AndMGF1Padding\"),", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MjQxMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492982413", "bodyText": "c6240d5", "author": "iambmelt", "createdAt": "2020-09-22T19:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1NTkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ1Nzc5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r492457797", "bodyText": "\"No padding\" not going to be supported (too insecure, ind-cpa)", "author": "iambmelt", "createdAt": "2020-09-22T03:38:25Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,42 @@ public String toString() {\n         }\n     }\n \n+    enum Cipher {", "originalCommit": "d5aa3c8ca495b1c84ce1d9bc838dccdb64b417be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3bc1a53404ca026cffdfd299c602be0d7e9bbce6", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3bc1a53404ca026cffdfd299c602be0d7e9bbce6", "message": "Use interface, not concrete", "committedDate": "2020-09-22T04:04:16Z", "type": "commit"}, {"oid": "52021d251def0ddbb8826f578d2351f8a73fcb46", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/52021d251def0ddbb8826f578d2351f8a73fcb46", "message": "Some cleanup around exceptions", "committedDate": "2020-09-22T04:15:49Z", "type": "commit"}, {"oid": "e1df1e69ac7718eef2b32bb06812d33f42da07b5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e1df1e69ac7718eef2b32bb06812d33f42da07b5", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-3", "committedDate": "2020-09-22T18:18:17Z", "type": "commit"}, {"oid": "a0ca3dd33865acb27168239c5882f1758cdfa10b", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a0ca3dd33865acb27168239c5882f1758cdfa10b", "message": "Adding constants for various keystore related errors", "committedDate": "2020-09-22T19:03:03Z", "type": "commit"}, {"oid": "ff5a828ae61c0d8dec598c4bf6ca4b3b457c3851", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ff5a828ae61c0d8dec598c4bf6ca4b3b457c3851", "message": "Merge branch 'iambmelt/oneauth-pop-extensions-3' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into iambmelt/oneauth-pop-extensions-3", "committedDate": "2020-09-22T19:06:00Z", "type": "commit"}, {"oid": "c6240d5cb8f5030f3bd997241f4a2daae90757fd", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c6240d5cb8f5030f3bd997241f4a2daae90757fd", "message": "Adding javadoc for Cipher, removing ciphers we'll likely never use", "committedDate": "2020-09-22T19:24:52Z", "type": "commit"}, {"oid": "38eafc64420f395ee431c917c737d18bc0279c6e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/38eafc64420f395ee431c917c737d18bc0279c6e", "message": "decrypt impl. some code cleanup", "committedDate": "2020-09-22T20:15:59Z", "type": "commit"}, {"oid": "fd11c7f1db7fd7234ac4cadf24e39459787d0517", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fd11c7f1db7fd7234ac4cadf24e39459787d0517", "message": "Bugfix for test", "committedDate": "2020-09-22T20:17:50Z", "type": "commit"}, {"oid": "942d42f096b83398cd29234f46877b987be10aed", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/942d42f096b83398cd29234f46877b987be10aed", "message": "Removing unused variable (resolve PMD)", "committedDate": "2020-09-22T20:21:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNTI3OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493015278", "bodyText": "Do we not have a Base64Stream running around somewhere?  https://developer.android.com/reference/android/util/Base64InputStream", "author": "AdamBJohnsonx", "createdAt": "2020-09-22T20:31:45Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final NoSuchPaddingException e) {\n+            errCode = NO_SUCH_PADDING;\n+            exception = e;\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final IOException e) {\n+            errCode = IO_ERROR;\n+            exception = e;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG + methodName,\n+                errCode,\n+                exception\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public String decrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String ciphertext) throws ClientException {\n+        final String methodName = \":decrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a reference to our private key (will not be loaded into app process)\n+            final PrivateKey privateKey = privateKeyEntry.getPrivateKey();\n+\n+            // Init our cipher instance, don't use a named provider as there seems to be a mix of\n+            // BoringSSL & AndroidOpenSSL\n+            // https://issuetracker.google.com/issues/37091211\n+            final javax.crypto.Cipher outputCipher = javax.crypto.Cipher.getInstance(cipher.toString());\n+            outputCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privateKey);\n+\n+            // Put our ciphertext into an InputStream\n+            final CipherInputStream cipherInputStream = new CipherInputStream(\n+                    new ByteArrayInputStream(\n+                            Base64.decode(\n+                                    ciphertext,\n+                                    Base64.DEFAULT\n+                            )", "originalCommit": "942d42f096b83398cd29234f46877b987be10aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDY3Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493044677", "bodyText": "84e6855", "author": "iambmelt", "createdAt": "2020-09-22T21:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNTI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNzg1OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493017858", "bodyText": "This is a lot of copying.  Why not jut put it in a InputStreamReader: https://docs.oracle.com/javase/8/docs/api/java/io/InputStreamReader.html ?", "author": "AdamBJohnsonx", "createdAt": "2020-09-22T20:36:30Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final NoSuchPaddingException e) {\n+            errCode = NO_SUCH_PADDING;\n+            exception = e;\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final IOException e) {\n+            errCode = IO_ERROR;\n+            exception = e;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG + methodName,\n+                errCode,\n+                exception\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public String decrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String ciphertext) throws ClientException {\n+        final String methodName = \":decrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a reference to our private key (will not be loaded into app process)\n+            final PrivateKey privateKey = privateKeyEntry.getPrivateKey();\n+\n+            // Init our cipher instance, don't use a named provider as there seems to be a mix of\n+            // BoringSSL & AndroidOpenSSL\n+            // https://issuetracker.google.com/issues/37091211\n+            final javax.crypto.Cipher outputCipher = javax.crypto.Cipher.getInstance(cipher.toString());\n+            outputCipher.init(javax.crypto.Cipher.DECRYPT_MODE, privateKey);\n+\n+            // Put our ciphertext into an InputStream\n+            final CipherInputStream cipherInputStream = new CipherInputStream(\n+                    new ByteArrayInputStream(\n+                            Base64.decode(\n+                                    ciphertext,\n+                                    Base64.DEFAULT\n+                            )\n+                    ),\n+                    outputCipher // Our decryption cipher\n+            );\n+\n+            // Declare a List for dynamic sizing\n+            final List<Byte> values = new ArrayList<>();\n+\n+            // Iterate over bytes, adding them to our List\n+            int nextByte;\n+            while ((nextByte = cipherInputStream.read()) != -1) {\n+                values.add((byte) nextByte);\n+            }\n+\n+            final byte[] bytes = new byte[values.size()];\n+\n+            for (int ii = 0; ii < bytes.length; ii++) {\n+                bytes[ii] = values.get(ii);\n+            }\n+\n+            return new String(bytes, 0, bytes.length, ENCODING_SCHEME);", "originalCommit": "942d42f096b83398cd29234f46877b987be10aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0NDUwNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493044506", "bodyText": "Lookin' tidier already\n84e6855", "author": "iambmelt", "createdAt": "2020-09-22T21:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNzg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMzU3OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493023578", "bodyText": "Not going to support this cipher, as it requires use of deprecated sha-1", "author": "iambmelt", "createdAt": "2020-09-22T20:46:57Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -113,6 +113,39 @@ public String toString() {\n         }\n     }\n \n+    /**\n+     * Ciphers supported by our underlying keystore. Asymmetric ciphers shown only.\n+     */\n+    enum Cipher {\n+\n+        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n+        RSA_ECB_PKCS1_PADDING(\"RSA/ECB/PKCS1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_256AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_384AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-384AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPWithSHA_512AndMGF1Padding(\"RSA/ECB/OAEPWithSHA-512AndMGF1Padding\"),\n+\n+        @RequiresApi(Build.VERSION_CODES.M)\n+        RSA_ECB_OAEPPadding(\"RSA/ECB/OAEPPadding\");", "originalCommit": "942d42f096b83398cd29234f46877b987be10aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNjM4Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493026383", "bodyText": "78cd460", "author": "iambmelt", "createdAt": "2020-09-22T20:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMzU3OA=="}], "type": "inlineReview"}, {"oid": "d245c0d66ea3dda285fbeec2d03fc859c3e904b2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d245c0d66ea3dda285fbeec2d03fc859c3e904b2", "message": "Adding tests", "committedDate": "2020-09-22T20:47:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNTM4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493025386", "bodyText": "Similar to my other comments, you may be able to use a Base64OutputStream here.", "author": "AdamBJohnsonx", "createdAt": "2020-09-22T20:50:16Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +625,162 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(outputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();\n+\n+            // Flatten our OutputStream to an array\n+            byte[] encryptedBase64Data = outputStream.toByteArray();\n+\n+            // Base64 encode to stringify\n+            return Base64.encodeToString(encryptedBase64Data, Base64.DEFAULT);", "originalCommit": "942d42f096b83398cd29234f46877b987be10aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1OTAyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493059020", "bodyText": "Applied in 02668e9\nKind've breaking-even syntactically. This may be a bit more idiomatic", "author": "iambmelt", "createdAt": "2020-09-22T22:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4NDg5Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493084893", "bodyText": "If we go to min API 19, then we get try-with-resources, where you can:\ntry(Stream one = makeStream();\nStream two = makeAnotherStream(one)) {\ndo things with streams\n}\nNo closing, nothing else.\nCan we add multiDexEnabled true to our code, or is there a ProGuard issue with that?", "author": "AdamBJohnsonx", "createdAt": "2020-09-22T23:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNTM4Ng=="}], "type": "inlineReview"}, {"oid": "78cd460afdc6f9b4a64848d25463a47591a094c7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/78cd460afdc6f9b4a64848d25463a47591a094c7", "message": "Remove unsupported ciphers", "committedDate": "2020-09-22T20:51:13Z", "type": "commit"}, {"oid": "84e685554367f6eaaa4d4afccb70e478a944bc0e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/84e685554367f6eaaa4d4afccb70e478a944bc0e", "message": "Minor refactor; defer to streams for b64, copy logic", "committedDate": "2020-09-22T21:27:41Z", "type": "commit"}, {"oid": "02668e90e3683ef1ab9c0ee843f7a1457a2e0c8b", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/02668e90e3683ef1ab9c0ee843f7a1457a2e0c8b", "message": "CR feedback", "committedDate": "2020-09-22T22:00:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1OTEwNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493059107", "bodyText": "Remove this test", "author": "iambmelt", "createdAt": "2020-09-22T22:02:35Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "diffHunk": "@@ -366,4 +367,19 @@ public void testAsymmetricKeyHasPublicKeyJwk() throws ClientException {\n         Assert.assertNotNull(n);\n         Assert.assertFalse(n.getAsString().isEmpty());\n     }\n+\n+    @Test\n+    public void testCanEncryptDataPkcs1() throws ClientException {", "originalCommit": "02668e90e3683ef1ab9c0ee843f7a1457a2e0c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2MDY2OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493060669", "bodyText": "76f3122", "author": "iambmelt", "createdAt": "2020-09-22T22:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1OTEwNw=="}], "type": "inlineReview"}, {"oid": "c5c2cca65ad65a13ac08017c422345a5147e6598", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c5c2cca65ad65a13ac08017c422345a5147e6598", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-3", "committedDate": "2020-09-22T22:04:54Z", "type": "commit"}, {"oid": "76f3122d48004af2fede7113def1337011a6d7f5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/76f3122d48004af2fede7113def1337011a6d7f5", "message": "Removing duplicated test", "committedDate": "2020-09-22T22:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDY4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493074687", "bodyText": "Close in a finally block to avoid any potential resource leaks.", "author": "AdamBJohnsonx", "createdAt": "2020-09-22T22:44:24Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -615,6 +626,163 @@ public boolean verify(@NonNull final SigningAlgorithm alg,\n         return false;\n     }\n \n+    @Override\n+    public String encrypt(@NonNull final Cipher cipher,\n+                          @NonNull final String plaintext) throws ClientException {\n+        final String methodName = \":encrypt\";\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            // Load our key material\n+            final KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry)\n+                    mKeyStore.getEntry(mKeyAlias, null);\n+\n+            // Get a ref to our public key\n+            final PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();\n+\n+            // Init our Cipher\n+            final javax.crypto.Cipher input = javax.crypto.Cipher.getInstance(cipher.toString());\n+            input.init(javax.crypto.Cipher.ENCRYPT_MODE, publicKey);\n+\n+            // Declare an OutputStream to hold our encrypted data\n+            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+\n+            // Create a B64Stream to encode our incoming data, and write it to our ByteArrayStream\n+            final Base64OutputStream base64OutputStream = new Base64OutputStream(\n+                    byteArrayOutputStream,\n+                    Base64.DEFAULT\n+            );\n+\n+            // Wrap it in our CipherOutputStream, write the contents...\n+            final OutputStream cipherOutputStream = new CipherOutputStream(base64OutputStream, input);\n+            cipherOutputStream.write(plaintext.getBytes(ENCODING_UTF8));\n+            cipherOutputStream.close();", "originalCommit": "76f3122d48004af2fede7113def1337011a6d7f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjMwMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493076303", "bodyText": "ACK", "author": "iambmelt", "createdAt": "2020-09-22T22:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4ODMxMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493088310", "bodyText": "da7aff8", "author": "iambmelt", "createdAt": "2020-09-22T23:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NDY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NTkwNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493075905", "bodyText": "For grins, here, maybe make sure that !DATA_TO_ENCRYPT.equals(cipherText)", "author": "AdamBJohnsonx", "createdAt": "2020-09-22T22:48:04Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerEncryptionTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.platform;\n+\n+import android.os.Build;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_256AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_384AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_OAEPWithSHA_512AndMGF1Padding;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.Cipher.RSA_ECB_PKCS1_PADDING;\n+\n+// Note: Test cannot use robolectric due to the following open issue\n+// https://github.com/robolectric/robolectric/issues/1518\n+@RunWith(Parameterized.class)\n+public class DevicePoPManagerEncryptionTests {\n+\n+    private static final String DATA_TO_ENCRYPT = \"The quick brown fox jumped over the lazy dog.\";\n+\n+    private final IDevicePopManager devicePopManager;\n+    private final IDevicePopManager.Cipher cipher;\n+\n+    @Parameterized.Parameters\n+    public static Iterable<IDevicePopManager.Cipher> testParams() {\n+        final List<IDevicePopManager.Cipher> ciphers = new ArrayList<>();\n+\n+        // Only execute these tests at appropriate API levels...\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {\n+            ciphers.add(RSA_ECB_PKCS1_PADDING);\n+        }\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+            ciphers.add(RSA_ECB_OAEPWithSHA_256AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_384AndMGF1Padding);\n+            ciphers.add(RSA_ECB_OAEPWithSHA_512AndMGF1Padding);\n+        }\n+\n+        return ciphers;\n+    }\n+\n+    public DevicePoPManagerEncryptionTests(final IDevicePopManager.Cipher cipher)\n+            throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {\n+        devicePopManager = new DevicePopManager();\n+        this.cipher = cipher;\n+    }\n+\n+    @Before\n+    public void setUp() throws ClientException {\n+        devicePopManager.generateAsymmetricKey(ApplicationProvider.getApplicationContext());\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        devicePopManager.clearAsymmetricKey();\n+    }\n+\n+    @Test\n+    public void testEncryption() throws ClientException {\n+        final String cipherText = devicePopManager.encrypt(cipher, DATA_TO_ENCRYPT);", "originalCommit": "76f3122d48004af2fede7113def1337011a6d7f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjMxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493076317", "bodyText": "ACK", "author": "iambmelt", "createdAt": "2020-09-22T22:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NTkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4ODg5OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1045#discussion_r493088899", "bodyText": "4ec108d", "author": "iambmelt", "createdAt": "2020-09-22T23:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NTkwNQ=="}], "type": "inlineReview"}, {"oid": "da7aff83fe5996f26db6e0af75a48bbf2e2183cb", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/da7aff83fe5996f26db6e0af75a48bbf2e2183cb", "message": "Finally block to close resources", "committedDate": "2020-09-22T23:26:14Z", "type": "commit"}, {"oid": "4ec108d2f1cec690343eee0713c55b9a4afe2a9d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4ec108d2f1cec690343eee0713c55b9a4afe2a9d", "message": "Add assertion: orig != ciphertext", "committedDate": "2020-09-22T23:28:22Z", "type": "commit"}, {"oid": "789c0b1ff0e1d6b4a06e56f05c1892bf0e39f450", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/789c0b1ff0e1d6b4a06e56f05c1892bf0e39f450", "message": "Pulling functionality up to AsymmetricKey, AsymmetricRsaKey interfaces.\nImplements encrypt/decrypt for AndroidKeystoreAsymmetricRsaKey.", "committedDate": "2020-09-22T23:41:24Z", "type": "commit"}]}