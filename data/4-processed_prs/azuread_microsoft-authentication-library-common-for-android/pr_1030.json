{"pr_number": 1030, "pr_title": "Add utilities to interact with broker host during UI Test", "pr_createdAt": "2020-09-12T00:38:16Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030", "timeline": [{"oid": "c256404915bf8c31990d4488875f72224ebce859", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c256404915bf8c31990d4488875f72224ebce859", "message": "Add utilities to interact with broker host app", "committedDate": "2020-09-10T16:59:46Z", "type": "commit"}, {"oid": "a5cc097bb737ee922b32018a3b7d7bc93cbaaeb1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a5cc097bb737ee922b32018a3b7d7bc93cbaaeb1", "message": "Refactor removing test brokers from device", "committedDate": "2020-09-12T00:34:49Z", "type": "commit"}, {"oid": "82fdef44a472af404b8d755442a4cae90aac1a55", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/82fdef44a472af404b8d755442a4cae90aac1a55", "message": "Merge branch 'dev' into shahzaibj/broker-host-automation", "committedDate": "2020-09-12T00:35:03Z", "type": "commit"}, {"oid": "d483fd423cfe6234b043b207ae4b19717eb23b36", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d483fd423cfe6234b043b207ae4b19717eb23b36", "message": "Merge branch 'dev' into shahzaibj/broker-host-automation", "committedDate": "2020-09-24T03:03:23Z", "type": "commit"}, {"oid": "a3809d706e7debb9ac87084601929ff70cccc46d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a3809d706e7debb9ac87084601929ff70cccc46d", "message": "Implement enable browser access for broker host app", "committedDate": "2020-09-24T03:31:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NjYyNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496276624", "bodyText": "nit: Hm.  Would it break if we just disabled it whether or not if needs it?", "author": "AdamBJohnsonx", "createdAt": "2020-09-28T22:45:43Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/RemoveBrokersBeforeTestRule.java", "diffHunk": "@@ -41,22 +42,19 @@ public Statement apply(final Statement base, final Description description) {\n         return new Statement() {\n             @Override\n             public void evaluate() throws Throwable {\n-                final BrokerMicrosoftAuthenticator authenticator = new BrokerMicrosoftAuthenticator();\n-                authenticator.uninstall();\n-\n-                // Auth App may still be installed if device admin (Samsung devices for instance)\n-                if (authenticator.isInstalled()) {\n-                    TestContext.getTestContext().getTestDevice().getSettings().disableAdmin(DeviceAdmin.MICROSOFT_AUTHENTICATOR);\n-                    authenticator.uninstall();\n-                }\n+                final List<ITestBroker> testBrokers = CommonUtils.getAllPossibleTestBrokers();\n \n-                final BrokerCompanyPortal companyPortal = new BrokerCompanyPortal();\n-                companyPortal.uninstall();\n+                for (final ITestBroker broker : testBrokers) {\n+                    broker.uninstall();\n \n-                // CP may still be installed if device admin\n-                if (companyPortal.isInstalled()) {\n-                    TestContext.getTestContext().getTestDevice().getSettings().disableAdmin(DeviceAdmin.COMPANY_PORTAL);\n-                    companyPortal.uninstall();\n+                    if (broker.isInstalled()) {\n+                        // The broker app will still be installed on the device if it is enabled\n+                        // as a device admin. In this case, we need to disable the admin and then\n+                        // uninstall.\n+                        TestContext.getTestContext().getTestDevice()\n+                                .getSettings().disableAdmin(broker.getAdminName());", "originalCommit": "a3809d706e7debb9ac87084601929ff70cccc46d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NzcxMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496277711", "bodyText": "Yeah, you actually can't disable it if it is NOT an admin. This is disabling admin via UI....and the button for disabling would be disabled if not an admin. It will break the tests.", "author": "shahzaibj", "createdAt": "2020-09-28T22:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NjYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NzE1Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496277153", "bodyText": "nit: Should you build this from the package name as an instance var in the abstract class?", "author": "AdamBJohnsonx", "createdAt": "2020-09-28T22:47:18Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/broker/BrokerHost.java", "diffHunk": "@@ -0,0 +1,274 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.broker;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.constants.DeviceAdmin;\n+import com.microsoft.identity.client.ui.automation.installer.LocalApkInstaller;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.FIND_UI_ELEMENT_TIMEOUT;\n+\n+public class BrokerHost extends AbstractTestBroker {\n+\n+    public final static String BROKER_HOST_APP_PACKAGE_NAME = \"com.microsoft.identity.testuserapp\";\n+    public final static String BROKER_HOST_APP_NAME = \"Broker Host App\";\n+    public final static String BROKER_HOST_APK = \"BrokerHost.apk\";\n+\n+    public BrokerHost() {\n+        super(BROKER_HOST_APP_PACKAGE_NAME, BROKER_HOST_APP_NAME, new LocalApkInstaller());\n+        localApkFileName = BROKER_HOST_APK;\n+    }\n+\n+    @Override\n+    public void performDeviceRegistration(@NonNull final String username,\n+                                          @NonNull final String password) {\n+        performDeviceRegistrationHelper(username);\n+\n+        // Click the join btn\n+        final UiObject joinBtn = UiAutomatorUtils.obtainUiObjectWithResourceIdAndEnabledFlag(\n+                \"com.microsoft.identity.testuserapp:id/buttonJoin\", true", "originalCommit": "a3809d706e7debb9ac87084601929ff70cccc46d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5Mzk2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496293968", "bodyText": "We could build it from the package name.....but the logic to build will still need to be in this class I think....because the logic here i.e. which buttons to click and the resource ids are completely different across brokers (Auth app, CP, broker host) so I think we can't have shared logic for this method.\nWe do have shared logic for join via join activity and that one is living in the abstract class.", "author": "shahzaibj", "createdAt": "2020-09-28T23:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NzE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDc3NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496294774", "bodyText": "I just see the repeated strings everywhere and have to wonder whether separating them would make it a little more self-documenting.  I was mainly thinking about a buildLocator method that took the suffix and added the package name.", "author": "AdamBJohnsonx", "createdAt": "2020-09-28T23:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NzE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NTM5Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496295396", "bodyText": "Yeah I agree, let me change it then. I could use this method I wrote for similar purpose some time ago: https://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/dev/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java#L87", "author": "shahzaibj", "createdAt": "2020-09-28T23:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NzE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NDExNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496964114", "bodyText": "Addressed here: 19da90c", "author": "shahzaibj", "createdAt": "2020-09-29T18:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3NzE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3OTI3Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496279276", "bodyText": "Nit:  Could we fix that?  I mean, it's our test app, so I suppose it can do whatever we want including buffering all the logs internally and displaying them, so it might not be worthwhile.", "author": "AdamBJohnsonx", "createdAt": "2020-09-28T22:53:58Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/broker/BrokerHost.java", "diffHunk": "@@ -0,0 +1,274 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.broker;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.constants.DeviceAdmin;\n+import com.microsoft.identity.client.ui.automation.installer.LocalApkInstaller;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.FIND_UI_ELEMENT_TIMEOUT;\n+\n+public class BrokerHost extends AbstractTestBroker {\n+\n+    public final static String BROKER_HOST_APP_PACKAGE_NAME = \"com.microsoft.identity.testuserapp\";\n+    public final static String BROKER_HOST_APP_NAME = \"Broker Host App\";\n+    public final static String BROKER_HOST_APK = \"BrokerHost.apk\";\n+\n+    public BrokerHost() {\n+        super(BROKER_HOST_APP_PACKAGE_NAME, BROKER_HOST_APP_NAME, new LocalApkInstaller());\n+        localApkFileName = BROKER_HOST_APK;\n+    }\n+\n+    @Override\n+    public void performDeviceRegistration(@NonNull final String username,\n+                                          @NonNull final String password) {\n+        performDeviceRegistrationHelper(username);\n+\n+        // Click the join btn\n+        final UiObject joinBtn = UiAutomatorUtils.obtainUiObjectWithResourceIdAndEnabledFlag(\n+                \"com.microsoft.identity.testuserapp:id/buttonJoin\", true\n+        );\n+\n+        try {\n+            joinBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        }\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .prompt(PromptParameter.LOGIN)\n+                .broker(this)\n+                .consentPageExpected(false)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .expectingLoginPageAccountPicker(false)\n+                .sessionExpected(false)\n+                .loginHint(username)\n+                .build();\n+\n+        final AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+\n+        // handle AAD login page\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        postJoinConfirmHelper(username);\n+    }\n+\n+    @Override\n+    public void performSharedDeviceRegistration(String username, String password) {\n+        performDeviceRegistrationHelper(username);\n+\n+        // Click the join shared device btn\n+        UiObject joinBtn = UiAutomatorUtils.obtainUiObjectWithResourceIdAndEnabledFlag(\n+                \"com.microsoft.identity.testuserapp:id/buttonJoinSharedDevice\", true\n+        );\n+\n+        try {\n+            joinBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        }\n+\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .prompt(PromptParameter.LOGIN)\n+                .broker(this)\n+                .consentPageExpected(false)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .expectingLoginPageAccountPicker(false)\n+                .sessionExpected(false)\n+                .loginHint(username)\n+                .build();\n+\n+        final AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+\n+        // handle AAD login page\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        postJoinConfirmHelper(username);\n+    }\n+\n+    private void performDeviceRegistrationHelper(@NonNull final String username) {\n+        launch(); // launch Broker Host app\n+\n+        if (shouldHandleFirstRun) {\n+            handleFirstRun(); // handle first run experience\n+        }\n+\n+        // enter upn in text box\n+        UiAutomatorUtils.handleInput(\n+                \"com.microsoft.identity.testuserapp:id/editTextUsername\",\n+                username\n+        );\n+    }\n+\n+    private void postJoinConfirmHelper(@NonNull final String expectedUpn) {\n+        // Look for join op completion dialog\n+        final UiObject joinFinishDialog = UiAutomatorUtils.obtainUiObjectWithResourceId(\n+                \"android:id/message\"\n+        );\n+\n+        Assert.assertTrue(joinFinishDialog.exists());\n+\n+        try {\n+            // Obtain the text from the dialog box\n+            final String joinFinishDialogText = joinFinishDialog.getText();\n+            final String joinStatus = joinFinishDialogText.split(\":\")[1];\n+            // The status should be successful\n+            Assert.assertTrue(\"SUCCESSFUL\".equalsIgnoreCase(joinStatus));\n+\n+            // dismiss the dialog\n+            UiAutomatorUtils.handleButtonClick(\"android:id/button1\");\n+\n+            // compare the UPN to make sure joined with the expected account\n+            final String joinedUpn = getAccountUpn();\n+            Assert.assertTrue(expectedUpn.equalsIgnoreCase(joinedUpn));\n+        } catch (final UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String obtainDeviceId() {\n+        launch(); // launch Broker Host app\n+\n+        if (shouldHandleFirstRun) {\n+            handleFirstRun(); // handle first run experience\n+        }\n+\n+        UiAutomatorUtils.handleButtonClick(\"com.microsoft.identity.testuserapp:id/buttonDeviceId\");\n+\n+        // Look for the device id dialog box\n+        final UiObject deviceIdDialog = UiAutomatorUtils.obtainUiObjectWithResourceId(\n+                \"android:id/message\"\n+        );\n+\n+        Assert.assertTrue(deviceIdDialog.exists());\n+\n+        try {\n+            // get the text on the device id dialog box\n+            final String[] deviceIdDialogText = deviceIdDialog.getText().split(\":\");\n+            // look for the device id if present\n+            if (deviceIdDialogText[0].equalsIgnoreCase(\"DeviceId\")) {\n+                return deviceIdDialogText[1];\n+            } else {\n+                return null;\n+            }\n+        } catch (UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        } finally {\n+            // dismiss the dialog\n+            UiAutomatorUtils.handleButtonClick(\"android:id/button1\");\n+        }\n+    }\n+\n+    @Override\n+    public void enableBrowserAccess() {\n+        launch();\n+\n+        if (shouldHandleFirstRun) {\n+            handleFirstRun();\n+        }\n+\n+        // Click enable browser access\n+        UiAutomatorUtils.handleButtonClick(\n+                \"com.microsoft.identity.testuserapp:id/buttonInstallCert\"\n+        );\n+\n+        final UiDevice device =\n+                UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+\n+        // Install cert\n+        final UiObject certInstaller = device.findObject(new UiSelector().packageName(\"com.android.certinstaller\"));\n+        certInstaller.waitForExists(FIND_UI_ELEMENT_TIMEOUT);\n+        Assert.assertTrue(\n+                \"Microsoft Authenticator - cert installer dialog appears.\",\n+                certInstaller.exists()\n+        );\n+\n+        UiAutomatorUtils.handleButtonClick(\"android:id/button1\");\n+    }\n+\n+    @Override\n+    public void createPowerLiftIncident() {\n+        throw new UnsupportedOperationException(\"Not supported on Broker Host App :(\");", "originalCommit": "a3809d706e7debb9ac87084601929ff70cccc46d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NDM3MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496294371", "bodyText": "We could may be consume the powerlift sdk in the broker host app....we should talk about this in the next team meeting.", "author": "shahzaibj", "createdAt": "2020-09-28T23:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3OTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3OTM4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496279387", "bodyText": "\"UPN\".equals...", "author": "AdamBJohnsonx", "createdAt": "2020-09-28T22:54:24Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/broker/BrokerHost.java", "diffHunk": "@@ -0,0 +1,274 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.broker;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.uiautomator.UiDevice;\n+import androidx.test.uiautomator.UiObject;\n+import androidx.test.uiautomator.UiObjectNotFoundException;\n+import androidx.test.uiautomator.UiSelector;\n+\n+import com.microsoft.identity.client.ui.automation.constants.DeviceAdmin;\n+import com.microsoft.identity.client.ui.automation.installer.LocalApkInstaller;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+\n+import org.junit.Assert;\n+\n+import static com.microsoft.identity.client.ui.automation.utils.CommonUtils.FIND_UI_ELEMENT_TIMEOUT;\n+\n+public class BrokerHost extends AbstractTestBroker {\n+\n+    public final static String BROKER_HOST_APP_PACKAGE_NAME = \"com.microsoft.identity.testuserapp\";\n+    public final static String BROKER_HOST_APP_NAME = \"Broker Host App\";\n+    public final static String BROKER_HOST_APK = \"BrokerHost.apk\";\n+\n+    public BrokerHost() {\n+        super(BROKER_HOST_APP_PACKAGE_NAME, BROKER_HOST_APP_NAME, new LocalApkInstaller());\n+        localApkFileName = BROKER_HOST_APK;\n+    }\n+\n+    @Override\n+    public void performDeviceRegistration(@NonNull final String username,\n+                                          @NonNull final String password) {\n+        performDeviceRegistrationHelper(username);\n+\n+        // Click the join btn\n+        final UiObject joinBtn = UiAutomatorUtils.obtainUiObjectWithResourceIdAndEnabledFlag(\n+                \"com.microsoft.identity.testuserapp:id/buttonJoin\", true\n+        );\n+\n+        try {\n+            joinBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        }\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .prompt(PromptParameter.LOGIN)\n+                .broker(this)\n+                .consentPageExpected(false)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .expectingLoginPageAccountPicker(false)\n+                .sessionExpected(false)\n+                .loginHint(username)\n+                .build();\n+\n+        final AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+\n+        // handle AAD login page\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        postJoinConfirmHelper(username);\n+    }\n+\n+    @Override\n+    public void performSharedDeviceRegistration(String username, String password) {\n+        performDeviceRegistrationHelper(username);\n+\n+        // Click the join shared device btn\n+        UiObject joinBtn = UiAutomatorUtils.obtainUiObjectWithResourceIdAndEnabledFlag(\n+                \"com.microsoft.identity.testuserapp:id/buttonJoinSharedDevice\", true\n+        );\n+\n+        try {\n+            joinBtn.click();\n+        } catch (UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        }\n+\n+\n+        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                .prompt(PromptParameter.LOGIN)\n+                .broker(this)\n+                .consentPageExpected(false)\n+                .expectingBrokerAccountChooserActivity(false)\n+                .expectingLoginPageAccountPicker(false)\n+                .sessionExpected(false)\n+                .loginHint(username)\n+                .build();\n+\n+        final AadPromptHandler aadPromptHandler = new AadPromptHandler(promptHandlerParameters);\n+\n+        // handle AAD login page\n+        aadPromptHandler.handlePrompt(username, password);\n+\n+        postJoinConfirmHelper(username);\n+    }\n+\n+    private void performDeviceRegistrationHelper(@NonNull final String username) {\n+        launch(); // launch Broker Host app\n+\n+        if (shouldHandleFirstRun) {\n+            handleFirstRun(); // handle first run experience\n+        }\n+\n+        // enter upn in text box\n+        UiAutomatorUtils.handleInput(\n+                \"com.microsoft.identity.testuserapp:id/editTextUsername\",\n+                username\n+        );\n+    }\n+\n+    private void postJoinConfirmHelper(@NonNull final String expectedUpn) {\n+        // Look for join op completion dialog\n+        final UiObject joinFinishDialog = UiAutomatorUtils.obtainUiObjectWithResourceId(\n+                \"android:id/message\"\n+        );\n+\n+        Assert.assertTrue(joinFinishDialog.exists());\n+\n+        try {\n+            // Obtain the text from the dialog box\n+            final String joinFinishDialogText = joinFinishDialog.getText();\n+            final String joinStatus = joinFinishDialogText.split(\":\")[1];\n+            // The status should be successful\n+            Assert.assertTrue(\"SUCCESSFUL\".equalsIgnoreCase(joinStatus));\n+\n+            // dismiss the dialog\n+            UiAutomatorUtils.handleButtonClick(\"android:id/button1\");\n+\n+            // compare the UPN to make sure joined with the expected account\n+            final String joinedUpn = getAccountUpn();\n+            Assert.assertTrue(expectedUpn.equalsIgnoreCase(joinedUpn));\n+        } catch (final UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String obtainDeviceId() {\n+        launch(); // launch Broker Host app\n+\n+        if (shouldHandleFirstRun) {\n+            handleFirstRun(); // handle first run experience\n+        }\n+\n+        UiAutomatorUtils.handleButtonClick(\"com.microsoft.identity.testuserapp:id/buttonDeviceId\");\n+\n+        // Look for the device id dialog box\n+        final UiObject deviceIdDialog = UiAutomatorUtils.obtainUiObjectWithResourceId(\n+                \"android:id/message\"\n+        );\n+\n+        Assert.assertTrue(deviceIdDialog.exists());\n+\n+        try {\n+            // get the text on the device id dialog box\n+            final String[] deviceIdDialogText = deviceIdDialog.getText().split(\":\");\n+            // look for the device id if present\n+            if (deviceIdDialogText[0].equalsIgnoreCase(\"DeviceId\")) {\n+                return deviceIdDialogText[1];\n+            } else {\n+                return null;\n+            }\n+        } catch (UiObjectNotFoundException e) {\n+            throw new AssertionError(e);\n+        } finally {\n+            // dismiss the dialog\n+            UiAutomatorUtils.handleButtonClick(\"android:id/button1\");\n+        }\n+    }\n+\n+    @Override\n+    public void enableBrowserAccess() {\n+        launch();\n+\n+        if (shouldHandleFirstRun) {\n+            handleFirstRun();\n+        }\n+\n+        // Click enable browser access\n+        UiAutomatorUtils.handleButtonClick(\n+                \"com.microsoft.identity.testuserapp:id/buttonInstallCert\"\n+        );\n+\n+        final UiDevice device =\n+                UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());\n+\n+        // Install cert\n+        final UiObject certInstaller = device.findObject(new UiSelector().packageName(\"com.android.certinstaller\"));\n+        certInstaller.waitForExists(FIND_UI_ELEMENT_TIMEOUT);\n+        Assert.assertTrue(\n+                \"Microsoft Authenticator - cert installer dialog appears.\",\n+                certInstaller.exists()\n+        );\n+\n+        UiAutomatorUtils.handleButtonClick(\"android:id/button1\");\n+    }\n+\n+    @Override\n+    public void createPowerLiftIncident() {\n+        throw new UnsupportedOperationException(\"Not supported on Broker Host App :(\");\n+    }\n+\n+    @Override\n+    public DeviceAdmin getAdminName() {\n+        return DeviceAdmin.BROKER_HOST;\n+    }\n+\n+    @Override\n+    public void handleFirstRun() {\n+        // nothing needed here\n+    }\n+\n+    @Nullable\n+    public String getAccountUpn() {\n+        launch(); // launch Broker Host app\n+\n+        if (shouldHandleFirstRun) {\n+            handleFirstRun(); // handle first run experience\n+        }\n+\n+        UiAutomatorUtils.handleButtonClick(\"com.microsoft.identity.testuserapp:id/buttonGetUpn\");\n+\n+        // Look for the UPN dialog box\n+        final UiObject showUpnDialog = UiAutomatorUtils.obtainUiObjectWithResourceId(\n+                \"android:id/message\"\n+        );\n+\n+        Assert.assertTrue(showUpnDialog.exists());\n+\n+        try {\n+            // Obtain the text on the UPN dialog box\n+            final String[] upnDialogTextParts = showUpnDialog.getText().split(\":\");\n+\n+            // get the UPN if it is there, else return null (in case of error)\n+            if (upnDialogTextParts[0].equalsIgnoreCase(\"UPN\")) {", "originalCommit": "a3809d706e7debb9ac87084601929ff70cccc46d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMDMxNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1030#discussion_r496910316", "bodyText": "Addressed here: 6012894", "author": "shahzaibj", "createdAt": "2020-09-29T17:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3OTM4Nw=="}], "type": "inlineReview"}, {"oid": "63a77a64ab3f41699415f7aef96940b7aa7394a1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/63a77a64ab3f41699415f7aef96940b7aa7394a1", "message": "Merge branch 'dev' into shahzaibj/broker-host-automation", "committedDate": "2020-09-29T17:16:09Z", "type": "commit"}, {"oid": "6012894adad9fc883be444247ae7f9d6db733871", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6012894adad9fc883be444247ae7f9d6db733871", "message": "Address comment", "committedDate": "2020-09-29T17:21:00Z", "type": "commit"}, {"oid": "19da90c74fbf695d71b4cc92a15bf10fc3097c92", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/19da90c74fbf695d71b4cc92a15bf10fc3097c92", "message": "Address comment", "committedDate": "2020-09-29T17:31:51Z", "type": "commit"}]}