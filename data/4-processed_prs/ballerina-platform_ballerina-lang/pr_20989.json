{"pr_number": 20989, "pr_title": "Fix grpc map field serialization issue and optional field deserialization issue(master)", "pr_createdAt": "2020-02-11T11:16:48Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989", "timeline": [{"oid": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "message": "Fix grpc map field serialization issue\nand optional field deserialization issue", "committedDate": "2020-02-11T10:56:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4NTYwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r377585600", "bodyText": "Shall we stick to the 120 max line width? Check all the places.", "author": "anupama-pathirage", "createdAt": "2020-02-11T11:45:04Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/clients/19_grpc_map_field_client.bal", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/grpc;\n+import ballerina/io;\n+\n+NegotiatorBlockingClient blockingEp = new(\"http://localhost:9109\");\n+\n+public function main (string... args) {\n+    io:println(\"starting negotiator client\");\n+    io:println(testMapFields());\n+    io:println(testOptionalFields());\n+}\n+\n+public function testMapFields() returns string {\n+    MetricsPublishRequest request = {id: \"xxxxx\", metrics: [{timestamp:1580966325916,\n+    name:\"ballerina/http/Caller_3XX_requests_total_count\",value:0.0,tags:[{key:\"action\", value:\"respond\"}]}]};\n+    grpc:Headers|error publishMetrics = blockingEp->publishMetrics(request);\n+    if (publishMetrics is error) {\n+        return io:sprintf(\"Metrics publish failed: %s - %s\", publishMetrics.reason(), <string> publishMetrics.detail()[\"message\"]);", "originalCommit": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4NzA0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r377587045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                record {| string key; string value; |}[] tags = [];\n          \n          \n            \n                record {|string key; string value;|}[] tags = [];", "author": "anupama-pathirage", "createdAt": "2020-02-11T11:48:28Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/grpcservices/19_grpc_map_service.bal", "diffHunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/grpc;\n+import ballerina/io;\n+import ballerina/log;\n+\n+listener grpc:Listener negotiatorep = new (9109);\n+\n+@grpc:ServiceDescriptor {\n+    descriptor: ROOT_DESCRIPTOR_19,\n+    descMap: getDescriptorMap19()\n+}\n+service Negotiator on negotiatorep {\n+\n+    resource function handshake(grpc:Caller caller, HandshakeRequest value) {\n+        log:printInfo(io:sprintf(\"Handshake request: %s\", value.toString()));\n+\n+        if (value.jsonStr != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"jsonStr should be an empty string.\");\n+            return;\n+        }\n+        if (value.programHash != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"programHash should be an empty string.\");\n+            return;\n+        }\n+        if (value.userId != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"userId should be an empty string.\");\n+            return;\n+        }\n+        if (value.instanceId != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"instanceId should be an empty string.\");\n+            return;\n+        }\n+        if (value.applicationId != \"\") {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"applicationId should be an empty string.\");\n+            return;\n+        }\n+        HandshakeResponse response = {id:\"123456\", protocols:[\"http\", \"https\"]};\n+        error? send = caller->send(response);\n+        if (send is error) {\n+            log:printError(\"Error while sending the response.\", send);\n+        } else {\n+            error? complete = caller->complete();\n+        }\n+    }\n+\n+    resource function publishMetrics(grpc:Caller caller, MetricsPublishRequest value) {\n+        log:printInfo(io:sprintf(\"publishMetrics request: %s\", value.toString()));\n+\n+        if (value.metrics.length() < 0) {\n+            error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"metrics cannot be an empty array.\");\n+            return;\n+        }\n+        foreach var metric in value.metrics {\n+             log:printInfo(io:sprintf(\"metric value: %s\", metric.toString()));\n+             if (metric.tags.length() < 0) {\n+                 error? sendError = caller->sendError(grpc:INVALID_ARGUMENT, \"tags cannot be an empty array.\");\n+                 return;\n+             }\n+        }\n+        error? complete = caller->complete();\n+    }\n+\n+    resource function publishTraces(grpc:Caller caller, TracesPublishRequest value) {\n+        log:printInfo(io:sprintf(\"publishTraces request: %s\", value.toString()));\n+        error? complete = caller->complete();\n+        io:println(complete);\n+    }\n+}\n+\n+public type Empty record {|\n+|};\n+\n+public type HandshakeResponse record {|\n+    string id = \"\";\n+    string[] protocols = [];\n+|};\n+\n+public type MetricsPublishRequest record {|\n+    string id = \"\";\n+    Metric[] metrics = [];\n+|};\n+\n+public type Metric record {|\n+    int timestamp = 0;\n+    string name = \"\";\n+    float value = 0.0;\n+    record {| string key; string value; |}[] tags = [];", "originalCommit": "171eb9d9ef3355cfe8a1adcb0f695902a849b3f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4NzE4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r377587188", "bodyText": "Shall we reformat the .bal files?", "author": "anupama-pathirage", "createdAt": "2020-02-11T11:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4NzA0NQ=="}], "type": "inlineReview"}, {"oid": "7643f94d85669726cfa1c3cd367d10941ed0261c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7643f94d85669726cfa1c3cd367d10941ed0261c", "message": "Reformat ballerina service and client code", "committedDate": "2020-02-12T07:24:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNjE1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r378826154", "bodyText": "What is the special reason to notify the error to callback and return error subsequently?\nIf the exception has occurred before the non-blocking call, then call back should not be called ideally. We can simply unblock strand[1] and return error. Problem is if we notify the callback when the non-blocking task is not processed, that can cause strand state issues.\n[1] https://github.com/ballerina-platform/ballerina-lang/blob/master/stdlib/http/src/main/java/org/ballerinalang/net/http/nativeimpl/connection/Respond.java#L122", "author": "chamil321", "createdAt": "2020-02-13T12:19:36Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/nativeimpl/client/FunctionUtils.java", "diffHunk": "@@ -248,18 +248,22 @@ public static Object externBlockingExecute(ObjectValue clientEndpoint, String me\n                 requestMsg.setHeaders(headers);\n             }\n             BlockingStub blockingStub = (BlockingStub) connectionStub;\n+            DataContext dataContext = null;\n             try {\n                 MethodDescriptor.MethodType methodType = getMethodType(methodDescriptor);\n                 if (methodType.equals(MethodDescriptor.MethodType.UNARY)) {\n \n-                    DataContext dataContext = new DataContext(Scheduler.getStrand(),\n+                    dataContext = new DataContext(Scheduler.getStrand(),\n                             new NonBlockingCallback(Scheduler.getStrand()));\n                     blockingStub.executeUnary(requestMsg, methodDescriptors.get(methodName), dataContext);\n                 } else {\n                     return notifyErrorReply(INTERNAL, \"Error while executing the client call. Method type \" +\n                             methodType.name() + \" not supported\");\n                 }\n             } catch (Exception e) {\n+                if (dataContext != null) {\n+                    dataContext.getCallback().notifyFailure(MessageUtils.getConnectorError(e));", "originalCommit": "7643f94d85669726cfa1c3cd367d10941ed0261c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4NTExMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r379985110", "bodyText": "We need to release the strand when there is an error before doing the network call. Thanks for the suggestion", "author": "daneshk", "createdAt": "2020-02-17T04:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNjE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4NjUyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20989#discussion_r379986522", "bodyText": "Fixed in 25dc241", "author": "daneshk", "createdAt": "2020-02-17T05:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyNjE1NA=="}], "type": "inlineReview"}, {"oid": "25dc2415754273375f38c7f520185d2622af5300", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25dc2415754273375f38c7f520185d2622af5300", "message": "Add code review suggestion", "committedDate": "2020-02-17T05:00:07Z", "type": "commit"}]}