{"pr_number": 25524, "pr_title": "Improve the symbol lookup method in the semantic API", "pr_createdAt": "2020-08-28T19:28:24Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524", "timeline": [{"oid": "0f4929f60919f33364ec2ea7150629671719ed51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0f4929f60919f33364ec2ea7150629671719ed51", "message": "Improve symbol filtering logic and add basic test cases", "committedDate": "2020-08-28T19:39:29Z", "type": "forcePushed"}, {"oid": "67c4251b06e3b082c3963101c9a317f433926344", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/67c4251b06e3b082c3963101c9a317f433926344", "message": "Improve symbol filtering logic and add basic test cases", "committedDate": "2020-08-31T05:26:52Z", "type": "forcePushed"}, {"oid": "a452bdef86d7d428bffd444b097b81714cf10a5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a452bdef86d7d428bffd444b097b81714cf10a5a", "message": "Sync with API changes", "committedDate": "2020-09-01T20:03:20Z", "type": "forcePushed"}, {"oid": "0679d5981ebbcead6ad2038a98ca3c49f5c665e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0679d5981ebbcead6ad2038a98ca3c49f5c665e0", "message": "Improve symbol lookup logic in imported modules", "committedDate": "2020-09-02T16:55:45Z", "type": "forcePushed"}, {"oid": "7946f130b913f8e62e01feac83f286d201a68006", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7946f130b913f8e62e01feac83f286d201a68006", "message": "Fix symbol visibility issue in let expr", "committedDate": "2020-09-03T14:53:50Z", "type": "forcePushed"}, {"oid": "c42f07d65a3d20de868c2dc9055c077d1bd67c2f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c42f07d65a3d20de868c2dc9055c077d1bd67c2f", "message": "Fix checkstyle issues", "committedDate": "2020-09-03T18:25:43Z", "type": "forcePushed"}, {"oid": "3cce37f038ee7084e263fda7fd295624fdda904e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cce37f038ee7084e263fda7fd295624fdda904e", "message": "Fix checkstyle issues", "committedDate": "2020-09-04T04:28:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MjgwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483392803", "bodyText": "is it possible to handle the cursor position without converting to a diagnostic position?", "author": "nadeeshaan", "createdAt": "2020-09-04T05:20:50Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -71,12 +80,19 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n         Map<Name, List<Scope.ScopeEntry>> scopeSymbols =\n                 symbolResolver.getAllVisibleInScopeSymbols(lookupVisitor.lookUp(this.compilationUnit));\n \n-        for (Entry<Name, List<ScopeEntry>> entry : scopeSymbols.entrySet()) {\n+        DiagnosticPos cursorPos = new DiagnosticPos(new BDiagnosticSource(bLangPackage.packageID, compilationUnit.name),", "originalCommit": "3cce37f038ee7084e263fda7fd295624fdda904e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNjU2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483516560", "bodyText": "Will see. Did this conversion to make it easier to compare the user provided line position with the positions in BSymbol", "author": "pubudu91", "createdAt": "2020-09-04T09:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MjgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483409499", "bodyText": "Apparently SYMBOL_POSITION constant is redundant and the name is misleading here. Shall we just use 0 for the clarity.", "author": "rasika", "createdAt": "2020-09-04T06:17:10Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||", "originalCommit": "3cce37f038ee7084e263fda7fd295624fdda904e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMjY5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483522698", "bodyText": "Yeah, I agree the name doesn't reflect the actual position of the symbol. Thought of introducing a constant instead of using 0 since the use of 0 kinda seemed to make it a bit unclear what that comparison is about", "author": "pubudu91", "createdAt": "2020-09-04T10:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NzcxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485377719", "bodyText": "What do we check here anyway?", "author": "SupunS", "createdAt": "2020-09-09T06:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5MDQyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485390425", "bodyText": "This basically compares whether the cursor position is before or after the position of a given symbol", "author": "pubudu91", "createdAt": "2020-09-09T07:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5NDk0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485394943", "bodyText": "Oh okay. So this is an object compare.\nI also feel 0 is more natural in that case.", "author": "SupunS", "createdAt": "2020-09-09T07:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwOTQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMDc3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483410771", "bodyText": "Any specific reason to use FQCN org.ballerinalang.model.symbols.SymbolKind.FUNCTION here? or else shall we just use SymbolKind.FUNCTION for better readability", "author": "rasika", "createdAt": "2020-09-04T06:20:47Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/symbols/BallerinaModule.java", "diffHunk": "@@ -71,9 +74,10 @@ protected BallerinaModule(String name, PackageID moduleID, BPackageSymbol packag\n         List<FunctionSymbol> functions = new ArrayList<>();\n         for (Map.Entry<Name, ScopeEntry> entry : this.packageSymbol.scope.entries.entrySet()) {\n             ScopeEntry scopeEntry = entry.getValue();\n-            if (scopeEntry.symbol instanceof BInvokableSymbol &&\n-                    (scopeEntry.symbol.flags & Flags.PUBLIC) == Flags.PUBLIC &&\n-                    scopeEntry.symbol.kind != org.ballerinalang.model.symbols.SymbolKind.ERROR_CONSTRUCTOR) {\n+            if (scopeEntry.symbol != null\n+                    && scopeEntry.symbol.kind == org.ballerinalang.model.symbols.SymbolKind.FUNCTION", "originalCommit": "3cce37f038ee7084e263fda7fd295624fdda904e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMzE3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483523170", "bodyText": "There's SymbolKind class in the API package too. So had to use the FQ name to refer to the one in the lang module", "author": "pubudu91", "createdAt": "2020-09-04T10:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxMDc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0MzEyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483543122", "bodyText": "Will this be fixed sometime soon? Or do we need to create an issue specifying how this can be improved?", "author": "MaryamZi", "createdAt": "2020-09-04T10:54:10Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaModuleID.java", "diffHunk": "@@ -66,4 +66,24 @@ public String toString() {\n         }\n         return this.orgName() + \"/\" + this.moduleName() + \":\" + this.version();\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        // TODO: Improve this", "originalCommit": "3cce37f038ee7084e263fda7fd295624fdda904e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4MjkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r484382939", "bodyText": "Yes, planning on fixing these in this PR itself.", "author": "pubudu91", "createdAt": "2020-09-07T11:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0MzEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0NDEwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483544100", "bodyText": "Can we check if owner kind is SymbolKind.PACKAGE instead?", "author": "MaryamZi", "createdAt": "2020-09-04T10:56:20Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -99,4 +115,16 @@ public BallerinaSemanticModel(BLangCompilationUnit compilationUnit, BLangPackage\n     public List<Diagnostic> diagnostics(TextRange range) {\n         return new ArrayList<>();\n     }\n+\n+    private boolean isSymbolInUserProject(BSymbol symbol, DiagnosticPos cursorPos) {\n+        return symbol.origin == SOURCE &&\n+                (cursorPos.compareTo(symbol.pos) > SYMBOL_POSITION ||\n+                        symbol.owner instanceof BPackageSymbol ||", "originalCommit": "3cce37f038ee7084e263fda7fd295624fdda904e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483548211", "bodyText": "Can we test without ballerina/io? Just wondering if we have the requirement for this to be independent of stdlib modules.", "author": "MaryamZi", "createdAt": "2020-09-04T11:05:53Z", "path": "compiler/ballerina-compiler-api/build.gradle", "diffHunk": "@@ -27,6 +27,11 @@ dependencies {\n \n     testCompile 'org.testng:testng'\n     testCompile project(path: ':ballerina-test-utils', configuration: 'shadow')\n+    testCompile project(':ballerina-io')", "originalCommit": "3cce37f038ee7084e263fda7fd295624fdda904e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDAwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r484384007", "bodyText": "This is just for the tests. That should be fine right?", "author": "pubudu91", "createdAt": "2020-09-07T11:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MjkxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485362919", "bodyText": "Even that we usually try to avoid, right? Wouldn't it be an issue with the stdlib migration anyway?", "author": "MaryamZi", "createdAt": "2020-09-09T06:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MjM1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485382358", "bodyText": "Yeah, had a chat with Supun as well. Will replace this with a balo test.", "author": "pubudu91", "createdAt": "2020-09-09T07:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0ODIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r483554474", "bodyText": "Is this correct or should this be SOURCE?", "author": "MaryamZi", "createdAt": "2020-09-04T11:20:59Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/symbols/SymbolOrigin.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.ballerinalang.model.symbols;\n+\n+/**\n+ * Represents the various origination points of a symbol.\n+ *\n+ * @since 2.0.0\n+ */\n+public enum SymbolOrigin {\n+\n+    /**\n+     * These are symbols which are defined internally by the compiler. e.g., symbols defined in the symbol table,\n+     * symbols defined in lang lib\n+     */\n+    BUILTIN {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return BUILTIN;\n+        }\n+\n+        @Override\n+        public byte value() {\n+            return 1;\n+        }\n+    },\n+\n+    /**\n+     * These are symbols for which there is a corresponding construct in the source file written by the user.\n+     */\n+    SOURCE {\n+        @Override\n+        public SymbolOrigin toBIROrigin() {\n+            return COMPILED_SOURCE;", "originalCommit": "3cce37f038ee7084e263fda7fd295624fdda904e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM4NDgyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r484384825", "bodyText": "This is the intended value. The idea was to set a symbol's origin to COMPILED_SOURCE if it's coming from the BIR. So any SOURCE symbols become COMPILED_SOURCE symbols once the compilation is finished.", "author": "pubudu91", "createdAt": "2020-09-07T11:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MjEyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485362122", "bodyText": "Would a comment explaining this help?", "author": "MaryamZi", "createdAt": "2020-09-09T06:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5MDczNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485390735", "bodyText": "Ack, will add a comment", "author": "pubudu91", "createdAt": "2020-09-09T07:18:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1NDQ3NA=="}], "type": "inlineReview"}, {"oid": "db53530150ab4ed11e8503bfa7668474e18d85c4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db53530150ab4ed11e8503bfa7668474e18d85c4", "message": "Fix checkstyle issues", "committedDate": "2020-09-07T05:48:17Z", "type": "forcePushed"}, {"oid": "688cea0942eb0122f76d937a375538c3035139d5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/688cea0942eb0122f76d937a375538c3035139d5", "message": "Fix conflicts", "committedDate": "2020-09-08T08:36:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2ODEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485368125", "bodyText": "how about srcFile --> documentName or fileName?", "author": "SupunS", "createdAt": "2020-09-09T06:29:53Z", "path": "compiler/ballerina-compiler-api/src/main/java/org/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -35,10 +35,11 @@\n     /**\n      * Lookup the visible symbols at the given location.\n      *\n+     * @param srcFile  path for the file in which we need to look up symbols, relative to the source root path\n      * @param position text position in the source\n      * @return {@link List} of visible symbols in the given location\n      */\n-    List<Symbol> visibleSymbols(LinePosition position);\n+    List<Symbol> visibleSymbols(String srcFile, LinePosition position);", "originalCommit": "688cea0942eb0122f76d937a375538c3035139d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MDI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485380299", "bodyText": "Shall we create an issue for this and remove the TODO? I think we will not be addressing this along with the semantic API changes..", "author": "SupunS", "createdAt": "2020-09-09T06:56:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -216,31 +220,31 @@ private SymbolTable(CompilerContext context) {\n         this.rootPkgSymbol.scope = this.rootScope;\n         this.rootPkgSymbol.pos = this.builtinPos;\n \n-        this.notFoundSymbol = new BSymbol(SymTag.NIL, Flags.PUBLIC, Names.INVALID,\n-                                          rootPkgSymbol.pkgID, noType, rootPkgSymbol, builtinPos);\n+        this.notFoundSymbol = new BSymbol(SymTag.NIL, Flags.PUBLIC, Names.INVALID, rootPkgSymbol.pkgID, noType,\n+                                          rootPkgSymbol, builtinPos, SymbolOrigin.VIRTUAL);\n         // Initialize built-in types in Ballerina\n-        initializeType(intType, TypeKind.INT.typeName());\n-        initializeType(byteType, TypeKind.BYTE.typeName());\n-        initializeType(floatType, TypeKind.FLOAT.typeName());\n-        initializeType(decimalType, TypeKind.DECIMAL.typeName());\n-        initializeType(stringType, TypeKind.STRING.typeName());\n-        initializeType(booleanType, TypeKind.BOOLEAN.typeName());\n-        initializeType(jsonType, TypeKind.JSON.typeName());\n-        initializeType(xmlType, TypeKind.XML.typeName());\n-        initializeType(streamType, TypeKind.STREAM.typeName());\n-        initializeType(tableType, TypeKind.TABLE.typeName());\n-        initializeType(mapType, TypeKind.MAP.typeName());\n-        initializeType(mapStringType, TypeKind.MAP.typeName());\n-        initializeType(mapAnydataType, TypeKind.MAP.typeName());\n-        initializeType(futureType, TypeKind.FUTURE.typeName());\n-        initializeType(anyType, TypeKind.ANY.typeName());\n-        initializeType(anydataType, TypeKind.ANYDATA.typeName());\n-        initializeType(nilType, TypeKind.NIL.typeName());\n-        initializeType(neverType, TypeKind.NEVER.typeName());\n-        initializeType(anyServiceType, TypeKind.SERVICE.typeName());\n-        initializeType(handleType, TypeKind.HANDLE.typeName());\n-        initializeType(typeDesc, TypeKind.TYPEDESC.typeName());\n-        initializeType(readonlyType, TypeKind.READONLY.typeName());\n+        initializeType(intType, TypeKind.INT.typeName(), BUILTIN);\n+        initializeType(byteType, TypeKind.BYTE.typeName(), BUILTIN);\n+        initializeType(floatType, TypeKind.FLOAT.typeName(), BUILTIN);\n+        initializeType(decimalType, TypeKind.DECIMAL.typeName(), BUILTIN);\n+        initializeType(stringType, TypeKind.STRING.typeName(), BUILTIN);\n+        initializeType(booleanType, TypeKind.BOOLEAN.typeName(), BUILTIN);\n+        initializeType(jsonType, TypeKind.JSON.typeName(), BUILTIN);\n+        initializeType(xmlType, TypeKind.XML.typeName(), BUILTIN);\n+        initializeType(streamType, TypeKind.STREAM.typeName(), BUILTIN);\n+        initializeType(tableType, TypeKind.TABLE.typeName(), BUILTIN);\n+        initializeType(mapType, TypeKind.MAP.typeName(), VIRTUAL); // TODO: Do we need these map types to be defined?", "originalCommit": "688cea0942eb0122f76d937a375538c3035139d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MjU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25524#discussion_r485382543", "bodyText": "Shall we convert these TODOs to issues, and remove the comments?\nHaving people references in a public code-base is a bit weird.", "author": "SupunS", "createdAt": "2020-09-09T07:01:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -1493,7 +1497,7 @@ private boolean isRestDetailBindingAvailable(BLangErrorVariable errorVariable) {\n \n     private BTypeSymbol createTypeSymbol(int type) {\n         return new BTypeSymbol(type, Flags.PUBLIC, Names.EMPTY, env.enclPkg.packageID,\n-                               null, env.scope.owner, symTable.builtinPos); // TODO: Check with Dhananjaya\n+                               null, env.scope.owner, symTable.builtinPos, VIRTUAL); // TODO: Check with Dhananjaya", "originalCommit": "688cea0942eb0122f76d937a375538c3035139d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c21ce805194b32a5ca6338b9265ac408788f5f56", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c21ce805194b32a5ca6338b9265ac408788f5f56", "message": "Add an API to retrieve the origin info of symbols", "committedDate": "2020-09-09T12:22:54Z", "type": "commit"}, {"oid": "f692b6b80c994140ed46c2ea4188f60431d84b07", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f692b6b80c994140ed46c2ea4188f60431d84b07", "message": "Refactor the usages of the BSymbol constructor", "committedDate": "2020-09-09T12:23:06Z", "type": "commit"}, {"oid": "1e615464c61dc209ae1868ac967a96c5212b2943", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e615464c61dc209ae1868ac967a96c5212b2943", "message": "Add COMPILE_SOURCE symbol origin", "committedDate": "2020-09-09T12:23:07Z", "type": "commit"}, {"oid": "c45ff4d80237069fbe14daf304f89f39c92d9c13", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c45ff4d80237069fbe14daf304f89f39c92d9c13", "message": "Add origin info to annotation symbol", "committedDate": "2020-09-09T12:23:07Z", "type": "commit"}, {"oid": "1a8fec82e085077e581c23d62f1228b88df8ca16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a8fec82e085077e581c23d62f1228b88df8ca16", "message": "Add origin info to BTypeSymbol and refactor its constructor", "committedDate": "2020-09-09T12:23:07Z", "type": "commit"}, {"oid": "26ea84b8a52f8e6e4cdb03de7df4a834f6fdd064", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26ea84b8a52f8e6e4cdb03de7df4a834f6fdd064", "message": "Add origin info to error type symbol", "committedDate": "2020-09-09T12:23:07Z", "type": "commit"}, {"oid": "2a4d334558bec744a2cc327446f4c9bfb78551fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a4d334558bec744a2cc327446f4c9bfb78551fa", "message": "Add origin info to function type symbol", "committedDate": "2020-09-09T12:23:08Z", "type": "commit"}, {"oid": "95ef5791aa4c942b7b5d0755144df3599f9fc935", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95ef5791aa4c942b7b5d0755144df3599f9fc935", "message": "Add origin info to object type symbol", "committedDate": "2020-09-09T12:23:08Z", "type": "commit"}, {"oid": "9256f6fd737bf59d03a1f899293f03d3719720bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9256f6fd737bf59d03a1f899293f03d3719720bb", "message": "Add origin info to record type symbol", "committedDate": "2020-09-09T12:23:08Z", "type": "commit"}, {"oid": "424e187409518cb163f32010d1911f5ff2b3be75", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/424e187409518cb163f32010d1911f5ff2b3be75", "message": "Refactor usages of createTypeSymbol()", "committedDate": "2020-09-09T12:23:09Z", "type": "commit"}, {"oid": "0220668a46c34531a99f7fff382de7096956f868", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0220668a46c34531a99f7fff382de7096956f868", "message": "Add origin info to var symbol and refactor its constructor", "committedDate": "2020-09-09T12:23:09Z", "type": "commit"}, {"oid": "f7c2183c208254dc2ccfef74f16c28f41c04bbda", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7c2183c208254dc2ccfef74f16c28f41c04bbda", "message": "Add origin info to constant symbol", "committedDate": "2020-09-09T12:23:09Z", "type": "commit"}, {"oid": "ecfd92bc08e804a6a65ad25d3e6a7cf05c388f4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ecfd92bc08e804a6a65ad25d3e6a7cf05c388f4a", "message": "Add origin info to service symbol", "committedDate": "2020-09-09T12:23:09Z", "type": "commit"}, {"oid": "dfeb9e0f47b70ee6fe6be60199b88ff5d527ac9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfeb9e0f47b70ee6fe6be60199b88ff5d527ac9d", "message": "Add origin info to invokable symbol", "committedDate": "2020-09-09T12:23:10Z", "type": "commit"}, {"oid": "8ae89f1ecfd3b21371e02c0cdb887a64415bdd39", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ae89f1ecfd3b21371e02c0cdb887a64415bdd39", "message": "Add origin info to constructor symbol", "committedDate": "2020-09-09T12:23:10Z", "type": "commit"}, {"oid": "46b5c9735c0a692236c2a469ffd986dd580b2a86", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46b5c9735c0a692236c2a469ffd986dd580b2a86", "message": "Add origin info to operator symbol", "committedDate": "2020-09-09T12:23:10Z", "type": "commit"}, {"oid": "2b3a88d6987172a357c081e06862bfc977568693", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b3a88d6987172a357c081e06862bfc977568693", "message": "Add origin info to var symbol", "committedDate": "2020-09-09T12:23:10Z", "type": "commit"}, {"oid": "95f698ad513be0b5164df13f04e343ae2d032415", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95f698ad513be0b5164df13f04e343ae2d032415", "message": "Add origin info to package symbol", "committedDate": "2020-09-09T12:23:11Z", "type": "commit"}, {"oid": "2ae399530f5dd13710d0184b1e0fd99956c3ef6d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ae399530f5dd13710d0184b1e0fd99956c3ef6d", "message": "Make symbol lookup visitor's position comparison 1-based", "committedDate": "2020-09-09T12:23:11Z", "type": "commit"}, {"oid": "7d6768dab299f5216bd458888a87a302677f9c27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d6768dab299f5216bd458888a87a302677f9c27", "message": "Add position info to worker related identifiers", "committedDate": "2020-09-09T12:23:11Z", "type": "commit"}, {"oid": "1980fe4d2538e30e068a57d9d5c0f9380188623c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1980fe4d2538e30e068a57d9d5c0f9380188623c", "message": "Mark anon type symbols and lambdas as virtual", "committedDate": "2020-09-09T12:23:11Z", "type": "commit"}, {"oid": "fe4260f14c52985bb0aea3cd41e4794b3bd14654", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe4260f14c52985bb0aea3cd41e4794b3bd14654", "message": "Add a flag to BLangNode to distinguish internal models from source constructs", "committedDate": "2020-09-09T12:23:12Z", "type": "commit"}, {"oid": "649bbefe2e8040fe6950f76305bc1eeaec37229f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/649bbefe2e8040fe6950f76305bc1eeaec37229f", "message": "Add position to expr function body", "committedDate": "2020-09-09T12:23:12Z", "type": "commit"}, {"oid": "059638bbc430b34110468c4a173a99615dffcc70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/059638bbc430b34110468c4a173a99615dffcc70", "message": "Improve symbol filtering logic and add basic test cases", "committedDate": "2020-09-09T12:23:12Z", "type": "commit"}, {"oid": "31830e494258160e3f55875916571334a5efe39e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31830e494258160e3f55875916571334a5efe39e", "message": "Update dependencies", "committedDate": "2020-09-09T12:23:12Z", "type": "commit"}, {"oid": "677c4bc65b5a545ffb0b77ef908e3f38c7b11466", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/677c4bc65b5a545ffb0b77ef908e3f38c7b11466", "message": "Fix position and filtering issues in records and objects", "committedDate": "2020-09-09T12:23:12Z", "type": "commit"}, {"oid": "46f064b50b72928f7102f7da125f3be6025d15fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46f064b50b72928f7102f7da125f3be6025d15fc", "message": "Add test cases for symbol lookup in type defs", "committedDate": "2020-09-09T12:23:13Z", "type": "commit"}, {"oid": "a019aca4ae60514df0ffaa60016a55f2d8bc2529", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a019aca4ae60514df0ffaa60016a55f2d8bc2529", "message": "Persist origin info for constants", "committedDate": "2020-09-09T12:23:13Z", "type": "commit"}, {"oid": "b5af003ddfe107257be196f389bafee3d18318d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5af003ddfe107257be196f389bafee3d18318d3", "message": "Sync API changes", "committedDate": "2020-09-09T12:23:13Z", "type": "commit"}, {"oid": "58843c97c6a349eb6e1ca75f6ca3aac2e16f87ff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58843c97c6a349eb6e1ca75f6ca3aac2e16f87ff", "message": "Persist origin info in module vars", "committedDate": "2020-09-09T12:23:13Z", "type": "commit"}, {"oid": "671dcadb6b98885b3f7e6f96fe2e1560a7bfa686", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/671dcadb6b98885b3f7e6f96fe2e1560a7bfa686", "message": "Persist origin info in typedef symbols", "committedDate": "2020-09-09T12:23:14Z", "type": "commit"}, {"oid": "ca4c1719b7c61de53c1cfeec0f74fd69e4739286", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca4c1719b7c61de53c1cfeec0f74fd69e4739286", "message": "Persist origin info for functions", "committedDate": "2020-09-09T12:23:14Z", "type": "commit"}, {"oid": "bb3eeaa90d1574dcc175ae29a52cdcefc241d609", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb3eeaa90d1574dcc175ae29a52cdcefc241d609", "message": "Persist origin info for annotations", "committedDate": "2020-09-09T12:23:14Z", "type": "commit"}, {"oid": "fce61c4207b66691bb5ec16a89d7646504105355", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fce61c4207b66691bb5ec16a89d7646504105355", "message": "Improve symbol lookup logic in imported modules", "committedDate": "2020-09-09T12:23:14Z", "type": "commit"}, {"oid": "22be9be00d314cd20d8861b6bf09180e270c31a9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22be9be00d314cd20d8861b6bf09180e270c31a9", "message": "Fix symbol visibility issue in let expr", "committedDate": "2020-09-09T12:23:14Z", "type": "commit"}, {"oid": "44041b54a98ae44bb05c4aed2567d4ce38485d92", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44041b54a98ae44bb05c4aed2567d4ce38485d92", "message": "Fix checkstyle issues", "committedDate": "2020-09-09T12:23:15Z", "type": "commit"}, {"oid": "fcc1f35de8b60921eff7b786b8959e30ad0c283a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fcc1f35de8b60921eff7b786b8959e30ad0c283a", "message": "Refactor symbol lookup API to accept file name", "committedDate": "2020-09-09T12:23:15Z", "type": "commit"}, {"oid": "3560ba157dabc32dab001cb05e4ce2118aa0bd68", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3560ba157dabc32dab001cb05e4ce2118aa0bd68", "message": "Add position info to public member symbols of a module", "committedDate": "2020-09-09T12:23:15Z", "type": "commit"}, {"oid": "cd133e7c47b43aa22e41631b0f3c19e0260c6b1f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd133e7c47b43aa22e41631b0f3c19e0260c6b1f", "message": "Fix conflicts", "committedDate": "2020-09-09T12:23:15Z", "type": "commit"}, {"oid": "65feea2894016ad7248697ea08356aecbafc0d2f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65feea2894016ad7248697ea08356aecbafc0d2f", "message": "Replace io module based BIR test with a custom balo test", "committedDate": "2020-09-09T12:23:16Z", "type": "commit"}, {"oid": "d6386eba22d2ac9a4d369ccf87e9f6024c08b246", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6386eba22d2ac9a4d369ccf87e9f6024c08b246", "message": "Address review suggestions", "committedDate": "2020-09-09T19:24:56Z", "type": "commit"}, {"oid": "d6386eba22d2ac9a4d369ccf87e9f6024c08b246", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6386eba22d2ac9a4d369ccf87e9f6024c08b246", "message": "Address review suggestions", "committedDate": "2020-09-09T19:24:56Z", "type": "forcePushed"}, {"oid": "02f3decc97f76430b2a79e65e0b5731df9e534d5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02f3decc97f76430b2a79e65e0b5731df9e534d5", "message": "fix invalid constant suggestion for field access expression", "committedDate": "2020-09-10T05:07:57Z", "type": "commit"}, {"oid": "516876f94c2732cd6fd21e243831d635a07dbf7e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/516876f94c2732cd6fd21e243831d635a07dbf7e", "message": "remove unused import", "committedDate": "2020-09-10T05:18:11Z", "type": "commit"}, {"oid": "eccafd7fb0f71b23f31d3f5500f4552b3674318b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eccafd7fb0f71b23f31d3f5500f4552b3674318b", "message": "Merge pull request #22 from nadeeshaan/fix-25328-local\n\nFix invalid constant suggestion for field access expression", "committedDate": "2020-09-10T05:19:19Z", "type": "commit"}]}