{"pr_number": 23829, "pr_title": "Add annotation validation to typeconversion expr", "pr_createdAt": "2020-06-09T04:10:03Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MTQ2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437141463", "bodyText": "I'm not sure if this belongs here. Why are we moving this from SemanticAnalyzer, given that BLangAnnotationAttachment itself is not an expression, and only the expr part is?\nWe already seem to be doing the relevant semantic/constant analyzer based analysis in SemanticAnalyzer, and only seem to be calling into TypeChecker for the expression https://github.com/ballerina-platform/ballerina-lang/pull/23829/files#diff-7123076514bbb67aa85076709d29ee0fL2880.", "author": "MaryamZi", "createdAt": "2020-06-09T05:12:49Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3224,10 +3229,113 @@ public void visit(BLangUnaryExpr unaryExpr) {\n         resultType = types.checkType(unaryExpr, actualType, expType);\n     }\n \n+    public void visit(BLangAnnotationAttachment annAttachmentNode) {", "originalCommit": "3874dacb47e020ea5a2d110eb549a63ea2a4cde2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjQ3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437152471", "bodyText": "What I want to do is execute annotation validation logic from typecheker since that's where we see the annotation on a typeconvertion expression.\nIf not moving to typechecker we will have to move that logic to its own class, but I don't see any compelling advantage of moving to a separate class that moving to typecheker.", "author": "rdhananjaya", "createdAt": "2020-06-09T05:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MTQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NjgwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437156802", "bodyText": "It seems we do call back to SemanticAnalyzer from typechecker.", "author": "rdhananjaya", "createdAt": "2020-06-09T06:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MTQ2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE2NTg5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437165892", "bodyText": "Yeah, there was a similar requirement with streaming and it was decided to have this circular dependency for the time-being instead of moving the logic.", "author": "MaryamZi", "createdAt": "2020-06-09T06:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0MTQ2Mw=="}], "type": "inlineReview"}, {"oid": "ba2f9551893ed385c5896debff9d4f1e253f10f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba2f9551893ed385c5896debff9d4f1e253f10f2", "message": "Validate annotations within typeconversion expr", "committedDate": "2020-06-09T11:48:23Z", "type": "commit"}, {"oid": "31523c5d2a23c2cc17612ba6d456259be7deb641", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31523c5d2a23c2cc17612ba6d456259be7deb641", "message": "Add unit test for annotation in type-conv expr", "committedDate": "2020-06-09T11:48:23Z", "type": "forcePushed"}, {"oid": "53b98ed5318a66ebef43dd944bbabe325e703bd9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53b98ed5318a66ebef43dd944bbabe325e703bd9", "message": "Add unit test for annotation in type-conv expr", "committedDate": "2020-06-09T12:35:32Z", "type": "commit"}, {"oid": "53b98ed5318a66ebef43dd944bbabe325e703bd9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53b98ed5318a66ebef43dd944bbabe325e703bd9", "message": "Add unit test for annotation in type-conv expr", "committedDate": "2020-06-09T12:35:32Z", "type": "forcePushed"}, {"oid": "9463a59cdb67ba5e206aedbf4c913d4d5a2f5fb3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9463a59cdb67ba5e206aedbf4c913d4d5a2f5fb3", "message": "Fix syntax error in websub module", "committedDate": "2020-06-09T16:59:48Z", "type": "forcePushed"}, {"oid": "d124b96fe7d8c5a64fe6caa89cd97e321af1a745", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d124b96fe7d8c5a64fe6caa89cd97e321af1a745", "message": "Fix syntax error in stdlib modules", "committedDate": "2020-06-10T03:51:18Z", "type": "forcePushed"}, {"oid": "487f91f4a658e2e9faf504ec6a982056924c022d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/487f91f4a658e2e9faf504ec6a982056924c022d", "message": "Fix syntax error in stdlib modules", "committedDate": "2020-06-10T06:08:33Z", "type": "forcePushed"}, {"oid": "c19f1cb12777db9a2e97dfd1cb14a6a62aeb5d7f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c19f1cb12777db9a2e97dfd1cb14a6a62aeb5d7f", "message": "Fix syntax error in stdlib modules", "committedDate": "2020-06-10T06:58:02Z", "type": "commit"}, {"oid": "c19f1cb12777db9a2e97dfd1cb14a6a62aeb5d7f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c19f1cb12777db9a2e97dfd1cb14a6a62aeb5d7f", "message": "Fix syntax error in stdlib modules", "committedDate": "2020-06-10T06:58:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNDU3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437924571", "bodyText": "Unused?", "author": "MaryamZi", "createdAt": "2020-06-10T07:43:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -6478,6 +6485,19 @@ private void logUndefinedSymbolError(DiagnosticPos pos, String name) {\n         }\n     }\n \n+    public void checkAnnot(BLangAnnotationAttachment annAttachmentNode, SymbolEnv env) {", "originalCommit": "c19f1cb12777db9a2e97dfd1cb14a6a62aeb5d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNDY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437924699", "bodyText": "Do we need this change?", "author": "MaryamZi", "createdAt": "2020-06-10T07:44:08Z", "path": "misc/testerina/modules/report-tools/package.json", "diffHunk": "@@ -1,6 +1,6 @@\n {\n     \"name\": \"@ballerina/testerina-report\",\n-    \"version\": \"2.0.0-Preview1-M3\",\n+    \"version\": \"2.0.0-SNAPSHOT\",", "originalCommit": "c19f1cb12777db9a2e97dfd1cb14a6a62aeb5d7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyOTY0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437929645", "bodyText": "Looks like a merge issue, ill remove and go though the changed file list again", "author": "rdhananjaya", "createdAt": "2020-06-10T07:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNjU0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437926546", "bodyText": "Shouldn't this fail?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var resultSentToInitClient = caller->respond(<@untaianted> response);\n          \n          \n            \n                    var resultSentToInitClient = caller->respond(<@untainted> response);", "author": "MaryamZi", "createdAt": "2020-06-10T07:47:20Z", "path": "tests/jballerina-integration-test/src/test/resources/http2/src/http2services/10_http_2.0_forwarded_header.bal", "diffHunk": "@@ -37,6 +37,6 @@ service forwardedBackend on new http:Listener(9106, {httpVersion: \"2.0\"}) {\n         http:Response response = new();\n         response.setHeader(\"forwarded\", header);\n         response.setPayload(\"forward is working\");\n-        var resultSentToInitClient = caller->respond(<@untianted> response);\n+        var resultSentToInitClient = caller->respond(<@untaianted> response);", "originalCommit": "c19f1cb12777db9a2e97dfd1cb14a6a62aeb5d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e62edb24c32010140b49b379b67d36606233f09c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e62edb24c32010140b49b379b67d36606233f09c", "message": "Apply reivew suggestions", "committedDate": "2020-06-10T07:58:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0NDExMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437944113", "bodyText": "This will allow using <@tainted> too right? I hope that's intentional? Do we have tests for that flow?\nSomething like\npublic function main() {\n    int x = 1;\n    foo(<@tainted> x);\n}\n\nfunction foo(@untainted int i) {\n    \n}", "author": "MaryamZi", "createdAt": "2020-06-10T08:16:54Z", "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "diffHunk": "@@ -15,7 +15,7 @@\n // under the License.\n \n # Denote that the return value is tainted.\n-public const annotation tainted on parameter, return, source listener, source var;\n+public const annotation tainted on parameter, return, source listener, source var, source type;", "originalCommit": "e62edb24c32010140b49b379b67d36606233f09c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4NTYxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r437985610", "bodyText": "We already had logic [1] in taint analyzer to untaint for <@untaint>, looks like we don't have any test for it, I'll add.\n[1] - \n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java\n    \n    \n         Line 1265\n      in\n      53b98ed\n    \n    \n    \n    \n\n        \n          \n           TaintedStatus annotStatus = getTaintedStatusBasedOnAnnotations(conversionExpr.annAttachments);", "author": "rdhananjaya", "createdAt": "2020-06-10T09:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0NDExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0NzE2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23829#discussion_r438047164", "bodyText": "Test case added", "author": "rdhananjaya", "createdAt": "2020-06-10T11:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0NDExMw=="}], "type": "inlineReview"}, {"oid": "e3bb4814852c6a2c1c9cfb44dfde495b44fa1ced", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3bb4814852c6a2c1c9cfb44dfde495b44fa1ced", "message": "Add test case for <@taint>", "committedDate": "2020-06-10T11:17:48Z", "type": "commit"}]}