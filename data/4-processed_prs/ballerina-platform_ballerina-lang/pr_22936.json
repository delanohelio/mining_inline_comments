{"pr_number": 22936, "pr_title": "Add list constructor expression support", "pr_createdAt": "2020-04-28T08:42:32Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936", "timeline": [{"oid": "fb834a069db4ff01da64048ca0c4dff315fd45c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb834a069db4ff01da64048ca0c4dff315fd45c3", "message": "Add list-constructor-expr support", "committedDate": "2020-04-23T11:18:51Z", "type": "commit"}, {"oid": "b01cd1eb26e33d38b66c8afb6809605f5010a382", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b01cd1eb26e33d38b66c8afb6809605f5010a382", "message": "Add test cases to validate syntax", "committedDate": "2020-04-23T12:03:08Z", "type": "commit"}, {"oid": "e0220c46d7dfda4b2ee504a728fb6ffe893dbb06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0220c46d7dfda4b2ee504a728fb6ffe893dbb06", "message": "Refactor parsing with reusing parseListeners() method", "committedDate": "2020-04-24T15:41:16Z", "type": "commit"}, {"oid": "fa665415ad0995ddb19b6e65299116098f51f64a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa665415ad0995ddb19b6e65299116098f51f64a", "message": "Add error recovery", "committedDate": "2020-04-24T15:45:42Z", "type": "commit"}, {"oid": "c342949fffbfbd2a4ea6017254e35b6836583cbe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c342949fffbfbd2a4ea6017254e35b6836583cbe", "message": "Add recovery tests", "committedDate": "2020-04-25T06:28:38Z", "type": "commit"}, {"oid": "0d0b43889eb849a22af4101c17bc6c596c25e0fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0d0b43889eb849a22af4101c17bc6c596c25e0fc", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into list-constructor-expr\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/ParserRuleContext.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java", "committedDate": "2020-04-28T06:46:13Z", "type": "commit"}, {"oid": "103fa42a98705f6708f3699693077e2f345192a2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/103fa42a98705f6708f3699693077e2f345192a2", "message": "Fix error recovery", "committedDate": "2020-04-28T08:33:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ0MzIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416443237", "bodyText": "I reuse the parseListeners() here which has the following definition.\n<code>expression-list := expression (, expression)*</code>\nShall I refactor its name to parseExpressionsList() and corresponding LISTNERS_LIST ctx name to EXPRESSIONS_LIST in error handler.\nOr Let's keep keep those names intact ?", "author": "lochana-chathura", "createdAt": "2020-04-28T08:51:20Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -6847,4 +6852,39 @@ private STNode parseTrapKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse list constructor expression.\n+     * <p>\n+     * <code>\n+     * list-constructor-expr := [ [ expr-list ] ]\n+     * <br/>\n+     * expr-list := expression (, expression)*\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseListConstructorExpr() {\n+        startContext(ParserRuleContext.LIST_CONSTRUCTOR);\n+        STNode openBracket = parseOpenBracket();\n+        STNode expressions = parseOptionalExpressionsList();\n+        STNode closeBracket = parseCloseBracket();\n+        endContext();\n+        return STNodeFactory.createListConstructorExpressionNode(openBracket, expressions, closeBracket);\n+    }\n+\n+    /**\n+     * Parse optional expression list.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseOptionalExpressionsList() {\n+        STToken nextToken = peek();\n+\n+        // Return an empty list if list is empty\n+        if (isEndOfListenersList(nextToken.kind)) {\n+            return STNodeFactory.createNodeList(new ArrayList<>());\n+        }\n+        return parseListeners();", "originalCommit": "103fa42a98705f6708f3699693077e2f345192a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4NDU0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416484548", "bodyText": "I think we would need two contexts, to make error recovery easy. For example, end of the listeners-list is the {, whereas end of the list constructor is ].\nBut +1 for reusing the same parser logic. May be we can extract the common code and re-use it?", "author": "SupunS", "createdAt": "2020-04-28T09:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ0MzIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5Njc2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416496763", "bodyText": "{ ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.EXPRESSION }", "author": "SupunS", "createdAt": "2020-04-28T10:15:04Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -261,6 +261,9 @@\n     private static final ParserRuleContext[] TYPEDESC_RHS = {ParserRuleContext.NON_RECURSIVE_TYPE,\n             ParserRuleContext.ARRAY_TYPE_DESCRIPTOR, ParserRuleContext.OPTIONAL_TYPE_DESCRIPTOR };\n \n+    private static final ParserRuleContext[] LIST_CONSTRUCTOR_RHS =\n+            { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.LISTENERS_LIST };", "originalCommit": "103fa42a98705f6708f3699693077e2f345192a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5ODMzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416498330", "bodyText": "Can a close-brace be present in a list-constructor context?", "author": "SupunS", "createdAt": "2020-04-28T10:17:41Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2297,14 +2309,16 @@ private ParserRuleContext getNextRuleForCloseBrace(int nextLookahead) {\n             case FORK_STMT:\n                 endContext(); // end fork-statement\n                 return ParserRuleContext.STATEMENT;\n+            case LIST_CONSTRUCTOR:\n+                return ParserRuleContext.CLOSE_BRACKET;", "originalCommit": "103fa42a98705f6708f3699693077e2f345192a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxOTQyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416519429", "bodyText": "This is a mistaken addition from a previous commit of mine. I'll fix.", "author": "lochana-chathura", "createdAt": "2020-04-28T10:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5ODMzMA=="}], "type": "inlineReview"}, {"oid": "dde2f680381ed7091990dd246f68c3d12e8146b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dde2f680381ed7091990dd246f68c3d12e8146b6", "message": "Change syntax tree descriptor and regenerate tree", "committedDate": "2020-04-28T12:03:47Z", "type": "commit"}, {"oid": "c090ef90a5a8adec56a2802d43fe331854abf7ff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c090ef90a5a8adec56a2802d43fe331854abf7ff", "message": "Refactor parseOptionalExpressionsList()", "committedDate": "2020-04-28T12:45:19Z", "type": "commit"}, {"oid": "83950f2ec60136f5a3f3936905b0f4929597e72a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/83950f2ec60136f5a3f3936905b0f4929597e72a", "message": "Update test cases for new changes", "committedDate": "2020-04-28T12:45:56Z", "type": "commit"}]}