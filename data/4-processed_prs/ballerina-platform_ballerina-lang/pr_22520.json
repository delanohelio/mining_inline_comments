{"pr_number": 22520, "pr_title": "Refactor API doc of HTTP module", "pr_createdAt": "2020-04-08T10:30:20Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Njc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408996786", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:03:18Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -370,44 +370,44 @@ public type CircuitBreakerClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n-        // No need to check for response as we already check for the response in submit method\n+        // No need to check for the response as we already check for the response in the submit method\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n+    # Circuit breaking is not supported. The default value is the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP `PushPromise` message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails\n     public function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n     # Retrieves the promised server push `Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `http:ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODk1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998950", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Njc4Ng=="}], "type": "inlineReview"}, {"oid": "4936bc26e13d7a7afc845208f221f5802d631e23", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4936bc26e13d7a7afc845208f221f5802d631e23", "message": "Update stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:03:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NzI3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408997277", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:04:07Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -68,7 +68,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NzQ0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408997446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:04:23Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -84,7 +84,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NzU5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408997592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:04:38Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -100,7 +100,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODE1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:05:37Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -115,7 +115,7 @@ public type RetryClient client object {\n     #\n     # + path - Resource path\n     # + request - An HTTP inbound request message\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODM1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998359", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:05:56Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -132,8 +132,8 @@ public type RetryClient client object {\n     # + httpVerb - The HTTP verb value\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODUyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998528", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:06:13Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -149,8 +149,8 @@ public type RetryClient client object {\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODY5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998691", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message, or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:06:31Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -165,8 +165,8 @@ public type RetryClient client object {\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODkyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998923", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:06:54Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -182,8 +182,8 @@ public type RetryClient client object {\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "57f7b32882ab70a0cb04264cbc924ecad49c5672", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/57f7b32882ab70a0cb04264cbc924ecad49c5672", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:07:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408999074", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:07:10Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -198,8 +198,8 @@ public type RetryClient client object {\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTU5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408999598", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t# The `RetryClient.submit()` function does not give out a `http:Response` as the result.\n          \n          \n            \n            \t# Rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n          \n          \n            \n                # The `RetryClient.submit()` function does not give out a `http:Response` as the result.\n          \n          \n            \n                # Rather it returns an `http:HttpFuture`, which can be used to do further interactions with the endpoint.", "author": "daneshk", "createdAt": "2020-04-15T17:07:59Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -211,14 +211,14 @@ public type RetryClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-\t#cThe `RetryClient.submit()` function does not give out a `Response` as the result,\n-\t#crather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+\t# The `RetryClient.submit()` function does not give out a `http:Response` as the result.\n+\t# Rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzk2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409007967", "bodyText": "Need a comma before \"which\".", "author": "praneesha", "createdAt": "2020-04-15T17:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTc1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408999754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation or else an `http:ClientError` if the submission fails", "author": "daneshk", "createdAt": "2020-04-15T17:08:14Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -211,14 +211,14 @@ public type RetryClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-\t#cThe `RetryClient.submit()` function does not give out a `Response` as the result,\n-\t#crather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+\t# The `RetryClient.submit()` function does not give out a `http:Response` as the result.\n+\t# Rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzgyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409007820", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408999991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:08:40Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409007777", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTk5MQ=="}], "type": "inlineReview"}, {"oid": "c8f1a314f853b9e215b579a5c7d8f75143dd357b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8f1a314f853b9e215b579a5c7d8f75143dd357b", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:08:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDQ1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409000454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:09:16Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n-        // We do not need to retry this as we already check the response when submit is called.\n+        // This need not be retried as the response is already checked when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzY5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409007692", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDYzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409000636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:09:35Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n-        // We do not need to retry this as we already check the response when submit is called.\n+        // This need not be retried as the response is already checked when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNzYxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409007610", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMDg5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409000898", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t# When an `http:PushPromise` is rejected, there is no chance of fetching a promised response using the rejected promise.\n          \n          \n            \n                # When an `http:PushPromise` is rejected, there is no chance of fetching a promised response using the rejected promise.", "author": "daneshk", "createdAt": "2020-04-15T17:09:57Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n-        // We do not need to retry this as we already check the response when submit is called.\n+        // This need not be retried as the response is already checked when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n     public remote function getPromisedResponse(PushPromise promise) returns Response|ClientError {\n         return self.httpClient->getPromisedResponse(promise);\n     }\n \n-    # Rejects a `PushPromise`.\n-\t# When a `PushPromise` is rejected, there is no chance of fetching a promised response using the rejected promise.\n+    # Rejects an `http:PushPromise`.\n+\t# When an `http:PushPromise` is rejected, there is no chance of fetching a promised response using the rejected promise.", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a9d636cddf2fd33154059d0eec00ae447d5ec16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a9d636cddf2fd33154059d0eec00ae447d5ec16", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:10:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409001114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Chosen `http:Client` from the algorithm or an `http:ClientError` for a failure in\n          \n          \n            \n                # + return - Chosen `http:Client` from the algorithm or else an `http:ClientError` for a failure in", "author": "daneshk", "createdAt": "2020-04-15T17:10:19Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_round_robin_rule.bal", "diffHunk": "@@ -21,10 +21,10 @@ public type LoadBalancerRoundRobinRule object {\n \n     public int index = 0;\n \n-    # Provides an HTTP client which is chosen according to the round robin algorithm.\n+    # Provides an HTTP client, which is chosen according to the round robin algorithm.\n     #\n-    # + loadBalanceCallerActionsArray - Array of HTTP clients which needs to be load balanced\n-    # + return - Chosen `Client` from the algorithm or an `http:ClientError` for a failure in\n+    # + loadBalanceCallerActionsArray - Array of HTTP clients, which needs to be load balanced\n+    # + return - Chosen `http:Client` from the algorithm or an `http:ClientError` for a failure in", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409001481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation or else an `http:ClientError` if the submission", "author": "daneshk", "createdAt": "2020-04-15T17:10:54Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -154,8 +154,8 @@ public type LoadBalanceClient client object {\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f02184fa27e1064fde31a86b28be30517995bb47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f02184fa27e1064fde31a86b28be30517995bb47", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:11:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMTg1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409001858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:11:34Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -165,7 +165,7 @@ public type LoadBalanceClient client object {\n \n     # The getResponse implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa7fffd281d0811abe3c5a7b5a21f9058d07814f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa7fffd281d0811abe3c5a7b5a21f9058d07814f", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:11:37Z", "type": "commit"}, {"oid": "22279e78ad79ff4267fda57d8082412eb11342f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22279e78ad79ff4267fda57d8082412eb11342f5", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:12:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjQ3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409002473", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:12:34Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -175,15 +175,15 @@ public type LoadBalanceClient client object {\n \n     # The hasPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n     # The getNextPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjcyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409002724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:12:56Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -193,8 +193,8 @@ public type LoadBalanceClient client object {\n \n     # The getPromisedResponse implementation of the LoadBalancer Connector.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `http:ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409002974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `error` if one occurred during detaching of a service or `()`\n          \n          \n            \n                # + return - An `error` if one occurred during detaching of a service or else `()`", "author": "daneshk", "createdAt": "2020-04-15T17:13:20Z", "path": "stdlib/http/src/main/ballerina/src/http/service_endpoint.bal", "diffHunk": "@@ -66,10 +66,10 @@ public type Listener object {\n     }\n \n     # Detaches a Http or WebSocket service from the listener. Note that detaching a WebSocket service would not affect\n-    # the functionality of the existing connections.\n+    # The functionality of the existing connections.\n     #\n     # + s - The service to be detached\n-    # + return - error if occurred during detaching of a service or `nil`\n+    # + return - An `error` if one occurred during detaching of a service or `()`", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b8db7777ba251a962ff38b6df2199a152eff4761", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8db7777ba251a962ff38b6df2199a152eff4761", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:13:43Z", "type": "commit"}, {"oid": "b5e20f0a214c56210d755dbce747b4d6eb264522", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5e20f0a214c56210d755dbce747b4d6eb264522", "message": "Update stdlib/http/src/main/ballerina/src/http/service_endpoint.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:15:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNDUwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409004502", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # The `Client.submit()` function does not give out a `Response` as the result.\n          \n          \n            \n                # The `Client->submit()` function does not give out a `http:Response` as the result.", "author": "daneshk", "createdAt": "2020-04-15T17:15:50Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -160,14 +160,14 @@ public type Client client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `Client.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `Client.submit()` function does not give out a `Response` as the result.", "originalCommit": "b8db7777ba251a962ff38b6df2199a152eff4761", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "270952285db988dcff284876f3fc136bdd8b0cea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/270952285db988dcff284876f3fc136bdd8b0cea", "message": "Update stdlib/http/src/main/ballerina/src/http/client_endpoint.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:16:01Z", "type": "commit"}, {"oid": "dc376c6510da08016b8e0017fc74ab748d657257", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dc376c6510da08016b8e0017fc74ab748d657257", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:16:50Z", "type": "commit"}, {"oid": "05c9ad1877562bcd783a1341a0ff7bfe6ed61f6b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/05c9ad1877562bcd783a1341a0ff7bfe6ed61f6b", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:17:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNTg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409005867", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return  - `true` if the attributes of the cookie are in the correct format, else `http:InvalidCookieError`\n          \n          \n            \n                # + return  - `true` if the attributes of the cookie are in the correct format or else an `http:InvalidCookieError`", "author": "daneshk", "createdAt": "2020-04-15T17:18:01Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -66,7 +66,7 @@ public type Cookie object {\n \n     # Checks the validity of the attributes of the cookie.\n     #\n-    # + return  - set to `true` if the attributes of the cookie are in the correct format. Otherwise, returns an `error`.\n+    # + return  - `true` if the attributes of the cookie are in the correct format, else `http:InvalidCookieError`", "originalCommit": "b8db7777ba251a962ff38b6df2199a152eff4761", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNjQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409006481", "bodyText": "Need to say \"An\".", "author": "praneesha", "createdAt": "2020-04-15T17:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNTg2Nw=="}], "type": "inlineReview"}, {"oid": "e069a365d8e32484283fbee3b6cf7e7209eb1c79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e069a365d8e32484283fbee3b6cf7e7209eb1c79", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:18:09Z", "type": "commit"}, {"oid": "e9fdde70d92a4f41975a93d140b714a909b42690", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9fdde70d92a4f41975a93d140b714a909b42690", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:19:14Z", "type": "commit"}, {"oid": "4b49199d5248c506d3371b98a8a521ec25ea3141", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b49199d5248c506d3371b98a8a521ec25ea3141", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_round_robin_rule.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:19:50Z", "type": "commit"}, {"oid": "df34c1db1c559822f4bc928010a742f8c61225f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df34c1db1c559822f4bc928010a742f8c61225f5", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:20:23Z", "type": "commit"}, {"oid": "6d53ea157dac8707d3f847669c12e67ce2b7b0f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d53ea157dac8707d3f847669c12e67ce2b7b0f6", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:21:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwOTczOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409009739", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Returns the resource-level and service-level authentication annotations\n          \n          \n            \n            # + return - The resource-level and service-level authentication annotations", "author": "daneshk", "createdAt": "2020-04-15T17:24:28Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -221,7 +221,7 @@ function getServiceAuthConfig(FilterContext context) returns ServiceAuth? {\n     }\n }\n \n-# Retrieve the authentication annotation value for resource level and service level.\n+# Retrieves the authentication annotation value for the resource level and service level.\n #\n # + context - The `FilterContext` instance\n # + return - Returns the resource-level and service-level authentication annotations", "originalCommit": "6d53ea157dac8707d3f847669c12e67ce2b7b0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee189c89c36802c0d0377f03c110da7deb5286c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee189c89c36802c0d0377f03c110da7deb5286c8", "message": "Update stdlib/http/src/main/ballerina/src/http/client_endpoint.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:35:03Z", "type": "commit"}, {"oid": "0226c8c8286dc00e063c20602b31e221e12ae804", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0226c8c8286dc00e063c20602b31e221e12ae804", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/utils.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:39:29Z", "type": "commit"}, {"oid": "76812afb8d39bb729bfebfff71e96989990f06dd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76812afb8d39bb729bfebfff71e96989990f06dd", "message": "Update stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:45:16Z", "type": "commit"}, {"oid": "6839c3ffc355e0bb41e929b42b850065a0fc6352", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6839c3ffc355e0bb41e929b42b850065a0fc6352", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:45:34Z", "type": "commit"}, {"oid": "3e6a6dad355b93c5ddc82ac4d80c0a01b1114916", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e6a6dad355b93c5ddc82ac4d80c0a01b1114916", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:45:49Z", "type": "commit"}, {"oid": "83ef9d7fc87f536371258570094c715be01a81d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/83ef9d7fc87f536371258570094c715be01a81d1", "message": "Update stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:46:09Z", "type": "commit"}, {"oid": "6d8085949924ac536b319478f0d10a1d9ba22df8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d8085949924ac536b319478f0d10a1d9ba22df8", "message": "Apply suggestions from code review\r\n\r\nResolve suggestion", "committedDate": "2020-04-15T17:48:35Z", "type": "commit"}, {"oid": "a09099ebdfbebe6aa48ff5b3e2352a45b9725b2c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a09099ebdfbebe6aa48ff5b3e2352a45b9725b2c", "message": "Apply suggestions from code review\r\n\r\nResolve suggestions", "committedDate": "2020-04-15T17:49:37Z", "type": "commit"}, {"oid": "4e30d9b82504cb3c8d9b9e3ca8b33b3e14fc5e84", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e30d9b82504cb3c8d9b9e3ca8b33b3e14fc5e84", "message": "Apply suggestions from code review\r\n\r\nResolve suggestions", "committedDate": "2020-04-15T17:52:01Z", "type": "commit"}, {"oid": "97383f836830baa28701c521dbd3186fc1d12c8e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97383f836830baa28701c521dbd3186fc1d12c8e", "message": "Apply suggestions from code review\r\n\r\nResolve suggestions", "committedDate": "2020-04-15T17:55:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMzM5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r405433392", "bodyText": "Shall we update with guideline no. 11? Please check other places as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + req - The `Request` instance\n          \n          \n            \n                # + req - The `http:Request` instance", "author": "ldclakmal", "createdAt": "2020-04-08T10:48:57Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -35,8 +35,8 @@ public type BasicAuthHandler object {\n \n     # Checks if the provided request can be authenticated with the Basic Auth header.\n     #\n-    # + req - The request object\n-    # + return - Returns `true` if authentication is successful. Else, returns `false`\n+    # + req - The `Request` instance", "originalCommit": "687371c7b4cec1fc50d6070151f14984a1ffe63a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyODE2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r406928166", "bodyText": "done", "author": "ThishaniLucas", "createdAt": "2020-04-10T20:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMzM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzc1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r405617753", "bodyText": "Can you add code snippets to each of the functions?", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-04-08T15:35:24Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -188,7 +188,7 @@ public type CookieClient object {\n     # Retrieves the `Response` for a previously-submitted request.", "originalCommit": "687371c7b4cec1fc50d6070151f14984a1ffe63a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwNzIzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408707233", "bodyText": "In most cases, the functions themselves are descriptive and straight forward. And in some cases, there is no point in using the functions isolate. Therefore, IMHO, there's no real need for code snippets in the HTTP module. The scenarios are covered in the Module.md and BBEs.", "author": "ThishaniLucas", "createdAt": "2020-04-15T09:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzc1Mw=="}], "type": "inlineReview"}, {"oid": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "message": "Refactor API doc of HTTP module", "committedDate": "2020-04-10T20:26:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTgyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r406999820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + context - `http:FilterContext` instance\n          \n          \n            \n                # + context - The `http:FilterContext` instance", "author": "praneesha", "createdAt": "2020-04-11T01:28:04Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authn_filter.bal", "diffHunk": "@@ -34,7 +34,7 @@ public type AuthnFilter object {\n     #\n     # + caller - Caller for outbound HTTP responses\n     # + request - An inbound HTTP request message\n-    # + context - `FilterContext` instance\n+    # + context - `http:FilterContext` instance", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTgzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r406999837", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + authzHandler - `http:AuthzHandler` instance for handling authorization\n          \n          \n            \n                # + authzHandler - The `http:AuthzHandler` instance for handling authorization", "author": "praneesha", "createdAt": "2020-04-11T01:28:21Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -27,7 +27,7 @@ public type AuthzFilter object {\n \n     # Initializes the `AuthzFilter` object.\n     #\n-    # + authzHandler - `AuthzHandler` instance for handling authorization\n+    # + authzHandler - `http:AuthzHandler` instance for handling authorization", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTg1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r406999854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + context - `http:FilterContext` instance\n          \n          \n            \n                # + context - The `http:FilterContext` instance", "author": "praneesha", "createdAt": "2020-04-11T01:28:31Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -38,7 +38,7 @@ public type AuthzFilter object {\n     #\n     # + caller - Caller for outbound HTTP responses\n     # + request - An inbound HTTP request message\n-    # + context - `FilterContext` instance\n+    # + context - `http:FilterContext` instance", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTkwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r406999908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authorized - Authorization status for the request, or `http:AuthorizationError` if error occurred\n          \n          \n            \n            # + authorized - Authorization status for the request or else an `http:AuthorizationError` if an error occurred", "author": "praneesha", "createdAt": "2020-04-11T01:28:50Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -66,7 +66,7 @@ public type AuthzFilter object {\n # Verifies if the authorization is successful. If not responds to the user.\n #\n # + caller - Caller for outbound HTTP response\n-# + authorized - Authorization status for the request, or `AuthorizationError` if error occurred\n+# + authorized - Authorization status for the request, or `http:AuthorizationError` if error occurred", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r406999991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n          \n          \n            \n            # + positiveAuthzCache - The `cache:Cache` instance, which holds positive authorizations", "author": "praneesha", "createdAt": "2020-04-11T01:29:04Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -21,26 +21,26 @@ import ballerina/runtime;\n \n # Representation of Authorization Handler for HTTP.\n #\n-# + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n-# + negativeAuthzCache - `Cache` instance, which is cache negative authorizations\n+# + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTk5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r406999999", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n          \n          \n            \n            # + negativeAuthzCache - The `cache:Cache` instance, which holds negative authorizations", "author": "praneesha", "createdAt": "2020-04-11T01:29:15Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -21,26 +21,26 @@ import ballerina/runtime;\n \n # Representation of Authorization Handler for HTTP.\n #\n-# + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n-# + negativeAuthzCache - `Cache` instance, which is cache negative authorizations\n+# + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+# + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDAwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n          \n          \n            \n                # + positiveAuthzCache - The `cache:Cache` instance, which holds positive authorizations", "author": "praneesha", "createdAt": "2020-04-11T01:29:27Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -21,26 +21,26 @@ import ballerina/runtime;\n \n # Representation of Authorization Handler for HTTP.\n #\n-# + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n-# + negativeAuthzCache - `Cache` instance, which is cache negative authorizations\n+# + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+# + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n public type AuthzHandler object {\n \n     public cache:Cache? positiveAuthzCache;\n     public cache:Cache? negativeAuthzCache;\n \n     # Initializes the `AuthzHandler` object.\n     #\n-    # + positiveAuthzCache - `Cache` instance, which keeps positive authorizations\n-    # + negativeAuthzCache - `Cache` instance, which keeps negative authorizations\n+    # + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDAzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000034", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n          \n          \n            \n                # + negativeAuthzCache - The `cache:Cache` instance, which holds negative authorizations", "author": "praneesha", "createdAt": "2020-04-11T01:29:40Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -21,26 +21,26 @@ import ballerina/runtime;\n \n # Representation of Authorization Handler for HTTP.\n #\n-# + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n-# + negativeAuthzCache - `Cache` instance, which is cache negative authorizations\n+# + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+# + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n public type AuthzHandler object {\n \n     public cache:Cache? positiveAuthzCache;\n     public cache:Cache? negativeAuthzCache;\n \n     # Initializes the `AuthzHandler` object.\n     #\n-    # + positiveAuthzCache - `Cache` instance, which keeps positive authorizations\n-    # + negativeAuthzCache - `Cache` instance, which keeps negative authorizations\n+    # + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+    # + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDA1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000059", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + req - `http:Request` instance\n          \n          \n            \n                # + req - The `http:Request` instance", "author": "praneesha", "createdAt": "2020-04-11T01:29:48Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -21,26 +21,26 @@ import ballerina/runtime;\n \n # Representation of Authorization Handler for HTTP.\n #\n-# + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n-# + negativeAuthzCache - `Cache` instance, which is cache negative authorizations\n+# + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+# + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n public type AuthzHandler object {\n \n     public cache:Cache? positiveAuthzCache;\n     public cache:Cache? negativeAuthzCache;\n \n     # Initializes the `AuthzHandler` object.\n     #\n-    # + positiveAuthzCache - `Cache` instance, which keeps positive authorizations\n-    # + negativeAuthzCache - `Cache` instance, which keeps negative authorizations\n+    # + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+    # + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n     public function __init(cache:Cache? positiveAuthzCache, cache:Cache? negativeAuthzCache) {\n         self.positiveAuthzCache = positiveAuthzCache;\n         self.negativeAuthzCache = negativeAuthzCache;\n     }\n \n     # Checks if the request can be authorized.\n     #\n-    # + req - `Request` instance\n-    # + return - `true` if can be authorized, else `false`, or `AuthorizationError` if error occurred\n+    # + req - `http:Request` instance", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if can be authorized, else `false`, or `http:AuthorizationError` if error occurred\n          \n          \n            \n                # + return - `true` if it can be authorized, `false` otherwise, or else an `http:AuthorizationError` if an error occurred", "author": "praneesha", "createdAt": "2020-04-11T01:30:24Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -21,26 +21,26 @@ import ballerina/runtime;\n \n # Representation of Authorization Handler for HTTP.\n #\n-# + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n-# + negativeAuthzCache - `Cache` instance, which is cache negative authorizations\n+# + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+# + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n public type AuthzHandler object {\n \n     public cache:Cache? positiveAuthzCache;\n     public cache:Cache? negativeAuthzCache;\n \n     # Initializes the `AuthzHandler` object.\n     #\n-    # + positiveAuthzCache - `Cache` instance, which keeps positive authorizations\n-    # + negativeAuthzCache - `Cache` instance, which keeps negative authorizations\n+    # + positiveAuthzCache - `cache:Cache` instance that holds positive authorizations\n+    # + negativeAuthzCache - `cache:Cache` instance that holds negative authorizations\n     public function __init(cache:Cache? positiveAuthzCache, cache:Cache? negativeAuthzCache) {\n         self.positiveAuthzCache = positiveAuthzCache;\n         self.negativeAuthzCache = negativeAuthzCache;\n     }\n \n     # Checks if the request can be authorized.\n     #\n-    # + req - `Request` instance\n-    # + return - `true` if can be authorized, else `false`, or `AuthorizationError` if error occurred\n+    # + req - `http:Request` instance\n+    # + return - `true` if can be authorized, else `false`, or `http:AuthorizationError` if error occurred", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000157", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authentication is successful, else `false`\n          \n          \n            \n                # + return - `true` if authentication is successful or else `false`", "author": "praneesha", "createdAt": "2020-04-11T01:30:48Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -28,15 +28,15 @@ public type BasicAuthHandler object {\n \n     # Initializes the `BasicAuthHandler` object.\n     #\n-    # + authProvider - The `InboundAuthProvider` instance or the `OutboundAuthProvider` instance\n+    # + authProvider - The `auth:InboundAuthProvider` instance or the `auth:OutboundAuthProvider` instance\n     public function __init(auth:InboundAuthProvider|auth:OutboundAuthProvider authProvider) {\n         self.authProvider = authProvider;\n     }\n \n     # Checks if the provided request can be authenticated with the Basic Auth header.\n     #\n-    # + req - The request object\n-    # + return - Returns `true` if authentication is successful. Else, returns `false`\n+    # + req - The `http:Request` instance\n+    # + return - `true` if authentication is successful, else `false`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDIwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000204", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if it is possible to authenticate with Basic Auth, else `false` or\n          \n          \n            \n                # + return - `true` if it is possible to authenticate with Basic Auth,`false` otherwise, or else", "author": "praneesha", "createdAt": "2020-04-11T01:31:18Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -47,9 +47,9 @@ public type BasicAuthHandler object {\n \n     # Authenticates the incoming request with the use of the credentials passed as the Basic Auth header.\n     #\n-    # + req - The request object\n-    # + return - Returns `true` if it is possible to authenticate with Basic Auth. Else, returns `false` or\n-    # the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - `true` if it is possible to authenticate with Basic Auth, else `false` or", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDIxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000218", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # the `http:AuthenticationError` in case of an error\n          \n          \n            \n                # an `http:AuthenticationError` in case of an error", "author": "praneesha", "createdAt": "2020-04-11T01:31:28Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -47,9 +47,9 @@ public type BasicAuthHandler object {\n \n     # Authenticates the incoming request with the use of the credentials passed as the Basic Auth header.\n     #\n-    # + req - The request object\n-    # + return - Returns `true` if it is possible to authenticate with Basic Auth. Else, returns `false` or\n-    # the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - `true` if it is possible to authenticate with Basic Auth, else `false` or\n+    # the `http:AuthenticationError` in case of an error", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDI3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n          \n          \n            \n                # + return - The updated `http:Request` instance or else an `http:AuthenticationError` in case of an error", "author": "praneesha", "createdAt": "2020-04-11T01:32:03Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -69,8 +69,8 @@ public type BasicAuthHandler object {\n \n     # Prepares the request with the Basic Auth header.\n     #\n-    # + req - The`Request` instance\n-    # + return - Returns the updated `Request` instance or the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDI5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000296", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Inspects the request and response, and calls the Auth provider for inspection.\n          \n          \n            \n                # Inspects the request and response and calls the Auth provider for inspection.", "author": "praneesha", "createdAt": "2020-04-11T01:32:12Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -86,11 +86,11 @@ public type BasicAuthHandler object {\n         }\n     }\n \n-    # Inspects the request and response and calls the Auth provider for inspection.\n+    # Inspects the request and response, and calls the Auth provider for inspection.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDMyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000325", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,\n          \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error", "author": "praneesha", "createdAt": "2020-04-11T01:32:31Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -86,11 +86,11 @@ public type BasicAuthHandler object {\n         }\n     }\n \n-    # Inspects the request and response and calls the Auth provider for inspection.\n+    # Inspects the request and response, and calls the Auth provider for inspection.\n     #\n-    # + req - The `Request` instance\n-    # + resp - The `Response` instance\n-    # + return - Returns the updated `Request` instance, the `AuthenticationError` in case of an error,\n+    # + req - The `http:Request` instance\n+    # + resp - The `http:Response` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # or `()` if nothing is to be returned\n          \n          \n            \n                # or else `()` if nothing is to be returned", "author": "praneesha", "createdAt": "2020-04-11T01:32:49Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -86,11 +86,11 @@ public type BasicAuthHandler object {\n         }\n     }\n \n-    # Inspects the request and response and calls the Auth provider for inspection.\n+    # Inspects the request and response, and calls the Auth provider for inspection.\n     #\n-    # + req - The `Request` instance\n-    # + resp - The `Response` instance\n-    # + return - Returns the updated `Request` instance, the `AuthenticationError` in case of an error,\n+    # + req - The `http:Request` instance\n+    # + resp - The `http:Response` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,\n     # or `()` if nothing is to be returned", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDM4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000382", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if can be authenticated, else `false`\n          \n          \n            \n                # + return - `true` if it can be authenticated or else `false`", "author": "praneesha", "createdAt": "2020-04-11T01:33:04Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/bearer_auth_handler.bal", "diffHunk": "@@ -28,15 +28,15 @@ public type BearerAuthHandler object {\n \n     # Initializes the `BearerAuthHandler` object.\n     #\n-    # + authProvider - The `InboundAuthProvider` instance or the `OutboundAuthProvider` instance\n+    # + authProvider - The `auth:InboundAuthProvider` instance or the `auth:OutboundAuthProvider` instance\n     public function __init(auth:InboundAuthProvider|auth:OutboundAuthProvider authProvider) {\n         self.authProvider = authProvider;\n     }\n \n     # Checks if the request can be authenticated with the Bearer Auth header.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if can be authenticated. Else, returns `false`\n+    # + req - The `http:Request` instance\n+    # + return - `true` if can be authenticated, else `false`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDQwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000405", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authenticated successfully, else `false`\n          \n          \n            \n                # + return - `true` if authenticated successfully, `false` otherwise,", "author": "praneesha", "createdAt": "2020-04-11T01:33:26Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/bearer_auth_handler.bal", "diffHunk": "@@ -47,9 +47,9 @@ public type BearerAuthHandler object {\n \n     # Authenticates the incoming request with the use of credentials passed as the Bearer Auth header.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if authenticated successfully. Else, returns `false`\n-    # or the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - `true` if authenticated successfully, else `false`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # or the `http:AuthenticationError` in case of an error\n          \n          \n            \n                # or else an `http:AuthenticationError` in case of an error", "author": "praneesha", "createdAt": "2020-04-11T01:33:55Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/bearer_auth_handler.bal", "diffHunk": "@@ -47,9 +47,9 @@ public type BearerAuthHandler object {\n \n     # Authenticates the incoming request with the use of credentials passed as the Bearer Auth header.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if authenticated successfully. Else, returns `false`\n-    # or the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - `true` if authenticated successfully, else `false`\n+    # or the `http:AuthenticationError` in case of an error", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDUzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000536", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n          \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:34:09Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/bearer_auth_handler.bal", "diffHunk": "@@ -68,8 +68,8 @@ public type BearerAuthHandler object {\n \n     # Prepares the request with the Bearer Auth header.\n     #\n-    # + req - The`Request` instance\n-    # + return - Returns the updated `Request` instance or the `AuthenticationError` in case of an error\n+    # + req - The`http:Request` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDU0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,\n          \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:34:17Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/bearer_auth_handler.bal", "diffHunk": "@@ -87,9 +87,9 @@ public type BearerAuthHandler object {\n \n     # Inspects the request and response and calls the Auth provider for inspection.\n     #\n-    # + req - The `Request` instance\n-    # + resp - The `Response` instance\n-    # + return - Returns the updated `Request` instance, the `AuthenticationError` in case of an error,\n+    # + req - The `http:Request` instance\n+    # + resp - The `http:Response` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if can be authenticated, else `false`\n          \n          \n            \n                # + return - `true` if can be authenticated, else `false`\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:34:27Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/inbound_auth_handler.bal", "diffHunk": "@@ -19,13 +19,13 @@ public type InboundAuthHandler abstract object {\n \n     # Checks if the request can be authenticated with the relevant `InboundAuthHandler` implementation.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if can be authenticated. Else, returns `false`\n+    # + req - The `http:Request` instance\n+    # + return - `true` if can be authenticated, else `false`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDU3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000575", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + req - `http:Request` instance\n          \n          \n            \n                # + req - The `http:Request` instance", "author": "praneesha", "createdAt": "2020-04-11T01:34:41Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/inbound_auth_handler.bal", "diffHunk": "@@ -19,13 +19,13 @@ public type InboundAuthHandler abstract object {\n \n     # Checks if the request can be authenticated with the relevant `InboundAuthHandler` implementation.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if can be authenticated. Else, returns `false`\n+    # + req - The `http:Request` instance\n+    # + return - `true` if can be authenticated, else `false`\n     public function canProcess(Request req) returns boolean;\n \n     # Tries to authenticate the request with the relevant `InboundAuthHandler` implementation.\n     #\n-    # + req - `Request` instance\n-    # + return - `true` if authenticated successfully, else `false` or, `AuthenticationError` in case of errors\n+    # + req - `http:Request` instance", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDU4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000585", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authenticated successfully, else `false` or, `http:AuthenticationError` in case of errors\n          \n          \n            \n                # + return - `true` if authenticated successfully, else `false` or, `http:AuthenticationError` in case of errors\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:34:46Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/inbound_auth_handler.bal", "diffHunk": "@@ -19,13 +19,13 @@ public type InboundAuthHandler abstract object {\n \n     # Checks if the request can be authenticated with the relevant `InboundAuthHandler` implementation.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if can be authenticated. Else, returns `false`\n+    # + req - The `http:Request` instance\n+    # + return - `true` if can be authenticated, else `false`\n     public function canProcess(Request req) returns boolean;\n \n     # Tries to authenticate the request with the relevant `InboundAuthHandler` implementation.\n     #\n-    # + req - `Request` instance\n-    # + return - `true` if authenticated successfully, else `false` or, `AuthenticationError` in case of errors\n+    # + req - `http:Request` instance\n+    # + return - `true` if authenticated successfully, else `false` or, `http:AuthenticationError` in case of errors", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDU5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000595", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n          \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:34:56Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/outbound_auth_handler.bal", "diffHunk": "@@ -19,15 +19,15 @@ public type OutboundAuthHandler abstract object {\n \n     # Prepares the request with the relevant authentication requirements.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns the updated `Request` instance or the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDYwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,\n          \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:35:05Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/outbound_auth_handler.bal", "diffHunk": "@@ -19,15 +19,15 @@ public type OutboundAuthHandler abstract object {\n \n     # Prepares the request with the relevant authentication requirements.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns the updated `Request` instance or the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n     public function prepare(Request req) returns Request|AuthenticationError;\n \n     # Inspects the request and response and evaluates what is to be done.\n     #\n-    # + req - The `Request` instance\n-    # + resp - The `Response` instance\n-    # + return - Returns the updated `Request` instance, the `AuthenticationError` in case of an error,\n+    # + req - The `http:Request` instance\n+    # + resp - The `http:Response` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error,", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDYyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000622", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + req - `Request` instance\n          \n          \n            \n            # + req - The `Request` instance", "author": "praneesha", "createdAt": "2020-04-11T01:35:22Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -50,7 +50,7 @@ public type Scopes string[]|string[][];\n \n # Extracts the Authorization header value from the request.\n #\n-# + req - Request instance\n+# + req - `Request` instance", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDY2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000662", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The authentication handlers or whether it is needed to engage listener-level handlers or not\n          \n          \n            \n            # + return - The authentication handlers or whether it is needed to engage listener-level handlers or not\n          \n      \n    \n    \n  \n\nSame as above. Please refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-11T01:35:48Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -61,7 +61,7 @@ public function extractAuthorizationHeaderValue(Request req) returns @tainted st\n # (i.e., first from the resource level and then from the service level, if it is not there at the resource level).\n #\n # + context - The `FilterContext` instance\n-# + return - Returns the authentication handlers or whether it is needed to engage listener-level handlers or not\n+# + return - The authentication handlers or whether it is needed to engage listener-level handlers or not", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDY5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000691", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # from the service level, if it is not there in the resource level.\n          \n          \n            \n            # from the service level if it is not there in the resource level.", "author": "praneesha", "createdAt": "2020-04-11T01:36:04Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -133,7 +133,7 @@ function getAuthHandlers(FilterContext context) returns InboundAuthHandlers|bool\n     return true;\n }\n \n-# Tries to retrieve the authorization scopes hierarchically - first from the resource level and then\n+# Retrieves the authorization scopes hierarchically - first from the resource level and then\n # from the service level, if it is not there in the resource level.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDcwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000700", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves the authentication annotation value for service level.\n          \n          \n            \n            # Retrieves the authentication annotation value for the service level.", "author": "praneesha", "createdAt": "2020-04-11T01:36:13Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -209,10 +209,10 @@ function getScopes(FilterContext context) returns Scopes|boolean {\n     return true;\n }\n \n-# Retrieve the authentication annotation value for service level.\n+# Retrieves the authentication annotation value for service level.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDcxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000715", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves the authentication annotation value for resource level and service level.\n          \n          \n            \n            # Retrieves the authentication annotation value for the resource level and service level.", "author": "praneesha", "createdAt": "2020-04-11T01:36:24Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -221,7 +221,7 @@ function getServiceAuthConfig(FilterContext context) returns ServiceAuth? {\n     }\n }\n \n-# Retrieve the authentication annotation value for resource level and service level.\n+# Retrieves the authentication annotation value for resource level and service level.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDc4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000787", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configures cache control directives for an `http:Request`.\n          \n          \n            \n            # Configures the cache control directives for an `http:Request`.", "author": "praneesha", "createdAt": "2020-04-11T01:36:47Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/caching_commons.bal", "diffHunk": "@@ -67,7 +67,7 @@ public const string S_MAX_AGE = \"s-maxage\";\n # Setting this as the `max-stale` directives indicates that the `max-stale` directive does not specify a limit.\n public const int MAX_STALE_ANY_AGE = 9223372036854775807;\n \n-# Configures cache control directives for a `Request`.\n+# Configures cache control directives for an `http:Request`.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDgwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407000802", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configures cache control directives for a `http:Response`.\n          \n          \n            \n            # Configures cache control directives for an `http:Response`.", "author": "praneesha", "createdAt": "2020-04-11T01:37:02Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/caching_commons.bal", "diffHunk": "@@ -135,7 +135,7 @@ public type RequestCacheControl object {\n     }\n };\n \n-# Configures cache control directives for a `Response`.\n+# Configures cache control directives for a `http:Response`.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTM1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001352", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the `http:Response` for a previously submitted request.\n          \n          \n            \n                # Retrieves the `http:Response` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T01:43:16Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously submitted request.\n          \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T01:43:27Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTM4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001387", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T01:43:40Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001398", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously submitted request.\n          \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T01:43:48Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001432", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:43:59Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTQ2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001461", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised HTTP `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised HTTP `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:44:12Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `http:ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised HTTP `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTQ5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001493", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + url - The URL of the HTTP endpoint to connect to\n          \n          \n            \n            # + url - The URL of the HTTP endpoint to connect", "author": "praneesha", "createdAt": "2020-04-11T01:44:28Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -317,7 +317,8 @@ public type HttpCachingClient client object {\n # + url - The URL of the HTTP endpoint to connect to", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTUxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001518", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `http:HttpCachingClient` instance which wraps the base `http:Client` with a caching layer \n          \n          \n            \n            # + return - An `http:HttpCachingClient` instance, which wraps the base `http:Client` with a caching layer", "author": "praneesha", "createdAt": "2020-04-11T01:44:43Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -317,7 +317,8 @@ public type HttpCachingClient client object {\n # + url - The URL of the HTTP endpoint to connect to\n # + config - The configurations for the client endpoint associated with the caching client\n # + cacheConfig - The configurations for the HTTP cache to be used with the caching client\n-# + return - An `HttpCachingClient` instance which wraps the base `Client` with a caching layer\n+# + return - An `http:HttpCachingClient` instance which wraps the base `http:Client` with a caching layer ", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTUzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001532", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            or an `http:ClientError`\n          \n          \n            \n            #            or an `http:ClientError`\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:44:51Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -317,7 +317,8 @@ public type HttpCachingClient client object {\n # + url - The URL of the HTTP endpoint to connect to\n # + config - The configurations for the client endpoint associated with the caching client\n # + cacheConfig - The configurations for the HTTP cache to be used with the caching client\n-# + return - An `HttpCachingClient` instance which wraps the base `Client` with a caching layer\n+# + return - An `http:HttpCachingClient` instance which wraps the base `http:Client` with a caching layer \n+#            or an `http:ClientError`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTU1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # The `Client.submit()` function does not give out a `Response` as the result,\n          \n          \n            \n                # The `Client.submit()` function does not give out a `Response` as the result.", "author": "praneesha", "createdAt": "2020-04-11T01:45:03Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -161,13 +161,13 @@ public type Client client object {\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n     # The `Client.submit()` function does not give out a `Response` as the result,", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTU2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001566", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n          \n          \n            \n                # Rather, it returns an `http:HttpFuture`, which can be used to do further interactions with the endpoint.", "author": "praneesha", "createdAt": "2020-04-11T01:45:14Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -161,13 +161,13 @@ public type Client client object {\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n     # The `Client.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTU3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:45:21Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -161,13 +161,13 @@ public type Client client object {\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n     # The `Client.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T01:45:30Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,31 +176,31 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTYwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T01:45:42Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,31 +176,31 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTYxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001614", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T01:45:50Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,31 +176,31 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTYyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:45:59Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,31 +176,31 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001650", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This just pass the request to actual network call.\n          \n          \n            \n                # Passes the request to an actual network call.", "author": "praneesha", "createdAt": "2020-04-11T01:46:13Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,31 +176,31 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTY2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001663", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised HTTP `Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - A promised HTTP `Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:46:21Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,31 +176,31 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + promise - The related `PushPromise`\n+    # + promise - The related `http:PushPromise`\n     # + return - A promised HTTP `Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTY3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return  - `false` if the cookie will be discarded at the end of the \"session\", else `true`.\n          \n          \n            \n                # + return  - `false` if the cookie will be discarded at the end of the \"session\", else `true`.\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:46:35Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -45,18 +45,18 @@ public type Cookie object {\n     public time:Time lastAccessedTime = time:currentTime();\n     public boolean hostOnly = false;\n \n-    # Initializes the `Cookie` object.\n+    # Initializes the `http:Cookie` object.\n     #\n-    # + name - Name of the `Cookie`\n-    # + value - Value of the `Cookie`\n+    # + name - Name of the `http:Cookie`\n+    # + value - Value of the `http:Cookie`\n     public function __init(string name, string value) {\n         self.name = name;\n         self.value = value;\n     }\n \n     # Checks the persistance of the cookie.\n     #\n-    # + return  - set to `false` if the cookie will be discarded at the end of the \"session\". Else, returns `true`.\n+    # + return  - `false` if the cookie will be discarded at the end of the \"session\", else `true`.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTY4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001687", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return  - `true` if the attributes of the cookie are in the correct format. Otherwise, returns an `error`.\n          \n          \n            \n                # + return  - `true` if the attributes of the cookie are in the correct format. Otherwise, returns an `error`.\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:46:46Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -66,7 +66,7 @@ public type Cookie object {\n \n     # Checks the validity of the attributes of the cookie.\n     #\n-    # + return  - set to `true` if the attributes of the cookie are in the correct format. Otherwise, returns an `error`.\n+    # + return  - `true` if the attributes of the cookie are in the correct format. Otherwise, returns an `error`.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTcyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred when adding a cookie or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred when adding a cookie or else nil\n          \n      \n    \n    \n  \n\nSame as above. Specify the error type.", "author": "praneesha", "createdAt": "2020-04-11T01:47:05Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -36,7 +36,7 @@ public type CookieStore object {\n     # + cookieConfig - Configurations associated with the cookies\n     # + url - Target service URL\n     # + requestPath - Resource path\n-    # + return - An error will be returned if there is any error occurred when adding a cookie or else nil is returned\n+    # + return - An error if there is any error occurred when adding a cookie or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001736", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of the cookie or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of the cookie or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:47:17Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -195,7 +195,7 @@ public type CookieStore object {\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of the cookie or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTc2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001760", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of cookies by domain or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of cookies by domain or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:47:26Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -224,7 +224,7 @@ public type CookieStore object {\n     # Removes cookies, which match with the given domain.\n     #\n     # + domain - Domain of the cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of cookies by domain or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of cookies by domain or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001777", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of expired cookies or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of expired cookies or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:47:35Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -246,7 +246,7 @@ public type CookieStore object {\n \n     # Removes all expired cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of expired cookies or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of expired cookies or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTc5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001792", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of all the cookies or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of all the cookies or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:47:44Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -278,7 +278,7 @@ public type CookieStore object {\n \n     # Removes all the cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of all the cookies or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTgxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001813", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the storing process of the cookie or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the storing process of the cookie or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:47:53Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -53,7 +53,7 @@ public type CsvPersistentCookieHandler object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the storing process of the cookie or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTgyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001824", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies\n          \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:48:04Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -77,7 +77,7 @@ public type CsvPersistentCookieHandler object {\n \n     # Gets all the persistent cookies.\n     #\n-    # + return - Array of persistent cookies stored in the cookie store or else an error is returned if one occurred during the retrieval of the cookies\n+    # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of the cookie or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of the cookie or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:48:12Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -115,7 +115,7 @@ public type CsvPersistentCookieHandler object {\n     # + name - Name of the persistent cookie to be removed\n     # + domain - Domain of the persistent cookie to be removed\n     # + path - Path of the persistent cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of the cookie or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTg0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of all the cookies or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of all the cookies or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:48:19Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -148,7 +148,7 @@ public type CsvPersistentCookieHandler object {\n \n     # Removes all persistent cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of all the cookies or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTg2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001862", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:48:28Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -179,45 +179,45 @@ public type CookieClient object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTg4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001887", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP response message or else an `http:ClientError` if the invocation fails", "author": "praneesha", "createdAt": "2020-04-11T01:48:47Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -179,45 +179,45 @@ public type CookieClient object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request request = <Request>message;\n         return self.httpClient->submit(httpVerb, path, request);\n     }\n \n-    # Retrieves the `Response` for a previously-submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP response message or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTk0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407001948", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:49:07Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -179,45 +179,45 @@ public type CookieClient object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request request = <Request>message;\n         return self.httpClient->submit(httpVerb, path, request);\n     }\n \n-    # Retrieves the `Response` for a previously-submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP response message or an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously-submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - A `boolean`, which represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously-submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjA5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002097", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised HTTP `http:Response` message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised HTTP `http:Response` message or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:50:31Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -179,45 +179,45 @@ public type CookieClient object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request request = <Request>message;\n         return self.httpClient->submit(httpVerb, path, request);\n     }\n \n-    # Retrieves the `Response` for a previously-submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP response message or an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously-submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - A `boolean`, which represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously-submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails\n     public function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError{\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message or an `ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised HTTP `http:Response` message or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the storing process of the cookie or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the storing process of the cookie or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:50:41Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the storing process of the cookie or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjE2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else error if one occurred during the retrieval of the cookies\n          \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "author": "praneesha", "createdAt": "2020-04-11T01:51:06Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the storing process of the cookie or else nil\n     public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n \n     # Gets all persistent cookies.\n     #\n-    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during the retrieval of the cookies\n+    # + return - Array of persistent cookies stored in the cookie store or else error if one occurred during the retrieval of the cookies", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjE2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of the cookie or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of the cookie or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:51:14Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the storing process of the cookie or else nil\n     public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n \n     # Gets all persistent cookies.\n     #\n-    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during the retrieval of the cookies\n+    # + return - Array of persistent cookies stored in the cookie store or else error if one occurred during the retrieval of the cookies\n     public function getAllCookies() returns Cookie[]|CookieHandlingError;\n \n     # Removes a specific persistent cookie.\n     #\n     # + name - Name of the persistent cookie to be removed\n     # + domain - Domain of the persistent cookie to be removed\n     # + path - Path of the persistent cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of the cookie or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjE4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error if there is any error occurred during the removal of all the cookies or else nil\n          \n          \n            \n                # + return - An error if there is any error occurred during the removal of all the cookies or else nil\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:51:25Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the storing process of the cookie or else nil\n     public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n \n     # Gets all persistent cookies.\n     #\n-    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during the retrieval of the cookies\n+    # + return - Array of persistent cookies stored in the cookie store or else error if one occurred during the retrieval of the cookies\n     public function getAllCookies() returns Cookie[]|CookieHandlingError;\n \n     # Removes a specific persistent cookie.\n     #\n     # + name - Name of the persistent cookie to be removed\n     # + domain - Domain of the persistent cookie to be removed\n     # + path - Path of the persistent cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of the cookie or else nil\n     public function removeCookie(string name, string domain, string path) returns CookieHandlingError?;\n \n     # Removes all persistent cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned\n+    # + return - An error if there is any error occurred during the removal of all the cookies or else nil", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjIyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002220", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Sets the value of a transport header in `http:PushPromise`.\n          \n          \n            \n                # Sets the value of a transport header in the `http:PushPromise`.", "author": "praneesha", "createdAt": "2020-04-11T01:51:40Z", "path": "stdlib/http/src/main/ballerina/src/http/http2/http_push_promise.bal", "diffHunk": "@@ -66,35 +66,35 @@ public type PushPromise object {\n         return headers;\n     }\n \n-    # Adds the specified key/value pair as an HTTP header to the `PushPromise`.\n+    # Adds the specified key/value pair as an HTTP header to the `http:PushPromise`.\n     #\n     # + headerName - The header name\n     # + headerValue - The header value\n     public function addHeader(string headerName, string headerValue) {\n         return externPromiseAddHeader(self, java:fromString(headerName), java:fromString(headerValue));\n     }\n \n-    # Sets the value of a transport header in `PushPromise`.\n+    # Sets the value of a transport header in `http:PushPromise`.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjI1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002256", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:51:56Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -53,7 +53,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjI3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:52:05Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -63,7 +63,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:52:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -74,7 +74,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjI5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002296", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:52:21Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -84,7 +84,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjMwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002305", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:52:28Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -94,7 +94,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjMxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002316", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:52:35Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -104,7 +104,7 @@ public type HttpClient client object {\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjMyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002325", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:52:42Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -114,7 +114,7 @@ public type HttpClient client object {\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjMzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002334", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:52:50Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002349", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n          \n          \n            \n                # The `HttpClient.submit()` function does not give out an `http:Response` as the result.", "author": "praneesha", "createdAt": "2020-04-11T01:52:59Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjM3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002370", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n          \n          \n            \n                # Rather, it returns an `http:HttpFuture`, which can be used to do further interactions with the endpoint.", "author": "praneesha", "createdAt": "2020-04-11T01:53:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:53:21Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002395", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the `http:Response` for a previously submitted request.\n          \n          \n            \n                # Retrieves the `http:Response` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T01:53:28Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjQxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:53:36Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjQzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002439", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously submitted request.\n          \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T01:53:44Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjQ2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T01:53:55Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjUwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T01:54:04Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjUxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002512", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously submitted request.\n          \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T01:54:12Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return externHasPromise(self, httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjUyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002524", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T01:54:20Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return externHasPromise(self, httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002534", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:54:27Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return externHasPromise(self, httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjU1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002555", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:54:38Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result,\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return externHasPromise(self, httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return externGetNextPromise(self, httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjU4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #             `io:ReadableByteChannel` or `mime:Entity[]`\n          \n          \n            \n                #             `io:ReadableByteChannel`, or `mime:Entity[]`", "author": "praneesha", "createdAt": "2020-04-11T01:55:00Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -35,7 +35,7 @@ public type Caller client object {\n     #\n     # + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjYwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002608", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `http:WebSocketCaller` or error on failure to upgrade\n          \n          \n            \n                # + return - The `http:WebSocketCaller` instance or else an error on failure to upgrade\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:55:20Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -77,7 +77,7 @@ public type Caller client object {\n     # Sends an upgrade request with custom headers.\n     #\n     # + headers - A `map` of custom headers for handshake\n-    # + return - `WebSocketCaller` or error on failure to upgrade\n+    # + return - `http:WebSocketCaller` or error on failure to upgrade", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjY0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002641", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The query param value associated with the given key as a string. If multiple param values are\n          \n          \n            \n                # + return - The query param value associated with the given key as a string. If multiple param values are\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:55:49Z", "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -74,7 +74,7 @@ public type Request object {\n     # Gets the query param value associated with the given key.\n     #\n     # + key - Represents the query param key\n-    # + return - Returns the query param value associated with the given key as a string. If multiple param values are\n+    # + return - The query param value associated with the given key as a string. If multiple param values are", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjY1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002651", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - All the query param values associated with the given key as a `string[]`. Nil is returned if no key\n          \n          \n            \n                # + return - All the query param values associated with the given key as a `string[]`. Nil is returned if no key\n          \n      \n    \n    \n  \n\nSame as above. Nil should be replaced with \"()\".", "author": "praneesha", "createdAt": "2020-04-11T01:55:57Z", "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -85,7 +85,7 @@ public type Request object {\n     # Gets all the query param values associated with the given key.\n     #\n     # + key - Represents the query param key\n-    # + return - Returns all the query param values associated with the given key as a `string[]`. Nil is returned if no key\n+    # + return - All the query param values associated with the given key as a `string[]`. Nil is returned if no key", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjY4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002687", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in\n          \n          \n            \n                # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:56:22Z", "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -375,7 +375,7 @@ public type Request object {\n     # Extracts body parts from the request. If the content type is not a composite media type, an error\n     # is returned.\n \n-    # + return - Returns the body parts as an array of entities or an `http:ClientError` if there were any errors in\n+    # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjg2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002862", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A boolean indicating entity body availability\n          \n          \n            \n                # + return - A boolean indicating the availability of the entity body", "author": "praneesha", "createdAt": "2020-04-11T01:58:03Z", "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -528,7 +528,7 @@ public type Request object {\n \n     # Check whether the entity body is present.\n     #\n-    # + return - a boolean indicating entity body availability\n+    # + return - A boolean indicating entity body availability", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjg4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in\n          \n          \n            \n                # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:58:18Z", "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -288,7 +288,7 @@ public type Response object {\n \n     # Extracts body parts from the response. If the content type is not a composite media type, an error is returned.\n     #\n-    # + return - Returns the body parts as an array of entities or an `http:ClientError` if there were any errors in\n+    # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjkyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002922", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #             `io:ReadableByteChannel` or `mime:Entity[]`\n          \n          \n            \n                #             `io:ReadableByteChannel`, or `mime:Entity[]`", "author": "praneesha", "createdAt": "2020-04-11T01:58:29Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjkzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:58:36Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjk0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This just passes the request to actual network call.\n          \n          \n            \n                # This just passes the request to the actual network call.", "author": "praneesha", "createdAt": "2020-04-11T01:58:44Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjk2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T01:58:53Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjk4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407002986", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an error if the invocation fails\n          \n          \n            \n                # + return - An HTTP response message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T01:59:01Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzAyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003021", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This just passes the request to actual network call.\n          \n          \n            \n                # Passes the request to an actual network call.", "author": "praneesha", "createdAt": "2020-04-11T01:59:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003027", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T01:59:21Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzA1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T01:59:32Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzA2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003066", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This just passes the request to actual network call.\n          \n          \n            \n                # Passes the request to an actual network call.", "author": "praneesha", "createdAt": "2020-04-11T01:59:40Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzEwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003109", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:00:06Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzEyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003123", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:00:14Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzEzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003136", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This just passes the request to actual network call.\n          \n          \n            \n                # Passes the request to actual network call.", "author": "praneesha", "createdAt": "2020-04-11T02:00:23Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzE2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:00:31Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzE4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003181", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This just passes the request to actual network call.\n          \n          \n            \n                # Passes the request to an actual network call.", "author": "praneesha", "createdAt": "2020-04-11T02:00:42Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -214,46 +214,46 @@ public type HttpSecureClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an error if the invocation fails\n     public remote function getPromisedResponse(PushPromise promise) returns Response|ClientError {\n         return self.httpClient->getPromisedResponse(promise);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to actual network call.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:01:03Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -50,7 +50,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`,\n     #             `byte[]`, `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzIzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #             `io:ReadableByteChannel` or `mime:Entity[]`\n          \n          \n            \n                #             `io:ReadableByteChannel`, or `mime:Entity[]`", "author": "praneesha", "createdAt": "2020-04-11T02:01:12Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -66,7 +66,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzI0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003247", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:01:20Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -66,7 +66,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzI2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003267", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:01:31Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -82,7 +82,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or or any payload of type `string`, `xml`, `json`,\n     #             `byte[]`, `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzMzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003336", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:02:18Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -98,7 +98,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzM0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003342", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:02:25Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -112,7 +112,7 @@ public type RedirectClient client object {\n     #\n     # + path - Resource path\n     # + request - An HTTP inbound request message\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzM1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003356", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:02:33Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -124,7 +124,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzM3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003378", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:02:41Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -146,7 +146,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003401", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:02:49Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -162,7 +162,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzQxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003415", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:02:56Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -178,7 +178,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`,\n     #             `byte[]`, `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzQyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003423", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:03:04Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003438", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the `http:Response` for a previously submitted request.\n          \n          \n            \n                # Retrieves the `http:Response` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:03:14Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzQ0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:03:20Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzQ2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously submitted request.\n          \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:03:29Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzQ4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean` , which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T02:03:41Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n     # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzY5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously submitted request.\n          \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:05:25Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n     # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzcxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003715", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:05:37Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n     # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzcyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:05:48Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n     # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003777", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:06:12Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n     # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzgyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # return an `http:Response` as the result, rather it returns an `http:HttpFuture` which can be used for subsequent interactions\n          \n          \n            \n                # return an `http:Response` as the result. Rather, it returns an `http:HttpFuture`, which can be used for subsequent interactions", "author": "praneesha", "createdAt": "2020-04-11T02:06:42Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -215,14 +215,14 @@ public type FailoverClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb. The `FailoverClient.submit()` function does not\n-    # return a `Response` as the result, rather it returns an `HttpFuture` which can be used for subsequent interactions\n+    # return an `http:Response` as the result, rather it returns an `http:HttpFuture` which can be used for subsequent interactions", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzg0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003846", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:06:52Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -215,14 +215,14 @@ public type FailoverClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb. The `FailoverClient.submit()` function does not\n-    # return a `Response` as the result, rather it returns an `HttpFuture` which can be used for subsequent interactions\n+    # return an `http:Response` as the result, rather it returns an `http:HttpFuture` which can be used for subsequent interactions\n     # with the HTTP endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzg1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003853", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the `http:Response` for a previously submitted request.\n          \n          \n            \n                # Retrieves the `http:Response` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:06:59Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzg2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003864", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:07:10Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzg3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003875", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously submitted request.\n          \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:07:19Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:07:26Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzkwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T02:07:38Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzkyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003921", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously submitted request.\n          \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:07:47Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzk0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:07:56Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzk1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003953", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:08:03Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzk2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised`http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised`http:Response` message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:08:12Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         string message = \"Failover client not supported for getNextPromise action\";\n         UnsupportedActionError err = error(UNSUPPORTED_ACTION, message = message);\n         return err;\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised`http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + rollingWindow - `http:RollingWindow` options of the `CircuitBreaker`\n          \n          \n            \n            # + rollingWindow - The `http:RollingWindow` options of the `CircuitBreaker`", "author": "praneesha", "createdAt": "2020-04-11T02:08:27Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -60,7 +60,7 @@ public type CircuitHealth record {|\n \n # Provides a set of configurations for controlling the behaviour of the Circuit Breaker.\n #\n-# + rollingWindow - `RollingWindow` options of the `CircuitBreaker`\n+# + rollingWindow - `http:RollingWindow` options of the `CircuitBreaker`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzk4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003989", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + rollingWindow - `http:RollingWindow` options provided in the `http:CircuitBreakerConfig`\n          \n          \n            \n            # + rollingWindow - The `http:RollingWindow` options provided in the `http:CircuitBreakerConfig`", "author": "praneesha", "createdAt": "2020-04-11T02:08:35Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -105,7 +105,7 @@ public type Bucket record {|\n #                     the upstream service\n # + statusCodes - Array of HTTP response status codes which are considered as failures\n # + noOfBuckets - Number of buckets derived from the `RollingWindow`\n-# + rollingWindow - `RollingWindow` options provided in the `CircuitBreakerConfig`\n+# + rollingWindow - `http:RollingWindow` options provided in the `http:CircuitBreakerConfig`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMzk5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407003999", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + circuitBreakerInferredConfig - Configurations derived from `http:CircuitBreakerConfig`\n          \n          \n            \n                # + circuitBreakerInferredConfig - Configurations derived from the `http:CircuitBreakerConfig`", "author": "praneesha", "createdAt": "2020-04-11T02:08:44Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -135,7 +135,7 @@ public type CircuitBreakerClient client object {\n     #\n     # + url - The URL of the target service\n     # + config - The configurations of the client endpoint associated with this `CircuitBreaker` instance\n-    # + circuitBreakerInferredConfig - Configurations derived from `CircuitBreakerConfig`\n+    # + circuitBreakerInferredConfig - Configurations derived from `http:CircuitBreakerConfig`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpClient - The underlying `HttpActions` instance which will be making the actual network calls\n          \n          \n            \n                # + httpClient - The underlying `HttpActions` instance, which will be making the actual network calls", "author": "praneesha", "createdAt": "2020-04-11T02:08:55Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -135,7 +135,7 @@ public type CircuitBreakerClient client object {\n     #\n     # + url - The URL of the target service\n     # + config - The configurations of the client endpoint associated with this `CircuitBreaker` instance\n-    # + circuitBreakerInferredConfig - Configurations derived from `CircuitBreakerConfig`\n+    # + circuitBreakerInferredConfig - Configurations derived from `http:CircuitBreakerConfig`\n     # + httpClient - The underlying `HttpActions` instance which will be making the actual network calls", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDA0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # The `CircuitBreakerClient.submit()` function does not give out a `Response` as the result,\n          \n          \n            \n                # The `CircuitBreakerClient.submit()` function does not give out a `Response` as the result.", "author": "praneesha", "createdAt": "2020-04-11T02:09:03Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -343,13 +343,13 @@ public type CircuitBreakerClient client object {\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n     # The `CircuitBreakerClient.submit()` function does not give out a `Response` as the result,", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDA3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004078", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n          \n          \n            \n                # Rather, it returns an `http:HttpFuture`, which can be used to do further interactions with the endpoint.", "author": "praneesha", "createdAt": "2020-04-11T02:09:14Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -343,13 +343,13 @@ public type CircuitBreakerClient client object {\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n     # The `CircuitBreakerClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDA5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:09:22Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -343,13 +343,13 @@ public type CircuitBreakerClient client object {\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n     # The `CircuitBreakerClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDA5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004096", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the `http:Response` for a previously submitted request.\n          \n          \n            \n                # Retrieves the `http:Response` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:09:29Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -370,9 +370,9 @@ public type CircuitBreakerClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDEwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004107", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:09:39Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -370,9 +370,9 @@ public type CircuitBreakerClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDEzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004135", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // No need to check for response as we already check for the response in submit method\n          \n          \n            \n                    // No need to check for the response as we already check for the response in the submit method", "author": "praneesha", "createdAt": "2020-04-11T02:09:51Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -370,9 +370,9 @@ public type CircuitBreakerClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // No need to check for response as we already check for the response in submit method", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004177", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n          \n          \n            \n                # Circuit breaking is not supported. The default value is the `CircuitBreakerClient.hasPromise()` function of the underlying", "author": "praneesha", "createdAt": "2020-04-11T02:10:20Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDE4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:10:30Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T02:12:17Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDM1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously submitted request.\n          \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:12:25Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:12:33Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP `PushPromise` message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDM3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:12:42Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP `PushPromise` message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:12:50Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP `PushPromise` message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails\n     public function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n     # Retrieves the promised server push `Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `http:ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDQzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004430", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.rejectPromise()` function of the underlying\n          \n          \n            \n                # Circuit breaking is not supported. The defualt value is the `CircuitBreakerClient.rejectPromise()` function of the underlying", "author": "praneesha", "createdAt": "2020-04-11T02:13:18Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -382,32 +382,32 @@ public type CircuitBreakerClient client object {\n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP `PushPromise` message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails\n     public function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n     # Retrieves the promised server push `Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `http:ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n     public function getPromisedResponse(PushPromise promise) returns Response|ClientError {\n         return self.httpClient->getPromisedResponse(promise);\n     }\n \n     # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.rejectPromise()` function of the underlying", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Provides `http:CircuitState` of the circuit breaker.\n          \n          \n            \n                # Provides the `http:CircuitState` of the circuit breaker.", "author": "praneesha", "createdAt": "2020-04-11T02:13:28Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -425,16 +425,16 @@ public type CircuitBreakerClient client object {\n         self.circuitHealth.lastForcedOpenTime = time:currentTime();\n     }\n \n-    # Provides `CircuitState` of the circuit breaker.\n+    # Provides `http:CircuitState` of the circuit breaker.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDQ4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The current `http:CircuitState` of circuit breaker\n          \n          \n            \n                # + return - The current `http:CircuitState` of the circuit breaker", "author": "praneesha", "createdAt": "2020-04-11T02:13:38Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -425,16 +425,16 @@ public type CircuitBreakerClient client object {\n         self.circuitHealth.lastForcedOpenTime = time:currentTime();\n     }\n \n-    # Provides `CircuitState` of the circuit breaker.\n+    # Provides `http:CircuitState` of the circuit breaker.\n     #\n-    # + return - The current `CircuitState` of circuit breaker\n+    # + return - The current `http:CircuitState` of circuit breaker", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Updates circuit state.\n          \n          \n            \n            # Updates the circuit state.", "author": "praneesha", "createdAt": "2020-04-11T02:13:46Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -425,16 +425,16 @@ public type CircuitBreakerClient client object {\n         self.circuitHealth.lastForcedOpenTime = time:currentTime();\n     }\n \n-    # Provides `CircuitState` of the circuit breaker.\n+    # Provides `http:CircuitState` of the circuit breaker.\n     #\n-    # + return - The current `CircuitState` of circuit breaker\n+    # + return - The current `http:CircuitState` of circuit breaker\n     public function getCurrentState() returns CircuitState {\n         return self.currentCircuitState;\n     }\n };\n \n \n-# Update circuit state.\n+# Updates circuit state.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDUxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates Failure at a given point.\n          \n          \n            \n            # Calculates a failure at a given point.", "author": "praneesha", "createdAt": "2020-04-11T02:13:55Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -562,7 +562,7 @@ function validateCircuitBreakerConfiguration(CircuitBreakerConfig circuitBreaker\n     }\n }\n \n-# Calculate Failure at a given point.\n+# Calculates Failure at a given point.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDU0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004548", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates total requests count within `RollingWindow`.\n          \n          \n            \n            # Calculates the total requests count within a `RollingWindow`.", "author": "praneesha", "createdAt": "2020-04-11T02:14:08Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -583,7 +583,7 @@ function getCurrentFailureRatio(CircuitHealth circuitHealth) returns float {\n     return ratio;\n }\n \n-# Calculate total requests count within `RollingWindow`.\n+# Calculates total requests count within `RollingWindow`.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates the current bucket Id.\n          \n          \n            \n            # Calculates the current bucket ID.", "author": "praneesha", "createdAt": "2020-04-11T02:14:19Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -597,7 +597,7 @@ function getTotalRequestsCount(CircuitHealth circuitHealth) returns int {\n     return totalCount;\n }\n \n-# Calculate the current bucket Id.\n+# Calculates the current bucket Id.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDYwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004601", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Updates rejected requests count.\n          \n          \n            \n            # Updates the rejected requests count.", "author": "praneesha", "createdAt": "2020-04-11T02:14:28Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -611,7 +611,7 @@ function getCurrentBucketId(CircuitHealth circuitHealth, CircuitBreakerInferredC\n     return currentBucketId;\n }\n \n-# Update rejected requests count.\n+# Updates rejected requests count.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDYwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Resets the bucket values to default ones.\n          \n          \n            \n            # Resets the bucket values to the default ones.", "author": "praneesha", "createdAt": "2020-04-11T02:14:37Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -624,7 +624,7 @@ function updateRejectedRequestCount(CircuitHealth circuitHealth,\n     bucket.rejectedCount += 1;\n }\n \n-# Reset the bucket values to default ones.\n+# Resets the bucket values to default ones.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDYzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004633", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reinitializes the Buckets to default state.\n          \n          \n            \n            # Reinitializes the Buckets to the default state.", "author": "praneesha", "createdAt": "2020-04-11T02:14:53Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -692,7 +692,7 @@ function prepareRollingWindow(CircuitHealth circuitHealth, CircuitBreakerInferre\n     }\n }\n \n-# Reinitialize the Buckets to default state.\n+# Reinitializes the Buckets to default state.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDY0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004648", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:15:00Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -68,7 +68,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004657", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:15:09Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -84,7 +84,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDY3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:15:20Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -100,7 +100,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDY5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004696", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:15:27Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -115,7 +115,7 @@ public type RetryClient client object {\n     #\n     # + path - Resource path\n     # + request - An HTTP inbound request message\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDcxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004711", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #             `io:ReadableByteChannel` or `mime:Entity[]`\n          \n          \n            \n                #             `io:ReadableByteChannel`, or `mime:Entity[]`", "author": "praneesha", "createdAt": "2020-04-11T02:15:38Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -133,7 +133,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004727", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:15:48Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -133,7 +133,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:15:55Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -150,7 +150,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #             `io:ReadableByteChannel` or `mime:Entity[]`\n          \n          \n            \n                #             `io:ReadableByteChannel`, or `mime:Entity[]`", "author": "praneesha", "createdAt": "2020-04-11T02:16:07Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -166,7 +166,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:16:14Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -166,7 +166,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDc2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004768", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:16:22Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -183,7 +183,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDc5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004790", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #             `io:ReadableByteChannel` or `mime:Entity[]`\n          \n          \n            \n                #             `io:ReadableByteChannel`, or `mime:Entity[]`", "author": "praneesha", "createdAt": "2020-04-11T02:16:32Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -199,7 +199,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDgxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004812", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - The `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:16:39Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -199,7 +199,7 @@ public type RetryClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004845", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t#cThe `RetryClient.submit()` function does not give out a `http:Response` as the result,\n          \n          \n            \n            \t#The `RetryClient.submit()` function does not give out a `http:Response` as the result.", "author": "praneesha", "createdAt": "2020-04-11T02:16:58Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -211,14 +211,14 @@ public type RetryClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-\t#cThe `RetryClient.submit()` function does not give out a `Response` as the result,\n-\t#crather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+\t#cThe `RetryClient.submit()` function does not give out a `http:Response` as the result,", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004867", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t#crather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n          \n          \n            \n            \t#Rather, it returns an `http:HttpFuture`, which can be used to do further interactions with the endpoint.", "author": "praneesha", "createdAt": "2020-04-11T02:17:17Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -211,14 +211,14 @@ public type RetryClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-\t#cThe `RetryClient.submit()` function does not give out a `Response` as the result,\n-\t#crather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+\t#cThe `RetryClient.submit()` function does not give out a `http:Response` as the result,\n+\t#crather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDg3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:17:26Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -211,14 +211,14 @@ public type RetryClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-\t#cThe `RetryClient.submit()` function does not give out a `Response` as the result,\n-\t#crather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+\t#cThe `RetryClient.submit()` function does not give out a `http:Response` as the result,\n+\t#crather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNDg4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407004885", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the `http:Response` for a previously submitted request.\n          \n          \n            \n                # Retrieves the `http:Response` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:17:33Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTA2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:19:15Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTA3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an error if the invocation fails\n          \n          \n            \n                # + return - An HTTP response message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:19:23Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTE3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // We do not need to retry this as we already check the response when submit is called.\n          \n          \n            \n                    // This need not be retried as the response is already checked when submit is called.\n          \n      \n    \n    \n  \n\nDo not use \"we\" or \"please\" in technical documentation.", "author": "praneesha", "createdAt": "2020-04-11T02:20:23Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTE5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005195", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously submitted request.\n          \n          \n            \n                # Checks whether an `http:PushPromise` exists for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:20:36Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTIwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:20:43Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTIyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T02:20:54Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTI0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005249", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously submitted request.\n          \n          \n            \n                # Retrieves the next available `http:PushPromise` for a previously-submitted request.", "author": "praneesha", "createdAt": "2020-04-11T02:21:04Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTI2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:21:12Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTI3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005273", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:21:20Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005300", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:21:37Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         // We do not need to retry this as we already check the response when submit is called.\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an error if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTMzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Provides an HTTP client which is chosen according to the round robin algorithm.\n          \n          \n            \n                # Provides an HTTP client, which is chosen according to the round robin algorithm.", "author": "praneesha", "createdAt": "2020-04-11T02:21:51Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_round_robin_rule.bal", "diffHunk": "@@ -24,7 +24,7 @@ public type LoadBalancerRoundRobinRule object {\n     # Provides an HTTP client which is chosen according to the round robin algorithm.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTM0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + loadBalanceCallerActionsArray - Array of HTTP clients which needs to be load balanced\n          \n          \n            \n                # + loadBalanceCallerActionsArray - Array of HTTP clients, which needs to be load balanced", "author": "praneesha", "createdAt": "2020-04-11T02:22:03Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_round_robin_rule.bal", "diffHunk": "@@ -24,7 +24,7 @@ public type LoadBalancerRoundRobinRule object {\n     # Provides an HTTP client which is chosen according to the round robin algorithm.\n     #\n     # + loadBalanceCallerActionsArray - Array of HTTP clients which needs to be load balanced", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTM2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Chosen `http:Client` from the algorithm or an `http:ClientError` for a failure in\n          \n          \n            \n                # + return - Chosen `http:Client` from the algorithm or an `http:ClientError` for a failure in\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:22:15Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_round_robin_rule.bal", "diffHunk": "@@ -24,7 +24,7 @@ public type LoadBalancerRoundRobinRule object {\n     # Provides an HTTP client which is chosen according to the round robin algorithm.\n     #\n     # + loadBalanceCallerActionsArray - Array of HTTP clients which needs to be load balanced\n-    # + return - Chosen `Client` from the algorithm or an `http:ClientError` for a failure in\n+    # + return - Chosen `http:Client` from the algorithm or an `http:ClientError` for a failure in", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTM3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #             `io:ReadableByteChannel` or `mime:Entity[]`\n          \n          \n            \n                #             `io:ReadableByteChannel`, or `mime:Entity[]`", "author": "praneesha", "createdAt": "2020-04-11T02:22:28Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -155,7 +155,7 @@ public type LoadBalanceClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:22:36Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -155,7 +155,7 @@ public type LoadBalanceClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTQxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:22:51Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -165,7 +165,7 @@ public type LoadBalanceClient client object {\n \n     # The getResponse implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTQzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005433", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:23:01Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -175,15 +175,15 @@ public type LoadBalanceClient client object {\n \n     # The hasPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `boolean` that represents whether an `http:PushPromise` exists\n          \n          \n            \n                # + return - A `boolean`, which represents whether an `http:PushPromise` exists", "author": "praneesha", "createdAt": "2020-04-11T02:23:10Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -175,15 +175,15 @@ public type LoadBalanceClient client object {\n \n     # The hasPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTQ1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005453", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n          \n          \n            \n                # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation", "author": "praneesha", "createdAt": "2020-04-11T02:23:20Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -175,15 +175,15 @@ public type LoadBalanceClient client object {\n \n     # The hasPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n     # The getNextPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTQ2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005460", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:23:27Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -175,15 +175,15 @@ public type LoadBalanceClient client object {\n \n     # The hasPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean` that represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n     # The getNextPromise implementation of the LoadBalancer Connector.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTQ4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005483", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:23:36Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/load_balance_client_endpoint.bal", "diffHunk": "@@ -193,8 +193,8 @@ public type LoadBalanceClient client object {\n \n     # The getPromisedResponse implementation of the LoadBalancer Connector.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `http:ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005526", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # the functionality of the existing connections.\n          \n          \n            \n                # The functionality of the existing connections.", "author": "praneesha", "createdAt": "2020-04-11T02:23:50Z", "path": "stdlib/http/src/main/ballerina/src/http/service_endpoint.bal", "diffHunk": "@@ -69,7 +69,7 @@ public type Listener object {\n     # the functionality of the existing connections.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwNTU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r407005543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `error` if one occurred during detaching of a service or `nil`\n          \n          \n            \n                # + return - An `error` if one occurred during detaching of a service or `nil`\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-11T02:24:00Z", "path": "stdlib/http/src/main/ballerina/src/http/service_endpoint.bal", "diffHunk": "@@ -69,7 +69,7 @@ public type Listener object {\n     # the functionality of the existing connections.\n     #\n     # + s - The service to be detached\n-    # + return - error if occurred during detaching of a service or `nil`\n+    # + return - An `error` if one occurred during detaching of a service or `nil`", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMzM3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408603375", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of endpoints as \u2018Client\u2019 and \u2018Listener\u2019.\n          \n          \n            \n            This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of network entry points as \u2018Client\u2019 and \u2018Listener\u2019.\n          \n      \n    \n    \n  \n\nShall we get rid of endpoint with this doc improvement?", "author": "chamil321", "createdAt": "2020-04-15T06:14:37Z", "path": "stdlib/http/src/main/ballerina/src/http/Module.md", "diffHunk": "@@ -1,5 +1,3 @@\n-## Module overview\n-\n This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of endpoints as \u2018Client\u2019 and \u2018Listener\u2019.", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMzQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408603481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Client endpoints\n          \n          \n            \n            ### Client", "author": "chamil321", "createdAt": "2020-04-15T06:14:55Z", "path": "stdlib/http/src/main/ballerina/src/http/Module.md", "diffHunk": "@@ -1,5 +1,3 @@\n-## Module overview\n-\n This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of endpoints as \u2018Client\u2019 and \u2018Listener\u2019.\n \n ### Client endpoints", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDA0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408604045", "bodyText": "Shall we remove the remaining occurrences of endpoint terminology as it has been removed sometimes back?", "author": "chamil321", "createdAt": "2020-04-15T06:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMzQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1ODE0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408658143", "bodyText": "+1", "author": "ThishaniLucas", "createdAt": "2020-04-15T08:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMzQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408604563", "bodyText": "Shouldn't we need to add relevant BBE links at the end of each section? HTTP and WebSocket?", "author": "chamil321", "createdAt": "2020-04-15T06:18:12Z", "path": "stdlib/http/src/main/ballerina/src/http/Module.md", "diffHunk": "@@ -1,5 +1,3 @@\n-## Module overview\n-", "originalCommit": "c8b04ce5857902cb6b4f1c2c945fa0ed26fc39a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1ODI4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408658289", "bodyText": "We already have ryt?", "author": "ThishaniLucas", "createdAt": "2020-04-15T08:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDU2Mw=="}], "type": "inlineReview"}, {"oid": "0855512aff24611c3d2f6330244ee7bde0277a84", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0855512aff24611c3d2f6330244ee7bde0277a84", "message": "Refactor API doc of HTTP module", "committedDate": "2020-04-15T08:11:17Z", "type": "commit"}, {"oid": "0855512aff24611c3d2f6330244ee7bde0277a84", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0855512aff24611c3d2f6330244ee7bde0277a84", "message": "Refactor API doc of HTTP module", "committedDate": "2020-04-15T08:11:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MDQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408680478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Client` network entry points are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n          \n          \n            \n            The `Client` is used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. The `Client` activates connection eviction after a given idle period and also supports follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.", "author": "chamil321", "createdAt": "2020-04-15T08:46:32Z", "path": "stdlib/http/src/main/ballerina/src/http/Module.md", "diffHunk": "@@ -1,22 +1,20 @@\n-## Module overview\n+This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of network entry points as \u2018Client\u2019 and \u2018Listener\u2019.\n \n-This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of endpoints as \u2018Client\u2019 and \u2018Listener\u2019.\n+### Client\n \n-### Client endpoints\n+`Client` network entry points are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.", "originalCommit": "0855512aff24611c3d2f6330244ee7bde0277a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MDg3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408680878", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Client` network entry points handle resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.\n          \n          \n            \n            The `Client` handles resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.", "author": "chamil321", "createdAt": "2020-04-15T08:47:13Z", "path": "stdlib/http/src/main/ballerina/src/http/Module.md", "diffHunk": "@@ -1,22 +1,20 @@\n-## Module overview\n+This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of network entry points as \u2018Client\u2019 and \u2018Listener\u2019.\n \n-This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of endpoints as \u2018Client\u2019 and \u2018Listener\u2019.\n+### Client\n \n-### Client endpoints\n+`Client` network entry points are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n \n-`Client` endpoints are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n-\n-`Client` endpoints handle resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.\n+`Client` network entry points handle resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.", "originalCommit": "0855512aff24611c3d2f6330244ee7bde0277a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MTIwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408681208", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Client` network entry points support Server Name Indication (SNI), Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), and OCSP Stapling for SSL/TLS connections. They also support HTTP2, keep-alive, chunking, HTTP caching, data compression/decompression, and authentication/authorization.\n          \n          \n            \n            The `Client` supports Server Name Indication (SNI), Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), and OCSP Stapling for SSL/TLS connections. They also support HTTP2, keep-alive, chunking, HTTP caching, data compression/decompression, and authentication/authorization.", "author": "chamil321", "createdAt": "2020-04-15T08:47:47Z", "path": "stdlib/http/src/main/ballerina/src/http/Module.md", "diffHunk": "@@ -1,22 +1,20 @@\n-## Module overview\n+This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of network entry points as \u2018Client\u2019 and \u2018Listener\u2019.\n \n-This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of endpoints as \u2018Client\u2019 and \u2018Listener\u2019.\n+### Client\n \n-### Client endpoints\n+`Client` network entry points are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n \n-`Client` endpoints are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n-\n-`Client` endpoints handle resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.\n+`Client` network entry points handle resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.\n \n Load balancing is used in the round robin or failover manner.\n \n When a failure occurs in the remote service, the client connections might wait for some time before a timeout occurs. Awaiting requests consume resources in the system. Circuit Breakers are used to trip after a certain number of failed requests to the remote service. Once a circuit breaker trips, it does not allow the client to send requests to the remote service for a period of time.\n \n The Ballerina circuit breaker supports tripping on HTTP error status codes and I/O errors. Failure thresholds can be configured based on a sliding window (e.g., 5 failures within 10 seconds). `Client` endpoints also support a retry mechanism that allows a client to resend failed requests periodically for a given number of times.\n \n-`Client` endpoints support Server Name Indication (SNI), Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), and OCSP Stapling for SSL/TLS connections. They also support HTTP2, keep-alive, chunking, HTTP caching, data compression/decompression, and authentication/authorization.\n+`Client` network entry points support Server Name Indication (SNI), Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), and OCSP Stapling for SSL/TLS connections. They also support HTTP2, keep-alive, chunking, HTTP caching, data compression/decompression, and authentication/authorization.", "originalCommit": "0855512aff24611c3d2f6330244ee7bde0277a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MTM5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408681397", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A `Client` network entry point can be defined using the URL of the remote service that the client needs to connect with, as shown below:\n          \n          \n            \n            A `Client` can be defined using the URL of the remote service that the client needs to connect with, as shown below:", "author": "chamil321", "createdAt": "2020-04-15T08:48:05Z", "path": "stdlib/http/src/main/ballerina/src/http/Module.md", "diffHunk": "@@ -1,22 +1,20 @@\n-## Module overview\n+This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of network entry points as \u2018Client\u2019 and \u2018Listener\u2019.\n \n-This module provides an implementation for connecting and interacting with HTTP, HTTP2, and WebSocket endpoints. The module facilitates two types of endpoints as \u2018Client\u2019 and \u2018Listener\u2019.\n+### Client\n \n-### Client endpoints\n+`Client` network entry points are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n \n-`Client` endpoints are used to connect to and interact with HTTP endpoints. They support connection pooling and can be configured to have a maximum number of active connections that can be made with the remote endpoint. `Client` endpoints activate connection eviction after a given idle period and also support follow-redirects so that the users do not have to manually handle 3xx HTTP status codes.\n-\n-`Client` endpoints handle resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.\n+`Client` network entry points handle resilience in multiple ways such as load balancing, circuit breaking, endpoint timeouts, and a retry mechanism.\n \n Load balancing is used in the round robin or failover manner.\n \n When a failure occurs in the remote service, the client connections might wait for some time before a timeout occurs. Awaiting requests consume resources in the system. Circuit Breakers are used to trip after a certain number of failed requests to the remote service. Once a circuit breaker trips, it does not allow the client to send requests to the remote service for a period of time.\n \n The Ballerina circuit breaker supports tripping on HTTP error status codes and I/O errors. Failure thresholds can be configured based on a sliding window (e.g., 5 failures within 10 seconds). `Client` endpoints also support a retry mechanism that allows a client to resend failed requests periodically for a given number of times.\n \n-`Client` endpoints support Server Name Indication (SNI), Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), and OCSP Stapling for SSL/TLS connections. They also support HTTP2, keep-alive, chunking, HTTP caching, data compression/decompression, and authentication/authorization.\n+`Client` network entry points support Server Name Indication (SNI), Certificate Revocation List (CRL), Online Certificate Status Protocol (OCSP), and OCSP Stapling for SSL/TLS connections. They also support HTTP2, keep-alive, chunking, HTTP caching, data compression/decompression, and authentication/authorization.\n \n-A `Client` endpoint can be defined using the URL of the remote service that the client needs to connect with, as shown below:\n+A `Client` network entry point can be defined using the URL of the remote service that the client needs to connect with, as shown below:", "originalCommit": "0855512aff24611c3d2f6330244ee7bde0277a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff21d4c0711bdc8a38a782e566a9906513ec5865", "message": "Add review suggestions\n\nCo-Authored-By: Chamil Elladeniya <chamilmadawa8@gmail.com>", "committedDate": "2020-04-15T09:12:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNjAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408816008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if it is possible to authenticate with Basic Auth, `false` otherwise, or else\n          \n          \n            \n                # an `http:AuthenticationError` in case of an error\n          \n          \n            \n                # + return - `true` if it is possible to authenticate with Basic Auth, `false` otherwise, or else\n          \n          \n            \n                #                 an `http:AuthenticationError` in case of an error", "author": "chamil321", "createdAt": "2020-04-15T12:50:17Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -47,9 +47,9 @@ public type BasicAuthHandler object {\n \n     # Authenticates the incoming request with the use of the credentials passed as the Basic Auth header.\n     #\n-    # + req - The request object\n-    # + return - Returns `true` if it is possible to authenticate with Basic Auth. Else, returns `false` or\n-    # the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - `true` if it is possible to authenticate with Basic Auth, `false` otherwise, or else\n+    # an `http:AuthenticationError` in case of an error", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNjM4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408816386", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n          \n          \n            \n                # or else `()` if nothing is to be returned\n          \n          \n            \n                # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n          \n          \n            \n                #                 or else `()` if nothing is to be returned", "author": "chamil321", "createdAt": "2020-04-15T12:50:53Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -88,10 +88,10 @@ public type BasicAuthHandler object {\n \n     # Inspects the request and response and calls the Auth provider for inspection.\n     #\n-    # + req - The `Request` instance\n-    # + resp - The `Response` instance\n-    # + return - Returns the updated `Request` instance, the `AuthenticationError` in case of an error,\n-    # or `()` if nothing is to be returned\n+    # + req - The `http:Request` instance\n+    # + resp - The `http:Response` instance\n+    # + return - The updated `http:Request` instance or the `http:AuthenticationError` in case of an error\n+    # or else `()` if nothing is to be returned", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNjc1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408816755", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authenticated successfully, `false` otherwise,\n          \n          \n            \n                # or else an `http:AuthenticationError` in case of an error\n          \n          \n            \n                # + return - `true` if authenticated successfully, `false` otherwise,\n          \n          \n            \n                #                 or else an `http:AuthenticationError` in case of an error", "author": "chamil321", "createdAt": "2020-04-15T12:51:33Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/bearer_auth_handler.bal", "diffHunk": "@@ -47,9 +47,9 @@ public type BearerAuthHandler object {\n \n     # Authenticates the incoming request with the use of credentials passed as the Bearer Auth header.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if authenticated successfully. Else, returns `false`\n-    # or the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - `true` if authenticated successfully, `false` otherwise,\n+    # or else an `http:AuthenticationError` in case of an error", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNzA3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408817075", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance, an `http:AuthenticationError` in case of an error,\n          \n          \n            \n                # or else `()` if nothing is to be returned\n          \n          \n            \n                # + return - The updated `http:Request` instance, an `http:AuthenticationError` in case of an error,\n          \n          \n            \n                #                 or else `()` if nothing is to be returned", "author": "chamil321", "createdAt": "2020-04-15T12:52:05Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/bearer_auth_handler.bal", "diffHunk": "@@ -87,10 +87,10 @@ public type BearerAuthHandler object {\n \n     # Inspects the request and response and calls the Auth provider for inspection.\n     #\n-    # + req - The `Request` instance\n-    # + resp - The `Response` instance\n-    # + return - Returns the updated `Request` instance, the `AuthenticationError` in case of an error,\n-    # or `()` if nothing is to be returned\n+    # + req - The `http:Request` instance\n+    # + resp - The `http:Response` instance\n+    # + return - The updated `http:Request` instance, an `http:AuthenticationError` in case of an error,\n+    # or else `()` if nothing is to be returned", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNzQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408817447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The updated `http:Request` instance, an `http:AuthenticationError` in case of an error,\n          \n          \n            \n                # or else `()` if nothing is to be returned\n          \n          \n            \n                # + return - The updated `http:Request` instance, an `http:AuthenticationError` in case of an error,\n          \n          \n            \n                #                 or else `()` if nothing is to be returned", "author": "chamil321", "createdAt": "2020-04-15T12:52:42Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/outbound_auth_handler.bal", "diffHunk": "@@ -19,15 +19,15 @@ public type OutboundAuthHandler abstract object {\n \n     # Prepares the request with the relevant authentication requirements.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns the updated `Request` instance or the `AuthenticationError` in case of an error\n+    # + req - The `http:Request` instance\n+    # + return - The updated `http:Request` instance or else an `http:AuthenticationError` in case of an error\n     public function prepare(Request req) returns Request|AuthenticationError;\n \n     # Inspects the request and response and evaluates what is to be done.\n     #\n-    # + req - The `Request` instance\n-    # + resp - The `Response` instance\n-    # + return - Returns the updated `Request` instance, the `AuthenticationError` in case of an error,\n-    # or `()` if nothing is to be returned\n+    # + req - The `http:Request` instance\n+    # + resp - The `http:Response` instance\n+    # + return - The updated `http:Request` instance, an `http:AuthenticationError` in case of an error,\n+    # or else `()` if nothing is to be returned", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMjY4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408822680", "bodyText": "Since this is a remote function, we cannot use dot operation right? Someone must have mistakenly added the dot operation. Shall we fix it too?\nWe can remove Client.submit() or replace it with Client->submit(). Need to fix above methods as well", "author": "chamil321", "createdAt": "2020-04-15T13:00:59Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -160,14 +160,14 @@ public type Client client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `Client.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `Client.submit()` function does not give out a `Response` as the result.", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMzA1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408823059", "bodyText": "Also why we haven't added sample code snippets for these functions?", "author": "chamil321", "createdAt": "2020-04-15T13:01:40Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -160,14 +160,14 @@ public type Client client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `Client.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `Client.submit()` function does not give out a `Response` as the result.\n+    # Rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNTIzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408825236", "bodyText": "Since this is a remote function, we cannot use dot operation right? Someone must have mistakenly added the dot operation. Shall we fix it too?\nWe can remove HttpClient.submit() or replace it with HttpClient->submit(). Need to fix the above methods as well", "author": "chamil321", "createdAt": "2020-04-15T13:05:10Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result.", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNTgzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408825836", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n                # + return - An `http:ListenerError` if failed to respond or else `()`", "author": "chamil321", "createdAt": "2020-04-15T13:06:10Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -34,8 +34,8 @@ public type Caller client object {\n     # Sends the outbound response to the caller.\n     #\n     # + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - Returns an `http:ListenerError` if failed to respond\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - An `http:ListenerError` if failed to respond", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408826008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:ListenerError` if failed to send the `100-continue` response\n          \n          \n            \n                # + return - An `http:ListenerError` if failed to send the `100-continue` response or else `()`", "author": "chamil321", "createdAt": "2020-04-15T13:06:26Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -95,7 +95,7 @@ public type Caller client object {\n \n     # Sends a `100-continue` response to the caller.\n     #\n-    # + return - Returns an `http:ListenerError` if failed to send the `100-continue` response\n+    # + return - An `http:ListenerError` if failed to send the `100-continue` response", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjE0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408826142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:ListenerError` if failed to send the redirect response\n          \n          \n            \n                # + return - An `http:ListenerError` if failed to send the redirect response or else `()`", "author": "chamil321", "createdAt": "2020-04-15T13:06:41Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -107,7 +107,7 @@ public type Caller client object {\n     # + response - Response to be sent to the caller\n     # + code - The redirect status code to be sent\n     # + locations - An array of URLs to which the caller can redirect to\n-    # + return - Returns an `http:ListenerError` if failed to send the redirect response\n+    # + return - An `http:ListenerError` if failed to send the redirect response", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjMwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408826309", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n                # + return - An `http:ListenerError` if failed to respond or else `()`", "author": "chamil321", "createdAt": "2020-04-15T13:06:56Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -140,7 +140,7 @@ public type Caller client object {\n     #\n     # + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ReadableByteChannel`\n     #             or `mime:Entity[]`\n-    # + return - Returns an `http:ListenerError` if failed to respond\n+    # + return - An `http:ListenerError` if failed to respond", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408826428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n                # + return - An `http:ListenerError` if failed to respond or else `()`", "author": "chamil321", "createdAt": "2020-04-15T13:07:10Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -152,7 +152,7 @@ public type Caller client object {\n     # + uri - Represents the most specific URI for the newly created resource\n     # + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ReadableByteChannel`\n     #             or `mime:Entity[]`. This message is optional.\n-    # + return - Returns an `http:ListenerError` if failed to respond\n+    # + return - An `http:ListenerError` if failed to respond", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408826559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:ListenerError` if failed to respond\n          \n          \n            \n                # + return - An `http:ListenerError` if failed to respond or else `()`", "author": "chamil321", "createdAt": "2020-04-15T13:07:23Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -166,7 +166,7 @@ public type Caller client object {\n     #\n     # + message - The outbound response or any payload of type `string`, `xml`, `json`, `byte[]`, `io:ReadableByteChannel`\n     #             or `mime:Entity[]`. This message is optional.\n-    # + return - Returns an `http:ListenerError` if failed to respond\n+    # + return - An `http:ListenerError` if failed to respond", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyODU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408828568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the `http:Response` for a previously -ubmitted request.\n          \n          \n            \n                # Retrieves the `http:Response` for a previously submitted request.", "author": "chamil321", "createdAt": "2020-04-15T13:10:31Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_retry_client.bal", "diffHunk": "@@ -229,41 +229,41 @@ public type RetryClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously -ubmitted request.", "originalCommit": "ff21d4c0711bdc8a38a782e566a9906513ec5865", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/05da1429cfc492fc3a71fdf271f9367fde3d2123", "message": "Apply suggestions from code review\r\n\r\nResolve review suggestions\n\nCo-Authored-By: Chamil Elladeniya <chamilmadawa8@gmail.com>\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T16:01:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2Njk2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408966963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if it authenticated successfully, `false` otherwise, or an `http:AuthenticationError` in case of errors\n          \n          \n            \n                # + return - `true` if it authenticated successfully, `false` otherwise, or else an `http:AuthenticationError` in case of errors", "author": "daneshk", "createdAt": "2020-04-15T16:16:23Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/inbound_auth_handler.bal", "diffHunk": "@@ -19,13 +19,13 @@ public type InboundAuthHandler abstract object {\n \n     # Checks if the request can be authenticated with the relevant `InboundAuthHandler` implementation.\n     #\n-    # + req - The `Request` instance\n-    # + return - Returns `true` if can be authenticated. Else, returns `false`\n+    # + req - The `http:Request` instance\n+    # + return - `true` if it can be authenticated or else `false`\n     public function canProcess(Request req) returns boolean;\n \n     # Tries to authenticate the request with the relevant `InboundAuthHandler` implementation.\n     #\n-    # + req - `Request` instance\n-    # + return - `true` if authenticated successfully, else `false` or, `AuthenticationError` in case of errors\n+    # + req - The `http:Request` instance\n+    # + return - `true` if it authenticated successfully, `false` otherwise, or an `http:AuthenticationError` in case of errors", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODI5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408968293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The service-level authentication annotations\n          \n          \n            \n            # + return - The service-level authentication annotations or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:18:30Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -209,10 +209,10 @@ function getScopes(FilterContext context) returns Scopes|boolean {\n     return true;\n }\n \n-# Retrieve the authentication annotation value for service level.\n+# Retrieves the authentication annotation value for the service level.\n #\n # + context - The `FilterContext` instance\n-# + return - Returns the service-level authentication annotations\n+# + return - The service-level authentication annotations", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODczNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408968735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Returns the resource-level and service-level authentication annotations\n          \n          \n            \n            # + return - Returns the resource-level and service-level authentication annotations or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:19:07Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -221,7 +221,7 @@ function getServiceAuthConfig(FilterContext context) returns ServiceAuth? {\n     }\n }\n \n-# Retrieve the authentication annotation value for resource level and service level.\n+# Retrieves the authentication annotation value for the resource level and service level.\n #\n # + context - The `FilterContext` instance\n # + return - Returns the resource-level and service-level authentication annotations", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2OTg2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408969864", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The prepared `AuthenticationError` instance\n          \n          \n            \n            # + return - The prepared `http:AuthenticationError` instance", "author": "daneshk", "createdAt": "2020-04-15T16:20:54Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -273,7 +273,7 @@ function createResponseHeaderMap(Response resp) returns @tainted map<anydata> {\n #\n # + message -The error message\n # + err - The `error` instance\n-# + return - Returns the prepared `AuthenticationError` instance\n+# + return - The prepared `AuthenticationError` instance", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDEwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408970109", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The prepared `AuthorizationError` instance\n          \n          \n            \n            # + return - The prepared `http:AuthorizationError` instance", "author": "daneshk", "createdAt": "2020-04-15T16:21:16Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -288,7 +288,7 @@ function prepareAuthenticationError(string message, error? err = ()) returns Aut\n #\n # + message -The error message\n # + err - The `error` instance\n-# + return - Returns the prepared `AuthorizationError` instance\n+# + return - The prepared `AuthorizationError` instance", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTMwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408971307", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:23:00Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992029", "bodyText": "Should be \"An\".", "author": "praneesha", "createdAt": "2020-04-15T16:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjE1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r409022156", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTk2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408971969", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:24:05Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjEzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992133", "bodyText": "Should be \"An\".", "author": "praneesha", "createdAt": "2020-04-15T16:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MjIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408972225", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised HTTP `http:Response` message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised HTTP `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:24:26Z", "path": "stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal", "diffHunk": "@@ -271,39 +271,39 @@ public type HttpCachingClient client object {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `http:ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised HTTP `http:Response` message or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MzkyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408973921", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation or else an `http:ClientError` if the submission fails", "author": "daneshk", "createdAt": "2020-04-15T16:27:08Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -160,14 +160,14 @@ public type Client client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `Client.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `Client.submit()` function does not give out a `Response` as the result.\n+    # Rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDgxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408974817", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an error if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http: ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:28:32Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,32 +176,32 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTcyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408975720", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:29:48Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,32 +176,32 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408976056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:30:20Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -176,32 +176,32 @@ public type Client client object {\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n     # This just pass the request to actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # Passes the request to an actual network call.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an error if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Njg3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408976876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred when adding a cookie or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred when adding a cookie or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:31:46Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -36,7 +36,7 @@ public type CookieStore object {\n     # + cookieConfig - Configurations associated with the cookies\n     # + url - Target service URL\n     # + requestPath - Resource path\n-    # + return - An error will be returned if there is any error occurred when adding a cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred when adding a cookie or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzA5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408977091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of the cookie or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of the cookie or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:32:08Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -195,7 +195,7 @@ public type CookieStore object {\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of the cookie or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzI5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408977294", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of cookies by domain or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of cookies by domain or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:32:27Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -224,7 +224,7 @@ public type CookieStore object {\n     # Removes cookies, which match with the given domain.\n     #\n     # + domain - Domain of the cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of cookies by domain or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of cookies by domain or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408977613", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of expired cookies or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of expired cookies or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:32:57Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -246,7 +246,7 @@ public type CookieStore object {\n \n     # Removes all expired cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of expired cookies or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of expired cookies or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NzgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408977810", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of all the cookies or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of all the cookies or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:33:16Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -278,7 +278,7 @@ public type CookieStore object {\n \n     # Removes all the cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of all the cookies or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Nzk5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408977992", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:33:34Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -53,7 +53,7 @@ public type CsvPersistentCookieHandler object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODI4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408978283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of the cookie or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of the cookie or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:34:03Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -115,7 +115,7 @@ public type CsvPersistentCookieHandler object {\n     # + name - Name of the persistent cookie to be removed\n     # + domain - Domain of the persistent cookie to be removed\n     # + path - Path of the persistent cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of the cookie or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODQ1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408978459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of all the cookies or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of all the cookies or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:34:20Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -148,7 +148,7 @@ public type CsvPersistentCookieHandler object {\n \n     # Removes all persistent cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the removal of all the cookies or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODc5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408978791", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `HttpFuture`, which represents an asynchronous service invocation or else an `http:ClientError` if the submission fails", "author": "daneshk", "createdAt": "2020-04-15T16:34:51Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -179,45 +179,45 @@ public type CookieClient object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTIzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408979232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An HTTP Push Promise message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:35:35Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -179,45 +179,45 @@ public type CookieClient object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request request = <Request>message;\n         return self.httpClient->submit(httpVerb, path, request);\n     }\n \n-    # Retrieves the `Response` for a previously-submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP response message or else an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously-submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - A `boolean`, which represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously-submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTc4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408979788", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised HTTP `http:Response` message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised HTTP `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:36:28Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/http_cookie_client.bal", "diffHunk": "@@ -179,45 +179,45 @@ public type CookieClient object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `HttpFuture`, which represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request request = <Request>message;\n         return self.httpClient->submit(httpVerb, path, request);\n     }\n \n-    # Retrieves the `Response` for a previously-submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` relates to a previous asynchronous invocation\n+    # + return - An HTTP response message or else an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously-submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - A `boolean`, which represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously-submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message or an `http:ClientError` if the invocation fails\n     public function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError{\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message or an `ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised HTTP `http:Response` message or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MDA4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408980089", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:36:55Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MDUyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408980525", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies\n          \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else an `http:CookieHandlingError` if one occurred during the retrieval of the cookies", "author": "daneshk", "createdAt": "2020-04-15T16:37:37Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else nil\n     public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n \n     # Gets all persistent cookies.\n     #\n-    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during the retrieval of the cookies\n+    # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MDkyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408980924", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is one occurred during the removal of the cookie or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is one occurred during the removal of the cookie or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:38:13Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else nil\n     public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n \n     # Gets all persistent cookies.\n     #\n-    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during the retrieval of the cookies\n+    # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies\n     public function getAllCookies() returns Cookie[]|CookieHandlingError;\n \n     # Removes a specific persistent cookie.\n     #\n     # + name - Name of the persistent cookie to be removed\n     # + domain - Domain of the persistent cookie to be removed\n     # + path - Path of the persistent cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is one occurred during the removal of the cookie or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MTE5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408981196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:CookieHandlingError` if there is one occurred during the removal of all the cookies or else nil\n          \n          \n            \n                # + return - An `http:CookieHandlingError` if there is one occurred during the removal of all the cookies or else `()`", "author": "daneshk", "createdAt": "2020-04-15T16:38:35Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -20,24 +20,24 @@ public type PersistentCookieHandler abstract object {\n     # Adds a persistent cookie to the cookie store.\n     #\n     # + cookie - Cookie to be added\n-    # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is any error occurred during the storing process of the cookie or else nil\n     public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n \n     # Gets all persistent cookies.\n     #\n-    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during the retrieval of the cookies\n+    # + return - Array of persistent cookies stored in the cookie store or else an error if one occurred during the retrieval of the cookies\n     public function getAllCookies() returns Cookie[]|CookieHandlingError;\n \n     # Removes a specific persistent cookie.\n     #\n     # + name - Name of the persistent cookie to be removed\n     # + domain - Domain of the persistent cookie to be removed\n     # + path - Path of the persistent cookie to be removed\n-    # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is one occurred during the removal of the cookie or else nil\n     public function removeCookie(string name, string domain, string path) returns CookieHandlingError?;\n \n     # Removes all persistent cookies.\n     #\n-    # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned\n+    # + return - An `http:CookieHandlingError` if there is one occurred during the removal of all the cookies or else nil", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MTUwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408981509", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - An `http:Response` for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:39:05Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -53,7 +53,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MTY4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408981680", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - An `http:Response` for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:39:22Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -63,7 +63,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MTg1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408981854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - An `http:Response` for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:39:41Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -74,7 +74,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408982013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:39:57Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -84,7 +84,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjE5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408982196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - An `http:Response` for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:40:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -94,7 +94,7 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjM0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408982348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - An `http:Response` for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:40:29Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -104,7 +104,7 @@ public type HttpClient client object {\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjUzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408982533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:40:45Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -114,7 +114,7 @@ public type HttpClient client object {\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjY4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408982686", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + req - The `Request` instance\n          \n          \n            \n            # + req - The `http:Request` instance", "author": "ldclakmal", "createdAt": "2020-04-15T16:41:00Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/utils.bal", "diffHunk": "@@ -50,7 +50,7 @@ public type Scopes string[]|string[][];\n \n # Extracts the Authorization header value from the request.\n #\n-# + req - Request instance\n+# + req - The `Request` instance", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjcwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408982706", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - An `http:Response` for the request or else an `http:ClientError` if failed to establish communication with the upstream server", "author": "daneshk", "createdAt": "2020-04-15T16:41:02Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MzY1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408983654", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or else an `http:ClientError` if the submission fails", "author": "daneshk", "createdAt": "2020-04-15T16:42:30Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result.\n+    # Rather, it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MzY5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408983694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # The `HttpClient.submit()` function does not give out an `http:Response` as the result.\n          \n          \n            \n                # The `HttpClient->submit()` function does not give out an `http:Response` as the result.", "author": "daneshk", "createdAt": "2020-04-15T16:42:34Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result.", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4Mzg5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408983896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:42:52Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result.\n+    # Rather, it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NDkxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408984910", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:44:22Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result.\n+    # Rather, it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return externHasPromise(self, httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NTEzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408985134", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:44:45Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -123,57 +123,57 @@ public type HttpClient client object {\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `ClientError` if failed to establish communication with the upstream server\n+    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n     public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n         return externForward(self, java:fromString(path), request);\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `HttpClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `HttpClient.submit()` function does not give out an `http:Response` as the result.\n+    # Rather, it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `ClientError` if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(@untainted string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return externSubmit(self, java:fromString(httpVerb), java:fromString(path), <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return externGetResponse(self, httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return externHasPromise(self, httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return externGetNextPromise(self, httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDAxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408994011", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T16:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NTEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NjA1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408986058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A tuple containing the value and its parameter map\n          \n          \n            \n            # + return - A tuple containing the value and its parameter map or else an `http:ClientError` if the header parsing fails", "author": "daneshk", "createdAt": "2020-04-15T16:46:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_commons.bal", "diffHunk": "@@ -227,7 +227,7 @@ public type CommonClientConfiguration record {|\n # Parses the given header value to extract its value and parameter map.\n #\n # + headerValue - The header value\n-# + return - Returns a tuple containing the value and its parameter map\n+# + return - A tuple containing the value and its parameter map", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NjM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408986399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:WebSocketCaller` instance or else an error on failure to upgrade\n          \n          \n            \n                # + return - An `http:WebSocketCaller` instance or else an `http:WebSocketError` on failure to upgrade", "author": "daneshk", "createdAt": "2020-04-15T16:46:46Z", "path": "stdlib/http/src/main/ballerina/src/http/http_connection.bal", "diffHunk": "@@ -77,7 +77,7 @@ public type Caller client object {\n     # Sends an upgrade request with custom headers.\n     #\n     # + headers - A `map` of custom headers for handshake\n-    # + return - `WebSocketCaller` or error on failure to upgrade\n+    # + return - The `http:WebSocketCaller` instance or else an error on failure to upgrade", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NzgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408987810", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            present, then the first value is returned. Nil is returned if no key is found.\n          \n          \n            \n                #            present, then the first value is returned. `()` is returned if no key is found.", "author": "daneshk", "createdAt": "2020-04-15T16:48:55Z", "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -74,7 +74,7 @@ public type Request object {\n     # Gets the query param value associated with the given key.\n     #\n     # + key - Represents the query param key\n-    # + return - Returns the query param value associated with the given key as a string. If multiple param values are\n+    # + return - The query param value associated with the given key as a string. If multiple param values are\n     #            present, then the first value is returned. Nil is returned if no key is found.", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDY3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408994677", "bodyText": "Incorrect return statement format.", "author": "praneesha", "createdAt": "2020-04-15T16:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NzgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODE1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408988151", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in\n          \n          \n            \n                # + return - The body parts as an array of entities or else an `http:ClientError` if there were any errors", "author": "daneshk", "createdAt": "2020-04-15T16:49:23Z", "path": "stdlib/http/src/main/ballerina/src/http/http_request.bal", "diffHunk": "@@ -375,7 +375,7 @@ public type Request object {\n     # Extracts body parts from the request. If the content type is not a composite media type, an error\n     # is returned.\n \n-    # + return - Returns the body parts as an array of entities or an `http:ClientError` if there were any errors in\n+    # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1d1b3f0b59cc0f1b60396f64da97f75c4671fa70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1d1b3f0b59cc0f1b60396f64da97f75c4671fa70", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/utils.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:49:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODU1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408988558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in\n          \n          \n            \n                # + return - The body parts as an array of entities or else an `http:ClientError` if there were any errors in", "author": "daneshk", "createdAt": "2020-04-15T16:50:05Z", "path": "stdlib/http/src/main/ballerina/src/http/http_response.bal", "diffHunk": "@@ -288,7 +288,7 @@ public type Response object {\n \n     # Extracts body parts from the response. If the content type is not a composite media type, an error is returned.\n     #\n-    # + return - Returns the body parts as an array of entities or an `http:ClientError` if there were any errors in\n+    # + return - The body parts as an array of entities or an `http:ClientError` if there were any errors in", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a5fe9257ba8430296beb69620bca3769536237c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5fe9257ba8430296beb69620bca3769536237c3", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/inbound_auth_handler.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:50:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408988976", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or else an `http:ClientError` if the submission fails", "author": "daneshk", "createdAt": "2020-04-15T16:50:46Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -213,47 +213,47 @@ public type HttpSecureClient client object {\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a773c124e696ecc4a3ffed2efbe7505e52c2fce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a773c124e696ecc4a3ffed2efbe7505e52c2fce", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/utils.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:50:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTMwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408989307", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an error if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:51:19Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -213,47 +213,47 @@ public type HttpSecureClient client object {\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to the actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3664d465dc1e439eada1aab7280b4bcc54879143", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3664d465dc1e439eada1aab7280b4bcc54879143", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/utils.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:51:44Z", "type": "commit"}, {"oid": "af6985dd4f204fa6ac5874c1293681b0db149969", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af6985dd4f204fa6ac5874c1293681b0db149969", "message": "Update stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:52:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408990061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an error if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:52:32Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -213,47 +213,47 @@ public type HttpSecureClient client object {\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to the actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # Passes the request to an actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # Passes the request to an actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjQ2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408996461", "bodyText": "Wrong return format.", "author": "praneesha", "createdAt": "2020-04-15T17:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTI1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408991254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an error if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:54:22Z", "path": "stdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "diffHunk": "@@ -213,47 +213,47 @@ public type HttpSecureClient client object {\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         Request req = <Request>message;\n         req = check prepareSecureRequest(req, self.config);\n         return self.httpClient->submit(httpVerb, path, req);\n     }\n \n-    # This just pass the request to actual network call.\n+    # This just passes the request to the actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an error if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # Passes the request to an actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # Passes the request to an actual network call.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP Push Promise message, or an error if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # This just pass the request to actual network call.\n+    # Passes the request to an actual network call.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an error if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjU5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408996596", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTQ5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408991492", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:54:47Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -50,7 +50,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`,\n     #             `byte[]`, `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NzA1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408997051", "bodyText": "Should be \"or else an\" and remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTc2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408991767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:55:15Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -65,8 +65,8 @@ public type RedirectClient client object {\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n-    #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    #             `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - The `http:Response` message or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTkxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408991916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:55:32Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -81,8 +81,8 @@ public type RedirectClient client object {\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or or any payload of type `string`, `xml`, `json`,\n-    #             `byte[]`, `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    #             `byte[]`, `io:ReadableByteChannel`, or `mime:Entity[]`\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Nzc3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408997778", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjEwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992109", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:55:51Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -98,7 +98,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Nzg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408997845", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjEwOQ=="}], "type": "inlineReview"}, {"oid": "1326b20146c615b4c464ecab5295f5a0bd109894", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1326b20146c615b4c464ecab5295f5a0bd109894", "message": "Update stdlib/http/src/main/ballerina/src/http/caching/http_caching_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:56:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992273", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:56:10Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -112,7 +112,7 @@ public type RedirectClient client object {\n     #\n     # + path - Resource path\n     # + request - An HTTP inbound request message\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NzkyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408997921", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjQ1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992451", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:56:27Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -124,7 +124,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998001", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjQ1MQ=="}], "type": "inlineReview"}, {"oid": "d4682af95048f5b49d54fb2cf9b0520ecbd14347", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4682af95048f5b49d54fb2cf9b0520ecbd14347", "message": "Update stdlib/http/src/main/ballerina/src/http/http_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:56:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992621", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:56:43Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -146,7 +146,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODA4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998083", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Mjc3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992773", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:56:59Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -162,7 +162,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODE2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998166", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Mjc3Mw=="}], "type": "inlineReview"}, {"oid": "ba51230defa31a7df47dd14bc69023187d51f2cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba51230defa31a7df47dd14bc69023187d51f2cc", "message": "Update stdlib/http/src/main/ballerina/src/http/http_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:57:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Mjk2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408992963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:57:15Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -178,7 +178,7 @@ public type RedirectClient client object {\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`,\n     #             `byte[]`, `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The HTTP `Response` message, or an error if the invocation fails\n+    # + return - The `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODI2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998266", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Mjk2Mw=="}], "type": "inlineReview"}, {"oid": "6d5ada126c8bb0dedc8e4783379063e6cadfb17e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d5ada126c8bb0dedc8e4783379063e6cadfb17e", "message": "Update stdlib/http/src/main/ballerina/src/http/http_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:57:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzE4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408993187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation or else an `http:ClientError` if the submission fails", "author": "daneshk", "createdAt": "2020-04-15T16:57:37Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODMyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998325", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzQ4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408993482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:58:02Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998396", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Mzk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408993951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:58:45Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n     # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODQ5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998492", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5Mzk1MQ=="}], "type": "inlineReview"}, {"oid": "b4680df522533eec16e725d9c040f4ee4b39ae68", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4680df522533eec16e725d9c040f4ee4b39ae68", "message": "Update stdlib/http/src/main/ballerina/src/http/http_commons.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:59:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408994183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T16:59:05Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -196,45 +196,45 @@ public type RedirectClient client object {\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an error if the submission fails\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission fails\n     public remote function submit(string httpVerb, string path, RequestMessage message) returns HttpFuture|ClientError {\n         return self.httpClient->submit(httpVerb, path, <Request>message);\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n     # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns (boolean) {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an error if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         return self.httpClient->getNextPromise(httpFuture);\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an error if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised `http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODU0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998549", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDQzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408994437", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation or else an `http:ClientError` if the submission", "author": "daneshk", "createdAt": "2020-04-15T16:59:27Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -215,14 +215,14 @@ public type FailoverClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb. The `FailoverClient.submit()` function does not\n-    # return a `Response` as the result, rather it returns an `HttpFuture` which can be used for subsequent interactions\n+    # return an `http:Response` as the result. Rather it returns an `http:HttpFuture` which can be used for subsequent interactions\n     # with the HTTP endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998613", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDQzNw=="}], "type": "inlineReview"}, {"oid": "e8170f54234992c6372799d4a9de51736ed12253", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8170f54234992c6372799d4a9de51736ed12253", "message": "Update stdlib/http/src/main/ballerina/src/http/http_request.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T16:59:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDgwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408994806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:00:06Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998650", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408995399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:00:56Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODcwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998708", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTM5OQ=="}], "type": "inlineReview"}, {"oid": "9e8675ff502b535cae044f3df0a5189d58a13bcc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e8675ff502b535cae044f3df0a5189d58a13bcc", "message": "Update stdlib/http/src/main/ballerina/src/http/http_response.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:01:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTY4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408995681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A promised`http:Response` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - A promised `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:01:28Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -234,44 +234,44 @@ public type FailoverClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n-    # + return - An HTTP response message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public remote function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n         Client foClient = getLastSuceededClientEP(self);\n         return foClient->getResponse(httpFuture);\n     }\n \n-    # Checks whether a `PushPromise` exists for a previously submitted request.\n+    # Checks whether an `http:PushPromise` exists for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public remote function hasPromise(HttpFuture httpFuture) returns boolean {\n         return false;\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP Push Promise message, or an `ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An HTTP Push Promise message, or an `http:ClientError` if the invocation fails\n     public remote function getNextPromise(HttpFuture httpFuture) returns PushPromise|ClientError {\n         string message = \"Failover client not supported for getNextPromise action\";\n         UnsupportedActionError err = error(UNSUPPORTED_ACTION, message = message);\n         return err;\n     }\n \n-    # Retrieves the promised server push `Response` message.\n+    # Retrieves the promised server push `http:Response` message.\n     #\n-    # + promise - The related `PushPromise`\n-    # + return - A promised HTTP `Response` message, or an `ClientError` if the invocation fails\n+    # + promise - The related `http:PushPromise`\n+    # + return - A promised`http:Response` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODc1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998757", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTY4MQ=="}], "type": "inlineReview"}, {"oid": "db90cc082129b82a75267680f48555065dc8eaac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db90cc082129b82a75267680f48555065dc8eaac", "message": "Update stdlib/http/src/main/ballerina/src/http/http_secure_client.bal\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-04-15T17:01:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjAwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408996000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n          \n          \n            \n                # + return - An `http:HttpFuture` that represents an asynchronous service invocation or else an `http:ClientError` if the submission", "author": "daneshk", "createdAt": "2020-04-15T17:01:57Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -342,14 +342,14 @@ public type CircuitBreakerClient client object {\n     }\n \n     # Submits an HTTP request to a service with the specified HTTP verb.\n-    # The `CircuitBreakerClient.submit()` function does not give out a `Response` as the result,\n-    # rather it returns an `HttpFuture` which can be used to do further interactions with the endpoint.\n+    # The `CircuitBreakerClient.submit()` function does not give out a `Response` as the result.\n+    # Rather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n     #\n     # + httpVerb - The HTTP verb value\n     # + path - The resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - An `HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission\n+    # + return - An `http:HttpFuture` that represents an asynchronous service invocation, or an `http:ClientError` if the submission", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODgwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998800", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjMyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408996322", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:Response` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:02:30Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -370,44 +370,44 @@ public type CircuitBreakerClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODgzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998838", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjYxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408996617", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails\n          \n          \n            \n                # + return - An `http:PushPromise` message or else an `http:ClientError` if the invocation fails", "author": "daneshk", "createdAt": "2020-04-15T17:03:00Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/http_circuit_breaker.bal", "diffHunk": "@@ -370,44 +370,44 @@ public type CircuitBreakerClient client object {\n         }\n     }\n \n-    # Retrieves the `Response` for a previously submitted request.\n+    # Retrieves the `http:Response` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` related to a previous asynchronous invocation\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n     # + return - An HTTP response message, or an `http:ClientError` if the invocation fails\n     public function getResponse(HttpFuture httpFuture) returns Response|ClientError {\n-        // No need to check for response as we already check for the response in submit method\n+        // No need to check for the response as we already check for the response in the submit method\n         return self.httpClient->getResponse(httpFuture);\n     }\n \n-    # Circuit breaking not supported. Defaults to the `CircuitBreakerClient.hasPromise()` function of the underlying\n+    # Circuit breaking is not supported. The default value is the `CircuitBreakerClient.hasPromise()` function of the underlying\n     # HTTP remote functions provider.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - A `boolean` that represents whether a `PushPromise` exists\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - A `boolean`, which represents whether an `http:PushPromise` exists\n     public function hasPromise(HttpFuture httpFuture) returns boolean {\n         return self.httpClient->hasPromise(httpFuture);\n     }\n \n-    # Retrieves the next available `PushPromise` for a previously submitted request.\n+    # Retrieves the next available `http:PushPromise` for a previously-submitted request.\n     #\n-    # + httpFuture - The `HttpFuture` relates to a previous asynchronous invocation\n-    # + return - An HTTP `PushPromise` message, or an `http:ClientError` if the invocation fails\n+    # + httpFuture - The `http:HttpFuture` related to a previous asynchronous invocation\n+    # + return - An `http:PushPromise` message, or an `http:ClientError` if the invocation fails", "originalCommit": "05da1429cfc492fc3a71fdf271f9367fde3d2123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODg5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22520#discussion_r408998898", "bodyText": "Remove the comma.", "author": "praneesha", "createdAt": "2020-04-15T17:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NjYxNw=="}], "type": "inlineReview"}]}