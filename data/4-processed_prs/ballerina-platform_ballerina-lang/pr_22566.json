{"pr_number": 22566, "pr_title": "Update doc API for module, Filepath", "pr_createdAt": "2020-04-10T07:11:10Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566", "timeline": [{"oid": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "message": "Update doc API for module, Filepath", "committedDate": "2020-04-10T07:08:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MTg3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406841873", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [File Path Examples](https://ballerina.io/v1-2/learn/by-example/filepath.html).\n          \n          \n            \n            * For an example on the usage of the operations, see the [File Path Example](https://ballerina.io/v1-2/learn/by-example/filepath.html).", "author": "praneesha", "createdAt": "2020-04-10T16:45:57Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/Module.md", "diffHunk": "@@ -1,51 +1,6 @@\n-## Module overview\n-\n This module provides the utility functions for manipulating the file path in a way that is compatible with \n the target operating system.\n \n-## Sample\n-The sample given below uses a few functions that are in the `ballerina/filepath` module.\n-\n-```ballerina\n-import ballerina/filepath;\n-import ballerina/io;\n-\n-public function main() {\n-    // Get the absolute representation of the path.\n-    string absValue = checkpanic filepath:absolute(<@untainted> \"test.txt\");\n-    io:println(absValue);\n-\n-    // Check whether the path is absolute.\n-    boolean isAbs = checkpanic filepath:isAbsolute(\"/A/B/C\");\n-    io:println(isAbs); // On Unix : returns true\n-    \n-    // Get the base name of the path.\n-    string name = checkpanic filepath:filename(\"/A/B/C\");\n-    io:println(name); // returns C\n+For information on the operations, which you can perform with this module, see the below **Functions**.\n \n-    // Get the enclosing parent directory.\n-    string parentPath = checkpanic filepath:parent(\"/A/B/C\");\n-    io:println(parentPath); // returns B\n-    \n-    // Get the shortest path name equivalent to path purely via lexical processing.\n-    string normalizedPath = checkpanic filepath:normalize(\"foo/../bar\");\n-    io:println(normalizedPath); // returns bar\n-    \n-    // Get the list of path elements joined by the OS-specific Path Separator.\n-    string[] parts = checkpanic filepath:split(\"/A/B/C\");\n-    io:println(parts); // returns {\"A\", \"B\", \"C\"} \n-    \n-    // Join any number of path elements into a single path.\n-    string path = checkpanic filepath:build(\"/\", \"foo\", \"bar\");\n-    io:println(path); // On Unix : returns /foo/bar\n-    \n-    // Get the extension of the file path.\n-    string ext = checkpanic filepath:extension(\"path.bal\");\n-    io:println(ext); // returns bal\n-    \n-    // Returns a relative path that is logically equivalent to the target path when joined to the base path.\n-    string relPath = checkpanic filepath:relative(\"a/b/c\", \"a/c/d\");\n-    io:println(relPath); // On Unix : returns ../../c/d\n-    \n-}\n-```\n+* [File Path Examples](https://ballerina.io/v1-2/learn/by-example/filepath.html).", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MTkzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406841931", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:46:06Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -25,8 +25,11 @@ string pathSeparator = isWindows ? \"\\\\\" : \"/\";\n string pathListSeparator = isWindows ? \";\" : \":\";\n \n # Retrieves the absolute path from the provided location.\n+# ```ballerina\n+#  string absolutePath = checkpanic filepath:absolute(<@untainted> \"test.txt\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MTk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406841979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The absolute path reference or an error if the path cannot be derived\n          \n          \n            \n            # + return - The absolute path reference or else an error if the path cannot be derived", "author": "praneesha", "createdAt": "2020-04-10T16:46:14Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -25,8 +25,11 @@ string pathSeparator = isWindows ? \"\\\\\" : \"/\";\n string pathListSeparator = isWindows ? \";\" : \":\";\n \n # Retrieves the absolute path from the provided location.\n+# ```ballerina\n+#  string absolutePath = checkpanic filepath:absolute(<@untainted> \"test.txt\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of file path\n # + return - The absolute path reference or an error if the path cannot be derived", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjA2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns path separator of underline operating system.\n          \n          \n            \n            # Returns the path separator of the underlying operating system.", "author": "praneesha", "createdAt": "2020-04-10T16:46:28Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -50,13 +53,19 @@ function externAbsolute(handle path) returns handle|Error =\n } external;\n \n # Returns path separator of underline operating system.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjEyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - String value of path separator\n          \n          \n            \n            # + return - String value of the path separator", "author": "praneesha", "createdAt": "2020-04-10T16:46:36Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -50,13 +53,19 @@ function externAbsolute(handle path) returns handle|Error =\n } external;\n \n # Returns path separator of underline operating system.\n+# ```ballerina\n+#  string pathSeparator = filepath:getPathSeparator();\n+# ```\n #\n # + return - String value of path separator", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjIxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns path list separator of the underline operating system.\n          \n          \n            \n            # Returns the path list separator of the underlying operating system.", "author": "praneesha", "createdAt": "2020-04-10T16:46:48Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -50,13 +53,19 @@ function externAbsolute(handle path) returns handle|Error =\n } external;\n \n # Returns path separator of underline operating system.\n+# ```ballerina\n+#  string pathSeparator = filepath:getPathSeparator();\n+# ```\n #\n # + return - String value of path separator\n public function getPathSeparator() returns string {\n     return pathSeparator;\n }\n \n-# Returns path list separator of underline operating system.\n+# Returns path list separator of the underline operating system.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjI3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842273", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - String value of path list separator\n          \n          \n            \n            # + return - String value of the path list separator", "author": "praneesha", "createdAt": "2020-04-10T16:46:56Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -50,13 +53,19 @@ function externAbsolute(handle path) returns handle|Error =\n } external;\n \n # Returns path separator of underline operating system.\n+# ```ballerina\n+#  string pathSeparator = filepath:getPathSeparator();\n+# ```\n #\n # + return - String value of path separator\n public function getPathSeparator() returns string {\n     return pathSeparator;\n }\n \n-# Returns path list separator of underline operating system.\n+# Returns path list separator of the underline operating system.\n+# ```ballerina\n+#  string pathListSeparator = filepath:getPathListSeparator();\n+# ```\n #\n # + return - String value of path list separator", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjQxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842410", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute.\n          \n          \n            \n            # On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows.", "author": "praneesha", "createdAt": "2020-04-10T16:47:19Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -66,9 +75,12 @@ public function getPathListSeparator() returns string {\n # Reports whether the path is absolute.\n # A path is absolute if it is independent of the current directory.\n # On Unix, a path is absolute if it starts with the root.\n-# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute\n+# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjQ1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842458", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:47:26Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -66,9 +75,12 @@ public function getPathListSeparator() returns string {\n # Reports whether the path is absolute.\n # A path is absolute if it is independent of the current directory.\n # On Unix, a path is absolute if it starts with the root.\n-# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute\n+# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute.\n+# ```ballerina\n+#  boolean|filepath:Error isAbsolute = filepath:isAbsolute(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjUzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842532", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True if path is absolute, else false\n          \n          \n            \n            # + return - True if path is absolute or else false", "author": "praneesha", "createdAt": "2020-04-10T16:47:37Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -66,9 +75,12 @@ public function getPathListSeparator() returns string {\n # Reports whether the path is absolute.\n # A path is absolute if it is independent of the current directory.\n # On Unix, a path is absolute if it starts with the root.\n-# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute\n+# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute.\n+# ```ballerina\n+#  boolean|filepath:Error isAbsolute = filepath:isAbsolute(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of file path\n # + return - True if path is absolute, else false", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjY3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Retrieves the base name of the file from the provided location.\n          \n          \n            \n            # Retrieves the base name of the file from the provided location,", "author": "praneesha", "createdAt": "2020-04-10T16:47:55Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -82,11 +94,14 @@ public function isAbsolute(string path) returns boolean|Error {\n }\n \n # Retrieves the base name of the file from the provided location.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MjcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Which is the last element of the path.\n          \n          \n            \n            # which is the last element of the path.", "author": "praneesha", "createdAt": "2020-04-10T16:48:01Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -82,11 +94,14 @@ public function isAbsolute(string path) returns boolean|Error {\n }\n \n # Retrieves the base name of the file from the provided location.\n-# The last element of path.\n+# Which is the last element of the path.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0Mjg3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406842874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:48:25Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -106,9 +121,12 @@ public function filename(string path) returns string|Error {\n # Returns the enclosing parent directory.\n # If the path is empty, parent returns \".\".\n # The returned path does not end in a separator unless it is the root directory.\n+# ```ballerina\n+#  string|filepath:Error parentPath = filepath:parent(\"/A/B/C.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Path of parent folder or error occurred while getting parent directory\n+# + path - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzA3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843072", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Path of parent folder or an error, if error occurred while getting parent directory\n          \n          \n            \n            # + return - Path of the parent folder or else an error if error occurred while getting the parent directory\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "author": "praneesha", "createdAt": "2020-04-10T16:48:49Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -106,9 +121,12 @@ public function filename(string path) returns string|Error {\n # Returns the enclosing parent directory.\n # If the path is empty, parent returns \".\".\n # The returned path does not end in a separator unless it is the root directory.\n+# ```ballerina\n+#  string|filepath:Error parentPath = filepath:parent(\"/A/B/C.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Path of parent folder or error occurred while getting parent directory\n+# + path - String value of file path\n+# + return - Path of parent folder or an error, if error occurred while getting parent directory", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843158", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the shortest path name equivalent to path by purely lexical processing.\n          \n          \n            \n            # Returns the shortest path name equivalent to the path by purely lexical processing.", "author": "praneesha", "createdAt": "2020-04-10T16:48:59Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -131,10 +149,13 @@ public function parent(string path) returns string|Error {\n \n # Returns the shortest path name equivalent to path by purely lexical processing.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzI3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:49:14Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -131,10 +149,13 @@ public function parent(string path) returns string|Error {\n \n # Returns the shortest path name equivalent to path by purely lexical processing.\n # Replace multiple Separator elements with a single one.\n-# Eliminate each . path name element (the current directory).\n-# Eliminate each inner .. path name element (the parent directory)\n+# Eliminate each \".\" path name element (the current directory).\n+# Eliminate each inner \"..\" path name element (the parent directory).\n+# ```ballerina\n+#  string|filepath:Error normalizedPath = filepath:normalize(\"foo/../bar\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:49:25Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -216,8 +237,11 @@ public function normalize(string path) returns string|Error {\n }\n \n # Splits a list of paths joined by the OS-specific Path Separator.\n+# ```ballerina\n+#  string[]|filepath:Error parts = filepath:split(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzQ1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + parts - String values of file path parts\n          \n          \n            \n            # + parts - String values of the file path parts", "author": "praneesha", "createdAt": "2020-04-10T16:49:38Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -241,10 +265,13 @@ public function split(string path) returns string[]|Error {\n     return parts;\n }\n \n-# Joins any number of path elements into a single path\n+# Joins any number of path elements into a single path.\n+# ```ballerina\n+#  string|filepath:Error path = filepath:build(\"/\", \"foo\", \"bar\");\n+# ```\n #\n-# + parts - String values of file path parts.\n-# + return - String value of file path.\n+# + parts - String values of file path parts", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - String value of file path\n          \n          \n            \n            # + return - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:49:44Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -241,10 +265,13 @@ public function split(string path) returns string[]|Error {\n     return parts;\n }\n \n-# Joins any number of path elements into a single path\n+# Joins any number of path elements into a single path.\n+# ```ballerina\n+#  string|filepath:Error path = filepath:build(\"/\", \"foo\", \"bar\");\n+# ```\n #\n-# + parts - String values of file path parts.\n-# + return - String value of file path.\n+# + parts - String values of file path parts\n+# + return - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzcxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True, if path is a Windows reserved name\n          \n          \n            \n            # + return - True if path is a Windows reserved name or else false otherwise", "author": "praneesha", "createdAt": "2020-04-10T16:50:14Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -254,10 +281,13 @@ public function build(string... parts) returns string|Error {\n }\n \n # Reports whether the filename is reserved.\n-# Reserved words only exist in windows.\n+# Reserved words only exist in Windows.\n+# ```ballerina\n+#  boolean|filepath:Error path = filepath:isReservedName(\"abc.txt\");\n+# ```\n #\n-# + name - filename\n-# + return - true, if path is Windows reserved name.\n+# + name - Filename\n+# + return - True, if path is a Windows reserved name", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MzgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843819", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:50:28Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -267,11 +297,14 @@ public function isReservedName(string name) returns boolean {\n }\n \n # Retrieves the extension of the file path.\n-# The extension is the suffix beginning at the final dot in the final element of path.\n-# it is empty if there is no dot.\n+# The extension is the suffix beginning at the final dot in the final element of the path.\n+# It is empty if there is no dot.\n+# ```ballerina\n+#  string|filepath:Error extension = filepath:extension(\"path.bal\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns the extension of the file. Empty string if no extension.\n+# + path - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0Mzg4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406843884", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The extension of the file, or an empty string if there is no extension\n          \n          \n            \n            # + return - The extension of the file or else an empty string if there is no extension", "author": "praneesha", "createdAt": "2020-04-10T16:50:38Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -267,11 +297,14 @@ public function isReservedName(string name) returns boolean {\n }\n \n # Retrieves the extension of the file path.\n-# The extension is the suffix beginning at the final dot in the final element of path.\n-# it is empty if there is no dot.\n+# The extension is the suffix beginning at the final dot in the final element of the path.\n+# It is empty if there is no dot.\n+# ```ballerina\n+#  string|filepath:Error extension = filepath:extension(\"path.bal\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns the extension of the file. Empty string if no extension.\n+# + path - String value of file path\n+# + return - The extension of the file, or an empty string if there is no extension", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDAyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406844022", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The extension of the file, or an empty string if there is no extension\n          \n          \n            \n            # + return - The extension of the file or else an empty string if there is no extension", "author": "praneesha", "createdAt": "2020-04-10T16:50:58Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -295,13 +328,16 @@ public function extension(string path) returns string|Error {\n     return \"\";\n }\n \n-# Returns a relative path that is logically equivalent to target path when joined to base path with an intervening\n-# separator.\n-# An error is returned if target path can't be made relative to base path.\n+# Returns a relative path that is logically equivalent to the target path when joined to the base path with an\n+# intervening separator.\n+# An error is returned if the target path cannot be made relative to the base path.\n+# ```ballerina\n+#  string|filepath:Error relativePath = filepath:relative(\"a/b/c\", \"a/c/d\");\n+# ```\n #\n-# + base - String value of the base file path.\n-# + target - String value of the target file path.\n-# + return - Returns the extension of the file. Empty string if no extension.\n+# + base - String value of the base file path\n+# + target - String value of the target file path\n+# + return - The extension of the file, or an empty string if there is no extension", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDA3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406844077", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If path is relative, the result will be relative to the current directory,\n          \n          \n            \n            # If path is relative, the result will be relative to the current directory", "author": "praneesha", "createdAt": "2020-04-10T16:51:06Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -367,8 +403,11 @@ public function relative(string base, string target) returns string|Error {\n # If path is relative, the result will be relative to the current directory,", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406844221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Resolve calls normalize on the result.\n          \n          \n            \n            # Resolves normalising calls on the result.", "author": "praneesha", "createdAt": "2020-04-10T16:51:28Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -367,8 +403,11 @@ public function relative(string base, string target) returns string|Error {\n # If path is relative, the result will be relative to the current directory,\n # unless one of the components is an absolute symbolic link.\n # Resolve calls normalize on the result.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDI2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406844263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of file path\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-10T16:51:36Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -367,8 +403,11 @@ public function relative(string base, string target) returns string|Error {\n # If path is relative, the result will be relative to the current directory,\n # unless one of the components is an absolute symbolic link.\n # Resolve calls normalize on the result.\n+# ```ballerina\n+#  string|filepath:Error resolvedPath = filepath:resolve(\"a/b/c\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of file path", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406844505", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reports whether all of filename matches the provided Glob pattern, not just a substring.\n          \n          \n            \n            # Reports whether all (not just a substring) of the filename matches the provided Glob pattern.", "author": "praneesha", "createdAt": "2020-04-10T16:52:06Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -391,11 +430,14 @@ function externResolve(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Reports whether all of filename matches the provided pattern, not just a substring.\n+# Reports whether all of filename matches the provided Glob pattern, not just a substring.", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406844786", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True if filename of the path matches with the pattern, else false\n          \n          \n            \n            # + return - True if filename of the path matches with the pattern or else false otherwise", "author": "praneesha", "createdAt": "2020-04-10T16:52:45Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -391,11 +430,14 @@ function externResolve(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Reports whether all of filename matches the provided pattern, not just a substring.\n+# Reports whether all of filename matches the provided Glob pattern, not just a substring.\n # An error is returned if the pattern is malformed.\n+# ```ballerina\n+#  boolean|filepath:Error matches = filepath:matches(\"a/b/c.java\", \"glob:*.{java,class}\");\n+# ```\n #\n-# + path - String value of the file path.\n-# + pattern - String value of the target file path.\n+# + path - String value of the file path\n+# + pattern - String value of the target file path\n # + return - True if filename of the path matches with the pattern, else false", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-10T20:01:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNTM2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406925366", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides the utility functions for manipulating the file path in a way that is compatible with \n          \n          \n            \n            the target operating system.\n          \n          \n            \n            This module provides a platform-independent API for working with file paths.", "author": "pubudu91", "createdAt": "2020-04-10T20:20:01Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/Module.md", "diffHunk": "@@ -1,51 +1,6 @@\n-## Module overview\n-\n This module provides the utility functions for manipulating the file path in a way that is compatible with \n the target operating system.", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNjE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406926180", "bodyText": "I think it's better if we can explain the reasoning behind why this param is marked as @untainted.", "author": "pubudu91", "createdAt": "2020-04-10T20:22:23Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -25,9 +25,12 @@ string pathSeparator = isWindows ? \"\\\\\" : \"/\";\n string pathListSeparator = isWindows ? \";\" : \":\";\n \n # Retrieves the absolute path from the provided location.\n+# ```ballerina\n+#  string absolutePath = checkpanic filepath:absolute(<@untainted> \"test.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - The absolute path reference or an error if the path cannot be derived\n+# + path - String value of the file path", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMzgxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408623811", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNjE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzMxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406927315", "bodyText": "What's a path list separator? Is that a standard/common term? If not, shall we define what we mean by a \"path list\"?", "author": "pubudu91", "createdAt": "2020-04-10T20:25:46Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -49,27 +52,36 @@ function externAbsolute(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Returns path separator of underline operating system.\n+# Returns the path separator of the underlying operating system.\n+# ```ballerina\n+#  string pathSeparator = filepath:getPathSeparator();\n+# ```\n #\n-# + return - String value of path separator\n+# + return - String value of the path separator\n public function getPathSeparator() returns string {\n     return pathSeparator;\n }\n \n-# Returns path list separator of underline operating system.\n+# Returns the path list separator of the underlying operating system.", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMzk4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408623986", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzc0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406927742", "bodyText": "What about the error? What's it for?", "author": "pubudu91", "createdAt": "2020-04-10T20:27:02Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -49,27 +52,36 @@ function externAbsolute(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Returns path separator of underline operating system.\n+# Returns the path separator of the underlying operating system.\n+# ```ballerina\n+#  string pathSeparator = filepath:getPathSeparator();\n+# ```\n #\n-# + return - String value of path separator\n+# + return - String value of the path separator\n public function getPathSeparator() returns string {\n     return pathSeparator;\n }\n \n-# Returns path list separator of underline operating system.\n+# Returns the path list separator of the underlying operating system.\n+# ```ballerina\n+#  string pathListSeparator = filepath:getPathListSeparator();\n+# ```\n #\n-# + return - String value of path list separator\n+# + return - String value of the path list separator\n public function getPathListSeparator() returns string {\n     return pathListSeparator;\n }\n \n # Reports whether the path is absolute.\n # A path is absolute if it is independent of the current directory.\n # On Unix, a path is absolute if it starts with the root.\n-# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute\n+# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows.\n+# ```ballerina\n+#  boolean|filepath:Error isAbsolute = filepath:isAbsolute(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - True if path is absolute, else false\n+# + path - String value of the file path\n+# + return - True if path is absolute or else false", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624056", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyODc3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406928778", "bodyText": "Again, need to document the error as well", "author": "pubudu91", "createdAt": "2020-04-10T20:29:23Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -81,12 +93,15 @@ public function isAbsolute(string path) returns boolean|Error {\n     }\n }\n \n-# Retrieves the base name of the file from the provided location.\n-# The last element of path.\n+# Retrieves the base name of the file from the provided location,\n+# which is the last element of the path.\n # Trailing path separators are removed before extracting the last element.\n+# ```ballerina\n+#  string|filepath:Error name = filepath:filename(\"/A/B/C.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns the name of the file\n+# + path - String value of file path\n+# + return - The name of the file", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDEzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624139", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyODc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMDgyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406930820", "bodyText": "Inconsistent usage of terms. A directory is referred to as both, a \"directory\" and a \"folder\". Check all the places and fix. Better to stick with one term. Let's go with directory?", "author": "pubudu91", "createdAt": "2020-04-10T20:32:17Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -106,9 +121,12 @@ public function filename(string path) returns string|Error {\n # Returns the enclosing parent directory.\n # If the path is empty, parent returns \".\".\n # The returned path does not end in a separator unless it is the root directory.\n+# ```ballerina\n+#  string|filepath:Error parentPath = filepath:parent(\"/A/B/C.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Path of parent folder or error occurred while getting parent directory\n+# + path - String value of the file path\n+# + return - Path of the parent folder or else an error if error occurred while getting the parent directory", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMTk4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406931985", "bodyText": "The description for the error is not helpful. What sort of errors can you expect when using the function? Those need to be documented. Let's check and fix in all the relevant places.", "author": "pubudu91", "createdAt": "2020-04-10T20:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMDgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDI2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624268", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMDgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMzY5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406933695", "bodyText": "This sounds odd. Shall we rephrase this?", "author": "pubudu91", "createdAt": "2020-04-10T20:40:29Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -129,12 +147,15 @@ public function parent(string path) returns string|Error {\n     return validatedPath.substring(0, len);\n }\n \n-# Returns the shortest path name equivalent to path by purely lexical processing.\n+# Returns the shortest path name equivalent to the path by purely lexical processing.", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDM0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624340", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMzY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMzc1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406933754", "bodyText": "Error is not documented", "author": "pubudu91", "createdAt": "2020-04-10T20:40:43Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -129,12 +147,15 @@ public function parent(string path) returns string|Error {\n     return validatedPath.substring(0, len);\n }\n \n-# Returns the shortest path name equivalent to path by purely lexical processing.\n+# Returns the shortest path name equivalent to the path by purely lexical processing.\n # Replace multiple Separator elements with a single one.\n-# Eliminate each . path name element (the current directory).\n-# Eliminate each inner .. path name element (the parent directory)\n+# Eliminate each \".\" path name element (the current directory).\n+# Eliminate each inner \"..\" path name element (the parent directory).\n+# ```ballerina\n+#  string|filepath:Error normalizedPath = filepath:normalize(\"foo/../bar\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of the file path\n # + return - Normalized file path", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDQyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624424", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMzc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNDIzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406934234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Splits a list of paths joined by the OS-specific Path Separator.\n          \n          \n            \n            # Splits a list of paths joined by the OS-specific path separator.\n          \n      \n    \n    \n  \n\nAlso what is meant by \"a list of paths\"? Isn't it just one path, split to it's components?", "author": "pubudu91", "createdAt": "2020-04-10T20:42:17Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -216,8 +237,11 @@ public function normalize(string path) returns string|Error {\n }\n \n # Splits a list of paths joined by the OS-specific Path Separator.", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNDMxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406934310", "bodyText": "Error not documented", "author": "pubudu91", "createdAt": "2020-04-10T20:42:33Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -216,8 +237,11 @@ public function normalize(string path) returns string|Error {\n }\n \n # Splits a list of paths joined by the OS-specific Path Separator.\n+# ```ballerina\n+#  string[]|filepath:Error parts = filepath:split(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of the file path\n # + return - String array of part components", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDQ5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624499", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNDMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNDU1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406934558", "bodyText": "Error not documented", "author": "pubudu91", "createdAt": "2020-04-10T20:43:18Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -241,10 +265,13 @@ public function split(string path) returns string[]|Error {\n     return parts;\n }\n \n-# Joins any number of path elements into a single path\n+# Joins any number of path elements into a single path.\n+# ```ballerina\n+#  string|filepath:Error path = filepath:build(\"/\", \"foo\", \"bar\");\n+# ```\n #\n-# + parts - String values of file path parts.\n-# + return - String value of file path.\n+# + parts - String values of the file path parts\n+# + return - String value of the file path", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDU3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624571", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNDU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNTAyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406935020", "bodyText": "Otherwise is redundant", "author": "pubudu91", "createdAt": "2020-04-10T20:44:32Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -254,10 +281,13 @@ public function build(string... parts) returns string|Error {\n }\n \n # Reports whether the filename is reserved.\n-# Reserved words only exist in windows.\n+# Reserved words only exist in Windows.\n+# ```ballerina\n+#  boolean|filepath:Error path = filepath:isReservedName(\"abc.txt\");\n+# ```\n #\n-# + name - filename\n-# + return - true, if path is Windows reserved name.\n+# + name - Filename\n+# + return - True if path is a Windows reserved name or else false otherwise", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDY0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624642", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNTAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNjI2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406936264", "bodyText": "Error not documented", "author": "pubudu91", "createdAt": "2020-04-10T20:46:50Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -267,11 +297,14 @@ public function isReservedName(string name) returns boolean {\n }\n \n # Retrieves the extension of the file path.\n-# The extension is the suffix beginning at the final dot in the final element of path.\n-# it is empty if there is no dot.\n+# The extension is the suffix beginning at the final dot in the final element of the path.\n+# It is empty if there is no dot.\n+# ```ballerina\n+#  string|filepath:Error extension = filepath:extension(\"path.bal\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns the extension of the file. Empty string if no extension.\n+# + path - String value of the file path\n+# + return - The extension of the file or else an empty string if there is no extension", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDgwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624805", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzNjI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzODMxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406938310", "bodyText": "Error not documented", "author": "pubudu91", "createdAt": "2020-04-10T20:49:49Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -364,11 +400,14 @@ public function relative(string base, string target) returns string|Error {\n }\n \n # Returns the filepath after the evaluation of any symbolic links.\n-# If path is relative, the result will be relative to the current directory,\n+# If path is relative, the result will be relative to the current directory\n # unless one of the components is an absolute symbolic link.\n-# Resolve calls normalize on the result.\n+# Resolves normalising calls on the result.\n+# ```ballerina\n+#  string|filepath:Error resolvedPath = filepath:resolve(\"a/b/c\");\n+# ```\n #\n-# + path - String value of file path.\n+# + path - String value of the file path\n # + return - Resolved file path", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDg1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624858", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzODMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406939064", "bodyText": "redundant \"otherwise\"", "author": "pubudu91", "createdAt": "2020-04-10T20:51:47Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -391,12 +430,15 @@ function externResolve(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Reports whether all of filename matches the provided pattern, not just a substring.\n+# Reports whether all (not just a substring) of the filename matches the provided Glob pattern.\n # An error is returned if the pattern is malformed.\n+# ```ballerina\n+#  boolean|filepath:Error matches = filepath:matches(\"a/b/c.java\", \"glob:*.{java,class}\");\n+# ```\n #\n-# + path - String value of the file path.\n-# + pattern - String value of the target file path.\n-# + return - True if filename of the path matches with the pattern, else false\n+# + path - String value of the file path\n+# + pattern - String value of the target file path\n+# + return - True if filename of the path matches with the pattern or else false otherwise", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNDk3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408624977", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzOTA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MDM0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406940344", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + message - Specific error message of the error\n          \n          \n            \n            # + cause - Any other error, which causes this error\n          \n          \n            \n            # + message - A message describing the error in detail\n          \n          \n            \n            # + cause - The error which caused this error (if any)", "author": "pubudu91", "createdAt": "2020-04-10T20:55:36Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path_errors.bal", "diffHunk": "@@ -16,8 +16,8 @@\n \n # Record type to hold the details of an error.\n #\n-# + message - Specific error message of the error.\n-# + cause - Any other error, which causes this error.\n+# + message - Specific error message of the error\n+# + cause - Any other error, which causes this error", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MTI5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r406941296", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Record type to hold the details of an error.\n          \n          \n            \n            # A record type defined to be used as the \"error detail\" in the errors defined in this module.", "author": "pubudu91", "createdAt": "2020-04-10T20:58:02Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path_errors.bal", "diffHunk": "@@ -16,8 +16,8 @@\n \n # Record type to hold the details of an error.", "originalCommit": "3110b0f9827b3304ad2e7d53eede3a6d2f1332c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "881d49e115e0bd8674b2205e30ce387537f811ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/881d49e115e0bd8674b2205e30ce387537f811ac", "message": "Apply suggestions from code review\n\nCo-Authored-By: Pubudu Fernando <pubudu.fernando@gmail.com>", "committedDate": "2020-04-11T10:28:47Z", "type": "commit"}, {"oid": "e8089988ae1e4e3be458a42e04994dff1fddcf63", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8089988ae1e4e3be458a42e04994dff1fddcf63", "message": "Update with the suggestion given in review of the PR", "committedDate": "2020-04-12T15:51:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ1MzA2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r407453067", "bodyText": "Shall we remove checkpanic and add correct return types", "author": "daneshk", "createdAt": "2020-04-13T12:23:29Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -25,8 +25,11 @@ string pathSeparator = isWindows ? \"\\\\\" : \"/\";\n string pathListSeparator = isWindows ? \";\" : \":\";\n \n # Retrieves the absolute path from the provided location.\n+# ```ballerina\n+#  string absolutePath = checkpanic filepath:absolute(<@untainted> \"test.txt\");", "originalCommit": "c5790e27a1c764fecd0d39ac740ecfa53a2c5eca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408622027", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ1MzA2Nw=="}], "type": "inlineReview"}, {"oid": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "message": "Fix issues suggested in PR review", "committedDate": "2020-04-15T05:16:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NjI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408596252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True if path is absolute or else false.\n          \n          \n            \n            # + return - True if path is absolute or else false.\n          \n      \n    \n    \n  \n\nWrong return statement format.", "author": "praneesha", "createdAt": "2020-04-15T05:52:12Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -49,27 +52,37 @@ function externAbsolute(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Returns path separator of underline operating system.\n+# Returns the path separator of the underlying operating system.\n+# ```ballerina\n+#  string pathSeparator = filepath:getPathSeparator();\n+# ```\n #\n-# + return - String value of path separator\n+# + return - String value of the path separator\n public function getPathSeparator() returns string {\n     return pathSeparator;\n }\n \n-# Returns path list separator of underline operating system.\n+# Returns the path variable's separating character for paths of the underlying operating system.\n+# ```ballerina\n+#  string pathListSeparator = filepath:getPathListSeparator();\n+# ```\n #\n-# + return - String value of path list separator\n+# + return - String value of the path list separator\n public function getPathListSeparator() returns string {\n     return pathListSeparator;\n }\n \n # Reports whether the path is absolute.\n # A path is absolute if it is independent of the current directory.\n # On Unix, a path is absolute if it starts with the root.\n-# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute\n+# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows.\n+# ```ballerina\n+#  boolean|filepath:Error isAbsolute = filepath:isAbsolute(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - True if path is absolute, else false\n+# + path - String value of the file path\n+# + return - True if path is absolute or else false.", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjE0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408622141", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NjI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NjM1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408596354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            If an error occurred while processing `crypto:Error`\n          \n          \n            \n            #            If an error occurred while processing `crypto:Error`\n          \n      \n    \n    \n  \n\nWrong return statement format.", "author": "praneesha", "createdAt": "2020-04-15T05:52:34Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -49,27 +52,37 @@ function externAbsolute(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Returns path separator of underline operating system.\n+# Returns the path separator of the underlying operating system.\n+# ```ballerina\n+#  string pathSeparator = filepath:getPathSeparator();\n+# ```\n #\n-# + return - String value of path separator\n+# + return - String value of the path separator\n public function getPathSeparator() returns string {\n     return pathSeparator;\n }\n \n-# Returns path list separator of underline operating system.\n+# Returns the path variable's separating character for paths of the underlying operating system.\n+# ```ballerina\n+#  string pathListSeparator = filepath:getPathListSeparator();\n+# ```\n #\n-# + return - String value of path list separator\n+# + return - String value of the path list separator\n public function getPathListSeparator() returns string {\n     return pathListSeparator;\n }\n \n # Reports whether the path is absolute.\n # A path is absolute if it is independent of the current directory.\n # On Unix, a path is absolute if it starts with the root.\n-# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows is absolute\n+# On Windows, a path is absolute if it has a prefix and starts with the root: c:\\windows.\n+# ```ballerina\n+#  boolean|filepath:Error isAbsolute = filepath:isAbsolute(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - True if path is absolute, else false\n+# + path - String value of the file path\n+# + return - True if path is absolute or else false.\n+#            If an error occurred while processing `crypto:Error`", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjIyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408622228", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NjM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NjY5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408596695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True if path is a Windows reserved name or else false\n          \n          \n            \n            # + return - True if the path is a Windows reserved name or else false", "author": "praneesha", "createdAt": "2020-04-15T05:53:39Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -254,10 +283,13 @@ public function build(string... parts) returns string|Error {\n }\n \n # Reports whether the filename is reserved.\n-# Reserved words only exist in windows.\n+# Reserved words only exist in Windows.\n+# ```ballerina\n+#  boolean|filepath:Error path = filepath:isReservedName(\"abc.txt\");\n+# ```\n #\n-# + name - filename\n-# + return - true, if path is Windows reserved name.\n+# + name - Filename\n+# + return - True if path is a Windows reserved name or else false", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NjgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408596829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The extension of the file or an empty string if there is no extension,\n          \n          \n            \n            # + return - The extension of the file, an empty string if there is no extension,", "author": "praneesha", "createdAt": "2020-04-15T05:54:00Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -267,11 +299,15 @@ public function isReservedName(string name) returns boolean {\n }\n \n # Retrieves the extension of the file path.\n-# The extension is the suffix beginning at the final dot in the final element of path.\n-# it is empty if there is no dot.\n+# The extension is the suffix beginning at the final dot in the final element of the path.\n+# It is empty if there is no dot.\n+# ```ballerina\n+#  string|filepath:Error extension = filepath:extension(\"path.bal\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns the extension of the file. Empty string if no extension.\n+# + path - String value of the file path\n+# + return - The extension of the file or an empty string if there is no extension,", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5Njg5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408596893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            or else `crypto:Error` if the path is invalid\n          \n          \n            \n            #            or else a `crypto:Error` if the path is invalid", "author": "praneesha", "createdAt": "2020-04-15T05:54:08Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -267,11 +299,15 @@ public function isReservedName(string name) returns boolean {\n }\n \n # Retrieves the extension of the file path.\n-# The extension is the suffix beginning at the final dot in the final element of path.\n-# it is empty if there is no dot.\n+# The extension is the suffix beginning at the final dot in the final element of the path.\n+# It is empty if there is no dot.\n+# ```ballerina\n+#  string|filepath:Error extension = filepath:extension(\"path.bal\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns the extension of the file. Empty string if no extension.\n+# + path - String value of the file path\n+# + return - The extension of the file or an empty string if there is no extension,\n+#            or else `crypto:Error` if the path is invalid", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5Njk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408596979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The extension of the file or an empty string if there is no extension.\n          \n          \n            \n            # + return - The extension of the file or an empty string if there is no extension.\n          \n      \n    \n    \n  \n\nWrong return statement format.", "author": "praneesha", "createdAt": "2020-04-15T05:54:27Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -295,13 +331,17 @@ public function extension(string path) returns string|Error {\n     return \"\";\n }\n \n-# Returns a relative path that is logically equivalent to target path when joined to base path with an intervening\n-# separator.\n-# An error is returned if target path can't be made relative to base path.\n+# Returns a relative path that is logically equivalent to the target path when joined to the base path with an\n+# intervening separator.\n+# An error is returned if the target path cannot be made relative to the base path.\n+# ```ballerina\n+#  string|filepath:Error relativePath = filepath:relative(\"a/b/c\", \"a/c/d\");\n+# ```\n #\n-# + base - String value of the base file path.\n-# + target - String value of the target file path.\n-# + return - Returns the extension of the file. Empty string if no extension.\n+# + base - String value of the base file path\n+# + target - String value of the target file path\n+# + return - The extension of the file or an empty string if there is no extension.", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjM4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408622381", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5Njk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzA1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408597058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If path is relative, the result will be relative to the current directory\n          \n          \n            \n            # If the path is relative, the result will be relative to the current directory", "author": "praneesha", "createdAt": "2020-04-15T05:54:41Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -364,12 +404,15 @@ public function relative(string base, string target) returns string|Error {\n }\n \n # Returns the filepath after the evaluation of any symbolic links.\n-# If path is relative, the result will be relative to the current directory,\n+# If path is relative, the result will be relative to the current directory", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzEzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408597136", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Resolves normalising calls on the result.\n          \n          \n            \n            # Resolves normalising the calls on the result.", "author": "praneesha", "createdAt": "2020-04-15T05:54:55Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -364,12 +404,15 @@ public function relative(string base, string target) returns string|Error {\n }\n \n # Returns the filepath after the evaluation of any symbolic links.\n-# If path is relative, the result will be relative to the current directory,\n+# If path is relative, the result will be relative to the current directory\n # unless one of the components is an absolute symbolic link.\n-# Resolve calls normalize on the result.\n+# Resolves normalising calls on the result.", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408597180", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - Security validated string value of the file path\n          \n          \n            \n            # + path - Security-validated string value of the file path", "author": "praneesha", "createdAt": "2020-04-15T05:55:04Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -364,12 +404,15 @@ public function relative(string base, string target) returns string|Error {\n }\n \n # Returns the filepath after the evaluation of any symbolic links.\n-# If path is relative, the result will be relative to the current directory,\n+# If path is relative, the result will be relative to the current directory\n # unless one of the components is an absolute symbolic link.\n-# Resolve calls normalize on the result.\n+# Resolves normalising calls on the result.\n+# ```ballerina\n+#  string|filepath:Error resolvedPath = filepath:resolve(\"a/b/c\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Resolved file path\n+# + path - Security validated string value of the file path", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzQ4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408597485", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reports whether all (not just a substring) of the filename matches the provided Glob pattern.\n          \n          \n            \n            # Reports whether the complete filename (not just a substring of it) matches the provided Glob pattern.", "author": "praneesha", "createdAt": "2020-04-15T05:56:06Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -391,12 +434,16 @@ function externResolve(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Reports whether all of filename matches the provided pattern, not just a substring.\n+# Reports whether all (not just a substring) of the filename matches the provided Glob pattern.", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzU1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408597550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True if the filename of the path matches with the pattern or else false.\n          \n          \n            \n            # + return - True if the filename of the path matches with the pattern or else false.\n          \n      \n    \n    \n  \n\nWrong return statement format.", "author": "praneesha", "createdAt": "2020-04-15T05:56:18Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -391,12 +434,16 @@ function externResolve(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Reports whether all of filename matches the provided pattern, not just a substring.\n+# Reports whether all (not just a substring) of the filename matches the provided Glob pattern.\n # An error is returned if the pattern is malformed.\n+# ```ballerina\n+#  boolean|filepath:Error matches = filepath:matches(\"a/b/c.java\", \"glob:*.{java,class}\");\n+# ```\n #\n-# + path - String value of the file path.\n-# + pattern - String value of the target file path.\n-# + return - True if filename of the path matches with the pattern, else false\n+# + path - String value of the file path\n+# + pattern - String value of the target file path\n+# + return - True if the filename of the path matches with the pattern or else false.", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjUzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408622536", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzU4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408597589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            A `crypto:Error` if the path or pattern is invalid\n          \n          \n            \n            #            A `crypto:Error` if the path or pattern is invalid\n          \n      \n    \n    \n  \n\nWrong return statement format.", "author": "praneesha", "createdAt": "2020-04-15T05:56:26Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -391,12 +434,16 @@ function externResolve(handle path) returns handle|Error =\n     class: \"org.ballerinalang.stdlib.filepath.nativeimpl.FilePathUtils\"\n } external;\n \n-# Reports whether all of filename matches the provided pattern, not just a substring.\n+# Reports whether all (not just a substring) of the filename matches the provided Glob pattern.\n # An error is returned if the pattern is malformed.\n+# ```ballerina\n+#  boolean|filepath:Error matches = filepath:matches(\"a/b/c.java\", \"glob:*.{java,class}\");\n+# ```\n #\n-# + path - String value of the file path.\n-# + pattern - String value of the target file path.\n-# + return - True if filename of the path matches with the pattern, else false\n+# + path - String value of the file path\n+# + pattern - String value of the target file path\n+# + return - True if the filename of the path matches with the pattern or else false.\n+#            A `crypto:Error` if the path or pattern is invalid", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjYxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408622611", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-15T07:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzY4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408597685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cause - The error which caused this error (if any)\n          \n          \n            \n            # + cause - The error, which caused this error (if any)", "author": "praneesha", "createdAt": "2020-04-15T05:56:44Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path_errors.bal", "diffHunk": "@@ -14,10 +14,10 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Record type to hold the details of an error.\n+# A record type defined to be used as the \"error detail\" in the errors defined in this module.\n #\n-# + message - Specific error message of the error.\n-# + cause - Any other error, which causes this error.\n+# + message - A message describing the error in detail\n+# + cause - The error which caused this error (if any)", "originalCommit": "b3a95ce3e682d078a6ecc67f84f11b583a869c8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2440ac7cf1570b624ce66d4fdcd92132f41d64c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2440ac7cf1570b624ce66d4fdcd92132f41d64c8", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T06:08:18Z", "type": "commit"}, {"oid": "01a541048de867ae11d413981741fb417577bad2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01a541048de867ae11d413981741fb417577bad2", "message": "Fix issues suggested in PR review", "committedDate": "2020-04-15T06:59:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNzIyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408627224", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replace multiple Separator elements with a single one.\n          \n          \n            \n            # Replace the multiple separator elements with a single one.", "author": "praneesha", "createdAt": "2020-04-15T07:12:25Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -129,13 +149,16 @@ public function parent(string path) returns string|Error {\n     return validatedPath.substring(0, len);\n }\n \n-# Returns the shortest path name equivalent to path by purely lexical processing.\n+# Returns the shortest path name equivalent to the given path.\n # Replace multiple Separator elements with a single one.", "originalCommit": "01a541048de867ae11d413981741fb417577bad2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNzQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408627409", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - String array of part components or else a `filepath:Error` if the path is invalid\n          \n          \n            \n            # + return - String array of the part components or else a `filepath:Error` if the path is invalid", "author": "praneesha", "createdAt": "2020-04-15T07:12:48Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -215,10 +238,13 @@ public function normalize(string path) returns string|Error {\n     return parse(normalizedPath);\n }\n \n-# Splits a list of paths joined by the OS-specific Path Separator.\n+# Splits a list of paths joined by the OS-specific path separator.\n+# ```ballerina\n+#  string[]|filepath:Error parts = filepath:split(\"/A/B/C\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - String array of part components\n+# + path - String value of the file path\n+# + return - String array of part components or else a `filepath:Error` if the path is invalid", "originalCommit": "01a541048de867ae11d413981741fb417577bad2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNzU5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408627596", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True if the path is a Windows reserved name or else false\n          \n          \n            \n            # + return - True if the path is a Windows reserved name or else false otherwise", "author": "praneesha", "createdAt": "2020-04-15T07:13:08Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -254,10 +283,13 @@ public function build(string... parts) returns string|Error {\n }\n \n # Reports whether the filename is reserved.\n-# Reserved words only exist in windows.\n+# Reserved words only exist in Windows.\n+# ```ballerina\n+#  boolean|filepath:Error path = filepath:isReservedName(\"abc.txt\");\n+# ```\n #\n-# + name - filename\n-# + return - true, if path is Windows reserved name.\n+# + name - Filename\n+# + return - True if the path is a Windows reserved name or else false", "originalCommit": "01a541048de867ae11d413981741fb417577bad2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyNzc4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22566#discussion_r408627784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns a relative path that is logically equivalent to the target path when joined to the base path with an\n          \n          \n            \n            # Returns a relative path, which is logically equivalent to the target path when joined to the base path with an", "author": "praneesha", "createdAt": "2020-04-15T07:13:30Z", "path": "stdlib/filepath/src/main/ballerina/src/filepath/file_path.bal", "diffHunk": "@@ -295,13 +331,17 @@ public function extension(string path) returns string|Error {\n     return \"\";\n }\n \n-# Returns a relative path that is logically equivalent to target path when joined to base path with an intervening\n-# separator.\n-# An error is returned if target path can't be made relative to base path.\n+# Returns a relative path that is logically equivalent to the target path when joined to the base path with an", "originalCommit": "01a541048de867ae11d413981741fb417577bad2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a6b18a4e051216bb087d64f3f464ed1621d42dd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a6b18a4e051216bb087d64f3f464ed1621d42dd", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T07:19:10Z", "type": "commit"}]}