{"pr_number": 27605, "pr_title": "Allow expression in listener declaration to return an error", "pr_createdAt": "2020-12-21T08:43:04Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605", "timeline": [{"oid": "5b05b30d0a665a8831d245ab2a7d2b31914b2351", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b05b30d0a665a8831d245ab2a7d2b31914b2351", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang", "committedDate": "2020-12-17T06:43:06Z", "type": "commit"}, {"oid": "61333f20bc2afe559c8b6314a5d174bffd0883c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61333f20bc2afe559c8b6314a5d174bffd0883c8", "message": "Re-enable listener balo test", "committedDate": "2020-12-21T06:00:14Z", "type": "commit"}, {"oid": "f2f5a1c670c37c7b8aa8ae2ca8c388d3f949b40a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2f5a1c670c37c7b8aa8ae2ca8c388d3f949b40a", "message": "Allow listener decl to use listener|error", "committedDate": "2020-12-21T08:40:42Z", "type": "commit"}, {"oid": "64efd1ffd64a4bbe90dfe42b7a921798514dd563", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64efd1ffd64a4bbe90dfe42b7a921798514dd563", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-listener-attach", "committedDate": "2021-01-05T01:26:21Z", "type": "commit"}, {"oid": "60cd794465406561e98f7d33e5449b12ef1429a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60cd794465406561e98f7d33e5449b12ef1429a8", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-listener-attach\n\n\u0001 Conflicts:\n\u0001\ttests/jballerina-unit-test/src/test/resources/test-src/services/service_decl.bal", "committedDate": "2021-01-13T04:17:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyMzEwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556423109", "bodyText": "Seems like some calls to this function still pass the actual as the first arg, shall we check and update?", "author": "MaryamZi", "createdAt": "2021-01-13T10:38:57Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/services/service_decl.bal", "diffHunk": "@@ -179,7 +202,7 @@ function testServiceDecl() {\n     reset();\n }\n \n-function assertEquality(any|error actual, any|error expected) {\n+function assertEquality(any|error expected, any|error actual) {", "originalCommit": "60cd794465406561e98f7d33e5449b12ef1429a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyOTgxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556429818", "bodyText": "will do", "author": "rdhananjaya", "createdAt": "2021-01-13T10:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyMzEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODIxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556428218", "bodyText": "Shouldn't LE be a subtype of the Listener object?\nThe spec says\n\nA module listener declares a variable in a similar way to a final variable declaration, but the type of the variable is always a subtype of the Listener object type, and it has the additional semantic of registering the variable's value with the module as a listener.", "author": "MaryamZi", "createdAt": "2021-01-13T10:47:28Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/services/service_decl.bal", "diffHunk": "@@ -95,7 +117,8 @@ function getResourceAnnot(service object {} obj, string methodName, string[] pat\n } external;\n \n \n-listener Listener lsn = new Listener();\n+type LE Listener|EmptyListener|error;\n+listener LE lsn = new Listener();", "originalCommit": "60cd794465406561e98f7d33e5449b12ef1429a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzMDAyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556430021", "bodyText": "I don't this the spec is updated with this ballerina-platform/ballerina-spec#671", "author": "rdhananjaya", "createdAt": "2021-01-13T10:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzNTQyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556435422", "bodyText": "What's mentioned in the issue is re: the expression, right?\n\nWe could make listener-decl do the same thing: allow the expression in a listener to be of type L|E, where L is a listener and E is an error; if the expression results in an error, then module initialization fails.\n\nMy understanding was that a listener init can now return error;\nclass Listener {\n    function init() returns error? {\n\n    }\n    \n    ...\n}\nand if it is used in a listener-decl, and new actually returns error, module init fails?\nBut the listener declaration would still have just the listener as the type.\nlistener Listener ln = new;\nIf we allow the listener's type to include error, module initialization doesn't have to fail, right?", "author": "MaryamZi", "createdAt": "2021-01-13T10:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzNzA4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556437083", "bodyText": "Yes you are correct", "author": "rdhananjaya", "createdAt": "2021-01-13T11:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODIxOA=="}], "type": "inlineReview"}, {"oid": "3e167f3ac78e7b40d79214375de3d4fb89d3a771", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e167f3ac78e7b40d79214375de3d4fb89d3a771", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-listener-attach\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ServiceDesugar.java", "committedDate": "2021-01-13T10:55:21Z", "type": "commit"}, {"oid": "f676273e6c3cc85d3093dd6b191ffebcd797c689", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f676273e6c3cc85d3093dd6b191ffebcd797c689", "message": "Remove error from listener decl's type", "committedDate": "2021-01-13T14:23:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU5MzU2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556593561", "bodyText": "Would this work well when the union type has > 1 listener compatible type (say 2), and the user actually assigns a value of the second type to the variable?", "author": "MaryamZi", "createdAt": "2021-01-13T15:13:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ServiceDesugar.java", "diffHunk": "@@ -187,13 +196,26 @@ void rewriteServiceVariable(BLangService service, SymbolEnv env, BLangBlockStmt\n         }\n     }\n \n+    private BType getListenerType(BType type) {\n+        if (type.tag == TypeTags.UNION) {\n+            for (BType memberType : ((BUnionType) type).getMemberTypes()) {\n+                if (types.checkListenerCompatibility(memberType)) {\n+                    return memberType;", "originalCommit": "f676273e6c3cc85d3093dd6b191ffebcd797c689", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcxNzAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556717001", "bodyText": "Updated the test case to test this scenario https://github.com/ballerina-platform/ballerina-lang/pull/27605/files#diff-2d258634ca06bf22db4f17e8bb66906ed1d42a448a1788a8e18403bdc2051583R120", "author": "rdhananjaya", "createdAt": "2021-01-13T17:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU5MzU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1MTk3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556751970", "bodyText": "type LE EmptyListener|Listener;\nlistener LE lsn = new Listener();\n\nIn this scenario, this method would return EmptyListener, right? Was wondering if that could cause issues, because for example, when we consider the attach method, we'll be retrieving attach of EmptyListener instead of Listener even though the actual value is Listener.\nBasic scenarios seem to work as expected though.", "author": "MaryamZi", "createdAt": "2021-01-13T18:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU5MzU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwNTYzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r557005633", "bodyText": "Not really, since method is invoked on the value as opposed to invoked on type I don't think there will be an issue,\nif we can guarantee that we pass the correct types as arguments.\nRelated discussion: ballerina-platform/ballerina-spec#320", "author": "rdhananjaya", "createdAt": "2021-01-14T02:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU5MzU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU5ODM2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556598366", "bodyText": "No impact right now, but should we add the actual error types here? We can do this later maybe.", "author": "MaryamZi", "createdAt": "2021-01-13T15:19:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ServiceDesugar.java", "diffHunk": "@@ -187,13 +196,26 @@ void rewriteServiceVariable(BLangService service, SymbolEnv env, BLangBlockStmt\n         }\n     }\n \n+    private BType getListenerType(BType type) {\n+        if (type.tag == TypeTags.UNION) {\n+            for (BType memberType : ((BUnionType) type).getMemberTypes()) {\n+                if (types.checkListenerCompatibility(memberType)) {\n+                    return memberType;\n+                }\n+            }\n+        }\n+        return type;\n+    }\n+\n     private void addMethodInvocation(Location pos, BLangSimpleVarRef varRef, BInvokableSymbol methodRefSymbol,\n                                      List<BLangExpression> args,\n                                      BlockNode body) {\n         // Create method invocation\n         final BLangInvocation methodInvocation =\n                 ASTBuilderUtil.createInvocationExprForMethod(pos, methodRefSymbol, args, symResolver);\n-        methodInvocation.expr = varRef;\n+        BLangCheckedExpr listenerCheckExpr = ASTBuilderUtil.createCheckExpr(pos, varRef, getListenerType(varRef.type));\n+        listenerCheckExpr.equivalentErrorTypeList.add(symTable.errorType);", "originalCommit": "f676273e6c3cc85d3093dd6b191ffebcd797c689", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9068dc08eecad70a049ab6acfbfbd9dd0616e545", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9068dc08eecad70a049ab6acfbfbd9dd0616e545", "message": "Change listener order in the test", "committedDate": "2021-01-13T17:19:53Z", "type": "commit"}, {"oid": "42a07e12dbb436ae084484047559e7aa5fc6e8b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42a07e12dbb436ae084484047559e7aa5fc6e8b9", "message": "Validate attaching union of listeners to service", "committedDate": "2021-01-13T17:48:30Z", "type": "commit"}, {"oid": "a2002cb0e185984d6d89c5d0f0f56eada9f23af3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2002cb0e185984d6d89c5d0f0f56eada9f23af3", "message": "Fix param order of assertEquality function", "committedDate": "2021-01-13T17:53:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1Nzg0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r556757844", "bodyText": "The following results in a bad, sad error here.\npublic class Listener {\n\n    public isolated function 'start() returns error? { }\n\n    public isolated function gracefulStop() returns error? { }\n\n    public isolated function immediateStop() returns error? { }\n\n    public isolated function detach(service object { isolated function foo(); } s) returns error? { }\n\n    public isolated function attach(service object { isolated function foo(); } s, string[]|string? name = ()) returns error? { }\n\n    isolated function register(service object {} s, string[]|string? name) returns error? { }\n}\n\ntype ListenerType int|Listener;\n\nlistener ListenerType ln = new Listener();\n\nservice / on ln {\n\n}\n[2021-01-14 00:26:20,469] SEVERE {b7a.log.crash} - class org.wso2.ballerinalang.compiler.semantics.model.types.BType cannot be cast to class org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType (org.wso2.ballerinalang.compiler.semantics.model.types.BType and org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType are in unnamed module of loader 'app') \njava.lang.ClassCastException: class org.wso2.ballerinalang.compiler.semantics.model.types.BType cannot be cast to class org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType (org.wso2.ballerinalang.compiler.semantics.model.types.BType and org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType are in unnamed module of loader 'app')\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:3019)\n\tat org.wso2.ballerinalang.compiler.tree.BLangService.accept(BLangService.java:142)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:3250)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:3218)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeDef(SemanticAnalyzer.java:3210)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:291)\n\tat org.wso2.ballerinalang.compiler.tree.BLangPackage.accept(BLangPackage.java:163)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyze(SemanticAnalyzer.java:256)\n\tat io.ballerina.projects.internal.CompilerPhaseRunner.typeCheck(CompilerPhaseRunner.java:217)\n\tat io.ballerina.projects.internal.CompilerPhaseRunner.performTypeCheckPhases(CompilerPhaseRunner.java:115)\n\tat io.ballerina.projects.ModuleContext.compileInternal(ModuleContext.java:348)\n\tat io.ballerina.projects.ModuleCompilationState$1.compile(ModuleCompilationState.java:45)\n\tat io.ballerina.projects.ModuleCompilationState$1.generatePlatformSpecificCode(ModuleCompilationState.java:53)\n\tat io.ballerina.projects.ModuleContext.generatePlatformSpecificCode(ModuleContext.java:301)\n\tat io.ballerina.projects.JBallerinaBackend.performCodeGen(JBallerinaBackend.java:131)\n\tat io.ballerina.projects.JBallerinaBackend.<init>(JBallerinaBackend.java:117)\n\tat io.ballerina.projects.JBallerinaBackend.lambda$from$0(JBallerinaBackend.java:93)\n\tat java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1133)\n\tat io.ballerina.projects.PackageCompilation.getCompilerBackend(PackageCompilation.java:126)\n\tat io.ballerina.projects.JBallerinaBackend.from(JBallerinaBackend.java:92)\n\tat io.ballerina.cli.task.CompileTask.execute(CompileTask.java:69)\n\tat io.ballerina.cli.TaskExecutor.executeTasks(TaskExecutor.java:40)\n\tat io.ballerina.cli.cmd.RunCommand.execute(RunCommand.java:154)\n\tat java.base/java.util.Optional.ifPresent(Optional.java:183)\n\tat io.ballerina.cli.launcher.Main.main(Main.java:58)", "author": "MaryamZi", "createdAt": "2021-01-13T18:58:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2891,9 +2911,17 @@ public void visit(BLangService serviceNode) {\n                 dlog.error(attachExpr.pos, DiagnosticErrorCode.INVALID_LISTENER_ATTACHMENT);\n             }\n \n+            // Validate listener attachment based on attach-point of the service decl and second param of listener.\n             if (exprType.getKind() == TypeKind.OBJECT) {\n                 BObjectType listenerType = (BObjectType) exprType;\n                 validateServicePathOnListener(serviceNode, attachExpr, listenerType);\n+            } else if (exprType.getKind() == TypeKind.UNION) {\n+                for (BType memberType : ((BUnionType) exprType).getMemberTypes()) {\n+                    if (memberType.tag == TypeTags.ERROR) {\n+                        continue;\n+                    }\n+                    validateServicePathOnListener(serviceNode, attachExpr, (BObjectType) memberType);", "originalCommit": "a2002cb0e185984d6d89c5d0f0f56eada9f23af3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0MjMzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r557542333", "bodyText": "Fixed. Thank you.", "author": "rdhananjaya", "createdAt": "2021-01-14T16:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc1Nzg0NA=="}], "type": "inlineReview"}, {"oid": "416f4947cbc7d8f1cb0206f836132ea7ec01402a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/416f4947cbc7d8f1cb0206f836132ea7ec01402a", "message": "Validate service-decl type with listener", "committedDate": "2021-01-14T15:02:57Z", "type": "commit"}, {"oid": "416f4947cbc7d8f1cb0206f836132ea7ec01402a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/416f4947cbc7d8f1cb0206f836132ea7ec01402a", "message": "Validate service-decl type with listener", "committedDate": "2021-01-14T15:02:57Z", "type": "forcePushed"}, {"oid": "9e7c626ba0aa49b9d2000785cf60a9f0b86591db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e7c626ba0aa49b9d2000785cf60a9f0b86591db", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-listener-attach", "committedDate": "2021-01-14T16:38:38Z", "type": "commit"}, {"oid": "971bac9954d0b051d701f1913402939697e696ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/971bac9954d0b051d701f1913402939697e696ba", "message": "Fix class cast error", "committedDate": "2021-01-14T16:57:59Z", "type": "forcePushed"}, {"oid": "357158c2ab35aef6b0aebfcceb598978a146a411", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/357158c2ab35aef6b0aebfcceb598978a146a411", "message": "Fix class cast error", "committedDate": "2021-01-14T16:59:23Z", "type": "commit"}, {"oid": "357158c2ab35aef6b0aebfcceb598978a146a411", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/357158c2ab35aef6b0aebfcceb598978a146a411", "message": "Fix class cast error", "committedDate": "2021-01-14T16:59:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzM3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r557557379", "bodyText": "Since the listener type should be a subtype of listener, check needs to be added only to the listener initialization (and when the expression type includes error), right?\nDo we need this change?", "author": "MaryamZi", "createdAt": "2021-01-14T17:13:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ServiceDesugar.java", "diffHunk": "@@ -187,13 +196,26 @@ void rewriteServiceVariable(BLangService service, SymbolEnv env, BLangBlockStmt\n         }\n     }\n \n+    private BType getListenerType(BType type) {\n+        if (type.tag == TypeTags.UNION) {\n+            for (BType memberType : ((BUnionType) type).getMemberTypes()) {\n+                if (types.checkListenerCompatibility(memberType)) {\n+                    return memberType;\n+                }\n+            }\n+        }\n+        return type;\n+    }\n+\n     private void addMethodInvocation(Location pos, BLangSimpleVarRef varRef, BInvokableSymbol methodRefSymbol,\n                                      List<BLangExpression> args,\n                                      BlockNode body) {\n         // Create method invocation\n         final BLangInvocation methodInvocation =\n                 ASTBuilderUtil.createInvocationExprForMethod(pos, methodRefSymbol, args, symResolver);\n-        methodInvocation.expr = varRef;\n+        BLangCheckedExpr listenerCheckExpr = ASTBuilderUtil.createCheckExpr(pos, varRef, getListenerType(varRef.type));", "originalCommit": "357158c2ab35aef6b0aebfcceb598978a146a411", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1ODc3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r557558774", "bodyText": "Adding check here wouldn't add it for the initialization anyway, right?\nThe following results in a bad, sad error.\npublic class Listener {\n    public function init() returns error? => error(\"err\");\n\n    public isolated function 'start() returns error? { }\n\n    public isolated function gracefulStop() returns error? { }\n\n    public isolated function immediateStop() returns error? { }\n\n    public isolated function detach(service object {} s) returns error? { }\n\n    public isolated function attach(service object {} s, string[]|string? name = ()) returns error? { }\n}\n\nlistener Listener ln =  new;\n[2021-01-14 23:10:56,517] SEVERE {b7a.log.crash} - class io.ballerina.runtime.internal.values.ErrorValue cannot be cast to class io.ballerina.runtime.api.values.BObject (io.ballerina.runtime.internal.values.ErrorValue and io.ballerina.runtime.api.values.BObject are in unnamed module of loader 'app') \njava.lang.ClassCastException: class io.ballerina.runtime.internal.values.ErrorValue cannot be cast to class io.ballerina.runtime.api.values.BObject (io.ballerina.runtime.internal.values.ErrorValue and io.ballerina.runtime.api.values.BObject are in unnamed module of loader 'app')\n\tat $$$.$gen$$0046$0046$0060init$00620(.:15)\n\tat $_init.$gen$$0046$0060init$0062(.:0)\n\tat $_init.$moduleInit(.)\n\tat $_init.$lambda$$moduleInit$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:571)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:301)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:269)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "author": "MaryamZi", "createdAt": "2021-01-14T17:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MDE3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r557840178", "bodyText": "Oh I totally forgot about the listener-decl \ud83d\ude1e", "author": "rdhananjaya", "createdAt": "2021-01-15T03:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE5MTYyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27605#discussion_r558191627", "bodyText": "Fixed. And a test case is added https://github.com/ballerina-platform/ballerina-lang/pull/27605/files#diff-dedee6299f9c3f21babab9613444bee606906b9323bde0ac0cc0b0d215865d42R79", "author": "rdhananjaya", "createdAt": "2021-01-15T10:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzM3OQ=="}], "type": "inlineReview"}, {"oid": "e51dd6c48df5840c9ded3d029136fe51656dfcc5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e51dd6c48df5840c9ded3d029136fe51656dfcc5", "message": "Fix bad-sad when listener is a error value", "committedDate": "2021-01-15T08:05:28Z", "type": "commit"}, {"oid": "80832aeb3353c273eed78071c4399423a5b876ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80832aeb3353c273eed78071c4399423a5b876ee", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-listener-attach", "committedDate": "2021-01-15T08:08:52Z", "type": "commit"}, {"oid": "b67904504bab7a28bbdb39b7d8637481db73ba29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b67904504bab7a28bbdb39b7d8637481db73ba29", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into service-typing-listener-attach", "committedDate": "2021-01-15T08:51:47Z", "type": "commit"}, {"oid": "f95b10bc1d672a7d8fb5fbeaee55ebc91952fe5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f95b10bc1d672a7d8fb5fbeaee55ebc91952fe5b", "message": "Add module execution test for errored listener", "committedDate": "2021-01-15T09:35:41Z", "type": "commit"}]}