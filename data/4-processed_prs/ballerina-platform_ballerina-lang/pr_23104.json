{"pr_number": 23104, "pr_title": "Add search functionality to API Docs", "pr_createdAt": "2020-05-05T11:25:23Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104", "timeline": [{"oid": "d791e9f4ade18456aed231704e24bdd2d01dd63d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d791e9f4ade18456aed231704e24bdd2d01dd63d", "message": "Add doc search", "committedDate": "2020-05-05T19:31:12Z", "type": "forcePushed"}, {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8475148310a5ce9f6bd8921dac291ab141b37991", "message": "Add doc search", "committedDate": "2020-05-11T05:29:24Z", "type": "commit"}, {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8475148310a5ce9f6bd8921dac291ab141b37991", "message": "Add doc search", "committedDate": "2020-05-11T05:29:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MTQ1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r426471450", "bodyText": "We should add a new line here", "author": "azinneera", "createdAt": "2020-05-18T08:57:01Z", "path": "composer/packages/doc-search/package.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+  \"name\": \"@ballerina/doc-search\",\n+  \"version\": \"1.3.0-SNAPSHOT\",\n+  \"description\": \"Search implementation in API Docs\",\n+  \"main\": \"lib/search.js\",\n+  \"scripts\": {\n+    \"test\": \"echo 'No tests specified'\",\n+    \"start\": \"webpack-dev-server --open --mode development\",\n+    \"build\": \"webpack --mode production\"\n+  },\n+  \"license\": \"Apache-2.0\",\n+  \"dependencies\": {\n+    \"@types/react\": \"^16.9.17\",\n+    \"@types/react-dom\": \"^16.9.4\",\n+    \"react\": \"^15.4.2\",\n+    \"react-dom\": \"^15.4.2\"\n+  },\n+  \"devDependencies\": {\n+    \"source-map-loader\": \"^0.2.4\",\n+    \"ts-loader\": \"^6.2.1\",\n+    \"typescript\": \"^3.7.4\",\n+    \"webpack\": \"^4.41.5\",\n+    \"webpack-cli\": \"^3.3.10\"\n+  }\n+}", "originalCommit": "8475148310a5ce9f6bd8921dac291ab141b37991", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NjcwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r428046703", "bodyText": "Added changes", "author": "shehan360", "createdAt": "2020-05-20T14:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MjQ4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r426472483", "bodyText": "Wrong year", "author": "azinneera", "createdAt": "2020-05-18T08:58:39Z", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/model/search/ConstructSearchJson.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "8475148310a5ce9f6bd8921dac291ab141b37991", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NjUyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r428046524", "bodyText": "Added changes", "author": "shehan360", "createdAt": "2020-05-20T14:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MjQ4Mw=="}], "type": "inlineReview"}, {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0bfcd1790e073b0b69d19ae5909e2434398d456", "message": "Add doc search", "committedDate": "2020-05-18T13:56:08Z", "type": "commit"}, {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0bfcd1790e073b0b69d19ae5909e2434398d456", "message": "Add doc search", "committedDate": "2020-05-18T13:56:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r427899225", "bodyText": "Shall we remove these commented code lines?", "author": "pramodya1994", "createdAt": "2020-05-20T10:17:55Z", "path": "composer/packages/doc-search/src/components/list.tsx", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import * as React from \"react\";\n+\n+declare var rootPath: any;\n+\n+interface ListProps extends React.Props<any> {\n+    searchJson: any;\n+    searchTxt: string;\n+}\n+\n+interface ListState {\n+    filteredModules: any[];\n+    filteredFunctions: any[];\n+    filteredObjects: any[];\n+    filteredRecords: any[];\n+    filteredConstants: any[];\n+    filteredErrors: any[];\n+    filteredTypes: any[];\n+    searchText: string;\n+}\n+\n+export class List extends React.Component<ListProps, ListState> {\n+    constructor(props: ListProps) {\n+        super(props);\n+        this.state = {\n+            filteredModules: [],\n+            filteredFunctions: [],\n+            filteredObjects: [],\n+            filteredRecords: [],\n+            filteredConstants: [],\n+            filteredErrors: [],\n+            filteredTypes: [],\n+            searchText: this.props.searchTxt\n+        };\n+        this.handleChange = this.handleChange.bind(this);\n+    }\n+\n+    componentDidMount() {\n+        document.addEventListener('keypress', e => {\n+            if (e.key === \"s\") {\n+                const searchBox = document.getElementById(\"searchBox\");\n+                var isFocused = (document.activeElement === searchBox);\n+                if (!isFocused && searchBox != null) {\n+                    searchBox.focus();\n+                    e.preventDefault();\n+                }\n+\n+            }\n+        });\n+\n+        this.setState({\n+            filteredModules: this.props.searchJson.modules,\n+            filteredFunctions: this.props.searchJson.functions,\n+            filteredObjects: this.props.searchJson.objects,\n+            filteredRecords: this.props.searchJson.records,\n+            filteredConstants: this.props.searchJson.constants,\n+            filteredErrors: this.props.searchJson.errors,\n+            filteredTypes: this.props.searchJson.types,\n+        });\n+        this.handleChange();\n+    }\n+\n+    componentWillReceiveProps(nextProps: ListProps) {\n+        this.setState({\n+            filteredModules: nextProps.searchJson.modules,\n+            filteredFunctions: nextProps.searchJson.functions,\n+            filteredObjects: nextProps.searchJson.objects,\n+            filteredRecords: nextProps.searchJson.records,\n+            filteredConstants: nextProps.searchJson.constants,\n+            filteredErrors: nextProps.searchJson.errors,\n+            filteredTypes: nextProps.searchJson.types\n+        });\n+        this.handleChange();\n+    }\n+\n+    handleChange() {\n+        const mainDiv = document.getElementById(\"main\");\n+        if (mainDiv != null) {\n+            mainDiv.classList.add('hidden');\n+        }\n+        const searchTxt = (document.getElementById(\"searchBox\") as HTMLInputElement).value;\n+        this.setState({\n+            searchText: searchTxt\n+        });\n+        // Variable to hold the original version of the list\n+        let currentModuleList = [];\n+        let currentFunctionsList = [];\n+        let currentObjectsList = [];\n+        let currentRecordsList = [];\n+        let currentConstantsList = [];\n+        let currentErrorsList = [];\n+        let currentTypesList = [];\n+        // Variable to hold the filtered list before putting into state\n+        let newModuleList = [];\n+        let newFunctionsList = [];\n+        let newObjectsList = [];\n+        let newRecordsList = [];\n+        let newConstantsList = [];\n+        let newErrorsList = [];\n+        let newTypesList = [];\n+\n+        // If the search bar isn't empty\n+        if (searchTxt !== \"\") {\n+            // Assign the original list to currentList\n+            currentModuleList = this.props.searchJson.modules;\n+            currentFunctionsList = this.props.searchJson.functions;\n+            currentObjectsList = this.props.searchJson.objects;\n+            currentRecordsList = this.props.searchJson.records;\n+            currentConstantsList = this.props.searchJson.constants;\n+            currentErrorsList = this.props.searchJson.errors;\n+            currentTypesList = this.props.searchJson.types;\n+            // Use .filter() to determine which items should be displayed\n+            // based on the search terms\n+            newModuleList = currentModuleList.filter((item: any) => {\n+                // change current item to lowercase\n+                const lc = item.id.toLowerCase();\n+                // change search term to lowercase\n+                const filter = searchTxt.toLowerCase();\n+                // check to see if the current list item includes the search term\n+                // If it does, it will be added to newList. Using lowercase eliminates\n+                // issues with capitalization in search terms and search content\n+                return lc.includes(filter);\n+            });\n+\n+            newFunctionsList = currentFunctionsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newObjectsList = currentObjectsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newRecordsList = currentRecordsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newConstantsList = currentConstantsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newErrorsList = currentErrorsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newTypesList = currentTypesList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+        } else {\n+            if (mainDiv != null) {\n+                mainDiv.classList.remove('hidden');\n+            }\n+        }\n+        // Set the filtered state based on what our rules added to newList\n+        this.setState({\n+            filteredModules: newModuleList,\n+            filteredFunctions: newFunctionsList,\n+            filteredObjects: newObjectsList,\n+            filteredRecords: newRecordsList,\n+            filteredConstants: newConstantsList,\n+            filteredErrors: newErrorsList,\n+            filteredTypes: newTypesList\n+        });\n+    }\n+\n+    render() {\n+        return (\n+            <div>\n+                <div className=\"ui fluid icon input search-bar\">\n+                    <input type=\"text\" id=\"searchBox\" onKeyUp={this.handleChange} placeholder=\"Search...\" />\n+                    <i className=\"search icon\"></i>\n+                </div>\n+\n+                {/* <input type=\"text\" id=\"searchBox\" className=\"input\" onKeyUp={this.handleChange} placeholder=\"Search...\" defaultValue={this.state.searchText} /> */}", "originalCommit": "a0bfcd1790e073b0b69d19ae5909e2434398d456", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NjgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r428046829", "bodyText": "Added changes", "author": "shehan360", "createdAt": "2020-05-20T14:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTk2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r427899967", "bodyText": "This line has more than 120 characters. Shall we find all such lines and break those into not more than 120 character lines?", "author": "pramodya1994", "createdAt": "2020-05-20T10:19:20Z", "path": "composer/packages/doc-search/src/components/list.tsx", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import * as React from \"react\";\n+\n+declare var rootPath: any;\n+\n+interface ListProps extends React.Props<any> {\n+    searchJson: any;\n+    searchTxt: string;\n+}\n+\n+interface ListState {\n+    filteredModules: any[];\n+    filteredFunctions: any[];\n+    filteredObjects: any[];\n+    filteredRecords: any[];\n+    filteredConstants: any[];\n+    filteredErrors: any[];\n+    filteredTypes: any[];\n+    searchText: string;\n+}\n+\n+export class List extends React.Component<ListProps, ListState> {\n+    constructor(props: ListProps) {\n+        super(props);\n+        this.state = {\n+            filteredModules: [],\n+            filteredFunctions: [],\n+            filteredObjects: [],\n+            filteredRecords: [],\n+            filteredConstants: [],\n+            filteredErrors: [],\n+            filteredTypes: [],\n+            searchText: this.props.searchTxt\n+        };\n+        this.handleChange = this.handleChange.bind(this);\n+    }\n+\n+    componentDidMount() {\n+        document.addEventListener('keypress', e => {\n+            if (e.key === \"s\") {\n+                const searchBox = document.getElementById(\"searchBox\");\n+                var isFocused = (document.activeElement === searchBox);\n+                if (!isFocused && searchBox != null) {\n+                    searchBox.focus();\n+                    e.preventDefault();\n+                }\n+\n+            }\n+        });\n+\n+        this.setState({\n+            filteredModules: this.props.searchJson.modules,\n+            filteredFunctions: this.props.searchJson.functions,\n+            filteredObjects: this.props.searchJson.objects,\n+            filteredRecords: this.props.searchJson.records,\n+            filteredConstants: this.props.searchJson.constants,\n+            filteredErrors: this.props.searchJson.errors,\n+            filteredTypes: this.props.searchJson.types,\n+        });\n+        this.handleChange();\n+    }\n+\n+    componentWillReceiveProps(nextProps: ListProps) {\n+        this.setState({\n+            filteredModules: nextProps.searchJson.modules,\n+            filteredFunctions: nextProps.searchJson.functions,\n+            filteredObjects: nextProps.searchJson.objects,\n+            filteredRecords: nextProps.searchJson.records,\n+            filteredConstants: nextProps.searchJson.constants,\n+            filteredErrors: nextProps.searchJson.errors,\n+            filteredTypes: nextProps.searchJson.types\n+        });\n+        this.handleChange();\n+    }\n+\n+    handleChange() {\n+        const mainDiv = document.getElementById(\"main\");\n+        if (mainDiv != null) {\n+            mainDiv.classList.add('hidden');\n+        }\n+        const searchTxt = (document.getElementById(\"searchBox\") as HTMLInputElement).value;\n+        this.setState({\n+            searchText: searchTxt\n+        });\n+        // Variable to hold the original version of the list\n+        let currentModuleList = [];\n+        let currentFunctionsList = [];\n+        let currentObjectsList = [];\n+        let currentRecordsList = [];\n+        let currentConstantsList = [];\n+        let currentErrorsList = [];\n+        let currentTypesList = [];\n+        // Variable to hold the filtered list before putting into state\n+        let newModuleList = [];\n+        let newFunctionsList = [];\n+        let newObjectsList = [];\n+        let newRecordsList = [];\n+        let newConstantsList = [];\n+        let newErrorsList = [];\n+        let newTypesList = [];\n+\n+        // If the search bar isn't empty\n+        if (searchTxt !== \"\") {\n+            // Assign the original list to currentList\n+            currentModuleList = this.props.searchJson.modules;\n+            currentFunctionsList = this.props.searchJson.functions;\n+            currentObjectsList = this.props.searchJson.objects;\n+            currentRecordsList = this.props.searchJson.records;\n+            currentConstantsList = this.props.searchJson.constants;\n+            currentErrorsList = this.props.searchJson.errors;\n+            currentTypesList = this.props.searchJson.types;\n+            // Use .filter() to determine which items should be displayed\n+            // based on the search terms\n+            newModuleList = currentModuleList.filter((item: any) => {\n+                // change current item to lowercase\n+                const lc = item.id.toLowerCase();\n+                // change search term to lowercase\n+                const filter = searchTxt.toLowerCase();\n+                // check to see if the current list item includes the search term\n+                // If it does, it will be added to newList. Using lowercase eliminates\n+                // issues with capitalization in search terms and search content\n+                return lc.includes(filter);\n+            });\n+\n+            newFunctionsList = currentFunctionsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newObjectsList = currentObjectsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newRecordsList = currentRecordsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newConstantsList = currentConstantsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newErrorsList = currentErrorsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newTypesList = currentTypesList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+        } else {\n+            if (mainDiv != null) {\n+                mainDiv.classList.remove('hidden');\n+            }\n+        }\n+        // Set the filtered state based on what our rules added to newList\n+        this.setState({\n+            filteredModules: newModuleList,\n+            filteredFunctions: newFunctionsList,\n+            filteredObjects: newObjectsList,\n+            filteredRecords: newRecordsList,\n+            filteredConstants: newConstantsList,\n+            filteredErrors: newErrorsList,\n+            filteredTypes: newTypesList\n+        });\n+    }\n+\n+    render() {\n+        return (\n+            <div>\n+                <div className=\"ui fluid icon input search-bar\">\n+                    <input type=\"text\" id=\"searchBox\" onKeyUp={this.handleChange} placeholder=\"Search...\" />\n+                    <i className=\"search icon\"></i>\n+                </div>\n+\n+                {/* <input type=\"text\" id=\"searchBox\" className=\"input\" onKeyUp={this.handleChange} placeholder=\"Search...\" defaultValue={this.state.searchText} /> */}\n+                {/* <button className=\"button is-info\" onClick={this.handleChange}>Search</button> */}\n+\n+                {this.state.searchText &&\n+                    <div className=\"search-list\">\n+                        <h1>Search results for '{this.state.searchText}'</h1>\n+                        {this.state.filteredModules.length > 0 &&\n+                            <div>\n+                                <h3>Modules: {this.state.filteredModules.length}</h3>\n+                                <table>\n+                                    <tbody>\n+                                        {this.state.filteredModules.map(item => (\n+                                            <tr>\n+                                                <td className=\"search-title\" id={item.id} title={item.id}>\n+                                                    <a href={rootPath + item.id + \"/index.html\"} className=\"objects\">{item.id}</a></td>\n+                                                <td className=\"search-desc\"><span dangerouslySetInnerHTML={{ __html: item.searchString }} /></td>\n+                                            </tr>\n+                                        ))}\n+                                    </tbody>\n+                                </table>\n+                            </div>\n+                        }\n+\n+                        {this.state.filteredObjects.length > 0 &&\n+                            <div>\n+                                <h3>Objects: {this.state.filteredObjects.length}</h3>\n+                                <table>\n+                                    <tbody>\n+                                        {this.state.filteredObjects.map(item => (\n+                                            <tr>\n+                                                <td className=\"search-title\" id={item.id} title={item.id}>\n+                                                    <a href={rootPath + item.moduleId + \"/objects/\" + item.id + \".html\"} className=\"objects\">{item.moduleId + \": \" + item.id}</a></td>", "originalCommit": "a0bfcd1790e073b0b69d19ae5909e2434398d456", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NjkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r428046926", "bodyText": "Added changes", "author": "shehan360", "createdAt": "2020-05-20T14:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTk2Nw=="}], "type": "inlineReview"}, {"oid": "ecb5b6e10734d1c6c2f04a986d030c522d169af7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ecb5b6e10734d1c6c2f04a986d030c522d169af7", "message": "Add doc search", "committedDate": "2020-05-20T14:12:18Z", "type": "commit"}]}