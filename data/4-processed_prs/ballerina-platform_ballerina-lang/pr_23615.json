{"pr_number": 23615, "pr_title": "Add transformer method for Implicit Anonymous Function Expression Node.", "pr_createdAt": "2020-05-29T12:12:30Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615", "timeline": [{"oid": "92f2fdc5dcd8d8769836c580201020d3a0dd46f9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92f2fdc5dcd8d8769836c580201020d3a0dd46f9", "message": "Transform function for implicit anon function expression.", "committedDate": "2020-05-29T05:12:06Z", "type": "commit"}, {"oid": "fd320e8a4738df1a8d0b88b609217824dc99e66f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd320e8a4738df1a8d0b88b609217824dc99e66f", "message": "Modified transformer method.", "committedDate": "2020-05-29T06:17:29Z", "type": "commit"}, {"oid": "1c5526c8f9a83445b862e6fcd8b31cf07e0fd165", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c5526c8f9a83445b862e6fcd8b31cf07e0fd165", "message": "Changed transformer method.", "committedDate": "2020-05-29T09:13:57Z", "type": "commit"}, {"oid": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2686b6e25f065c3edb70dea6280ff8a0eebd24e0", "message": "Updated transformer method.", "committedDate": "2020-05-29T11:46:10Z", "type": "commit"}, {"oid": "9cd00c0dcac25da770108347f3aeb8cadb098751", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9cd00c0dcac25da770108347f3aeb8cadb098751", "message": "Removed unused imports.", "committedDate": "2020-05-29T12:04:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0OTQwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432449400", "bodyText": "extra space after = sign.", "author": "KavinduZoysa", "createdAt": "2020-05-29T12:28:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {\n+                System.out.println(\"Empty parameter list\");\n+            }\n+        } else {\n+            BLangUserDefinedType userDefinedType = (BLangUserDefinedType) param.apply(this);\n+            BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+            parameter.name = userDefinedType.typeName;\n+            arrowFunction.params.add(parameter);\n+        }\n+        arrowFunction.body = new BLangExprFunctionBody();\n+        arrowFunction.body.expr =  createExpression(implicitAnonymousFunctionExpressionNode.expression());", "originalCommit": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODY0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432568645", "bodyText": "Removed.", "author": "rdulmina", "createdAt": "2020-05-29T15:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0OTQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NTkwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432455900", "bodyText": "above will fail the style guide.", "author": "manuranga", "createdAt": "2020-05-29T12:41:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {\n+                System.out.println(\"Empty parameter list\");", "originalCommit": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODkwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432568904", "bodyText": "Removed try catch.", "author": "rdulmina", "createdAt": "2020-05-29T15:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NjExNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432456115", "bodyText": "What is the Exception you are trying to catch? we should fix it properly form the parser side first.", "author": "manuranga", "createdAt": "2020-05-29T12:41:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1429,6 +1434,42 @@ public BLangNode transform(SyncSendActionNode syncSendActionNode) {\n         return workerSendExpr;\n     }\n \n+    @Override\n+    public BLangNode transform(ImplicitAnonymousFunctionExpressionNode implicitAnonymousFunctionExpressionNode) {\n+        BLangArrowFunction arrowFunction = (BLangArrowFunction) TreeBuilder.createArrowFunctionNode();\n+        arrowFunction.pos = getPosition(implicitAnonymousFunctionExpressionNode);\n+        arrowFunction.functionName = TreeBuilder.createIdentifierNode();\n+        //TODO initialize other attributes\n+        //arrowFunction.funcType;\n+        //arrowFunction.function;\n+\n+        // Set Parameters\n+        Node param = implicitAnonymousFunctionExpressionNode.params();\n+        if (param.kind() == SyntaxKind.INFER_PARAM_LIST) {\n+            try {\n+                ImplicitAnonymousFunctionParameters paramsNode = (ImplicitAnonymousFunctionParameters) param;\n+                SeparatedNodeList<SimpleNameReferenceNode> paramList = paramsNode.parameters();\n+\n+                for (SimpleNameReferenceNode child : paramList) {\n+                    BLangUserDefinedType userDefinedType = (BLangUserDefinedType) child.apply(this);\n+                    BLangSimpleVariable parameter = (BLangSimpleVariable) TreeBuilder.createSimpleVariableNode();\n+                    parameter.name = userDefinedType.typeName;\n+                    arrowFunction.params.add(parameter);\n+                }\n+            } catch (Exception e) {", "originalCommit": "2686b6e25f065c3edb70dea6280ff8a0eebd24e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODk2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23615#discussion_r432568966", "bodyText": "Removed try catch.", "author": "rdulmina", "createdAt": "2020-05-29T15:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NjExNQ=="}], "type": "inlineReview"}, {"oid": "4740c5b3852dcdc797016f90128954bb9eda430a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4740c5b3852dcdc797016f90128954bb9eda430a", "message": "Removed try catch in transformer", "committedDate": "2020-05-29T12:51:54Z", "type": "commit"}, {"oid": "3f34e2287a81048010e552ca9f862e16b6429b47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f34e2287a81048010e552ca9f862e16b6429b47", "message": "Remove extra space after =.", "committedDate": "2020-05-29T15:33:34Z", "type": "commit"}, {"oid": "3ce52d99aa19781533aafe41f2d1bcca2c9de0b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ce52d99aa19781533aafe41f2d1bcca2c9de0b0", "message": "Fix check style rule violation.", "committedDate": "2020-05-29T16:06:53Z", "type": "commit"}, {"oid": "e12171b7799673a80be8f2a62eb870b3ebae51c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e12171b7799673a80be8f2a62eb870b3ebae51c1", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into implicit-anon", "committedDate": "2020-05-29T17:10:49Z", "type": "commit"}, {"oid": "d0c26282d5fb61d6fc4e446a0304ab68f2db31fc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d0c26282d5fb61d6fc4e446a0304ab68f2db31fc", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into implicit-anon\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "committedDate": "2020-05-30T07:58:36Z", "type": "commit"}, {"oid": "c139b5b316a66ffaa590aac5418faec583190b8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c139b5b316a66ffaa590aac5418faec583190b8f", "message": "Resolve conflicts", "committedDate": "2020-05-30T09:34:47Z", "type": "commit"}]}