{"pr_number": 24753, "pr_title": "Add fail expression/action implementation", "pr_createdAt": "2020-07-15T09:43:20Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753", "timeline": [{"oid": "18dd917c11a477c6acf2d533e2d877f04b8b2d90", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18dd917c11a477c6acf2d533e2d877f04b8b2d90", "message": "Add Fail expression support with Antlr", "committedDate": "2020-07-08T11:50:14Z", "type": "commit"}, {"oid": "588b0b1d7d3d31766733a1f2b210dffd20b3baef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/588b0b1d7d3d31766733a1f2b210dffd20b3baef", "message": "Add fail expression support for new parser", "committedDate": "2020-07-09T06:15:13Z", "type": "commit"}, {"oid": "cfef4bac6974e1b98c51978e27b305cac9f18f1e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cfef4bac6974e1b98c51978e27b305cac9f18f1e", "message": "Add test cases for fail expression", "committedDate": "2020-07-09T06:15:41Z", "type": "commit"}, {"oid": "bf0fb37625be4731cfdfe8116c24316a39378362", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf0fb37625be4731cfdfe8116c24316a39378362", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into master-new", "committedDate": "2020-07-09T06:28:41Z", "type": "commit"}, {"oid": "1b15c7cb908d8e359250576c182359472c5d0ca2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b15c7cb908d8e359250576c182359472c5d0ca2", "message": "Fix javadoc warnings", "committedDate": "2020-07-09T07:09:18Z", "type": "commit"}, {"oid": "238fea4c386f81dbc26f453a216573b6ec597161", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/238fea4c386f81dbc26f453a216573b6ec597161", "message": "Fix test case due to new fail expression keyword", "committedDate": "2020-07-09T07:09:40Z", "type": "commit"}, {"oid": "79dc430949da8e715b2e993d8f497d0fc0c12eea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79dc430949da8e715b2e993d8f497d0fc0c12eea", "message": "Add missed parser auto generated files", "committedDate": "2020-07-09T07:35:54Z", "type": "commit"}, {"oid": "e93dba1fa6b5ca84f477d89071c1d5fe75cef5d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e93dba1fa6b5ca84f477d89071c1d5fe75cef5d6", "message": "Merge branch 'master' into master-new", "committedDate": "2020-07-09T09:19:22Z", "type": "commit"}, {"oid": "4363a66ed8f38525c51ce67fc8790aada7744f51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4363a66ed8f38525c51ce67fc8790aada7744f51", "message": "Remove unused grammar definition", "committedDate": "2020-07-14T07:56:17Z", "type": "commit"}, {"oid": "26d148994a42d423667dfc5e77bae054cbdc91b8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26d148994a42d423667dfc5e77bae054cbdc91b8", "message": "Desugar fail expression as return statement", "committedDate": "2020-07-14T07:56:46Z", "type": "commit"}, {"oid": "068b7b802a315e436451acd9b1febcabdb71d105", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/068b7b802a315e436451acd9b1febcabdb71d105", "message": "Merge branch 'master-new' of https://github.com/mohanvive/ballerina-lang into master-new", "committedDate": "2020-07-14T07:58:09Z", "type": "commit"}, {"oid": "ec1d748f86d66608a1429ec490207e15f87efff4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec1d748f86d66608a1429ec490207e15f87efff4", "message": "set fail expression as action", "committedDate": "2020-07-14T09:15:28Z", "type": "commit"}, {"oid": "a74491f139965bce1fa1b087e8d698d01acdb634", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a74491f139965bce1fa1b087e8d698d01acdb634", "message": "Desugar fail expr as return statement", "committedDate": "2020-07-15T09:42:08Z", "type": "commit"}, {"oid": "ac835fd005458e4195f9c7449694f0ce512f4e70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac835fd005458e4195f9c7449694f0ce512f4e70", "message": "Fix test bal files", "committedDate": "2020-07-15T09:44:48Z", "type": "commit"}, {"oid": "4ba366ebbd86459508e3c9e3a3154d2122644124", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ba366ebbd86459508e3c9e3a3154d2122644124", "message": "Add testcases and type checker fixes for fail expression", "committedDate": "2020-07-16T09:28:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1NTEyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455655127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@code FailExpressionNode} represents a expression which forces to return error.\n          \n          \n            \n             * {@code FailExpressionNode} represents an expression which forces to return error.", "author": "gimantha", "createdAt": "2020-07-16T09:33:38Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/FailExpressionNode.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * {@code FailExpressionNode} represents a expression which forces to return error.", "originalCommit": "4ba366ebbd86459508e3c9e3a3154d2122644124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1ODMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455658337", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@code FailExpressionNode} represents a expression which forces to return error.\n          \n          \n            \n             * {@code FailExpressionNode} represents an expression which forces to return error.", "author": "gimantha", "createdAt": "2020-07-16T09:39:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.FailExpressionNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.List;\n+\n+/**\n+ * {@code FailExpressionNode} represents a expression which forces to return error.", "originalCommit": "4ba366ebbd86459508e3c9e3a3154d2122644124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1ODY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455658659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This list caches types that are equivalent to the error type which are returned by the rhs expression.\n          \n          \n            \n                // This list catches types that are equivalent to the error type which are returned by the rhs expression.", "author": "gimantha", "createdAt": "2020-07-16T09:39:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.FailExpressionNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.List;\n+\n+/**\n+ * {@code FailExpressionNode} represents a expression which forces to return error.\n+ *\n+ * @since Swan Lake\n+ */\n+public class BLangFailExpr extends BLangExpression implements FailExpressionNode {\n+\n+    public BLangExpression expr;\n+\n+    // This list caches types that are equivalent to the error type which are returned by the rhs expression.", "originalCommit": "4ba366ebbd86459508e3c9e3a3154d2122644124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1OTUzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455659539", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 2.0.0\n          \n          \n            \n             * @since Swan Lake", "author": "gimantha", "createdAt": "2020-07-16T09:41:03Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailExpressionNode.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.FailExpressionNode;\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.SyntaxKind;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * This is a generated internal syntax tree node.\n+ *\n+ * @since 2.0.0", "originalCommit": "4ba366ebbd86459508e3c9e3a3154d2122644124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY1OTkxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455659912", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 2.0.0\n          \n          \n            \n             * @since Swan Lake", "author": "gimantha", "createdAt": "2020-07-16T09:41:46Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/FailExpressionNode.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+import java.util.Objects;\n+\n+/**\n+ * This is a generated syntax tree node.\n+ *\n+ * @since 2.0.0", "originalCommit": "4ba366ebbd86459508e3c9e3a3154d2122644124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2MDQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r455660432", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "gimantha", "createdAt": "2020-07-16T09:42:37Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/fail-expression.bal", "diffHunk": "@@ -0,0 +1,13 @@\n+\n+public function testFailExpr() returns error {\n+\n+    error err = error(\"Custom error thrown explicitly.\");\n+    error outputErr = fail err;\n+    return outputErr;\n+}\n+\n+public function testFailAction() returns error {\n+\n+    error err = error(\"Custom error thrown explicitly.\");\n+    fail err;\n+}", "originalCommit": "4ba366ebbd86459508e3c9e3a3154d2122644124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97045be9173c7822a96002354b927f7f3a081bd6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97045be9173c7822a96002354b927f7f3a081bd6", "message": "Update compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/FailExpressionNode.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>", "committedDate": "2020-07-16T09:44:31Z", "type": "commit"}, {"oid": "65e9d96d40f960f94ccb12e502f7f63150d59953", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65e9d96d40f960f94ccb12e502f7f63150d59953", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>", "committedDate": "2020-07-16T09:44:39Z", "type": "commit"}, {"oid": "ff53ccfd37c34874c10bd3691f921b68584d65ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff53ccfd37c34874c10bd3691f921b68584d65ad", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangFailExpr.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>", "committedDate": "2020-07-16T09:44:47Z", "type": "commit"}, {"oid": "bd213c2a587670dc0cb4f2b29048958b06d2e018", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd213c2a587670dc0cb4f2b29048958b06d2e018", "message": "Update compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STFailExpressionNode.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>", "committedDate": "2020-07-16T09:44:56Z", "type": "commit"}, {"oid": "49816d89197289b4bfdaf5f29e0a30e649ca07de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49816d89197289b4bfdaf5f29e0a30e649ca07de", "message": "Update compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/FailExpressionNode.java\n\nCo-authored-by: gimantha <gimantha@wso2.com>", "committedDate": "2020-07-16T09:45:03Z", "type": "commit"}, {"oid": "819914deae85c3f479a1828ee37bf4ac8e2de204", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/819914deae85c3f479a1828ee37bf4ac8e2de204", "message": "Update tests/jballerina-unit-test/src/test/resources/test-src/query/fail-expression.bal\n\nCo-authored-by: gimantha <gimantha@wso2.com>", "committedDate": "2020-07-16T09:45:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MjY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456452657", "bodyText": "I think FAIL_EXPRESSION also should goes to the below block, and parse as an action-statement.\nAdding it here will parse the fail-expression as call-statement, which is not correct.", "author": "SupunS", "createdAt": "2020-07-17T13:46:32Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7259,9 +7310,11 @@ private STNode getExpressionAsStatement(STNode expression) {\n             case METHOD_CALL:\n             case FUNCTION_CALL:\n             case CHECK_EXPRESSION:\n+            case FAIL_EXPRESSION:", "originalCommit": "819914deae85c3f479a1828ee37bf4ac8e2de204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0MzA0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456543041", "bodyText": "Fixed. I'll share the commit Id.", "author": "mohanvive", "createdAt": "2020-07-17T16:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MjY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2MjM5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456462390", "bodyText": "Since we add a new expression, we need to update few other places such as:\n\nisExpression(...)\nisValidExpressionStart(...)\nisValidExprStart(...)\netc..", "author": "SupunS", "createdAt": "2020-07-17T14:02:43Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4077,6 +4079,8 @@ private STNode parseTerminalExpression(SyntaxKind kind, STNode annots, boolean i\n                 // In the checking action, nested actions are allowed. And that's the only\n                 // place where actions are allowed within an action or an expression.\n                 return parseCheckExpression(isRhsExpr, allowActions, isInConditionalExpr);\n+            case FAIL_KEYWORD:\n+                return parseFailExpression(isRhsExpr, allowActions, isInConditionalExpr);", "originalCommit": "819914deae85c3f479a1828ee37bf4ac8e2de204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0MDI3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456840270", "bodyText": "Done.", "author": "mohanvive", "createdAt": "2020-07-18T23:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2MjM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2NDAzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456464031", "bodyText": "Would be good to add some parser-tests as well, as it validates the tree-structure including nodes types, expr-precedence etc.", "author": "SupunS", "createdAt": "2020-07-17T14:05:29Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/FailExpressionTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.query;\n+\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.util.BAssertUtil.validateError;\n+\n+/**\n+ * This contains methods to test fail expressions.\n+ *\n+ * @since Swan Lake\n+ */\n+public class FailExpressionTest {\n+\n+    private CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/query/fail-expression.bal\");\n+    }\n+\n+    @Test(description = \"Test fail expression basic syntax\")\n+    public void testFailExpr() {\n+        BValue[] returnValues = BRunUtil.invoke(result, \"testFailExpr\");\n+        Assert.assertNotNull(returnValues);\n+\n+        Assert.assertTrue(returnValues[0] instanceof BError);\n+        Assert.assertEquals(((BError) returnValues[0]).getMessage(),\n+                \"Custom error thrown explicitly.\");\n+    }\n+\n+    @Test(description = \"Test fail action basic syntax\")\n+    public void testFailAction() {\n+        BValue[] returnValues = BRunUtil.invoke(result, \"testFailAction\");\n+        Assert.assertNotNull(returnValues);\n+\n+        Assert.assertTrue(returnValues[0] instanceof BError);\n+        Assert.assertEquals(((BError) returnValues[0]).getMessage(),\n+                \"Custom error thrown explicitly.\");\n+    }\n+\n+    @Test(description = \"Test negative cases in fail expr\")\n+    public void testFailActionNegative() {\n+        CompileResult negativeResult = BCompileUtil.compile(\"test-src/query/fail-action-negative.bal\");\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n+        int index = 0;\n+\n+        validateError(negativeResult, index++,\n+                \"type 'err' not allowed here; expected an 'error' or a subtype of 'error'.\",\n+                5, 10);\n+    }\n+\n+    @Test(description = \"Test negative cases in fail expr\")\n+    public void testFailExprNegative() {\n+        CompileResult negativeResult = BCompileUtil.compile(\"test-src/query/fail-expression-negative.bal\");\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n+        int index = 0;\n+\n+        validateError(negativeResult, index++,\n+                \"this function must return a result\", 2, 1);\n+    }\n+}", "originalCommit": "819914deae85c3f479a1828ee37bf4ac8e2de204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg0MDI5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456840293", "bodyText": "Done.", "author": "mohanvive", "createdAt": "2020-07-18T23:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2NDAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2NDI1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456464258", "bodyText": "Number should be 1337", "author": "SupunS", "createdAt": "2020-07-17T14:05:51Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java", "diffHunk": "@@ -289,6 +290,7 @@\n     XML_STEP_EXPRESSION(1334),\n     XML_NAME_PATTERN_CHAIN(1335),\n     XML_ATOMIC_NAME_PATTERN(1336),\n+    FAIL_EXPRESSION(1336),", "originalCommit": "819914deae85c3f479a1828ee37bf4ac8e2de204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0MzI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456543281", "bodyText": "Fixed. I'll share the commit Id.", "author": "mohanvive", "createdAt": "2020-07-17T16:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2NDI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3NTQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456475409", "bodyText": "Need to add this to the resumeParsing() method", "author": "SupunS", "createdAt": "2020-07-17T14:24:28Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5763,6 +5768,52 @@ private STNode parseCheckingKeyword() {\n         }\n     }\n \n+    /**\n+     * Parse fail expression. This method is used to parse both fail expression\n+     * as well as fail action.\n+     *\n+     * <p>\n+     * <code>\n+     * fail-expr := fail-keyword expression\n+     * fail-action := fail-keyword action\n+     * </code>\n+     *\n+     * @param allowActions Allow actions\n+     * @param isRhsExpr    Is rhs expression\n+     * @return Fail expression node\n+     */\n+    private STNode parseFailExpression(boolean isRhsExpr, boolean allowActions, boolean isInConditionalExpr) {\n+\n+        STNode failKeyword = parseFailKeyword();\n+        STNode expr =\n+                parseExpression(OperatorPrecedence.EXPRESSION_ACTION, isRhsExpr, allowActions, isInConditionalExpr);\n+        if (isAction(expr)) {\n+            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_ACTION, failKeyword, expr);\n+        } else {\n+            return STNodeFactory.createFailExpressionNode(SyntaxKind.FAIL_EXPRESSION, failKeyword, expr);\n+        }\n+    }\n+\n+    /**\n+     * Parse fail keyword.\n+     * <p>\n+     * <code>\n+     * fail-keyword := fail\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseFailKeyword() {", "originalCommit": "819914deae85c3f479a1828ee37bf4ac8e2de204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU0NDAwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24753#discussion_r456544007", "bodyText": "Fixed. I'll share the commit Id.", "author": "mohanvive", "createdAt": "2020-07-17T16:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3NTQwOQ=="}], "type": "inlineReview"}]}