{"pr_number": 21501, "pr_title": "Add filling-read operation for lvalue arrays", "pr_createdAt": "2020-03-05T12:15:52Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501", "timeline": [{"oid": "8e3c3d1c2a38dc2fc10e08a4664f04e36801ba51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e3c3d1c2a38dc2fc10e08a4664f04e36801ba51", "message": "Add support for filling read for array load ins", "committedDate": "2020-03-05T12:25:59Z", "type": "forcePushed"}, {"oid": "5574196b4c3db66dfd2a16499c486d58483d4c92", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5574196b4c3db66dfd2a16499c486d58483d4c92", "message": "Add test cases for lvalue arrays", "committedDate": "2020-03-09T19:08:57Z", "type": "forcePushed"}, {"oid": "dad5fcae5d1059793c7744b0490bdfbcb427f7d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dad5fcae5d1059793c7744b0490bdfbcb427f7d9", "message": "Add a getter to array value with filling-read op", "committedDate": "2020-03-10T05:27:55Z", "type": "commit"}, {"oid": "06c1a8648c3ec33b669c96e7edc82ae833eb76d0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06c1a8648c3ec33b669c96e7edc82ae833eb76d0", "message": "Add support for filling read for array load ins", "committedDate": "2020-03-10T05:28:00Z", "type": "commit"}, {"oid": "f2c4a73cb4e4e32d7bdbf3dcf43de75f0d415d80", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2c4a73cb4e4e32d7bdbf3dcf43de75f0d415d80", "message": "Simplify array filling read op", "committedDate": "2020-03-10T05:28:00Z", "type": "commit"}, {"oid": "0b2f144804d9e70c42398ba65062f302e8393fdd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b2f144804d9e70c42398ba65062f302e8393fdd", "message": "Ensure a new filler value is created for each ref element in array", "committedDate": "2020-03-10T05:28:00Z", "type": "commit"}, {"oid": "868f55624d68a8882d548b1e3138c2542784c2af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/868f55624d68a8882d548b1e3138c2542784c2af", "message": "Enable fixed tests", "committedDate": "2020-03-10T05:28:00Z", "type": "commit"}, {"oid": "5f218c92f3baef5241ad3089588ca441799090c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f218c92f3baef5241ad3089588ca441799090c0", "message": "Add test cases for lvalue arrays", "committedDate": "2020-03-10T05:28:00Z", "type": "commit"}, {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a507a19851ca97a7c1d0997d1d849781ab687d16", "message": "Fix checkstyle issue in test", "committedDate": "2020-03-10T05:28:00Z", "type": "commit"}, {"oid": "a507a19851ca97a7c1d0997d1d849781ab687d16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a507a19851ca97a7c1d0997d1d849781ab687d16", "message": "Fix checkstyle issue in test", "committedDate": "2020-03-10T05:28:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390110761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean needsFilling = index >= size;\n          \n          \n            \n                        if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {\n          \n          \n            \n                        if (index >= size && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "author": "MaryamZi", "createdAt": "2020-03-10T06:08:17Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/ArrayValueImpl.java", "diffHunk": "@@ -229,9 +229,21 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        if (refValues != null) {\n+            boolean needsFilling = index >= size;\n+            if (needsFilling && this.elementType.getTag() == TypeTags.ARRAY_TAG) {", "originalCommit": "a507a19851ca97a7c1d0997d1d849781ab687d16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTQ4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390111484", "bodyText": "Why are we specifically checking for array-typed elements though? This is valid for any array with an element type for which fill member is valid right?\nThe following seems to crash.\npublic function main() {\n    map<int>[] arr = [];\n\n    arr[0][\"i\"] = 1;\n}", "author": "MaryamZi", "createdAt": "2020-03-10T06:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMzA2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390113068", "bodyText": "I think we should also check if fill member is valid for this particular element type before calling .getZeroValue().\nThe following also crashes\nimport ballerina/io;\n\npublic function main() {\n    Foo[][2] arr = [];\n\n    arr[0][1] = {s: \"\"}; // should fail here since Foo doesn't have a filler value\n\n    io:println(arr[0][0].s); // fails since this particular `Foo` doesn't have a field `s`\n}\n\ntype Foo record {\n    string s;\n};\nballerina-internal.log\n[2020-03-10 11:46:37,334] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat abc.main(abc.bal:8)\n\tat ___init.$lambda$main$(.)\n\tat org.ballerinalang.jvm.scheduling.SchedulerItem.execute(Scheduler.java:426)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.run(Scheduler.java:218)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.runSafely(Scheduler.java:191)\n\tat java.lang.Thread.run(Thread.java:745)\n \n[2020-03-10 11:46:37,339] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat abc.main(abc.bal:8)\n\tat ___init.$lambda$main$(.)\n\tat org.ballerinalang.jvm.scheduling.SchedulerItem.execute(Scheduler.java:426)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.run(Scheduler.java:218)\n\tat org.ballerinalang.jvm.scheduling.Scheduler.runSafely(Scheduler.java:191)\n\tat java.lang.Thread.run(Thread.java:745)", "author": "MaryamZi", "createdAt": "2020-03-10T06:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNzczMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390117733", "bodyText": "The add() method has the logic for checking if a particular type has a filler value. Will check and see what's going on here", "author": "pubudu91", "createdAt": "2020-03-10T06:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODU5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390738599", "bodyText": "Fixed this by adding a separate fillRead() method instead of relying on the add() method. Some of the logic in the add() method wasn't really applicable to the fill-read case.", "author": "pubudu91", "createdAt": "2020-03-11T04:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDE1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390114153", "bodyText": "Shouldn't we implement the same for tuples too?\nThe following fails with an index out of range?\npublic function main() {\n    [boolean, int[]...] x = [true];\n\n    x[1][1] = 1;\n}\nThe following also\npublic function main() {\n    [boolean, [float, int]...] x = [true];\n\n    x[1][1] = 1;\n}", "author": "MaryamZi", "createdAt": "2020-03-10T06:22:13Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/TupleValueImpl.java", "diffHunk": "@@ -163,6 +163,11 @@ public Object getRefValue(long index) {\n         return get(index);\n     }\n \n+    @Override\n+    public Object fillAndGetRefValue(long index) {\n+        return get(index);", "originalCommit": "a507a19851ca97a7c1d0997d1d849781ab687d16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDczODI4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390738289", "bodyText": "This was fixed by adding a fillRead() method for tuple as well.", "author": "pubudu91", "createdAt": "2020-03-11T04:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390114398", "bodyText": "Can't we write these tests in Ballerina? Maybe in a separate PR?", "author": "MaryamZi", "createdAt": "2020-03-10T06:23:18Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArrayLValueFillTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValueArray;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.ballerinalang.util.exceptions.BLangRuntimeException;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Test cases for filling the elements of a multi-dimensional array when it is used as an LValue.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ArrayLValueFillTest {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/statements/arrays/array_lvalue_fill_test.bal\");\n+    }\n+\n+    @Test\n+    public void testSimpleBasic2DArrays() {\n+        BRunUtil.invoke(compileResult, \"testSimpleBasic2DArrays\");\n+    }\n+\n+    @Test\n+    public void test2DRecordArrays() {\n+        BRunUtil.invoke(compileResult, \"test2DRecordArrays\");\n+    }\n+\n+    @Test\n+    public void test2DObjectArrays() {\n+        BValueArray arr = (BValueArray) BRunUtil.invokeFunction(compileResult, \"test2DObjectArrays\")[0];\n+\n+        assertEquals(arr.size(), 3);", "originalCommit": "a507a19851ca97a7c1d0997d1d849781ab687d16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NjAxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21501#discussion_r390256011", "bodyText": "For non-anydata types, there's no direct way to compare values for equality right? That's why I wrote them in Java for objects.", "author": "pubudu91", "createdAt": "2020-03-10T11:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNDM5OA=="}], "type": "inlineReview"}, {"oid": "6f1d6d0646b2b2f25b5c5c1ff76b73efef8b3dfa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f1d6d0646b2b2f25b5c5c1ff76b73efef8b3dfa", "message": "Support filling-read for 1D arrays as well", "committedDate": "2020-03-10T06:51:56Z", "type": "commit"}, {"oid": "82090955869e433d10c1cd11e84b464448048f56", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/82090955869e433d10c1cd11e84b464448048f56", "message": "Implement filling-read op for tuples", "committedDate": "2020-03-10T11:47:46Z", "type": "commit"}, {"oid": "6a4d9991eaf5181af399ae9dcaba403520a0d963", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a4d9991eaf5181af399ae9dcaba403520a0d963", "message": "Add fillRead() method instead of using add()", "committedDate": "2020-03-10T19:24:33Z", "type": "commit"}, {"oid": "c5c9f0db67795aff1fc45dbdc031767f464c9128", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5c9f0db67795aff1fc45dbdc031767f464c9128", "message": "Add fillRead() method to tuple instead of using add()", "committedDate": "2020-03-10T19:34:26Z", "type": "commit"}, {"oid": "178b0d9467b06d2043bdd2912d9d6bf2da0d1a3c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/178b0d9467b06d2043bdd2912d9d6bf2da0d1a3c", "message": "Fix checkstyle issue", "committedDate": "2020-03-11T04:16:58Z", "type": "commit"}]}