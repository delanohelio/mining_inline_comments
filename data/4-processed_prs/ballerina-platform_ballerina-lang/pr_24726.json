{"pr_number": 24726, "pr_title": "Fix error detail type resolving issue new parser", "pr_createdAt": "2020-07-14T08:35:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726", "timeline": [{"oid": "cba094f1fe662d045300edbda81331fd24e1470f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cba094f1fe662d045300edbda81331fd24e1470f", "message": "Set detail type of user defined error type", "committedDate": "2020-07-14T07:49:31Z", "type": "commit"}, {"oid": "9b66adedd0581b210a237d20eb273c20a7736fc0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b66adedd0581b210a237d20eb273c20a7736fc0", "message": "Add error type resolving test case", "committedDate": "2020-07-14T08:32:29Z", "type": "commit"}, {"oid": "16f88a8d4366f3275bf34e41027703022522e076", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16f88a8d4366f3275bf34e41027703022522e076", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-error-detail-type-resolving-issue-new-parser", "committedDate": "2020-07-15T01:11:35Z", "type": "commit"}, {"oid": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd", "message": "Improve node transformer for distinct errors", "committedDate": "2020-07-16T07:50:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwODI1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464808254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        return nodeType;\n          \n          \n            \n                    }\n          \n          \n            \n                    }\n          \n          \n            \n                    return nodeType;", "author": "MaryamZi", "createdAt": "2020-08-04T05:29:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -431,6 +431,17 @@ public void visit(BLangTypeDefinition astTypeDefinition) {\n         }\n     }\n \n+    private BType getDefinedType(BLangTypeDefinition astTypeDefinition) {\n+        BType nodeType = astTypeDefinition.typeNode.type;\n+        // Consider: type DE distinct E;\n+        // For distinct types, the type defined by typeDefStmt (DE) is different from type used to define it (E).\n+        if (nodeType.tag == TypeTags.ERROR) {\n+            return astTypeDefinition.symbol.type;\n+        } else {\n+            return nodeType;\n+        }", "originalCommit": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgxMzA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464813081", "bodyText": "Can't we assert these in ballerina itself?", "author": "MaryamZi", "createdAt": "2020-08-04T05:45:58Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "diffHunk": "@@ -66,6 +66,12 @@ public void testDistinctFooError() {\n         Assert.assertEquals(errors[0].stringValue(), \"error message {\\\"detailField\\\":true}\");\n     }\n \n+    @Test\n+    public void testFunctionCallInDetailArgExpr() {\n+        BValue[] errors = BRunUtil.invoke(distinctErrorTestResult, \"testFunctionCallInDetailArgExpr\");\n+        Assert.assertEquals(errors[0].stringValue(), \"Concurrent graph modification {code:\\\"1234\\\", details:{}}\");", "originalCommit": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyMDQxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464820410", "bodyText": "Should we extract typeDef.typeNode out to a variable?", "author": "MaryamZi", "createdAt": "2020-08-04T06:08:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1525,19 +1525,22 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            if (typeDef.typeNode.getKind() == NodeKind.ERROR_TYPE) {", "originalCommit": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyMzAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r464823027", "bodyText": "Shouldn't we use a type env here also? If so can we refactor these two blocks to avoid repeating the same logic?", "author": "MaryamZi", "createdAt": "2020-08-04T06:16:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1525,19 +1525,22 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            if (typeDef.typeNode.getKind() == NodeKind.ERROR_TYPE) {\n+                BLangErrorType errorTypeNode = (BLangErrorType) typeDef.typeNode;\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(errorTypeNode, typeDef.symbol.scope, pkgEnv);\n+\n+                BType detailType = Optional.ofNullable(errorTypeNode.detailType)\n+                        .map(bLangType -> symResolver.resolveTypeNode(bLangType, typeDefEnv))\n+                        .orElse(symTable.detailType);\n+\n+                ((BErrorType) typeDef.symbol.type).detailType = detailType;\n+            } else if (typeDef.typeNode.type != null && typeDef.typeNode.type.tag == TypeTags.ERROR) {\n+                BType detailType = ((BErrorType) typeDef.typeNode.type).detailType;\n+                if (detailType == symTable.noType) {\n+                    BErrorType type = (BErrorType) symResolver.resolveTypeNode(typeDef.typeNode, pkgEnv);", "originalCommit": "e6888493ed6ac1b2ccce937c1f65d5c9a4cee7fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyNzQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r466827497", "bodyText": "Fixed the type-env, not quite sure how to fold those 2 branches", "author": "rdhananjaya", "createdAt": "2020-08-07T05:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyMzAyNw=="}], "type": "inlineReview"}, {"oid": "2f24262f1c4fe08476c2112b6ad4cf9fedb4c776", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f24262f1c4fe08476c2112b6ad4cf9fedb4c776", "message": "Apply review suggestions", "committedDate": "2020-08-07T05:23:02Z", "type": "commit"}, {"oid": "fc0a066300327e97da70cbdb51175bca186382ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc0a066300327e97da70cbdb51175bca186382ee", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-error-detail-type-resolving-issue-new-parser", "committedDate": "2020-08-07T09:16:46Z", "type": "commit"}, {"oid": "997e5414369d240e2f02820a429a98d0d5ee2ddb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/997e5414369d240e2f02820a429a98d0d5ee2ddb", "message": "Fix nullpointer error when creating typeDefEnv", "committedDate": "2020-08-07T09:35:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5ODY3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r468998679", "bodyText": "Missing a new line.", "author": "MaryamZi", "createdAt": "2020-08-12T04:30:56Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/error/distinct_error_test.bal", "diffHunk": "@@ -8,3 +8,31 @@ function testFooError() returns Foo {\n \n     return foo;\n }\n+\n+public type GraphAPIError distinct error<GraphAPIErrorDetails>;\n+public type GraphAPIErrorDetails record {|\n+    string code;\n+    map<anydata> details;\n+|};\n+\n+public function testFunctionCallInDetailArgExpr() {\n+    json codeJson = \"1234\";\n+    map<anydata> details = {};\n+    var x = GraphAPIError(\"Concurrent graph modification\", code = codeJson.toString(), details = details);\n+    assertEquality(x.toString(), \"error Concurrent graph modification code=1234 details=\");\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertEquality(any|error actual, any|error expected) {\n+    if expected is anydata && actual is anydata && expected == actual {\n+        return;\n+    }\n+\n+    if expected === actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");\n+}", "originalCommit": "997e5414369d240e2f02820a429a98d0d5ee2ddb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469003928", "bodyText": "Can the detail type here be null like for normal errors (what's handled in L1550-L1552)? If that is the case should we not set symTable.detailType?", "author": "MaryamZi", "createdAt": "2020-08-12T04:52:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1542,19 +1542,24 @@ private void addTopLevelNode(BLangPackage pkgNode, TopLevelNode node) {\n \n     private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n         for (BLangTypeDefinition typeDef : typeDefNodes) {\n-            if (typeDef.typeNode.getKind() != NodeKind.ERROR_TYPE) {\n-                continue;\n+            BLangType typeNode = typeDef.typeNode;\n+            if (typeNode.getKind() == NodeKind.ERROR_TYPE) {\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(typeNode, typeDef.symbol.scope, pkgEnv);\n+                BLangErrorType errorTypeNode = (BLangErrorType) typeNode;\n+\n+                BType detailType = Optional.ofNullable(errorTypeNode.detailType)\n+                        .map(bLangType -> symResolver.resolveTypeNode(bLangType, typeDefEnv))\n+                        .orElse(symTable.detailType);\n+\n+                ((BErrorType) typeDef.symbol.type).detailType = detailType;\n+            } else if (typeNode.type != null && typeNode.type.tag == TypeTags.ERROR) {\n+                SymbolEnv typeDefEnv = SymbolEnv.createTypeEnv(typeNode, typeDef.symbol.scope, pkgEnv);\n+                BType detailType = ((BErrorType) typeNode.type).detailType;\n+                if (detailType == symTable.noType) {\n+                    BErrorType type = (BErrorType) symResolver.resolveTypeNode(typeNode, typeDefEnv);\n+                    ((BErrorType) typeDef.symbol.type).detailType = type.detailType;", "originalCommit": "997e5414369d240e2f02820a429a98d0d5ee2ddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYyOTY2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r487629663", "bodyText": "Also, is it possible for detail type to be symTable.noType when we get to L1576? Wouldn't we have set symTable.detailType?", "author": "MaryamZi", "createdAt": "2020-09-14T03:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDE0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004149", "bodyText": "Shall we assert this in b7a itself?", "author": "MaryamZi", "createdAt": "2020-08-12T04:53:51Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/types/ErrorTypeTest.java", "diffHunk": "@@ -106,13 +106,22 @@ public void testPerformInvalidCastWithDistinctErrorType() {\n                 \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types: 'OurProccessingError' cannot be cast to \" +\n                         \"'errors:OrderProcessingError'\\\"}\");\n     }\n+\n+    @Test\n+    public void testErrorDetailDefinedAfterErrorDef() {\n+        BValue[] returns = BRunUtil.invoke(result, \"testErrorDetailDefinedAfterErrorDef\");\n+        Assert.assertEquals(returns[0].stringValue(), \"New error {code:\\\"ABCD\\\"}\");", "originalCommit": "997e5414369d240e2f02820a429a98d0d5ee2ddb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004401", "bodyText": "Extra line.", "author": "MaryamZi", "createdAt": "2020-08-12T04:54:48Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_project/src/errors/errors.bal", "diffHunk": "@@ -13,3 +13,12 @@ public type ApplicationError error<ApplicationErrorData>;\n public type OrderCreationError distinct ApplicationError;\n public type OrderProcessingError distinct ApplicationError;\n public type OrderCreationError2 distinct OrderCreationError;\n+\n+public type NewPostDefinedError distinct PostDefinedError;\n+public type PostDefinedError error<ErrorData>;\n+\n+\n+public type ErrorData record {|\n+    string code;\n+|};\n+", "originalCommit": "997e5414369d240e2f02820a429a98d0d5ee2ddb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDQzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004430", "bodyText": "Extra line.", "author": "MaryamZi", "createdAt": "2020-08-12T04:54:54Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_project/src/errors/errors.bal", "diffHunk": "@@ -13,3 +13,12 @@ public type ApplicationError error<ApplicationErrorData>;\n public type OrderCreationError distinct ApplicationError;\n public type OrderProcessingError distinct ApplicationError;\n public type OrderCreationError2 distinct OrderCreationError;\n+\n+public type NewPostDefinedError distinct PostDefinedError;\n+public type PostDefinedError error<ErrorData>;\n+\n+", "originalCommit": "997e5414369d240e2f02820a429a98d0d5ee2ddb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDY1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469004655", "bodyText": "Instead of using the toString() representation, shall we assert the message, code, and details maps separately?", "author": "MaryamZi", "createdAt": "2020-08-12T04:55:39Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/error/distinct_error_test.bal", "diffHunk": "@@ -8,3 +8,31 @@ function testFooError() returns Foo {\n \n     return foo;\n }\n+\n+public type GraphAPIError distinct error<GraphAPIErrorDetails>;\n+public type GraphAPIErrorDetails record {|\n+    string code;\n+    map<anydata> details;\n+|};\n+\n+public function testFunctionCallInDetailArgExpr() {\n+    json codeJson = \"1234\";\n+    map<anydata> details = {};\n+    var x = GraphAPIError(\"Concurrent graph modification\", code = codeJson.toString(), details = details);\n+    assertEquality(x.toString(), \"error Concurrent graph modification code=1234 details=\");", "originalCommit": "997e5414369d240e2f02820a429a98d0d5ee2ddb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxNDk4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24726#discussion_r469014988", "bodyText": "+1", "author": "rdhananjaya", "createdAt": "2020-08-12T05:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDY1NQ=="}], "type": "inlineReview"}, {"oid": "9d5d1f1fb31abc869ddf22e4abc9fbc8a61608ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d5d1f1fb31abc869ddf22e4abc9fbc8a61608ad", "message": "Expand error type assert", "committedDate": "2020-08-12T07:03:42Z", "type": "commit"}, {"oid": "fd7684ed8e8ac0256ea79faa29c2d0e8d4435009", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd7684ed8e8ac0256ea79faa29c2d0e8d4435009", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-error-detail-type-resolving-issue-new-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "committedDate": "2020-09-11T03:47:23Z", "type": "commit"}, {"oid": "a8b81f6e19e2f4571afc830656548e58cda121cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8b81f6e19e2f4571afc830656548e58cda121cd", "message": "Apply review suggestions", "committedDate": "2020-09-11T04:19:15Z", "type": "commit"}, {"oid": "de8685d8eddb93a7ed21d5f10c1a33b8e6bf07c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/de8685d8eddb93a7ed21d5f10c1a33b8e6bf07c9", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-error-detail-type-resolving-issue-new-parser\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/AbstractParser.java", "committedDate": "2020-09-14T03:45:41Z", "type": "commit"}]}