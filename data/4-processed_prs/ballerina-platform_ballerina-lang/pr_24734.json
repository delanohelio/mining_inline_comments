{"pr_number": 24734, "pr_title": "Allow redirection for non-safe methods", "pr_createdAt": "2020-07-14T11:59:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734", "timeline": [{"oid": "98ec1dcc107303fe75b7c8b20903cc7d7d5c6fb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/98ec1dcc107303fe75b7c8b20903cc7d7d5c6fb4", "message": "Allow redirection for non-safe methods", "committedDate": "2020-07-14T19:03:04Z", "type": "commit"}, {"oid": "98ec1dcc107303fe75b7c8b20903cc7d7d5c6fb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/98ec1dcc107303fe75b7c8b20903cc7d7d5c6fb4", "message": "Allow redirection for non-safe methods", "committedDate": "2020-07-14T19:03:04Z", "type": "forcePushed"}, {"oid": "e68430d4115abab847906d329593754a4dea7ede", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e68430d4115abab847906d329593754a4dea7ede", "message": "Add allowAuthHeaders config", "committedDate": "2020-07-15T12:19:43Z", "type": "commit"}, {"oid": "e68430d4115abab847906d329593754a4dea7ede", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e68430d4115abab847906d329593754a4dea7ede", "message": "Add allowAuthHeaders config", "committedDate": "2020-07-15T12:19:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MDI4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455080284", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return \"unsupported redirect status code\" + statusCode.toString();\n          \n          \n            \n                    });\n          \n          \n            \n                    return \"unsupported redirect status code\" + statusCode.toString();\n          \n          \n            \n                });", "author": "ldclakmal", "createdAt": "2020-07-15T14:08:26Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -365,36 +378,40 @@ function createNewEndpointConfig(ClientConfiguration config) returns ClientConfi\n     return newEpConfig;\n }\n \n-//Get the HTTP method that should be used for redirection based on the status code.\n+// Get the HTTP method that should be used for redirection based on the status code.\n+// As per rfc7231 and rfc7538,\n+// +-------------------------------------------+-----------+-----------+\n+// |                                           | Permanent | Temporary |\n+// +-------------------------------------------+-----------+-----------+\n+// | Allows changing the request method from   | 301       | 302       |\n+// | POST to GET                               |           |           |\n+// | Does not allow changing the request       | 308       | 307       |\n+// | method from POST to GET                   |           |           |\n+// +-------------------------------------------+-----------+-----------+\n function getRedirectMethod(HttpOperation httpVerb, Response response) returns HttpOperation|() {\n     int statusCode = response.statusCode;\n-    if ((statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY || statusCode == STATUS_TEMPORARY_REDIRECT\n-            || statusCode == STATUS_PERMANENT_REDIRECT) && (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n-        return httpVerb;\n-    } else if ((statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND) &&\n-        (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n+    if (statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND || statusCode == STATUS_SEE_OTHER) {\n         return HTTP_GET;\n-    } else if (statusCode == STATUS_SEE_OTHER) {\n-        return HTTP_GET;\n-    } else {\n-        return ();\n     }\n+    if (statusCode == STATUS_TEMPORARY_REDIRECT || statusCode == STATUS_PERMANENT_REDIRECT ||\n+               statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY) {\n+        return httpVerb;\n+    }\n+    log:printDebug(function() returns string {\n+            return \"unsupported redirect status code\" + statusCode.toString();\n+        });", "originalCommit": "e68430d4115abab847906d329593754a4dea7ede", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MDgyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455080821", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");\n          \n          \n            \n                    req.setHeader(\"Proxy-Authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "author": "ldclakmal", "createdAt": "2020-07-15T14:09:11Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/11_http_redirects.bal", "diffHunk": "@@ -252,6 +253,78 @@ service testRedirect on serviceEndpoint3 {\n             io:println(\"Connector error!\");\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/doPost\"\n+    }\n+    resource function PostClearText(http:Caller caller, http:Request request) {\n+        http:Client endPoint4 = new(\"http://localhost:9103\", endPoint4Config );\n+        http:Request req = new;\n+        req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "originalCommit": "e68430d4115abab847906d329593754a4dea7ede", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MDk2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455080968", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");\n          \n          \n            \n                    req.setHeader(\"Proxy-Authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "author": "ldclakmal", "createdAt": "2020-07-15T14:09:21Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/11_http_redirects.bal", "diffHunk": "@@ -252,6 +253,78 @@ service testRedirect on serviceEndpoint3 {\n             io:println(\"Connector error!\");\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/doPost\"\n+    }\n+    resource function PostClearText(http:Caller caller, http:Request request) {\n+        http:Client endPoint4 = new(\"http://localhost:9103\", endPoint4Config );\n+        http:Request req = new;\n+        req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");\n+        req.setTextPayload(\"Payload redirected\");\n+        var response = endPoint4->post(\"/redirect1/handlePost\", req);\n+        if (response is http:Response) {\n+            var value = response.getTextPayload();\n+            if (value is string) {\n+                value = value + \":\" + response.resolvedRequestedURI;\n+                checkpanic caller->respond(<@untainted> value);\n+            } else {\n+                io:println(\"Payload error!\");\n+            }\n+        } else {\n+            io:println(\"Connector error!\");\n+        }\n+    }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/doSecurePut\"\n+    }\n+    resource function testSecurePut(http:Caller caller, http:Request request) {\n+        http:Request req = new;\n+        req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "originalCommit": "e68430d4115abab847906d329593754a4dea7ede", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MjMwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455082307", "bodyText": "Shall we add these headers as constants?", "author": "ldclakmal", "createdAt": "2020-07-15T14:11:12Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -365,36 +378,40 @@ function createNewEndpointConfig(ClientConfiguration config) returns ClientConfi\n     return newEpConfig;\n }\n \n-//Get the HTTP method that should be used for redirection based on the status code.\n+// Get the HTTP method that should be used for redirection based on the status code.\n+// As per rfc7231 and rfc7538,\n+// +-------------------------------------------+-----------+-----------+\n+// |                                           | Permanent | Temporary |\n+// +-------------------------------------------+-----------+-----------+\n+// | Allows changing the request method from   | 301       | 302       |\n+// | POST to GET                               |           |           |\n+// | Does not allow changing the request       | 308       | 307       |\n+// | method from POST to GET                   |           |           |\n+// +-------------------------------------------+-----------+-----------+\n function getRedirectMethod(HttpOperation httpVerb, Response response) returns HttpOperation|() {\n     int statusCode = response.statusCode;\n-    if ((statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY || statusCode == STATUS_TEMPORARY_REDIRECT\n-            || statusCode == STATUS_PERMANENT_REDIRECT) && (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n-        return httpVerb;\n-    } else if ((statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND) &&\n-        (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n+    if (statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND || statusCode == STATUS_SEE_OTHER) {\n         return HTTP_GET;\n-    } else if (statusCode == STATUS_SEE_OTHER) {\n-        return HTTP_GET;\n-    } else {\n-        return ();\n     }\n+    if (statusCode == STATUS_TEMPORARY_REDIRECT || statusCode == STATUS_PERMANENT_REDIRECT ||\n+               statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY) {\n+        return httpVerb;\n+    }\n+    log:printDebug(function() returns string {\n+            return \"unsupported redirect status code\" + statusCode.toString();\n+        });\n+    return ();\n }\n \n-function createRedirectRequest(int statusCode, Request request) returns Request {\n-    Request redirectRequest = new;\n-    string[] headerNames = <@untainted string[]> request.getHeaderNames();\n-    foreach var headerName in headerNames {\n-        string[] headerValues = request.getHeaders(headerName);\n-        foreach var headerValue in headerValues {\n-            redirectRequest.addHeader(headerName, headerValue);\n-        }\n-    }\n-    if (statusCode == STATUS_SEE_OTHER) {\n-        redirectRequest.removeHeader(TRANSFER_ENCODING);\n-        redirectRequest.removeHeader(CONTENT_LENGTH);\n+function createRedirectRequest(Request request, boolean allowAuthorizationHeader) returns Request {\n+    if (allowAuthorizationHeader) {\n+        return request;\n     }\n-    return redirectRequest;\n+    request.removeHeader(AUTHORIZATION);\n+    request.removeHeader(\"Proxy-Authenticate\");", "originalCommit": "e68430d4115abab847906d329593754a4dea7ede", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5NTIxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455095214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function createRedirectRequest(Request request, boolean allowAuthorizationHeader) returns Request {\n          \n          \n            \n                if (allowAuthorizationHeader) {\n          \n          \n            \n            function createRedirectRequest(Request request, boolean allowAuthHeaders) returns Request {\n          \n          \n            \n                if (allowAuthHeaders) {", "author": "ldclakmal", "createdAt": "2020-07-15T14:28:19Z", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -365,36 +378,40 @@ function createNewEndpointConfig(ClientConfiguration config) returns ClientConfi\n     return newEpConfig;\n }\n \n-//Get the HTTP method that should be used for redirection based on the status code.\n+// Get the HTTP method that should be used for redirection based on the status code.\n+// As per rfc7231 and rfc7538,\n+// +-------------------------------------------+-----------+-----------+\n+// |                                           | Permanent | Temporary |\n+// +-------------------------------------------+-----------+-----------+\n+// | Allows changing the request method from   | 301       | 302       |\n+// | POST to GET                               |           |           |\n+// | Does not allow changing the request       | 308       | 307       |\n+// | method from POST to GET                   |           |           |\n+// +-------------------------------------------+-----------+-----------+\n function getRedirectMethod(HttpOperation httpVerb, Response response) returns HttpOperation|() {\n     int statusCode = response.statusCode;\n-    if ((statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY || statusCode == STATUS_TEMPORARY_REDIRECT\n-            || statusCode == STATUS_PERMANENT_REDIRECT) && (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n-        return httpVerb;\n-    } else if ((statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND) &&\n-        (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n+    if (statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND || statusCode == STATUS_SEE_OTHER) {\n         return HTTP_GET;\n-    } else if (statusCode == STATUS_SEE_OTHER) {\n-        return HTTP_GET;\n-    } else {\n-        return ();\n     }\n+    if (statusCode == STATUS_TEMPORARY_REDIRECT || statusCode == STATUS_PERMANENT_REDIRECT ||\n+               statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY) {\n+        return httpVerb;\n+    }\n+    log:printDebug(function() returns string {\n+            return \"unsupported redirect status code\" + statusCode.toString();\n+        });\n+    return ();\n }\n \n-function createRedirectRequest(int statusCode, Request request) returns Request {\n-    Request redirectRequest = new;\n-    string[] headerNames = <@untainted string[]> request.getHeaderNames();\n-    foreach var headerName in headerNames {\n-        string[] headerValues = request.getHeaders(headerName);\n-        foreach var headerValue in headerValues {\n-            redirectRequest.addHeader(headerName, headerValue);\n-        }\n-    }\n-    if (statusCode == STATUS_SEE_OTHER) {\n-        redirectRequest.removeHeader(TRANSFER_ENCODING);\n-        redirectRequest.removeHeader(CONTENT_LENGTH);\n+function createRedirectRequest(Request request, boolean allowAuthorizationHeader) returns Request {\n+    if (allowAuthorizationHeader) {", "originalCommit": "e68430d4115abab847906d329593754a4dea7ede", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c849d7261d18402c9d8db74a737a1d90f7e5254", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c849d7261d18402c9d8db74a737a1d90f7e5254", "message": "Address review requests", "committedDate": "2020-07-15T16:12:46Z", "type": "commit"}, {"oid": "8c849d7261d18402c9d8db74a737a1d90f7e5254", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c849d7261d18402c9d8db74a737a1d90f7e5254", "message": "Address review requests", "committedDate": "2020-07-15T16:12:46Z", "type": "forcePushed"}, {"oid": "cafea6b274ab1f12b078536f67c775d2894d1773", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cafea6b274ab1f12b078536f67c775d2894d1773", "message": "fix failing ls tests", "committedDate": "2020-07-16T03:48:55Z", "type": "commit"}, {"oid": "32ad39f582cc844cd51f41fb46e1516bcc9b581f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32ad39f582cc844cd51f41fb46e1516bcc9b581f", "message": "Merge pull request #13 from nadeeshaan/fix-redirect\n\nFix failing ls tests", "committedDate": "2020-07-16T04:22:17Z", "type": "commit"}]}