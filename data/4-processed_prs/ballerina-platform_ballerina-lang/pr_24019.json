{"pr_number": 24019, "pr_title": "Add an HTTP Cookie BBE", "pr_createdAt": "2020-06-12T11:52:21Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019", "timeline": [{"oid": "c28af30b22050b277d9b446400426b9d68d75187", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c28af30b22050b277d9b446400426b9d68d75187", "message": "Add an HTTP Cookie BBE", "committedDate": "2020-06-12T11:58:47Z", "type": "commit"}, {"oid": "c28af30b22050b277d9b446400426b9d68d75187", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c28af30b22050b277d9b446400426b9d68d75187", "message": "Add an HTTP Cookie BBE", "committedDate": "2020-06-12T11:58:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTIwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439549204", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Retrieve the json payload from the request as it\n          \n          \n            \n                    // Retrieve the JSON payload from the request as it", "author": "praneesha", "createdAt": "2020-06-12T17:23:41Z", "path": "examples/http-cookies/cookie_server.bal", "diffHunk": "@@ -0,0 +1,83 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+listener http:Listener serverEP = new (9095);\n+\n+@http:ServiceConfig {\n+    basePath: \"/cookie-demo\"\n+}\n+\n+service cookieServer on serverEP {\n+    @http:ResourceConfig {\n+        methods: [\"POST\"],\n+        path: \"/login\"\n+    }\n+    resource function login(http:Caller caller, http:Request req) {\n+        // Retrieve the json payload from the request as it", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439549409", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // and `value` as the logged in user's name.\n          \n          \n            \n                                // and `value` as the logged-in user's name.", "author": "praneesha", "createdAt": "2020-06-12T17:24:01Z", "path": "examples/http-cookies/cookie_server.bal", "diffHunk": "@@ -0,0 +1,83 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+listener http:Listener serverEP = new (9095);\n+\n+@http:ServiceConfig {\n+    basePath: \"/cookie-demo\"\n+}\n+\n+service cookieServer on serverEP {\n+    @http:ResourceConfig {\n+        methods: [\"POST\"],\n+        path: \"/login\"\n+    }\n+    resource function login(http:Caller caller, http:Request req) {\n+        // Retrieve the json payload from the request as it\n+        // contains the login details of a user.\n+        json|error details = req.getJsonPayload();\n+\n+        if (details is json) {\n+            // Retrieve the username and password.\n+            json|error name = details.name;\n+            json|error password = details.password;\n+\n+            if (name is json && password is json) {\n+                // Check the password value.\n+                if (password == \"p@ssw0rd\") {\n+\n+                    // Create a new cookie by setting `name` as the `username`\n+                    // and `value` as the logged in user's name.", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTU3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439549570", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Respond with the user name added to the welcome message.\n          \n          \n            \n                        // Respond with the username added to the welcome message.", "author": "praneesha", "createdAt": "2020-06-12T17:24:21Z", "path": "examples/http-cookies/cookie_server.bal", "diffHunk": "@@ -0,0 +1,83 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+listener http:Listener serverEP = new (9095);\n+\n+@http:ServiceConfig {\n+    basePath: \"/cookie-demo\"\n+}\n+\n+service cookieServer on serverEP {\n+    @http:ResourceConfig {\n+        methods: [\"POST\"],\n+        path: \"/login\"\n+    }\n+    resource function login(http:Caller caller, http:Request req) {\n+        // Retrieve the json payload from the request as it\n+        // contains the login details of a user.\n+        json|error details = req.getJsonPayload();\n+\n+        if (details is json) {\n+            // Retrieve the username and password.\n+            json|error name = details.name;\n+            json|error password = details.password;\n+\n+            if (name is json && password is json) {\n+                // Check the password value.\n+                if (password == \"p@ssw0rd\") {\n+\n+                    // Create a new cookie by setting `name` as the `username`\n+                    // and `value` as the logged in user's name.\n+                    http:Cookie cookie = new(\"username\", name.toString());\n+\n+                    // Set the cookies path as `/` to apply it to all the\n+                    // resources in the service.\n+                    cookie.path = \"/\";\n+\n+                    http:Response response = new;\n+\n+                    // Add the created cookie to the response.\n+                    response.addCookie(cookie);\n+\n+                    // Set a message payload to inform that the login has\n+                    // been succeeded.\n+                    response.setTextPayload(\"Login succeeded\");\n+                    var result = caller->respond(response);\n+                    if (result is error) {\n+                        log:printError(\"Failed to respond\", result);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/welcome\"\n+    }\n+    resource function welcome(http:Caller caller, http:Request req) {\n+        // Retrieve cookies from the request.\n+        http:Cookie[] cookies = req.getCookies();\n+\n+        // Get the cookie value of the `username`.\n+        http:Cookie[] usernameCookie = cookies.filter(function\n+                                (http:Cookie cookie) returns boolean {\n+            return cookie.name == \"username\";\n+        });\n+\n+        if (usernameCookie.length() > 0) {\n+            string? user = usernameCookie[0].value;\n+            if (user is string) {\n+            // Respond with the user name added to the welcome message.", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTY4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439549689", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // If the user is `nil` send a login message.\n          \n          \n            \n                            // If the user is `nil`, send a login message.", "author": "praneesha", "createdAt": "2020-06-12T17:24:35Z", "path": "examples/http-cookies/cookie_server.bal", "diffHunk": "@@ -0,0 +1,83 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+listener http:Listener serverEP = new (9095);\n+\n+@http:ServiceConfig {\n+    basePath: \"/cookie-demo\"\n+}\n+\n+service cookieServer on serverEP {\n+    @http:ResourceConfig {\n+        methods: [\"POST\"],\n+        path: \"/login\"\n+    }\n+    resource function login(http:Caller caller, http:Request req) {\n+        // Retrieve the json payload from the request as it\n+        // contains the login details of a user.\n+        json|error details = req.getJsonPayload();\n+\n+        if (details is json) {\n+            // Retrieve the username and password.\n+            json|error name = details.name;\n+            json|error password = details.password;\n+\n+            if (name is json && password is json) {\n+                // Check the password value.\n+                if (password == \"p@ssw0rd\") {\n+\n+                    // Create a new cookie by setting `name` as the `username`\n+                    // and `value` as the logged in user's name.\n+                    http:Cookie cookie = new(\"username\", name.toString());\n+\n+                    // Set the cookies path as `/` to apply it to all the\n+                    // resources in the service.\n+                    cookie.path = \"/\";\n+\n+                    http:Response response = new;\n+\n+                    // Add the created cookie to the response.\n+                    response.addCookie(cookie);\n+\n+                    // Set a message payload to inform that the login has\n+                    // been succeeded.\n+                    response.setTextPayload(\"Login succeeded\");\n+                    var result = caller->respond(response);\n+                    if (result is error) {\n+                        log:printError(\"Failed to respond\", result);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/welcome\"\n+    }\n+    resource function welcome(http:Caller caller, http:Request req) {\n+        // Retrieve cookies from the request.\n+        http:Cookie[] cookies = req.getCookies();\n+\n+        // Get the cookie value of the `username`.\n+        http:Cookie[] usernameCookie = cookies.filter(function\n+                                (http:Cookie cookie) returns boolean {\n+            return cookie.name == \"username\";\n+        });\n+\n+        if (usernameCookie.length() > 0) {\n+            string? user = usernameCookie[0].value;\n+            if (user is string) {\n+            // Respond with the user name added to the welcome message.\n+            var result = caller->respond(\"Welcome back \" + <@untainted> user);\n+\n+            } else {\n+                // If the user is `nil` send a login message.", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU0OTg0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439549848", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Send a username and a password as a json payload to the backend.\n          \n          \n            \n                // Send a username and a password as a JSON payload to the backend.", "author": "praneesha", "createdAt": "2020-06-12T17:24:55Z", "path": "examples/http-cookies/http_client.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+// HTTP client configurations associated with enabling cookies.\n+http:ClientConfiguration clientEPConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+public function main() {\n+    // Create a new HTTP client by giving the URL and the client configuration.\n+    http:Client httpClient = new(\"http://localhost:9095/cookie-demo\",\n+                                  clientEPConfig);\n+\n+    // Initialize an HTTP request.\n+    http:Request request = new;\n+\n+    // Send a username and a password as a json payload to the backend.", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDAyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439550024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // When the login is successful, do another request to the\n          \n          \n            \n                        // When the login is successful, make another request to the", "author": "praneesha", "createdAt": "2020-06-12T17:25:12Z", "path": "examples/http-cookies/http_client.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+// HTTP client configurations associated with enabling cookies.\n+http:ClientConfiguration clientEPConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+public function main() {\n+    // Create a new HTTP client by giving the URL and the client configuration.\n+    http:Client httpClient = new(\"http://localhost:9095/cookie-demo\",\n+                                  clientEPConfig);\n+\n+    // Initialize an HTTP request.\n+    http:Request request = new;\n+\n+    // Send a username and a password as a json payload to the backend.\n+    json jsonPart = {\n+        name: \"John\",\n+        password: \"p@ssw0rd\"\n+    };\n+    request.setJsonPayload(jsonPart);\n+\n+    // Send an outbound request to the `login` backend resource.\n+    var loginResp = httpClient->post(\"/login\", request);\n+\n+    if (loginResp is http:Response) {\n+        // This response contains the cookies added by the backend server.\n+        // Get the login response message.\n+        string|error loginMessage = loginResp.getTextPayload();\n+\n+        if (loginMessage is error) {\n+            log:printError(\"Login failed\", loginMessage);\n+        } else {\n+            // When the login is successful, do another request to the", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDEzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439550138", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // `/welcome` resource of the backend service. As we have enabled\n          \n          \n            \n                        // `/welcome` resource of the backend service.", "author": "praneesha", "createdAt": "2020-06-12T17:25:25Z", "path": "examples/http-cookies/http_client.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+// HTTP client configurations associated with enabling cookies.\n+http:ClientConfiguration clientEPConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+public function main() {\n+    // Create a new HTTP client by giving the URL and the client configuration.\n+    http:Client httpClient = new(\"http://localhost:9095/cookie-demo\",\n+                                  clientEPConfig);\n+\n+    // Initialize an HTTP request.\n+    http:Request request = new;\n+\n+    // Send a username and a password as a json payload to the backend.\n+    json jsonPart = {\n+        name: \"John\",\n+        password: \"p@ssw0rd\"\n+    };\n+    request.setJsonPayload(jsonPart);\n+\n+    // Send an outbound request to the `login` backend resource.\n+    var loginResp = httpClient->post(\"/login\", request);\n+\n+    if (loginResp is http:Response) {\n+        // This response contains the cookies added by the backend server.\n+        // Get the login response message.\n+        string|error loginMessage = loginResp.getTextPayload();\n+\n+        if (loginMessage is error) {\n+            log:printError(\"Login failed\", loginMessage);\n+        } else {\n+            // When the login is successful, do another request to the\n+            // `/welcome` resource of the backend service. As we have enabled", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDIzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439550234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // cookies in the HTTP client, it automatically handles cookies\n          \n          \n            \n                        // As cookies are enabled in the HTTP client, it automatically handles cookies", "author": "praneesha", "createdAt": "2020-06-12T17:25:39Z", "path": "examples/http-cookies/http_client.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+// HTTP client configurations associated with enabling cookies.\n+http:ClientConfiguration clientEPConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+public function main() {\n+    // Create a new HTTP client by giving the URL and the client configuration.\n+    http:Client httpClient = new(\"http://localhost:9095/cookie-demo\",\n+                                  clientEPConfig);\n+\n+    // Initialize an HTTP request.\n+    http:Request request = new;\n+\n+    // Send a username and a password as a json payload to the backend.\n+    json jsonPart = {\n+        name: \"John\",\n+        password: \"p@ssw0rd\"\n+    };\n+    request.setJsonPayload(jsonPart);\n+\n+    // Send an outbound request to the `login` backend resource.\n+    var loginResp = httpClient->post(\"/login\", request);\n+\n+    if (loginResp is http:Response) {\n+        // This response contains the cookies added by the backend server.\n+        // Get the login response message.\n+        string|error loginMessage = loginResp.getTextPayload();\n+\n+        if (loginMessage is error) {\n+            log:printError(\"Login failed\", loginMessage);\n+        } else {\n+            // When the login is successful, do another request to the\n+            // `/welcome` resource of the backend service. As we have enabled\n+            // cookies in the HTTP client, it automatically handles cookies", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDMxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439550319", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // received with the login response, and sends the relevant cookies\n          \n          \n            \n                        // received with the login response and sends the relevant cookies", "author": "praneesha", "createdAt": "2020-06-12T17:25:49Z", "path": "examples/http-cookies/http_client.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+import ballerina/http;\n+import ballerina/log;\n+\n+// HTTP client configurations associated with enabling cookies.\n+http:ClientConfiguration clientEPConfig = {\n+    cookieConfig: {\n+        enabled: true\n+    }\n+};\n+\n+public function main() {\n+    // Create a new HTTP client by giving the URL and the client configuration.\n+    http:Client httpClient = new(\"http://localhost:9095/cookie-demo\",\n+                                  clientEPConfig);\n+\n+    // Initialize an HTTP request.\n+    http:Request request = new;\n+\n+    // Send a username and a password as a json payload to the backend.\n+    json jsonPart = {\n+        name: \"John\",\n+        password: \"p@ssw0rd\"\n+    };\n+    request.setJsonPayload(jsonPart);\n+\n+    // Send an outbound request to the `login` backend resource.\n+    var loginResp = httpClient->post(\"/login\", request);\n+\n+    if (loginResp is http:Response) {\n+        // This response contains the cookies added by the backend server.\n+        // Get the login response message.\n+        string|error loginMessage = loginResp.getTextPayload();\n+\n+        if (loginMessage is error) {\n+            log:printError(\"Login failed\", loginMessage);\n+        } else {\n+            // When the login is successful, do another request to the\n+            // `/welcome` resource of the backend service. As we have enabled\n+            // cookies in the HTTP client, it automatically handles cookies\n+            // received with the login response, and sends the relevant cookies", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MDQ3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24019#discussion_r439550476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This example demonstrates how to handle HTTP cookies in Ballerina service and client.\n          \n          \n            \n            This example demonstrates how to handle HTTP cookies in a Ballerina service and client.", "author": "praneesha", "createdAt": "2020-06-12T17:26:05Z", "path": "examples/http-cookies/http_cookies.description", "diffHunk": "@@ -0,0 +1 @@\n+This example demonstrates how to handle HTTP cookies in Ballerina service and client.", "originalCommit": "c28af30b22050b277d9b446400426b9d68d75187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0dfe1971f1f9dab56ec73f4b56d4865edbb7628f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dfe1971f1f9dab56ec73f4b56d4865edbb7628f", "message": "Apply suggestions from code review\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-06-13T01:27:49Z", "type": "commit"}]}