{"pr_number": 24170, "pr_title": " Fix intersection type issues due to constituent type ordering", "pr_createdAt": "2020-06-15T17:56:59Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170", "timeline": [{"oid": "87bccb59f0b322bc5d78da0ae10f5207993f209b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87bccb59f0b322bc5d78da0ae10f5207993f209b", "message": "Enable test disabled due to #23551", "committedDate": "2020-06-15T10:11:50Z", "type": "commit"}, {"oid": "bff2875d13ed88d3befbd257c779241db31e6887", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bff2875d13ed88d3befbd257c779241db31e6887", "message": "Fix intersection issues due to constituent type ordering", "committedDate": "2020-06-15T16:51:23Z", "type": "commit"}, {"oid": "361cad82d329b23093353a1386105b3b94a53d5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/361cad82d329b23093353a1386105b3b94a53d5e", "message": "Add tests", "committedDate": "2020-06-15T16:58:50Z", "type": "commit"}, {"oid": "a51324607a0ab2cc5dd874787aa71fe9366a7c74", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a51324607a0ab2cc5dd874787aa71fe9366a7c74", "message": "Use forceCheck flag for members of a structure", "committedDate": "2020-06-15T17:49:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4NjYzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440386630", "bodyText": "Isn't the type an intersection type if the type node is an intersection type node?", "author": "pubudu91", "createdAt": "2020-06-15T19:06:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1552,6 +1564,81 @@ private void defineMembers(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkg\n         }\n     }\n \n+    private void validateReadOnlyIntersectionTypeDefinitions(List<BLangTypeDefinition> typeDefNodes) {\n+        List<BType> loggedTypes = new ArrayList<>();\n+\n+        for (BLangTypeDefinition typeDefNode : typeDefNodes) {\n+            BLangType typeNode = typeDefNode.typeNode;\n+            NodeKind kind = typeNode.getKind();\n+            if (kind == NodeKind.INTERSECTION_TYPE_NODE) {\n+                BType currentType = typeNode.type;\n+\n+                if (currentType.tag != TypeTags.INTERSECTION) {", "originalCommit": "a51324607a0ab2cc5dd874787aa71fe9366a7c74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNjk1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440406955", "bodyText": "This can be symTable.noType if a member type could not be resolved.\ne.g., where Foo is not defined\ntype MyType Foo & readonly;", "author": "MaryamZi", "createdAt": "2020-06-15T19:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4NjYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MjMwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440392305", "bodyText": "If the purpose of the loggedTypes list is to keep track of the already checked types, a Set would be a better option from a performance POV right? And the above can even be written as,\nif (!loggedTypes.add(effectiveType)) {\n    continue;\n}", "author": "pubudu91", "createdAt": "2020-06-15T19:18:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1552,6 +1564,81 @@ private void defineMembers(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkg\n         }\n     }\n \n+    private void validateReadOnlyIntersectionTypeDefinitions(List<BLangTypeDefinition> typeDefNodes) {\n+        List<BType> loggedTypes = new ArrayList<>();\n+\n+        for (BLangTypeDefinition typeDefNode : typeDefNodes) {\n+            BLangType typeNode = typeDefNode.typeNode;\n+            NodeKind kind = typeNode.getKind();\n+            if (kind == NodeKind.INTERSECTION_TYPE_NODE) {\n+                BType currentType = typeNode.type;\n+\n+                if (currentType.tag != TypeTags.INTERSECTION) {\n+                    continue;\n+                }\n+\n+                BIntersectionType intersectionType = (BIntersectionType) currentType;\n+\n+                BType effectiveType = intersectionType.effectiveType;\n+                if (loggedTypes.contains(effectiveType)) {\n+                    continue;\n+                }\n+\n+                loggedTypes.add(effectiveType);", "originalCommit": "a51324607a0ab2cc5dd874787aa71fe9366a7c74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzI0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440407242", "bodyText": "+1, will send a separate PR to fix this.", "author": "MaryamZi", "createdAt": "2020-06-15T19:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MjMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3NjYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r441276613", "bodyText": "Fixed in d964ea0.", "author": "MaryamZi", "createdAt": "2020-06-17T04:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MjMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NTg1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440395852", "bodyText": "When can these types be noType?", "author": "pubudu91", "createdAt": "2020-06-15T19:24:58Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1588,11 +1588,19 @@ private BType computeIntersectionType(BLangIntersectionTypeNode intersectionType\n \n         BLangType bLangTypeOne = constituentTypeNodes.get(0);\n         BType typeOne = resolveTypeNode(bLangTypeOne, env);\n+\n+        if (typeOne == symTable.noType) {", "originalCommit": "a51324607a0ab2cc5dd874787aa71fe9366a7c74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwODY4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24170#discussion_r440408688", "bodyText": "If the member type definition is after intersection type definition, this can happen. It is handled later on via unresolved types.\ntype MyType Foo & readonly;\n\ntype Foo record {\n    int i;\n};", "author": "MaryamZi", "createdAt": "2020-06-15T19:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NTg1Mg=="}], "type": "inlineReview"}]}