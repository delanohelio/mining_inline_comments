{"pr_number": 26637, "pr_title": "Refactor JvmMethodGen class", "pr_createdAt": "2020-10-28T01:23:23Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26637", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NDkzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26637#discussion_r513284932", "bodyText": "since declaration is missing in new classes.", "author": "warunalakshitha", "createdAt": "2020-10-28T09:13:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/JvmMainMethodGen.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen.methodgen;\n+\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmCastGen;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmCodeGenUtil;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmTypeGen;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.AsyncDataCollector;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.BIRVarToJVMIndexMap;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarScope;\n+import org.wso2.ballerinalang.compiler.semantics.model.SymbolTable;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.objectweb.asm.Opcodes.AALOAD;\n+import static org.objectweb.asm.Opcodes.AASTORE;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACONST_NULL;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ANEWARRAY;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.BIPUSH;\n+import static org.objectweb.asm.Opcodes.CHECKCAST;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.ICONST_1;\n+import static org.objectweb.asm.Opcodes.IFNULL;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+\n+/**\n+ * Generates Jvm byte code for the main method.\n+ */", "originalCommit": "ce9be107577c37b0f2f8999aef0bc6ea3360aaf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NzQ3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26637#discussion_r513287470", "bodyText": "\"generateDepModInit\" name is bit confusing. AFAIU this generating default methods like start, init", "author": "warunalakshitha", "createdAt": "2020-10-28T09:17:11Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/JvmInitsGen.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen.methodgen;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmCastGen;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmCodeGenUtil;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.JavaClass;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNonTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.InstructionKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarScope;\n+import org.wso2.ballerinalang.compiler.semantics.model.SymbolTable;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.ballerinalang.model.symbols.SymbolOrigin.VIRTUAL;\n+import static org.objectweb.asm.Opcodes.AALOAD;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACONST_NULL;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.CHECKCAST;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BALLERINA;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BUILT_IN_PACKAGE_NAME;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CREATE_TYPES_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CURRENT_MODULE_INIT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JVM_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_INIT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_INIT_CLASS_NAME;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_START;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.OBJECT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_CLASS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRING_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.VALUE_CREATOR;\n+\n+/**\n+ * Generates Jvm byte code for the init methods.\n+ */\n+public class JvmInitsGen {\n+\n+    private final SymbolTable symbolTable;\n+    private final BUnionType errorOrNilType;\n+    private int nextId = -1;\n+    private int nextVarId = -1;\n+\n+    public JvmInitsGen(SymbolTable symbolTable) {\n+        this.symbolTable = symbolTable;\n+        this.errorOrNilType = BUnionType.create(null, symbolTable.errorType, symbolTable.nilType);\n+    }\n+\n+    /**\n+     * Generate a lambda function to invoke ballerina main.\n+     *\n+     * @param cw        class visitor\n+     * @param pkg       bir package\n+     * @param initClass module init class\n+     * @param depMods   dependent module list\n+     */\n+    public void generateLambdaForPackageInits(ClassWriter cw, BIRNode.BIRPackage pkg, String initClass,\n+                                              List<PackageID> depMods) {\n+        //need to generate lambda for package Init as well, if exist\n+        if (!JvmMethodGenUtils.hasInitFunction(pkg)) {\n+            return;\n+        }\n+        generateLambdaForModuleFunction(cw, MODULE_INIT, initClass);\n+\n+        // generate another lambda for start function as well\n+        generateLambdaForModuleFunction(cw, MODULE_START, initClass);\n+\n+        PackageID currentModId = JvmMethodGenUtils.packageToModuleId(pkg);\n+        String fullFuncName = JvmMethodGenUtils.calculateModuleSpecialFuncName(currentModId,\n+                                                                               JvmMethodGenUtils.STOP_FUNCTION_SUFFIX);\n+\n+        generateLambdaForDepModStopFunc(cw, JvmCodeGenUtil.cleanupFunctionName(fullFuncName), initClass);\n+\n+        for (PackageID id : depMods) {\n+            fullFuncName = JvmMethodGenUtils.calculateModuleSpecialFuncName(id, JvmMethodGenUtils.STOP_FUNCTION_SUFFIX);\n+            String jvmClass = JvmCodeGenUtil.getPackageName(id) + MODULE_INIT_CLASS_NAME;\n+            generateLambdaForDepModStopFunc(cw, JvmCodeGenUtil.cleanupFunctionName(fullFuncName), jvmClass);\n+        }\n+    }\n+\n+    private void generateLambdaForModuleFunction(ClassWriter cw, String funcName, String initClass) {\n+        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC + ACC_STATIC,\n+                                          String.format(\"$lambda$%s$\", funcName),\n+                                          String.format(\"([L%s;)L%s;\", OBJECT, OBJECT), null, null);\n+        mv.visitCode();\n+\n+        //load strand as first arg\n+        mv.visitVarInsn(ALOAD, 0);\n+        mv.visitInsn(ICONST_0);\n+        mv.visitInsn(AALOAD);\n+        mv.visitTypeInsn(CHECKCAST, STRAND_CLASS);\n+\n+        mv.visitMethodInsn(INVOKESTATIC, initClass, funcName, String.format(\"(L%s;)L%s;\", STRAND_CLASS, OBJECT), false);\n+        JvmCastGen.addBoxInsn(mv, errorOrNilType);\n+        JvmMethodGenUtils.visitReturn(mv);\n+    }\n+\n+    private void generateLambdaForDepModStopFunc(ClassWriter cw, String funcName, String initClass) {\n+        MethodVisitor mv;\n+        mv = cw.visitMethod(Opcodes.ACC_PUBLIC + ACC_STATIC,\n+                            String.format(\"$lambda$%s\", funcName),\n+                            String.format(\"([L%s;)L%s;\", OBJECT, OBJECT), null, null);\n+        mv.visitCode();\n+\n+        //load strand as first arg\n+        mv.visitVarInsn(ALOAD, 0);\n+        mv.visitInsn(ICONST_0);\n+        mv.visitInsn(AALOAD);\n+        mv.visitTypeInsn(CHECKCAST, STRAND_CLASS);\n+\n+        mv.visitMethodInsn(INVOKESTATIC, initClass, funcName, String.format(\"(L%s;)L%s;\", STRAND_CLASS, OBJECT), false);\n+        JvmMethodGenUtils.visitReturn(mv);\n+    }\n+\n+    public void generateModuleInitializer(ClassWriter cw, BIRNode.BIRPackage module, String typeOwnerClass) {\n+        // Using object return type since this is similar to a ballerina function without a return.\n+        // A ballerina function with no returns is equivalent to a function with nil-return.\n+        MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_INIT,\n+                                          String.format(\"(L%s;)L%s;\", STRAND_CLASS, OBJECT), null, null);\n+        mv.visitCode();\n+\n+        mv.visitMethodInsn(INVOKESTATIC, typeOwnerClass, CREATE_TYPES_METHOD, \"()V\", false);\n+        mv.visitTypeInsn(NEW, typeOwnerClass);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, typeOwnerClass, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitVarInsn(ASTORE, 1);\n+        mv.visitLdcInsn(module.org.value);\n+        mv.visitLdcInsn(module.name.value);\n+        mv.visitLdcInsn(module.version.value);\n+        mv.visitVarInsn(ALOAD, 1);\n+        mv.visitMethodInsn(INVOKESTATIC, String.format(\"%s\", VALUE_CREATOR), \"addValueCreator\",\n+                           String.format(\"(L%s;L%s;L%s;L%s;)V\", STRING_VALUE, STRING_VALUE, STRING_VALUE,\n+                                         VALUE_CREATOR),\n+                           false);\n+\n+        // Add a nil-return\n+        mv.visitInsn(ACONST_NULL);\n+        JvmMethodGenUtils.visitReturn(mv);\n+    }\n+\n+    public void addInitAndTypeInitInstructions(BIRNode.BIRPackage pkg, BIRNode.BIRFunction func) {\n+        List<BIRNode.BIRBasicBlock> basicBlocks = new ArrayList<>();\n+        nextId = -1;\n+        BIRNode.BIRBasicBlock nextBB = new BIRNode.BIRBasicBlock(getNextBBId());\n+        basicBlocks.add(nextBB);\n+\n+        PackageID modID = JvmMethodGenUtils.packageToModuleId(pkg);\n+\n+        BIRNode.BIRBasicBlock typeOwnerCreateBB = new BIRNode.BIRBasicBlock(getNextBBId());\n+        basicBlocks.add(typeOwnerCreateBB);\n+\n+        nextBB.terminator = new BIRTerminator.Call(null, InstructionKind.CALL, false, modID,\n+                                                   new Name(CURRENT_MODULE_INIT),\n+                                                   new ArrayList<>(), null, typeOwnerCreateBB, Collections.emptyList(),\n+                                                   Collections.emptySet());\n+\n+        if (func.basicBlocks.size() == 0) {\n+            typeOwnerCreateBB.terminator = new BIRTerminator.Return(func.pos);\n+            func.basicBlocks = basicBlocks;\n+            return;\n+        }\n+\n+        typeOwnerCreateBB.terminator = new BIRTerminator.GOTO(null, func.basicBlocks.get(0));\n+\n+        basicBlocks.addAll(func.basicBlocks);\n+        func.basicBlocks = basicBlocks;\n+    }\n+\n+    public void enrichPkgWithInitializers(Map<String, JavaClass> jvmClassMap, String typeOwnerClass,\n+                                          BIRNode.BIRPackage pkg, List<PackageID> moduleImports) {\n+        JavaClass javaClass = jvmClassMap.get(typeOwnerClass);\n+        BIRNode.BIRFunction initFunc = generateDepModInit(moduleImports, pkg, MODULE_INIT,", "originalCommit": "ce9be107577c37b0f2f8999aef0bc6ea3360aaf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzU1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26637#discussion_r513293554", "bodyText": "AFAIK this will gen modulestop method. \"JvmStopMethodGen\" sounds like method to stop the jvm. Shall we remove the JVM prefix( even from other class).  WDYT?", "author": "warunalakshitha", "createdAt": "2020-10-28T09:26:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/JvmStopMethodGen.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen.methodgen;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmCodeGenUtil;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmTypeGen;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.AsyncDataCollector;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.BIRVarToJVMIndexMap;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarScope;\n+import org.wso2.ballerinalang.compiler.semantics.model.SymbolTable;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+\n+import java.util.List;\n+\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACONST_NULL;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ANEWARRAY;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.BIPUSH;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GETFIELD;\n+import static org.objectweb.asm.Opcodes.GETSTATIC;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.ICONST_1;\n+import static org.objectweb.asm.Opcodes.IFEQ;\n+import static org.objectweb.asm.Opcodes.IFNULL;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.objectweb.asm.Opcodes.PUTFIELD;\n+import static org.objectweb.asm.Opcodes.RETURN;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FUTURE_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.HANDLE_STOP_PANIC_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JVM_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_INIT_CLASS_NAME;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_STARTED;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_START_ATTEMPTED;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_STOP;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.OBJECT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.PANIC_FIELD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.RUNTIME_UTILS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.SCHEDULER;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.SCHEDULER_START_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_CLASS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.THROWABLE;\n+\n+/**\n+ * Generates Jvm byte code for the stop method.\n+ */\n+public class JvmStopMethodGen {", "originalCommit": "ce9be107577c37b0f2f8999aef0bc6ea3360aaf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NjMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26637#discussion_r513296337", "bodyText": "Name can be \"InitMethodGen\" to consistant with other method gen class names.", "author": "warunalakshitha", "createdAt": "2020-10-28T09:30:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/methodgen/JvmInitsGen.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen.methodgen;\n+\n+import org.ballerinalang.model.elements.PackageID;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmCastGen;\n+import org.wso2.ballerinalang.compiler.bir.codegen.JvmCodeGenUtil;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.JavaClass;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNonTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.InstructionKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarScope;\n+import org.wso2.ballerinalang.compiler.semantics.model.SymbolTable;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.ballerinalang.model.symbols.SymbolOrigin.VIRTUAL;\n+import static org.objectweb.asm.Opcodes.AALOAD;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+import static org.objectweb.asm.Opcodes.ACONST_NULL;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ASTORE;\n+import static org.objectweb.asm.Opcodes.CHECKCAST;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BALLERINA;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BUILT_IN_PACKAGE_NAME;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CREATE_TYPES_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CURRENT_MODULE_INIT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JVM_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_INIT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_INIT_CLASS_NAME;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MODULE_START;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.OBJECT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_CLASS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRING_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.VALUE_CREATOR;\n+\n+/**\n+ * Generates Jvm byte code for the init methods.\n+ */\n+public class JvmInitsGen {", "originalCommit": "ce9be107577c37b0f2f8999aef0bc6ea3360aaf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "03e17d03acb0a39c1bebe3224ea6d3e73d5ac3f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03e17d03acb0a39c1bebe3224ea6d3e73d5ac3f0", "message": "Refactor generateLambdaMethod\n\nRelated issue https://github.com/ballerina-platform/ballerina-lang/issues/25252", "committedDate": "2020-10-28T12:13:34Z", "type": "commit"}, {"oid": "815383720bc7e38db00809a5f6bf67604af0ed7b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/815383720bc7e38db00809a5f6bf67604af0ed7b", "message": "Move main method generation to new class\n\nMore refactoring by moving the main method generation code to a separate class.", "committedDate": "2020-10-28T12:13:34Z", "type": "commit"}, {"oid": "637216c194556a479f3e29586864eedae94df798", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/637216c194556a479f3e29586864eedae94df798", "message": "Move lambda generation to a new class\n\nMore refactoring by moving the lambda byte code generation code to a separate class.", "committedDate": "2020-10-28T12:13:34Z", "type": "commit"}, {"oid": "9d5e50512154e2bc740254dc8cad1353905fced9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d5e50512154e2bc740254dc8cad1353905fced9", "message": "Move init methods generation to a new class\n\nMore refactoring by moving the init methods generation code to a separate class.", "committedDate": "2020-10-28T12:13:34Z", "type": "commit"}, {"oid": "2390a37553931dfe59b5d4137ba2d5f65049de18", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2390a37553931dfe59b5d4137ba2d5f65049de18", "message": "Move stop method generation to a new class\n\nMore refactoring by moving the stop method generation code to a separate class.", "committedDate": "2020-10-28T12:13:34Z", "type": "commit"}, {"oid": "ad38be37815aa1bca94ed6fee001f797c24081b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad38be37815aa1bca94ed6fee001f797c24081b9", "message": "Refactor method ordering in JvmMethodGen\n\nThis is to acquire good vertical ordering of code.", "committedDate": "2020-10-28T12:13:34Z", "type": "commit"}, {"oid": "3e4304c7b075e8ee29250ca6681375706285a241", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e4304c7b075e8ee29250ca6681375706285a241", "message": "Move MethodGen classes to its own package\n\nThe JvmMethodGen class is broken to multiple classes and moved to its own package.\nRename the classes so that they are no longer prefixed with 'Jvm'", "committedDate": "2020-10-28T12:13:34Z", "type": "commit"}, {"oid": "3e4304c7b075e8ee29250ca6681375706285a241", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e4304c7b075e8ee29250ca6681375706285a241", "message": "Move MethodGen classes to its own package\n\nThe JvmMethodGen class is broken to multiple classes and moved to its own package.\nRename the classes so that they are no longer prefixed with 'Jvm'", "committedDate": "2020-10-28T12:13:34Z", "type": "forcePushed"}]}