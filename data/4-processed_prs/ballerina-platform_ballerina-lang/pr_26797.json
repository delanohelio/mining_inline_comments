{"pr_number": 26797, "pr_title": "Fix ObjectTypeReferenceTest, ObjectEquivalencyTest & ObjectWithPrivateFieldsNegativeTest  for project API jballerina-unit-tests migration", "pr_createdAt": "2020-11-06T09:30:39Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797", "timeline": [{"oid": "958103f8fcad4d81bf9c7c825922a42a79aa705f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/958103f8fcad4d81bf9c7c825922a42a79aa705f", "message": "Fix ObjectEquivalencyTest & ObjectTypeReferenceTest", "committedDate": "2020-11-06T09:27:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NjU3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518696579", "bodyText": "I think these are already included in https://github.com/ballerina-platform/ballerina-lang/pull/26797/files#diff-3835b6074874bfd7bcb2e191247640239cbc9c4546822113a142766502ade096R122", "author": "hemikak", "createdAt": "2020-11-06T11:37:45Z", "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "diffHunk": "@@ -780,27 +776,7 @@\n                     <exclude name=\"testListenerObjectDefinedInDifferentPackage\"/>\n                 </methods>\n             </class>\n-            <class name=\"org.ballerinalang.test.object.ObjectEquivalencyTest\">\n-                <methods>\n-                    <exclude name=\"testEqOfPublicObjects\"/>\n-                    <exclude name=\"testEqOfPublicObjects2\"/>\n-                    <exclude name=\"testEqOfPublicObjectsInBalo\"/>\n-                    <exclude name=\"testEqOfPublicObjectsInSamePackage\"/>\n-                    <exclude name=\"testInherentTypeViolationWithNilType\"/>\n-                    <exclude name=\"testNonPublicTypedescEq\"/>\n-                    <exclude name=\"testObjectAssignabilityBetweenNonClientAndClientObject\"/>\n-                    <exclude name=\"testObjectEqualityWithDefaultConstructor\"/>\n-                    <exclude name=\"testObjectEqualityWithRecursiveTypes\"/>\n-                    <exclude name=\"testObjectEquivalenceWhenFieldsHaveModuleVisibility\"/>\n-                    <exclude name=\"testObjectEquivalenceWhenFieldsHavePublicVisibility\"/>\n-                    <exclude name=\"testObjectEquivalencyWithArguments\"/>\n-                    <exclude name=\"testObjectMemberOrder\"/>\n-                    <exclude name=\"testRuntimeEqPublicObjects\"/>\n-                    <exclude name=\"testRuntimeEqPublicObjects1\"/>\n-                    <exclude name=\"testSubtypingBetweenNonClientAndClientObject\"/>\n-                    <exclude name=\"testTupleMatchWithObjectEquivalency\"/>\n-                </methods>\n-            </class>\n+            <class name=\"org.ballerinalang.test.object.ObjectEquivalencyTest\"/>", "originalCommit": "958103f8fcad4d81bf9c7c825922a42a79aa705f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMDUwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518700501", "bodyText": "Removed", "author": "pramodya1994", "createdAt": "2020-11-06T11:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NjU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NjYxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518696614", "bodyText": "I think these are already included in https://github.com/ballerina-platform/ballerina-lang/pull/26797/files#diff-3835b6074874bfd7bcb2e191247640239cbc9c4546822113a142766502ade096R122", "author": "hemikak", "createdAt": "2020-11-06T11:37:49Z", "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "diffHunk": "@@ -252,11 +252,7 @@\n                     <exclude name=\"testAnonStructAsStructField\"/>\n                 </methods>\n             </class>\n-            <class name=\"org.ballerinalang.test.object.ObjectTypeReferenceTest\">\n-                <methods>\n-                    <exclude name=\"testInvalidTypeReferenceAcrossModules\"/>\n-                </methods>\n-            </class>\n+            <class name=\"org.ballerinalang.test.object.ObjectTypeReferenceTest\"/>", "originalCommit": "958103f8fcad4d81bf9c7c825922a42a79aa705f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMDU3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518700570", "bodyText": "Removed", "author": "pramodya1994", "createdAt": "2020-11-06T11:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY5NjYxNA=="}], "type": "inlineReview"}, {"oid": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f466743d749339e7e4bfeb67ffd1d87d058786d4", "message": "Fix ObjectWithPrivateFieldsNegativeTestwq", "committedDate": "2020-11-06T11:44:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzA3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518703075", "bodyText": "Shall we remove this line ?", "author": "hemikak", "createdAt": "2020-11-06T11:51:36Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/object/ObjectEquivalencyTest.java", "diffHunk": "@@ -37,7 +37,7 @@\n     public void setup() {\n \n //        compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\", \"ObjectEquivalencyTest\");", "originalCommit": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzExOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518703118", "bodyText": "Shall we remove this line ?", "author": "hemikak", "createdAt": "2020-11-06T11:51:39Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/object/ObjectTypeReferenceTest.java", "diffHunk": "@@ -259,7 +259,7 @@ public void testTypeReferencedFunctionImplementation() {\n     @Test\n     public void testInvalidTypeReferenceAcrossModules() {\n //        CompileResult result = BCompileUtil.compile(\"test-src/object/ObjectProject\", \"object_reference_negative\");", "originalCommit": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518703339", "bodyText": "Shall we remove this line ?", "author": "hemikak", "createdAt": "2020-11-06T11:52:05Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/object/ObjectWithPrivateFieldsNegativeTest.java", "diffHunk": "@@ -35,31 +35,29 @@ public void testRuntimeObjEqNegative() {\n \n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\",\n //                \"object-private-fields-01-negative\");", "originalCommit": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzM4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518703386", "bodyText": "Shall we remove this line ?", "author": "hemikak", "createdAt": "2020-11-06T11:52:10Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/object/ObjectWithPrivateFieldsNegativeTest.java", "diffHunk": "@@ -35,31 +35,29 @@ public void testRuntimeObjEqNegative() {\n \n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\",\n //                \"object-private-fields-01-negative\");\n-        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject/object-private-fields-01\" +\n-                \"-negative\");\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/RuntimeObjEgNegativeProject\");\n         BValue[] returns = BRunUtil.invoke(compileResult, \"testRuntimeObjEqNegative\");\n \n         Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types:\" +\n-                \" 'org.foo:user' cannot be cast to 'object-private-fields-01-negative:userB'\\\"}\");\n+                \" 'pkg.org_foo:user' cannot be cast to 'pkg:userB'\\\"}\");\n     }\n \n     @Test(description = \"Test private field access\")\n     public void testPrivateFieldAccess() {\n \n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\",\n //                \"object-private-fields-02-negative\");", "originalCommit": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzQyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518703427", "bodyText": "Shall we remove this line ?", "author": "hemikak", "createdAt": "2020-11-06T11:52:15Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/object/ObjectWithPrivateFieldsNegativeTest.java", "diffHunk": "@@ -35,31 +35,29 @@ public void testRuntimeObjEqNegative() {\n \n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\",\n //                \"object-private-fields-01-negative\");\n-        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject/object-private-fields-01\" +\n-                \"-negative\");\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/RuntimeObjEgNegativeProject\");\n         BValue[] returns = BRunUtil.invoke(compileResult, \"testRuntimeObjEqNegative\");\n \n         Assert.assertEquals(returns[0].stringValue(), \"{ballerina}TypeCastError {\\\"message\\\":\\\"incompatible types:\" +\n-                \" 'org.foo:user' cannot be cast to 'object-private-fields-01-negative:userB'\\\"}\");\n+                \" 'pkg.org_foo:user' cannot be cast to 'pkg:userB'\\\"}\");\n     }\n \n     @Test(description = \"Test private field access\")\n     public void testPrivateFieldAccess() {\n \n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\",\n //                \"object-private-fields-02-negative\");\n-        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject/object-private-fields-02\" +\n-                \"-negative\");\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/PrivateFieldsAccessProject\");\n \n         BAssertUtil.validateError(compileResult, 0, \"attempt to refer to non-accessible symbol 'ssn'\", 7, 18);\n-        BAssertUtil.validateError(compileResult, 1, \"undefined field 'ssn' in object 'testorg/org.foo:1.0.0:person'\",\n+        BAssertUtil.validateError(compileResult, 1, \"undefined field 'ssn' in object 'test/pkg.org_foo:1.0.0:person'\",\n                 7, 20);\n     }\n \n     @Test(description = \"Test private object access in public functions\")\n     public void testPrivateObjAccess1() {\n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\", \"private-field1\");", "originalCommit": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzQ2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518703464", "bodyText": "Shall we remove this line ?", "author": "hemikak", "createdAt": "2020-11-06T11:52:19Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/object/ObjectWithPrivateFieldsNegativeTest.java", "diffHunk": "@@ -75,7 +73,8 @@ public void testPrivateObjAccess1() {\n     @Test(description = \"Test private object access in public functions\")\n     public void testPrivateObjAccess1SemanticsNegative() {\n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\", \"private-field1.sn\");", "originalCommit": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzU1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26797#discussion_r518703552", "bodyText": "Shall we remove this line ?", "author": "hemikak", "createdAt": "2020-11-06T11:52:32Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/object/ObjectWithPrivateFieldsNegativeTest.java", "diffHunk": "@@ -94,20 +93,21 @@ public void testPrivateObjAccess1SemanticsNegative() {\n     @Test(description = \"Test private object access in public functions\")\n     public void testPrivateObjAccess2() {\n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\", \"private-field2\");\n-        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject/private-field2\");\n+        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/PrivateObjAccess2Project\");\n \n         Assert.assertEquals(compileResult.getErrorCount(), 2);\n         String expectedErrMsg1 = \"attempt to refer to non-accessible symbol \";\n         int i = 0;\n         BAssertUtil.validateError(compileResult, i++, expectedErrMsg1 + \"'address'\", 10, 13);\n         BAssertUtil.validateError(compileResult, i,\n-                \"undefined field 'address' in object 'testorg/org.foo.baz:1.0.0:FooEmployee'\", 10, 18);\n+                \"undefined field 'address' in object 'test/pkg.org_foo_baz:1.0.0:FooEmployee'\", 10, 18);\n     }\n \n     @Test(description = \"Test private object access in public functions\")\n     public void testPrivateObjAccess2SemanticsNegative() {\n //        CompileResult compileResult = BCompileUtil.compile(\"test-src/object/ObjectProject\", \"private-field2.sn\");", "originalCommit": "f466743d749339e7e4bfeb67ffd1d87d058786d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}