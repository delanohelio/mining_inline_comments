{"pr_number": 22060, "pr_title": "Use ballerina module run approach for single bal files", "pr_createdAt": "2020-03-22T18:20:26Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMjM1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060#discussion_r396202359", "bodyText": "Better to use comments to describe what we do here and the reason behind to always add all the jars inside /bre/lib for single bal file scenario :)", "author": "NipunaRanasinghe", "createdAt": "2020-03-23T03:57:26Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -158,49 +148,15 @@ private void runGeneratedExecutable(BLangPackage executableModule, BuildContext\n         }\n     }\n \n-    /**\n-     * Run an executable that is generated from 'run bal' command.\n-     *\n-     * @param executableModule The module to run.\n-     */\n-    private void runGeneratedExecutableWithSameClassLoader(BLangPackage executableModule, BuildContext buildContext) {\n-\n-        ExecutableJar executableJar = buildContext.moduleDependencyPathMap.get(executableModule.packageID);\n-        String initClassName = BFileUtil.getQualifiedClassName(executableModule.packageID.orgName.value,\n-                executableModule.packageID.name.value,\n-                MODULE_INIT_CLASS_NAME);\n-        try {\n-            URL[] urls = new URL[executableJar.moduleLibs.size() + 1];\n-            urls[0] = buildContext.getJarPathFromTargetCache(executableModule.packageID).toUri().toURL();\n-            int i = 1;\n-            for (Path platformLib : executableJar.moduleLibs) {\n-                urls[i++] = platformLib.toUri().toURL();\n-            }\n-            URLClassLoader classLoader = new URLClassLoader(urls);\n-            Class<?> initClazz = classLoader.loadClass(initClassName);\n-            Method mainMethod = initClazz.getDeclaredMethod(JAVA_MAIN, String[].class);\n-            mainMethod.invoke(null, (Object) this.args);\n-            if (!initClazz.getField(\"serviceEPAvailable\").getBoolean(initClazz)) {\n-                Runtime.getRuntime().exit(0);\n-            }\n-        } catch (MalformedURLException e) {\n-            throw createLauncherException(\"loading jar file failed with given source path \" + this.executableJarPath);\n-        } catch (ClassNotFoundException e) {\n-            throw createLauncherException(\"module init class with name \" + initClassName + \" cannot be found \");\n-        } catch (NoSuchMethodException e) {\n-            throw createLauncherException(\"main method cannot be found for init class \" + initClassName);\n-        } catch (IllegalAccessException | IllegalArgumentException e) {\n-            throw createLauncherException(\"invoking main method failed due to \" + e.getMessage());\n-        } catch (InvocationTargetException | NoSuchFieldException e) {\n-            throw createLauncherException(\"invoking main method failed due to \", e.getCause());\n-        }\n-    }\n-\n     private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {\n         StringJoiner cp = new StringJoiner(File.pathSeparator);\n         // Adds executable thin jar path.\n         cp.add(this.executableJarPath.toString());\n         // Adds all the dependency paths.\n+        if (buildContext.getSourceType() == SINGLE_BAL_FILE) {\n+            cp.add(System.getProperty(BALLERINA_HOME) + \"/bre/lib/*\");\n+            return cp.toString();", "originalCommit": "cd89b93eee6b12198f48a9a524dec1c75ef52862", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzMDczNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060#discussion_r396230734", "bodyText": "Shall we use   String balHomePath = buildContext.get(BuildContextField.HOME_REPO).toString() for getting ballerina home as we did in other tasks", "author": "warunalakshitha", "createdAt": "2020-03-23T06:15:44Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -158,49 +148,17 @@ private void runGeneratedExecutable(BLangPackage executableModule, BuildContext\n         }\n     }\n \n-    /**\n-     * Run an executable that is generated from 'run bal' command.\n-     *\n-     * @param executableModule The module to run.\n-     */\n-    private void runGeneratedExecutableWithSameClassLoader(BLangPackage executableModule, BuildContext buildContext) {\n-\n-        ExecutableJar executableJar = buildContext.moduleDependencyPathMap.get(executableModule.packageID);\n-        String initClassName = BFileUtil.getQualifiedClassName(executableModule.packageID.orgName.value,\n-                executableModule.packageID.name.value,\n-                MODULE_INIT_CLASS_NAME);\n-        try {\n-            URL[] urls = new URL[executableJar.moduleLibs.size() + 1];\n-            urls[0] = buildContext.getJarPathFromTargetCache(executableModule.packageID).toUri().toURL();\n-            int i = 1;\n-            for (Path platformLib : executableJar.moduleLibs) {\n-                urls[i++] = platformLib.toUri().toURL();\n-            }\n-            URLClassLoader classLoader = new URLClassLoader(urls);\n-            Class<?> initClazz = classLoader.loadClass(initClassName);\n-            Method mainMethod = initClazz.getDeclaredMethod(JAVA_MAIN, String[].class);\n-            mainMethod.invoke(null, (Object) this.args);\n-            if (!initClazz.getField(\"serviceEPAvailable\").getBoolean(initClazz)) {\n-                Runtime.getRuntime().exit(0);\n-            }\n-        } catch (MalformedURLException e) {\n-            throw createLauncherException(\"loading jar file failed with given source path \" + this.executableJarPath);\n-        } catch (ClassNotFoundException e) {\n-            throw createLauncherException(\"module init class with name \" + initClassName + \" cannot be found \");\n-        } catch (NoSuchMethodException e) {\n-            throw createLauncherException(\"main method cannot be found for init class \" + initClassName);\n-        } catch (IllegalAccessException | IllegalArgumentException e) {\n-            throw createLauncherException(\"invoking main method failed due to \" + e.getMessage());\n-        } catch (InvocationTargetException | NoSuchFieldException e) {\n-            throw createLauncherException(\"invoking main method failed due to \", e.getCause());\n-        }\n-    }\n-\n     private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {\n         StringJoiner cp = new StringJoiner(File.pathSeparator);\n         // Adds executable thin jar path.\n         cp.add(this.executableJarPath.toString());\n-        // Adds all the dependency paths.\n+        if (buildContext.getSourceType() == SINGLE_BAL_FILE) {\n+            // Adds '<ballerina-home>/bre/lib/*' to the class-path since we need to have ballerina runtime\n+            // related dependencies when running single bal files.\n+            cp.add(System.getProperty(BALLERINA_HOME) + \"/bre/lib/*\");", "originalCommit": "35e8c7bf86ba58077b5fec2f819d67f10f174f51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzMTMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060#discussion_r396231339", "bodyText": "Shall we make this method to get the parameters instead of calculating inside method which would be more clear.\nex. getAllClassPaths(BLangPackage executableModule, boolean isSingleFileContext, String ballerinaHome)", "author": "warunalakshitha", "createdAt": "2020-03-23T06:18:01Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -158,49 +148,17 @@ private void runGeneratedExecutable(BLangPackage executableModule, BuildContext\n         }\n     }\n \n-    /**\n-     * Run an executable that is generated from 'run bal' command.\n-     *\n-     * @param executableModule The module to run.\n-     */\n-    private void runGeneratedExecutableWithSameClassLoader(BLangPackage executableModule, BuildContext buildContext) {\n-\n-        ExecutableJar executableJar = buildContext.moduleDependencyPathMap.get(executableModule.packageID);\n-        String initClassName = BFileUtil.getQualifiedClassName(executableModule.packageID.orgName.value,\n-                executableModule.packageID.name.value,\n-                MODULE_INIT_CLASS_NAME);\n-        try {\n-            URL[] urls = new URL[executableJar.moduleLibs.size() + 1];\n-            urls[0] = buildContext.getJarPathFromTargetCache(executableModule.packageID).toUri().toURL();\n-            int i = 1;\n-            for (Path platformLib : executableJar.moduleLibs) {\n-                urls[i++] = platformLib.toUri().toURL();\n-            }\n-            URLClassLoader classLoader = new URLClassLoader(urls);\n-            Class<?> initClazz = classLoader.loadClass(initClassName);\n-            Method mainMethod = initClazz.getDeclaredMethod(JAVA_MAIN, String[].class);\n-            mainMethod.invoke(null, (Object) this.args);\n-            if (!initClazz.getField(\"serviceEPAvailable\").getBoolean(initClazz)) {\n-                Runtime.getRuntime().exit(0);\n-            }\n-        } catch (MalformedURLException e) {\n-            throw createLauncherException(\"loading jar file failed with given source path \" + this.executableJarPath);\n-        } catch (ClassNotFoundException e) {\n-            throw createLauncherException(\"module init class with name \" + initClassName + \" cannot be found \");\n-        } catch (NoSuchMethodException e) {\n-            throw createLauncherException(\"main method cannot be found for init class \" + initClassName);\n-        } catch (IllegalAccessException | IllegalArgumentException e) {\n-            throw createLauncherException(\"invoking main method failed due to \" + e.getMessage());\n-        } catch (InvocationTargetException | NoSuchFieldException e) {\n-            throw createLauncherException(\"invoking main method failed due to \", e.getCause());\n-        }\n-    }\n-\n     private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {", "originalCommit": "35e8c7bf86ba58077b5fec2f819d67f10f174f51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI3MjYzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060#discussion_r396272639", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String getAllClassPaths(BLangPackage executableModule, boolean isSingleFileContext,\n          \n          \n            \n                                                BuildContext buildContext) {\n          \n          \n            \n                private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {", "author": "warunalakshitha", "createdAt": "2020-03-23T08:16:36Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -158,49 +148,18 @@ private void runGeneratedExecutable(BLangPackage executableModule, BuildContext\n         }\n     }\n \n-    /**\n-     * Run an executable that is generated from 'run bal' command.\n-     *\n-     * @param executableModule The module to run.\n-     */\n-    private void runGeneratedExecutableWithSameClassLoader(BLangPackage executableModule, BuildContext buildContext) {\n-\n-        ExecutableJar executableJar = buildContext.moduleDependencyPathMap.get(executableModule.packageID);\n-        String initClassName = BFileUtil.getQualifiedClassName(executableModule.packageID.orgName.value,\n-                executableModule.packageID.name.value,\n-                MODULE_INIT_CLASS_NAME);\n-        try {\n-            URL[] urls = new URL[executableJar.moduleLibs.size() + 1];\n-            urls[0] = buildContext.getJarPathFromTargetCache(executableModule.packageID).toUri().toURL();\n-            int i = 1;\n-            for (Path platformLib : executableJar.moduleLibs) {\n-                urls[i++] = platformLib.toUri().toURL();\n-            }\n-            URLClassLoader classLoader = new URLClassLoader(urls);\n-            Class<?> initClazz = classLoader.loadClass(initClassName);\n-            Method mainMethod = initClazz.getDeclaredMethod(JAVA_MAIN, String[].class);\n-            mainMethod.invoke(null, (Object) this.args);\n-            if (!initClazz.getField(\"serviceEPAvailable\").getBoolean(initClazz)) {\n-                Runtime.getRuntime().exit(0);\n-            }\n-        } catch (MalformedURLException e) {\n-            throw createLauncherException(\"loading jar file failed with given source path \" + this.executableJarPath);\n-        } catch (ClassNotFoundException e) {\n-            throw createLauncherException(\"module init class with name \" + initClassName + \" cannot be found \");\n-        } catch (NoSuchMethodException e) {\n-            throw createLauncherException(\"main method cannot be found for init class \" + initClassName);\n-        } catch (IllegalAccessException | IllegalArgumentException e) {\n-            throw createLauncherException(\"invoking main method failed due to \" + e.getMessage());\n-        } catch (InvocationTargetException | NoSuchFieldException e) {\n-            throw createLauncherException(\"invoking main method failed due to \", e.getCause());\n-        }\n-    }\n-\n-    private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {\n+    private String getAllClassPaths(BLangPackage executableModule, boolean isSingleFileContext,\n+                                    BuildContext buildContext) {", "originalCommit": "f4c8f4ee2639b0bc77e38ee1444bc53f831a1cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI3Mjg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060#discussion_r396272870", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isSingleFileContext) {\n          \n          \n            \n                    if (buildContext.getSourceType().equals(SINGLE_BAL_FILE)) {", "author": "warunalakshitha", "createdAt": "2020-03-23T08:17:07Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -158,49 +148,18 @@ private void runGeneratedExecutable(BLangPackage executableModule, BuildContext\n         }\n     }\n \n-    /**\n-     * Run an executable that is generated from 'run bal' command.\n-     *\n-     * @param executableModule The module to run.\n-     */\n-    private void runGeneratedExecutableWithSameClassLoader(BLangPackage executableModule, BuildContext buildContext) {\n-\n-        ExecutableJar executableJar = buildContext.moduleDependencyPathMap.get(executableModule.packageID);\n-        String initClassName = BFileUtil.getQualifiedClassName(executableModule.packageID.orgName.value,\n-                executableModule.packageID.name.value,\n-                MODULE_INIT_CLASS_NAME);\n-        try {\n-            URL[] urls = new URL[executableJar.moduleLibs.size() + 1];\n-            urls[0] = buildContext.getJarPathFromTargetCache(executableModule.packageID).toUri().toURL();\n-            int i = 1;\n-            for (Path platformLib : executableJar.moduleLibs) {\n-                urls[i++] = platformLib.toUri().toURL();\n-            }\n-            URLClassLoader classLoader = new URLClassLoader(urls);\n-            Class<?> initClazz = classLoader.loadClass(initClassName);\n-            Method mainMethod = initClazz.getDeclaredMethod(JAVA_MAIN, String[].class);\n-            mainMethod.invoke(null, (Object) this.args);\n-            if (!initClazz.getField(\"serviceEPAvailable\").getBoolean(initClazz)) {\n-                Runtime.getRuntime().exit(0);\n-            }\n-        } catch (MalformedURLException e) {\n-            throw createLauncherException(\"loading jar file failed with given source path \" + this.executableJarPath);\n-        } catch (ClassNotFoundException e) {\n-            throw createLauncherException(\"module init class with name \" + initClassName + \" cannot be found \");\n-        } catch (NoSuchMethodException e) {\n-            throw createLauncherException(\"main method cannot be found for init class \" + initClassName);\n-        } catch (IllegalAccessException | IllegalArgumentException e) {\n-            throw createLauncherException(\"invoking main method failed due to \" + e.getMessage());\n-        } catch (InvocationTargetException | NoSuchFieldException e) {\n-            throw createLauncherException(\"invoking main method failed due to \", e.getCause());\n-        }\n-    }\n-\n-    private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {\n+    private String getAllClassPaths(BLangPackage executableModule, boolean isSingleFileContext,\n+                                    BuildContext buildContext) {\n         StringJoiner cp = new StringJoiner(File.pathSeparator);\n         // Adds executable thin jar path.\n         cp.add(this.executableJarPath.toString());\n-        // Adds all the dependency paths.\n+        if (isSingleFileContext) {", "originalCommit": "f4c8f4ee2639b0bc77e38ee1444bc53f831a1cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI3Mjk4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060#discussion_r396272981", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        commands.add(getAllClassPaths(executableModule, isSingleFileContext, buildContext));\n          \n          \n            \n                        commands.add(getAllClassPaths(executableModule, buildContext));", "author": "warunalakshitha", "createdAt": "2020-03-23T08:17:23Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -138,12 +127,13 @@ private void runGeneratedExecutable(BLangPackage executableModule, BuildContext\n \n         String initClassName = BFileUtil.getQualifiedClassName(executableModule.packageID.orgName.value,\n                 executableModule.packageID.name.value, MODULE_INIT_CLASS_NAME);\n+        boolean isSingleFileContext = buildContext.getSourceType().equals(SINGLE_BAL_FILE);\n         try {\n             List<String> commands = new ArrayList<>();\n             commands.add(\"java\");\n             // Sets classpath with executable thin jar and all dependency jar paths.\n             commands.add(\"-cp\");\n-            commands.add(getAllClassPaths(executableModule, buildContext));\n+            commands.add(getAllClassPaths(executableModule, isSingleFileContext, buildContext));", "originalCommit": "f4c8f4ee2639b0bc77e38ee1444bc53f831a1cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI3MzExMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22060#discussion_r396273113", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean isSingleFileContext = buildContext.getSourceType().equals(SINGLE_BAL_FILE);", "author": "warunalakshitha", "createdAt": "2020-03-23T08:17:40Z", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -138,12 +127,13 @@ private void runGeneratedExecutable(BLangPackage executableModule, BuildContext\n \n         String initClassName = BFileUtil.getQualifiedClassName(executableModule.packageID.orgName.value,\n                 executableModule.packageID.name.value, MODULE_INIT_CLASS_NAME);\n+        boolean isSingleFileContext = buildContext.getSourceType().equals(SINGLE_BAL_FILE);", "originalCommit": "f4c8f4ee2639b0bc77e38ee1444bc53f831a1cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f0437f28b317dea624dad1a640302dee3d9e683a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0437f28b317dea624dad1a640302dee3d9e683a", "message": "Use process builder approach for single bal files", "committedDate": "2020-03-23T10:42:35Z", "type": "commit"}, {"oid": "95f58cfac3d2c04a79066c74842b8e3bef264ab2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95f58cfac3d2c04a79066c74842b8e3bef264ab2", "message": "Merge https://github.com/ballerina-platform/ballerina-lang into fix-22002-stage", "committedDate": "2020-03-23T10:42:52Z", "type": "commit"}]}