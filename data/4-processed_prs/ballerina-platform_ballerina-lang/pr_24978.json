{"pr_number": 24978, "pr_title": "Enable read and write IO APIs to a properties file", "pr_createdAt": "2020-07-28T11:47:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3MzQxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461573415", "bodyText": "We can move doc comments to align with the function now. The issue we had earlier is now fixed", "author": "daneshk", "createdAt": "2020-07-28T13:20:41Z", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -64,6 +64,26 @@ public type ReadableCharacterChannel object {\n         return readXmlExtern(self);\n     }\n \n+# Reads a property from a .properties file.\n+# ```ballerina\n+# string|io:Error result = readableCharChannel.readProperty(key);\n+# ```\n+# + key - The property key needs to read.\n+# + return - The read property value or else an `io:Error`", "originalCommit": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2ODU3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461868577", "bodyText": "Fixed in 53413b5", "author": "BuddhiWathsala", "createdAt": "2020-07-28T20:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3MzQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NDk4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461574989", "bodyText": "Let's say I have to read 2 properties file in single ballerina code. Due to this only the first reader will be successful isn't it? We have to load properties every time from the reader.", "author": "niveathika", "createdAt": "2020-07-28T13:22:53Z", "path": "stdlib/io/src/main/java/org/ballerinalang/stdlib/io/utils/PropertyUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.io.utils;\n+\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+import org.ballerinalang.jvm.values.MappingInitialValueEntry;\n+import org.ballerinalang.jvm.values.api.BMap;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+/**\n+ * The utility class used to execute read/write operations to a property file.\n+ *\n+ */\n+public class PropertyUtils {\n+    private static final Logger log = LoggerFactory.getLogger(PropertyUtils.class);\n+    private static final BMapType mapType = new BMapType(BTypes.typeString);\n+    private static Properties properties = null;", "originalCommit": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5ODI2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461698261", "bodyText": "No, when I test it is the other way around. Actually I added this to solve the problem that you mentioned. For example, once we read we cannot use the reader once, it is not reusable. This won't be a problem in other APIs since they read only once. From, this we store the properties statically and reuse again when we needed.", "author": "BuddhiWathsala", "createdAt": "2020-07-28T16:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NDk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1NDQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462054402", "bodyText": "Here we are not reading the properties from the same file. If we try to read 2 different files, this will read only from one of this since the Properties is a static variable.", "author": "niveathika", "createdAt": "2020-07-29T05:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NDk4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMTM0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462201348", "bodyText": "Fixed in fe3ba68", "author": "BuddhiWathsala", "createdAt": "2020-07-29T10:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NDk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NzIwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461577207", "bodyText": "Remove log", "author": "niveathika", "createdAt": "2020-07-28T13:26:05Z", "path": "stdlib/io/src/main/java/org/ballerinalang/stdlib/io/utils/PropertyUtils.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.io.utils;\n+\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+import org.ballerinalang.jvm.values.MappingInitialValueEntry;\n+import org.ballerinalang.jvm.values.api.BMap;\n+import org.ballerinalang.jvm.values.api.BString;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+/**\n+ * The utility class used to execute read/write operations to a property file.\n+ *\n+ */\n+public class PropertyUtils {\n+    private static final Logger log = LoggerFactory.getLogger(PropertyUtils.class);\n+    private static final BMapType mapType = new BMapType(BTypes.typeString);\n+    private static Properties properties = null;\n+\n+    // Read a property related to a given key and return the BString value.\n+    public static BString readProperty(Reader reader, BString key) throws IOException {\n+        if (properties == null) {\n+            properties = new Properties();\n+            properties.load(reader);\n+        }\n+        return org.ballerinalang.jvm.StringUtils.fromString(properties.getProperty(key.getValue()));\n+    }\n+\n+    // Read all properties and return as a ballerina map\n+    public static MapValue<BString, BString> readAllProperties(Reader reader) throws IOException {\n+        if (properties == null) {\n+            properties = new Properties();\n+            properties.load(reader);\n+        }\n+        MappingInitialValueEntry.KeyValueEntry[] keyValues = new MappingInitialValueEntry\n+                .KeyValueEntry[properties.stringPropertyNames().size()];\n+        int i = 0;\n+        for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {\n+            String key = (String) e.nextElement();\n+            String value = properties.getProperty(key);\n+            MappingInitialValueEntry.KeyValueEntry keyValue = new MappingInitialValueEntry.KeyValueEntry(\n+                    StringUtils.fromString(key), StringUtils.fromString(value));\n+            keyValues[i] = keyValue;\n+            i++;\n+        }\n+        return new MapValueImpl<>(mapType, keyValues);\n+    }\n+\n+    // Generate writable string content to a property file using a given map.\n+    public static String getWritablePropertyContent(BMap<BString, BString> propertiesMap) {\n+        Set<Map.Entry<BString, BString>> propertiesSet = propertiesMap.entrySet();\n+        Iterator<Map.Entry<BString, BString>> iterator = propertiesSet.iterator();\n+        String content = \"\";\n+        while (iterator.hasNext()) {\n+            Map.Entry<BString, BString> entry = iterator.next();\n+            content = content +\n+                   entry.getKey().getValue() + \"=\" + entry.getValue().getValue() + \"\\n\";\n+        }\n+        log.info(content);", "originalCommit": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2ODc1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461868758", "bodyText": "Fixed in 775ccc6", "author": "BuddhiWathsala", "createdAt": "2020-07-28T20:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3NzIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3OTA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461579046", "bodyText": "Shall we include default value too? If not nil this will return the default value in case property is not set in the file.", "author": "niveathika", "createdAt": "2020-07-28T13:28:42Z", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -64,6 +64,26 @@ public type ReadableCharacterChannel object {\n         return readXmlExtern(self);\n     }\n \n+# Reads a property from a .properties file.\n+# ```ballerina\n+# string|io:Error result = readableCharChannel.readProperty(key);\n+# ```\n+# + key - The property key needs to read.\n+# + return - The read property value or else an `io:Error`\n+    public function readProperty(string key) returns @tainted string|Error {", "originalCommit": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2OTQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461869432", "bodyText": "Enable return () when the key-value pair is not available. Fixed in 69ad640", "author": "BuddhiWathsala", "createdAt": "2020-07-28T20:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3OTA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1NDY3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462054678", "bodyText": "What I mean was to tweak the API as,\npublic function readProperty(string key, string defaultValue) returns @tainted string?|Error {", "author": "niveathika", "createdAt": "2020-07-29T05:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3OTA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIwMTUxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462201519", "bodyText": "Fixed in here d2062dc", "author": "BuddhiWathsala", "createdAt": "2020-07-29T10:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3OTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4MzYxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461583616", "bodyText": "Any reason to write properties using custom content rather than using Properties.store()", "author": "niveathika", "createdAt": "2020-07-28T13:34:47Z", "path": "stdlib/io/src/main/java/org/ballerinalang/stdlib/io/nativeimpl/CharacterChannelUtils.java", "diffHunk": "@@ -146,4 +168,16 @@ public static Object writeXml(ObjectValue characterChannelObj, XMLValue content)\n         }\n         return null;\n     }\n+\n+    public static Object writeProperties(ObjectValue characterChannelObj, BMap<BString, BString> propertyMap) {\n+        try {\n+            CharacterChannel characterChannel = (CharacterChannel) characterChannelObj\n+                    .getNativeData(CHARACTER_CHANNEL_NAME);\n+            String content = PropertyUtils.getWritablePropertyContent(propertyMap);\n+            IOUtils.writeFull(characterChannel, content);", "originalCommit": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3MDEwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461870104", "bodyText": "Fixed in 61d9daa. Both are quite same, here I changed it to store() since we need to add comments if needed, as specified in the Java store() function.", "author": "BuddhiWathsala", "createdAt": "2020-07-28T20:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4MzYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NDA0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461584048", "bodyText": "Comments can be aligned properly now. The issue with the doc is fixed.", "author": "niveathika", "createdAt": "2020-07-28T13:35:20Z", "path": "stdlib/io/src/main/ballerina/src/io/readable_character_channel.bal", "diffHunk": "@@ -64,6 +64,26 @@ public type ReadableCharacterChannel object {\n         return readXmlExtern(self);\n     }\n \n+# Reads a property from a .properties file.\n+# ```ballerina\n+# string|io:Error result = readableCharChannel.readProperty(key);\n+# ```\n+# + key - The property key needs to read.\n+# + return - The read property value or else an `io:Error`\n+    public function readProperty(string key) returns @tainted string|Error {\n+        return readPropertyExtern(self, key);\n+    }\n+\n+# Reads all properties from a .properties file.", "originalCommit": "b2a33f9a6cff54c25f7d83766cfed8d56ded7cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2ODQxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r461868415", "bodyText": "Fixed in 53413b5", "author": "BuddhiWathsala", "createdAt": "2020-07-28T20:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NDA0OA=="}], "type": "inlineReview"}, {"oid": "f88a789ab5ed7de828b16fe62483e93dc68ddb40", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f88a789ab5ed7de828b16fe62483e93dc68ddb40", "message": "enable tests for read/write properties", "committedDate": "2020-07-28T19:18:38Z", "type": "forcePushed"}, {"oid": "7eae9a467332264d96abf876f12cdb5dec5e275c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7eae9a467332264d96abf876f12cdb5dec5e275c", "message": "update tests with default value", "committedDate": "2020-07-29T10:30:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNTM0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462815348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (result is string) {\n          \n          \n            \n                        return result;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return result;\n          \n          \n            \n                    }\n          \n          \n            \n                    return result;", "author": "niveathika", "createdAt": "2020-07-30T07:52:57Z", "path": "stdlib/io/src/test/resources/test-src/io/char_io.bal", "diffHunk": "@@ -130,6 +130,61 @@ function readXml() returns @tainted xml|error {\n     return e;\n }\n \n+function readAvailableProperty(string key) returns @tainted string?|error {\n+    var rCha = rch;\n+    if(rCha is io:ReadableCharacterChannel) {\n+        var result = rCha.readProperty(key);\n+        if (result is string) {\n+            return result;\n+        } else {\n+            return result;\n+        }", "originalCommit": "7eae9a467332264d96abf876f12cdb5dec5e275c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNzE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24978#discussion_r462817158", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + comments - The comments to be added to the file.\n          \n          \n            \n                # + comment - Comment describing the property list\n          \n      \n    \n    \n  \n\nChange in the api too", "author": "niveathika", "createdAt": "2020-07-30T07:56:06Z", "path": "stdlib/io/src/main/ballerina/src/io/writable_character_channel.bal", "diffHunk": "@@ -32,46 +32,57 @@ public type WritableCharacterChannel object {\n         initWritableCharacterChannel(self, bChannel, charset);\n     }\n \n-# Writes a given sequence of characters (string).\n-# ```ballerina\n-# int|io:Error result = writableCharChannel.write(\"Content\", 0);\n-# ```\n-#\n-# + content - Content, which should be written\n-# + startOffset - Number of characters, which should be offset when writing the content\n-# + return - Content length that written or else `io:Error`\n+    # Writes a given sequence of characters (string).\n+    # ```ballerina\n+    # int|io:Error result = writableCharChannel.write(\"Content\", 0);\n+    # ```\n+    #\n+    # + content - Content, which should be written\n+    # + startOffset - Number of characters, which should be offset when writing the content\n+    # + return - Content length that written or else `io:Error`\n     public function write(string content, int startOffset) returns int|Error {\n         return writeExtern(self, content, startOffset);\n     }\n \n-# Writes a given JSON to the given channel.\n-# ```ballerina\n-# io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n-# ```\n-#\n-# + content - The JSON, which should be written\n-# + return - If an `io:Error` occurred while writing\n+    # Writes a given JSON to the given channel.\n+    # ```ballerina\n+    # io:Error? err = writableCharChannel.writeJson(inputJson, 0);\n+    # ```\n+    #\n+    # + content - The JSON, which should be written\n+    # + return - If an `io:Error` occurred while writing\n     public function writeJson(json content) returns Error? {\n         return writeJsonExtern(self, content);\n     }\n \n-# Writes a given XML to the channel.\n-# ```ballerina\n-# io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n-# ```\n-# \n-# + content - The XML, which should be written\n-# + return - `()` or else `io:Error` if any error occurred\n+    # Writes a given XML to the channel.\n+    # ```ballerina\n+    # io:Error? err = writableCharChannel.writeXml(inputXml, 0);\n+    # ```\n+    #\n+    # + content - The XML, which should be written\n+    # + return - `()` or else `io:Error` if any error occurred\n     public function writeXml(xml content) returns Error? {\n         return writeXmlExtern(self, content);\n     }\n \n-# Closes a given `WritableCharacterChannel` channel.\n-# ```ballerina\n-# io:Error err = writableCharChannel.close();\n-# ```\n-#\n-# + return - `()` or else an `io:Error` if any error occurred\n+    # Writes a given key-valued pair `map<string>` to a property file.\n+    # ```ballerina\n+    # io:Error? err = writableCharChannel.writeProperties(properties);\n+    # ```\n+    # + properties - The map<string> that contains keys and values.\n+    # + comments - The comments to be added to the file.", "originalCommit": "7eae9a467332264d96abf876f12cdb5dec5e275c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a049ed9eebce67cb1c929a1c282c403dafbcf130", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a049ed9eebce67cb1c929a1c282c403dafbcf130", "message": "Minor improvements to the IO test and API doc", "committedDate": "2020-07-30T08:18:46Z", "type": "forcePushed"}, {"oid": "b963c08db5ff03986129160e50ad1f6d24df3662", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b963c08db5ff03986129160e50ad1f6d24df3662", "message": "Add test for property read and write", "committedDate": "2020-07-30T08:39:54Z", "type": "forcePushed"}, {"oid": "b6cdce0427a4eb57d56230a51b76e75d9dcd54cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6cdce0427a4eb57d56230a51b76e75d9dcd54cb", "message": "Rename comments parameter", "committedDate": "2020-07-30T09:50:25Z", "type": "forcePushed"}, {"oid": "3a3cc99f7e6e0008912c08b853f9f806806eac55", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a3cc99f7e6e0008912c08b853f9f806806eac55", "message": "Add util functions for property read/write", "committedDate": "2020-07-31T07:34:40Z", "type": "commit"}, {"oid": "f20a12a90622cf7ff61db9b72b3ff5fc25098629", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f20a12a90622cf7ff61db9b72b3ff5fc25098629", "message": "Enable property read/write interop functions", "committedDate": "2020-07-31T07:34:41Z", "type": "commit"}, {"oid": "ad07182e23a6120b349ce6fe97f00e36bf6ab2ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad07182e23a6120b349ce6fe97f00e36bf6ab2ee", "message": "Enable property read APIs and fix doc comments", "committedDate": "2020-07-31T07:34:41Z", "type": "commit"}, {"oid": "e5220fa560db2066cd1502645568d23ee895b211", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5220fa560db2066cd1502645568d23ee895b211", "message": "Enable property write APIs and fix doc comments", "committedDate": "2020-07-31T07:34:41Z", "type": "commit"}, {"oid": "a31abbe5423a5596f290fb9987468209edef5914", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a31abbe5423a5596f290fb9987468209edef5914", "message": "Add test properties file", "committedDate": "2020-07-31T07:34:41Z", "type": "commit"}, {"oid": "d1c2ca837b747a775476278bc0f69c74e0180b9e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1c2ca837b747a775476278bc0f69c74e0180b9e", "message": "Add test for property read and write", "committedDate": "2020-07-31T07:34:41Z", "type": "commit"}, {"oid": "e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "message": "Rename comments parameter", "committedDate": "2020-07-31T07:34:41Z", "type": "commit"}, {"oid": "e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8e0ee9e79c437c4b8f3e3ed63ab6f7eefd896be", "message": "Rename comments parameter", "committedDate": "2020-07-31T07:34:41Z", "type": "forcePushed"}]}