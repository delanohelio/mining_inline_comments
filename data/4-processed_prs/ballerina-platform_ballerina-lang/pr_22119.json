{"pr_number": 22119, "pr_title": "Fixes issue in handling error for streams with query expressions", "pr_createdAt": "2020-03-23T19:43:40Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119", "timeline": [{"oid": "1f8934698e6e1089983e0aea983071ebc0191390", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f8934698e6e1089983e0aea983071ebc0191390", "message": "Make errorType a local var", "committedDate": "2020-03-24T06:30:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMDMzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r397730334", "bodyText": "Shall we replace this with push()?", "author": "gimantha", "createdAt": "2020-03-25T09:56:51Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -96,78 +106,123 @@ public static QueryDesugar getInstance(CompilerContext context) {\n         return desugar;\n     }\n \n+    // Create While statement\n+    //\n+    // Below query expression :\n+    //    Person[]|error? outputDataArray = from var person in personList\n+    //                                        select person;\n+    //\n+    // changes as,\n+    //    Employee[]|error? outputDataArray = ();\n+    //    Employee[] $tempDataArray$ = [];\n+    //\n+    //    Person[] $data$ = personList;\n+    //    abstract object {public function next() returns record {|Person value;|}? $iterator$ = $data$.iterator();\n+    //    record {|Person value;|}|error? $result$ = $iterator$.next();\n+    //\n+    //    while (true) {\n+    //        if ($result$ is ()) {\n+    //            break;\n+    //        } else if ($result$ is error) {\n+    //            outputDataArray = $result$;\n+    //            break;\n+    //        } else {\n+    //            var $value$ = $result$.value;\n+    //        }\n+    //        $result$ = $iterator$.next();\n+    //    }\n+    //\n+    //    if (outputDataArray is ()) {\n+    //        outputDataArray = tempDataArray;\n+    //    }\n     BLangStatementExpression desugarQueryExpr(BLangQueryExpr queryExpr, SymbolEnv env) {\n+        this.env = env;\n         List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n         BLangFromClause fromClause = fromClauseList.get(0);\n         BLangSelectClause selectClause = queryExpr.selectClause;\n         List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n         List<BLangLetClause> letClauseList = queryExpr.letClausesList;\n         DiagnosticPos pos = fromClause.pos;\n+        parentBlock = ASTBuilderUtil.createBlockStmt(fromClause.pos);\n \n-        // Create Foreach statement\n-        //\n-        // Below query expression :\n-        //      from var person in personList\n-        //\n-        // changes as,\n-        //      foreach var person in personList {\n-        //          ....\n-        //      }\n-        BLangForeach leafForeach = buildFromClauseBlock(fromClauseList);\n-        BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n-\n+        // Create output data array variable\n+        // Person[]|error ? $outputDataArray$ = ();\n         BArrayType outputArrayType = new BArrayType(selectClause.expression.type);\n-        BLangListConstructorExpr emptyArrayExpr = ASTBuilderUtil.createEmptyArrayLiteral(pos,\n-                outputArrayType);\n-        BVarSymbol emptyArrayVarSymbol = new BVarSymbol(0, new Name(\"$outputDataArray$\"),\n-                env.scope.owner.pkgID, outputArrayType, env.scope.owner);\n+        BType outputUnionType = BUnionType.create(null, symTable.errorType, outputArrayType);\n+        BLangLiteral nillLiteral = ASTBuilderUtil.createLiteral(fromClause.pos, symTable.nilType,\n+                null);\n+        BVarSymbol outputArrayVarSymbol = new BVarSymbol(0, new Name(\"$outputDataArray$\"),\n+                env.scope.owner.pkgID, outputUnionType, env.scope.owner);\n         BLangSimpleVariable outputArrayVariable =\n-                ASTBuilderUtil.createVariable(pos, \"$outputDataArray$\", outputArrayType,\n-                        emptyArrayExpr, emptyArrayVarSymbol);\n-\n-        // Create temp array variable\n-        //      Person[] x = [];\n-\n+                ASTBuilderUtil.createVariable(pos, \"$outputDataArray$\", outputUnionType,\n+                        nillLiteral, outputArrayVarSymbol);\n         BLangSimpleVariableDef outputVariableDef =\n                 ASTBuilderUtil.createVariableDef(pos, outputArrayVariable);\n         BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputArrayVariable.symbol);\n \n+        // Create temp array variable\n+        // Person[] $tempDataArray$ = [];\n+        BVarSymbol tempArrayVarSymbol = new BVarSymbol(0, new Name(\"$tempDataArray$\"),\n+                env.scope.owner.pkgID, outputArrayType, env.scope.owner);\n+        BLangListConstructorExpr emptyArrayExpr = ASTBuilderUtil.createEmptyArrayLiteral(pos,\n+                outputArrayType);\n+        BLangSimpleVariable tempArrayVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$tempDataArray$\", outputArrayType,\n+                        emptyArrayExpr, tempArrayVarSymbol);\n+        BLangSimpleVariableDef tempArrayVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, tempArrayVariable);\n+        BLangSimpleVarRef tempArrayVarRef = ASTBuilderUtil.createVariableRef(pos, tempArrayVariable.symbol);\n+\n+        parentBlock.addStatement(outputVariableDef);\n+        parentBlock.addStatement(tempArrayVariableDef);\n+\n+        BLangBlockStmt leafElseBlock = buildFromClauseBlock(fromClauseList, outputVarRef);\n+\n         // Create indexed based access expression statement\n-        //      x[x.length()] = {\n+        //      $tempDataArray$[$tempDataArray$.length()] = {\n         //         firstName: person.firstName,\n         //         lastName: person.lastName\n         //      };\n-\n-        BLangInvocation lengthInvocation = createLengthInvocation(selectClause.pos, outputArrayVariable.symbol);\n-        lengthInvocation.expr = outputVarRef;\n-        BLangIndexBasedAccess indexAccessExpr = ASTBuilderUtil.createIndexAccessExpr(outputVarRef, lengthInvocation);\n+        BLangInvocation lengthInvocation = createLengthInvocation(selectClause.pos, tempArrayVariable.symbol);", "originalCommit": "d82f216373af17fc2868db927c8f111d74de4391", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczODY3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r397738672", "bodyText": "check the tag instead of using instance of", "author": "gimantha", "createdAt": "2020-03-25T10:10:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2824,10 +2826,32 @@ public void visit(BLangQueryExpr queryExpr) {\n         BType expSelectType = expType;\n         if (expType.tag == TypeTags.ARRAY) {\n             expSelectType = ((BArrayType) expType).eType;\n-        }\n+        } else if (expType.tag == TypeTags.UNION) {\n+            Set<BType> memTypes = ((BUnionType) expType).getMemberTypes();\n \n+            LinkedHashSet<BType> nilRemovedSet = new LinkedHashSet<>();\n+            for (BType bType : memTypes) {\n+                if (bType.tag != symTable.nilType.tag && bType.tag != symTable.errorType.tag) {\n+                    nilRemovedSet.add(bType);\n+                }\n+            }\n+            expSelectType = nilRemovedSet.size() == 1 ? nilRemovedSet.iterator().next() :\n+                    BUnionType.create(null, nilRemovedSet);\n+            if (expSelectType.tag == TypeTags.ARRAY) {\n+                expSelectType = ((BArrayType) expSelectType).eType;\n+            }\n+        }\n         BType selectType = checkExpr(selectClause.expression, whereEnv, expSelectType);\n-        resultType = selectType == symTable.semanticError ? selectType : new BArrayType(selectType);\n+        BType actualType = new BArrayType(selectType);\n+        if ((collectionNode instanceof BLangSimpleVarRef) &&", "originalCommit": "d82f216373af17fc2868db927c8f111d74de4391", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczOTA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r397739081", "bodyText": "check the type tag instead of instanceof", "author": "gimantha", "createdAt": "2020-03-25T10:11:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2824,10 +2826,32 @@ public void visit(BLangQueryExpr queryExpr) {\n         BType expSelectType = expType;\n         if (expType.tag == TypeTags.ARRAY) {\n             expSelectType = ((BArrayType) expType).eType;\n-        }\n+        } else if (expType.tag == TypeTags.UNION) {\n+            Set<BType> memTypes = ((BUnionType) expType).getMemberTypes();\n \n+            LinkedHashSet<BType> nilRemovedSet = new LinkedHashSet<>();\n+            for (BType bType : memTypes) {\n+                if (bType.tag != symTable.nilType.tag && bType.tag != symTable.errorType.tag) {\n+                    nilRemovedSet.add(bType);\n+                }\n+            }\n+            expSelectType = nilRemovedSet.size() == 1 ? nilRemovedSet.iterator().next() :\n+                    BUnionType.create(null, nilRemovedSet);\n+            if (expSelectType.tag == TypeTags.ARRAY) {\n+                expSelectType = ((BArrayType) expSelectType).eType;\n+            }\n+        }\n         BType selectType = checkExpr(selectClause.expression, whereEnv, expSelectType);\n-        resultType = selectType == symTable.semanticError ? selectType : new BArrayType(selectType);\n+        BType actualType = new BArrayType(selectType);\n+        if ((collectionNode instanceof BLangSimpleVarRef) &&\n+                (((BLangSimpleVarRef) collectionNode).type instanceof BStreamType)) {", "originalCommit": "d82f216373af17fc2868db927c8f111d74de4391", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "27593539de284575d23d33c2806756d9623e56d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27593539de284575d23d33c2806756d9623e56d2", "message": "Initial desugar from clause to while", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "cdbc5b127322f6b790d3f648633ec8b4796b4d3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cdbc5b127322f6b790d3f648633ec8b4796b4d3d", "message": "Support let and where clasues within desugared while", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "40dcf1bb71b1939fafabeea63750c360c0bfaf31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40dcf1bb71b1939fafabeea63750c360c0bfaf31", "message": "Add multiple from clause support with while desugar", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "8a3d12eaf0a90982f2bcbd4510f407673511de99", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a3d12eaf0a90982f2bcbd4510f407673511de99", "message": "Break while loops when an error is already caught", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "99ec22f42ab9daf5487c2b43aa3ad81e10ddadb1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/99ec22f42ab9daf5487c2b43aa3ad81e10ddadb1", "message": "Desugar query action as while statements", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "b0563a52a8a0b41cdda33279298322af11ecd4ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0563a52a8a0b41cdda33279298322af11ecd4ef", "message": "Use union type for output type", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "66cfd1cc622614c01ea63ce6e98af0b6b7d06127", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66cfd1cc622614c01ea63ce6e98af0b6b7d06127", "message": "Improve type checker to handle union types with query exp", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "a97a4b740a07fc97d1839bf4b271134654f93f3c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a97a4b740a07fc97d1839bf4b271134654f93f3c", "message": "Use type of checked expr within union result", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "ce92d910565db82f5aa97545ea24344f1e202fae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce92d910565db82f5aa97545ea24344f1e202fae", "message": "Add tests for using query expressions with streams", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "524ab137813ba3febf150c4b00d176dd65de777d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/524ab137813ba3febf150c4b00d176dd65de777d", "message": "Refactor from clause desugaring to while", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "f2f8898ba386d107decd991dc1f3ac7b2ccd1011", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2f8898ba386d107decd991dc1f3ac7b2ccd1011", "message": "Re-enable disabled query tests", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "099e17692929c338b33080fb9de85dbc46a4816a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/099e17692929c338b33080fb9de85dbc46a4816a", "message": "Make errorType a local var", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "f0db591d767847466039372daee5706cefb1442f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0db591d767847466039372daee5706cefb1442f", "message": "Separate XMLConstants from previous imports", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "6325d117e62dabfab44c3d6e9c4c9268019878a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6325d117e62dabfab44c3d6e9c4c9268019878a4", "message": "Add creating statements as comments", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "1cf5d587d84293317f3af2127278d5c72f4e8d0f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1cf5d587d84293317f3af2127278d5c72f4e8d0f", "message": "Improve query exp type checking", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "453197d47a9c3a56f057e60ffd58c0dcb291f0d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/453197d47a9c3a56f057e60ffd58c0dcb291f0d1", "message": "Use type checked result in query exp desugar", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "message": "Remove unused imports", "committedDate": "2020-03-31T08:16:53Z", "type": "commit"}, {"oid": "bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "message": "Remove unused imports", "committedDate": "2020-03-31T08:16:53Z", "type": "forcePushed"}, {"oid": "f61b4f2729dcb2a06f1681777d5132753080328c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f61b4f2729dcb2a06f1681777d5132753080328c", "message": "Use select and collection types to infer LHS type when it's Var type", "committedDate": "2020-03-31T09:45:13Z", "type": "commit"}, {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a", "message": "Add query expression test with iterable object", "committedDate": "2020-03-31T10:08:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NDMwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400844306", "bodyText": "What will happen if we remove the cast  ?", "author": "gimantha", "createdAt": "2020-03-31T11:39:54Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-defined-type.bal", "diffHunk": "@@ -151,16 +174,16 @@ function testFilteringNullElements() returns Person[] {\n     return outputPersonList;\n }\n \n-function testMapWithArity () returns string[] {\n-    map<any> m = {a:\"1A\", b:\"2B\", c:\"3C\", d:\"4D\"};\n+function testMapWithArity() returns string[] {\n+    map<any> m = {a: \"1A\", b: \"2B\", c: \"3C\", d: \"4D\"};\n     string[] val = from var v in m\n                    where <string> v == \"1A\"", "originalCommit": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg1NTIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400855221", "bodyText": "it will throw error since map is any type map. Isn't that expected?", "author": "pcnfernando", "createdAt": "2020-03-31T11:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NDMwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MzYzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400863635", "bodyText": "It is a compile time error. (i.e, operator '==' not defined for 'any' and 'string')", "author": "mohanvive", "createdAt": "2020-03-31T12:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NDMwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2Nzg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400867867", "bodyText": "sorry, just now saw. That is an expected case.", "author": "mohanvive", "createdAt": "2020-03-31T12:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NDMwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2OTYwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400869606", "bodyText": "ah yes.. sorry didnt see that m is a map", "author": "gimantha", "createdAt": "2020-03-31T12:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NDMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NTY2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400845669", "bodyText": "What will happen if the iterator object next method does not return an error but the stream has the errorType as the completionType?", "author": "gimantha", "createdAt": "2020-03-31T11:42:23Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-var-type.bal", "diffHunk": "@@ -217,5 +228,15 @@ function testQueryExpressionWithSpreadOperatorV2() returns Teacher[]{\n                    teacherId: \"TER1200\"\n             };\n \n-    return  outputPersonList;\n+    return outputPersonList;\n+}\n+\n+public function testQueryWithStream() returns int[]|error {\n+    NumberGenerator numGen = new;\n+    var numberStream = new stream<int, error>(numGen);", "originalCommit": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3MjU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400872581", "bodyText": "It passes without throwing any error", "author": "pcnfernando", "createdAt": "2020-03-31T12:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NTY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NjY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400846693", "bodyText": "Shall we add another test for iterable which returns an error as well?", "author": "gimantha", "createdAt": "2020-03-31T11:44:10Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/query-exp-iterable-objects.bal", "diffHunk": "@@ -0,0 +1,61 @@\n+type Iterable object {", "originalCommit": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1224adc2df8f95cfe19d7cbfc3512d3eb3803f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1224adc2df8f95cfe19d7cbfc3512d3eb3803f0", "message": "Update enclosed type within error nill lifted union type", "committedDate": "2020-03-31T11:58:22Z", "type": "commit"}, {"oid": "70c68adb87317325ed5b6e8ea93dd9e3fb7b2dd1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70c68adb87317325ed5b6e8ea93dd9e3fb7b2dd1", "message": "Add test for iterable object with error", "committedDate": "2020-03-31T12:56:23Z", "type": "commit"}, {"oid": "996549e2a6b6315cb70f188be4f53c3e68456592", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/996549e2a6b6315cb70f188be4f53c3e68456592", "message": "Return immediately when semantic error is found", "committedDate": "2020-03-31T17:11:07Z", "type": "commit"}]}