{"pr_number": 25118, "pr_title": "Improve query-expr and query-action parsing", "pr_createdAt": "2020-08-04T03:53:32Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25118", "timeline": [{"oid": "a12e2afb6acdf5e9f55cbfedd4e29b3e70a278b3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a12e2afb6acdf5e9f55cbfedd4e29b3e70a278b3", "message": "Improve query expr parsing", "committedDate": "2020-07-30T10:36:16Z", "type": "commit"}, {"oid": "640daa2127e0999711ed9a89277ee958b7d00348", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/640daa2127e0999711ed9a89277ee958b7d00348", "message": "Add on-conflict and limit clause recovery support", "committedDate": "2020-07-31T03:08:11Z", "type": "commit"}, {"oid": "e30a7cdb84f75598c59ce02317281b5504944aa2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e30a7cdb84f75598c59ce02317281b5504944aa2", "message": "Add join clause recovery support", "committedDate": "2020-07-31T19:11:30Z", "type": "commit"}, {"oid": "988e47bbe8d67d29aa3aaf16a2ff22ec300a5179", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/988e47bbe8d67d29aa3aaf16a2ff22ec300a5179", "message": "Add query expr test cases", "committedDate": "2020-07-31T19:18:27Z", "type": "commit"}, {"oid": "38c2690502bc598ef208b38ad847d8abc262dc41", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38c2690502bc598ef208b38ad847d8abc262dc41", "message": "Improve query action parsing", "committedDate": "2020-08-01T13:13:04Z", "type": "commit"}, {"oid": "109b16dd8b76c2f50b1a254c8d36a08576f7c1a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/109b16dd8b76c2f50b1a254c8d36a08576f7c1a7", "message": "Refactor code", "committedDate": "2020-08-04T04:42:28Z", "type": "commit"}, {"oid": "fe8e85ac6729ccb4d48dcd28a2e8bb9c9eb0328b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe8e85ac6729ccb4d48dcd28a2e8bb9c9eb0328b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into improve-query\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "committedDate": "2020-08-04T05:11:45Z", "type": "commit"}, {"oid": "e3825b1b06b6eeae5bd86bd8007cd29ad76790bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3825b1b06b6eeae5bd86bd8007cd29ad76790bb", "message": "Add missing resume point", "committedDate": "2020-08-04T05:16:14Z", "type": "commit"}, {"oid": "6ed32005b128bd3274eb061a9fdee1587dc2ff04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ed32005b128bd3274eb061a9fdee1587dc2ff04", "message": "Update assertion for upstream change in INVALID_NODE_MINUTIAE of leading minutiae", "committedDate": "2020-08-04T05:27:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgxMDQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25118#discussion_r464810414", "bodyText": "join-on-condition := on expression equals expression from spec is parsed as on-clause := on expression.\ni.e. we parse the equals keyword implicitly.\n\n\nequals operator was added to error handler as well since it is already supported in the parser.\nThere's no such operator in the spec though.", "author": "lochana-chathura", "createdAt": "2020-08-04T05:37:22Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10918,6 +10818,8 @@ private STNode parseJoinClause(boolean isRhsExpr) {\n      */\n     private STNode parseOnClause(boolean isRhsExpr) {\n         STNode onKeyword = parseOnKeyword();\n+        // note that parsing expression includes following.\n+        // equals-expr := expression `equals` expression\n         STNode expression = parseExpression(OperatorPrecedence.QUERY, isRhsExpr, false);", "originalCommit": "6ed32005b128bd3274eb061a9fdee1587dc2ff04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32dadcec78637a693a297a853d1ea1872d1068b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32dadcec78637a693a297a853d1ea1872d1068b7", "message": "Refactor code", "committedDate": "2020-08-04T06:39:03Z", "type": "commit"}, {"oid": "32dadcec78637a693a297a853d1ea1872d1068b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32dadcec78637a693a297a853d1ea1872d1068b7", "message": "Refactor code", "committedDate": "2020-08-04T06:39:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMDA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25118#discussion_r464830081", "bodyText": "Wouldn't we need this?\nFor eg: In case when theres an additional token after the order-keys, but not one of the \"EndOfOrderKeys\" tokens ..?", "author": "SupunS", "createdAt": "2020-08-04T06:35:51Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -10693,13 +10630,10 @@ private STNode parseOrderKeyList(boolean isRhsExpr) {\n \n         // Parse the remaining order keys\n         nextToken = peek();\n-        STNode orderKeyListMemberEnd;\n+        STNode leadingComma;\n         while (!isEndOfOrderKeys(nextToken.kind)) {\n-            orderKeyListMemberEnd = parseOrderKeyListMemberEnd();\n-            if (orderKeyListMemberEnd == null) {\n-                break;\n-            }", "originalCommit": "6ed32005b128bd3274eb061a9fdee1587dc2ff04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0ODM2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25118#discussion_r464848365", "bodyText": "private boolean isEndOfOrderKeys(SyntaxKind tokenKind) {\n        switch (tokenKind) {\n            case COMMA_TOKEN:\n            case ASCENDING_KEYWORD:\n            case DESCENDING_KEYWORD:\n                return false;\n            default:\n                return !isTypeStartingToken(tokenKind);\n        }\n    }\nIf there's an additional token and not one of end of order keys it should be one of following.\n\ncomma token - recover with missing identifer(expr)\nascending/ descending token - recover with missing comma, missing identifier(expr)\ntype start token - it is considered as an expr\n\nCan there be any other case?", "author": "lochana-chathura", "createdAt": "2020-08-04T07:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMDA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3MTM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25118#discussion_r465071395", "bodyText": "Not all type-starting-tokens are expressions..\nI was thinking, we can terminate if the next token is an end of order keys for sure. If not, try to parse the \"parseOrderKeyListMemberEnd\" and let the error recovery handle whether to terminate or continue.. WDYT?", "author": "SupunS", "createdAt": "2020-08-04T14:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMDA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4MDAxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25118#discussion_r465480015", "bodyText": "yea. that's better. Fixed in a434d8b", "author": "lochana-chathura", "createdAt": "2020-08-05T05:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMDA4MQ=="}], "type": "inlineReview"}, {"oid": "a434d8b5c1ae6c2c20602d22c780e5e66327feab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a434d8b5c1ae6c2c20602d22c780e5e66327feab", "message": "Add review changes", "committedDate": "2020-08-05T05:22:25Z", "type": "commit"}]}