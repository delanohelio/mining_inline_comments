{"pr_number": 22548, "pr_title": "Fix API Docs in crypto module", "pr_createdAt": "2020-04-09T12:29:13Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548", "timeline": [{"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "message": "Fix API Docs in crypto module", "committedDate": "2020-04-09T12:26:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:15:04Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzMxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913316", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDY2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194662", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:15:21Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzM2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913366", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDc0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:15:28Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzQzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913430", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDgyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194825", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:15:36Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzQ3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913475", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDkyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194924", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:15:44Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913526", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195027", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:15:55Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzYxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913619", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTA5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195096", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:02Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzY3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913679", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195177", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:09Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzc0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913747", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTI0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195241", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:17Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzc4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913787", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTMwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195304", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:23Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzgzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913832", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTQxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195419", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the private key or `crypto:Error` if private key was unreadable\n          \n          \n            \n            # + return - Reference to the private key or `crypto:Error` if private key was unreadable\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:33Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha512Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha512Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Read a private key from the provided PKCS#12 archive file.\n+# ```ballerina crypto:PrivateKey|crypto:Error privateKey = crypto:decodePrivateKey(keyStore, keyAlias, keyPassword); ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n # + keyPassword - Key password\n-# + return - Reference to the private key or `Error` if private key was unreadable\n+# + return - Reference to the private key or `crypto:Error` if private key was unreadable", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzkxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913916", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTUxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195519", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the public key or `crypto:Error` if private key was unreadable\n          \n          \n            \n            # + return - Reference to the public key or `crypto:Error` if private key was unreadable\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:41Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -345,10 +367,11 @@ function externDecodePrivateKey(KeyStore|TrustStore keyStore, handle keyAlias, h\n } external;\n \n # Read a public key from the provided PKCS#12 archive file.\n+# ```ballerina crypto:PublicKey|crypto:Error publicKey = crypto:decodePublicKey(keyStore, keyAlias); ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n-# + return - Reference to the public key or `Error` if private key was unreadable\n+# + return - Reference to the public key or `crypto:Error` if private key was unreadable", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzk3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913971", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTU5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195596", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:48Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -360,11 +383,12 @@ function externDecodePublicKey(KeyStore|TrustStore keyStore, handle keyAlias)\n } external;\n \n # Returns RSA encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptRsaEcb(cipherText, publicKey); ```\n #\n # + input - The content to be encrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDA0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914040", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTY4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:16:55Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -377,12 +401,13 @@ function externEncryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesCbc(cipherText, key, initVector); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDA3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914079", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:17:03Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -393,11 +418,12 @@ function externEncryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesEcb(cipherText, key); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDE0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914141", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:17:12Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -408,13 +434,14 @@ function externEncryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesGcm(cipherText, key, initVector); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDE3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914175", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTg5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:17:18Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -428,11 +455,12 @@ function externEncryptAesGcm(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns RSA decrypted value for the given RSA encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptRsaEcb(cipherText, privateKey); ```\n #\n # + input - The content to be decrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDIyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914225", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:47:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:17:26Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -445,12 +473,13 @@ function externDecryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC decrypted value for the given AES CBC encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesCbc(cipherText, key, initVector); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDI1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914259", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196064", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:17:33Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -461,11 +490,12 @@ function externDecryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB decrypted value for the given AES ECB encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesEcb(cipherText, key); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDI5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914292", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjE5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196191", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "author": "praneesha", "createdAt": "2020-04-09T13:17:44Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -476,13 +506,14 @@ function externDecryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM decrypted value for the given AES GCM encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesGcm(cipherText, key, initVector); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDMzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914338", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-04-10T19:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjQ2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Signing input value using different signature algorithms, \n          \n          \n            \n                 // Signing the input value using different signature algorithms", "author": "praneesha", "createdAt": "2020-04-09T13:18:08Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -115,23 +113,23 @@ public function main() returns error? {\n          password: \"ballerina\"\n      };\n      crypto:PrivateKey privateKey = \n-        check crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n+        checkpanic crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n \n      // Signing input value using different signature algorithms, ", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjYzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196638", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using RSA ECB PKCS1 padding.", "author": "praneesha", "createdAt": "2020-04-09T13:18:24Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -158,26 +156,26 @@ public function main() returns error? {\n \n     // Public key used for encryption.\n     crypto:PublicKey publicKey = \n-        check crypto:decodePublicKey(keyStore, \"ballerina\");\n+        checkpanic crypto:decodePublicKey(keyStore, \"ballerina\");\n \n     // Private key used for decryption.\n     crypto:PrivateKey privateKey = \n-        check crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n+        checkpanic crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n \n     // Encrypt and decrypt input value using RSA ECB PKCS1 padding.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5Njc0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using \n          \n          \n            \n                // Encrypt and decrypt the input values using", "author": "praneesha", "createdAt": "2020-04-09T13:18:35Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -158,26 +156,26 @@ public function main() returns error? {\n \n     // Public key used for encryption.\n     crypto:PublicKey publicKey = \n-        check crypto:decodePublicKey(keyStore, \"ballerina\");\n+        checkpanic crypto:decodePublicKey(keyStore, \"ballerina\");\n \n     // Private key used for decryption.\n     crypto:PrivateKey privateKey = \n-        check crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n+        checkpanic crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n \n     // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n-    byte[] output = check crypto:encryptRsaEcb(inputArr, publicKey);\n-    output = check crypto:decryptRsaEcb(output, privateKey);\n+    byte[] output = checkpanic crypto:encryptRsaEcb(inputArr, publicKey);\n+    output = checkpanic crypto:decryptRsaEcb(output, privateKey);\n     io:println(\"RSA ECB PKCS1 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using ", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5Njk1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES CBC PKCS5 padding.", "author": "praneesha", "createdAt": "2020-04-09T13:18:54Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzEwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES CBC no padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES CBC no padding.", "author": "praneesha", "createdAt": "2020-04-09T13:19:06Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197213", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES GCM PKCS5 padding.", "author": "praneesha", "createdAt": "2020-04-09T13:19:14Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzMwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197305", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES GCM no padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES GCM no padding.", "author": "praneesha", "createdAt": "2020-04-09T13:19:24Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr);\n     io:println(\"AES GCM PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM no padding.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzQzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197435", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES ECB PKCS5 padding.", "author": "praneesha", "createdAt": "2020-04-09T13:19:35Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr);\n     io:println(\"AES GCM PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM no padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES GCM no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES ECB PKCS5 padding.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzUxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197515", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES ECB no padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES ECB no padding.", "author": "praneesha", "createdAt": "2020-04-09T13:19:43Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr);\n     io:println(\"AES GCM PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM no padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES GCM no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n-    output = check crypto:encryptAesEcb(inputArr, keyArr);\n-    output = check crypto:decryptAesEcb(output, keyArr);\n+    output = checkpanic crypto:encryptAesEcb(inputArr, keyArr);\n+    output = checkpanic crypto:decryptAesEcb(output, keyArr);\n     io:println(\"AES ECB PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES ECB no padding.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzYxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The key algorithms supported by crypto module.\n          \n          \n            \n            # The key algorithms supported by the Crypto module.", "author": "praneesha", "createdAt": "2020-04-09T13:19:53Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -20,7 +20,7 @@ import ballerina/java;\n # The key algorithms supported by crypto module.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzcyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197729", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Padding algorithms supported with AES encryption and decryption.\n          \n          \n            \n            # Padding algorithms supported by AES encryption and decryption.", "author": "praneesha", "createdAt": "2020-04-09T13:20:03Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -20,7 +20,7 @@ import ballerina/java;\n # The key algorithms supported by crypto module.\n public type KeyAlgorithm RSA;\n \n-# The `RSA` algorithm\n+# The `RSA` algorithm.\n public const RSA = \"RSA\";\n \n # Padding algorithms supported with AES encryption and decryption.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5ODA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406198046", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns Hex encoded CRC32B value for the provided element.\n          \n          \n            \n            # Returns Hex-encoded CRC32B value for the provided element.", "author": "praneesha", "createdAt": "2020-04-09T13:20:35Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -205,6 +215,7 @@ public function hmacSha512(byte[] input, byte[] key) returns byte[] = @java:Meth\n } external;\n \n # Returns Hex encoded CRC32B value for the provided element.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5ODE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406198183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-MD5 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-MD5 based signature value for the given data.", "author": "praneesha", "createdAt": "2020-04-09T13:20:48Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMTYxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406211611", "bodyText": "I think we need remove this section and point it to the BBE as per the guideline.", "author": "ldclakmal", "createdAt": "2020-04-09T13:40:07Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -1,5 +1,3 @@\n-## Module overview\n-\n This module provides the necessary utilities that are required to hash content using different hashing mechanisms and algorithms. \n \n ## Samples", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDU0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914540", "bodyText": "Removed and pointed to the BBE.", "author": "Maninda", "createdAt": "2020-04-10T19:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406212339", "bodyText": "Shall we use the following pattern as discussed?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # ```ballerina byte[] hash = crypto:hashMd5(data); ```\n          \n          \n            \n            # ```ballerina\n          \n          \n            \n            # byte[] hash = crypto:hashMd5(data);", "author": "ldclakmal", "createdAt": "2020-04-09T13:41:12Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -110,6 +110,7 @@ public type Certificate record {|\n |};\n \n # Returns the MD5 hash of the given data.\n+# ```ballerina byte[] hash = crypto:hashMd5(data); ```", "originalCommit": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDY4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914680", "bodyText": "Changed the pattern.", "author": "Maninda", "createdAt": "2020-04-10T19:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjMzOQ=="}], "type": "inlineReview"}, {"oid": "e0c590048b2f960b9fb6adf1155bf85f7494b8ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0c590048b2f960b9fb6adf1155bf85f7494b8ea", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-10T11:18:08Z", "type": "commit"}, {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3d7712f78179dc5af38ff3d9f4fd3e426111142", "message": "Add suggestions given in PR review", "committedDate": "2020-04-10T19:43:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxMTgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407011810", "bodyText": "Shall we fix all the places?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "author": "ldclakmal", "createdAt": "2020-04-11T03:36:40Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTIzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029236", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using MD-5 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the MD-5 hash function of the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:15:50Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -155,6 +180,13 @@ public function hashSha512(byte[] input) returns byte[] = @java:Method {\n } external;\n \n # Returns the HMAC using MD-5 hash function of the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-1 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-1 hash function of the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:15:59Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -165,6 +197,13 @@ public function hmacMd5(byte[] input, byte[] key) returns byte[] = @java:Method\n } external;\n \n # Returns the HMAC using SHA-1 hash function of the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-256 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-256 hash function of the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:16:10Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -175,6 +214,13 @@ public function hmacSha1(byte[] input, byte[] key) returns byte[] = @java:Method\n } external;\n \n # Returns the HMAC using SHA-256 hash function of the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-384 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-384 hash function of the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:16:19Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -185,6 +231,13 @@ public function hmacSha256(byte[] input, byte[] key) returns byte[] = @java:Meth\n } external;\n \n # Returns the HMAC using SHA-384 hash function of the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029274", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-512 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-512 hash function of the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:16:27Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -195,6 +248,13 @@ public function hmacSha384(byte[] input, byte[] key) returns byte[] = @java:Meth\n } external;\n \n # Returns the HMAC using SHA-512 hash function of the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns Hex-encoded CRC32B value for the provided element.\n          \n          \n            \n            # Returns the Hex-encoded CRC32B value for the provided element.", "author": "praneesha", "createdAt": "2020-04-11T07:16:38Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -204,7 +264,12 @@ public function hmacSha512(byte[] input, byte[] key) returns byte[] = @java:Meth\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hmac\"\n } external;\n \n-# Returns Hex encoded CRC32B value for the provided element.\n+# Returns Hex-encoded CRC32B value for the provided element.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTMzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the RSA-MD5 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-MD5-based signature value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:16:54Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTM3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA1 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA1-based signature value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:17:31Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:18:02Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029444", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA256 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA256-based signature value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:18:16Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:18:29Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029473", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA384 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA384-based signature value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:18:38Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:18:52Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029526", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA512 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA512-based signature value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:19:03Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTU1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:19:16Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTU3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029571", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-MD5 based signature.\n          \n          \n            \n            # Verifies the RSA-MD5-based signature.", "author": "praneesha", "createdAt": "2020-04-11T07:19:26Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTU5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029594", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:19:48Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTYxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029612", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:20:03Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTYyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029620", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA1 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA1-based signature.", "author": "praneesha", "createdAt": "2020-04-11T07:20:15Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTY1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA256 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA256-based signature.", "author": "praneesha", "createdAt": "2020-04-11T07:20:26Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTY4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029683", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:20:48Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTY5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029696", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA384 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA384-based signature.", "author": "praneesha", "createdAt": "2020-04-11T07:21:01Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTcxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029715", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:21:15Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA512 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA512-based signature.", "author": "praneesha", "createdAt": "2020-04-11T07:21:24Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:21:37Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029744", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Read a private key from the provided PKCS#12 archive file.\n          \n          \n            \n            # Reads a private key from the provided PKCS#12 archive file.", "author": "praneesha", "createdAt": "2020-04-11T07:21:46Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha512Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha512Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Read a private key from the provided PKCS#12 archive file.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029770", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the private key or else error if private key was unreadable\n          \n          \n            \n            # + return - Reference to the private key or else a `crypto:Error` if the private key was unreadable", "author": "praneesha", "createdAt": "2020-04-11T07:22:00Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha512Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha512Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Read a private key from the provided PKCS#12 archive file.\n+# ```ballerina\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey|crypto:Error privateKey = crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+# ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n # + keyPassword - Key password\n-# + return - Reference to the private key or `Error` if private key was unreadable\n+# + return - Reference to the private key or else error if private key was unreadable", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029776", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Read a public key from the provided PKCS#12 archive file.\n          \n          \n            \n            # Reads a public key from the provided PKCS#12 archive file.", "author": "praneesha", "createdAt": "2020-04-11T07:22:07Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -345,10 +532,17 @@ function externDecodePrivateKey(KeyStore|TrustStore keyStore, handle keyAlias, h\n } external;\n \n # Read a public key from the provided PKCS#12 archive file.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029796", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the public key or else error if private key was unreadable\n          \n          \n            \n            # + return - Reference to the public key or else a `crypto:Error` if the private key was unreadable", "author": "praneesha", "createdAt": "2020-04-11T07:22:20Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -345,10 +532,17 @@ function externDecodePrivateKey(KeyStore|TrustStore keyStore, handle keyAlias, h\n } external;\n \n # Read a public key from the provided PKCS#12 archive file.\n+# ```ballerina\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PublicKey|crypto:Error publicKey = crypto:decodePublicKey(keyStore, \"keyAlias\");\n+# ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n-# + return - Reference to the public key or `Error` if private key was unreadable\n+# + return - Reference to the public key or else error if private key was unreadable", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTgwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA encrypted value for the given data.\n          \n          \n            \n            # Returns the RSA-encrypted value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:22:31Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -360,11 +554,21 @@ function externDecodePublicKey(KeyStore|TrustStore keyStore, handle keyAlias)\n } external;\n \n # Returns RSA encrypted value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTgyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:22:46Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -360,11 +554,21 @@ function externDecodePublicKey(KeyStore|TrustStore keyStore, handle keyAlias)\n } external;\n \n # Returns RSA encrypted value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PublicKey publicKey = checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  byte[]|crypto:Error cipherText = crypto:encryptRsaEcb(data, publicKey);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTg2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029865", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES CBC encrypted value for the given data.\n          \n          \n            \n            # Returns the AES-CBC-encrypted value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:23:03Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -377,12 +581,25 @@ function externEncryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC encrypted value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTg4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029880", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:23:16Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -377,12 +581,25 @@ function externEncryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC encrypted value for the given data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[]|crypto:Error cipherText = crypto:encryptAesCbc(data, key, initialVector);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTkwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029904", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES ECB encrypted value for the given data.\n          \n          \n            \n            # Returns the AES-ECB-encrypted value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:23:27Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -393,11 +610,20 @@ function externEncryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB encrypted value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:23:40Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -393,11 +610,20 @@ function externEncryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB encrypted value for the given data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[]|crypto:Error cipherText = crypto:encryptAesEcb(data, key);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTk0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES GCM encrypted value for the given data.\n          \n          \n            \n            # Returns the AES-GCM-encrypted value for the given data.", "author": "praneesha", "createdAt": "2020-04-11T07:23:52Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -408,13 +634,26 @@ function externEncryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM encrypted value for the given data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:24:04Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -408,13 +634,26 @@ function externEncryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM encrypted value for the given data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[]|crypto:Error cipherText = crypto:encryptAesGcm(data, key, initialVector);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDQ5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA decrypted value for the given RSA encrypted data.\n          \n          \n            \n            # Returns the RSA-decrypted value for the given RSA-encrypted data.", "author": "praneesha", "createdAt": "2020-04-11T07:30:29Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -428,11 +667,23 @@ function externEncryptAesGcm(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns RSA decrypted value for the given RSA encrypted data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDUwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:30:44Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -428,11 +667,23 @@ function externEncryptAesGcm(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns RSA decrypted value for the given RSA encrypted data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PublicKey publicKey = checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] cipherText = checkpanic crypto:encryptRsaEcb(data, publicKey);\n+#  byte[]|crypto:Error plainText = checkpanic crypto:decryptRsaEcb(cipherText, privateKey);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDUyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030521", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES CBC decrypted value for the given AES CBC encrypted data.\n          \n          \n            \n            # Returns the AES-CBC-decrypted value for the given AES-CBC-encrypted data.", "author": "praneesha", "createdAt": "2020-04-11T07:31:01Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -445,12 +696,26 @@ function externDecryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC decrypted value for the given AES CBC encrypted data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDUzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030538", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:31:15Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -445,12 +696,26 @@ function externDecryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC decrypted value for the given AES CBC encrypted data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[] cipherText = checkpanic crypto:encryptAesCbc(data, key, initialVector);\n+#  byte[]|crypto:Error plainText = crypto:decryptAesCbc(cipherText, key, initialVector);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030549", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES ECB decrypted value for the given AES ECB encrypted data.\n          \n          \n            \n            # Returns the AES-ECB-decrypted value for the given AES-ECB-encrypted data.", "author": "praneesha", "createdAt": "2020-04-11T07:31:31Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -461,11 +726,21 @@ function externDecryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB decrypted value for the given AES ECB encrypted data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030562", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:31:44Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -461,11 +726,21 @@ function externDecryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB decrypted value for the given AES ECB encrypted data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[] cipherText = checkpanic crypto:encryptAesEcb(data, key);\n+#  byte[]|crypto:Error plainText = crypto:decryptAesEcb(cipherText, key);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES GCM decrypted value for the given AES GCM encrypted data.\n          \n          \n            \n            # Returns the AES-GCM-decrypted value for the given AES-GCM-encrypted data.", "author": "praneesha", "createdAt": "2020-04-11T07:31:59Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -476,13 +751,27 @@ function externDecryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM decrypted value for the given AES GCM encrypted data.", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "author": "praneesha", "createdAt": "2020-04-11T07:32:12Z", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -476,13 +751,27 @@ function externDecryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM decrypted value for the given AES GCM encrypted data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[] cipherText = checkpanic crypto:encryptAesGcm(data, key, initialVector);\n+#  byte[]|crypto:Error plainText = crypto:decryptAesGcm(cipherText, key, initialVector);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "originalCommit": "e3d7712f78179dc5af38ff3d9f4fd3e426111142", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "730ba2c09c30040b17a5f9f74be7087ae083991e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/730ba2c09c30040b17a5f9f74be7087ae083991e", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-04-11T09:26:25Z", "type": "commit"}]}