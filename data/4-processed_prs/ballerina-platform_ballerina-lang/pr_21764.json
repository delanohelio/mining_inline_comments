{"pr_number": 21764, "pr_title": "Fix query do action syntax to accommodate a return", "pr_createdAt": "2020-03-14T02:41:11Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764", "timeline": [{"oid": "a6f6ad1a6f3ed1d31c4278f0238764e634eaaf52", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6f6ad1a6f3ed1d31c4278f0238764e634eaaf52", "message": "Fix query do action syntax to accommodate a return", "committedDate": "2020-03-14T02:37:58Z", "type": "commit"}, {"oid": "4694838039acae1bc64afd2facf56c80f9d5ca79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4694838039acae1bc64afd2facf56c80f9d5ca79", "message": "Fix the checkstyle issue", "committedDate": "2020-03-14T03:57:32Z", "type": "commit"}, {"oid": "1582805268bab290c5bd69cae10014dea6878c16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1582805268bab290c5bd69cae10014dea6878c16", "message": "Improve the code analyze to mark query-action as action expression", "committedDate": "2020-03-14T05:28:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTcxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#discussion_r392595712", "bodyText": "This has to be the union type of nil type and error type right?", "author": "gimantha", "createdAt": "2020-03-14T15:17:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -168,12 +169,26 @@ BLangBlockStmt desugarQueryAction(BLangQueryAction queryAction, SymbolEnv env) {\n         List<BLangWhereClause> whereClauseList = queryAction.whereClauseList;\n         DiagnosticPos pos = fromClause.pos;\n \n+        BLangExpression nilExpression = ASTBuilderUtil.createLiteral(pos, symTable.nilType, Names.NIL_VALUE);\n+        BVarSymbol outputVarSymbol = new BVarSymbol(0, new Name(\"$outputVar$\"),\n+                env.scope.owner.pkgID, symTable.nilType, env.scope.owner);\n+        BLangSimpleVariable outputVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$outputVar$\", symTable.nilType,\n+                        nilExpression, outputVarSymbol);\n+        BLangSimpleVariableDef outputVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, outputVariable);\n+        BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputVariable.symbol);\n+\n         BLangForeach leafForeach = buildFromClauseBlock(fromClauseList);\n         BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n         buildWhereClauseBlock(whereClauseList, letClauseList, leafForeach, foreachBody, doClause.pos);\n         foreachBody.addStatement(doClause.body);\n+        blockNode.stmts.add(outputVariableDef);\n         blockNode.stmts.add(parentForeach);\n-        return blockNode;\n+\n+        BLangStatementExpression stmtExpr = ASTBuilderUtil.createStatementExpression(blockNode, outputVarRef);\n+        stmtExpr.type = symTable.nilType;", "originalCommit": "1582805268bab290c5bd69cae10014dea6878c16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21764#discussion_r392595867", "bodyText": "This has to check if the return type is union of nil type and error type, not just nil type right?", "author": "gimantha", "createdAt": "2020-03-14T15:19:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2779,11 +2781,42 @@ public void visit(BLangQueryExpr queryExpr) {\n         }\n \n         BType selectType = checkExpr(selectClause.expression, whereEnv, expSelectType);\n-\n         resultType = selectType == symTable.semanticError ? selectType : new BArrayType(selectType);\n     }\n \n-    SymbolEnv typeCheckFromClause(BLangFromClause fromClause, SymbolEnv parentEnv) {\n+    @Override\n+    public void visit(BLangQueryAction queryAction) {\n+        List<? extends FromClauseNode> fromClauseList = queryAction.fromClauseList;\n+        List<? extends WhereClauseNode> whereClauseList = queryAction.whereClauseList;\n+        List<? extends LetClauseNode> letClauseList = queryAction.letClauseList;\n+        BLangDoClause doClauseNode = queryAction.doClause;\n+\n+        SymbolEnv parentEnv = env;\n+        for (FromClauseNode fromClause : fromClauseList) {\n+            parentEnv = typeCheckFromClause((BLangFromClause) fromClause, parentEnv);\n+        }\n+        for (LetClauseNode letClauseNode : letClauseList) {\n+            parentEnv = typeCheckLetClause((BLangLetClause) letClauseNode, parentEnv);\n+        }\n+\n+        SymbolEnv whereEnv = parentEnv;\n+        for (WhereClauseNode whereClauseNode : whereClauseList) {\n+            BLangWhereClause whereClause = (BLangWhereClause) whereClauseNode;\n+            checkExpr(whereClause.expression, parentEnv);\n+            whereEnv = typeNarrower.evaluateTruth(whereClause.expression, doClauseNode, parentEnv);\n+        }\n+\n+        SymbolEnv blockEnv = SymbolEnv.createBlockEnv(doClauseNode.body, whereEnv);\n+        // Analyze foreach node's statements.\n+        semanticAnalyzer.analyzeStmt(doClauseNode.body, blockEnv);\n+\n+        BType returnType = types.checkType(doClauseNode.pos, symTable.nilType, expType,", "originalCommit": "1582805268bab290c5bd69cae10014dea6878c16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d32b91783a929fe86f85689f422d78d13743e83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d32b91783a929fe86f85689f422d78d13743e83", "message": "Accommodate review comments", "committedDate": "2020-03-15T04:17:31Z", "type": "commit"}, {"oid": "70d31e6f7da56eeaa84351df78d329dce6a0e4b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70d31e6f7da56eeaa84351df78d329dce6a0e4b6", "message": "Accommodate review comments", "committedDate": "2020-03-15T04:18:58Z", "type": "commit"}]}