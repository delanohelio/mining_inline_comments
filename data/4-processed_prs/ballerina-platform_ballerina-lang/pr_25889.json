{"pr_number": 25889, "pr_title": "Enable formatting for new syntax changes and fix formatting issues", "pr_createdAt": "2020-09-17T13:28:57Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889", "timeline": [{"oid": "ad8ba6e4b2fb2bf7b56d11fd9e13ddda736ce44d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad8ba6e4b2fb2bf7b56d11fd9e13ddda736ce44d", "message": "Fix the issue with comments", "committedDate": "2020-09-17T13:14:36Z", "type": "commit"}, {"oid": "790b379f16ab34a7c04e0b2ac26a9a36b36841ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/790b379f16ab34a7c04e0b2ac26a9a36b36841ed", "message": "Add object constructor node", "committedDate": "2020-09-17T13:14:36Z", "type": "commit"}, {"oid": "8b05b56e8ea7a3aace2992b98e494fe4ddc33675", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8b05b56e8ea7a3aace2992b98e494fe4ddc33675", "message": "Support isolated functions", "committedDate": "2020-09-17T13:14:36Z", "type": "commit"}, {"oid": "78fbd5396aeb201260fcc275952b57299f24d5c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78fbd5396aeb201260fcc275952b57299f24d5c8", "message": "Add do and on fail nodes", "committedDate": "2020-09-17T13:14:36Z", "type": "commit"}, {"oid": "b2b455c81b1bbe5c91e6857d389253ba47323a8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2b455c81b1bbe5c91e6857d389253ba47323a8f", "message": "Enable the match statement", "committedDate": "2020-09-17T13:14:36Z", "type": "commit"}, {"oid": "066982974f8d8f2e6c493939d5c4e20e32deec1a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/066982974f8d8f2e6c493939d5c4e20e32deec1a", "message": "Enable on fail for match statements", "committedDate": "2020-09-17T13:14:37Z", "type": "commit"}, {"oid": "b94f403861f6a142eabdc4a5819850674c505cf2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b94f403861f6a142eabdc4a5819850674c505cf2", "message": "Enable on fail for foreach statements", "committedDate": "2020-09-17T13:14:37Z", "type": "commit"}, {"oid": "e05be59d6546f7ef3a9259602108b0d6cc074c28", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e05be59d6546f7ef3a9259602108b0d6cc074c28", "message": "Enable foreach statements", "committedDate": "2020-09-17T13:14:37Z", "type": "commit"}, {"oid": "a661618631ab248624fbd3004f7cc548662ad723", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a661618631ab248624fbd3004f7cc548662ad723", "message": "Enable on fail for while statements", "committedDate": "2020-09-17T13:14:37Z", "type": "commit"}, {"oid": "b5d57ec322cb154bcc9ad019ecaea91af5fa60ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5d57ec322cb154bcc9ad019ecaea91af5fa60ba", "message": "Enable lock statements", "committedDate": "2020-09-17T13:14:37Z", "type": "commit"}, {"oid": "2b7191d711caa198d6d410c4e4280c19f55c6760", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b7191d711caa198d6d410c4e4280c19f55c6760", "message": "Enable on fail for lock statements", "committedDate": "2020-09-17T13:14:37Z", "type": "commit"}, {"oid": "bdce13f26e83ff1b287228902f068e95bd5a2616", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdce13f26e83ff1b287228902f068e95bd5a2616", "message": "Fix the anonymous object variable declaration", "committedDate": "2020-09-17T13:14:37Z", "type": "commit"}, {"oid": "9fd73cfaca6227cef1547b7a170c3dc8a4dd163f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fd73cfaca6227cef1547b7a170c3dc8a4dd163f", "message": "Remove previous object related test cases", "committedDate": "2020-09-17T13:36:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490251660", "bodyText": "Can invert the conditions and do an early exit.", "author": "SupunS", "createdAt": "2020-09-17T13:36:19Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -244,15 +290,90 @@ static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int\n         if (token == null) {\n             return token;\n         }\n-        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n-        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+        MinutiaeList newLeadingMinutiaeList = preserveComments(token.leadingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(leadingSpaces, leadingNewLines)));\n+        MinutiaeList newTrailingMinutiaeList = preserveComments(token.trailingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(trailingSpaces, trailingNewLines)));\n \n         return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n     }\n \n-    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n-        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n-        return createMinutiaeList(minutiae);\n+    private static MinutiaeList preserveComments(MinutiaeList minutiaeList, int trailingNewLines) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (minutiaeList.size() > 0) {\n+            int count = commentCount(minutiaeList);\n+            if (count > 0) {\n+                int processedCount = 0;\n+                for (int i = 0; i < minutiaeList.size(); i++) {\n+                    Minutiae minutiae = minutiaeList.get(i);\n+                    minutiaes = minutiaes.add(minutiae);\n+                    if (minutiae.kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                        processedCount++;\n+                        if (processedCount == count) {\n+                            if (trailingNewLines == 0) {\n+                                minutiaes = minutiaes.add(AbstractNodeFactory\n+                                        .createEndOfLineMinutiae(System.getProperty(LINE_SEPARATOR)));\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static int commentCount(MinutiaeList minutiaeList) {\n+        int count = 0;\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+\n+    private static int leadingNewLines(NonTerminalNode parent, Token node) {\n+        int count = 0;\n+        if (parent != null) {\n+            int childLocation = getChildLocation(parent, node);\n+            if (parent.children().size() > childLocation + 1) {\n+                Token nextToken = getFirstToken(parent.children().get(childLocation + 1));\n+                if (nextToken != null && nextToken.containsLeadingMinutiae()) {\n+                    MinutiaeList minutiaes = nextToken.leadingMinutiae();\n+                    if (commentCount(minutiaes) > 0) {\n+                        for (Minutiae minutiae : minutiaes) {\n+                            if (minutiae.kind() == SyntaxKind.END_OF_LINE_MINUTIAE) {\n+                                count++;\n+                            } else {\n+                                break;", "originalCommit": "bdce13f26e83ff1b287228902f068e95bd5a2616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490283399", "bodyText": "Done", "author": "IrushiL", "createdAt": "2020-09-17T14:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTg1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490251858", "bodyText": "Same as above", "author": "SupunS", "createdAt": "2020-09-17T13:36:35Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -410,6 +535,18 @@ private static Indentation getBlockParent(Node node) {\n         return new Indentation(null, false);\n     }\n \n+    static boolean addNewTrailingLine(NonTerminalNode parent, NonTerminalNode node) {\n+        if (parent != null) {\n+            int childLocation = getChildLocation(parent, node);\n+            if (parent.children().size() > childLocation + 1) {\n+                Token nextToken = getFirstToken(parent.children().get(childLocation + 1));\n+                if (nextToken != null && nextToken.containsLeadingMinutiae()) {\n+                    return (nextToken.leadingMinutiae().get(0).kind() != SyntaxKind.END_OF_LINE_MINUTIAE);", "originalCommit": "bdce13f26e83ff1b287228902f068e95bd5a2616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzYyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490283625", "bodyText": "Done", "author": "IrushiL", "createdAt": "2020-09-17T14:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjI2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490252263", "bodyText": "Additional parenthesis around the syntax kind", "author": "SupunS", "createdAt": "2020-09-17T13:37:08Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -134,6 +167,14 @@ static DiagnosticPos getPosition(Node node) {\n                 return parent;\n             }\n         }\n+        if (parentKind == (SyntaxKind.OBJECT_CONSTRUCTOR) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.LOCAL_VAR_DECL)) {", "originalCommit": "bdce13f26e83ff1b287228902f068e95bd5a2616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4Mzk3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490283971", "bodyText": "Fixed", "author": "IrushiL", "createdAt": "2020-09-17T14:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjM4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490252380", "bodyText": "same as above", "author": "SupunS", "createdAt": "2020-09-17T13:37:19Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -134,6 +167,14 @@ static DiagnosticPos getPosition(Node node) {\n                 return parent;\n             }\n         }\n+        if (parentKind == (SyntaxKind.OBJECT_CONSTRUCTOR) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.LOCAL_VAR_DECL)) {\n+            return grandParent;\n+        }\n+        if (parentKind == (SyntaxKind.TYPE_CAST_PARAM) && grandParent != null &&\n+                grandParent.kind() == (SyntaxKind.TYPE_CAST_EXPRESSION)) {", "originalCommit": "bdce13f26e83ff1b287228902f068e95bd5a2616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NDE3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490284172", "bodyText": "Fixed", "author": "IrushiL", "createdAt": "2020-09-17T14:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MjM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1NzQ2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490257466", "bodyText": "Shall we invert the condition with a continue?", "author": "nadeeshaan", "createdAt": "2020-09-17T13:44:26Z", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/FormatterUtils.java", "diffHunk": "@@ -244,15 +290,90 @@ static Token formatToken(Token token, int leadingSpaces, int trailingSpaces, int\n         if (token == null) {\n             return token;\n         }\n-        MinutiaeList newLeadingMinutiaeList = modifyMinutiaeList(leadingSpaces, leadingNewLines);\n-        MinutiaeList newTrailingMinutiaeList = modifyMinutiaeList(trailingSpaces, trailingNewLines);\n+        MinutiaeList newLeadingMinutiaeList = preserveComments(token.leadingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(leadingSpaces, leadingNewLines)));\n+        MinutiaeList newTrailingMinutiaeList = preserveComments(token.trailingMinutiae(), trailingNewLines)\n+                .add(createWhitespaceMinutiae(getWhiteSpaces(trailingSpaces, trailingNewLines)));\n \n         return token.modify(newLeadingMinutiaeList, newTrailingMinutiaeList);\n     }\n \n-    private static MinutiaeList modifyMinutiaeList(int spaces, int newLines) {\n-        Minutiae minutiae = createWhitespaceMinutiae(getWhiteSpaces(spaces, newLines));\n-        return createMinutiaeList(minutiae);\n+    private static MinutiaeList preserveComments(MinutiaeList minutiaeList, int trailingNewLines) {\n+        MinutiaeList minutiaes = AbstractNodeFactory.createEmptyMinutiaeList();\n+        if (minutiaeList.size() > 0) {\n+            int count = commentCount(minutiaeList);\n+            if (count > 0) {\n+                int processedCount = 0;\n+                for (int i = 0; i < minutiaeList.size(); i++) {\n+                    Minutiae minutiae = minutiaeList.get(i);\n+                    minutiaes = minutiaes.add(minutiae);\n+                    if (minutiae.kind() == SyntaxKind.COMMENT_MINUTIAE) {\n+                        processedCount++;\n+                        if (processedCount == count) {\n+                            if (trailingNewLines == 0) {\n+                                minutiaes = minutiaes.add(AbstractNodeFactory\n+                                        .createEndOfLineMinutiae(System.getProperty(LINE_SEPARATOR)));\n+                            }\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return minutiaes;\n+    }\n+\n+    private static int commentCount(MinutiaeList minutiaeList) {\n+        int count = 0;\n+        for (int i = 0; i < minutiaeList.size(); i++) {\n+            if (minutiaeList.get(i).kind() == SyntaxKind.COMMENT_MINUTIAE) {", "originalCommit": "bdce13f26e83ff1b287228902f068e95bd5a2616", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MjI0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25889#discussion_r490282245", "bodyText": "This method checks the number of comment minutiaes available inside the minutiae list. Therefore, the entire list should be looped.", "author": "IrushiL", "createdAt": "2020-09-17T14:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1NzQ2Ng=="}], "type": "inlineReview"}, {"oid": "56f1a7011a0678f5093e55d210fce21ef9a7630e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/56f1a7011a0678f5093e55d210fce21ef9a7630e", "message": "Fix review comments", "committedDate": "2020-09-17T14:06:03Z", "type": "commit"}]}