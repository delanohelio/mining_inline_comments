{"pr_number": 22559, "pr_title": "Fix API docs in task module", "pr_createdAt": "2020-04-10T03:24:58Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559", "timeline": [{"oid": "b031521262d9c11b9541a40e1387c36f0de9a913", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b031521262d9c11b9541a40e1387c36f0de9a913", "message": "Fix API docs in task module", "committedDate": "2020-04-10T03:30:02Z", "type": "forcePushed"}, {"oid": "7cc07cfdd2c8cba6cd7fc2e964a126b7fadb4846", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cc07cfdd2c8cba6cd7fc2e964a126b7fadb4846", "message": "Fix API docs in task module", "committedDate": "2020-04-10T04:25:51Z", "type": "commit"}, {"oid": "7cc07cfdd2c8cba6cd7fc2e964a126b7fadb4846", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cc07cfdd2c8cba6cd7fc2e964a126b7fadb4846", "message": "Fix API docs in task module", "committedDate": "2020-04-10T04:25:51Z", "type": "forcePushed"}, {"oid": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "message": "Update URLs for examples", "committedDate": "2020-04-10T05:01:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMjgwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406632806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n          \n          \n            \n            # Configurations related to a timer, which are used to define the behavior of a timer when initializing the `task:Listener`.", "author": "praneesha", "createdAt": "2020-04-10T07:07:07Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMjg5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406632892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n          \n          \n            \n            # + noOfRecurrences - Number of times to trigger the task after which the task stops running", "author": "praneesha", "createdAt": "2020-04-10T07:07:22Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMjk2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406632966", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n          \n          \n            \n            # Configurations related to an appointment, which are used to define the behavior of an appointment when initializing the", "author": "praneesha", "createdAt": "2020-04-10T07:07:38Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzA1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n          \n          \n            \n            # + appointmentDetails - A CRON  expression as a string or `task:AppointmentData` for scheduling an appointment", "author": "praneesha", "createdAt": "2020-04-10T07:07:52Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzExMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633111", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n          \n          \n            \n            # + noOfRecurrences - Number of times to trigger the task after which the task stops running", "author": "praneesha", "createdAt": "2020-04-10T07:08:01Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzE3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633171", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Cron expression required for scheduling an appointment.\n          \n          \n            \n            # The CRON expression required for scheduling an appointment.", "author": "praneesha", "createdAt": "2020-04-10T07:08:14Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type AppointmentConfiguration record {|\n     string|AppointmentData appointmentDetails;\n     int noOfRecurrences?;\n |};\n \n-# Details for schedule an Appointment.\n+# Cron expression required for scheduling an appointment.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzIwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633207", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + seconds - Second(s) in a given minute, in which the appointment will run\n          \n          \n            \n            # + seconds - Second(s) in a given minute in which the appointment will run", "author": "praneesha", "createdAt": "2020-04-10T07:08:22Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type AppointmentConfiguration record {|\n     string|AppointmentData appointmentDetails;\n     int noOfRecurrences?;\n |};\n \n-# Details for schedule an Appointment.\n+# Cron expression required for scheduling an appointment.\n #\n-# + seconds - Second(s) in a given minute, in which the appointment will run.\n-# + minutes - Minute(s) in a given hour, in which the appointment will run.\n-# + hours - Hour(s) in a given day, in which the appointment will run.\n-# + daysOfMonth - Day(s) of the month, in which the appointment will run.\n-# + months - Month(s) in a given year, in which the appointment will run.\n-# + daysOfWeek - Day(s) of a week, in which the appointment will run.\n-# + year - Year(s) in which the appointment will run.\n+# + seconds - Second(s) in a given minute, in which the appointment will run", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzI1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633251", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + minutes - Minute(s) in a given hour, in which the appointment will run\n          \n          \n            \n            # + minutes - Minute(s) in a given hour in which the appointment will run", "author": "praneesha", "createdAt": "2020-04-10T07:08:27Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type AppointmentConfiguration record {|\n     string|AppointmentData appointmentDetails;\n     int noOfRecurrences?;\n |};\n \n-# Details for schedule an Appointment.\n+# Cron expression required for scheduling an appointment.\n #\n-# + seconds - Second(s) in a given minute, in which the appointment will run.\n-# + minutes - Minute(s) in a given hour, in which the appointment will run.\n-# + hours - Hour(s) in a given day, in which the appointment will run.\n-# + daysOfMonth - Day(s) of the month, in which the appointment will run.\n-# + months - Month(s) in a given year, in which the appointment will run.\n-# + daysOfWeek - Day(s) of a week, in which the appointment will run.\n-# + year - Year(s) in which the appointment will run.\n+# + seconds - Second(s) in a given minute, in which the appointment will run\n+# + minutes - Minute(s) in a given hour, in which the appointment will run", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzI4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633284", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + hours - Hour(s) in a given day, in which the appointment will run\n          \n          \n            \n            # + hours - Hour(s) in a given day in which the appointment will run", "author": "praneesha", "createdAt": "2020-04-10T07:08:34Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type AppointmentConfiguration record {|\n     string|AppointmentData appointmentDetails;\n     int noOfRecurrences?;\n |};\n \n-# Details for schedule an Appointment.\n+# Cron expression required for scheduling an appointment.\n #\n-# + seconds - Second(s) in a given minute, in which the appointment will run.\n-# + minutes - Minute(s) in a given hour, in which the appointment will run.\n-# + hours - Hour(s) in a given day, in which the appointment will run.\n-# + daysOfMonth - Day(s) of the month, in which the appointment will run.\n-# + months - Month(s) in a given year, in which the appointment will run.\n-# + daysOfWeek - Day(s) of a week, in which the appointment will run.\n-# + year - Year(s) in which the appointment will run.\n+# + seconds - Second(s) in a given minute, in which the appointment will run\n+# + minutes - Minute(s) in a given hour, in which the appointment will run\n+# + hours - Hour(s) in a given day, in which the appointment will run", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzMyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633324", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + daysOfMonth - Day(s) of the month, in which the appointment will run\n          \n          \n            \n            # + daysOfMonth - Day(s) of the month in which the appointment will run", "author": "praneesha", "createdAt": "2020-04-10T07:08:39Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type AppointmentConfiguration record {|\n     string|AppointmentData appointmentDetails;\n     int noOfRecurrences?;\n |};\n \n-# Details for schedule an Appointment.\n+# Cron expression required for scheduling an appointment.\n #\n-# + seconds - Second(s) in a given minute, in which the appointment will run.\n-# + minutes - Minute(s) in a given hour, in which the appointment will run.\n-# + hours - Hour(s) in a given day, in which the appointment will run.\n-# + daysOfMonth - Day(s) of the month, in which the appointment will run.\n-# + months - Month(s) in a given year, in which the appointment will run.\n-# + daysOfWeek - Day(s) of a week, in which the appointment will run.\n-# + year - Year(s) in which the appointment will run.\n+# + seconds - Second(s) in a given minute, in which the appointment will run\n+# + minutes - Minute(s) in a given hour, in which the appointment will run\n+# + hours - Hour(s) in a given day, in which the appointment will run\n+# + daysOfMonth - Day(s) of the month, in which the appointment will run", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633349", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + months - Month(s) in a given year, in which the appointment will run\n          \n          \n            \n            # + months - Month(s) in a given year in which the appointment will run", "author": "praneesha", "createdAt": "2020-04-10T07:08:44Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type AppointmentConfiguration record {|\n     string|AppointmentData appointmentDetails;\n     int noOfRecurrences?;\n |};\n \n-# Details for schedule an Appointment.\n+# Cron expression required for scheduling an appointment.\n #\n-# + seconds - Second(s) in a given minute, in which the appointment will run.\n-# + minutes - Minute(s) in a given hour, in which the appointment will run.\n-# + hours - Hour(s) in a given day, in which the appointment will run.\n-# + daysOfMonth - Day(s) of the month, in which the appointment will run.\n-# + months - Month(s) in a given year, in which the appointment will run.\n-# + daysOfWeek - Day(s) of a week, in which the appointment will run.\n-# + year - Year(s) in which the appointment will run.\n+# + seconds - Second(s) in a given minute, in which the appointment will run\n+# + minutes - Minute(s) in a given hour, in which the appointment will run\n+# + hours - Hour(s) in a given day, in which the appointment will run\n+# + daysOfMonth - Day(s) of the month, in which the appointment will run\n+# + months - Month(s) in a given year, in which the appointment will run", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzM4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + daysOfWeek - Day(s) of a week, in which the appointment will run\n          \n          \n            \n            # + daysOfWeek - Day(s) of a week in which the appointment will run", "author": "praneesha", "createdAt": "2020-04-10T07:08:51Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,36 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer. Used to define the behavior of a timer when initilizing the `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment. Used to define the behavior of an appointment when initilizing the\n+# `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n+# + noOfRecurrences - Number of times to trigger the task, after which the task stops running\n public type AppointmentConfiguration record {|\n     string|AppointmentData appointmentDetails;\n     int noOfRecurrences?;\n |};\n \n-# Details for schedule an Appointment.\n+# Cron expression required for scheduling an appointment.\n #\n-# + seconds - Second(s) in a given minute, in which the appointment will run.\n-# + minutes - Minute(s) in a given hour, in which the appointment will run.\n-# + hours - Hour(s) in a given day, in which the appointment will run.\n-# + daysOfMonth - Day(s) of the month, in which the appointment will run.\n-# + months - Month(s) in a given year, in which the appointment will run.\n-# + daysOfWeek - Day(s) of a week, in which the appointment will run.\n-# + year - Year(s) in which the appointment will run.\n+# + seconds - Second(s) in a given minute, in which the appointment will run\n+# + minutes - Minute(s) in a given hour, in which the appointment will run\n+# + hours - Hour(s) in a given day, in which the appointment will run\n+# + daysOfMonth - Day(s) of the month, in which the appointment will run\n+# + months - Month(s) in a given year, in which the appointment will run\n+# + daysOfWeek - Day(s) of a week, in which the appointment will run", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzcyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Nil if attaching the service is successful\n          \n          \n            \n                # + return - Nil if attaching the service is successful\n          \n      \n    \n    \n  \n\n@daneshk - Here, Nil should be (), isn't it?", "author": "praneesha", "createdAt": "2020-04-10T07:09:54Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -46,7 +46,7 @@ public type Listener object {\n     #\n     # + s - Service to attach to the listener\n     # + name - Name of the service\n-    # + return - Returns nil if attaching the service is successful\n+    # + return - Nil if attaching the service is successful", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MjIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407872227", "bodyText": "Fixed", "author": "aashikam", "createdAt": "2020-04-14T05:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzgxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633813", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Nil if detaching the service is successful\n          \n          \n            \n                # + return - Nil if detaching the service is successful\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-10T07:10:12Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -58,15 +58,15 @@ public type Listener object {\n     # Detaches the given `service` from the `task:Listener`.\n     #\n     # + s - Service to be detached from the listener\n-    # + return - Returns nil if detaching the service is successful\n+    # + return - Nil if detaching the service is successful", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzkyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633921", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Nil if starting the services is successful\n          \n          \n            \n                # + return - Nil if starting the services is successful\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-10T07:10:31Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -58,15 +58,15 @@ public type Listener object {\n     # Detaches the given `service` from the `task:Listener`.\n     #\n     # + s - Service to be detached from the listener\n-    # + return - Returns nil if detaching the service is successful\n+    # + return - Nil if detaching the service is successful\n     public function __detach(service s) returns error? {\n         return detachExternal(self, s);\n     }\n \n     # Starts dispatching the services attached to the `task:Listener`. This may panic if the service dispatching causes\n     # any error.\n     #\n-    # + return - Returns nil if strating the services is successful\n+    # + return - Nil if starting the services is successful", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Nil if stopping the listener is successful\n          \n          \n            \n                # + return - Nil if stopping the listener is successful\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-10T07:10:38Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -80,7 +80,7 @@ public type Listener object {\n     # Gracefully stops the `task:Listener` and the attached services. It will wait if there are any tasks still to be\n     # completed. This may panic if the stopping causes any error.\n     #\n-    # + return - Returns nil if stopping the listener is successful\n+    # + return - Nil if stopping the listener is successful", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMzk4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406633989", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Nil if the stopping the listener is successful\n          \n          \n            \n                # + return - Nil if the stopping the listener is successful\n          \n      \n    \n    \n  \n\nSame as above.", "author": "praneesha", "createdAt": "2020-04-10T07:10:46Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -94,7 +94,7 @@ public type Listener object {\n     # Stops the `task:Listener` and the attached services immediately. This will cancel any ongoing tasks. This may\n     # panic if the stopping causes any error.\n     #\n-    # + return - Returns nil if the stopping the listener is successful\n+    # + return - Nil if the stopping the listener is successful", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDE3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634178", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:ListenerError` if an error is occurred while pausing or nil otherwise\n          \n          \n            \n                # + return - `task:ListenerError` if an error is occurred while pausing or else nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:11:29Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -111,14 +111,14 @@ public type Listener object {\n \n     # Pauses the `task:Listener` and the attached services.\n     #\n-    # + return - Returns `task:ListenerError` if an error is occurred while resuming or nil Otherwise\n+    # + return - `task:ListenerError` if an error is occurred while pausing or nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mzg1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406673856", "bodyText": "# + return - `task:ListenerError` if an error is occurred while pausing or else nil otherwise\n\nShouldn't this be\n# + return - `task:ListenerError` if an error is occurred while pausing or else nil\nCheck the other places as well.", "author": "ThisaruGuruge", "createdAt": "2020-04-10T09:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MjYwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407872603", "bodyText": "Fixed in all places", "author": "aashikam", "createdAt": "2020-04-14T05:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:ListenerError` when an error occurred while resuming or nil otherwise\n          \n          \n            \n                # + return - `task:ListenerError` when an error occurred while resuming or nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:11:37Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -111,14 +111,14 @@ public type Listener object {\n \n     # Pauses the `task:Listener` and the attached services.\n     #\n-    # + return - Returns `task:ListenerError` if an error is occurred while resuming or nil Otherwise\n+    # + return - `task:ListenerError` if an error is occurred while pausing or nil otherwise\n     public function pause() returns ListenerError? {\n         return pauseExternal(self);\n     }\n \n     # Resumes a paused `task:Listener`. Calling this on an already running `task:Listener` will not cause any error.\n     #\n-    # + return - Returns `task:ListenerError` when an error occurred while pausing or nil Otherwise\n+    # + return - `task:ListenerError` when an error occurred while resuming or nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDM1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634358", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + configuration - `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n          \n          \n            \n                # + configuration - The `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the", "author": "praneesha", "createdAt": "2020-04-10T07:12:00Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -27,15 +27,15 @@ public type Listener object {\n     # Initializes the `task:Listener` object. This may panic if the initialization is failed due to a configuration\n     # error.\n     #\n-    # + configurations - A `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n-    # `task:Listener` behavior\n-    public function __init(TimerConfiguration|AppointmentConfiguration configurations) {\n-        if (configurations is TimerConfiguration) {\n-            if (configurations[\"initialDelayInMillis\"] == ()) {\n-                configurations.initialDelayInMillis = configurations.intervalInMillis;\n+    # + configuration - `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDQ0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634449", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + configuration - `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n          \n          \n            \n                # + configuration - The `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the", "author": "praneesha", "createdAt": "2020-04-10T07:12:16Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -21,17 +21,17 @@ public type Scheduler object {\n     # Initializes a `task:Scheduler` object. This may panic if the initialization causes any error due to\n     # a configuration error.\n     #\n-    # + configurations - A `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n-    # `task:Sceduler` behavior\n-    public function __init(TimerConfiguration|AppointmentConfiguration configurations) {\n-        self.taskListener = new(configurations);\n+    # + configuration - `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDQ5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634490", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + serviceToAttach - Ballerina `service` object which needs to be attached to the task\n          \n          \n            \n                # + serviceToAttach - Ballerina `service` object, which needs to be attached to the task", "author": "praneesha", "createdAt": "2020-04-10T07:12:25Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -21,17 +21,17 @@ public type Scheduler object {\n     # Initializes a `task:Scheduler` object. This may panic if the initialization causes any error due to\n     # a configuration error.\n     #\n-    # + configurations - A `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n-    # `task:Sceduler` behavior\n-    public function __init(TimerConfiguration|AppointmentConfiguration configurations) {\n-        self.taskListener = new(configurations);\n+    # + configuration - `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n+    #                   `task:Sceduler` behavior\n+    public function __init(TimerConfiguration|AppointmentConfiguration configuration) {\n+        self.taskListener = new(configuration);\n     }\n \n     # Attaches the provided `service` to the task.\n     #\n-    # + serviceToAttach - Ballerina `service` object which needs to be attached to the task.\n-    # + attachments - Set of optional parameters which needs to passed inside the resources.\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + serviceToAttach - Ballerina `service` object which needs to be attached to the task", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDU4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634583", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + attachments - Set of optional parameters which needs to passed inside the resources\n          \n          \n            \n                # + attachments - Set of optional parameters, which need to be passed inside the resources", "author": "praneesha", "createdAt": "2020-04-10T07:12:42Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -21,17 +21,17 @@ public type Scheduler object {\n     # Initializes a `task:Scheduler` object. This may panic if the initialization causes any error due to\n     # a configuration error.\n     #\n-    # + configurations - A `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n-    # `task:Sceduler` behavior\n-    public function __init(TimerConfiguration|AppointmentConfiguration configurations) {\n-        self.taskListener = new(configurations);\n+    # + configuration - `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n+    #                   `task:Sceduler` behavior\n+    public function __init(TimerConfiguration|AppointmentConfiguration configuration) {\n+        self.taskListener = new(configuration);\n     }\n \n     # Attaches the provided `service` to the task.\n     #\n-    # + serviceToAttach - Ballerina `service` object which needs to be attached to the task.\n-    # + attachments - Set of optional parameters which needs to passed inside the resources.\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + serviceToAttach - Ballerina `service` object which needs to be attached to the task\n+    # + attachments - Set of optional parameters which needs to passed inside the resources", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDY0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:12:52Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -21,17 +21,17 @@ public type Scheduler object {\n     # Initializes a `task:Scheduler` object. This may panic if the initialization causes any error due to\n     # a configuration error.\n     #\n-    # + configurations - A `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n-    # `task:Sceduler` behavior\n-    public function __init(TimerConfiguration|AppointmentConfiguration configurations) {\n-        self.taskListener = new(configurations);\n+    # + configuration - `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n+    #                   `task:Sceduler` behavior\n+    public function __init(TimerConfiguration|AppointmentConfiguration configuration) {\n+        self.taskListener = new(configuration);\n     }\n \n     # Attaches the provided `service` to the task.\n     #\n-    # + serviceToAttach - Ballerina `service` object which needs to be attached to the task.\n-    # + attachments - Set of optional parameters which needs to passed inside the resources.\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + serviceToAttach - Ballerina `service` object which needs to be attached to the task\n+    # + attachments - Set of optional parameters which needs to passed inside the resources\n+    # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzY5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407873692", "bodyText": "Fixed in all places", "author": "aashikam", "createdAt": "2020-04-14T05:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDY5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634696", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + attachedService - Ballerina `service` object which needs to be detached from the task\n          \n          \n            \n                # + attachedService - Ballerina `service` object, which needs to be detached from the task", "author": "praneesha", "createdAt": "2020-04-10T07:13:02Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -40,10 +40,10 @@ public type Scheduler object {\n         }\n     }\n \n-    # Detach the provided `service` from the task.\n+    # Detaches the provided `service` from the task.\n     #\n-    # + attachedService - ballerina `service` object which needs to be detached from the task.\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + attachedService - Ballerina `service` object which needs to be detached from the task", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:13:10Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -40,10 +40,10 @@ public type Scheduler object {\n         }\n     }\n \n-    # Detach the provided `service` from the task.\n+    # Detaches the provided `service` from the task.\n     #\n-    # + attachedService - ballerina `service` object which needs to be detached from the task.\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + attachedService - Ballerina `service` object which needs to be detached from the task\n+    # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3Mzg3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407873871", "bodyText": "Fixed in all places", "author": "aashikam", "createdAt": "2020-04-14T05:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDc3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634778", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:13:18Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -54,7 +54,7 @@ public type Scheduler object {\n \n     # Starts running the task. Task Scheduler will not run until this has been called.\n     #\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDgwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634809", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n          \n            \n                # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:13:25Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -65,7 +65,7 @@ public type Scheduler object {\n \n     # Stops the task. This will stop, after finish running the existing jobs.\n     #\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + return - `task:SchedulerError` if the process failed due to any reason, nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDg3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634877", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:SchedulerError` if an error is occurred while pausing, nil otherwise\n          \n          \n            \n                # + return - `task:SchedulerError` if an error is occurred while pausing, nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:13:37Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -76,7 +76,7 @@ public type Scheduler object {\n \n     # Pauses the task.\n     #\n-    # + return - Returns `task:SchedulerError` if an error is occurred while resuming, nil Otherwise.\n+    # + return - `task:SchedulerError` if an error is occurred while pausing, nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634928", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:SchedulerError` when an error occurred while resuming, nil otherwise\n          \n          \n            \n                # + return - `task:SchedulerError` when an error occurred while resuming, nil otherwise\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:13:45Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -87,7 +87,7 @@ public type Scheduler object {\n \n     # Resumes a paused task.\n     #\n-    # + return - Returns `task:SchedulerError` when an error occurred while pausing, nil Otherwise.\n+    # + return - `task:SchedulerError` when an error occurred while resuming, nil otherwise", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDk4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406634986", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if the `Scheduler` is already started, `false` if the `Scheduler` is\n          \n          \n            \n                # + return - `true` if the `Scheduler` is already started, `false` if the `Scheduler` is\n          \n      \n    \n    \n  \n\nSame as above. Also, please refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:13:55Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -98,8 +98,8 @@ public type Scheduler object {\n \n     # Checks whether the task listener is started or not.\n     #\n-    # + return - Returns `true` if the Scheduler is already started, `false` if the Scheduler is\n-    #               not started yet or stopped calling the `Scheduler.stop()` function.\n+    # + return - `true` if the `Scheduler` is already started, `false` if the `Scheduler` is", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNTA5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406635090", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Error type specific to `task:Scheduler` object functions.\n          \n          \n            \n            # Error type specific to the `task:Scheduler` object functions.", "author": "praneesha", "createdAt": "2020-04-10T07:14:14Z", "path": "stdlib/task/src/main/ballerina/src/task/task_errors.bal", "diffHunk": "@@ -16,23 +16,23 @@\n \n # Record type to hold the details of an error.\n #\n-# + message - Specific error message of the error.\n-# + cause - Any other error, which causes this error.\n+# + message - Error message describing the error occurred\n+# + cause - Any other error, which causes this error\n public type Detail record {\n     string message;\n     error cause?;\n };\n \n-# Error reason type for the `task:SchedulerError` type.\n+# Used as the error reason for the `task:SchedulerError` type.\n public const SCHEDULER_ERROR_REASON = \"{ballerina/task}SchedulerError\";\n \n-# Error occurred in `task:Scheduler` object functions.\n+# Error type specific to `task:Scheduler` object functions.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNTEzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406635135", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Error type specific to `task:Listener` object functions.\n          \n          \n            \n            # Error type specific to the `task:Listener` object functions.", "author": "praneesha", "createdAt": "2020-04-10T07:14:24Z", "path": "stdlib/task/src/main/ballerina/src/task/task_errors.bal", "diffHunk": "@@ -16,23 +16,23 @@\n \n # Record type to hold the details of an error.\n #\n-# + message - Specific error message of the error.\n-# + cause - Any other error, which causes this error.\n+# + message - Error message describing the error occurred\n+# + cause - Any other error, which causes this error\n public type Detail record {\n     string message;\n     error cause?;\n };\n \n-# Error reason type for the `task:SchedulerError` type.\n+# Used as the error reason for the `task:SchedulerError` type.\n public const SCHEDULER_ERROR_REASON = \"{ballerina/task}SchedulerError\";\n \n-# Error occurred in `task:Scheduler` object functions.\n+# Error type specific to `task:Scheduler` object functions.\n public type SchedulerError error<SCHEDULER_ERROR_REASON, Detail>;\n \n-# Error reason type for the `task:ListenerError` type.\n+# Used as the error reason for the `task:ListenerError` type.\n public const LISTENER_ERROR_REASON = \"{ballerina/task}ListenerError\";\n \n-# Errors occurred in `task:Listener` object functions.\n+# Error type specific to `task:Listener` object functions.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2OTcyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406669724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Task Timer configuration record to configure a Task Listener.", "author": "ThisaruGuruge", "createdAt": "2020-04-10T08:56:32Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -18,12 +14,10 @@ Below are the two types of configurations that can be used to configure a Task L\n \n The `TimerConfiguration` can be used to configure a task that needs to be executed periodically.\n \n-The following example creates a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times. The `onTrigger ` resource function is triggered when the clock goes off. The `count` variable is incremented by the task.\n+The following code creates a listener, which registers a task with an initial delay of 3000 milliseconds and is\n+ executed every 1000 milliseconds for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n // Task Timer configuration record to configure a Task Listener.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MDQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406670401", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following code creates a listener, which registers a task with an initial delay of 3000 milliseconds and is\n          \n          \n            \n             executed every 1000 milliseconds for 10 times.\n          \n          \n            \n            The following code snippet shows how to create a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times.", "author": "ThisaruGuruge", "createdAt": "2020-04-10T08:58:24Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -18,12 +14,10 @@ Below are the two types of configurations that can be used to configure a Task L\n \n The `TimerConfiguration` can be used to configure a task that needs to be executed periodically.\n \n-The following example creates a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times. The `onTrigger ` resource function is triggered when the clock goes off. The `count` variable is incremented by the task.\n+The following code creates a listener, which registers a task with an initial delay of 3000 milliseconds and is\n+ executed every 1000 milliseconds for 10 times.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406671221", "bodyText": "Check for the other places as well where the lines wrapped by the IDE.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following code creates a task appointment, which registers a service using a CRON expression to execute the task\n          \n          \n            \n             every second for 10 times.\n          \n          \n            \n            The following code snippet shows how to create a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times.", "author": "ThisaruGuruge", "createdAt": "2020-04-10T09:00:22Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -32,32 +26,19 @@ task:TimerConfiguration timerConfiguration = {\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener timer = new(timerConfiguration);\n-\n-int count = 0;\n-\n-// Creating a service on the task Listener.\n-service timerService on timer {\n-    // This resource triggers when the timer goes off.\n-    resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n-    }\n-}\n ```\n \n+For an example on the usage of the `task:Listener` as a timer, see the [Task Service Timer Example](https://ballerina.io/learn/by-example/task-service-timer.html).\n+\n ##### Task Listener as an Appointment\n \n The `AppointmentConfiguration` can be used to schedule an appointment.\n   \n-The following example creates a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times. The `count` variable is incremented by the task.\n+The following code creates a task appointment, which registers a service using a CRON expression to execute the task\n+ every second for 10 times.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTcxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406671712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following code creates a `task:Scheduler` as a timer.\n          \n          \n            \n            The following code snippet shows how to create a `task:Scheduler` as a timer.", "author": "ThisaruGuruge", "createdAt": "2020-04-10T09:01:43Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -95,81 +65,31 @@ Similar to Task Listeners, below are the two types of configurations that an be\n \n A `Scheduler` can be used to create timers via its `TimerConfiguration`.\n \n-The following example creates a `task:Scheduler` as a timer. The `createTimer()` function uses its input values to create a Task Scheduler dynamically. It attaches the `timerService` to the `timer` Scheduler it created. Calling the `timer.start()` function starts the `timer` Scheduler.\n+The following code creates a `task:Scheduler` as a timer.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTg1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r406671856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following code creates a Task Scheduler as an appointment.\n          \n          \n            \n            The following code snippet shows how to create a Task Scheduler as an appointment.", "author": "ThisaruGuruge", "createdAt": "2020-04-10T09:02:05Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -95,81 +65,31 @@ Similar to Task Listeners, below are the two types of configurations that an be\n \n A `Scheduler` can be used to create timers via its `TimerConfiguration`.\n \n-The following example creates a `task:Scheduler` as a timer. The `createTimer()` function uses its input values to create a Task Scheduler dynamically. It attaches the `timerService` to the `timer` Scheduler it created. Calling the `timer.start()` function starts the `timer` Scheduler.\n+The following code creates a `task:Scheduler` as a timer.\n \n ```ballerina\n-import ballerina/io;\n-import ballerina/log;\n-import ballerina/task;\n-\n-public function main() {\n-    createTimer(1000, 0, 10);\n-}\n-\n-function createTimer(int interval, int delay, int recurrences) {\n-    task:TimerConfiguration timerConfiguration = {\n-            intervalInMillis: interval,\n-            initialDelayInMillis: delay,\n-            noOfRecurrences: recurrences\n-    };\n-    task:Scheduler timer = new(timerConfiguration);\n-    \n-    var result  = timer.attach(timerService);\n-    if (result is error) {\n-        log:printError(\"Error attaching service: \", result);\n-        return;\n-    }\n-    result = timer.start();\n-    if (result is error) {\n-        log:printError(\"Error attaching service: \", result);\n-        return;\n-    }\n-}\n-\n-service timerService = service {\n-    resource function onTrigger() {\n-        io:println(\"Task Triggered\");\n-    }\n+task:TimerConfiguration timerConfiguration = {\n+        intervalInMillis: 1000,\n+        initialDelayInMillis: 0,\n+        noOfRecurrences: 10\n };\n+task:Scheduler timer = new(timerConfiguration);\n ```\n \n+For an example on the usage of the `task:Scheduler` as a timer, see the [Task Scheduler Timer Example](https://ballerina.io/learn/by-example/task-scheduler-timer.html).\n+\n #### Task Scheduler as an Appointment\n \n A `Scheduler` can also be used to create appointments via its `AppointmentConfiguration`. \n \n-The following example creates a Task Scheduler as an appointment. The `createAppointment()` function creates an appointment using the CRON expression provided as the input parameter. A service can be attached to the Scheduler using the `attach()` function. Calling the `appointment.start()` function starts the `appointment` Scheduler.\n+The following code creates a Task Scheduler as an appointment.", "originalCommit": "3ee000354c4ce602b34e0f45a4d24fa6ef777d35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "25d83bf59a0d2ab1e7257a303e7eaec572968023", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25d83bf59a0d2ab1e7257a303e7eaec572968023", "message": "Add changes from code review", "committedDate": "2020-04-14T05:27:14Z", "type": "commit"}, {"oid": "595b74d0cabda5700355548867b11712430931b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/595b74d0cabda5700355548867b11712430931b1", "message": "Merge branch 'stdlib-doc-hackathon' of https://github.com/ballerina-platform/ballerina-lang into task-docs", "committedDate": "2020-04-14T05:27:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MTQ2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407981460", "bodyText": "Shall we mention how the service template looks like, something like,\n// Creating a service on the task Listener.\nservice timerService on timer {\n    // This resource triggers when the timer goes off.\n    resource function onTrigger() {\n    }\n}", "author": "daneshk", "createdAt": "2020-04-14T09:06:50Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -18,70 +14,40 @@ Below are the two types of configurations that can be used to configure a Task L\n \n The `TimerConfiguration` can be used to configure a task that needs to be executed periodically.\n \n-The following example creates a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times. The `onTrigger ` resource function is triggered when the clock goes off. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Timer configuration record to configure a Task Listener.\n task:TimerConfiguration timerConfiguration = {\n     intervalInMillis: 1000,\n     initialDelayInMillis: 3000,\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener timer = new(timerConfiguration);\n-\n-int count = 0;\n-\n-// Creating a service on the task Listener.\n-service timerService on timer {\n-    // This resource triggers when the timer goes off.\n-    resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n-    }\n-}", "originalCommit": "595b74d0cabda5700355548867b11712430931b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4Mjk3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408582970", "bodyText": "Added.", "author": "aashikam", "createdAt": "2020-04-15T05:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MTQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MTgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407981827", "bodyText": "Same as above", "author": "daneshk", "createdAt": "2020-04-14T09:07:28Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -18,70 +14,40 @@ Below are the two types of configurations that can be used to configure a Task L\n \n The `TimerConfiguration` can be used to configure a task that needs to be executed periodically.\n \n-The following example creates a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times. The `onTrigger ` resource function is triggered when the clock goes off. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Timer configuration record to configure a Task Listener.\n task:TimerConfiguration timerConfiguration = {\n     intervalInMillis: 1000,\n     initialDelayInMillis: 3000,\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener timer = new(timerConfiguration);\n-\n-int count = 0;\n-\n-// Creating a service on the task Listener.\n-service timerService on timer {\n-    // This resource triggers when the timer goes off.\n-    resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n-    }\n-}\n ```\n \n+For an example on the usage of the `task:Listener` as a timer, see the [Task Service Timer Example](https://ballerina.io/learn/by-example/task-service-timer.html).\n+\n ##### Task Listener as an Appointment\n \n The `AppointmentConfiguration` can be used to schedule an appointment.\n   \n-The following example creates a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Appointment configuration record to task Listener.\n task:AppointmentConfiguration appointmentConfiguration = {\n     // This cron expression will schedule the appointment once every second.\n     appointmentDetails: \"* * * * * ?\",\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener appointment = new(appointmentConfiguration);\n-\n-int count = 0;\n-\n-// Creating a service on the task Listener.\n-service appointmentService on appointment {\n-    // This resource triggers when the appointment is due.\n-    resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n-    }\n-}", "originalCommit": "595b74d0cabda5700355548867b11712430931b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzAxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408583016", "bodyText": "Added", "author": "aashikam", "createdAt": "2020-04-15T05:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MTgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NDczMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407984732", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () if attaching the service is successful\n          \n          \n            \n                # + return - () or else an `error` upon failure to register the listener", "author": "daneshk", "createdAt": "2020-04-14T09:11:52Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -46,7 +46,7 @@ public type Listener object {\n     #\n     # + s - Service to attach to the listener\n     # + name - Name of the service\n-    # + return - Returns nil if attaching the service is successful\n+    # + return - () if attaching the service is successful", "originalCommit": "595b74d0cabda5700355548867b11712430931b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzY0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408583646", "bodyText": "Here the error result is panicked. The error will not be returned. Should the description still be changed?", "author": "aashikam", "createdAt": "2020-04-15T05:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NDczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NTI4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407985287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () if detaching the service is successful\n          \n          \n            \n                # + return - () or else an `error` upon failure to detach the service", "author": "daneshk", "createdAt": "2020-04-14T09:12:40Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -58,15 +58,15 @@ public type Listener object {\n     # Detaches the given `service` from the `task:Listener`.\n     #\n     # + s - Service to be detached from the listener\n-    # + return - Returns nil if detaching the service is successful\n+    # + return - () if detaching the service is successful", "originalCommit": "595b74d0cabda5700355548867b11712430931b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NTU1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407985557", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () if starting the services is successful\n          \n          \n            \n                # + return - () or else an `error` upon failure to start the listener", "author": "daneshk", "createdAt": "2020-04-14T09:13:06Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -58,15 +58,15 @@ public type Listener object {\n     # Detaches the given `service` from the `task:Listener`.\n     #\n     # + s - Service to be detached from the listener\n-    # + return - Returns nil if detaching the service is successful\n+    # + return - () if detaching the service is successful\n     public function __detach(service s) returns error? {\n         return detachExternal(self, s);\n     }\n \n     # Starts dispatching the services attached to the `task:Listener`. This may panic if the service dispatching causes\n     # any error.\n     #\n-    # + return - Returns nil if strating the services is successful\n+    # + return - () if starting the services is successful", "originalCommit": "595b74d0cabda5700355548867b11712430931b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NTk3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407985977", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () if stopping the listener is successful\n          \n          \n            \n                # + return - () or else an `error` upon failure to stop the listener", "author": "daneshk", "createdAt": "2020-04-14T09:13:43Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -80,7 +80,7 @@ public type Listener object {\n     # Gracefully stops the `task:Listener` and the attached services. It will wait if there are any tasks still to be\n     # completed. This may panic if the stopping causes any error.\n     #\n-    # + return - Returns nil if stopping the listener is successful\n+    # + return - () if stopping the listener is successful", "originalCommit": "595b74d0cabda5700355548867b11712430931b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NjI5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r407986298", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () if the stopping the listener is successful\n          \n          \n            \n                # + return - () or else an `error` upon failure to stop the listener", "author": "daneshk", "createdAt": "2020-04-14T09:14:09Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -94,7 +94,7 @@ public type Listener object {\n     # Stops the `task:Listener` and the attached services immediately. This will cancel any ongoing tasks. This may\n     # panic if the stopping causes any error.\n     #\n-    # + return - Returns nil if the stopping the listener is successful\n+    # + return - () if the stopping the listener is successful", "originalCommit": "595b74d0cabda5700355548867b11712430931b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "03f9030c61ed596c90f83450bc4591945da48c2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03f9030c61ed596c90f83450bc4591945da48c2a", "message": "Add changes from code review", "committedDate": "2020-04-15T05:12:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODI5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408598291", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Task `Scheduler` can be used to create timers/appointments dynamically. Service(s) can be attached to the `Scheduler`, so that they can be invoked when the Scheduler is triggered. \n          \n          \n            \n            A Task `Scheduler` can be used to create timers/appointments dynamically. Service(s) can be attached to the `Scheduler` so that they can be invoked when the Scheduler is triggered.", "author": "praneesha", "createdAt": "2020-04-15T05:58:45Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -18,70 +14,54 @@ Below are the two types of configurations that can be used to configure a Task L\n \n The `TimerConfiguration` can be used to configure a task that needs to be executed periodically.\n \n-The following example creates a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times. The `onTrigger ` resource function is triggered when the clock goes off. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Timer configuration record to configure a Task Listener.\n task:TimerConfiguration timerConfiguration = {\n     intervalInMillis: 1000,\n     initialDelayInMillis: 3000,\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener timer = new(timerConfiguration);\n \n-int count = 0;\n-\n-// Creating a service on the task Listener.\n+// Creating a service on the `timer` task Listener.\n service timerService on timer {\n     // This resource triggers when the timer goes off.\n     resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n     }\n }\n ```\n \n+For an example on the usage of the `task:Listener` as a timer, see the [Task Service Timer Example](https://ballerina.io/learn/by-example/task-service-timer.html).\n+\n ##### Task Listener as an Appointment\n \n The `AppointmentConfiguration` can be used to schedule an appointment.\n   \n-The following example creates a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Appointment configuration record to task Listener.\n task:AppointmentConfiguration appointmentConfiguration = {\n     // This cron expression will schedule the appointment once every second.\n     appointmentDetails: \"* * * * * ?\",\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener appointment = new(appointmentConfiguration);\n \n-int count = 0;\n-\n-// Creating a service on the task Listener.\n+// Creating a service on the `appointment` task Listener.\n service appointmentService on appointment {\n     // This resource triggers when the appointment is due.\n     resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n     }\n }\n ```\n \n+For an example on the usage of the `task:Listener` as an appointment, see the [Task Service Appointment Example](https://ballerina.io/learn/by-example/task-service-appointment.html).\n+\n #### Task Schedulers\n \n A Task `Scheduler` can be used to create timers/appointments dynamically. Service(s) can be attached to the `Scheduler`, so that they can be invoked when the Scheduler is triggered. ", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODY0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408598645", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment\n          \n          \n            \n            # + appointmentDetails - A CRON expression as a string or `task:AppointmentData` for scheduling an appointment", "author": "praneesha", "createdAt": "2020-04-15T05:59:45Z", "path": "stdlib/task/src/main/ballerina/src/task/commons.bal", "diffHunk": "@@ -14,35 +14,37 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Configurations related to a Timer\n+# Configurations related to a timer, which are used to define the behavior of a timer when initializing the\n+# `task:Listener`.\n #\n-# + intervalInMillis - Timer interval (in Milliseconds), which triggers the `onTrigger` resource.\n-# + initialDelayInMillis - Delay (in Milliseconds) after which the timer will run.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + intervalInMillis - Timer interval (in milliseconds), which triggers the `onTrigger` resource\n+# + initialDelayInMillis - Delay (in milliseconds) after which the timer will run\n+# + noOfRecurrences - Number of times to trigger the task after which the task stops running\n public type TimerConfiguration record {|\n     int intervalInMillis;\n     int initialDelayInMillis?;\n     int noOfRecurrences?;\n |};\n \n-# Configurations related to an Appointment\n+# Configurations related to an appointment, which are used to define the behavior of an appointment when initializing\n+# the `task:Listener`.\n #\n-# + appointmentDetails - A CronExpression (as a string) or `task:AppointmentDetails` for scheduling an Appointment.\n-# + noOfRecurrences - Number of times to trigger the task, after which the task stops running.\n+# + appointmentDetails - A cron expression as a string or `task:AppointmentData` for scheduling an appointment", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408598737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This cron expression will schedule the appointment once every second.\n          \n          \n            \n                // This CRON expression will schedule the appointment once every second.", "author": "praneesha", "createdAt": "2020-04-15T06:00:01Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -18,70 +14,54 @@ Below are the two types of configurations that can be used to configure a Task L\n \n The `TimerConfiguration` can be used to configure a task that needs to be executed periodically.\n \n-The following example creates a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times. The `onTrigger ` resource function is triggered when the clock goes off. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Timer configuration record to configure a Task Listener.\n task:TimerConfiguration timerConfiguration = {\n     intervalInMillis: 1000,\n     initialDelayInMillis: 3000,\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener timer = new(timerConfiguration);\n \n-int count = 0;\n-\n-// Creating a service on the task Listener.\n+// Creating a service on the `timer` task Listener.\n service timerService on timer {\n     // This resource triggers when the timer goes off.\n     resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n     }\n }\n ```\n \n+For an example on the usage of the `task:Listener` as a timer, see the [Task Service Timer Example](https://ballerina.io/learn/by-example/task-service-timer.html).\n+\n ##### Task Listener as an Appointment\n \n The `AppointmentConfiguration` can be used to schedule an appointment.\n   \n-The following example creates a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Appointment configuration record to task Listener.\n task:AppointmentConfiguration appointmentConfiguration = {\n     // This cron expression will schedule the appointment once every second.", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTE5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599190", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else an `error` upon failure to start the listener\n          \n          \n            \n                # + return - () or else an `error` upon failure to start the listener\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "author": "praneesha", "createdAt": "2020-04-15T06:01:37Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -58,15 +58,15 @@ public type Listener object {\n     # Detaches the given `service` from the `task:Listener`.\n     #\n     # + s - Service to be detached from the listener\n-    # + return - Returns nil if detaching the service is successful\n+    # + return - () or else an `error` upon failure to detach the service\n     public function __detach(service s) returns error? {\n         return detachExternal(self, s);\n     }\n \n     # Starts dispatching the services attached to the `task:Listener`. This may panic if the service dispatching causes\n     # any error.\n     #\n-    # + return - Returns nil if strating the services is successful\n+    # + return - () or else an `error` upon failure to start the listener", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else an `error` upon failure to stop the listener\n          \n          \n            \n                # + return - () or else an `error` upon failure to stop the listener\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "author": "praneesha", "createdAt": "2020-04-15T06:01:57Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -80,7 +80,7 @@ public type Listener object {\n     # Gracefully stops the `task:Listener` and the attached services. It will wait if there are any tasks still to be\n     # completed. This may panic if the stopping causes any error.\n     #\n-    # + return - Returns nil if stopping the listener is successful\n+    # + return - () or else an `error` upon failure to stop the listener", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTM2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599367", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - () or else an `error` upon failure to stop the listener\n          \n          \n            \n                # + return - () or else an `error` upon failure to stop the listener\n          \n      \n    \n    \n  \n\nNeed to specify the error type.", "author": "praneesha", "createdAt": "2020-04-15T06:02:13Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -94,7 +94,7 @@ public type Listener object {\n     # Stops the `task:Listener` and the attached services immediately. This will cancel any ongoing tasks. This may\n     # panic if the stopping causes any error.\n     #\n-    # + return - Returns nil if the stopping the listener is successful\n+    # + return - () or else an `error` upon failure to stop the listener", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTUzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599538", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Resumes a paused `task:Listener`. Calling this on an already running `task:Listener` will not cause any error.\n          \n          \n            \n                # Resumes a paused `task:Listener`. Calling this on an already-running `task:Listener` will not cause any error.", "author": "praneesha", "createdAt": "2020-04-15T06:02:44Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -111,14 +111,14 @@ public type Listener object {\n \n     # Pauses the `task:Listener` and the attached services.\n     #\n-    # + return - Returns `task:ListenerError` if an error is occurred while resuming or nil Otherwise\n+    # + return - `task:ListenerError` if an error is occurred while pausing or else ()\n     public function pause() returns ListenerError? {\n         return pauseExternal(self);\n     }\n \n     # Resumes a paused `task:Listener`. Calling this on an already running `task:Listener` will not cause any error.", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTYwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:ListenerError` if an error is occurred while pausing or else ()\n          \n          \n            \n                # + return - A `task:ListenerError` if an error is occurred while pausing or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:02:56Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -111,14 +111,14 @@ public type Listener object {\n \n     # Pauses the `task:Listener` and the attached services.\n     #\n-    # + return - Returns `task:ListenerError` if an error is occurred while resuming or nil Otherwise\n+    # + return - `task:ListenerError` if an error is occurred while pausing or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTY3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `task:ListenerError` when an error occurred while resuming or else ()\n          \n          \n            \n                # + return -  A `task:ListenerError` when an error occurred while resuming or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:03:11Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -111,14 +111,14 @@ public type Listener object {\n \n     # Pauses the `task:Listener` and the attached services.\n     #\n-    # + return - Returns `task:ListenerError` if an error is occurred while resuming or nil Otherwise\n+    # + return - `task:ListenerError` if an error is occurred while pausing or else ()\n     public function pause() returns ListenerError? {\n         return pauseExternal(self);\n     }\n \n     # Resumes a paused `task:Listener`. Calling this on an already running `task:Listener` will not cause any error.\n     #\n-    # + return - Returns `task:ListenerError` when an error occurred while pausing or nil Otherwise\n+    # + return - `task:ListenerError` when an error occurred while resuming or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTkwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599905", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `task:SchedulerError` if the process failed due to any reason or else ()\n          \n          \n            \n                # + return - A `task:SchedulerError` if the process failed due to any reason or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:03:55Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -21,17 +21,17 @@ public type Scheduler object {\n     # Initializes a `task:Scheduler` object. This may panic if the initialization causes any error due to\n     # a configuration error.\n     #\n-    # + configurations - A `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n-    # `task:Sceduler` behavior\n-    public function __init(TimerConfiguration|AppointmentConfiguration configurations) {\n-        self.taskListener = new(configurations);\n+    # + configuration - The `task:TimerConfiguration` or `task:AppointmentConfiguration` record to define the\n+    #                   `task:Sceduler` behavior\n+    public function __init(TimerConfiguration|AppointmentConfiguration configuration) {\n+        self.taskListener = new(configuration);\n     }\n \n     # Attaches the provided `service` to the task.\n     #\n-    # + serviceToAttach - Ballerina `service` object which needs to be attached to the task.\n-    # + attachments - Set of optional parameters which needs to passed inside the resources.\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + serviceToAttach - Ballerina `service` object, which needs to be attached to the task\n+    # + attachments - Set of optional parameters, which need to be passed inside the resources\n+    # + return - The `task:SchedulerError` if the process failed due to any reason or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTk2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408599961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `task:SchedulerError` if the process failed due to any reason or else ()\n          \n          \n            \n                # + return - A `task:SchedulerError` if the process failed due to any reason or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:04:05Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -40,10 +40,10 @@ public type Scheduler object {\n         }\n     }\n \n-    # Detach the provided `service` from the task.\n+    # Detaches the provided `service` from the task.\n     #\n-    # + attachedService - ballerina `service` object which needs to be detached from the task.\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + attachedService - Ballerina `service` object, which needs to be detached from the task\n+    # + return - The `task:SchedulerError` if the process failed due to any reason or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMDAwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408600009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `task:SchedulerError` if the process failed due to any reason or else ()\n          \n          \n            \n                # + return - A `task:SchedulerError` if the process failed due to any reason or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:04:12Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -54,7 +54,7 @@ public type Scheduler object {\n \n     # Starts running the task. Task Scheduler will not run until this has been called.\n     #\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + return - The `task:SchedulerError` if the process failed due to any reason or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMDA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408600061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `task:SchedulerError` if the process failed due to any reason or else ()\n          \n          \n            \n                # + return - A `task:SchedulerError` if the process failed due to any reason or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:04:21Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -65,7 +65,7 @@ public type Scheduler object {\n \n     # Stops the task. This will stop, after finish running the existing jobs.\n     #\n-    # + return - Returns `task:SchedulerError` if the process failed due to any reason, nil otherwise.\n+    # + return - The `task:SchedulerError` if the process failed due to any reason or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMDA5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408600098", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `task:SchedulerError` if an error is occurred while pausing or else ()\n          \n          \n            \n                # + return - A `task:SchedulerError` if an error is occurred while pausing or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:04:29Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -76,7 +76,7 @@ public type Scheduler object {\n \n     # Pauses the task.\n     #\n-    # + return - Returns `task:SchedulerError` if an error is occurred while resuming, nil Otherwise.\n+    # + return - The `task:SchedulerError` if an error is occurred while pausing or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMDEzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408600137", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The `task:SchedulerError` when an error occurred while resuming or else ()\n          \n          \n            \n                # + return - A `task:SchedulerError` when an error occurred while resuming or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:04:36Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -87,7 +87,7 @@ public type Scheduler object {\n \n     # Resumes a paused task.\n     #\n-    # + return - Returns `task:SchedulerError` when an error occurred while pausing, nil Otherwise.\n+    # + return - The `task:SchedulerError` when an error occurred while resuming or else ()", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMDM0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408600347", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            not started yet or stopped calling the `Scheduler.stop()` function\n          \n          \n            \n                #            not started yet, or stopped calling the `Scheduler.stop()` function\n          \n      \n    \n    \n  \n\nWrong return statement format.", "author": "praneesha", "createdAt": "2020-04-15T06:05:13Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -98,8 +98,8 @@ public type Scheduler object {\n \n     # Checks whether the task listener is started or not.\n     #\n-    # + return - Returns `true` if the Scheduler is already started, `false` if the Scheduler is\n-    #               not started yet or stopped calling the `Scheduler.stop()` function.\n+    # + return - `true` if the `Scheduler` is already started, `false` if the `Scheduler` is\n+    #            not started yet or stopped calling the `Scheduler.stop()` function", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMDQ4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408600482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents Union error type of ballerina/task module. This error type represents any error that can occur during the\n          \n          \n            \n            # Represents the Union error type of the ballerina/task module. This error type represents any error that can occur during the", "author": "praneesha", "createdAt": "2020-04-15T06:05:39Z", "path": "stdlib/task/src/main/ballerina/src/task/task_errors.bal", "diffHunk": "@@ -16,23 +16,23 @@\n \n # Record type to hold the details of an error.\n #\n-# + message - Specific error message of the error.\n-# + cause - Any other error, which causes this error.\n+# + message - Error message describing the error occurred\n+# + cause - Any other error, which causes this error\n public type Detail record {\n     string message;\n     error cause?;\n };\n \n-# Error reason type for the `task:SchedulerError` type.\n+# Used as the error reason for the `task:SchedulerError` type.\n public const SCHEDULER_ERROR_REASON = \"{ballerina/task}SchedulerError\";\n \n-# Error occurred in `task:Scheduler` object functions.\n+# Error type specific to the `task:Scheduler` object functions.\n public type SchedulerError error<SCHEDULER_ERROR_REASON, Detail>;\n \n-# Error reason type for the `task:ListenerError` type.\n+# Used as the error reason for the `task:ListenerError` type.\n public const LISTENER_ERROR_REASON = \"{ballerina/task}ListenerError\";\n \n-# Errors occurred in `task:Listener` object functions.\n+# Error type specific to the `task:Listener` object functions.\n public type ListenerError error<LISTENER_ERROR_REASON, Detail>;\n \n # Represents Union error type of ballerina/task module. This error type represents any error that can occur during the", "originalCommit": "03f9030c61ed596c90f83450bc4591945da48c2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3298e7d99cc50eaec60d1b81d232cf5ce4cc50ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3298e7d99cc50eaec60d1b81d232cf5ce4cc50ab", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T06:16:38Z", "type": "commit"}, {"oid": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "message": "Add changes from code review", "committedDate": "2020-04-15T06:19:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwOTg4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408609886", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Similar to Task Listeners, below are the two types of configurations that an be used to configure a Task Scheduler, either as a timer or as an appointment.\n          \n          \n            \n            Similar to Task Listeners, below are the two types of configurations that can be used to configure a Task Scheduler either as a timer or as an appointment.", "author": "praneesha", "createdAt": "2020-04-15T06:32:25Z", "path": "stdlib/task/src/main/ballerina/src/task/Module.md", "diffHunk": "@@ -18,73 +14,57 @@ Below are the two types of configurations that can be used to configure a Task L\n \n The `TimerConfiguration` can be used to configure a task that needs to be executed periodically.\n \n-The following example creates a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times. The `onTrigger ` resource function is triggered when the clock goes off. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a listener, which registers a task with an initial delay of 3000 milliseconds and is executed every 1000 milliseconds for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Timer configuration record to configure a Task Listener.\n task:TimerConfiguration timerConfiguration = {\n     intervalInMillis: 1000,\n     initialDelayInMillis: 3000,\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener timer = new(timerConfiguration);\n \n-int count = 0;\n-\n-// Creating a service on the task Listener.\n+// Creating a service on the `timer` task Listener.\n service timerService on timer {\n     // This resource triggers when the timer goes off.\n     resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n     }\n }\n ```\n \n+For an example on the usage of the `task:Listener` as a timer, see the [Task Service Timer Example](https://ballerina.io/learn/by-example/task-service-timer.html).\n+\n ##### Task Listener as an Appointment\n \n The `AppointmentConfiguration` can be used to schedule an appointment.\n   \n-The following example creates a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times. The `count` variable is incremented by the task.\n+The following code snippet shows how to create a task appointment, which registers a service using a CRON expression to execute the task every second for 10 times.\n \n ```ballerina\n-import ballerina/log;\n-import ballerina/task;\n-\n-// Task Appointment configuration record to task Listener.\n task:AppointmentConfiguration appointmentConfiguration = {\n     // This cron expression will schedule the appointment once every second.\n     appointmentDetails: \"* * * * * ?\",\n     // Number of recurrences will limit the number of times the timer runs.\n     noOfRecurrences: 10\n };\n \n-// Initialize the listener using pre defined configurations.\n listener task:Listener appointment = new(appointmentConfiguration);\n \n-int count = 0;\n-\n-// Creating a service on the task Listener.\n+// Creating a service on the `appointment` task Listener.\n service appointmentService on appointment {\n     // This resource triggers when the appointment is due.\n     resource function onTrigger() {\n-        log:printInfo(\"Cleaning up...\");\n-        log:printInfo(count.toString());\n-        count = count + 1;\n     }\n }\n ```\n \n+For an example on the usage of the `task:Listener` as an appointment, see the [Task Service Appointment Example](https://ballerina.io/learn/by-example/task-service-appointment.html).\n+\n #### Task Schedulers\n \n-A Task `Scheduler` can be used to create timers/appointments dynamically. Service(s) can be attached to the `Scheduler`, so that they can be invoked when the Scheduler is triggered. \n+A Task `Scheduler` can be used to create timers/appointments dynamically. Service(s) can be attached to the `Scheduler` so that they can be invoked when the Scheduler is triggered. \n \n Similar to Task Listeners, below are the two types of configurations that an be used to configure a Task Scheduler, either as a timer or as an appointment.", "originalCommit": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMDQyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408610422", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gracefully stops the `task:Listener` and the attached services. It will wait if there are any tasks still to be\n          \n          \n            \n                # Stops the `task:Listener` and the attached services gracefully. It will wait if there are any tasks still to be", "author": "praneesha", "createdAt": "2020-04-15T06:33:54Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -80,7 +80,7 @@ public type Listener object {\n     # Gracefully stops the `task:Listener` and the attached services. It will wait if there are any tasks still to be", "originalCommit": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMDY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408610659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `task:ListenerError` if an error is occurred while pausing or else ()\n          \n          \n            \n                # + return - A `task:ListenerError` if an error occurred while pausing or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:34:31Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -111,14 +111,14 @@ public type Listener object {\n \n     # Pauses the `task:Listener` and the attached services.\n     #\n-    # + return - Returns `task:ListenerError` if an error is occurred while resuming or nil Otherwise\n+    # + return - A `task:ListenerError` if an error is occurred while pausing or else ()", "originalCommit": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMDg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408610879", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return -  A `task:ListenerError` when an error occurred while resuming or else ()\n          \n          \n            \n                # + return -  A `task:ListenerError` if an error occurred while resuming or else ()", "author": "praneesha", "createdAt": "2020-04-15T06:35:08Z", "path": "stdlib/task/src/main/ballerina/src/task/listener.bal", "diffHunk": "@@ -111,14 +111,14 @@ public type Listener object {\n \n     # Pauses the `task:Listener` and the attached services.\n     #\n-    # + return - Returns `task:ListenerError` if an error is occurred while resuming or nil Otherwise\n+    # + return - A `task:ListenerError` if an error is occurred while pausing or else ()\n     public function pause() returns ListenerError? {\n         return pauseExternal(self);\n     }\n \n-    # Resumes a paused `task:Listener`. Calling this on an already running `task:Listener` will not cause any error.\n+    # Resumes a paused `task:Listener`. Calling this on an already-running `task:Listener` will not cause any error.\n     #\n-    # + return - Returns `task:ListenerError` when an error occurred while pausing or nil Otherwise\n+    # + return -  A `task:ListenerError` when an error occurred while resuming or else ()", "originalCommit": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTEyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408611127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Stops the task. This will stop, after finish running the existing jobs.\n          \n          \n            \n                # Stops the task. This will stop after running the existing jobs.", "author": "praneesha", "createdAt": "2020-04-15T06:35:51Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -65,7 +65,7 @@ public type Scheduler object {\n \n     # Stops the task. This will stop, after finish running the existing jobs.", "originalCommit": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTMyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408611320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if the `Scheduler` is already started, `false` if the `Scheduler` is\n          \n          \n            \n                # + return - `true` if the `Scheduler` is already started or else `false` if the `Scheduler` is", "author": "praneesha", "createdAt": "2020-04-15T06:36:28Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -98,8 +98,8 @@ public type Scheduler object {\n \n     # Checks whether the task listener is started or not.\n     #\n-    # + return - Returns `true` if the Scheduler is already started, `false` if the Scheduler is\n-    #               not started yet or stopped calling the `Scheduler.stop()` function.\n+    # + return - `true` if the `Scheduler` is already started, `false` if the `Scheduler` is", "originalCommit": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMTM5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22559#discussion_r408611397", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            not started yet, or stopped calling the `Scheduler.stop()` function\n          \n          \n            \n                #            not started yet or stopped calling the `Scheduler.stop()` function", "author": "praneesha", "createdAt": "2020-04-15T06:36:38Z", "path": "stdlib/task/src/main/ballerina/src/task/scheduler.bal", "diffHunk": "@@ -98,8 +98,8 @@ public type Scheduler object {\n \n     # Checks whether the task listener is started or not.\n     #\n-    # + return - Returns `true` if the Scheduler is already started, `false` if the Scheduler is\n-    #               not started yet or stopped calling the `Scheduler.stop()` function.\n+    # + return - `true` if the `Scheduler` is already started, `false` if the `Scheduler` is\n+    #            not started yet, or stopped calling the `Scheduler.stop()` function", "originalCommit": "102ea8ff8b61c9f9abe8b58cc96ece424d69a9ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46a0ace2b2c306a7bde24efed995e5ee7835681a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46a0ace2b2c306a7bde24efed995e5ee7835681a", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T13:38:48Z", "type": "commit"}]}