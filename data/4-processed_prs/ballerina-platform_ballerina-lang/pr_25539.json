{"pr_number": 25539, "pr_title": "Implementing an encoding scheme for quoted identifiers", "pr_createdAt": "2020-08-31T07:42:21Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539", "timeline": [{"oid": "6f1f3e4bea25214ddf3465b4cbbd9c1ab7c540ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f1f3e4bea25214ddf3465b4cbbd9c1ab7c540ac", "message": "Implement support for member access", "committedDate": "2020-09-04T08:05:05Z", "type": "forcePushed"}, {"oid": "c0071260fb65c37fef50a740d59d4846f675a1e8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0071260fb65c37fef50a740d59d4846f675a1e8", "message": "Fix unit test failure", "committedDate": "2020-09-05T14:20:07Z", "type": "forcePushed"}, {"oid": "c1a824916017ccd21adc4e6028b5c2795860ad76", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1a824916017ccd21adc4e6028b5c2795860ad76", "message": "Fix testerina failures", "committedDate": "2020-09-07T06:54:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3OTAxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484679019", "bodyText": "extra new line", "author": "riyafa", "createdAt": "2020-09-08T06:28:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +248,79 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+", "originalCommit": "c1a824916017ccd21adc4e6028b5c2795860ad76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwMDQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484700497", "bodyText": "move $_init to a constant", "author": "HindujaB", "createdAt": "2020-09-08T07:15:42Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/services/JVMEmbeddedExecutor.java", "diffHunk": "@@ -96,7 +96,7 @@ private void runStartOnSchedule(String moduleName, String moduleVersion, Schedul\n             throws RuntimeException {\n         try {\n             Class<?> initClazz = Class.forName(\"ballerina.\" + moduleName + \".\" +\n-                                                       moduleVersion.replace(\".\", \"_\") + \".___init\");\n+                                                       moduleVersion.replace(\".\", \"_\") + \".$_init\");\n             final Method initMethod = initClazz.getDeclaredMethod(\"$moduleStart\", Strand.class);", "originalCommit": "c1a824916017ccd21adc4e6028b5c2795860ad76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxMDkxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484710911", "bodyText": "write the logic using StringBuilder", "author": "HindujaB", "createdAt": "2020-09-08T07:34:17Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +110,20 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    public static String decodeTypeName(String typeName) {\n+        if (typeName == null) {", "originalCommit": "c1a824916017ccd21adc4e6028b5c2795860ad76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNzU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484717582", "bodyText": "Analyse the reason of replacing (readonly  type -at master)", "author": "HindujaB", "createdAt": "2020-09-08T07:46:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {", "originalCommit": "c1a824916017ccd21adc4e6028b5c2795860ad76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyODgwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489128809", "bodyText": "We can't move this logic to jvm desugar phase, because some type names are called from instruction level. (Eg. NEW_TYPEDESC)", "author": "HindujaB", "createdAt": "2020-09-16T02:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxNzU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxODkyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484718925", "bodyText": "rename rewriteCallterminator()", "author": "HindujaB", "createdAt": "2020-09-08T07:48:31Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -131,20 +132,24 @@ static void createFunctionPointer(MethodVisitor mv, String className, String lam\n     }\n \n     /**\n-     * Cleanup type name by replacing '$' with '_'.\n+     * Cleanup type name by replacing '/ ' with '_' for readonly types.\n      *\n      * @param name name to be replaced and cleaned\n      * @return cleaned name\n      */\n-    static String cleanupTypeName(String name) {\n-        return name.replaceAll(\"[/$ .]\", \"_\");\n+    static String cleanupReadOnlyTypeName(String name) {\n+        return name.contains(\"readonly\") ? name.replaceAll(\"[/ .]\", \"_\") : name;\n     }\n \n     static String cleanupPathSeparators(String name) {\n         name = cleanupBalExt(name);\n         return name.replace(WINDOWS_PATH_SEPERATOR, JAVA_PACKAGE_SEPERATOR);\n     }\n \n+    static String rewriteInsName(String value) {", "originalCommit": "c1a824916017ccd21adc4e6028b5c2795860ad76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcyOTg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r484729881", "bodyText": "move to jvmDesugar if possible", "author": "HindujaB", "createdAt": "2020-09-08T08:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcxODkyNQ=="}], "type": "inlineReview"}, {"oid": "2e8b4366de6012ac5077f968983eb78755dd4b53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e8b4366de6012ac5077f968983eb78755dd4b53", "message": "Fix encode implementation", "committedDate": "2020-09-08T21:04:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MzQzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485363439", "bodyText": "add todo saying remove after adding $ to all generated names in front-end\ncreate an issue and link it", "author": "HindujaB", "createdAt": "2020-09-09T06:18:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenUtil.java", "diffHunk": "@@ -257,7 +262,8 @@ static String getStrandMetadataVarName(String parentFunction) {\n     }\n \n     public static String cleanupFunctionName(String functionName) {\n-        return functionName.replaceAll(\"[\\\\.:/<>]\", \"_\");\n+        return functionName.matches(\"(.*)[\\\\.:/<>](.*)\") ? \"$\" + functionName.replaceAll(\"[\\\\.:/<>]\", \"_\") :", "originalCommit": "2e8b4366de6012ac5077f968983eb78755dd4b53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MTk0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485381940", "bodyText": "check for issues with read-only identifiers with special characters", "author": "HindujaB", "createdAt": "2020-09-09T06:59:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1513,7 +1513,7 @@ private static void loadUserDefinedType(MethodVisitor mv, BType bType) {\n      */\n     private static String getTypeFieldName(String typeName) {\n \n-        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupTypeName(typeName));\n+        return String.format(\"$type$%s\", JvmCodeGenUtil.cleanupReadOnlyTypeName(typeName));", "originalCommit": "2e8b4366de6012ac5077f968983eb78755dd4b53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MzMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485383337", "bodyText": "try to move it to jvm desugar phase", "author": "HindujaB", "createdAt": "2020-09-09T07:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NDg2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485384860", "bodyText": "use readonly type tag", "author": "HindujaB", "createdAt": "2020-09-09T07:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4MTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM4NzQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485387495", "bodyText": "check if we need encoding for these identifiers if we don't use the encoded identifiers", "author": "HindujaB", "createdAt": "2020-09-09T07:11:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -1287,7 +1290,7 @@ private void createRecordGetKeysMethod(ClassWriter cw, Map<String, BField> field\n             Label ifNotPresent = new Label();\n \n             // If its an optional field, generate if-condition to check the presense of the field.\n-            String fieldName = optionalField.name.value;\n+            String fieldName = IdentifierEncoder.decodeIdentifiers(optionalField.name.value);", "originalCommit": "2e8b4366de6012ac5077f968983eb78755dd4b53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMTIzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485411230", "bodyText": "change the other part into else {...}", "author": "HindujaB", "createdAt": "2020-09-09T07:54:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;", "originalCommit": "2e8b4366de6012ac5077f968983eb78755dd4b53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxNDIyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485414222", "bodyText": "change logic where check $#xxxx inside loops", "author": "HindujaB", "createdAt": "2020-09-09T07:59:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {\n+        if (encodedName == null) {\n+            return encodedName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < encodedName.length()) {\n+            if (encodedName.charAt(index) == '$' && index + 4 < encodedName.length()) {\n+                String unicodePoint = encodedName.substring(index + 1, index + 5);\n+                if (containsOnlyDigits(unicodePoint)) {\n+                    sb.append((char) Integer.parseInt(unicodePoint));\n+                    index += 5;\n+                    continue;\n+                }\n+            }", "originalCommit": "2e8b4366de6012ac5077f968983eb78755dd4b53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMjUxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r485422511", "bodyText": "get line 94 inside else", "author": "HindujaB", "createdAt": "2020-09-09T08:13:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+                continue;\n+            }\n+            sb.append(identifier.charAt(index));\n+            index++;\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {\n+        if (encodedName == null) {\n+            return encodedName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < encodedName.length()) {\n+            if (encodedName.charAt(index) == '$' && index + 4 < encodedName.length()) {\n+                String unicodePoint = encodedName.substring(index + 1, index + 5);\n+                if (containsOnlyDigits(unicodePoint)) {\n+                    sb.append((char) Integer.parseInt(unicodePoint));\n+                    index += 5;\n+                    continue;\n+                }\n+            }\n+            sb.append(encodedName.charAt(index));\n+            index++;\n+        }\n+        return sb.toString().replaceAll(\"(\\\\$#)(\\\\d{4})\", \"\\\\$$2\");\n+    }\n+\n+    private static boolean containsOnlyDigits(String digitString) {\n+        for (int i = 0; i < digitString.length(); i++) {\n+            if (!Character.isDigit(digitString.charAt(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static String escapeSpecialCharacters(String identifier) {\n+        String specialCharSet = \"([$&+,:;=\\\\?@#|/' \\\\[\\\\}\\\\]<\\\\>.\\\"^*{}~`()%!-])\";\n+        return identifier.replaceAll(\"(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\" + specialCharSet, \"\\\\\\\\$1\");\n+    }\n+\n+    public static String encodeIdentifier(String identifier) {\n+        if (identifier == null) {\n+            return identifier;\n+        }\n+        identifier = identifier.replaceAll(ENCODING_PATTERN, \"\\\\$#$1\");", "originalCommit": "2e8b4366de6012ac5077f968983eb78755dd4b53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b29217b1f468908b0e3c45da39290cad7094280", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b29217b1f468908b0e3c45da39290cad7094280", "message": "Fix encode implementation", "committedDate": "2020-09-11T08:37:29Z", "type": "forcePushed"}, {"oid": "7b9c230698bd4eb127f8908d5c605f79e32630f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b9c230698bd4eb127f8908d5c605f79e32630f0", "message": "Fix immutable type name conflict", "committedDate": "2020-09-11T13:36:11Z", "type": "forcePushed"}, {"oid": "898554a4f3be8d1c874011d5f60bec743c76bd96", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/898554a4f3be8d1c874011d5f60bec743c76bd96", "message": "Clean up repeating tests", "committedDate": "2020-09-12T12:16:14Z", "type": "forcePushed"}, {"oid": "50272b641bd37d692c733118d70ccc346ea32087", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50272b641bd37d692c733118d70ccc346ea32087", "message": "Modify ToString() unit test", "committedDate": "2020-09-13T04:56:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjA3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487892073", "bodyText": "is this failing with your changes?", "author": "Kishanthan", "createdAt": "2020-09-14T12:59:25Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/literals/IdentifierLiteralPackageTest.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * Identifier literal test cases with package.\n  */\n-@Test(groups = { \"disableOnOldParser\" })\n+@Test(groups = { \"disableOnOldParser\", \"brokenOnNewParser\" })", "originalCommit": "50272b641bd37d692c733118d70ccc346ea32087", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MDE0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487960144", "bodyText": "yes. It still need to be fixed.", "author": "HindujaB", "createdAt": "2020-09-14T14:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MDE2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488590163", "bodyText": "fixed in last commit", "author": "HindujaB", "createdAt": "2020-09-15T11:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MjA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzMyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487893323", "bodyText": "Lets add a method description of what this method does and why it is needed.", "author": "Kishanthan", "createdAt": "2020-09-14T13:01:16Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,50 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    public static String decodeTypeName(String typeName) {", "originalCommit": "50272b641bd37d692c733118d70ccc346ea32087", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzkwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487893909", "bodyText": "shall we inverse the if ?", "author": "Kishanthan", "createdAt": "2020-09-14T13:02:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {", "originalCommit": "50272b641bd37d692c733118d70ccc346ea32087", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894030", "bodyText": "same here, shall we inverse the if ?", "author": "Kishanthan", "createdAt": "2020-09-14T13:02:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {\n+                    localVar.metaVarName = encodeIdentifier(localVar.metaVarName);\n+                }\n+            }\n+            for (BIRNode.BIRParameter parameter : function.requiredParams) {\n+                if (parameter.name != null) {", "originalCommit": "50272b641bd37d692c733118d70ccc346ea32087", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDExMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894113", "bodyText": "shall we inverse the if ?", "author": "Kishanthan", "createdAt": "2020-09-14T13:02:31Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmDesugarPhase.java", "diffHunk": "@@ -240,4 +246,78 @@ private static BIRFunctionParameter getFunctionParam(BIRFunctionParameter localV\n \n     private JvmDesugarPhase() {\n     }\n+\n+    static void encodeModuleIdentifiers(BIRNode.BIRPackage module) {\n+        encodeGlobalVariableIdentifiers(module.globalVars);\n+        encodeFunctionIdentifiers(module.functions);\n+        encodeTypeDefIdentifiers(module.typeDefs);\n+    }\n+\n+    private static void encodeTypeDefIdentifiers(List<BIRTypeDefinition> typeDefs) {\n+        for (BIRTypeDefinition typeDefinition : typeDefs) {\n+            typeDefinition.name.value = encodeIdentifier(typeDefinition.name.value);\n+            encodeFunctionIdentifiers(typeDefinition.attachedFuncs);\n+            BType bType = typeDefinition.type;\n+            if (bType.tag == TypeTags.OBJECT) {\n+                BObjectType objectType = (BObjectType) bType;\n+                BObjectTypeSymbol objectTypeSymbol = (BObjectTypeSymbol) bType.tsymbol;\n+                if (objectTypeSymbol.attachedFuncs != null) {\n+                    encodeAttachedFunctionIdentifiers(objectTypeSymbol.attachedFuncs);\n+                }\n+                for (BField field : objectType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+            if (bType.tag == TypeTags.RECORD) {\n+                BRecordType recordType = (BRecordType) bType;\n+                for (BField field : recordType.fields.values()) {\n+                    field.name.value = encodeIdentifier(field.name.value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void encodeFunctionIdentifiers(List<BIRFunction> functions) {\n+        for (BIRFunction function : functions) {\n+            function.name.value = encodeIdentifier(function.name.value);\n+            for (BIRNode.BIRVariableDcl localVar : function.localVars) {\n+                if (localVar.metaVarName != null) {\n+                    localVar.metaVarName = encodeIdentifier(localVar.metaVarName);\n+                }\n+            }\n+            for (BIRNode.BIRParameter parameter : function.requiredParams) {\n+                if (parameter.name != null) {\n+                    parameter.name.value = encodeIdentifier(parameter.name.value);\n+                }\n+            }\n+            encodeWorkerName(function);\n+        }\n+    }\n+\n+    private static void encodeWorkerName(BIRFunction function) {\n+        if (function.workerName != null) {\n+            function.workerName.value = encodeIdentifier(function.workerName.value);\n+        }\n+        for (BIRNode.ChannelDetails channel : function.workerChannels) {\n+            channel.name = encodeIdentifier(channel.name);\n+        }\n+    }\n+\n+    private static void encodeAttachedFunctionIdentifiers(List<BAttachedFunction> functions) {\n+        for (BAttachedFunction function : functions) {\n+            function.funcName.value = encodeIdentifier(function.funcName.value);\n+            function.symbol.name.value = encodeIdentifier(function.symbol.name.value);\n+            if (function.symbol.receiverSymbol != null) {\n+                function.symbol.receiverSymbol.name.value = encodeIdentifier(function.symbol.receiverSymbol.name.value);\n+            }\n+        }\n+    }\n+\n+    private static void encodeGlobalVariableIdentifiers(List<BIRNode.BIRGlobalVariableDcl> globalVars) {\n+        for (BIRNode.BIRGlobalVariableDcl globalVar : globalVars) {\n+            if (globalVar != null) {", "originalCommit": "50272b641bd37d692c733118d70ccc346ea32087", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r487894399", "bodyText": "why this is in a new line?", "author": "Kishanthan", "createdAt": "2020-09-14T13:02:57Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java", "diffHunk": "@@ -1205,7 +1207,8 @@ private void submitToScheduler(BIROperand lhsOp, String moduleClassName, BType a\n     }\n \n     static String getStrandMetadataVarName(String typeName, String parentFunction) {\n-        return STRAND_METADATA_VAR_PREFIX + JvmCodeGenUtil.cleanupTypeName(typeName) + \"$\" + parentFunction + \"$\";\n+        return STRAND_METADATA_VAR_PREFIX + typeName + \"$\" + parentFunction +\n+                \"$\";", "originalCommit": "50272b641bd37d692c733118d70ccc346ea32087", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "19913f8be55c857a62e54d77bf2dd09d23c5146b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/19913f8be55c857a62e54d77bf2dd09d23c5146b", "message": "Add javadoc comment", "committedDate": "2020-09-14T14:57:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NDQ1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488384452", "bodyText": "There should be a new line in between the method desc and param desc.", "author": "Kishanthan", "createdAt": "2020-09-15T04:53:40Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,55 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    /**\n+     * Decode the encoded Type name for runtime name calls.", "originalCommit": "19913f8be55c857a62e54d77bf2dd09d23c5146b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTg0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r488385842", "bodyText": "why testorg/selectively_immutable became testorg_selectively_immutable ?", "author": "Kishanthan", "createdAt": "2020-09-15T04:58:13Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/readonly/SelectivelyImmutableTypeBaloTest.java", "diffHunk": "@@ -57,33 +57,33 @@ public void testImmutableTypesNegative() {\n         int index = 0;\n \n         // Assignment and initialization.\n-        validateError(result, index++, \"incompatible types: expected '(testorg/selectively_immutable:1.0\" +\n-                \".0:MixedRecord & readonly)', found 'testorg/selectively_immutable:1.0.0:MixedRecord'\", 20, 38);\n+        validateError(result, index++, \"incompatible types: expected '(testorg_selectively_immutable:\" +", "originalCommit": "19913f8be55c857a62e54d77bf2dd09d23c5146b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyNjE4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489126188", "bodyText": "reverted in last commit", "author": "HindujaB", "createdAt": "2020-09-16T02:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NTg0Mg=="}], "type": "inlineReview"}, {"oid": "04e543786733e725441cd3e208af47c2cf3958d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04e543786733e725441cd3e208af47c2cf3958d3", "message": "Fix failing package unit test", "committedDate": "2020-09-15T11:25:21Z", "type": "forcePushed"}, {"oid": "0b775bc38e32b9067926134cd5f567b351f04227", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b775bc38e32b9067926134cd5f567b351f04227", "message": "Revert changes in immutabl type naming", "committedDate": "2020-09-16T02:33:45Z", "type": "forcePushed"}, {"oid": "6747d57a3844e296f8bc36b19f611dc8277fa570", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6747d57a3844e296f8bc36b19f611dc8277fa570", "message": "Revert changes in immutable type naming", "committedDate": "2020-09-16T02:34:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489155940", "bodyText": "we can bring this if into while loop condition", "author": "riyafa", "createdAt": "2020-09-16T04:34:59Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -107,6 +108,56 @@ public static boolean isByteLiteral(int intValue) {\n         return (intValue >= BBYTE_MIN_VALUE && intValue <= BBYTE_MAX_VALUE);\n     }\n \n+    /**\n+     * Decode the encoded Type name for runtime name calls.\n+     *\n+     * @param typeName Name of the defined type\n+     * @return decoded name String\n+     */\n+    public static String decodeTypeName(String typeName) {\n+        if (typeName == null) {\n+            return typeName;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < typeName.length()) {\n+            if (typeName.charAt(index) == '$' && index + 4 < typeName.length()) {", "originalCommit": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NTE0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489185146", "bodyText": "This is not possible because we have an else condition inside the loop.", "author": "HindujaB", "createdAt": "2020-09-16T06:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489158660", "bodyText": "This appears to be exactly the same code as decodeTypeName. Can't we reuse code? It is very very important to avoid duplication", "author": "riyafa", "createdAt": "2020-09-16T04:45:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.util;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String decodeIdentifiers(String encodedName) {", "originalCommit": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5MjE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489192177", "bodyText": "modified in last commit", "author": "HindujaB", "createdAt": "2020-09-16T06:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1ODY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTE3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489159179", "bodyText": "If this is a new file shall we change the year?", "author": "riyafa", "createdAt": "2020-09-16T04:48:18Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-service.bal", "diffHunk": "@@ -1,3 +1,19 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NjQ3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489166476", "bodyText": "The file was created in 2017 but without license header. I added it.", "author": "HindujaB", "createdAt": "2020-09-16T05:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTIzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489159234", "bodyText": "If this is a new file shall we change the year?", "author": "riyafa", "createdAt": "2020-09-16T04:48:35Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/literals/identifierliteral/identifier-literal-success.bal", "diffHunk": "@@ -1,130 +1,299 @@\n+// Copyright (c) 2017 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "72845354a5fcd9e6c3e8a6bb8d55df8ad324845e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NjUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489166534", "bodyText": "The file was created in 2017 but without license header. I added it.", "author": "HindujaB", "createdAt": "2020-09-16T05:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1OTIzNA=="}], "type": "inlineReview"}, {"oid": "9fe92dac1e22e8bedfb51a6990f067840eab461c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fe92dac1e22e8bedfb51a6990f067840eab461c", "message": "Move IdentifierEncoder to ballerina-runtime", "committedDate": "2020-09-16T06:23:30Z", "type": "forcePushed"}, {"oid": "9a2af6d3f3dc96cedbbe947cc7937fe7fcb6acb9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a2af6d3f3dc96cedbbe947cc7937fe7fcb6acb9", "message": "Implement encoding scheme for identifiers", "committedDate": "2020-09-16T08:35:00Z", "type": "commit"}, {"oid": "d644228f2bc50948d2965596e6a765a0a29011c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d644228f2bc50948d2965596e6a765a0a29011c8", "message": "Revert \"Implement encoding scheme for identifiers\"\n\nThis reverts commit 760d227e", "committedDate": "2020-09-16T08:36:51Z", "type": "commit"}, {"oid": "f14b19e68d09827caa31c51533da0b58b6ecc895", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f14b19e68d09827caa31c51533da0b58b6ecc895", "message": "Implement encoding scheme for identifiers", "committedDate": "2020-09-16T08:38:25Z", "type": "commit"}, {"oid": "29e34ff5a7861a63308eddaa59b26a4380739fb6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29e34ff5a7861a63308eddaa59b26a4380739fb6", "message": "Implement support for member access", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "8cfd23a42b2b5d010b023a8ca0867c055b540933", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8cfd23a42b2b5d010b023a8ca0867c055b540933", "message": "Modify ToString method and unit tests", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "fd8f814f8032d53333111ec49db8a3b15e785d4c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd8f814f8032d53333111ec49db8a3b15e785d4c", "message": "Fix unit test failure", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "e75283cb209522147aaa4d3bf2c192afed127596", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e75283cb209522147aaa4d3bf2c192afed127596", "message": "Fix testerina failures", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "c76e5ccc620d50e288ab926ef03b3735f83109cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c76e5ccc620d50e288ab926ef03b3735f83109cf", "message": "Fix encode implementation", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "a3be056f14137bf52b6cfc8478a6b50d8cfc92b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3be056f14137bf52b6cfc8478a6b50d8cfc92b5", "message": "Fix immutable type name conflict", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "8e4973322d845ffd70e58bccbc8ac9e3512403c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e4973322d845ffd70e58bccbc8ac9e3512403c5", "message": "Clean up repeating tests", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "580e6e1fc62a67e824e2ac9b40cd98834bb960f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/580e6e1fc62a67e824e2ac9b40cd98834bb960f4", "message": "Clean up integration test", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "5cf1731c9017f0a2bcd3c839af71ef424b2dc28c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5cf1731c9017f0a2bcd3c839af71ef424b2dc28c", "message": "Modify ToString() unit test", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "0db9249ff7b8242ec718e23ab9f27ebf6507df49", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0db9249ff7b8242ec718e23ab9f27ebf6507df49", "message": "Add javadoc comment", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "dfd60390f4e8e0c7c86bb3cdec0229cfdcf3765e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfd60390f4e8e0c7c86bb3cdec0229cfdcf3765e", "message": "Fix failing package unit test", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "7ec497e4e0f9090688b605f573d944b3a685833b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ec497e4e0f9090688b605f573d944b3a685833b", "message": "Revert changes in immutable type naming", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "26b5088182f50ed984053ad17a3d29ef24643b89", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26b5088182f50ed984053ad17a3d29ef24643b89", "message": "Cleanup code changes", "committedDate": "2020-09-16T08:41:15Z", "type": "commit"}, {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "message": "Move IdentifierEncoder to ballerina-runtime", "committedDate": "2020-09-16T08:42:49Z", "type": "commit"}, {"oid": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "message": "Move IdentifierEncoder to ballerina-runtime", "committedDate": "2020-09-16T08:42:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzMzU5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489333595", "bodyText": "String.replaceAll has a performance impact as it is internally compiled like the below\nPattern.compile(regex).matcher(str).replaceAll(repl)\nSo to get some improvement on performance on this encode method, shall we use the below approach ?\nHave the Pattern.compile called once (may be as a class level constant) and then call the match on it within the encode method? That way, it only compiles once\nreferences - https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replaceAll-java.lang.String-java.lang.String-\nSO - https://stackoverflow.com/questions/1466959/string-replaceall-vs-matcher-replaceall-performance-differences", "author": "Kishanthan", "createdAt": "2020-09-16T10:29:14Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/IdentifierEncoder.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.jvm;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+\n+/**\n+ * Identifier encoder to encode user defined identifiers with special characters.\n+ *\n+ * @since 2.0.0\n+ */\n+public class IdentifierEncoder {\n+\n+    private static final String CHAR_PREFIX = \"$\";\n+    private static final String ESCAPE_PREFIX = \"\\\\\";\n+    private static final String ENCODABLE_CHAR_SET = \"\\\\.:;[]/<>$\";\n+    private static final String ENCODING_PATTERN = \"\\\\$(\\\\d{4})\";\n+\n+    private IdentifierEncoder() {\n+    }\n+\n+    private static String encodeSpecialCharacters(String identifier) {\n+        StringBuilder sb = new StringBuilder();\n+        int index = 0;\n+        while (index < identifier.length()) {\n+            if (identifier.charAt(index) == '\\\\' && (index + 1 < identifier.length()) &&\n+                    ENCODABLE_CHAR_SET.contains(Character.toString(identifier.charAt(index + 1)))) {\n+                String unicodePoint = CHAR_PREFIX + String.format(\"%04d\", (int) identifier.charAt(index + 1));\n+                sb.append(unicodePoint);\n+                index += 2;\n+            } else {\n+                sb.append(identifier.charAt(index));\n+                index++;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String escapeSpecialCharacters(String identifier) {\n+        String specialCharSet = \"([$&+,:;=\\\\?@#|/' \\\\[\\\\}\\\\]<\\\\>.\\\"^*{}~`()%!-])\";\n+        return identifier.replaceAll(\"(?<!\\\\\\\\)(?:\\\\\\\\\\\\\\\\)*\" + specialCharSet, \"\\\\\\\\$1\");\n+    }\n+\n+    /**\n+     * Encode the identifiers to avoid using jvm reserved characters.\n+     *\n+     * @param identifier identifier string\n+     * @return encoded identifier\n+     */\n+    public static String encodeIdentifier(String identifier) {\n+        if (identifier == null) {\n+            return identifier;\n+        }\n+        if (identifier.contains(ESCAPE_PREFIX)) {\n+            identifier = encodeSpecialCharacters(identifier);\n+        } else {\n+            identifier = identifier.replaceAll(ENCODING_PATTERN, \"\\\\$#$1\");", "originalCommit": "10662cbc385a6e6feee70edbbab0dc5fdf6ac150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4NzAzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25539#discussion_r489387036", "bodyText": "Changed the replaceAll into matcher.replaceAll()", "author": "HindujaB", "createdAt": "2020-09-16T12:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMzMzU5NQ=="}], "type": "inlineReview"}, {"oid": "9e74a36c03c22ae04559ed977fa622bafbd69e43", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e74a36c03c22ae04559ed977fa622bafbd69e43", "message": "Move regex pattern compilation into static variable", "committedDate": "2020-09-16T12:08:03Z", "type": "commit"}]}