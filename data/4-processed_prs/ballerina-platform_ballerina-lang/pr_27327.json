{"pr_number": 27327, "pr_title": "Remove the need of initial quoted module prefix for predeclared prefixes", "pr_createdAt": "2020-12-03T12:05:00Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327", "timeline": [{"oid": "f75d159a3ce20cce7ee3df1e34f079f11418dd36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f75d159a3ce20cce7ee3df1e34f079f11418dd36", "message": "Remove the need of quoted module prefix\nRemove the need of initial quoted module prefix for predefined module prefixes", "committedDate": "2020-12-02T17:08:15Z", "type": "commit"}, {"oid": "8b61873a547abdf4e8764d5699349daa0587e565", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8b61873a547abdf4e8764d5699349daa0587e565", "message": "Parser testcase", "committedDate": "2020-12-02T17:18:33Z", "type": "commit"}, {"oid": "e389bfdc6123f52120f4f6fd94be3fb03d4dab94", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e389bfdc6123f52120f4f6fd94be3fb03d4dab94", "message": "Handle predeclared prefix of qualified identifier in lexer", "committedDate": "2020-12-03T12:00:27Z", "type": "commit"}, {"oid": "ae8aa90c28100961056aa0bf04ff096ed5b7f3f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae8aa90c28100961056aa0bf04ff096ed5b7f3f7", "message": "Add more test cases", "committedDate": "2020-12-03T12:01:06Z", "type": "commit"}, {"oid": "edab5dfd561e97f9b299dc126de05ad5cddc1ad2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/edab5dfd561e97f9b299dc126de05ad5cddc1ad2", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into identifier-escaps-without-quote", "committedDate": "2020-12-03T12:26:07Z", "type": "commit"}, {"oid": "fd6f11d2f6703e26380c6fbd426c5f7db9789118", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd6f11d2f6703e26380c6fbd426c5f7db9789118", "message": "Update an assert file", "committedDate": "2020-12-03T12:33:03Z", "type": "commit"}, {"oid": "fd6f11d2f6703e26380c6fbd426c5f7db9789118", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd6f11d2f6703e26380c6fbd426c5f7db9789118", "message": "Update an assert file", "committedDate": "2020-12-03T12:33:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwODY4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r535908681", "bodyText": "Shall keep the lexer unchanged and only change the parser?", "author": "SupunS", "createdAt": "2020-12-04T08:07:20Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -791,6 +791,10 @@ private STToken processIdentifierOrKeyword() {\n         }\n \n         String tokenText = getLexeme();\n+        if (isPredeclaredPrefix(tokenText) && peek() == ':') {", "originalCommit": "fd6f11d2f6703e26380c6fbd426c5f7db9789118", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4OTA2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r543089063", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-12-15T06:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwODY4MQ=="}], "type": "inlineReview"}, {"oid": "86df7045882b44dcb5895d03d0d906ed23d863c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86df7045882b44dcb5895d03d0d906ed23d863c1", "message": "Undo changes to ballerina lexer", "committedDate": "2020-12-10T07:06:40Z", "type": "commit"}, {"oid": "a8fbef419caac2f07bb1d23a7368ed7afcec8b02", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8fbef419caac2f07bb1d23a7368ed7afcec8b02", "message": "Change parsing logic of predeclared prefix", "committedDate": "2020-12-15T06:04:32Z", "type": "commit"}, {"oid": "2b439588844e361438da24f6afbcdf2df2b60c74", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b439588844e361438da24f6afbcdf2df2b60c74", "message": "Recovery logic", "committedDate": "2020-12-15T06:05:33Z", "type": "commit"}, {"oid": "b514d2f0d30ec61b35802fb65517ffc6d60321c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b514d2f0d30ec61b35802fb65517ffc6d60321c6", "message": "Negative test cases", "committedDate": "2020-12-15T06:06:07Z", "type": "commit"}, {"oid": "b377c6a2ca46bb99e1e8e1a7628fa53c19035de5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b377c6a2ca46bb99e1e8e1a7628fa53c19035de5", "message": "Undo change to SyntaxTreeJSONGenerator", "committedDate": "2020-12-15T06:07:06Z", "type": "commit"}, {"oid": "c07da24a6da3ce7f8addd3b0906e25cc950a9c00", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c07da24a6da3ce7f8addd3b0906e25cc950a9c00", "message": "Move test cases to predeclared-module-prefix directory", "committedDate": "2020-12-15T06:48:44Z", "type": "commit"}, {"oid": "2dc05ed5fb5f2ec639442ebfdab30ba9c042134a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dc05ed5fb5f2ec639442ebfdab30ba9c042134a", "message": "Fix formatter test failure", "committedDate": "2020-12-15T07:21:17Z", "type": "commit"}, {"oid": "b7afa9e1a92d4a5a9fef46c58d5af2f0e0eaa0fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7afa9e1a92d4a5a9fef46c58d5af2f0e0eaa0fa", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into identifier-escaps-without-quote", "committedDate": "2020-12-15T07:24:56Z", "type": "commit"}, {"oid": "39c44f4b4bef0c99128882cc621a1ff9e285ec76", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39c44f4b4bef0c99128882cc621a1ff9e285ec76", "message": "Fix parser test failure", "committedDate": "2020-12-15T07:37:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MzMzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547043330", "bodyText": "since we are returning from if, we don't need the else block", "author": "SupunS", "createdAt": "2020-12-22T03:13:30Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2354,6 +2362,84 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n         }\n     }\n \n+    private STNode parseQualifiedTypeRefOrTypeDesc(List<STNode> qualifiers, boolean isInConditionalExpr) {\n+        STToken preDeclaredPrefix = consume();\n+        STToken nextNextToken = getNextNextToken();\n+        if (nextNextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            reportInvalidQualifierList(qualifiers);\n+            return parseQualIdentifierWithPredeclPrefix(preDeclaredPrefix, isInConditionalExpr);\n+        } else {", "originalCommit": "39c44f4b4bef0c99128882cc621a1ff9e285ec76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MDk1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547080955", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-12-22T05:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MzMzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NDI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547044299", "bodyText": "shall we invert the condition?", "author": "SupunS", "createdAt": "2020-12-22T03:17:22Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4437,6 +4530,47 @@ private STNode parseTerminalExpression(STNode annots, List<STNode> qualifiers, b\n         return parseTerminalExpression(annots, qualifiers, isRhsExpr, allowActions, isInConditionalExpr);\n     }\n \n+    private STNode parseQualifiedIdentifierOrExpression(boolean isInConditionalExpr, boolean isRhsExpr) {\n+        STToken preDeclaredPrefix = consume();\n+        STToken nextNextToken = getNextNextToken();\n+        if (nextNextToken.kind != SyntaxKind.IDENTIFIER_TOKEN || isKeyKeyword(nextNextToken)) {", "originalCommit": "39c44f4b4bef0c99128882cc621a1ff9e285ec76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MDk5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547080996", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-12-22T05:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NDI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NzQ2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547047464", "bodyText": "shall we add some tests to cover:\n\nglobal/local var-defs starts with a pre-declared prefix? (eg: xml:Element x = ...)\nRecord fields stats with a pre-declared prefix\nCalling a function from langlibs that is not an attached function (e.g: pre-declared-prefix:func-name();)", "author": "SupunS", "createdAt": "2020-12-22T03:30:17Z", "path": "compiler/ballerina-parser/src/test/resources/misc/predeclared-module-prefix/predeclared-module-prefix_01.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+// Override lang.int with custom import\n+import ballerina/foo.bar.baz as int;\n+\n+// Predeclared prefix in annotation and listener decl\n+@int:annot\n+listener stream:Element myListner = getListner();\n+\n+type myRecord record {\n+    int a;\n+    *table:tableRecod;\n+};\n+\n+type myObject object {\n+    function foo(int a, any b);\n+    *object:customObj;\n+};\n+\n+public function foo() returns int:c {\n+    // Using module prefix with predeclared prefix\n+    int a = int:sum(1, 2, 3);", "originalCommit": "39c44f4b4bef0c99128882cc621a1ff9e285ec76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MTIwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547081209", "bodyText": "Done. 3rd test case was already there. int:sum(1, 2, 3);", "author": "rdulmina", "createdAt": "2020-12-22T05:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NzQ2NA=="}], "type": "inlineReview"}, {"oid": "fa1c224bcd44c63edcf3bc19111ecd7efd6db5f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa1c224bcd44c63edcf3bc19111ecd7efd6db5f2", "message": "Add review suggestions", "committedDate": "2020-12-22T05:49:27Z", "type": "commit"}, {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01429e924204d2b0acdbba74837cef1413f8bf8c", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into identifier-escaps-without-quote", "committedDate": "2020-12-22T06:20:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552121583", "bodyText": "predeclared-prefix should always be followed by colon and identifier right?\nwhy don't we simply check colon and identifier in isQualifiedIdentifierPredeclaredPrefix and call parseQualifiedIdentifier here?\nThen we can keep the rest of the method intact?", "author": "lochana-chathura", "createdAt": "2021-01-05T18:42:03Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2291,6 +2295,9 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n                                                boolean isInConditionalExpr) {\n         parseTypeDescQualifiers(qualifiers);\n         STToken nextToken = peek();\n+        if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {\n+            return parseQualifiedTypeRefOrTypeDesc(qualifiers, isInConditionalExpr);", "originalCommit": "01429e924204d2b0acdbba74837cef1413f8bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3NDM1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552374352", "bodyText": "We provide recovery for the last identifier of the qualified identifier", "author": "rdulmina", "createdAt": "2021-01-06T05:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4MTMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552381328", "bodyText": "I see. if there's a predeclared-qualified identifier we simply parse it otherwise we stick to the normal way of parsing.\nwouldn't that make things simple in all places?\nMy concern is, whether it is worth doing recovery for missing identifier in  \"predeclared-qualified identifier\" at the cost of making the code base bit more complex.", "author": "lochana-chathura", "createdAt": "2021-01-06T05:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MzUwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555553507", "bodyText": "We agreed upon doing recovery for last identifier.", "author": "lochana-chathura", "createdAt": "2021-01-12T07:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyOTgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552129819", "bodyText": "Whenever we need to call parseTypeReference() we have to call it twice for identifier and isQualifiedIdentifierPredeclaredPrefix.\nShall we use a isTypeReferenceToken call so the current method has only one level of abstraction? i.e. whoever call parseTypeReference() does not need to worry about its internal composition.", "author": "lochana-chathura", "createdAt": "2021-01-05T18:57:39Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5610,19 +5750,19 @@ private STNode parseObjectConstructorExpression(STNode annots, List<STNode> qual\n      * @return Parsed type reference or empty node\n      */\n     private STNode parseObjectConstructorTypeReference() {\n-        STNode typeReference;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case IDENTIFIER_TOKEN:\n-                typeReference = parseTypeReference();\n-                break;\n+                return parseTypeReference();\n             case OPEN_BRACE_TOKEN:\n                 return STNodeFactory.createEmptyNode();\n             default:\n+                if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {", "originalCommit": "01429e924204d2b0acdbba74837cef1413f8bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3ODU3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552378571", "bodyText": "+1", "author": "rdulmina", "createdAt": "2021-01-06T05:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyOTgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzOTY3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552139671", "bodyText": "similarly can use isClassDescriptorToken", "author": "lochana-chathura", "createdAt": "2021-01-05T19:17:03Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4567,6 +4699,9 @@ private STNode parseNewKeywordRhs(SyntaxKind kind, STNode newKeyword) {\n             case STREAM_KEYWORD:\n                 return parseTypeDescriptorInNewExpr(newKeyword);\n             default:\n+                if (isQualifiedIdentifierPredeclaredPrefix(kind)) {", "originalCommit": "01429e924204d2b0acdbba74837cef1413f8bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4MTc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552381783", "bodyText": "+1", "author": "rdulmina", "createdAt": "2021-01-06T05:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzOTY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0MTMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552141300", "bodyText": "!IsAnnotTagReferenceToken(nextTokenKind)", "author": "lochana-chathura", "createdAt": "2021-01-05T19:20:18Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7596,7 +7736,8 @@ private STNode parseAnnotations() {\n     private STNode parseAnnotation() {\n         STNode atToken = parseAtToken();\n         STNode annotReference;\n-        if (peek().kind != SyntaxKind.IDENTIFIER_TOKEN) {\n+        SyntaxKind nextTokenKind = peek().kind;\n+        if (nextTokenKind != SyntaxKind.IDENTIFIER_TOKEN && !isQualifiedIdentifierPredeclaredPrefix(nextTokenKind)) {", "originalCommit": "01429e924204d2b0acdbba74837cef1413f8bf8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NzAxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552387010", "bodyText": "+1", "author": "rdulmina", "createdAt": "2021-01-06T06:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0MTMwMA=="}], "type": "inlineReview"}, {"oid": "dabc4ac81068405888eabcff79b944efafebe128", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dabc4ac81068405888eabcff79b944efafebe128", "message": "Review suggestions", "committedDate": "2021-01-06T06:30:25Z", "type": "commit"}, {"oid": "2e310b3fdff94775563886a84b84a61312841430", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e310b3fdff94775563886a84b84a61312841430", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into identifier-escaps-without-quote", "committedDate": "2021-01-06T09:48:36Z", "type": "commit"}, {"oid": "d46ed32e1f01fedf65599f0774ff4ca6b0bb66e5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d46ed32e1f01fedf65599f0774ff4ca6b0bb66e5", "message": "Refactor code", "committedDate": "2021-01-08T12:32:24Z", "type": "commit"}, {"oid": "dacda100df26c26e89cef98ff2a559ad2b95fff2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dacda100df26c26e89cef98ff2a559ad2b95fff2", "message": "Fix issue in conditional expression parsing\nFix issue in conditional expression parsing with predeclared prefix", "committedDate": "2021-01-11T04:42:52Z", "type": "commit"}, {"oid": "f96621674c696cd75429f92e080db4118942b8c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f96621674c696cd75429f92e080db4118942b8c1", "message": "New line after method", "committedDate": "2021-01-11T04:47:14Z", "type": "commit"}, {"oid": "f77fea284c960360430b76acc4003717f88077b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f77fea284c960360430b76acc4003717f88077b1", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into identifier-escaps-without-quote", "committedDate": "2021-01-11T04:51:02Z", "type": "commit"}, {"oid": "2a3210b8b39dd7c0ea97759c287567b8afc835c4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a3210b8b39dd7c0ea97759c287567b8afc835c4", "message": "Fix issue in conditional expression parsing", "committedDate": "2021-01-11T06:13:11Z", "type": "commit"}, {"oid": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4160d2615f6df033ab9b83c3c3b0c3b264ef297", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into identifier-escaps-without-quote", "committedDate": "2021-01-11T07:41:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU0OTY2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555549665", "bodyText": "extra new line", "author": "lochana-chathura", "createdAt": "2021-01-12T06:56:32Z", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -161,7 +161,9 @@ public void test(String fileName, String path) throws IOException {\n                 \"annot_decl_source_02.bal\", \"class_def_source_11.bal\", \"object_type_def_source_26.bal\",\n                 \"ambiguity_source_32.bal\", \"service_object_constructor_source_01.bal\",\n                 \"service_object_constructor_source_02.bal\", \"object_constructor_source_08.bal\",\n-                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_11.bal\");\n+                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_11.bal\",\n+                \"predeclared-module-prefix_02.bal\");\n+", "originalCommit": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MjAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555552030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return identifier;\n          \n          \n            \n                                return createBuiltinSimpleNameReference(identifier);\n          \n      \n    \n    \n  \n\nWill this solve the problem we discussed offline?", "author": "lochana-chathura", "createdAt": "2021-01-12T07:03:43Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3636,7 +3737,9 @@ private STNode parseQualifiedIdentifier(STNode identifier, boolean isInCondition\n                 addInvalidTokenToNextToken(errorHandler.consumeInvalidToken());\n                 return parseQualifiedIdentifier(identifier, isInConditionalExpr);\n             default:\n-                if (isInConditionalExpr) {\n+                if (isInConditionalExpr && isPredeclaredPrefix) {\n+                    return identifier;", "originalCommit": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU2OTAxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555569012", "bodyText": "No, if isPredeclaredPrefix is true then identifier is already a BuiltinSimpleNameReference", "author": "rdulmina", "createdAt": "2021-01-12T07:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MjAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3MzI3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555573277", "bodyText": "I mean we don't create the wrapper before calling this method. Instead we create the wrapper here?", "author": "lochana-chathura", "createdAt": "2021-01-12T07:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MjAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MzEzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555553133", "bodyText": "extra new line", "author": "lochana-chathura", "createdAt": "2021-01-12T07:06:47Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/ParserRuleContext.java", "diffHunk": "@@ -310,6 +310,9 @@\n     INTERMEDIATE_CLAUSE_START(\"intermediate-clause-start\"),\n     ON_FAIL_CLAUSE(\"on_fail_clause\"),\n     ON_FA(\"on_fail_clause\"),\n+    TYPEDESC_TYPE_DESCRIPTOR(\"typedesc-type-descriptor\"),\n+    TYPEDESC_TYPE_DESCRIPTOR_RHS(\"typedesc-type-descriptor-rhs\"),\n+", "originalCommit": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5892e719577f58f4db1dd0c3394da8fb644b2c60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5892e719577f58f4db1dd0c3394da8fb644b2c60", "message": "Comments", "committedDate": "2021-01-12T07:57:39Z", "type": "commit"}]}