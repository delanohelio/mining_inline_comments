{"pr_number": 24885, "pr_title": "Fix interop for readonly", "pr_createdAt": "2020-07-22T10:28:35Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885", "timeline": [{"oid": "c4b7cbb8f0c17b2b456e0fd2384258b99cea63ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4b7cbb8f0c17b2b456e0fd2384258b99cea63ed", "message": "Add interop support for readonly", "committedDate": "2020-07-22T07:08:08Z", "type": "commit"}, {"oid": "d37a302ad0226df5a74d67d760ccdc044f56267d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d37a302ad0226df5a74d67d760ccdc044f56267d", "message": "Allow returning narrower types as readonly with interop", "committedDate": "2020-07-22T09:18:07Z", "type": "commit"}, {"oid": "1cac70cca05039e0803ebe16ab53b6fa9fac3879", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1cac70cca05039e0803ebe16ab53b6fa9fac3879", "message": "Merge master", "committedDate": "2020-07-22T09:37:35Z", "type": "commit"}, {"oid": "d75849cb262ea46ad399e9ee2735230f7f358604", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d75849cb262ea46ad399e9ee2735230f7f358604", "message": "Merge master", "committedDate": "2020-07-22T18:48:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NzE0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r459577145", "bodyText": "Instead of naming variables as r1, r2 etc. shall we give them meaningful names likereadOnlyNil, readOnlyBoolean and so on. This is because sometimes tests act as documentations to understand certain concepts. It would be nice to have them look clean.", "author": "riyafa", "createdAt": "2020-07-23T16:29:41Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/ballerina_types_as_interop_types.bal", "diffHunk": "@@ -468,7 +468,213 @@ function echoObject(abstract object {string name; int id;} & readonly obj)\n } external;\n \n function echoImmutableRecordField(Details & readonly value, string key) returns boolean = @java:Method {\n-        class: \"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n+     class: \"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n+} external;\n+\n+function testReadOnlyAsParamAndReturnTypes() {\n+    readonly r1 = acceptAndReturnReadOnly(1);\n+    assertTrue(r1 is int);\n+    assertEquality(100, r1);\n+\n+    map<int|string|float> & readonly m0 = {first: 1.0, second: 2};\n+    readonly r2 = acceptAndReturnReadOnly(m0);\n+    assertTrue(r2 is float);\n+    assertEquality(1.0, r2);\n+\n+    map<string> & readonly m1 = {\n+        third: \"baz\",\n+        first: \"foo\",\n+        second: \"bar\"\n+    };\n+    readonly r3 = acceptAndReturnReadOnly(m1);\n+    assertTrue(r3 is string);\n+    assertEquality(\"foo\", r3);\n+\n+    record { } & readonly m2 = {\n+        \"third\": \"baz\",\n+        \"num\": 21231\n+    };\n+    readonly r4 = acceptAndReturnReadOnly(m2);\n+    assertTrue(r4 is ());\n+\n+    readonly object {\n+        int i = 21;\n+\n+        function getInt() returns int {\n+            return self.i;\n+        }\n+    } ob = new;\n+    readonly r5 = acceptAndReturnReadOnly(ob);\n+    assertTrue(r5 is readonly & abstract object { int i; function getInt() returns int; });\n+    var cObj = <abstract object { int i; function getInt() returns int; } & readonly> r5;\n+    assertEquality(21, cObj.getInt());\n+    assertEquality(ob, r5);\n+\n+    readonly & boolean[] arr = [true, false];\n+    readonly r6 = acceptAndReturnReadOnly(arr);\n+    assertTrue(r6 is readonly & boolean[2]);\n+    assertEquality(<boolean[]> [true, false], r6);\n+    assertEquality(arr, r6);\n+}\n+\n+function acceptAndReturnReadOnly(readonly value) returns readonly = @java:Method {\n+     class: \"org/ballerinalang/nativeimpl/jvm/tests/StaticMethods\"\n+} external;\n+\n+function testNarrowerTypesAsReadOnlyReturnTypes() {\n+    readonly r1 = getNilAsReadOnly();", "originalCommit": "d75849cb262ea46ad399e9ee2735230f7f358604", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NjI0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r473576248", "bodyText": "Updated the names in 92806dc. Used r1, r2, etc. originally because the expanded names felt like a mouthful, and since the variables were used immediately after. I've updated it anyway.", "author": "MaryamZi", "createdAt": "2020-08-20T04:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NzE0NQ=="}], "type": "inlineReview"}, {"oid": "532845554de70ecc0a9c090871ef4e788d45c09c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/532845554de70ecc0a9c090871ef4e788d45c09c", "message": "Merge master", "committedDate": "2020-07-27T05:18:44Z", "type": "commit"}, {"oid": "92806dc27d6a1a52a087ab013ab9636dd096f4a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92806dc27d6a1a52a087ab013ab9636dd096f4a8", "message": "Rename test variables", "committedDate": "2020-07-27T07:19:22Z", "type": "commit"}, {"oid": "0263296dc896089e6eca625d69252630e92329c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0263296dc896089e6eca625d69252630e92329c0", "message": "Resolve conflicts and Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-07-30T14:46:29Z", "type": "commit"}, {"oid": "7fee99edd522ee42d338b2766dbf9f46144b4d87", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fee99edd522ee42d338b2766dbf9f46144b4d87", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-08-04T04:56:58Z", "type": "commit"}, {"oid": "d6db633a2b2598b8d34a8d49d1d7dba6167e1166", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6db633a2b2598b8d34a8d49d1d7dba6167e1166", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-08-10T03:07:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1NDI3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r468454276", "bodyText": "Can this be a constant? Do we have to do this for each and every time?", "author": "Kishanthan", "createdAt": "2020-08-11T09:38:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -549,6 +555,72 @@ private boolean isValidReturnBType(Class<?> jType, BType bType, JMethodRequest j\n                 this.symbolTable.arrayJsonType};\n     }\n \n+    private boolean isReadOnlyCompatibleReturnType(Class<?> jType, JMethodRequest jMethodRequest)\n+            throws ClassNotFoundException {\n+        if (jType.getTypeName().equals(J_OBJECT_TNAME)) {\n+            return true;\n+        }\n+\n+        for (BType member : getDefinedReadOnlyMemberTypes()) {\n+            if (isValidReturnBType(jType, member, jMethodRequest)) {\n+                return true;\n+            }\n+        }\n+\n+        if (this.classLoader.loadClass(BError.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BFunctionPointer.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BObject.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            // Service and Object.\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BTypedesc.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BHandle.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BXML.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.isValidListType(jType, jMethodRequest)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BMap.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        return this.classLoader.loadClass(TableValue.class.getCanonicalName()).isAssignableFrom(jType);\n+    }\n+\n+    private BType[] getDefinedReadOnlyMemberTypes() {\n+        return new BType[]{", "originalCommit": "d6db633a2b2598b8d34a8d49d1d7dba6167e1166", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNTE3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r469035170", "bodyText": "Made this a final variable, initialized in the constructor (since we need the symbol table to retrieve the members).", "author": "MaryamZi", "createdAt": "2020-08-12T06:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1NDI3Ng=="}], "type": "inlineReview"}, {"oid": "e936e81de3e97942c57f83bc1490e4c84fb31836", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e936e81de3e97942c57f83bc1490e4c84fb31836", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-08-11T11:25:27Z", "type": "commit"}, {"oid": "6b45f297e9cacedb1be0d249bb5748015b51ddf1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b45f297e9cacedb1be0d249bb5748015b51ddf1", "message": "Move defined readonly type array creation to the constructor", "committedDate": "2020-08-11T11:48:53Z", "type": "commit"}, {"oid": "0f66daefd505985b72d67c0967856844f05b7d01", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0f66daefd505985b72d67c0967856844f05b7d01", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-08-17T04:15:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MjM0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r472382347", "bodyText": "then, can this be moved to symbolTable?", "author": "Kishanthan", "createdAt": "2020-08-18T18:00:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -75,11 +76,27 @@\n \n     private ClassLoader classLoader;\n     private SymbolTable symbolTable;\n+    private final BType[] definedReadOnlyMemberTypes;\n \n     JMethodResolver(ClassLoader classLoader, SymbolTable symbolTable) {\n \n         this.classLoader = classLoader;\n         this.symbolTable = symbolTable;\n+        this.definedReadOnlyMemberTypes = new BType[]{", "originalCommit": "0f66daefd505985b72d67c0967856844f05b7d01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTM0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r472585346", "bodyText": "We don't need this collection of types anywhere else since the read-only analysis is generally based on a flag + helper methods in Types.java. But for the method resolver we need these specifically for an initial isValidReturnBType check.\nShall we leave this here since it may not make sense in other contexts?", "author": "MaryamZi", "createdAt": "2020-08-19T01:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MjM0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3MzUyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r473573524", "bodyText": "ok", "author": "Kishanthan", "createdAt": "2020-08-20T03:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MjM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MzU5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r472383596", "bodyText": "this method does not do anything related to readOnly right?", "author": "Kishanthan", "createdAt": "2020-08-18T18:02:45Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/StaticMethods.java", "diffHunk": "@@ -431,4 +438,79 @@ public static ObjectValue echoObject(ObjectValue obj) {\n     public static boolean echoImmutableRecordField(MapValue value, BString key) {\n         return value.getBooleanValue(key);\n     }\n+\n+    public static Object acceptAndReturnReadOnly(Object value) {", "originalCommit": "0f66daefd505985b72d67c0967856844f05b7d01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NTgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r472585810", "bodyText": "This is the external implementation directly mapped to a Ballerina function that accepts and returns readonly typed values.\n\n  \n    \n      ballerina-lang/tests/jballerina-unit-test/src/test/resources/test-src/javainterop/ballerina_types_as_interop_types.bal\n    \n    \n         Line 520\n      in\n      0f66dae\n    \n    \n    \n    \n\n        \n          \n           function acceptAndReturnReadOnly(readonly value) returns readonly = @java:Method {", "author": "MaryamZi", "createdAt": "2020-08-19T01:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MzU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3MzY3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r473573673", "bodyText": "ok", "author": "Kishanthan", "createdAt": "2020-08-20T03:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4MzU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3Njc5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r473576790", "bodyText": "can we say why these two types are skipped here ?", "author": "Kishanthan", "createdAt": "2020-08-20T04:10:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCastGen.java", "diffHunk": "@@ -730,6 +734,17 @@ private static void generateCheckCastJToBJSON(MethodVisitor mv, BIRVarToJVMIndex\n         generateJCastToBAny(mv, indexMap, sourceType, symbolTable.jsonType);\n     }\n \n+    private static void generateCheckCastJToBReadOnly(MethodVisitor mv, BIRVarToJVMIndexMap indexMap,\n+                                                      JType sourceType) {\n+\n+        if (sourceType.jTag == JTypeTags.JREF || sourceType.jTag == JTypeTags.JARRAY) {", "originalCommit": "0f66daefd505985b72d67c0967856844f05b7d01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzODE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r473638161", "bodyText": "I think the comment at L744 covers this already? Or should we still update this?\nBtw the logic here is similar to other generateCheckCastJToBXxxType methods here.", "author": "MaryamZi", "createdAt": "2020-08-20T06:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3Njc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY0MDcwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r473640706", "bodyText": "Can't we combine the return true if statements using || ? and move all checks or individual checks to a different method if it makes sense", "author": "riyafa", "createdAt": "2020-08-20T06:21:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/interop/JMethodResolver.java", "diffHunk": "@@ -549,6 +571,54 @@ private boolean isValidReturnBType(Class<?> jType, BType bType, JMethodRequest j\n                 this.symbolTable.arrayJsonType};\n     }\n \n+    private boolean isReadOnlyCompatibleReturnType(Class<?> jType, JMethodRequest jMethodRequest)\n+            throws ClassNotFoundException {\n+        if (jType.getTypeName().equals(J_OBJECT_TNAME)) {\n+            return true;\n+        }\n+\n+        for (BType member : definedReadOnlyMemberTypes) {\n+            if (isValidReturnBType(jType, member, jMethodRequest)) {\n+                return true;\n+            }\n+        }\n+\n+        if (this.classLoader.loadClass(BError.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BFunctionPointer.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BObject.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            // Service and Object.\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BTypedesc.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BHandle.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BXML.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }\n+\n+        if (this.isValidListType(jType, jMethodRequest)) {\n+            return true;\n+        }\n+\n+        if (this.classLoader.loadClass(BMap.class.getCanonicalName()).isAssignableFrom(jType)) {\n+            return true;\n+        }", "originalCommit": "0f66daefd505985b72d67c0967856844f05b7d01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MTM2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24885#discussion_r476181366", "bodyText": "Changed in 28cb8ed.", "author": "MaryamZi", "createdAt": "2020-08-25T05:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY0MDcwNg=="}], "type": "inlineReview"}, {"oid": "0281c396e7db9c82351ef346c3f13f7ab8730799", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0281c396e7db9c82351ef346c3f13f7ab8730799", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-08-25T04:47:01Z", "type": "commit"}, {"oid": "28cb8edb2843f16a1df4db6a1af62817312e311a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28cb8edb2843f16a1df4db6a1af62817312e311a", "message": "Refactor code", "committedDate": "2020-08-25T04:56:43Z", "type": "commit"}, {"oid": "833c56f35ef29f679b70a8d0e53bfe933ca2a2e5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/833c56f35ef29f679b70a8d0e53bfe933ca2a2e5", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-08-28T04:29:15Z", "type": "commit"}, {"oid": "72c38eb61c52a39a8fb8f83414c4867fc5d2f8fe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72c38eb61c52a39a8fb8f83414c4867fc5d2f8fe", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-09-02T06:10:00Z", "type": "commit"}, {"oid": "80d233b492d039940091e8778946cdcb03b033f3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80d233b492d039940091e8778946cdcb03b033f3", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-interop", "committedDate": "2020-09-02T09:44:32Z", "type": "commit"}]}