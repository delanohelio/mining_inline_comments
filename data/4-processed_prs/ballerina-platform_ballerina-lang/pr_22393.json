{"pr_number": 22393, "pr_title": "Add subtyping feature and improvements to the Ballerina bindgen tool", "pr_createdAt": "2020-04-01T09:52:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyODY0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#discussion_r401528648", "bodyText": "If you use temp variable to hold the outputPath var and set its values to userDir if null, then we get remove duplicate codes.", "author": "warunalakshitha", "createdAt": "2020-04-01T10:56:06Z", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/command/BindingsGenerator.java", "diffHunk": "@@ -56,90 +58,121 @@\n  */\n public class BindingsGenerator {\n \n-    private String outputPath;\n     private Path modulePath;\n     private Path dependenciesPath;\n+    private Path utilsDirPath;\n+    private String outputPath;\n     private Set<String> classPaths = new HashSet<>();\n     private Set<String> classNames = new HashSet<>();\n+    private static boolean directJavaClass = true;\n     private static final PrintStream errStream = System.err;\n     private static final PrintStream outStream = System.out;\n     private static Path userDir = Paths.get(System.getProperty(USER_DIR));\n \n-    public static boolean directJavaClass = true;\n-    public static Set<String> allClasses = new HashSet<>();\n-    public static Set<String> classListForLooping = new HashSet<>();\n-    public static Set<String> allJavaClasses = new HashSet<>();\n-    public static Set<String> failedClassGens = new HashSet<>();\n+    private static Set<String> allClasses = new HashSet<>();\n+    private static Set<String> classListForLooping = new HashSet<>();\n+    private static Set<String> allJavaClasses = new HashSet<>();\n+    private static Map<String, String> failedClassGens = new HashMap<>();\n \n     void generateJavaBindings() throws BindgenException {\n \n-        ClassLoader classLoader;\n-        try {\n-            if (!this.classPaths.isEmpty()) {\n-                classLoader = getClassLoader(this.classPaths, this.getClass().getClassLoader());\n-            } else {\n-                classLoader = this.getClass().getClassLoader();\n-            }\n-        } catch (BindgenException e) {\n-            throw new BindgenException(\"Error while loading the classpaths.\", e);\n-        }\n+        ClassLoader classLoader = setClassLoader();\n         if (classLoader != null) {\n-            if (this.outputPath == null) {\n-                this.modulePath = Paths.get(userDir.toString(), BALLERINA_BINDINGS_DIR);\n-                this.dependenciesPath = Paths.get(userDir.toString(), BALLERINA_BINDINGS_DIR, DEPENDENCIES_DIR_NAME);\n-            } else {\n-                this.modulePath = Paths.get(outputPath, BALLERINA_BINDINGS_DIR);\n-                this.dependenciesPath = Paths.get(outputPath, BALLERINA_BINDINGS_DIR, DEPENDENCIES_DIR_NAME);\n-            }\n-            outStream.println(\"Generating bindings for: \");\n-            String modulePathString = modulePath.toString();\n-            String utilsDirPath = Paths.get(modulePathString, DEPENDENCIES_DIR_NAME, UTILS_DIR).toString();\n+            setDirectoryPaths();\n+\n+            // Generate bindings for directly specified Java classes.\n+            outStream.println(\"\\nGenerating bindings for: \");\n             generateBindings(classNames, classLoader, modulePath);\n \n+            // Generate bindings for dependent Java classes.\n             if (!classListForLooping.isEmpty()) {\n                 outStream.println(\"\\nGenerating dependency bindings for: \");\n+                setDependentJavaClass();\n             }\n-            createDirectory(dependenciesPath.toString());\n-            directJavaClass = false;\n             while (!classListForLooping.isEmpty()) {\n                 Set<String> newSet = new HashSet<>(classListForLooping);\n                 newSet.removeAll(classNames);\n+                List<String> existingBindings = getExistingBindings(newSet, modulePath.toFile());\n+                newSet.removeAll(existingBindings);\n                 allJavaClasses.addAll(newSet);\n                 classListForLooping.clear();\n                 generateBindings(newSet, classLoader, dependenciesPath);\n             }\n-            createDirectory(utilsDirPath);\n-            writeOutputFile(null, DEFAULT_TEMPLATE_DIR, JOBJECT_TEMPLATE_NAME,\n-                    Paths.get(utilsDirPath, JOBJECT_FILE_NAME).toString(), false);\n-            writeOutputFile(null, DEFAULT_TEMPLATE_DIR, ARRAY_UTILS_TEMPLATE_NAME,\n-                    Paths.get(utilsDirPath, ARRAY_UTILS_FILE_NAME).toString(), false);\n-\n-            Path constantsPath = Paths.get(utilsDirPath, CONSTANTS_FILE_NAME);\n-            Set<String> names = new HashSet<>(allClasses);\n-            if (constantsPath.toFile().exists()) {\n-                getUpdatedConstantsList(constantsPath, names);\n-                notifyExistingDependencies(classNames, dependenciesPath.toFile());\n-            }\n-            writeOutputFile(names, DEFAULT_TEMPLATE_DIR, CONSTANTS_TEMPLATE_NAME, constantsPath.toString(), true);\n \n+            // Generate the required util files.\n+            generateUtilFiles();\n+\n+            // Handle failed binding generations.\n             if (failedClassGens != null) {\n-                errStream.print(\"\\n\");\n-                for (String className : failedClassGens) {\n-                    if (classNames.contains(className)) {\n-                        errStream.println(\"Bindings for '\" + className + \"' class could not be generated.\");\n-                    }\n-                    String simpleClassName = className.substring(className.lastIndexOf('.') + 1);\n-                    writeOutputFile(className, DEFAULT_TEMPLATE_DIR, EMPTY_OBJECT_TEMPLATE_NAME,\n-                            Paths.get(modulePathString, DEPENDENCIES_DIR_NAME,\n-                                    simpleClassName + BAL_EXTENSION).toString(), false);\n-                }\n+                handleFailedClassGens();\n             }\n-            if (classLoader instanceof URLClassLoader) {\n-                try {\n-                    ((URLClassLoader) classLoader).close();\n-                } catch (IOException ignored) {\n-                }\n+        }\n+    }\n+\n+    private ClassLoader setClassLoader() throws BindgenException {\n+\n+        ClassLoader classLoader;\n+        try {\n+            if (!this.classPaths.isEmpty()) {\n+                classLoader = getClassLoader(this.classPaths, this.getClass().getClassLoader());\n+            } else {\n+                outStream.println(\"No classpaths were detected.\");\n+                classLoader = this.getClass().getClassLoader();\n+            }\n+        } catch (BindgenException e) {\n+            throw new BindgenException(\"Error while loading the classpaths.\", e);\n+        }\n+        return classLoader;\n+    }\n+\n+    private void setDirectoryPaths() {\n+\n+        if (outputPath == null) {", "originalCommit": "54f9a85d0c3ba8fb7b1a2d1fbf7925b59c3cfcb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NjE5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#discussion_r401586195", "bodyText": "Simplified the code with a temp variable.", "author": "IrushiL", "createdAt": "2020-04-01T12:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyODY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMDA5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#discussion_r401530096", "bodyText": "extra new line. You also can remove the extra new lines after each method signature as well.", "author": "warunalakshitha", "createdAt": "2020-04-01T10:58:58Z", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JParameter.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.bindgen.model;\n+\n+import java.lang.reflect.Parameter;\n+\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.getAllJavaClasses;\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.setClassListForLooping;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING_ARRAY;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaHandleType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaParamType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getPrimitiveArrayType;\n+\n+/**\n+ * Class for storing specific parameter details of a Java method used for Ballerina bridge code generation.\n+ */\n+public class JParameter {\n+\n+    private String type;\n+    private String externalType;\n+    private String shortTypeName;\n+    private String componentType;\n+    private String fieldName;\n+\n+    private Boolean isObj = false;\n+    private Boolean hasNext = true;\n+    private Boolean isString = false;\n+    private Boolean isObjArray = false;\n+    private Boolean isPrimitiveArray = false;\n+\n+    JParameter(Class parameterClass) {\n+\n+        type = parameterClass.getName();\n+        shortTypeName = getBallerinaParamType(parameterClass);\n+\n+        if (!parameterClass.isPrimitive()) {\n+            isObj = true;\n+        }\n+        if (parameterClass.equals(String.class)) {\n+            isString = true;\n+            shortTypeName = BALLERINA_STRING;\n+        } else if (parameterClass.equals(String[].class)) {\n+            isString = true;\n+            shortTypeName = BALLERINA_STRING_ARRAY;\n+        } else {\n+            if (!parameterClass.isPrimitive()) {\n+                if (parameterClass.isArray()) {\n+                    setArrayAttributes(parameterClass);\n+                } else {\n+                    String paramType = parameterClass.getName();\n+                    if (!getAllJavaClasses().contains(paramType)) {\n+                        setClassListForLooping(paramType);\n+                    }\n+                }\n+            }\n+        }\n+        externalType = getBallerinaHandleType(parameterClass);\n+        fieldName = \"arg\";\n+    }\n+\n+    JParameter(Parameter parameter) {\n+\n+        this(parameter.getType());\n+        fieldName = parameter.getName();\n+", "originalCommit": "54f9a85d0c3ba8fb7b1a2d1fbf7925b59c3cfcb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NjM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22393#discussion_r401586360", "bodyText": "Done.", "author": "IrushiL", "createdAt": "2020-04-01T12:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMDA5Ng=="}], "type": "inlineReview"}, {"oid": "603d5d9a72c56499f795d8143a7bf3c8a2f27bc2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/603d5d9a72c56499f795d8143a7bf3c8a2f27bc2", "message": "Fix the issue with loading inner classes", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "8a98f0977f02a9c7fc5f1f2d34ed5a02c8179772", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a98f0977f02a9c7fc5f1f2d34ed5a02c8179772", "message": "Fix the issue with reading the constants file", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "991377666cc187d132467c112495ea6714e6df24", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/991377666cc187d132467c112495ea6714e6df24", "message": "Improve the file structure of generated bindings and error handling", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "1c960b466efd2bace1024db50803d193e5dae79f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c960b466efd2bace1024db50803d193e5dae79f", "message": "Add support for Java subtyping", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "d7fa641d9ca8ce5f8fdce5a67e03717d2afc8454", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7fa641d9ca8ce5f8fdce5a67e03717d2afc8454", "message": "Refactor the template logic", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "ce5f43f601ce44baaed1a4fea51eb4da442a6562", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce5f43f601ce44baaed1a4fea51eb4da442a6562", "message": "Add object tags for all implemented interfaces", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "0b40a7df7d342d7afaa8e842282f00d0c75f77aa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b40a7df7d342d7afaa8e842282f00d0c75f77aa", "message": "Fix the issue with getting string array from handle", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "032ed3c243864db0d5102d5ea4b25aa6226854fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/032ed3c243864db0d5102d5ea4b25aa6226854fa", "message": "Fix issues related to type mappings", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "d8e038425450889b2a56f13a52cf9efddd3f8947", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d8e038425450889b2a56f13a52cf9efddd3f8947", "message": "Refactor the code and template", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "d69f8eac2e2c73aca560e9f8b36a9f010461da79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d69f8eac2e2c73aca560e9f8b36a9f010461da79", "message": "Fix a compilation issue in the generated template", "committedDate": "2020-04-01T19:38:06Z", "type": "commit"}, {"oid": "2c63857c0e6c32ea060535bda2cc32aac0ac64c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c63857c0e6c32ea060535bda2cc32aac0ac64c9", "message": "Improve and refactor the code", "committedDate": "2020-04-01T19:38:07Z", "type": "commit"}, {"oid": "e7b38de17b8f0e8bad924e3ab8be91e22f53109a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7b38de17b8f0e8bad924e3ab8be91e22f53109a", "message": "Add review changes to the code", "committedDate": "2020-04-01T19:38:07Z", "type": "commit"}, {"oid": "66fe8a005562ea15a65a81decd3301b1ba19558c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66fe8a005562ea15a65a81decd3301b1ba19558c", "message": "Add the since annotation", "committedDate": "2020-04-01T19:38:07Z", "type": "commit"}, {"oid": "66fe8a005562ea15a65a81decd3301b1ba19558c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66fe8a005562ea15a65a81decd3301b1ba19558c", "message": "Add the since annotation", "committedDate": "2020-04-01T19:38:07Z", "type": "forcePushed"}]}