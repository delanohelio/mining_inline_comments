{"pr_number": 21686, "pr_title": "BBE for JDBC and MySQL connectors", "pr_createdAt": "2020-03-11T18:22:34Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686", "timeline": [{"oid": "0dbf798bbcd1189ee954697821546309ae327dca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dbf798bbcd1189ee954697821546309ae327dca", "message": "Add jdbc samples", "committedDate": "2020-03-10T18:45:12Z", "type": "commit"}, {"oid": "a8adcc774ce1bcc7ff17108b44aa2bd75d666f40", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8adcc774ce1bcc7ff17108b44aa2bd75d666f40", "message": "Add jdbc examples", "committedDate": "2020-03-11T12:36:13Z", "type": "commit"}, {"oid": "5e350e8a31d57dafe6fd17a3bb33038042fe9e0c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e350e8a31d57dafe6fd17a3bb33038042fe9e0c", "message": "Add mysql init sample", "committedDate": "2020-03-11T13:57:12Z", "type": "commit"}, {"oid": "f9cf5d5cee6cc25a294966d03a2cbbdf988875ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9cf5d5cee6cc25a294966d03a2cbbdf988875ea", "message": "Merge branch 'sql-connector' into sql-samples", "committedDate": "2020-03-11T13:57:45Z", "type": "commit"}, {"oid": "194c972db3d5f8ccb622ebff4e09e1ca5a24bbb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/194c972db3d5f8ccb622ebff4e09e1ca5a24bbb0", "message": "Add mysql samples", "committedDate": "2020-03-11T18:19:02Z", "type": "commit"}, {"oid": "534591f2fb3f317f5dac6b61976711c69798d5c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/534591f2fb3f317f5dac6b61976711c69798d5c9", "message": "Merge branch 'upstream-master' into sql-samples", "committedDate": "2020-03-11T18:20:56Z", "type": "commit"}, {"oid": "8987081d49db135f73ae3ddb9865d1477495327f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8987081d49db135f73ae3ddb9865d1477495327f", "message": "Fix formatting issues", "committedDate": "2020-03-11T18:30:44Z", "type": "commit"}, {"oid": "1bd5261ced7a0bd5376d5abc6b6b0c61b1f1c501", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bd5261ced7a0bd5376d5abc6b6b0c61b1f1c501", "message": "Use stream query operations in the typed query sample", "committedDate": "2020-03-12T07:23:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MDUyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r391570527", "bodyText": "Add a space between // and Execute.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n          \n          \n            \n                // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n          \n      \n    \n    \n  \n\nCan you check other place as well?", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-03-12T11:54:47Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    //Execute drop table. The sql:ExecuteResult is returned during the successful execution.", "originalCommit": "1bd5261ced7a0bd5376d5abc6b6b0c61b1f1c501", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU4NDczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r391584737", "bodyText": "Included to add BBEs", "author": "sinthuja", "createdAt": "2020-03-12T12:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MDUyNw=="}], "type": "inlineReview"}, {"oid": "15b9c99a02104eb407a0ef4a31bcfc25b7843908", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15b9c99a02104eb407a0ef4a31bcfc25b7843908", "message": "Add complex data type sample for jdbc and mysql connectors.", "committedDate": "2020-03-12T12:13:53Z", "type": "commit"}, {"oid": "7ed3658a2ced035a2f0ad158e1d233a25d3e39dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ed3658a2ced035a2f0ad158e1d233a25d3e39dc", "message": "Update the BBE order", "committedDate": "2020-03-12T12:17:09Z", "type": "commit"}, {"oid": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/957ae2ec8d127233a668ed2b53efb5423b12da2a", "message": "Add missing space between // and beginning of sentence", "committedDate": "2020-03-12T12:24:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNDQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r391804481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    io:println(\"Error occured: \");\n          \n          \n            \n                    io:println(\"Error occurred: \");", "author": "pubudu91", "createdAt": "2020-03-12T18:12:49Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNTE5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r391805190", "bodyText": "The above need to be fixed in other places (looks like 6) as well.", "author": "pubudu91", "createdAt": "2020-03-12T18:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNDQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwNzA1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r391807058", "bodyText": "Shall we wrap this at 80 columns? Otherwise this will cause problems when rendering the example. Refer to https://github.com/ballerina-platform/ballerina-lang/blob/master/docs/bbe-guidelines/bbe-guidelines.md for the practices followed when writing BBEs", "author": "pubudu91", "createdAt": "2020-03-12T18:17:27Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\", \"rootUser\", \"rootPass\", h2Options);", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwODYwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r391808603", "bodyText": "Is there a need for this record to be an open one?", "author": "pubudu91", "createdAt": "2020-03-12T18:20:19Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r391811180", "bodyText": "Applicable to other places where open records are defined", "author": "pubudu91", "createdAt": "2020-03-12T18:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwODYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMzk4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392023987", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The name and type of the attributes within record from the `resultStream` will be automatically\n          \n          \n            \n                // The name and type of the attributes within the record from the `resultStream` will be automatically", "author": "praneesha", "createdAt": "2020-03-13T04:22:07Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If there is any error during the execution of the sql query or iteration of the\n          \n          \n            \n                // If there is any error during the execution of the SQL query or iteration of the", "author": "praneesha", "createdAt": "2020-03-13T04:22:22Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDEyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // be having records in `BinaryType`.\n          \n          \n            \n                // have `BinaryType` records.", "author": "praneesha", "createdAt": "2020-03-13T04:22:52Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDI3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Iterate through the `binaryResultStream`.\n          \n          \n            \n                // Iterate the `binaryResultStream`.", "author": "praneesha", "createdAt": "2020-03-13T04:23:41Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDMyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024329", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The name and type of the attributes within record from the `resultStream` will be automatically\n          \n          \n            \n                // The name and type of the attributes within the record from the `resultStream` will be automatically", "author": "praneesha", "createdAt": "2020-03-13T04:23:57Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDM2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024366", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If there is any error during the execution of the sql query or iteration of the\n          \n          \n            \n                // If there is any error during the execution of the SQL query or iteration of the", "author": "praneesha", "createdAt": "2020-03-13T04:24:09Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDQ0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024445", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // be having records in `ArrayType`.\n          \n          \n            \n                // have `ArrayType` records.", "author": "praneesha", "createdAt": "2020-03-13T04:24:31Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDQ2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Iterate through the `arrayResultStream`.\n          \n          \n            \n                // Iterate the `arrayResultStream`.", "author": "praneesha", "createdAt": "2020-03-13T04:24:39Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The name and type of the attributes within record from the `resultStream` will be automatically\n          \n          \n            \n                // The name and type of the attributes within the record from the `resultStream` will be automatically", "author": "praneesha", "createdAt": "2020-03-13T04:24:49Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDUxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If there is any error during the execution of the sql query or iteration of the\n          \n          \n            \n                // If there is any error during the execution of the SQL query or iteration of the", "author": "praneesha", "createdAt": "2020-03-13T04:24:59Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024650", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n          \n          \n            \n                // have `DateTimeType` records. The Date, Time, DateTime, and Timestamp fields of the database table", "author": "praneesha", "createdAt": "2020-03-13T04:25:36Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024693", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // can be mapped to time:Time, string and int types in ballerina.\n          \n          \n            \n                // can be mapped to time:Time, string, and int types in Ballerina.", "author": "praneesha", "createdAt": "2020-03-13T04:25:49Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024727", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Iterate through the `dateResultStream`.\n          \n          \n            \n                // Iterate the `dateResultStream`.", "author": "praneesha", "createdAt": "2020-03-13T04:25:58Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDc2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024760", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the JDBC client\n          \n          \n            \n                // Initialize the JDBC client.", "author": "praneesha", "createdAt": "2020-03-13T04:26:09Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS BINARY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE BINARY_TYPES (row_id INTEGER NOT NULL,\" +\n+        \"blob_type BLOB(1024), clob_type CLOB(1024), binary_type BINARY(27), PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO BINARY_TYPES (row_id, blob_type, clob_type, binary_type) VALUES\" +\n+        \"(1, X'77736F322062616C6C6572696E6120626C6F6220746573742E', CONVERT('very long text', CLOB),\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS ARRAY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE ARRAY_TYPES (row_id INTEGER NOT NULL, \" +\n+        \"int_array ARRAY, long_array ARRAY,float_array ARRAY, double_array ARRAY, boolean_array ARRAY,\" +\n+        \"string_array ARRAY, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO ARRAY_TYPES (row_id, int_array, long_array, float_array, \" +\n+        \"double_array, boolean_array, string_array) VALUES (1, (1, 2, 3), (100000000, 200000000, 300000000),\" +\n+        \"(245.23, 5559.49, 8796.123), (245.23, 5559.49, 8796.123), (TRUE, FALSE, TRUE), ('Hello', 'Ballerina'))\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS DATE_TIME_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"Insert into DATE_TIME_TYPES (row_id, date_type, time_type, timestamp_type,\" +\n+        \"datetime_type) values (1,'2017-05-23','14:15:23','2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDc4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Executes the complex data type queries.\n          \n          \n            \n                        // Execute the complex data type queries.", "author": "praneesha", "createdAt": "2020-03-13T04:26:19Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS BINARY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE BINARY_TYPES (row_id INTEGER NOT NULL,\" +\n+        \"blob_type BLOB(1024), clob_type CLOB(1024), binary_type BINARY(27), PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO BINARY_TYPES (row_id, blob_type, clob_type, binary_type) VALUES\" +\n+        \"(1, X'77736F322062616C6C6572696E6120626C6F6220746573742E', CONVERT('very long text', CLOB),\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS ARRAY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE ARRAY_TYPES (row_id INTEGER NOT NULL, \" +\n+        \"int_array ARRAY, long_array ARRAY,float_array ARRAY, double_array ARRAY, boolean_array ARRAY,\" +\n+        \"string_array ARRAY, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO ARRAY_TYPES (row_id, int_array, long_array, float_array, \" +\n+        \"double_array, boolean_array, string_array) VALUES (1, (1, 2, 3), (100000000, 200000000, 300000000),\" +\n+        \"(245.23, 5559.49, 8796.123), (245.23, 5559.49, 8796.123), (TRUE, FALSE, TRUE), ('Hello', 'Ballerina'))\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS DATE_TIME_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"Insert into DATE_TIME_TYPES (row_id, date_type, time_type, timestamp_type,\" +\n+        \"datetime_type) values (1,'2017-05-23','14:15:23','2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/DATA_TYPES\", \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        sql:Error? err = initializeTable(jdbcClient);\n+        if (err is sql:Error) {\n+            io:println(\"Sample data table initialization failed!\");\n+            io:println(err);\n+        } else {\n+            // Executes the complex data type queries.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Please note that, the relevant database driver jar\n          \n          \n            \n            // Note that the relevant database driver JAR", "author": "praneesha", "createdAt": "2020-03-13T04:26:47Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,6 @@\n+// This example demonstrates how to use the JDBC client with complex data types such as arrays,\n+// binary, blobs, clob, and date/time fields.\n+// Please note that, the relevant database driver jar", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDkwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n          \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on an", "author": "praneesha", "createdAt": "2020-03-13T04:26:57Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,6 @@\n+// This example demonstrates how to use the JDBC client with complex data types such as arrays,\n+// binary, blobs, clob, and date/time fields.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzOTgyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392639826", "bodyText": "Need a space after //. Shall we fix everywhere?", "author": "MaryamZi", "createdAt": "2020-03-15T04:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNDk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392024974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n          \n          \n            \n            //H2 database and the H2 database driver JAR is included by default in the Ballerina distribution.", "author": "praneesha", "createdAt": "2020-03-13T04:27:23Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,6 @@\n+// This example demonstrates how to use the JDBC client with complex data types such as arrays,\n+// binary, blobs, clob, and date/time fields.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNTAxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392025017", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //therefore it is not required to copy the driver jar for H2 database. \n          \n          \n            \n            //Therefore, it is not required to copy the driver JAR for the H2 database.", "author": "praneesha", "createdAt": "2020-03-13T04:27:41Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,6 @@\n+// This example demonstrates how to use the JDBC client with complex data types such as arrays,\n+// binary, blobs, clob, and date/time fields.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n+//therefore it is not required to copy the driver jar for H2 database. ", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNTE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392025157", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            # To run this sample, navigate to the directory that contains the", "author": "praneesha", "createdAt": "2020-03-13T04:28:28Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out", "diffHunk": "@@ -0,0 +1,23 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNTI1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392025257", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.\n          \n      \n    \n    \n  \n\nChanged to be consistent with all other BBEs.", "author": "praneesha", "createdAt": "2020-03-13T04:29:00Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out", "diffHunk": "@@ -0,0 +1,23 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNTgyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392025823", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully executed the sample!\n          \n          \n            \n            Sample executed successfully!", "author": "praneesha", "createdAt": "2020-03-13T04:31:54Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out", "diffHunk": "@@ -0,0 +1,23 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run jdbc2_complex_type_queries.bal\n+\n+------ Query Binary Type -------\n+Result 1:\n+ROW_ID=1 BLOB_TYPE=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 108 111 98 32 116 101 115 116 46 CLOB_TYPE=very long text BINARY_TYPE=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 105 110 97 114 121 32 116 101 115 116 46\n+Result 2:\n+row_id=1 blob_type=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 108 111 98 32 116 101 115 116 46 clob_type=very long text binary_type=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 105 110 97 114 121 32 116 101 115 116 46\n+------ ********* -------\n+------ Query Array Type -------\n+Result 1:\n+ROW_ID=1 INT_ARRAY=1 2 3 LONG_ARRAY=100000000 200000000 300000000 FLOAT_ARRAY=245.23 5559.49 8796.123 DOUBLE_ARRAY=245.23 5559.49 8796.123 BOOLEAN_ARRAY=true false true STRING_ARRAY=Hello Ballerina\n+Result 2:\n+row_id=1 int_array=1 2 3 long_array=100000000 200000000 300000000 float_array=245.23 5559.49 8796.123 double_array=245.23 5559.49 8796.123 boolean_array=true false true string_array=Hello Ballerina\n+------ ********* -------\n+------ Query Date Time Type -------\n+Result 1:\n+ROW_ID=1 DATE_TYPE=2017-05-23+05:30 TIME_TYPE=19:45:23.000+05:30 TIMESTAMP_TYPE=2017-01-25T22:03:55.000+05:30 DATETIME_TYPE=2017-01-25T22:03:55.000+05:30\n+Result 2:\n+row_id=1 date_type=2017-05-23+05:30 time_type=51323000 timestamp_type=time=1485362035000 zone=id=UTC offset=0 datetime_type=2017-01-25T22:03:55.000+05:30\n+------ ********* -------\n+Successfully executed the sample!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNTk0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392025945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n          \n          \n            \n                // Execute dropping the table. The `sql:ExecuteResult` is returned upon successful execution.", "author": "praneesha", "createdAt": "2020-03-13T04:32:35Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjAxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026012", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // And error whill be returned in case of failure.\n          \n          \n            \n                // An error will be returned in case of a failure.", "author": "praneesha", "createdAt": "2020-03-13T04:32:56Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Similarly to drop table, the create table query is executed. Here the `customerId`\n          \n          \n            \n                // Similarly, to drop a table, the `create` table query is executed. Here, the `customerId`", "author": "praneesha", "createdAt": "2020-03-13T04:33:19Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // is a auto generated column.\n          \n          \n            \n                // is an auto-generated column.", "author": "praneesha", "createdAt": "2020-03-13T04:33:39Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjE5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026190", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // with the auto generated id of the last row.\n          \n          \n            \n                // with the auto-generated ID of the last row.", "author": "praneesha", "createdAt": "2020-03-13T04:33:55Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjMwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Update the record with the auto generated ID.\n          \n          \n            \n                // Update the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T04:34:33Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026337", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Delete the record with the auto generated ID.\n          \n          \n            \n                // Delete the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T04:34:44Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the JDBC client\n          \n          \n            \n                // Initialize the JDBC client.", "author": "praneesha", "createdAt": "2020-03-13T04:34:52Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjM4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Initialize table and insert sample data.\n          \n          \n            \n                    // Initialize a table and insert sample data.", "author": "praneesha", "createdAt": "2020-03-13T04:35:01Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/customers\", \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        // Initialize table and insert sample data.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjQ0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026449", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Please note that, the relevant database driver jar\n          \n          \n            \n            // Note that the relevant database driver JAR", "author": "praneesha", "createdAt": "2020-03-13T04:35:22Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the relevant database driver jar", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjUwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026504", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n          \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on an", "author": "praneesha", "createdAt": "2020-03-13T04:35:35Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjU2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026566", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n          \n          \n            \n            //H2 database and the H2 database driver JAR is included by default into the Ballerina distribution.", "author": "praneesha", "createdAt": "2020-03-13T04:35:51Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjYwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //therefore it is not required to copy the driver jar for H2 database. \n          \n          \n            \n            //Therefore, it is not required to copy the driver JAR for H2 databases.", "author": "praneesha", "createdAt": "2020-03-13T04:36:07Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n+//therefore it is not required to copy the driver jar for H2 database. ", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjgyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026822", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // is a auto generated column.\n          \n          \n            \n                // is an auto-generated column.", "author": "praneesha", "createdAt": "2020-03-13T04:37:17Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjg1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026852", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // with the auto generated id of the last row.\n          \n          \n            \n                // with the auto-generated ID of the last row.", "author": "praneesha", "createdAt": "2020-03-13T04:37:30Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjg4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026889", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Update the record with the auto generated ID.\n          \n          \n            \n                // Update the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T04:37:39Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjkyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026922", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Delete the record with the auto generated ID.\n          \n          \n            \n                // Delete the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T04:37:52Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjkzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the JDBC client\n          \n          \n            \n                // Initialize the JDBC client.", "author": "praneesha", "createdAt": "2020-03-13T04:37:57Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjk2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392026960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Initialize table and insert sample data.\n          \n          \n            \n                    // Initialize a table and insert sample data.", "author": "praneesha", "createdAt": "2020-03-13T04:38:05Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/customers\", \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        // Initialize table and insert sample data.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Please note that, the relevant database driver jar\n          \n          \n            \n            // Note that the relevant database driver JAR", "author": "praneesha", "createdAt": "2020-03-13T04:38:23Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the relevant database driver jar", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzA1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027059", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n          \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on an", "author": "praneesha", "createdAt": "2020-03-13T04:38:39Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzExNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n          \n          \n            \n            //H2 database and the H2 database driver JAR is included by default in the Ballerina distribution.", "author": "praneesha", "createdAt": "2020-03-13T04:39:01Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzE5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027192", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // is a auto generated column.\n          \n          \n            \n                // is an auto-generated column.", "author": "praneesha", "createdAt": "2020-03-13T04:39:29Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzI1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // with the auto generated id of the last row.\n          \n          \n            \n                // with the auto-generated ID of the last row.", "author": "praneesha", "createdAt": "2020-03-13T04:39:52Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzI4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027285", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Update the record with the auto generated ID.\n          \n          \n            \n                // Update the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T04:40:04Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzMyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Delete the record with the auto generated ID.\n          \n          \n            \n                // Delete the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T04:40:14Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzM1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027359", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the JDBC client\n          \n          \n            \n                // Initialize the JDBC client.", "author": "praneesha", "createdAt": "2020-03-13T04:40:24Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzM4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Initialize table and insert sample data.\n          \n          \n            \n                    // Initialize a table and insert sample data.", "author": "praneesha", "createdAt": "2020-03-13T04:40:32Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(jdbc:Client jdbcClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = jdbcClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/customers\", \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        // Initialize table and insert sample data.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzY0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027644", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            # To run this sample, navigate to the directory that contains the\n          \n      \n    \n    \n  \n\nChanged to make this consistent with other BBEs.", "author": "praneesha", "createdAt": "2020-03-13T04:41:58Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.out", "diffHunk": "@@ -0,0 +1,11 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzY3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-13T04:42:08Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.out", "diffHunk": "@@ -0,0 +1,11 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzcwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027708", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Drop table executed\n          \n          \n            \n            Drop table executed.", "author": "praneesha", "createdAt": "2020-03-13T04:42:21Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.out", "diffHunk": "@@ -0,0 +1,11 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run jdbc2_execute_operation.bal\n+\n+Drop table executed", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzc0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully completed!\n          \n          \n            \n            Completed successfully!", "author": "praneesha", "createdAt": "2020-03-13T04:42:35Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.out", "diffHunk": "@@ -0,0 +1,11 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run jdbc2_execute_operation.bal\n+\n+Drop table executed\n+affectedRowCount=0 lastInsertId=\n+Rows affected: 1\n+Generated Customer ID: 1\n+Updated Row count: 1\n+Deleted Row count: 1\n+Successfully completed!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzc5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027792", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Simple JDBC Client for H2 database with the mandatory\n          \n          \n            \n                // This is a simple JDBC Client for an H2 database with the mandatory", "author": "praneesha", "createdAt": "2020-03-13T04:42:55Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzgxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027814", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // field - JDBC url. This client can be used with any database\n          \n          \n            \n                // field - JDBC URL. This client can be used with any database", "author": "praneesha", "createdAt": "2020-03-13T04:43:04Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzg0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027843", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // driver jar.\n          \n          \n            \n                // driver JAR.", "author": "praneesha", "createdAt": "2020-03-13T04:43:15Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzkwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027904", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the JDBC client along with username and password.\n          \n          \n            \n                // Initialize the JDBC client along by providing the username and password.", "author": "praneesha", "createdAt": "2020-03-13T04:43:37Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNzk3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392027972", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the JDBC client along with some additional\n          \n          \n            \n                // Initialize the JDBC client by providing additional", "author": "praneesha", "createdAt": "2020-03-13T04:44:01Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Connection pool is used to share use the connections efficiently to the database.\n          \n          \n            \n                // Connection pool is used to share and use the connections  to the database efficiently.", "author": "praneesha", "createdAt": "2020-03-13T04:44:30Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\", \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // In the above samples, the global connection pool is created, and shared\n          \n          \n            \n                // In the above samples, the global connection pool is created and shared", "author": "praneesha", "createdAt": "2020-03-13T04:44:39Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\", \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODM1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028357", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Other than JDBC URL, all properties are optional.\n          \n          \n            \n                // Other than the JDBC URL, all other properties are optional.", "author": "praneesha", "createdAt": "2020-03-13T04:46:15Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\", \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the JDBC client with the specific connection pool.\n+    jdbc:Client jdbcClient4 = check new (\"jdbc:h2:file:./target/sample4\", \"rootUser\", \"rootPass\", h2Options, connPool);\n+    io:println(\"JDBC client with connection pool created.\");\n+\n+    // Other than JDBC URL, all properties are optional.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // And hence named attributes can be used to specifically assign the attributes.\n          \n          \n            \n                // Hence, named attributes can be used specifically to assign the attributes.", "author": "praneesha", "createdAt": "2020-03-13T04:46:54Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\", \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the JDBC client with the specific connection pool.\n+    jdbc:Client jdbcClient4 = check new (\"jdbc:h2:file:./target/sample4\", \"rootUser\", \"rootPass\", h2Options, connPool);\n+    io:println(\"JDBC client with connection pool created.\");\n+\n+    // Other than JDBC URL, all properties are optional.\n+    // And hence named attributes can be used to specifically assign the attributes.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODU0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028545", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize JDBC Client with URL and connection pool only.\n          \n          \n            \n                // Initialize JDBC Client only with the URL and connection pool.", "author": "praneesha", "createdAt": "2020-03-13T04:47:15Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\", \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the JDBC client with the specific connection pool.\n+    jdbc:Client jdbcClient4 = check new (\"jdbc:h2:file:./target/sample4\", \"rootUser\", \"rootPass\", h2Options, connPool);\n+    io:println(\"JDBC client with connection pool created.\");\n+\n+    // Other than JDBC URL, all properties are optional.\n+    // And hence named attributes can be used to specifically assign the attributes.\n+    jdbc:Client jdbcClient5 = check new (url = \"jdbc:h2:file:./target/sample5\", user = \"rootUser\",\n+        password = \"rootPass\", options = h2Options, connectionPool = connPool);\n+\n+    // Initialize JDBC Client with URL and connection pool only.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODU5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // and destroy the underneath connection pool.\n          \n          \n            \n                // and destroy the connection pool.", "author": "praneesha", "createdAt": "2020-03-13T04:47:30Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // Simple JDBC Client for H2 database with the mandatory\n+    // field - JDBC url. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver jar.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along with username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\", \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client along with some additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\", \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the JDBC client with the specific connection pool.\n+    jdbc:Client jdbcClient4 = check new (\"jdbc:h2:file:./target/sample4\", \"rootUser\", \"rootPass\", h2Options, connPool);\n+    io:println(\"JDBC client with connection pool created.\");\n+\n+    // Other than JDBC URL, all properties are optional.\n+    // And hence named attributes can be used to specifically assign the attributes.\n+    jdbc:Client jdbcClient5 = check new (url = \"jdbc:h2:file:./target/sample5\", user = \"rootUser\",\n+        password = \"rootPass\", options = h2Options, connectionPool = connPool);\n+\n+    // Initialize JDBC Client with URL and connection pool only.\n+    jdbc:Client jdbcClient6 = check new (url = \"jdbc:h2:file:./target/sample6\", connectionPool = connPool);\n+    io:println(\"JDBC client with optional params created.\");\n+\n+    // Close the clients to release the resource\n+    // and destroy the underneath connection pool.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODczNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //initialization options. Please note that, the relevant database driver jar\n          \n          \n            \n            //initialization options. Note that, the relevant database driver JAR\n          \n      \n    \n    \n  \n\nThe word \"please\" should not be used in formal documentation.", "author": "praneesha", "createdAt": "2020-03-13T04:48:22Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to initialize the JDBC client with different\n+//initialization options. Please note that, the relevant database driver jar", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODc1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028759", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed under `BALLERINA_HOME/bre/lib` folder. However, this sample is based on\n          \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on", "author": "praneesha", "createdAt": "2020-03-13T04:48:33Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to initialize the JDBC client with different\n+//initialization options. Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However, this sample is based on", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyODgyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392028823", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n          \n          \n            \n            //an H2 database and the H2 database driver JAR is included by default in the Ballerina distribution.", "author": "praneesha", "createdAt": "2020-03-13T04:48:56Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to initialize the JDBC client with different\n+//initialization options. Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However, this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //therefore it is not required to copy the driver jar for H2 database.\n          \n          \n            \n            //Therefore, it is not required to copy the driver JAR for H2 databases.", "author": "praneesha", "createdAt": "2020-03-13T04:50:16Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to initialize the JDBC client with different\n+//initialization options. Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However, this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n+//therefore it is not required to copy the driver jar for H2 database.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            #  To run this sample, navigate to the directory that contains the", "author": "praneesha", "createdAt": "2020-03-13T04:51:32Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.out", "diffHunk": "@@ -0,0 +1,10 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029396", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-13T04:51:43Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.out", "diffHunk": "@@ -0,0 +1,10 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTQ2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029467", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully completed initialization!\n          \n          \n            \n             Initialization completed successfully!", "author": "praneesha", "createdAt": "2020-03-13T04:52:07Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.out", "diffHunk": "@@ -0,0 +1,10 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run jdbc2_init_options.bal\n+\n+Simple JDBC client created.\n+JDBC client with user/password created.\n+JDBC client with database options created.\n+JDBC client with connection pool created.\n+JDBC client with optional params created.\n+Successfully completed initialization!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTQ4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029487", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Select the rows in the database table via query remote operation.\n          \n          \n            \n                // Select the rows in the database table via the query remote operation.", "author": "praneesha", "createdAt": "2020-03-13T04:52:17Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTUwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029506", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The result is returned as a stream, and the elements of the stream can\n          \n          \n            \n                // The result is returned as a stream and the elements of the stream can", "author": "praneesha", "createdAt": "2020-03-13T04:52:24Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTU1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029556", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // be either record or error.\n          \n          \n            \n                // be either a record or an error.", "author": "praneesha", "createdAt": "2020-03-13T04:52:39Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTU4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029585", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If there is any error during the execution of the sql query or iteration of the\n          \n          \n            \n                // If there is any error during the execution of the SQL query or iteration of the", "author": "praneesha", "createdAt": "2020-03-13T04:52:50Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTYzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029634", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Check and handle the error during the sql query\n          \n          \n            \n                // Check and handle the error during the SQL query", "author": "praneesha", "createdAt": "2020-03-13T04:53:07Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTcwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // case if the stream is not fully consumed, stream should be closed specifically.\n          \n          \n            \n                // case if the stream is not fully consumed, the stream should be closed specifically.", "author": "praneesha", "createdAt": "2020-03-13T04:53:27Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTcyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029726", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The result of the count operation is provided as record stream.\n          \n          \n            \n                // The result of the count operation is provided as a record stream.", "author": "praneesha", "createdAt": "2020-03-13T04:53:36Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTc2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029766", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the above count query will return only single row, next() operation is sufficient\n          \n          \n            \n                // Since the above count query will return only a single row, the next() operation is sufficient", "author": "praneesha", "createdAt": "2020-03-13T04:53:51Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTg0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029849", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Define a record to load the query result schema as shown in function 'typedQuery' below.\n          \n          \n            \n            //Define a record to load the query result schema as shown below in the 'typedQuery' function.", "author": "praneesha", "createdAt": "2020-03-13T04:54:16Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTg2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029866", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //In this example, all columns of the customer table will be loaded,\n          \n          \n            \n            //In this example, all columns of the customer table will be loaded.", "author": "praneesha", "createdAt": "2020-03-13T04:54:24Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTk2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392029964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //therefore creating `Customer` record with all columns. The result's column name\n          \n          \n            \n            //Therefore, the `Customer` record will be created with all the columns. The column name of the result", "author": "praneesha", "createdAt": "2020-03-13T04:54:56Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDAxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030014", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //and the defined field name of the record will be matched with case insensitively.\n          \n          \n            \n            //and the defined field name of the record will be matched case insensitively.", "author": "praneesha", "createdAt": "2020-03-13T04:55:11Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDA0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030047", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The result is returned as a Customer record stream, and the elements\n          \n          \n            \n                // The result is returned as a Customer record stream and the elements", "author": "praneesha", "createdAt": "2020-03-13T04:55:22Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDA3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030073", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // of the stream can be either Customer record or error.\n          \n          \n            \n                // of the stream can be either a Customer record or an error.", "author": "praneesha", "createdAt": "2020-03-13T04:55:31Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030401", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Cast to the generic record type to the Customer stream type.\n          \n          \n            \n                // Cast the generic record type to the Customer stream type.", "author": "praneesha", "createdAt": "2020-03-13T04:56:57Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast to the generic record type to the Customer stream type.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDQzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030433", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Iterate through the customer stream.\n          \n          \n            \n                // Iterate the customer stream.", "author": "praneesha", "createdAt": "2020-03-13T04:57:05Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast to the generic record type to the Customer stream type.\n+    stream<Customer, sql:Error> customerStream = <stream<Customer, sql:Error>>resultStream;\n+\n+    // Iterate through the customer stream.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDQ2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the JDBC client\n          \n          \n            \n                // Initialize the JDBC client.", "author": "praneesha", "createdAt": "2020-03-13T04:57:18Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,127 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FIRSTNAME\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast to the generic record type to the Customer stream type.\n+    stream<Customer, sql:Error> customerStream = <stream<Customer, sql:Error>>resultStream;\n+\n+    // Iterate through the customer stream.\n+    error? e = customerStream.forEach(function(Customer customer) {\n+        io:println(customer);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+\n+    // Close the stream.\n+    e = resultStream.close();\n+    io:println(\"------ End Query With Type Description -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Dan', 'Brown', 2, 10000, 'UK')\");\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This example demonstrates how to use the JDBC client select query operations with stream return type.\n          \n          \n            \n            // This example demonstrates how to use the JDBC client select query operations with the stream return type.", "author": "praneesha", "createdAt": "2020-03-13T04:57:46Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDg0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030844", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Please note that, the relevant database driver jar\n          \n          \n            \n            // Note that the relevant database driver JAR", "author": "praneesha", "createdAt": "2020-03-13T04:59:17Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+// Please note that, the relevant database driver jar", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMDg3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392030875", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n          \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on", "author": "praneesha", "createdAt": "2020-03-13T04:59:29Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031046", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Please note that, the relevant database driver jar\n          \n          \n            \n            // Note that the relevant database driverJAR", "author": "praneesha", "createdAt": "2020-03-13T05:00:13Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+// Please note that, the relevant database driver jar", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTA4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031088", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n          \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on", "author": "praneesha", "createdAt": "2020-03-13T05:00:26Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031157", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n          \n          \n            \n            //an H2 database and the H2 database driver JAR is included by default in the Ballerina distribution.", "author": "praneesha", "createdAt": "2020-03-13T05:00:46Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTUwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031509", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //therefore it is not required to copy the driver jar for H2 database. \n          \n          \n            \n            //Therefore, it is not required to copy the driver JAR for H2 databases.", "author": "praneesha", "createdAt": "2020-03-13T05:02:34Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+// Please note that, the relevant database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib` folder. However this sample is based on\n+//H2 database, and the H2 database driver jar is included by default into Ballerina distribution,\n+//therefore it is not required to copy the driver jar for H2 database. ", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTU2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031560", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            #  To run this sample, navigate to the directory that contains the", "author": "praneesha", "createdAt": "2020-03-13T05:02:48Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTU4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-13T05:03:00Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTY0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031643", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully queried the database!\n          \n          \n            \n            Queried the database successfully!", "author": "praneesha", "createdAt": "2020-03-13T05:03:19Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run jdbc2_query_operation.bal\n+\n+------ Start Simple Query -------\n+CUSTOMERID=1 FIRSTNAME=Peter LASTNAME=Stuart REGISTRATIONID=1 CREDITLIMIT=5000.75 COUNTRY=USA\n+Customer first name: Peter\n+Customer last name: Stuart\n+CUSTOMERID=2 FIRSTNAME=Dan LASTNAME=Brown REGISTRATIONID=2 CREDITLIMIT=10000.0 COUNTRY=UK\n+Customer first name: Dan\n+Customer last name: Brown\n+------ End Simple Query -------\n+------ Start Count Total Rows -------\n+Total rows in customer table : 2\n+------ End Count Total Rows -------\n+------ Start Query With Type Description -------\n+customerId=1 firstName=Peter lastName=Stuart registrationId=1 creditLimit=5000.75 country=USA\n+customerId=2 firstName=Dan lastName=Brown registrationId=2 creditLimit=10000.0 country=UK\n+------ End Query With Type Description -------\n+Successfully queried the database!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTY4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031683", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Username and password of MySQL database. This is used in below examples when initializing the\n          \n          \n            \n            // Username and password of the MySQL database. This is used in below examples when initializing the", "author": "praneesha", "createdAt": "2020-03-13T05:03:30Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // MySQL connector. Please change these based on your setup if you want to try locally.\n          \n          \n            \n            // MySQL connector. You need to change these based on your setup if you are trying locally.", "author": "praneesha", "createdAt": "2020-03-13T05:03:58Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTgwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Define some record types to be used in the below examples.\n          \n          \n            \n            // Define the record types to be used in the below examples.", "author": "praneesha", "createdAt": "2020-03-13T05:04:12Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTg1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031857", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The name and type of the attributes within record from the `resultStream` will be automatically\n          \n          \n            \n                // The name and type of the attributes within the record from the `resultStream` will be automatically", "author": "praneesha", "createdAt": "2020-03-13T05:04:25Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTkwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If there is any error during the execution of the sql query or iteration of the\n          \n          \n            \n                // If there is any error during the execution of the SQL query or iteration of the", "author": "praneesha", "createdAt": "2020-03-13T05:04:41Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTk1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // be having records in `BinaryType`.\n          \n          \n            \n                // have `BinaryType` records.", "author": "praneesha", "createdAt": "2020-03-13T05:05:01Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTk4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392031987", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Iterate through the `binaryResultStream`.\n          \n          \n            \n                // Iterate the `binaryResultStream`.", "author": "praneesha", "createdAt": "2020-03-13T05:05:13Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMjAzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392032039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The name and type of the attributes within record from the `resultStream` will be automatically\n          \n          \n            \n                // The name and type of the attributes within the record from the `resultStream` will be automatically", "author": "praneesha", "createdAt": "2020-03-13T05:05:28Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMjA3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392032071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If there is any error during the execution of the sql query or iteration of the\n          \n          \n            \n                // If there is any error during the execution of the SQL query or iteration of the", "author": "praneesha", "createdAt": "2020-03-13T05:05:40Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMjE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392032183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n          \n          \n            \n                // have `DateTimeType` records. The Date, Time, DateTime, and Timestamp fields of the database table", "author": "praneesha", "createdAt": "2020-03-13T05:06:14Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMjIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392032215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // can be mapped to time:Time, string and int types in ballerina.\n          \n          \n            \n                // can be mapped to time:Time, string and int types in Ballerina.", "author": "praneesha", "createdAt": "2020-03-13T05:06:24Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMjI2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392032264", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Iterate through the `dateResultStream`.\n          \n          \n            \n                // Iterate the `dateResultStream`.", "author": "praneesha", "createdAt": "2020-03-13T05:06:34Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMjMxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392032316", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the MySQL client\n          \n          \n            \n                // Initialize the MySQL client.", "author": "praneesha", "createdAt": "2020-03-13T05:06:47Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+// Initialize the database table with sample data.\n+function initializeTable() returns sql:Error? {\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS MYSQL_BBE\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS MYSQL_BBE.BINARY_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE MYSQL_BBE.BINARY_TYPES (row_id INTEGER NOT NULL,\" +\n+        \"blob_type BLOB(1024), binary_type BINARY(27), PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.BINARY_TYPES (row_id, blob_type, binary_type) VALUES\" +\n+        \"(1, X'77736F322062616C6C6572696E6120626C6F6220746573742E',\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS MYSQL_BBE.DATE_TIME_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE MYSQL_BBE.DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"Insert into MYSQL_BBE.DATE_TIME_TYPES (row_id, date_type, time_type, timestamp_type,\" +\n+        \"datetime_type) values (1,'2017-05-23','14:15:23','2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+\n+    check mysqlClient.close();\n+}\n+\n+public function main() {\n+    // Initialize the MySQL client", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMjM0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392032341", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Executes the complex data type queries.\n          \n          \n            \n                        // Execute the complex data type queries.", "author": "praneesha", "createdAt": "2020-03-13T05:06:55Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,133 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define some record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+// Initialize the database table with sample data.\n+function initializeTable() returns sql:Error? {\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS MYSQL_BBE\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS MYSQL_BBE.BINARY_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE MYSQL_BBE.BINARY_TYPES (row_id INTEGER NOT NULL,\" +\n+        \"blob_type BLOB(1024), binary_type BINARY(27), PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.BINARY_TYPES (row_id, blob_type, binary_type) VALUES\" +\n+        \"(1, X'77736F322062616C6C6572696E6120626C6F6220746573742E',\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS MYSQL_BBE.DATE_TIME_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE MYSQL_BBE.DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"Insert into MYSQL_BBE.DATE_TIME_TYPES (row_id, date_type, time_type, timestamp_type,\" +\n+        \"datetime_type) values (1,'2017-05-23','14:15:23','2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+\n+    check mysqlClient.close();\n+}\n+\n+public function main() {\n+    // Initialize the MySQL client\n+    sql:Error? err = initializeTable();\n+    if (err is sql:Error) {\n+        io:println(\"Sample data initialization failed!\");\n+        io:println(err);\n+    } else {\n+        mysql:Client|sql:Error mysqlClient = new (user = dbUser, password = dbPassword, database = \"MYSQL_BBE\");\n+        if (mysqlClient is mysql:Client) {\n+            // Executes the complex data type queries.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzM2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033363", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n          \n          \n            \n            // Note that the MySQL database driver JAR should be placed in the `BALLERINA_HOME/bre/lib` directory.", "author": "praneesha", "createdAt": "2020-03-13T05:12:02Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the MySQL client with complex data types such as\n+// binary, blobs, and date/time fields.\n+// Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzQxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033417", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is\n          \n          \n            \n            // The MySQL connector uses some database properties from MySQL version 8.0.x onwards. Therefore, it is", "author": "praneesha", "createdAt": "2020-03-13T05:12:22Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the MySQL client with complex data types such as\n+// binary, blobs, and date/time fields.\n+// Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n+// The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzQ2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033461", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // encouraged to use MySQL driver version greater than 8.0.x.\n          \n          \n            \n            // recommended to use a MySQL driver version greater than 8.0.x.", "author": "praneesha", "createdAt": "2020-03-13T05:12:38Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,5 @@\n+// This example demonstrates how to use the MySQL client with complex data types such as\n+// binary, blobs, and date/time fields.\n+// Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n+// The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is\n+// encouraged to use MySQL driver version greater than 8.0.x.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzUxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033515", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            #  To run this sample, navigate to the directory that contains the", "author": "praneesha", "createdAt": "2020-03-13T05:12:53Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.out", "diffHunk": "@@ -0,0 +1,17 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-13T05:13:05Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.out", "diffHunk": "@@ -0,0 +1,17 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzYxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033614", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully executed the sample!\n          \n          \n            \n            Sample executed successfully!", "author": "praneesha", "createdAt": "2020-03-13T05:13:25Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.out", "diffHunk": "@@ -0,0 +1,17 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run mysql-complex-type-queries.bal\n+\n+------ Query Binary Type -------\n+Result 1:\n+row_id=1 blob_type=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 108 111 98 32 116 101 115 116 46 binary_type=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 105 110 97 114 121 32 116 101 115 116 46\n+Result 2:\n+row_id=1 blob_type=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 108 111 98 32 116 101 115 116 46 binary_type=119 115 111 50 32 98 97 108 108 101 114 105 110 97 32 98 105 110 97 114 121 32 116 101 115 116 46\n+------ ********* -------\n+------ Query Date Time Type -------\n+Result 1:\n+row_id=1 date_type=2017-05-23+05:30 time_type=19:45:23.000+05:30 timestamp_type=2017-01-25T22:03:55.000+05:30 datetime_type=2017-01-25T22:03:55.000+05:30\n+Result 2:\n+row_id=1 date_type=2017-05-23+05:30 time_type=51323000 timestamp_type=time=1485362035000 zone=id=UTC offset=0 datetime_type=2017-01-25T22:03:55.000+05:30\n+------ ********* -------\n+Successfully executed the sample!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzY0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Username and password of MySQL database. This is used in below examples when initializing the\n          \n          \n            \n            // Username and password of the MySQL database. This is used in the below examples when initializing the", "author": "praneesha", "createdAt": "2020-03-13T05:13:39Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzc2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033768", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // MySQL connector. Please change these based on your setup if you want to try locally.\n          \n          \n            \n            // MySQL connector. You need to change these based on your setup if you try locally.", "author": "praneesha", "createdAt": "2020-03-13T05:14:00Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033810", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize client without any database to create the database.\n          \n          \n            \n                // Initialize the client without any database to create the database.", "author": "praneesha", "createdAt": "2020-03-13T05:14:17Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzg5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Create database if it is not exists. If any error occurred the error will be returned.\n          \n          \n            \n                // Create database if it does not exist. If any error occurred, the error will be returned.", "author": "praneesha", "createdAt": "2020-03-13T05:14:49Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMzkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392033926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Close this MySQL client.\n          \n          \n            \n                // Close the MySQL client.", "author": "praneesha", "createdAt": "2020-03-13T05:15:00Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n          \n          \n            \n                // Execute dropping the table. The `sql:ExecuteResult` is returned upon successful execution.", "author": "praneesha", "createdAt": "2020-03-13T05:15:24Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034046", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // And error whill be returned in case of failure.\n          \n          \n            \n                // An error will be returned in case of a failure.", "author": "praneesha", "createdAt": "2020-03-13T05:15:37Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034161", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Similarly to drop table, the create table query is executed. Here the `customerId`\n          \n          \n            \n                // Similarly, to drop a table, the `create` table query is executed. Here, the `customerId`", "author": "praneesha", "createdAt": "2020-03-13T05:15:57Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDIwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034200", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // is a auto generated column.\n          \n          \n            \n                // is an auto-generated column.", "author": "praneesha", "createdAt": "2020-03-13T05:16:10Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDI0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // with the auto generated id of the last row.\n          \n          \n            \n                // with the auto-generated ID of the last row.", "author": "praneesha", "createdAt": "2020-03-13T05:16:26Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check mysqlClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL AUTO_INCREMENT, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDI4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034280", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Update the record with the auto generated ID.\n          \n          \n            \n                // Update the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T05:16:36Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check mysqlClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL AUTO_INCREMENT, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check mysqlClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,\" +\n+        \"country) VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(mysql:Client mysqlClient, int generatedId) {\n+    // Update the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Delete the record with the auto generated ID.\n          \n          \n            \n                // Delete the record with the auto-generated ID.", "author": "praneesha", "createdAt": "2020-03-13T05:16:47Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check mysqlClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL AUTO_INCREMENT, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check mysqlClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,\" +\n+        \"country) VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(mysql:Client mysqlClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = mysqlClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(mysql:Client mysqlClient, int generatedId) {\n+    // Delete the record with the auto generated ID.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDM3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034375", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Initialize the MySQL client to be used for the rest of DDL and DML operations.\n          \n          \n            \n                    // Initialize the MySQL client to be used for the rest of the DDL and DML operations.", "author": "praneesha", "createdAt": "2020-03-13T05:17:01Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check mysqlClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL AUTO_INCREMENT, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check mysqlClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,\" +\n+        \"country) VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(mysql:Client mysqlClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = mysqlClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(mysql:Client mysqlClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = mysqlClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the database.\n+    sql:Error? err = initializeDatabase();\n+    if (err is ()) {\n+        // Initialize the MySQL client to be used for the rest of DDL and DML operations.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034395", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //  Initialize table and insert data.\n          \n          \n            \n                        //  Initialize a table and insert data.", "author": "praneesha", "createdAt": "2020-03-13T05:17:10Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.bal", "diffHunk": "@@ -0,0 +1,110 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of MySQL database. This is used in below examples when initializing the\n+// MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+string dbName = \"MYSQL_BBE_EXEC\";\n+\n+function initializeDatabase() returns sql:Error? {\n+    // Initialize client without any database to create the database.\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    // Create database if it is not exists. If any error occurred the error will be returned.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS \" + dbName);\n+    io:println(\"Database created\");\n+    // Close this MySQL client.\n+    check mysqlClient.close();\n+}\n+\n+function initializeTable(mysql:Client mysqlClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check mysqlClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL AUTO_INCREMENT, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check mysqlClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,\" +\n+        \"country) VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;\n+}\n+\n+function updateRecord(mysql:Client mysqlClient, int generatedId) {\n+    // Update the record with the auto generated ID.\n+    string query = string `Update Customers set creditLimit = 15000.5 where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = mysqlClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Updated Row count: \");\n+        io:println(result?.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+function deleteRecord(mysql:Client mysqlClient, int generatedId) {\n+    // Delete the record with the auto generated ID.\n+    string query = string `Delete from Customers where customerId = ${generatedId}`;\n+    sql:ExecuteResult|sql:Error? result = mysqlClient->execute(query);\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Deleted Row count: \");\n+        io:println(result.affectedRowCount);\n+    } else if (result is sql:Error) {\n+        io:println(\"Error occured: \");\n+        io:println(result);\n+    } else {\n+        io:println(\"Empty result\");\n+    }\n+}\n+\n+public function main() {\n+    // Initialize the database.\n+    sql:Error? err = initializeDatabase();\n+    if (err is ()) {\n+        // Initialize the MySQL client to be used for the rest of DDL and DML operations.\n+        mysql:Client|sql:Error mysqlClient = new (user = dbUser, password = dbPassword, database = dbName);\n+        if (mysqlClient is mysql:Client) {\n+            //  Initialize table and insert data.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDc5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034791", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This example demonstrates how to use the JDBC client with DDL and DML operations.\n          \n          \n            \n            // This example demonstrates how to use the JDBC client with the DDL and DML operations.", "author": "praneesha", "createdAt": "2020-03-13T05:19:15Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDg0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034848", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n          \n          \n            \n            // Note that the MySQL database driver JAR should be placed in the`BALLERINA_HOME/bre/lib` directory.", "author": "praneesha", "createdAt": "2020-03-13T05:19:35Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDg5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is\n          \n          \n            \n            // The MySQL connector uses database properties from MySQL version 8.0.x onwards. Therefore, it is", "author": "praneesha", "createdAt": "2020-03-13T05:19:53Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n+// The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // encouraged to use MySQL driver version greater than 8.0.x.\n          \n          \n            \n            // recommended to use a MySQL driver version greater than 8.0.x.", "author": "praneesha", "createdAt": "2020-03-13T05:20:12Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client with DDL and DML operations.\n+// Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n+// The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is\n+// encouraged to use MySQL driver version greater than 8.0.x.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNDk4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392034985", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            #  To run this sample, navigate to the directory that contains the", "author": "praneesha", "createdAt": "2020-03-13T05:20:23Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTAxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035018", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-13T05:20:33Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035064", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Database created\n          \n          \n            \n            Database created.", "author": "praneesha", "createdAt": "2020-03-13T05:20:42Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run mysql_execute_operation.bal\n+\n+Database created", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTA5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Drop table executed\n          \n          \n            \n            Drop table executed.", "author": "praneesha", "createdAt": "2020-03-13T05:20:47Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run mysql_execute_operation.bal\n+\n+Database created\n+Drop table executed", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTEzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035135", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully completed!\n          \n          \n            \n            Completed successfully!", "author": "praneesha", "createdAt": "2020-03-13T05:21:02Z", "path": "examples/mysql-execute-operation/mysql_execute_operation.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run mysql_execute_operation.bal\n+\n+Database created\n+Drop table executed\n+affectedRowCount=0 lastInsertId=\n+Rows affected: 1\n+Generated Customer ID: 1\n+Updated Row count: 1\n+Deleted Row count: 1\n+Successfully completed!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTE2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Username and password of MySQL database. This is used in below examples when initializing the\n          \n          \n            \n            //Username and password of the MySQL database. This is used in the below examples when initializing the", "author": "praneesha", "createdAt": "2020-03-13T05:21:14Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTI0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035249", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //MySQL connector. Please change these based on your setup if you want to try locally.\n          \n          \n            \n            //MySQL connector. You need to change these based on your setup to try locally.", "author": "praneesha", "createdAt": "2020-03-13T05:21:34Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTI3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize MySQL Client without any parameters. In that case all parameters\n          \n          \n            \n                // Initialize the MySQL Client without any parameters. In that case, all parameters", "author": "praneesha", "createdAt": "2020-03-13T05:21:46Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the MySQL client along with username and password.\n          \n          \n            \n                // Initialize the MySQL client by providing the username and password.", "author": "praneesha", "createdAt": "2020-03-13T05:22:00Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTQ1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035455", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the MySQL client along with username and password with default host.\n          \n          \n            \n                // Initialize the MySQL client by providing the username, password, and default host.", "author": "praneesha", "createdAt": "2020-03-13T05:22:41Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTU3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035575", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the MySQL client along with host, user, password, database and port.\n          \n          \n            \n                // Initialize the MySQL client by providing the host, username, password, database, and port.", "author": "praneesha", "createdAt": "2020-03-13T05:23:19Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTY2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035667", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the MySQL client along with some additional\n          \n          \n            \n                // Initialize the MySQL client by providing additional", "author": "praneesha", "createdAt": "2020-03-13T05:23:47Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTcwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // mysql database properties.\n          \n          \n            \n                // MySQL database properties.", "author": "praneesha", "createdAt": "2020-03-13T05:23:57Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTc0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n          \n          \n            \n                    // SSL is enabled by default and the default mode is `sql:SSL_PREFERRED`.", "author": "praneesha", "createdAt": "2020-03-13T05:24:07Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTgzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035839", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n          \n          \n            \n                        // `sql:SSL_VERIFY_CERT`, and `sql:SSL_VERIFY_IDENTITY`. For details on each mode, go to", "author": "praneesha", "createdAt": "2020-03-13T05:24:48Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNTg3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392035878", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n          \n          \n            \n                        // the MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).", "author": "praneesha", "createdAt": "2020-03-13T05:24:58Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjMyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize MySQL client with mysql database options.\n          \n          \n            \n                // Initialize the MySQL client with MySQL database options.", "author": "praneesha", "createdAt": "2020-03-13T05:27:02Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize MySQL client with mysql database options.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjM3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036378", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Connection pool is used to share use the connections efficiently to the database.\n          \n          \n            \n                // Connection pool is used to share and use the database connections efficiently.", "author": "praneesha", "createdAt": "2020-03-13T05:27:22Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize MySQL client with mysql database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword, options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjQwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036403", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // In the above samples, the global connection pool is created, and shared\n          \n          \n            \n                // In the above samples, the global connection pool is created and shared", "author": "praneesha", "createdAt": "2020-03-13T05:27:30Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize MySQL client with mysql database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword, options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // among all database clients since the `connectionPool` property is not set.\n          \n          \n            \n                // among all the database clients since the `connectionPool` property is not set.", "author": "praneesha", "createdAt": "2020-03-13T05:27:38Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize MySQL client with mysql database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword, options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the MySQL client with all parameters.\n          \n          \n            \n                // Initialize the MySQL client with all the parameters.", "author": "praneesha", "createdAt": "2020-03-13T05:28:06Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize MySQL client with mysql database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword, options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the MySQL client with the specific connection pool.\n+    mysql:Client mysqlClient6 = check new (user = dbUser, password = dbPassword, options = mysqlOptions,\n+        connectionPool = connPool);\n+    io:println(\"MySQL client with connection pool created.\");\n+\n+    // Initialize the MySQL client with all parameters.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjU3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // And hence named attributes can be used to specifically assign the attributes.\n          \n          \n            \n                // Hence, named attributes can be used specifically to assign the attributes.", "author": "praneesha", "createdAt": "2020-03-13T05:28:23Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize MySQL client with mysql database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword, options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the MySQL client with the specific connection pool.\n+    mysql:Client mysqlClient6 = check new (user = dbUser, password = dbPassword, options = mysqlOptions,\n+        connectionPool = connPool);\n+    io:println(\"MySQL client with connection pool created.\");\n+\n+    // Initialize the MySQL client with all parameters.\n+    mysql:Client mysqlClient7 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306,\n+        mysqlOptions, connPool);\n+\n+    // All properties are optional.\n+    // And hence named attributes can be used to specifically assign the attributes.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjU5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // and destroy the underneath connection pool.\n          \n          \n            \n                // and destroy the connection pool.", "author": "praneesha", "createdAt": "2020-03-13T05:28:34Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,99 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize MySQL Client without any parameters. In that case all parameters\n+    // will be using the default values:`localhost` for host, `3306` for port,\n+    // and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing MySQL client without any params\");\n+        io:println(mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client along with username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client along with username and password with default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser, password = dbPassword);\n+    io:println(\"MySQL client with user and password created with default host.\");\n+\n+    // Initialize the MySQL client along with host, user, password, database and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and port created.\");\n+\n+    // Initialize the MySQL client along with some additional\n+    // mysql database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default, and default mode is `sql:SSL_PREFERRED`.\n+        // SSL will be disabled, if `ssl` is assigned to `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`, `sql:SSL_REQUIRED`,\n+            // `sql:SSL_VERIFY_CERT` and `sql:SSL_VERIFY_IDENTITY`. Understand each mode by referring to\n+            // MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize MySQL client with mysql database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword, options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share use the connections efficiently to the database.\n+    // In the above samples, the global connection pool is created, and shared\n+    // among all database clients since the `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the MySQL client with the specific connection pool.\n+    mysql:Client mysqlClient6 = check new (user = dbUser, password = dbPassword, options = mysqlOptions,\n+        connectionPool = connPool);\n+    io:println(\"MySQL client with connection pool created.\");\n+\n+    // Initialize the MySQL client with all parameters.\n+    mysql:Client mysqlClient7 = check new (\"localhost\", dbUser, dbPassword, \"information_schema\", 3306,\n+        mysqlOptions, connPool);\n+\n+    // All properties are optional.\n+    // And hence named attributes can be used to specifically assign the attributes.\n+    mysql:Client mysqlClient8 = check new (host = \"localhost\", user = dbUser, password = dbPassword,\n+        database = \"information_schema\", port = 3306, options = mysqlOptions, connectionPool = connPool);\n+\n+    // Close the clients to release the resource\n+    // and destroy the underneath connection pool.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjY2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036665", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //initialization options. Please note that, the MySQL database driver jar\n          \n          \n            \n            //initialization options. Note that, the MySQL database driver JAR", "author": "praneesha", "createdAt": "2020-03-13T05:28:52Z", "path": "examples/mysql-init-options/mysql_init_options.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to initialize the MySQL client with different\n+//initialization options. Please note that, the MySQL database driver jar", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjcwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036704", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed under `BALLERINA_HOME/bre/lib`. The MySQL connector uses some database properties\n          \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` directory. The MySQL connector uses database properties", "author": "praneesha", "createdAt": "2020-03-13T05:29:06Z", "path": "examples/mysql-init-options/mysql_init_options.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to initialize the MySQL client with different\n+//initialization options. Please note that, the MySQL database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib`. The MySQL connector uses some database properties", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjgyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036821", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //from MySQL version 8.0.x onwards, therefore it is encouraged to use MySQL driver version greater than 8.0.x.\n          \n          \n            \n            //from MySQL version 8.0.x onwards. Therefore, it is recommended to use a MySQL driver version greater than 8.0.x.", "author": "praneesha", "createdAt": "2020-03-13T05:29:48Z", "path": "examples/mysql-init-options/mysql_init_options.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to initialize the MySQL client with different\n+//initialization options. Please note that, the MySQL database driver jar\n+//should be placed under `BALLERINA_HOME/bre/lib`. The MySQL connector uses some database properties\n+//from MySQL version 8.0.x onwards, therefore it is encouraged to use MySQL driver version greater than 8.0.x.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjg0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036848", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            #  To run this sample, navigate to the directory that contains the", "author": "praneesha", "createdAt": "2020-03-13T05:29:59Z", "path": "examples/mysql-init-options/mysql_init_options.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjg4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036884", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-13T05:30:08Z", "path": "examples/mysql-init-options/mysql_init_options.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNjk0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392036944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Error when initializing MySQL client without any params\n          \n          \n            \n            Error when initializing the MySQL client without any params.", "author": "praneesha", "createdAt": "2020-03-13T05:30:21Z", "path": "examples/mysql-init-options/mysql_init_options.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run mysql_init_options.bal\n+\n+Error when initializing MySQL client without any params", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzA3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392037074", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully completed initialization!\n          \n          \n            \n            Initialization completed successfully!", "author": "praneesha", "createdAt": "2020-03-13T05:31:02Z", "path": "examples/mysql-init-options/mysql_init_options.out", "diffHunk": "@@ -0,0 +1,12 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run mysql_init_options.bal\n+\n+Error when initializing MySQL client without any params\n+error {ballerina/sql}ApplicationError message=error in sql connector configuration: Failed to initialize pool: Access denied for user ''@'localhost' (using password: NO) Caused by :Access denied for user ''@'localhost' (using password: NO)\n+MySQL client with user and password created.\n+MySQL client with user and password created with default host.\n+MySQL client with host, user, password, database and port created.\n+MySQL client with database options created.\n+MySQL client with connection pool created.\n+Successfully completed initialization!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzExNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392037117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Username and password of MySQL database. This is used in below examples when initializing the\n          \n          \n            \n            //Username and password of the MySQL database. This is used in the below examples when initializing the", "author": "praneesha", "createdAt": "2020-03-13T05:31:16Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzE3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392037174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //MySQL connector. Please change these based on your setup if you want to try locally.\n          \n          \n            \n            //MySQL connector. You need to change these based on your setup to try locally.", "author": "praneesha", "createdAt": "2020-03-13T05:31:32Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzIxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392037211", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Select the rows in the database table via query remote operation.\n          \n          \n            \n                // Select the rows in the database table via the query remote operation.", "author": "praneesha", "createdAt": "2020-03-13T05:31:43Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzkwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392037900", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The result is returned as a stream, and the elements of the stream can\n          \n          \n            \n                // The result is returned as a stream and the elements of the stream can", "author": "praneesha", "createdAt": "2020-03-13T05:35:12Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzkzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392037930", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // be either record or error.\n          \n          \n            \n                // be either a record or an error.", "author": "praneesha", "createdAt": "2020-03-13T05:35:22Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzNzk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392037976", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If there is any error during the execution of the sql query or iteration of the\n          \n          \n            \n                // If there is any error during the execution of the SQL query or iteration of the", "author": "praneesha", "createdAt": "2020-03-13T05:35:36Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzODAyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392038028", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Check and handle the error during the sql query\n          \n          \n            \n                // Check and handle the error during the SQL query", "author": "praneesha", "createdAt": "2020-03-13T05:35:47Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzODIzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392038233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The result of the count operation is provided as record stream.\n          \n          \n            \n                // The result of the count operation is provided as a record stream.", "author": "praneesha", "createdAt": "2020-03-13T05:36:42Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzODY2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392038666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the above count query will return only single row, next() operation is sufficient\n          \n          \n            \n                // Since the above count query will return only a single row, the `next()` operation is sufficient", "author": "praneesha", "createdAt": "2020-03-13T05:38:48Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzODgxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392038814", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Define a record to load the query result schema as shown in function 'typedQuery' below.\n          \n          \n            \n            //Define a record to load the query result schema as shown in the below 'typedQuery' function.", "author": "praneesha", "createdAt": "2020-03-13T05:39:35Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzODgzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392038839", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //In this example, all columns of the customer table will be loaded,\n          \n          \n            \n            //In this example, all columns of the customer table will be loaded.", "author": "praneesha", "createdAt": "2020-03-13T05:39:42Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzODk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392038976", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //therefore creating `Customer` record with all columns. The result's column name\n          \n          \n            \n            //Therefore, a `Customer` record will be created with all the columns. The name of the result column", "author": "praneesha", "createdAt": "2020-03-13T05:40:22Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzOTAzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392039039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //and the defined field name of the record will be matched with case insensitively.\n          \n          \n            \n            //and the defined field name of the record will be matched case insensitively.", "author": "praneesha", "createdAt": "2020-03-13T05:40:37Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MDE0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392040142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The result is returned as a Customer record stream, and the elements\n          \n          \n            \n                // The result is returned as a Customer record stream and the elements", "author": "praneesha", "createdAt": "2020-03-13T05:45:11Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MDE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392040180", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // of the stream can be either Customer record or error.\n          \n          \n            \n                // of the stream can be either a Customer record or an error.", "author": "praneesha", "createdAt": "2020-03-13T05:45:23Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MDIwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392040209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Cast to the generic record type to the Customer stream type.\n          \n          \n            \n                // Cast the generic record type to the Customer stream type.", "author": "praneesha", "createdAt": "2020-03-13T05:45:33Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast to the generic record type to the Customer stream type.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MDI0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392040244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Iterate through the customer stream.\n          \n          \n            \n                // Iterate the customer stream.", "author": "praneesha", "createdAt": "2020-03-13T05:45:43Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast to the generic record type to the Customer stream type.\n+    stream<Customer, sql:Error> customerStream = <stream<Customer, sql:Error>>resultStream;\n+\n+    // Iterate through the customer stream.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MDMxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392040316", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initialize the MySQL client\n          \n          \n            \n                // Initialize the MySQL client.", "author": "praneesha", "createdAt": "2020-03-13T05:45:53Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast to the generic record type to the Customer stream type.\n+    stream<Customer, sql:Error> customerStream = <stream<Customer, sql:Error>>resultStream;\n+\n+    // Iterate through the customer stream.\n+    error? e = customerStream.forEach(function(Customer customer) {\n+        io:println(customer);\n+    });\n+    if (e is error) {\n+            io:println(e);\n+    }\n+\n+    // Close the stream.\n+    e = resultStream.close();\n+\n+    io:println(\"------ End Query With Type Description -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable() returns sql:Error? {\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS MYSQL_BBE\");\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS MYSQL_BBE.Customers\");\n+    result = check mysqlClient->execute(\"CREATE TABLE IF NOT EXISTS MYSQL_BBE.Customers(customerId INTEGER \" +\n+        \"NOT NULL AUTO_INCREMENT, FirstName  VARCHAR(300), LastName  VARCHAR(300), RegistrationID INTEGER,\" +\n+        \"CreditLimit DOUBLE, Country  VARCHAR(300), PRIMARY KEY (CustomerId))\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.Customers (FirstName,LastName,RegistrationID,\" +\n+        \"CreditLimit,Country) VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.Customers (FirstName,LastName,RegistrationID,\" +\n+        \"CreditLimit,Country) VALUES ('Dan', 'Brown', 2, 10000, 'UK')\");\n+    check mysqlClient.close();\n+}\n+\n+public function main() {\n+    // Initialize the MySQL client", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MDM1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392040358", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Executes the select queries in different options.\n          \n          \n            \n                        // Execute the `select` queries in different options.", "author": "praneesha", "createdAt": "2020-03-13T05:46:06Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,138 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//Username and password of MySQL database. This is used in below examples when initializing the\n+//MySQL connector. Please change these based on your setup if you want to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via query remote operation.\n+    // The result is returned as a stream, and the elements of the stream can\n+    // be either record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+        io:print(\"Customer first name: \");\n+        io:println(result[\"FirstName\"]);\n+        io:print(\"Customer last name: \");\n+        io:println(result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the sql query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered. However, in\n+    // case if the stream is not fully consumed, stream should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as record stream.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only single row, next() operation is sufficient\n+    // to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:print(\"Total rows in customer table : \");\n+        io:println(result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\");\n+        io:println(result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in function 'typedQuery' below.\n+//In this example, all columns of the customer table will be loaded,\n+//therefore creating `Customer` record with all columns. The result's column name\n+//and the defined field name of the record will be matched with case insensitively.\n+type Customer record {\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+};\n+\n+function typedQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream, and the elements\n+    // of the stream can be either Customer record or error.\n+    stream<record{}, error> resultStream = mysqlClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast to the generic record type to the Customer stream type.\n+    stream<Customer, sql:Error> customerStream = <stream<Customer, sql:Error>>resultStream;\n+\n+    // Iterate through the customer stream.\n+    error? e = customerStream.forEach(function(Customer customer) {\n+        io:println(customer);\n+    });\n+    if (e is error) {\n+            io:println(e);\n+    }\n+\n+    // Close the stream.\n+    e = resultStream.close();\n+\n+    io:println(\"------ End Query With Type Description -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable() returns sql:Error? {\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    sql:ExecuteResult? result = check mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS MYSQL_BBE\");\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS MYSQL_BBE.Customers\");\n+    result = check mysqlClient->execute(\"CREATE TABLE IF NOT EXISTS MYSQL_BBE.Customers(customerId INTEGER \" +\n+        \"NOT NULL AUTO_INCREMENT, FirstName  VARCHAR(300), LastName  VARCHAR(300), RegistrationID INTEGER,\" +\n+        \"CreditLimit DOUBLE, Country  VARCHAR(300), PRIMARY KEY (CustomerId))\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.Customers (FirstName,LastName,RegistrationID,\" +\n+        \"CreditLimit,Country) VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.Customers (FirstName,LastName,RegistrationID,\" +\n+        \"CreditLimit,Country) VALUES ('Dan', 'Brown', 2, 10000, 'UK')\");\n+    check mysqlClient.close();\n+}\n+\n+public function main() {\n+    // Initialize the MySQL client\n+    sql:Error? err = initializeTable();\n+    if (err is sql:Error) {\n+        io:println(\"Sample data initialization failed!\");\n+        io:println(err);\n+    } else {\n+        mysql:Client|sql:Error mysqlClient = new (user = dbUser, password = dbPassword, database = \"MYSQL_BBE\");\n+        if (mysqlClient is mysql:Client) {\n+            // Executes the select queries in different options.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MjkwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392042901", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This example demonstrates how to use the JDBC client select query operations with stream return type.\n          \n          \n            \n            // This example demonstrates how to use the JDBC client select query operations with the stream return type.", "author": "praneesha", "createdAt": "2020-03-13T05:57:10Z", "path": "examples/mysql-query-operation/mysql_query_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0Mjk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392042991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n          \n          \n            \n            //Note that the MySQL database driver JAR should be placed in the `BALLERINA_HOME/bre/lib` directory.", "author": "praneesha", "createdAt": "2020-03-13T05:57:43Z", "path": "examples/mysql-query-operation/mysql_query_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+//Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MzA4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392043082", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is\n          \n          \n            \n            //The MySQL connector uses database properties from MySQL version 8.0.x onwards. Therefore, it is", "author": "praneesha", "createdAt": "2020-03-13T05:58:05Z", "path": "examples/mysql-query-operation/mysql_query_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+//Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n+//The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MzE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392043157", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //encouraged to use MySQL driver version greater than 8.0.x.\n          \n          \n            \n            //recommended to use a MySQL driver version greater than 8.0.x.", "author": "praneesha", "createdAt": "2020-03-13T05:58:23Z", "path": "examples/mysql-query-operation/mysql_query_operation.description", "diffHunk": "@@ -0,0 +1,4 @@\n+// This example demonstrates how to use the JDBC client select query operations with stream return type.\n+//Please note that, the MySQL database driver jar should be placed under `BALLERINA_HOME/bre/lib`.\n+//The MySQL connector uses some database properties from MySQL version 8.0.x onwards, therefore it is\n+//encouraged to use MySQL driver version greater than 8.0.x.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MzE5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392043191", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # At the command line, navigate to the directory that contains the\n          \n          \n            \n            #  To run this sample, navigate to the directory that contains the", "author": "praneesha", "createdAt": "2020-03-13T05:58:39Z", "path": "examples/mysql-query-operation/mysql_query_operation.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# At the command line, navigate to the directory that contains the", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MzI0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392043242", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and run the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-13T05:58:53Z", "path": "examples/mysql-query-operation/mysql_query_operation.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0MzMwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392043308", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Successfully queried the database!\n          \n          \n            \n            Database queried successfully!", "author": "praneesha", "createdAt": "2020-03-13T05:59:10Z", "path": "examples/mysql-query-operation/mysql_query_operation.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# At the command line, navigate to the directory that contains the\n+# `.bal` file and run the `ballerina run` command.\n+$ ballerina run mysql_query_operation.bal\n+\n+------ Start Simple Query -------\n+customerId=1 FirstName=Peter LastName=Stuart RegistrationID=1 CreditLimit=5000.75 Country=USA\n+Customer first name: Peter\n+Customer last name: Stuart\n+customerId=2 FirstName=Dan LastName=Brown RegistrationID=2 CreditLimit=10000.0 Country=UK\n+Customer first name: Dan\n+Customer last name: Brown\n+------ End Simple Query -------\n+------ Start Count Total Rows -------\n+Total rows in customer table : 2\n+------ End Count Total Rows -------\n+------ Start Query With Type Description -------\n+customerId=1 firstName=Peter lastName=Stuart registrationId=1 creditLimit=5000.75 country=USA\n+customerId=2 firstName=Dan lastName=Brown registrationId=2 creditLimit=10000.0 country=UK\n+------ End Query With Type Description -------\n+Successfully queried the database!", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzODkzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392638936", "bodyText": "The column count for BBEs is usually 80, or there'll be breaks in between when rendering. Shall we fix everywhere?\nhttps://github.com/ballerina-platform/ballerina-lang/blob/master/docs/bbe-guidelines/bbe-guidelines.md", "author": "MaryamZi", "createdAt": "2020-03-15T03:51:25Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS BINARY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE BINARY_TYPES (row_id INTEGER NOT NULL,\" +\n+        \"blob_type BLOB(1024), clob_type CLOB(1024), binary_type BINARY(27), PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO BINARY_TYPES (row_id, blob_type, clob_type, binary_type) VALUES\" +", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzOTI3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392639270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        io:println(\"Sample data table initialization failed!\");\n          \n          \n            \n                        io:println(err);\n          \n          \n            \n                        io:println(\"Sample data table initialization failed: \", err);", "author": "MaryamZi", "createdAt": "2020-03-15T04:00:17Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS BINARY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE BINARY_TYPES (row_id INTEGER NOT NULL,\" +\n+        \"blob_type BLOB(1024), clob_type CLOB(1024), binary_type BINARY(27), PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO BINARY_TYPES (row_id, blob_type, clob_type, binary_type) VALUES\" +\n+        \"(1, X'77736F322062616C6C6572696E6120626C6F6220746573742E', CONVERT('very long text', CLOB),\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS ARRAY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE ARRAY_TYPES (row_id INTEGER NOT NULL, \" +\n+        \"int_array ARRAY, long_array ARRAY,float_array ARRAY, double_array ARRAY, boolean_array ARRAY,\" +\n+        \"string_array ARRAY, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO ARRAY_TYPES (row_id, int_array, long_array, float_array, \" +\n+        \"double_array, boolean_array, string_array) VALUES (1, (1, 2, 3), (100000000, 200000000, 300000000),\" +\n+        \"(245.23, 5559.49, 8796.123), (245.23, 5559.49, 8796.123), (TRUE, FALSE, TRUE), ('Hello', 'Ballerina'))\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS DATE_TIME_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"Insert into DATE_TIME_TYPES (row_id, date_type, time_type, timestamp_type,\" +\n+        \"datetime_type) values (1,'2017-05-23','14:15:23','2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/DATA_TYPES\", \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        sql:Error? err = initializeTable(jdbcClient);\n+        if (err is sql:Error) {\n+            io:println(\"Sample data table initialization failed!\");\n+            io:println(err);", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzOTMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392639300", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    io:println(\"Initialization failed!!\");\n          \n          \n            \n                    io:println(jdbcClient);\n          \n          \n            \n                    io:println(\"Initialization failed: \", jdbcClient);", "author": "MaryamZi", "createdAt": "2020-03-15T04:00:50Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+};\n+\n+type DateTimeType record {\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // be having records in `BinaryType`.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    //  result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // be having records in `ArrayType`.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream = <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within record from the `resultStream` will be automatically\n+    // identified based on the column name and type of the query result.\n+    stream<record{}, error> resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the sql query or iteration of the\n+    // result stream, the result stream will terminate and return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream` will\n+    // be having records in `DateTimeType`. The Date/Time/DateTime/Timestamp fields of the database table\n+    // can be mapped to time:Time, string and int types in ballerina.\n+    resultStream = jdbcClient->query(\"Select * from DATE_TIME_TYPES\", DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream = <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate through the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS BINARY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE BINARY_TYPES (row_id INTEGER NOT NULL,\" +\n+        \"blob_type BLOB(1024), clob_type CLOB(1024), binary_type BINARY(27), PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO BINARY_TYPES (row_id, blob_type, clob_type, binary_type) VALUES\" +\n+        \"(1, X'77736F322062616C6C6572696E6120626C6F6220746573742E', CONVERT('very long text', CLOB),\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS ARRAY_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE ARRAY_TYPES (row_id INTEGER NOT NULL, \" +\n+        \"int_array ARRAY, long_array ARRAY,float_array ARRAY, double_array ARRAY, boolean_array ARRAY,\" +\n+        \"string_array ARRAY, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"INSERT INTO ARRAY_TYPES (row_id, int_array, long_array, float_array, \" +\n+        \"double_array, boolean_array, string_array) VALUES (1, (1, 2, 3), (100000000, 200000000, 300000000),\" +\n+        \"(245.23, 5559.49, 8796.123), (245.23, 5559.49, 8796.123), (TRUE, FALSE, TRUE), ('Hello', 'Ballerina'))\");\n+\n+    result = check jdbcClient->execute(\"DROP TABLE IF EXISTS DATE_TIME_TYPES\");\n+    result = check jdbcClient->execute(\"CREATE TABLE DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check jdbcClient->execute(\"Insert into DATE_TIME_TYPES (row_id, date_type, time_type, timestamp_type,\" +\n+        \"datetime_type) values (1,'2017-05-23','14:15:23','2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/DATA_TYPES\", \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        sql:Error? err = initializeTable(jdbcClient);\n+        if (err is sql:Error) {\n+            io:println(\"Sample data table initialization failed!\");\n+            io:println(err);\n+        } else {\n+            // Executes the complex data type queries.\n+            queryBinaryType(jdbcClient);\n+            queryArrayType(jdbcClient);\n+            queryDateTimeType(jdbcClient);\n+            io:println(\"Successfully executed the sample!\");\n+        }\n+        // Close the JDBC client.\n+        sql:Error? e = jdbcClient.close();\n+    } else {\n+        io:println(\"Initialization failed!!\");\n+        io:println(jdbcClient);", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzOTU0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392639546", "bodyText": "The name of the .description file should be the name of the directory with -s replaced by _s.\njdbc2_complex_type_queries.description\nSince we have only one bal file in these examples, shall we update the bal and out file names similarly too?", "author": "MaryamZi", "createdAt": "2020-03-15T04:07:38Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,6 @@\n+// This example demonstrates how to use the JDBC client with complex data types such as arrays,", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NDUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392774514", "bodyText": "I think the names are correct here. Directory name : jdbc2-complex-type-queries, and files names are: jdbc2_complex_type_queries.bal, jdbc2_complex_type_queries.description, jdbc2_complex_type_queries.out. The files names are replaced '-' by '_'.\nIs there anything wrong in the above names? Sorry, it's not clear for me what change you wanted to have.", "author": "sinthuja", "createdAt": "2020-03-16T04:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzOTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTMzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392775336", "bodyText": "Yeah, sorry my bad, I seem to have misread something. This is correct.", "author": "MaryamZi", "createdAt": "2020-03-16T04:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzOTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MDEzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392640132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int|string? generatedId = ();\n          \n          \n            \n            \n          \n          \n            \n                if (result is sql:ExecuteResult) {\n          \n          \n            \n                    io:print(\"Rows affected: \");\n          \n          \n            \n                    io:println(result.affectedRowCount);\n          \n          \n            \n                    io:print(\"Generated Customer ID: \");\n          \n          \n            \n                    io:println(result.lastInsertId);\n          \n          \n            \n                    generatedId = result.lastInsertId;\n          \n          \n            \n                }\n          \n          \n            \n                return generatedId;\n          \n          \n            \n            \n          \n          \n            \n                if (result is sql:ExecuteResult) {\n          \n          \n            \n                    io:print(\"Rows affected: \", result.affectedRowCount);\n          \n          \n            \n                    io:print(\"Generated Customer ID: \", result.lastInsertId);\n          \n          \n            \n                    return result.lastInsertId;\n          \n          \n            \n                }", "author": "MaryamZi", "createdAt": "2020-03-15T04:21:49Z", "path": "examples/jdbc2-execute-operation/jdbc2_execute_operation.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeTable(jdbc:Client jdbcClient) returns int|string|sql:Error? {\n+    // Execute drop table. The sql:ExecuteResult is returned during the successful execution.\n+    // And error whill be returned in case of failure.\n+    sql:ExecuteResult? result = check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    if (result is sql:ExecuteResult) {\n+        io:println(\"Drop table executed\");\n+        io:println(result);\n+    }\n+    // Similarly to drop table, the create table query is executed. Here the `customerId`\n+    // is a auto generated column.\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(customerId INTEGER \" +\n+        \"NOT NULL IDENTITY, firstName  VARCHAR(300),lastName  VARCHAR(300), registrationID INTEGER,\" +\n+        \"creditLimit DOUBLE, country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+\n+    // Insert sample data into the table. The result will have `affectedRowCount` and `lastInsertedId`\n+    // with the auto generated id of the last row.\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,lastName,registrationID,creditLimit,country)\" +\n+        \"VALUES ('Peter', 'Stuart', 1, 5000.75, 'USA')\");\n+    int|string? generatedId = ();\n+\n+    if (result is sql:ExecuteResult) {\n+        io:print(\"Rows affected: \");\n+        io:println(result.affectedRowCount);\n+        io:print(\"Generated Customer ID: \");\n+        io:println(result.lastInsertId);\n+        generatedId = result.lastInsertId;\n+    }\n+    return generatedId;", "originalCommit": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7f1b6f832a80115ef0930913b34974699a695c20", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f1b6f832a80115ef0930913b34974699a695c20", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:12:49Z", "type": "commit"}, {"oid": "c579cd5e5a02dfe479acecc5a0ae7327ce2001d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c579cd5e5a02dfe479acecc5a0ae7327ce2001d6", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:13:28Z", "type": "commit"}, {"oid": "a717a95b3f715b6c723fb631a69e71dd8db7e35c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a717a95b3f715b6c723fb631a69e71dd8db7e35c", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:13:57Z", "type": "commit"}, {"oid": "4dcda57398895c6f40feddb557accc03cad3bf45", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4dcda57398895c6f40feddb557accc03cad3bf45", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:14:24Z", "type": "commit"}, {"oid": "8136929963b4969f936b4cc865bcd23a5d0a8fb8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8136929963b4969f936b4cc865bcd23a5d0a8fb8", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:14:51Z", "type": "commit"}, {"oid": "e2959e56f4d86d70a6a6b9e4afb9d000d73fe68e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2959e56f4d86d70a6a6b9e4afb9d000d73fe68e", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:15:37Z", "type": "commit"}, {"oid": "97e3a7e5031ad1850d5d7efb2297c3d74df0839a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97e3a7e5031ad1850d5d7efb2297c3d74df0839a", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:16:04Z", "type": "commit"}, {"oid": "c308ecd834be923cb9dad621f6a24c6b06432689", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c308ecd834be923cb9dad621f6a24c6b06432689", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:16:28Z", "type": "commit"}, {"oid": "351226166c1494a886e0210cc687792dd357d888", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/351226166c1494a886e0210cc687792dd357d888", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:16:53Z", "type": "commit"}, {"oid": "e366b04a4c0a04d5cb51c04d945974b2ae3f08b4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e366b04a4c0a04d5cb51c04d945974b2ae3f08b4", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:17:16Z", "type": "commit"}, {"oid": "03558a6f4b025e96c1acb0f75f66ba943c73c918", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03558a6f4b025e96c1acb0f75f66ba943c73c918", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:17:47Z", "type": "commit"}, {"oid": "4621f34e90c940dff07be58d9a0e4671dcad2e79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4621f34e90c940dff07be58d9a0e4671dcad2e79", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:18:10Z", "type": "commit"}, {"oid": "13675e16af4f4a7776e7bb979b5f72bf28b98ea0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13675e16af4f4a7776e7bb979b5f72bf28b98ea0", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:18:36Z", "type": "commit"}, {"oid": "5ade9c0f2a5dfa6ee2501d5963539930cc47a394", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ade9c0f2a5dfa6ee2501d5963539930cc47a394", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:19:21Z", "type": "commit"}, {"oid": "486d3031f9f0053f2c069c229f75ef354954777e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/486d3031f9f0053f2c069c229f75ef354954777e", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:20:47Z", "type": "commit"}, {"oid": "b82ae937360ee450143eb4f3351d6fde0065c19a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b82ae937360ee450143eb4f3351d6fde0065c19a", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:21:17Z", "type": "commit"}, {"oid": "308bf4a4042e9fe4d4048a1b27256add6444cc83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/308bf4a4042e9fe4d4048a1b27256add6444cc83", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:21:39Z", "type": "commit"}, {"oid": "0e9cee603fec9c79d9706e4510d912ccda67d649", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e9cee603fec9c79d9706e4510d912ccda67d649", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:21:59Z", "type": "commit"}, {"oid": "39bc01600bc009c772b569bc0b532e1a1434d8d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39bc01600bc009c772b569bc0b532e1a1434d8d9", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:23:17Z", "type": "commit"}, {"oid": "1ca46f8a160bcadda75b5eb1a94f4a09af3a661d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ca46f8a160bcadda75b5eb1a94f4a09af3a661d", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:23:39Z", "type": "commit"}, {"oid": "d1c9bed71baf225794a15e1bd1e77598cd8e896c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1c9bed71baf225794a15e1bd1e77598cd8e896c", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:23:59Z", "type": "commit"}, {"oid": "2ed924ecb94ff794b60908f972995ba7ca436e3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ed924ecb94ff794b60908f972995ba7ca436e3e", "message": "Apply suggestions from code review\r\n\r\nAdd suggested changes from review.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>\nCo-Authored-By: Pubudu Fernando <pubudu.fernando@gmail.com>", "committedDate": "2020-03-15T13:35:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTM5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392775392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on an\n          \n          \n            \n            //H2 database and the H2 database driver JAR is included by default in the Ballerina distribution.\n          \n          \n            \n            //Therefore, it is not required to copy the driver JAR for the H2 database. \n          \n          \n            \n            // should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on an\n          \n          \n            \n            // H2 database and the H2 database driver JAR is included by default in the Ballerina distribution.\n          \n          \n            \n            // Therefore, it is not required to copy the driver JAR for the H2 database.", "author": "MaryamZi", "createdAt": "2020-03-16T04:17:08Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description", "diffHunk": "@@ -0,0 +1,6 @@\n+// This example demonstrates how to use the JDBC client with complex data types such as arrays,\n+// binary, blobs, clob, and date/time fields.\n+// Note that the relevant database driver JAR\n+//should be placed in the `BALLERINA_HOME/bre/lib` folder. However, this sample is based on an\n+//H2 database and the H2 database driver JAR is included by default in the Ballerina distribution.\n+//Therefore, it is not required to copy the driver JAR for the H2 database. ", "originalCommit": "2ed924ecb94ff794b60908f972995ba7ca436e3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc5MTQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21686#discussion_r392791428", "bodyText": "Fixed now.", "author": "sinthuja", "createdAt": "2020-03-16T05:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTM5Mg=="}], "type": "inlineReview"}, {"oid": "14cfb0eb11e18da430cc375abb72abb86f639a96", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/14cfb0eb11e18da430cc375abb72abb86f639a96", "message": "Fix review comments for JDBC BBEs", "committedDate": "2020-03-16T05:06:04Z", "type": "commit"}, {"oid": "fdcd2df345a38b2062f1fcdc1bdb82040f86c9f9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fdcd2df345a38b2062f1fcdc1bdb82040f86c9f9", "message": "Fix review comments for MySQL BBEs", "committedDate": "2020-03-16T05:38:58Z", "type": "commit"}, {"oid": "0299c9a60357896b922edf074b27679fbc0cdb3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0299c9a60357896b922edf074b27679fbc0cdb3d", "message": "Fix messages in BBEs", "committedDate": "2020-03-16T05:47:34Z", "type": "commit"}, {"oid": "ca98c3e6da2a0f955c85553c5e0e317cca8210c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca98c3e6da2a0f955c85553c5e0e317cca8210c3", "message": "Fix messages in BBEs", "committedDate": "2020-03-16T06:30:29Z", "type": "commit"}, {"oid": "b1e19c8598061dbf646bf5e0c3eb42a1afd508dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1e19c8598061dbf646bf5e0c3eb42a1afd508dc", "message": "Fix formating in BBEs", "committedDate": "2020-03-16T06:33:58Z", "type": "commit"}]}