{"pr_number": 21510, "pr_title": "Introduce client response data binding support", "pr_createdAt": "2020-03-06T08:37:21Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510", "timeline": [{"oid": "1ccb60b2c433bc021c5fc08a5b5b620404c72d51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ccb60b2c433bc021c5fc08a5b5b620404c72d51", "message": "Change function signature", "committedDate": "2020-02-24T09:58:47Z", "type": "commit"}, {"oid": "a39f5081ea781a81757c4feb9e0d7fc6fc442560", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a39f5081ea781a81757c4feb9e0d7fc6fc442560", "message": "Add test logs", "committedDate": "2020-02-25T06:08:58Z", "type": "commit"}, {"oid": "cd7afd09e1d390ac5f47516ae142fa0d31a59484", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd7afd09e1d390ac5f47516ae142fa0d31a59484", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into http-2.0", "committedDate": "2020-02-28T04:20:56Z", "type": "commit"}, {"oid": "b48bd5ffe35862226c21ece0fa054b4b54549ef7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b48bd5ffe35862226c21ece0fa054b4b54549ef7", "message": "Modify chained clients with the API", "committedDate": "2020-03-04T05:28:23Z", "type": "commit"}, {"oid": "1bbb3fff26c4dc0386f1903c56b9e32387b68866", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bbb3fff26c4dc0386f1903c56b9e32387b68866", "message": "Add integration test cases", "committedDate": "2020-03-06T05:00:37Z", "type": "commit"}, {"oid": "dd83a14ef4c9c131f44287d45e8a6eebf2db3a4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd83a14ef4c9c131f44287d45e8a6eebf2db3a4d", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into http-2.0\n\n# Conflicts:\n#\tstdlib/http/src/main/ballerina/src/http/http_commons.bal", "committedDate": "2020-03-06T05:25:19Z", "type": "commit"}, {"oid": "ce3b012ff638c23c23b029cd551e6e6a5ec71b3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce3b012ff638c23c23b029cd551e6e6a5ec71b3e", "message": "Add test module for v2", "committedDate": "2020-03-06T08:29:55Z", "type": "commit"}, {"oid": "4ffc4f191f601f92e1ba95ce2deb2447c77f9414", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ffc4f191f601f92e1ba95ce2deb2447c77f9414", "message": "Add negative test cases", "committedDate": "2020-03-09T14:06:13Z", "type": "commit"}, {"oid": "ae89a931906be3e14ff78891b6d556a084eec96f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae89a931906be3e14ff78891b6d556a084eec96f", "message": "Address review suggestions", "committedDate": "2020-04-01T16:18:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDI3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234274", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:13:38Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDQwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234404", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:13:54Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDQ5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234493", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:14:04Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDYwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response or an `http:ClientError` if failed to establish communication with the upstream server\n          \n          \n            \n                # + return - The response or an `http:ClientError` if failed to establish the communication with the upstream server", "author": "praneesha", "createdAt": "2020-04-02T11:14:15Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -67,19 +67,28 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function post(@untainted string path, RequestMessage message, public TargetType targetType = Response)\n+            returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->post(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->post(path, req);\n+        }\n+        var result = self.httpClient->post(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.head()` function can be used to send HTTP HEAD requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function head(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + return - The response or an `http:ClientError` if failed to establish communication with the upstream server", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDcxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:14:31Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -89,10 +98,18 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function put(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDgwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234802", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:14:43Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -89,10 +98,18 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function put(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDkyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402234925", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:14:58Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -89,10 +98,18 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function put(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTA2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235066", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:15:13Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235213", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:15:30Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTMyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:15:41Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235621", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:16:23Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTcyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:16:36Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNTgwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402235805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:16:44Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjA5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236090", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:17:21Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:17:39Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjI3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:17:46Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:18:03Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236534", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:18:16Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjU5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236594", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:18:24Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjc0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:18:37Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjgzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236839", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:18:51Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjkxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402236915", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:18:59Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNzA0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402237048", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n          \n          \n            \n                # + targetType - HTTP response or the payload type (`string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}`, or", "author": "praneesha", "createdAt": "2020-04-02T11:19:13Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function options(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->options(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->options(path, message = req);\n+        }\n+        var result = self.httpClient->options(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.forward()` function can be used to invoke an HTTP call with inbound request's HTTP verb\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNzE4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402237189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n          \n          \n            \n                #                `record {| anydata...; |}[]`), which is expected to be returned after data binding", "author": "praneesha", "createdAt": "2020-04-02T11:19:29Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function options(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->options(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->options(path, message = req);\n+        }\n+        var result = self.httpClient->options(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.forward()` function can be used to invoke an HTTP call with inbound request's HTTP verb\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNzI4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402237284", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            establish communication with the upstream server or a data binding failure\n          \n          \n            \n                #            establish the communication with the upstream server or a data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:19:42Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -101,63 +118,111 @@ public type Client client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function execute(@untainted string httpVerb, @untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->execute(httpVerb, path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->execute(httpVerb, path, req);\n+        }\n+        var result = self.httpClient->execute(httpVerb, path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function patch(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function patch(@untainted string path, RequestMessage message,\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->patch(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->patch(path, req);\n+        }\n+        var result = self.httpClient->patch(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n     #\n     # + path - Resource path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function delete(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function delete(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->delete(path, req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->delete(path, req);\n+        }\n+        var result = self.httpClient->delete(path, req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function get(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function get(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->get(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->get(path, message = req);\n+        }\n+        var result = self.httpClient->get(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n     #\n     # + path - Request path\n     # + message - An optional HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function options(@untainted string path, public RequestMessage message = ()) returns Response|ClientError {\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure\n+    public remote function options(@untainted string path, public RequestMessage message = (),\n+            public TargetType targetType = Response) returns @tainted Response|PayloadType|ClientError {\n         Request req = buildRequest(message);\n-        return self.httpClient->options(path, message = req);\n+        if (targetType is typedesc<Response>) {\n+            return self.httpClient->options(path, message = req);\n+        }\n+        var result = self.httpClient->options(path, message = req);\n+        return processResponse(result, targetType);\n     }\n \n     # The `Client.forward()` function can be used to invoke an HTTP call with inbound request's HTTP verb\n     #\n     # + path - Request path\n     # + request - An HTTP inbound request message\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function forward(@untainted string path, Request request) returns Response|ClientError {\n-        return self.httpClient->forward(path, request);\n+    # + targetType - HTTP response or the payload type, `string`, `xml`, `json`, `byte[]`,`record {| anydata...; |}` or\n+    #                `record {| anydata...; |}[]`, that is expected to be returned after data-binding\n+    # + return - The response or the payload (if the `targetType` is configured) or an `http:ClientError` if failed to\n+    #            establish communication with the upstream server or a data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MjIzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402242230", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The response for the request or the response payload if data-binding expected otherwise an\n          \n          \n            \n                # + return - The response for the request or the response payload if data binding is expected. Otherwise, an", "author": "praneesha", "createdAt": "2020-04-02T11:29:27Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -38,8 +38,11 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - The types of payloads that are expected be returned after data-binding\n+    # + return - The response for the request or the response payload if data-binding expected otherwise an", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0MjQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402242428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `http:ClientError` if failed to establish communication with the upstream server or data binding failure\n          \n          \n            \n                # `http:ClientError` is returned  if failed to establish the communication with the upstream server or data binding failure", "author": "praneesha", "createdAt": "2020-04-02T11:29:51Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -38,8 +38,11 @@ public type HttpClient client object {\n     # + path - Resource path\n     # + message - An HTTP outbound request message or any payload of type `string`, `xml`, `json`, `byte[]`,\n     #             `io:ReadableByteChannel` or `mime:Entity[]`\n-    # + return - The response for the request or an `http:ClientError` if failed to establish communication with the upstream server\n-    public remote function post(@untainted string path, RequestMessage message) returns Response|ClientError {\n+    # + targetType - The types of payloads that are expected be returned after data-binding\n+    # + return - The response for the request or the response payload if data-binding expected otherwise an\n+    # `http:ClientError` if failed to establish communication with the upstream server or data binding failure", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTEyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason string for the `http:IllegalDataBindingStateError`\n          \n          \n            \n            # Represents the reason string for the `http:IllegalDataBindingStateError`.", "author": "praneesha", "createdAt": "2020-04-02T11:35:25Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTI3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245277", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents a data binding illegal state error\n          \n          \n            \n            # Represents an illegal data-binding  state error.", "author": "praneesha", "createdAt": "2020-04-02T11:35:42Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245398", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason string for the `http:ClientRequestError`\n          \n          \n            \n            # Represents the reason string for the `http:ClientRequestError`.", "author": "praneesha", "createdAt": "2020-04-02T11:35:55Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTU3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n          \n          \n            \n            # Represents an error, which occurred due to bad syntax or incomplete info in the client request(4xx HTTP response).", "author": "praneesha", "createdAt": "2020-04-02T11:36:15Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTYyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245620", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason string for the `http:RemoteServerError`\n          \n          \n            \n            # Represents the reason string for the `http:RemoteServerError`.", "author": "praneesha", "createdAt": "2020-04-02T11:36:23Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n+public type ClientRequestError error<CLIENT_REQUEST_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:RemoteServerError`", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTcyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402245724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents an error that occurred due to a failure of the remote server(5xx HTTP response)\n          \n          \n            \n            # Represents an error, which occurred due to a failure of the remote server(5xx HTTP response).", "author": "praneesha", "createdAt": "2020-04-02T11:36:36Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n+public type ClientRequestError error<CLIENT_REQUEST_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:RemoteServerError`\n+public const REMOTE_SERVER_ERROR = \"{ballerina/http}RemoteServerError\";\n+# Represents an error that occurred due to a failure of the remote server(5xx HTTP response)", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NzI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402247252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Ballerina HTTP Union Errors\n          \n          \n            \n            // Ballerina HTTP union errors.", "author": "praneesha", "createdAt": "2020-04-02T11:39:45Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -183,6 +185,21 @@ public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n # Represents a cookie error that occurred when using the cookies\n public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n \n+# Represents the reason string for the `http:IllegalDataBindingStateError`\n+public const ILLEGAL_DATA_BINDING_STATE_ERROR = \"{ballerina/http}IllegalDataBindingStateError\";\n+# Represents a data binding illegal state error\n+public type IllegalDataBindingStateError error<ILLEGAL_DATA_BINDING_STATE_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:ClientRequestError`\n+public const CLIENT_REQUEST_ERROR = \"{ballerina/http}ClientRequestError\";\n+# Represents an error that occurred due to bad syntax or incomplete info of client request(4xx HTTP response)\n+public type ClientRequestError error<CLIENT_REQUEST_ERROR, Detail>;\n+\n+# Represents the reason string for the `http:RemoteServerError`\n+public const REMOTE_SERVER_ERROR = \"{ballerina/http}RemoteServerError\";\n+# Represents an error that occurred due to a failure of the remote server(5xx HTTP response)\n+public type RemoteServerError error<REMOTE_SERVER_ERROR, Detail>;\n+\n // Ballerina HTTP Union Errors", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTEzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251139", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents HTTP/1.0 protocol\n          \n          \n            \n            # Represents the HTTP/1.0 protocol", "author": "praneesha", "createdAt": "2020-04-02T11:47:46Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTIyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents HTTP/1.1 protocol\n          \n          \n            \n            # Represents the HTTP/1.1 protocol", "author": "praneesha", "createdAt": "2020-04-02T11:47:56Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTI5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251290", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents HTTP/2.0 protocol\n          \n          \n            \n            # Represents the HTTP/2.0 protocol", "author": "praneesha", "createdAt": "2020-04-02T11:48:05Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTQ1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents http protocol scheme\n          \n          \n            \n            # Represents the HTTP protocol scheme", "author": "praneesha", "createdAt": "2020-04-02T11:48:23Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MTU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402251581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents https protocol scheme\n          \n          \n            \n            # Represents the HTTPS protocol scheme", "author": "praneesha", "createdAt": "2020-04-02T11:48:37Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MjA0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402252040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the http error code\n          \n          \n            \n            # Constant for the http error code\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the http error code\n          \n          \n            \n            # Constant for the HTTP error code", "author": "praneesha", "createdAt": "2020-04-02T11:49:27Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MjExMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402252113", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the default listener endpoint timeout\n          \n          \n            \n            # Constant for the default listener endpoint timeout", "author": "praneesha", "createdAt": "2020-04-02T11:49:36Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MzA2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402253067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Maximum number of requests that can be processed at a given time on a single connection.\n          \n          \n            \n            # Maximum number of requests that can be processed at a given time on a single connection", "author": "praneesha", "createdAt": "2020-04-02T11:51:28Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MzE3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402253174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents multipart primary type\n          \n          \n            \n            # Represents the multipart primary type", "author": "praneesha", "createdAt": "2020-04-02T11:51:39Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDEwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Constant for the identify not an HTTP Operation\n          \n          \n            \n            # Constant to identify a none-HTTP operation", "author": "praneesha", "createdAt": "2020-04-02T11:53:21Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDI0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n          \n          \n            \n            # `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response.", "author": "praneesha", "createdAt": "2020-04-02T11:53:37Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDM2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #         otherwise chunking header is set in the outbound request/response\n          \n          \n            \n            #         Otherwise, the chunking header is set in the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T11:53:51Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDUyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `ALWAYS`: Always set chunking header in the response\n          \n          \n            \n            # `ALWAYS`: Always set the chunking header in the response", "author": "praneesha", "createdAt": "2020-04-02T11:54:09Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDY2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If the payload is less than 8KB, content-length header is set in the outbound request/response,\n          \n          \n            \n            # If the payload is less than 8KB, content-length header is set in the outbound request/response.", "author": "praneesha", "createdAt": "2020-04-02T11:54:25Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDkxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402254910", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # otherwise chunking header is set in the outbound request/response.}\n          \n          \n            \n            # Otherwise, the chunking header is set in the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T11:54:56Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NDM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402264360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Always set chunking header in the response.\n          \n          \n            \n            # Always set the chunking header in the response.", "author": "praneesha", "createdAt": "2020-04-02T12:12:19Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NDQ1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402264454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n          \n          \n            \n            # Never set the chunking header even if the payload is larger than 8KB in the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T12:12:30Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NTIwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402265202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Options to compress using gzip or deflate.\n          \n          \n            \n            # Options to compress using GZIP or DEFLATE.", "author": "praneesha", "createdAt": "2020-04-02T12:13:49Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NTcxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402265711", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n          \n          \n            \n            # `ALWAYS`: Always set the accept-encoding/content-encoding in the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T12:14:43Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NTg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402265845", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n          \n          \n            \n            # `NEVER`: Never set the accept-encoding/content-encoding header in the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T12:14:57Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NjA4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402266085", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n          \n          \n            \n            # When the service behaves as an HTTP gateway, the accept-encoding option of the inbound request/response is set as the", "author": "praneesha", "createdAt": "2020-04-02T12:15:21Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NjUxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402266513", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n          \n          \n            \n            # `AUTO`: When the service behaves as an HTTP gateway, the accept-encoding option of the inbound request/response is set as the", "author": "praneesha", "createdAt": "2020-04-02T12:16:10Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NzEyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267129", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # outbound request/response accept-encoding/content-encoding option.\n          \n          \n            \n            # accept-encoding/content-encoding option of the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T12:17:22Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NzMzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Always set accept-encoding/content-encoding in outbound request/response.\n          \n          \n            \n            # Always set the accept-encoding/content-encoding option in the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T12:17:45Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NzUyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Never set accept-encoding/content-encoding header in outbound request/response.\n          \n          \n            \n            # Never set the accept-encoding/content-encoding header in the outbound request/response", "author": "praneesha", "createdAt": "2020-04-02T12:18:07Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2Nzg3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402267872", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n          \n          \n            \n            # The types of messages that are accepted by the HTTP `client` when sending out the outbound request", "author": "praneesha", "createdAt": "2020-04-02T12:18:42Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODE3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n          \n          \n            \n            # The types of messages that are accepted by the HTTP `listener` when sending out the outbound response", "author": "praneesha", "createdAt": "2020-04-02T12:19:03Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODM0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268344", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The type of user defined custom record.\n          \n          \n            \n            # The type of the user-defined custom record", "author": "praneesha", "createdAt": "2020-04-02T12:19:17Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of response payload that are returned by HTTP `client` after data binding operation.\n          \n          \n            \n            # The types of the response payload that are returned by the HTTP `client` after the data binding operation", "author": "praneesha", "createdAt": "2020-04-02T12:19:41Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODc2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268765", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The types of data values that are expected by HTTP `client` to return after data binding operation.\n          \n          \n            \n            # The types of data values that are expected by the HTTP `client` to return after the data binding operation", "author": "praneesha", "createdAt": "2020-04-02T12:20:05Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2ODk2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402268961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n          \n          \n            \n            # Defines the HTTP operations related to the circuit breaker, failover, and load balancer.", "author": "praneesha", "createdAt": "2020-04-02T12:20:24Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTA5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `FORWARD`: Forward the specified payload\n          \n          \n            \n            # `FORWARD`: Forwards the specified payload", "author": "praneesha", "createdAt": "2020-04-02T12:20:35Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTE3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269171", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `GET`: Request a resource\n          \n          \n            \n            # `GET`: Requests a resource", "author": "praneesha", "createdAt": "2020-04-02T12:20:43Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269237", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `POST`: Create a new resource\n          \n          \n            \n            # `POST`: Creates a new resource", "author": "praneesha", "createdAt": "2020-04-02T12:20:50Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTM1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `OPTIONS`: Request communication options available\n          \n          \n            \n            # `OPTIONS`: Requests communication options that are available", "author": "praneesha", "createdAt": "2020-04-02T12:21:04Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTQxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269418", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `PUT`: Replace the target resource\n          \n          \n            \n            # `PUT`: Replaces the target resource", "author": "praneesha", "createdAt": "2020-04-02T12:21:12Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTQ4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269485", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `PATCH`: Apply partial modification to the resource\n          \n          \n            \n            # `PATCH`: Applies partial modification to the resource", "author": "praneesha", "createdAt": "2020-04-02T12:21:21Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2OTc0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402269748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `SUBMIT`: Submits a http request and returns an HttpFuture object\n          \n          \n            \n            # `SUBMIT`: Submits an HTTP request and returns an `HttpFuture` object", "author": "praneesha", "createdAt": "2020-04-02T12:21:47Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDA0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270041", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Common type used for HttpFuture and Response used for resiliency clients.\n          \n          \n            \n            // Common type used for the `HttpFuture` and Response used for resiliency clients.", "author": "praneesha", "createdAt": "2020-04-02T12:22:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDE0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270149", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # A record for configuring SSL/TLS protocol and version to be used.\n          \n          \n            \n            # A record for configuring the SSL/TLS protocol and version to be used.", "author": "praneesha", "createdAt": "2020-04-02T12:22:22Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDIzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + name - SSL Protocol to be used (e.g.: TLS1.2)\n          \n          \n            \n            # + name - SSL Protocol to be used (e.g., TLS1.2)", "author": "praneesha", "createdAt": "2020-04-02T12:22:30Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDMyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270326", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n          \n          \n            \n            # + versions - SSL/TLS protocols to be enabled (e.g., TLSv1,TLSv1.1,TLSv1.2)", "author": "praneesha", "createdAt": "2020-04-02T12:22:39Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270514", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cacheValidityPeriod - The time period for which a cache entry is valid\n          \n          \n            \n            # + cacheValidityPeriod - The time period during which a cache entry is valid", "author": "praneesha", "createdAt": "2020-04-02T12:22:57Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDY5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cacheValidityPeriod - The time period for which a cache entry is valid\n          \n          \n            \n            # + cacheValidityPeriod - The time period during which a cache entry is valid", "author": "praneesha", "createdAt": "2020-04-02T12:23:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MDk1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402270958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + enable - The status of compression\n          \n          \n            \n            # + enable - The status of the compression", "author": "praneesha", "createdAt": "2020-04-02T12:23:34Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTA2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271063", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + contentTypes - Content types which are allowed for compression\n          \n          \n            \n            # + contentTypes - Content types, which are allowed for compression", "author": "praneesha", "createdAt": "2020-04-02T12:23:43Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTIzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271239", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + http1Settings - Configurations related to HTTP/1.x protocol\n          \n          \n            \n            # + http1Settings - Configurations related to the HTTP/1.x protocol", "author": "praneesha", "createdAt": "2020-04-02T12:23:58Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTM5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271394", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + http2Settings - Configurations related to HTTP/2 protocol\n          \n          \n            \n            # + http2Settings - Configurations related to the HTTP/2 protocol", "author": "praneesha", "createdAt": "2020-04-02T12:24:06Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTU3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n          \n          \n            \n            # + forwarded - The choice of setting the `forwarded`/`x-forwarded` header", "author": "praneesha", "createdAt": "2020-04-02T12:24:18Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTY3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271676", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + followRedirects - Configurations associated with Redirection\n          \n          \n            \n            # + followRedirects - Configurations associated with the redirection", "author": "praneesha", "createdAt": "2020-04-02T12:24:28Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n+# + followRedirects - Configurations associated with Redirection", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MTgxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402271811", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + compression - Specifies the way of handling compression (`accept-encoding`) header\n          \n          \n            \n            # + compression - Specifies the way of handling the compression (`accept-encoding`) header", "author": "praneesha", "createdAt": "2020-04-02T12:24:41Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n+# + followRedirects - Configurations associated with Redirection\n+# + poolConfig - Configurations associated with request pooling\n+# + cache - HTTP caching related configurations\n+# + compression - Specifies the way of handling compression (`accept-encoding`) header", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MjA1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21510#discussion_r402272050", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cookieConfig - Configurations associated with cookies\n          \n          \n            \n            # + cookieConfig - Configurations associated with the cookies", "author": "praneesha", "createdAt": "2020-04-02T12:25:00Z", "path": "stdlib/http/src/main/ballerina/src/http/http_types.bal", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/mime;\n+\n+# Represents HTTP/1.0 protocol\n+const string HTTP_1_0 = \"1.0\";\n+\n+# Represents HTTP/1.1 protocol\n+const string HTTP_1_1 = \"1.1\";\n+\n+# Represents HTTP/2.0 protocol\n+const string HTTP_2_0 = \"2.0\";\n+\n+# Defines the supported HTTP protocols.\n+#\n+# `HTTP_1_0`: HTTP/1.0 protocol\n+# `HTTP_1_1`: HTTP/1.1 protocol\n+# `HTTP_2_0`: HTTP/2.0 protocol\n+public type HttpVersion HTTP_1_0|HTTP_1_1|HTTP_2_0;\n+\n+# Represents http protocol scheme\n+const string HTTP_SCHEME = \"http://\";\n+\n+# Represents https protocol scheme\n+const string HTTPS_SCHEME = \"https://\";\n+\n+# Constant for the http error code\n+public const string HTTP_ERROR_CODE = \"{ballerina/http}HTTPError\";\n+\n+# Constant for the default listener endpoint timeout\n+const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n+\n+# Constant for the default failover starting index for failover endpoints\n+const int DEFAULT_FAILOVER_EP_STARTING_INDEX = 0;\n+\n+# Maximum number of requests that can be processed at a given time on a single connection.\n+const int MAX_PIPELINED_REQUESTS = 10;\n+\n+# Represents multipart primary type\n+public const string MULTIPART_AS_PRIMARY_TYPE = \"multipart/\";\n+\n+# Constant for the HTTP FORWARD method\n+public const HTTP_FORWARD = \"FORWARD\";\n+\n+# Constant for the HTTP GET method\n+public const HTTP_GET = \"GET\";\n+\n+# Constant for the HTTP POST method\n+public const HTTP_POST = \"POST\";\n+\n+# Constant for the HTTP DELETE method\n+public const HTTP_DELETE = \"DELETE\";\n+\n+# Constant for the HTTP OPTIONS method\n+public const HTTP_OPTIONS = \"OPTIONS\";\n+\n+# Constant for the HTTP PUT method\n+public const HTTP_PUT = \"PUT\";\n+\n+# Constant for the HTTP PATCH method\n+public const HTTP_PATCH = \"PATCH\";\n+\n+# Constant for the HTTP HEAD method\n+public const HTTP_HEAD = \"HEAD\";\n+\n+# constant for the HTTP SUBMIT method\n+public const HTTP_SUBMIT = \"SUBMIT\";\n+\n+# Constant for the identify not an HTTP Operation\n+public const HTTP_NONE = \"NONE\";\n+\n+# Defines the possible values for the chunking configuration in HTTP services and clients.\n+#\n+# `AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+#         otherwise chunking header is set in the outbound request/response\n+# `ALWAYS`: Always set chunking header in the response\n+# `NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response\n+public type Chunking CHUNKING_AUTO|CHUNKING_ALWAYS|CHUNKING_NEVER;\n+\n+# If the payload is less than 8KB, content-length header is set in the outbound request/response,\n+# otherwise chunking header is set in the outbound request/response.}\n+public const CHUNKING_AUTO = \"AUTO\";\n+\n+# Always set chunking header in the response.\n+public const CHUNKING_ALWAYS = \"ALWAYS\";\n+\n+# Never set the chunking header even if the payload is larger than 8KB in the outbound request/response.\n+public const CHUNKING_NEVER = \"NEVER\";\n+\n+# Options to compress using gzip or deflate.\n+#\n+# `AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+#         outbound request/response accept-encoding/content-encoding option\n+# `ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n+# `NEVER`: Never set accept-encoding/content-encoding header in outbound request/response\n+public type Compression COMPRESSION_AUTO|COMPRESSION_ALWAYS|COMPRESSION_NEVER;\n+\n+# When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n+# outbound request/response accept-encoding/content-encoding option.\n+public const COMPRESSION_AUTO = \"AUTO\";\n+\n+# Always set accept-encoding/content-encoding in outbound request/response.\n+public const COMPRESSION_ALWAYS = \"ALWAYS\";\n+\n+# Never set accept-encoding/content-encoding header in outbound request/response.\n+public const COMPRESSION_NEVER = \"NEVER\";\n+\n+# The types of messages that are accepted by HTTP `client` when sending out the outbound request.\n+public type RequestMessage Request|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The types of messages that are accepted by HTTP `listener` when sending out the outbound response.\n+public type ResponseMessage Response|string|xml|json|byte[]|io:ReadableByteChannel|mime:Entity[]|();\n+\n+# The type of user defined custom record.\n+private type CustomRecordType record {| anydata...; |};\n+\n+# The types of response payload that are returned by HTTP `client` after data binding operation.\n+public type PayloadType string|xml|json|byte[]|CustomRecordType|CustomRecordType[];\n+\n+# The types of data values that are expected by HTTP `client` to return after data binding operation.\n+public type TargetType typedesc<Response|string|xml|json|byte[]|CustomRecordType| CustomRecordType[]>;\n+\n+# Defines the HTTP operations related to circuit breaker, failover and load balancer.Read\n+#\n+# `FORWARD`: Forward the specified payload\n+# `GET`: Request a resource\n+# `POST`: Create a new resource\n+# `DELETE`: Deletes the specified resource\n+# `OPTIONS`: Request communication options available\n+# `PUT`: Replace the target resource\n+# `PATCH`: Apply partial modification to the resource\n+# `HEAD`: Identical to `GET` but no resource body should be returned\n+# `SUBMIT`: Submits a http request and returns an HttpFuture object\n+# `NONE`: No operation should be performed\n+public type HttpOperation HTTP_FORWARD|HTTP_GET|HTTP_POST|HTTP_DELETE|HTTP_OPTIONS|HTTP_PUT|HTTP_PATCH|HTTP_HEAD\n+                                                                                                |HTTP_SUBMIT|HTTP_NONE;\n+\n+// Common type used for HttpFuture and Response used for resiliency clients.\n+type HttpResponse Response|HttpFuture;\n+\n+# A record for configuring SSL/TLS protocol and version to be used.\n+#\n+# + name - SSL Protocol to be used (e.g.: TLS1.2)\n+# + versions - SSL/TLS protocols to be enabled (e.g.: TLSv1,TLSv1.1,TLSv1.2)\n+public type Protocols record {|\n+    string name = \"\";\n+    string[] versions = [];\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of `validateCertEnabled`\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ValidateCert record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for certificate revocation status checks.\n+#\n+# + enable - The status of OCSP stapling\n+# + cacheSize - Maximum size of the cache\n+# + cacheValidityPeriod - The time period for which a cache entry is valid\n+public type ListenerOcspStapling record {|\n+    boolean enable = false;\n+    int cacheSize = 0;\n+    int cacheValidityPeriod = 0;\n+|};\n+\n+# A record for providing configurations for content compression.\n+#\n+# + enable - The status of compression\n+# + contentTypes - Content types which are allowed for compression\n+public type CompressionConfig record {|\n+    Compression enable = COMPRESSION_AUTO;\n+    string[] contentTypes = [];\n+|};\n+\n+type HTTPError record {\n+    string message = \"\";\n+};\n+\n+# Common client configurations for the next level clients.\n+#\n+# + httpVersion - The HTTP version understood by the client\n+# + http1Settings - Configurations related to HTTP/1.x protocol\n+# + http2Settings - Configurations related to HTTP/2 protocol\n+# + timeoutInMillis - The maximum time to wait (in milliseconds) for a response before closing the connection\n+# + forwarded - The choice of setting `forwarded`/`x-forwarded` header\n+# + followRedirects - Configurations associated with Redirection\n+# + poolConfig - Configurations associated with request pooling\n+# + cache - HTTP caching related configurations\n+# + compression - Specifies the way of handling compression (`accept-encoding`) header\n+# + auth - HTTP authentication-related configurations\n+# + circuitBreaker - Configurations associated with the behaviour of the Circuit Breaker\n+# + retryConfig - Configurations associated with retrying\n+# + cookieConfig - Configurations associated with cookies", "originalCommit": "ae89a931906be3e14ff78891b6d556a084eec96f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28d5215bb8da17e77fa81e355c925eeb22d9cae4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28d5215bb8da17e77fa81e355c925eeb22d9cae4", "message": "Fix review suggestions", "committedDate": "2020-04-04T18:29:07Z", "type": "commit"}, {"oid": "c1bf33d5642afaf00381b43744c3b8d25b1baf7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1bf33d5642afaf00381b43744c3b8d25b1baf7d", "message": "Merge branch 'http-v2' of https://github.com/ballerina-platform/ballerina-lang into http-2.0\n\n# Conflicts:\n#\tstdlib/http/src/main/ballerina/src/http/http_secure_client.bal", "committedDate": "2020-04-05T17:55:31Z", "type": "commit"}]}