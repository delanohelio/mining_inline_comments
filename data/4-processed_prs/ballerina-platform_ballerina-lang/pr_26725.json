{"pr_number": 26725, "pr_title": "Support API to get current module from runtime", "pr_createdAt": "2020-11-03T16:53:38Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725", "timeline": [{"oid": "693e5f9c8d7b3280a14dfa716992d7ac4e236ab2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/693e5f9c8d7b3280a14dfa716992d7ac4e236ab2", "message": "Support bal env for object and receiver interops", "committedDate": "2020-11-03T16:43:14Z", "type": "commit"}, {"oid": "4c7d1ac361a57f98322d63e9b38a63f8886ca7be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c7d1ac361a57f98322d63e9b38a63f8886ca7be", "message": "Support getting current module from bal env", "committedDate": "2020-11-03T16:45:30Z", "type": "commit"}, {"oid": "148d16123cc697de510835215218c95bf4fb0f4c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/148d16123cc697de510835215218c95bf4fb0f4c", "message": "Add tests for getting current module for interops", "committedDate": "2020-11-03T16:45:44Z", "type": "commit"}, {"oid": "5482fa808526ffdf34a96da2763ec44278c5d050", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5482fa808526ffdf34a96da2763ec44278c5d050", "message": "Merge master branch and fix conflicts", "committedDate": "2020-11-03T17:41:44Z", "type": "commit"}, {"oid": "d5d812c7c25ea74a24936f8561cb111210c9020e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5d812c7c25ea74a24936f8561cb111210c9020e", "message": "Merge master branch and fix conflicts", "committedDate": "2020-11-10T10:07:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTA2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520505069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    mv.visitLdcInsn(module.org.value);\n          \n          \n            \n                    mv.visitLdcInsn(IdentifierUtils.decodeIdentifier(module.org.value));", "author": "HindujaB", "createdAt": "2020-11-10T11:53:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -256,20 +260,41 @@ private static void generateStaticInitializer(ClassWriter cw, String className,\n         }\n         MethodVisitor mv = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n         if (isInitClass) {\n-            String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n-            mv.visitTypeInsn(NEW, LOCK_STORE);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n-            mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+            setLockStoreField(mv, className);\n             setServiceEPAvailableField(cw, mv, serviceEPAvailable, className);\n             setModuleStatusField(cw, mv, className);\n+            setCurrentModuleField(cw, mv, module, className);\n         }\n         JvmCodeGenUtil.generateStrandMetadata(mv, className, module, asyncDataCollector);\n         mv.visitInsn(RETURN);\n         mv.visitMaxs(0, 0);\n         mv.visitEnd();\n     }\n \n+    private static void setLockStoreField(MethodVisitor mv, String className) {\n+        String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n+        mv.visitTypeInsn(NEW, LOCK_STORE);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+    }\n+\n+    private static void setCurrentModuleField(ClassWriter cw, MethodVisitor mv, BIRPackage module,\n+                                              String moduleInitClass) {\n+        FieldVisitor fv = cw.visitField(ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_VAR_NAME,\n+                                        String.format(\"L%s;\", MODULE), null, null);\n+        fv.visitEnd();\n+        mv.visitTypeInsn(Opcodes.NEW, MODULE);\n+        mv.visitInsn(Opcodes.DUP);\n+        mv.visitLdcInsn(module.org.value);", "originalCommit": "d5d812c7c25ea74a24936f8561cb111210c9020e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520505724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    mv.visitLdcInsn(module.name.value);\n          \n          \n            \n                    mv.visitLdcInsn(IdentifierUtils.decodeIdentifier(module.name.value));", "author": "HindujaB", "createdAt": "2020-11-10T11:54:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -256,20 +260,41 @@ private static void generateStaticInitializer(ClassWriter cw, String className,\n         }\n         MethodVisitor mv = cw.visitMethod(ACC_STATIC, \"<clinit>\", \"()V\", null, null);\n         if (isInitClass) {\n-            String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n-            mv.visitTypeInsn(NEW, LOCK_STORE);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n-            mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+            setLockStoreField(mv, className);\n             setServiceEPAvailableField(cw, mv, serviceEPAvailable, className);\n             setModuleStatusField(cw, mv, className);\n+            setCurrentModuleField(cw, mv, module, className);\n         }\n         JvmCodeGenUtil.generateStrandMetadata(mv, className, module, asyncDataCollector);\n         mv.visitInsn(RETURN);\n         mv.visitMaxs(0, 0);\n         mv.visitEnd();\n     }\n \n+    private static void setLockStoreField(MethodVisitor mv, String className) {\n+        String lockStoreClass = \"L\" + LOCK_STORE + \";\";\n+        mv.visitTypeInsn(NEW, LOCK_STORE);\n+        mv.visitInsn(DUP);\n+        mv.visitMethodInsn(INVOKESPECIAL, LOCK_STORE, JVM_INIT_METHOD, \"()V\", false);\n+        mv.visitFieldInsn(PUTSTATIC, className, LOCK_STORE_VAR_NAME, lockStoreClass);\n+    }\n+\n+    private static void setCurrentModuleField(ClassWriter cw, MethodVisitor mv, BIRPackage module,\n+                                              String moduleInitClass) {\n+        FieldVisitor fv = cw.visitField(ACC_PUBLIC + ACC_STATIC, CURRENT_MODULE_VAR_NAME,\n+                                        String.format(\"L%s;\", MODULE), null, null);\n+        fv.visitEnd();\n+        mv.visitTypeInsn(Opcodes.NEW, MODULE);\n+        mv.visitInsn(Opcodes.DUP);\n+        mv.visitLdcInsn(module.org.value);\n+        mv.visitLdcInsn(module.name.value);", "originalCommit": "d5d812c7c25ea74a24936f8561cb111210c9020e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNjkzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520506931", "bodyText": "We will be having the encoded names for module/org names at this point. So we might need to decode them for module initializing", "author": "HindujaB", "createdAt": "2020-11-10T11:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MTM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r520761398", "bodyText": "Do we need to decode version?", "author": "warunalakshitha", "createdAt": "2020-11-10T17:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3OTQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r521079495", "bodyText": "No. version is not encoded.", "author": "HindujaB", "createdAt": "2020-11-11T03:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwNTcyNA=="}], "type": "inlineReview"}, {"oid": "49c768d595018cbfa358a43a7934d82b6193c76e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49c768d595018cbfa358a43a7934d82b6193c76e", "message": "Add code review suggestions", "committedDate": "2020-11-10T18:02:41Z", "type": "commit"}, {"oid": "031b34a557ba75feb971b5100e986b6da022c845", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/031b34a557ba75feb971b5100e986b6da022c845", "message": "Remove module constant from observability", "committedDate": "2020-11-11T06:06:28Z", "type": "forcePushed"}, {"oid": "1dccab252580d6a7567f080c2c5d3f67444878ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dccab252580d6a7567f080c2c5d3f67444878ad", "message": "Remove module constant from observability", "committedDate": "2020-11-11T06:08:51Z", "type": "commit"}, {"oid": "1dccab252580d6a7567f080c2c5d3f67444878ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dccab252580d6a7567f080c2c5d3f67444878ad", "message": "Remove module constant from observability", "committedDate": "2020-11-11T06:08:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2Njc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r521266751", "bodyText": "I have been wondering if there could be a better way rather than having to pass this parameter to many methods", "author": "riyafa", "createdAt": "2020-11-11T10:37:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmPackageGen.java", "diffHunk": "@@ -452,7 +477,7 @@ CompiledJarFile generate(BIRNode.BIRPackage module, InteropValidator interopVali\n \n         // generate object/record value classes\n         JvmValueGen valueGen = new JvmValueGen(module, this, methodGen, lambdaGen);\n-        valueGen.generateValueClasses(jarEntries);\n+        valueGen.generateValueClasses(jarEntries, moduleInitClass);", "originalCommit": "1dccab252580d6a7567f080c2c5d3f67444878ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NzUzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r521267530", "bodyText": "I think it is a bad idea to pass a null to a constructor. We can have two constructors in the Environment class to handle this.", "author": "riyafa", "createdAt": "2020-11-11T10:39:18Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -257,7 +257,7 @@ public static void logMessageToActiveSpan(String logLevel, Supplier<String> logM\n         if (!tracingEnabled) {\n             return;\n         }\n-        Environment balEnv = new Environment(Scheduler.getStrand());\n+        Environment balEnv = new Environment(Scheduler.getStrand(), null);", "originalCommit": "1dccab252580d6a7567f080c2c5d3f67444878ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eca9aa0e7987f902a4034cfe40b752d7a17faf9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eca9aa0e7987f902a4034cfe40b752d7a17faf9d", "message": "Fix review comments", "committedDate": "2020-11-11T14:20:50Z", "type": "forcePushed"}, {"oid": "11dc01c04bb30289b61343427b1a1ba9c235c998", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11dc01c04bb30289b61343427b1a1ba9c235c998", "message": "Fix review comments", "committedDate": "2020-11-11T14:24:11Z", "type": "forcePushed"}, {"oid": "7538b807ede47315cbad63d32e481abfdd42ab96", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7538b807ede47315cbad63d32e481abfdd42ab96", "message": "Fix review comments", "committedDate": "2020-11-11T14:26:46Z", "type": "forcePushed"}, {"oid": "8010382bed44e8ce4e0bc124e093e35f9a63a163", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8010382bed44e8ce4e0bc124e093e35f9a63a163", "message": "Fix review comments", "committedDate": "2020-11-11T14:30:03Z", "type": "commit"}, {"oid": "8010382bed44e8ce4e0bc124e093e35f9a63a163", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8010382bed44e8ce4e0bc124e093e35f9a63a163", "message": "Fix review comments", "committedDate": "2020-11-11T14:30:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1MTQwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r522651408", "bodyText": "Since this is unit tests we can use the test:assertEquals function from the ballerina/test package. Then we need not define this function", "author": "riyafa", "createdAt": "2020-11-13T05:09:59Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/javainterop/basic/instance_method_tests.bal", "diffHunk": "@@ -191,3 +200,15 @@ function newByte(int val) returns handle = @java:Constructor {\n    'class: \"java.lang.Byte\"\n } external;\n \n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertEquality(any|error expected, any|error actual) {", "originalCommit": "8010382bed44e8ce4e0bc124e093e35f9a63a163", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NTQwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r522655406", "bodyText": "Shall we also have test where self is also passed as a parameter for an instance method? I mean self and Environment both.", "author": "riyafa", "createdAt": "2020-11-13T05:15:02Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/InstanceMethods.java", "diffHunk": "@@ -172,4 +176,10 @@ public int getInt(ObjectValue objectValue, int x) {\n     public int getRandomInt() {\n         return 123;\n     }\n+\n+    public BString getCurrentModule(Environment env, long b) {\n+        Module callerModule = env.getCurrentModule();\n+        return StringUtils.fromString(callerModule.getOrg() + \"#\" + callerModule.getName() + \"#\" +\n+                                              callerModule.getVersion() + \"#\" + b);\n+    }", "originalCommit": "8010382bed44e8ce4e0bc124e093e35f9a63a163", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NjU2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r522656567", "bodyText": "Shall we also see what happens if the methods with both without self and with self and Environment have the same name(overloaded)?", "author": "riyafa", "createdAt": "2020-11-13T05:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NTQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIyNjI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r524226299", "bodyText": "Self is not part of parameter list in instance method. As an example getCureentModule(receiver) will generated to receiver.getCurrentModule() . passing self as a parameter test already added. I also added another test case for overload methods.", "author": "warunalakshitha", "createdAt": "2020-11-16T12:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY1NTQwNg=="}], "type": "inlineReview"}, {"oid": "bdc4e377f50cbf1e025d3da7fd4a958a8904231a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdc4e377f50cbf1e025d3da7fd4a958a8904231a", "message": "Replace assertEquality with test:assertEqual", "committedDate": "2020-11-16T09:06:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNzkyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26725#discussion_r524137923", "bodyText": "We can add the function name to the above data provider", "author": "riyafa", "createdAt": "2020-11-16T11:13:17Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/javainterop/basic/StaticMethodTest.java", "diffHunk": "@@ -171,4 +171,9 @@ public void testBalEnvSlowAsync(String funcName) {\n                 \"testBalEnvFastAsync\", \"testReturnNullString\", \"testReturnNotNullString\", \"testStaticResolve\",\n                 \"testStringCast\"};\n     }\n+\n+    @Test\n+    public void testGetCurrentModule() {\n+        BRunUtil.invoke(result, \"testGetCurrentModule\");", "originalCommit": "bdc4e377f50cbf1e025d3da7fd4a958a8904231a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4bf442607482613377ee533d2e3a6d9e0a553486", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4bf442607482613377ee533d2e3a6d9e0a553486", "message": "Add test cases for bal env with overloaded methods", "committedDate": "2020-11-16T12:37:39Z", "type": "commit"}, {"oid": "4bf442607482613377ee533d2e3a6d9e0a553486", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4bf442607482613377ee533d2e3a6d9e0a553486", "message": "Add test cases for bal env with overloaded methods", "committedDate": "2020-11-16T12:37:39Z", "type": "forcePushed"}, {"oid": "8519a46361b73990d3352d8d8161dd66f443d7f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8519a46361b73990d3352d8d8161dd66f443d7f5", "message": "Merge master branch", "committedDate": "2020-11-16T12:38:28Z", "type": "commit"}]}