{"pr_number": 23392, "pr_title": "Enable WhileStmt Tests in new incremental parser", "pr_createdAt": "2020-05-20T11:28:34Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23392", "timeline": [{"oid": "064455d28011068a006d8e685bf39f049b24c4c7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/064455d28011068a006d8e685bf39f049b24c4c7", "message": "Enable WhileStmtTest", "committedDate": "2020-05-22T07:13:29Z", "type": "forcePushed"}, {"oid": "15c51b68802dfd34dcc0d31fa2ee95b9b1bd21e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15c51b68802dfd34dcc0d31fa2ee95b9b1bd21e0", "message": "Fix transformer inconsistencies.", "committedDate": "2020-05-24T10:02:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczOTAyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23392#discussion_r429739022", "bodyText": "is it possible to replace this with a .kind() check?", "author": "manuranga", "createdAt": "2020-05-25T05:38:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -2295,6 +2307,56 @@ private BLangUnionTypeNode addUnionType(BLangType lhsTypeNode, BLangType rhsType\n         return unionTypeNode;\n     }\n \n+    private boolean recordTypeDescritorIsAnonymous(RecordTypeDescriptorNode recordTypeDescriptorNode) {\n+        Node parent = recordTypeDescriptorNode.parent();\n+        switch (parent.kind()) {\n+            case UNION_TYPE_DESC:\n+            case ARRAY_TYPE_DESC:\n+            case OPTIONAL_TYPE_DESC:\n+            case TYPE_TEST_EXPRESSION:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean ifInLocalContext(Node parent) {\n+        while (parent != null) {\n+            if (parent instanceof StatementNode) {", "originalCommit": "15c51b68802dfd34dcc0d31fa2ee95b9b1bd21e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNDg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23392#discussion_r430214845", "bodyText": "fixed with 0f3b802. Didnt use the kind() check since there were a lot of types to check. used a flag instead.", "author": "dulvinw", "createdAt": "2020-05-26T07:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczOTAyMg=="}], "type": "inlineReview"}, {"oid": "95fce44ac18d8509a3ff90a64425e42f69a80f07", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95fce44ac18d8509a3ff90a64425e42f69a80f07", "message": "Enable WhileStmtTest", "committedDate": "2020-05-26T07:40:57Z", "type": "commit"}, {"oid": "58124a8f23bd4371fe04f907c480bd3897c6460f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58124a8f23bd4371fe04f907c480bd3897c6460f", "message": "Fix transformer inconsistencies.", "committedDate": "2020-05-26T07:41:46Z", "type": "commit"}, {"oid": "c4e7ef5085697603c36f0ebd4ed57cf93bcd4d59", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4e7ef5085697603c36f0ebd4ed57cf93bcd4d59", "message": "Fix review suggestions", "committedDate": "2020-05-26T07:42:47Z", "type": "commit"}, {"oid": "c4e7ef5085697603c36f0ebd4ed57cf93bcd4d59", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4e7ef5085697603c36f0ebd4ed57cf93bcd4d59", "message": "Fix review suggestions", "committedDate": "2020-05-26T07:42:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0OTkwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23392#discussion_r430249904", "bodyText": "Checking instanceOf is far better than this IMO? Having these type of state variables will make the Transformer fragile WDYT @dulvinw @manuranga ?", "author": "rasika", "createdAt": "2020-05-26T08:41:24Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -279,6 +279,8 @@\n     private Stack<TopLevelNode> additionalTopLevelNodes = new Stack<>();\n     /* To keep track of additional statements produced from multi-BLangNode resultant transformations */\n     private Stack<BLangStatement> additionalStatements = new Stack<>();\n+    /* To keep track if we are inside a block statment for the use of type definition creation */\n+    private boolean isInLocalContext = false;", "originalCommit": "c4e7ef5085697603c36f0ebd4ed57cf93bcd4d59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MDk0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23392#discussion_r430250947", "bodyText": "Why we need to track this anyway? while we are traversing through the each statements of the statement list we know we are inside a local context. Can have a parameterized private method to create anon/non-anon record.", "author": "rasika", "createdAt": "2020-05-26T08:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0OTkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MjU3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23392#discussion_r430272577", "bodyText": "The other option is to add a big switch case for all the statements. Thought this is better performance wise. And we are creating type descriptors in both local and module level. hence need to differentiate.", "author": "dulvinw", "createdAt": "2020-05-26T09:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0OTkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg4MzEwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23392#discussion_r430883105", "bodyText": "Can't we use this check to differentiate inner type descriptors?\nprivate List<BLangStatement> generateBLangStatements(NodeList<StatementNode> statementNodes) {\n    // ...\n   for (StatementNode statement : statementNodes) {\n      // if type desc\n       createTypeDesc(node, false)\n       //\n   }\n   // ...\n}\n\npublic transform(TypeDescriptorFoo) {\n    createTypeDesc(node, true)\n}\n\nprivate createTypeDesc(node, boolean isInner) {\n    if(isInner) {\n      // create anon\n    } else {\n     // create top-level\n    }\n}", "author": "rasika", "createdAt": "2020-05-27T06:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0OTkwNA=="}], "type": "inlineReview"}]}