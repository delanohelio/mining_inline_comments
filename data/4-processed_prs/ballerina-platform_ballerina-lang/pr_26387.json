{"pr_number": 26387, "pr_title": "Revamp Auto Completion Engine on top of the Semantic API", "pr_createdAt": "2020-10-16T11:05:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387", "timeline": [{"oid": "735c8a57c65c708c616f4db59f2990910f200ca4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/735c8a57c65c708c616f4db59f2990910f200ca4", "message": "enable completion tests", "committedDate": "2020-10-16T11:24:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4MTY2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507081668", "bodyText": "Are we still depending on BLang AST ?", "author": "rasika", "createdAt": "2020-10-18T10:25:36Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/EnvironmentResolver.java", "diffHunk": "@@ -156,19 +189,19 @@\n \n /**\n  * Visitor to lookup symbols based on the location.\n- * \n+ *\n  * @since 2.0.0\n  */\n public class EnvironmentResolver extends BLangNodeVisitor {", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzEzMzc0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507133745", "bodyText": "Yes, Compiler API internally depends on it.", "author": "nadeeshaan", "createdAt": "2020-10-18T12:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4MTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU4Mjc5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507582797", "bodyText": "Oh this is inside compiler-api", "author": "rasika", "createdAt": "2020-10-19T08:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4MTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4OTYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507089621", "bodyText": "Please check formatting here", "author": "rasika", "createdAt": "2020-10-18T10:45:59Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ErrorTypeParamsNodeContext.java", "diffHunk": "@@ -58,22 +60,26 @@ public ErrorTypeParamsNodeContext() {\n          */\n         NonTerminalNode nodeAtCursor = context.get(CompletionKeys.NODE_AT_CURSOR_KEY);\n \n-        Predicate<Scope.ScopeEntry> predicate = scopeEntry -> {\n-            BSymbol symbol = scopeEntry.symbol;\n-            return symbol instanceof BTypeSymbol\n-                    && (symbol.type.getKind() == TypeKind.MAP || symbol.type.getKind() == TypeKind.RECORD);\n+        Predicate<Symbol> predicate = symbol -> {\n+            if (symbol.kind() != SymbolKind.TYPE) {\n+                return false;\n+            }\n+            BallerinaTypeDescriptor typeDesc = ((TypeSymbol) symbol).typeDescriptor();\n+            return (typeDesc.kind() == TypeDescKind.MAP || typeDesc.kind() == TypeDescKind.RECORD);\n         };\n-        List<Scope.ScopeEntry> mappingTypes;\n+        List<Symbol> mappingTypes;\n         if (this.onQualifiedNameIdentifier(context, nodeAtCursor)) {\n-            mappingTypes = QNameReferenceUtil.getModuleContent(context, (QualifiedNameReferenceNode) nodeAtCursor,\n-                    predicate.and(scopeEntry -> (scopeEntry.symbol.flags & Flags.PUBLIC) == Flags.PUBLIC));\n+            mappingTypes= QNameReferenceUtil.getModuleContent(context,", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODMxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468319", "bodyText": "fixed", "author": "nadeeshaan", "createdAt": "2020-10-19T05:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA4OTYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NTAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507095035", "bodyText": "findAny() will add some randomness into selection criteria even though we expect only one matching symbol. Shall we use findFirst() for the sake of consistent in the event of multiple results.", "author": "rasika", "createdAt": "2020-10-18T11:02:35Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ImplicitNewExpressionNodeContext.java", "diffHunk": "@@ -84,47 +83,47 @@ public ImplicitNewExpressionNodeContext() {\n                 return Optional.empty();\n         }\n \n-        Scope.ScopeEntry scopeEntry = null;\n-        List<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-            if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n+        Optional<Symbol> nameReferenceSymbol = Optional.empty();\n+        List<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n+        if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n             QualifiedNameReferenceNode nameReferenceNode = (QualifiedNameReferenceNode) typeDescriptor;\n \n-            Optional<Scope.ScopeEntry> pkgSymbol = CommonUtil.packageSymbolFromAlias(context,\n+            Optional<ModuleSymbol> pkgSymbol = CommonUtil.searchModuleForAlias(context,\n                     QNameReferenceUtil.getAlias(nameReferenceNode));\n-            if (!pkgSymbol.isPresent()) {\n+            if (pkgSymbol.isEmpty()) {\n                 return Optional.empty();\n             }\n-            scopeEntry = ((BPackageSymbol) pkgSymbol.get().symbol).scope.entries.entrySet().stream()\n-                    .filter(entry -> entry.getKey().value.equals(nameReferenceNode.identifier().text()))\n-                    .map(Map.Entry::getValue)\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = pkgSymbol.get().allSymbols().stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.identifier().text()))\n+                    .findAny();", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NTIwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507095201", "bodyText": "findAny() will add some randomness into selection criteria even though we expect only one matching symbol. Shall we use findFirst() for the sake of consistent in the event of multiple results.", "author": "rasika", "createdAt": "2020-10-18T11:03:19Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ImplicitNewExpressionNodeContext.java", "diffHunk": "@@ -84,47 +83,47 @@ public ImplicitNewExpressionNodeContext() {\n                 return Optional.empty();\n         }\n \n-        Scope.ScopeEntry scopeEntry = null;\n-        List<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-            if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n+        Optional<Symbol> nameReferenceSymbol = Optional.empty();\n+        List<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n+        if (this.onQualifiedNameIdentifier(context, typeDescriptor)) {\n             QualifiedNameReferenceNode nameReferenceNode = (QualifiedNameReferenceNode) typeDescriptor;\n \n-            Optional<Scope.ScopeEntry> pkgSymbol = CommonUtil.packageSymbolFromAlias(context,\n+            Optional<ModuleSymbol> pkgSymbol = CommonUtil.searchModuleForAlias(context,\n                     QNameReferenceUtil.getAlias(nameReferenceNode));\n-            if (!pkgSymbol.isPresent()) {\n+            if (pkgSymbol.isEmpty()) {\n                 return Optional.empty();\n             }\n-            scopeEntry = ((BPackageSymbol) pkgSymbol.get().symbol).scope.entries.entrySet().stream()\n-                    .filter(entry -> entry.getKey().value.equals(nameReferenceNode.identifier().text()))\n-                    .map(Map.Entry::getValue)\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = pkgSymbol.get().allSymbols().stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.identifier().text()))\n+                    .findAny();\n         } else if (typeDescriptor.kind() == SyntaxKind.SIMPLE_NAME_REFERENCE) {\n             SimpleNameReferenceNode nameReferenceNode = (SimpleNameReferenceNode) typeDescriptor;\n-            scopeEntry = visibleSymbols.stream()\n-                    .filter(entry -> entry.symbol.name.value.equals(nameReferenceNode.name().text()))\n-                    .findAny()\n-                    .orElse(null);\n+            nameReferenceSymbol = visibleSymbols.stream()\n+                    .filter(symbol -> symbol.name().equals(nameReferenceNode.name().text()))\n+                    .findAny();", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2Nzg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507467881", "bodyText": "fixed", "author": "nadeeshaan", "createdAt": "2020-10-19T05:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NTIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjQ5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507096491", "bodyText": "Shall we use Map interface here? Map<ModuleID, List<AnnotationSymbol>> typeAnnotations = new HashMap<>()", "author": "rasika", "createdAt": "2020-10-18T11:08:16Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "diffHunk": "@@ -54,26 +57,27 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(LSPackageCache.class);\n \n-    private static HashMap<PackageID, List<BAnnotationSymbol>> typeAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> classAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> functionAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectMethodAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> resourceAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> parameterAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> returnAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> serviceAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> listenerAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> annotationAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> externalAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> varAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> constAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> workerAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> fieldAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> recordFieldAnnotations = new HashMap<>();\n-    private static HashMap<PackageID, List<BAnnotationSymbol>> objectFieldAnnotations = new HashMap<>();\n+    private static final HashMap<ModuleID, List<AnnotationSymbol>> typeAnnotations = new HashMap<>();", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2Nzk4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507467984", "bodyText": "fixed", "author": "nadeeshaan", "createdAt": "2020-10-19T05:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507096659", "bodyText": "Shall we use Map interface here?", "author": "rasika", "createdAt": "2020-10-18T11:08:50Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LSAnnotationCache.java", "diffHunk": "@@ -184,13 +152,13 @@ private static void addAttachment(BAnnotationSymbol bAnnotationSymbol,\n             case RETURN_TYPE_DESCRIPTOR:\n                 return returnAnnotations;\n             case OBJECT_FIELD:\n-                HashMap<PackageID, List<BAnnotationSymbol>> objFieldAnnotations = new HashMap<>();\n+                HashMap<ModuleID, List<AnnotationSymbol>> objFieldAnnotations = new HashMap<>();\n                 objFieldAnnotations.putAll(fieldAnnotations);\n                 objFieldAnnotations.putAll(objectFieldAnnotations);\n                 return objFieldAnnotations;\n             case RECORD_FIELD:\n             case RECORD_FIELD_WITH_DEFAULT_VALUE:\n-                HashMap<PackageID, List<BAnnotationSymbol>> recFieldAnnotations = new HashMap<>();\n+                HashMap<ModuleID, List<AnnotationSymbol>> recFieldAnnotations = new HashMap<>();", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODIxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468211", "bodyText": "fixed", "author": "nadeeshaan", "createdAt": "2020-10-19T05:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NjY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzI3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507097272", "bodyText": "Shall we use List interface here?", "author": "rasika", "createdAt": "2020-10-18T11:11:08Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/ReceiveActionNodeContext.java", "diffHunk": "@@ -46,13 +46,11 @@ public ReceiveActionNodeContext() {\n     @Override\n     public List<LSCompletionItem> getCompletions(LSContext context, ReceiveActionNode node)\n             throws LSCompletionException {\n-        // TODO: Following logic can be generalized\n-        ArrayList<Scope.ScopeEntry> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));\n-        List<Scope.ScopeEntry> filteredWorkers = visibleSymbols.stream()\n-                .filter(scopeEntry -> (scopeEntry.symbol.flags & Flags.WORKER) == Flags.WORKER)\n+        ArrayList<Symbol> visibleSymbols = new ArrayList<>(context.get(CommonKeys.VISIBLE_SYMBOLS_KEY));", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODA0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468045", "bodyText": "fixed", "author": "nadeeshaan", "createdAt": "2020-10-19T05:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzgwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507097806", "bodyText": "Can move into a more meaningfull name like variableFilter. Can't we use symbolKind over instaceOf here?", "author": "rasika", "createdAt": "2020-10-18T11:12:56Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/completions/providers/context/RecordFieldWithDefaultValueNodeContext.java", "diffHunk": "@@ -67,11 +67,8 @@ public RecordFieldWithDefaultValueNodeContext() {\n             (2) [module:]TypeName c = module:a<cursor>\n              */\n             QualifiedNameReferenceNode qNameRef = (QualifiedNameReferenceNode) node.expression();\n-            Predicate<Scope.ScopeEntry> filter = scopeEntry -> {\n-                BSymbol symbol = scopeEntry.symbol;\n-                return symbol instanceof BVarSymbol && (symbol.flags & Flags.PUBLIC) == Flags.PUBLIC;\n-            };\n-            List<Scope.ScopeEntry> moduleContent = QNameReferenceUtil.getModuleContent(context, qNameRef, filter);\n+            Predicate<Symbol> filter = symbol -> symbol instanceof VariableSymbol;", "originalCommit": "7eb43be914f90e5a34687561544dbeac700a0945", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2ODEzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26387#discussion_r507468139", "bodyText": "fixed", "author": "nadeeshaan", "createdAt": "2020-10-19T05:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA5NzgwNg=="}], "type": "inlineReview"}, {"oid": "a227b140e0f31eb26fa1dc0da51e5e084172bc6a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a227b140e0f31eb26fa1dc0da51e5e084172bc6a", "message": "add initial model migration", "committedDate": "2020-10-19T05:32:32Z", "type": "commit"}, {"oid": "aa7429a387712b1f268c199045f07e4b772fce38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa7429a387712b1f268c199045f07e4b772fce38", "message": "fix module level context completions", "committedDate": "2020-10-19T05:32:32Z", "type": "commit"}, {"oid": "74163f78ea639deb7751f1b2d9ef9b301c455601", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74163f78ea639deb7751f1b2d9ef9b301c455601", "message": "fix class definition context", "committedDate": "2020-10-19T05:32:32Z", "type": "commit"}, {"oid": "a013e9c2b2de54b18948d77ed057976d1d5fbbb6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a013e9c2b2de54b18948d77ed057976d1d5fbbb6", "message": "fix function body completions", "committedDate": "2020-10-19T05:32:32Z", "type": "commit"}, {"oid": "7faafbcdaef05841de2c989a52fcff32e13c30ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7faafbcdaef05841de2c989a52fcff32e13c30ce", "message": "fix array type descriptor completions", "committedDate": "2020-10-19T05:32:32Z", "type": "commit"}, {"oid": "392b7ab2df49e93c32646cfc6450267a45c12556", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/392b7ab2df49e93c32646cfc6450267a45c12556", "message": "fix api usage", "committedDate": "2020-10-19T05:32:32Z", "type": "commit"}, {"oid": "50cd164950359a882b077ff3ad020af3293e3f6f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50cd164950359a882b077ff3ad020af3293e3f6f", "message": "fix type descriptor context completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "a8c9d37b7a55d7e3211282f3d2da3f7c284fd26b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8c9d37b7a55d7e3211282f3d2da3f7c284fd26b", "message": "fix function definition completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "f9642df895450f5c015cd5e9e3703853c2920bb1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9642df895450f5c015cd5e9e3703853c2920bb1", "message": "fix import declaration tests", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "3e986e79f3a7b9165f907a1bb4f453683e3286af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e986e79f3a7b9165f907a1bb4f453683e3286af", "message": "fix listener declaration context completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "7c174943b8f150a91dc809b617e98cf666bf1d3c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c174943b8f150a91dc809b617e98cf666bf1d3c", "message": "fix tests in module variable context", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "dbf16ae1ef5f7681ca2cbc2821d4d36a12c7a203", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dbf16ae1ef5f7681ca2cbc2821d4d36a12c7a203", "message": "fix record type descriptor context completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "acf51da437f57fb80e0e58e4e6f7ce9b4e8be256", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/acf51da437f57fb80e0e58e4e6f7ce9b4e8be256", "message": "fix completions for assignment assignment, async send and checking call stmts", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "ff32267dd58de5a8794e786d209620f5e79c1280", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff32267dd58de5a8794e786d209620f5e79c1280", "message": "fix else and else if context completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "b1b3192bb8bfed2291904dd4031307db37e80e6b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1b3192bb8bfed2291904dd4031307db37e80e6b", "message": "fix few more statemennt context completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "5508669b637a1afee7bbc60ea7bcf68fa20fa4bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5508669b637a1afee7bbc60ea7bcf68fa20fa4bc", "message": "fix while statement context completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "6ff4b52159e130fcf1367a35f486afcb32195e28", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ff4b52159e130fcf1367a35f486afcb32195e28", "message": "fix worker declaration completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "ad9a26855be98ef565aa25eaacc1e5ce17bef667", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad9a26855be98ef565aa25eaacc1e5ce17bef667", "message": "fix dype definition completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "906a900e0eb6a5591c9390d555a93cf7cc215056", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/906a900e0eb6a5591c9390d555a93cf7cc215056", "message": "fix anon function suggestions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "e2d7e4ed2a0243ca329d733d89eaacf2c2c76d67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2d7e4ed2a0243ca329d733d89eaacf2c2c76d67", "message": "fix list constructor and mapping constructor completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "777e4f8601a22ef13cbad6267646c5cc08351506", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/777e4f8601a22ef13cbad6267646c5cc08351506", "message": "fix query expression and object constructor completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "8527df43dcd0bb61f380b2a505fa3167fb381b04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8527df43dcd0bb61f380b2a505fa3167fb381b04", "message": "fix query expression, type cast, type test and table constructor completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "db5ccf9f7531a70420490d538827004523be78be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db5ccf9f7531a70420490d538827004523be78be", "message": "fix var ref context completions", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "071ad52b596dfc7bd63c5c5e3dc7e917c719e2fe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/071ad52b596dfc7bd63c5c5e3dc7e917c719e2fe", "message": "add changes for the type descriptor revamp", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "febdfb9c79027fbdec4bedaf4f43badcd43a46b4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/febdfb9c79027fbdec4bedaf4f43badcd43a46b4", "message": "sync with master", "committedDate": "2020-10-19T05:32:33Z", "type": "commit"}, {"oid": "2b7d4beacc34a2c5ed478145345dcd03afe5b93f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b7d4beacc34a2c5ed478145345dcd03afe5b93f", "message": "revamp annotation context completions", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "ac7a9fed4f97f696b930a94e6447f735aa375ef7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac7a9fed4f97f696b930a94e6447f735aa375ef7", "message": "revert fieldDescriptors API of Record type descriptor", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "f816aeb075ecbfed71f19e436a0776fa59937593", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f816aeb075ecbfed71f19e436a0776fa59937593", "message": "enable completion tests", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "ad12fec71cbe1f91e3c1402a22d1b5fd11e4d4f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad12fec71cbe1f91e3c1402a22d1b5fd11e4d4f1", "message": "fix checkstyle issues", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "7bdb6234ea70ac2a87fc84c2ddfd0ac8863ee416", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bdb6234ea70ac2a87fc84c2ddfd0ac8863ee416", "message": "revamp signature help implementation", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "e03f887770e28ac12da4143d5ed74c1a1ca21605", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e03f887770e28ac12da4143d5ed74c1a1ca21605", "message": "refactor unused methods", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "9ab23f8b5594c1cc9e78838402ad6f14baa2b201", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ab23f8b5594c1cc9e78838402ad6f14baa2b201", "message": "fix minor issues", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "7326c0cbdbd5913e125cc01e738ccf5236be9438", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7326c0cbdbd5913e125cc01e738ccf5236be9438", "message": "refactor minor issues", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "de2392ee399f7299da897ba1bd0b3c43505ea151", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/de2392ee399f7299da897ba1bd0b3c43505ea151", "message": "fix typereference model creation issue", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "640d40ed96c30ebe541f8b2e7c082e4e22c10ba6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/640d40ed96c30ebe541f8b2e7c082e4e22c10ba6", "message": "remove builtin types filter from semantic API", "committedDate": "2020-10-19T05:32:34Z", "type": "commit"}, {"oid": "640d40ed96c30ebe541f8b2e7c082e4e22c10ba6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/640d40ed96c30ebe541f8b2e7c082e4e22c10ba6", "message": "remove builtin types filter from semantic API", "committedDate": "2020-10-19T05:32:34Z", "type": "forcePushed"}, {"oid": "4aa542df1ffd44c115adc8d62d3ed45d1c57115f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4aa542df1ffd44c115adc8d62d3ed45d1c57115f", "message": "fix spotbugs issue", "committedDate": "2020-10-19T07:04:24Z", "type": "commit"}, {"oid": "95f3d61cf87595fc96df5da83e28986fa92c5e5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95f3d61cf87595fc96df5da83e28986fa92c5e5e", "message": "disable failing test case", "committedDate": "2020-10-19T08:20:56Z", "type": "commit"}]}