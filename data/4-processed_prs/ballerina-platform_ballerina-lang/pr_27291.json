{"pr_number": 27291, "pr_title": "Fix concurrent behavior issue", "pr_createdAt": "2020-12-02T08:45:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27291", "timeline": [{"oid": "001747315f1c2f6abad8cba1b51ac3bb4bf505ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/001747315f1c2f6abad8cba1b51ac3bb4bf505ed", "message": "Fix concurrent behavior issue", "committedDate": "2020-12-02T08:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwNDE4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27291#discussion_r534004189", "bodyText": "We need to have tryLock() here instead of having it in removeLast function.", "author": "ldclakmal", "createdAt": "2020-12-02T09:10:07Z", "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -43,77 +43,94 @@ public type LinkedList object {\n     #\n     # + node - The node, which should be added to the provided linked list\n     public function addLast(Node node) {\n-        if (self.tail is ()) {\n-            self.head = node;\n-            self.tail = self.head;\n-            return;\n+        if (tryLock()) {\n+            if (self.tail is ()) {\n+                self.head = node;\n+                self.tail = self.head;\n+                releaseLock();\n+                return;\n+            }\n+            Node tempNode = node;\n+            Node tailNode = <Node>self.tail;\n+            tempNode.prev = tailNode;\n+            tailNode.next = tempNode;\n+            self.tail = tempNode;\n+            releaseLock();\n         }\n-        Node tempNode = node;\n-        Node tailNode = <Node>self.tail;\n-        tempNode.prev = tailNode;\n-        tailNode.next = tempNode;\n-        self.tail = tempNode;\n     }\n \n     # Adds a node to the start of the provided linked list.\n     #\n     # + node - The node, which should be added to the provided linked list\n     public function addFirst(Node node) {\n-        if (self.head is ()) {\n-            self.head = node;\n-            self.tail = self.head;\n-            return;\n+        if (tryLock()) {\n+            if (self.head is ()) {\n+                self.head = node;\n+                self.tail = self.head;\n+                releaseLock();\n+                return;\n+            }\n+            Node tempNode = node;\n+            Node headNode = <Node>self.head;\n+            tempNode.next = headNode;\n+            headNode.prev = tempNode;\n+            self.head = tempNode;\n+            releaseLock();\n         }\n-        Node tempNode = node;\n-        Node headNode = <Node>self.head;\n-        tempNode.next = headNode;\n-        headNode.prev = tempNode;\n-        self.head = tempNode;\n     }\n \n     # Removes a node from the provided linked list.\n     #\n     # + node - The node, which should be removed from the provided linked list\n     public function remove(Node node) {\n-        if (tryLock()) {\n-            if (node.prev is ()) {\n-                self.head = node.next;\n-            } else {\n-                Node prev = <Node>node.prev;\n-                prev.next = node.next;\n-            }\n-            if (node.next is ()) {\n-                self.tail = node.prev;\n-            } else {\n-                Node next = <Node>node.next;\n-                next.prev = node.prev;\n-            }\n-            node.next = ();\n-            node.prev = ();\n-            releaseLock();\n+        if (node.prev is ()) {", "originalCommit": "001747315f1c2f6abad8cba1b51ac3bb4bf505ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwNDgzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27291#discussion_r534004831", "bodyText": "This shouldn't be changed. This should be kept as it is. Applies to following 2 changes as well.", "author": "ldclakmal", "createdAt": "2020-12-02T09:10:59Z", "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -30,7 +30,7 @@ public type LruEvictionPolicy object {\n     #\n     # + node - Node of the linked list, which is retrieved\n     public function get(Node node) {\n-        self.linkedList.remove(node);\n+        var output = self.linkedList.removeLast(node);", "originalCommit": "001747315f1c2f6abad8cba1b51ac3bb4bf505ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwNTM2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27291#discussion_r534005369", "bodyText": "We don't need to tryLock() here. We need to call remove function inside of this function.", "author": "ldclakmal", "createdAt": "2020-12-02T09:11:50Z", "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -43,77 +43,94 @@ public type LinkedList object {\n     #\n     # + node - The node, which should be added to the provided linked list\n     public function addLast(Node node) {\n-        if (self.tail is ()) {\n-            self.head = node;\n-            self.tail = self.head;\n-            return;\n+        if (tryLock()) {\n+            if (self.tail is ()) {\n+                self.head = node;\n+                self.tail = self.head;\n+                releaseLock();\n+                return;\n+            }\n+            Node tempNode = node;\n+            Node tailNode = <Node>self.tail;\n+            tempNode.prev = tailNode;\n+            tailNode.next = tempNode;\n+            self.tail = tempNode;\n+            releaseLock();\n         }\n-        Node tempNode = node;\n-        Node tailNode = <Node>self.tail;\n-        tempNode.prev = tailNode;\n-        tailNode.next = tempNode;\n-        self.tail = tempNode;\n     }\n \n     # Adds a node to the start of the provided linked list.\n     #\n     # + node - The node, which should be added to the provided linked list\n     public function addFirst(Node node) {\n-        if (self.head is ()) {\n-            self.head = node;\n-            self.tail = self.head;\n-            return;\n+        if (tryLock()) {\n+            if (self.head is ()) {\n+                self.head = node;\n+                self.tail = self.head;\n+                releaseLock();\n+                return;\n+            }\n+            Node tempNode = node;\n+            Node headNode = <Node>self.head;\n+            tempNode.next = headNode;\n+            headNode.prev = tempNode;\n+            self.head = tempNode;\n+            releaseLock();\n         }\n-        Node tempNode = node;\n-        Node headNode = <Node>self.head;\n-        tempNode.next = headNode;\n-        headNode.prev = tempNode;\n-        self.head = tempNode;\n     }\n \n     # Removes a node from the provided linked list.\n     #\n     # + node - The node, which should be removed from the provided linked list\n     public function remove(Node node) {\n-        if (tryLock()) {\n-            if (node.prev is ()) {\n-                self.head = node.next;\n-            } else {\n-                Node prev = <Node>node.prev;\n-                prev.next = node.next;\n-            }\n-            if (node.next is ()) {\n-                self.tail = node.prev;\n-            } else {\n-                Node next = <Node>node.next;\n-                next.prev = node.prev;\n-            }\n-            node.next = ();\n-            node.prev = ();\n-            releaseLock();\n+        if (node.prev is ()) {\n+            self.head = node.next;\n+        } else {\n+            Node prev = <Node>node.prev;\n+            prev.next = node.next;\n+        }\n+        if (node.next is ()) {\n+            self.tail = node.prev;\n+        } else {\n+            Node next = <Node>node.next;\n+            next.prev = node.prev;\n         }\n+        node.next = ();\n+        node.prev = ();\n     }\n \n     # Removes the last node from the provided linked list.\n     #\n+    # + node - The node, which should be removed from the provided linked list\n     # + return - Last node of the provided linked list or `()` if the last node is empty\n-    public function removeLast() returns Node? {\n-        if (self.tail is ()) {\n-            return ();\n+    public function removeLast(Node? node = ()) returns Node? {\n+        if (tryLock()) {", "originalCommit": "001747315f1c2f6abad8cba1b51ac3bb4bf505ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "507825c27935d63962b724284c3a7d286d530487", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/507825c27935d63962b724284c3a7d286d530487", "message": "Fix comments", "committedDate": "2020-12-02T10:23:53Z", "type": "commit"}]}