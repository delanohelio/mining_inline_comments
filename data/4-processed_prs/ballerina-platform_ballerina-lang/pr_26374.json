{"pr_number": 26374, "pr_title": "[Formatter] Fix issues and enable several test cases", "pr_createdAt": "2020-10-15T20:09:31Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26374", "timeline": [{"oid": "b34106a5a848c180b73e3c04656ef8cfd410f59c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b34106a5a848c180b73e3c04656ef8cfd410f59c", "message": "Fix brace indentation for objects", "committedDate": "2020-10-15T14:26:06Z", "type": "commit"}, {"oid": "a2170d02a00073f50130d104ed915336a0d6ea30", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2170d02a00073f50130d104ed915336a0d6ea30", "message": "Fix checkstyle issues", "committedDate": "2020-10-15T14:26:06Z", "type": "commit"}, {"oid": "7ee1fb17200007943acb65ce17bae0540995df8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ee1fb17200007943acb65ce17bae0540995df8f", "message": "Fix foreach_statement_2 test", "committedDate": "2020-10-15T14:28:09Z", "type": "commit"}, {"oid": "c5c46f458f974353abf3d88d1c9b601fcdeaccb8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5c46f458f974353abf3d88d1c9b601fcdeaccb8", "message": "Fix let_expression_1 test case", "committedDate": "2020-10-15T17:33:05Z", "type": "commit"}, {"oid": "15fa151cb56ad1d31634fc26869a97ce6641e8b3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15fa151cb56ad1d31634fc26869a97ce6641e8b3", "message": "Fix query expressions", "committedDate": "2020-10-15T18:21:35Z", "type": "commit"}, {"oid": "e6a16b14ae9e72ed60334222dc08b7cdb046048c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6a16b14ae9e72ed60334222dc08b7cdb046048c", "message": "Modify the query expression test cases", "committedDate": "2020-10-15T18:50:28Z", "type": "commit"}, {"oid": "a874c392b8261d3d654b37c7635db45f594fff3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a874c392b8261d3d654b37c7635db45f594fff3a", "message": "Fix constant_expression_1 test case", "committedDate": "2020-10-15T18:54:25Z", "type": "commit"}, {"oid": "bef9d99f0532ad7bda8356398a563fb2e1d6f292", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bef9d99f0532ad7bda8356398a563fb2e1d6f292", "message": "Fix optional_field_access_expression_1 test case", "committedDate": "2020-10-15T18:59:09Z", "type": "commit"}, {"oid": "c0a8d727cfb3219e009f265831e3825c94f1b395", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0a8d727cfb3219e009f265831e3825c94f1b395", "message": "Fix if-else statements", "committedDate": "2020-10-15T19:04:06Z", "type": "commit"}, {"oid": "914500bc4a848466c5e4e348bcec89f2c2e3ea45", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/914500bc4a848466c5e4e348bcec89f2c2e3ea45", "message": "Fix service_listener_declaration_1 test case", "committedDate": "2020-10-15T19:05:52Z", "type": "commit"}, {"oid": "cb18779c982eed3b64af2b6c1567ead124c7054b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb18779c982eed3b64af2b6c1567ead124c7054b", "message": "Fix query action tests", "committedDate": "2020-10-15T19:25:46Z", "type": "commit"}, {"oid": "542b0ea6e72f8af039e66b94cb3b265d0af68567", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/542b0ea6e72f8af039e66b94cb3b265d0af68567", "message": "Fix xml_type_3 test case", "committedDate": "2020-10-15T19:28:59Z", "type": "commit"}, {"oid": "e12db9f7d2d0fc129d033425e0a59e8506086ae5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e12db9f7d2d0fc129d033425e0a59e8506086ae5", "message": "Fix new_expression_1 test case", "committedDate": "2020-10-15T19:32:55Z", "type": "commit"}, {"oid": "713ab3f4b12d02ae2aba8c9973084ffa57e804eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/713ab3f4b12d02ae2aba8c9973084ffa57e804eb", "message": "Fix class definition test cases", "committedDate": "2020-10-15T19:45:14Z", "type": "commit"}, {"oid": "76019598ba19b68a2fdaca4f6de82f8a4417deea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76019598ba19b68a2fdaca4f6de82f8a4417deea", "message": "Fix object_constructor_expression_1 test", "committedDate": "2020-10-15T19:46:45Z", "type": "commit"}, {"oid": "a6179e1b978239572c6120acaac6e75d7edefc6c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6179e1b978239572c6120acaac6e75d7edefc6c", "message": "Fix some behavioural type test cases", "committedDate": "2020-10-15T19:54:26Z", "type": "commit"}, {"oid": "c8f2b6c760a7c7a75201922d72e147e9c5cc1407", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8f2b6c760a7c7a75201922d72e147e9c5cc1407", "message": "Fix module_type_definition_declaration_1 test case", "committedDate": "2020-10-15T19:57:02Z", "type": "commit"}, {"oid": "e467eaa7779b1e6aa67533a8a23ff366325c4514", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e467eaa7779b1e6aa67533a8a23ff366325c4514", "message": "Fix never_type_1 test case", "committedDate": "2020-10-15T19:59:06Z", "type": "commit"}, {"oid": "88a6aa53a1488b412c686e2f06a5d145041bb48e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88a6aa53a1488b412c686e2f06a5d145041bb48e", "message": "Fix a comment", "committedDate": "2020-10-15T20:05:02Z", "type": "commit"}, {"oid": "0ad1040fde31029d70a24660306b064032d27052", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0ad1040fde31029d70a24660306b064032d27052", "message": "Modify an if-else statement test case", "committedDate": "2020-10-15T20:10:56Z", "type": "commit"}, {"oid": "464ff3e92c4ae061e51b74b947bae36ab0b07de9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/464ff3e92c4ae061e51b74b947bae36ab0b07de9", "message": "Fix the ObjectConstructorExpressionNode", "committedDate": "2020-10-15T20:30:08Z", "type": "commit"}, {"oid": "e9f7ffcef3cf7db3c2823f282a66adef1d769009", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9f7ffcef3cf7db3c2823f282a66adef1d769009", "message": "Enable disabled test cases", "committedDate": "2020-10-15T22:15:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4ODU0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26374#discussion_r505988548", "bodyText": "Should we preserve the newlines added by the user?", "author": "SupunS", "createdAt": "2020-10-16T02:17:25Z", "path": "misc/formatter/modules/formatter-core/src/test/resources/declarations/class-definition/assert/class_definition_declaration_17.bal", "diffHunk": "@@ -1,14 +1,9 @@\n class Foo {\n     public function init() {\n-", "originalCommit": "e9f7ffcef3cf7db3c2823f282a66adef1d769009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5Mjk4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26374#discussion_r505992988", "bodyText": "Would it be better to aligned with the table keyword?", "author": "SupunS", "createdAt": "2020-10-16T02:25:00Z", "path": "misc/formatter/modules/formatter-core/src/test/resources/expressions/query/assert/query_expression_4.bal", "diffHunk": "@@ -1,56 +1,35 @@\n-import ballerina/io;\n-\n-type Student record {\n-    readonly id;\n-    string firstName;\n-    string lastName;\n-    int intakeYear;\n-    float gpa;\n-};\n-\n-type Report record {\n-    readonly id;\n-    string name;\n-    string degree;\n-    int graduationYear;\n-};\n-\n-// This is a `table` type with `Report` members uniquely identified by their `id` field.\n-type ReportTable table<Report> key(id);\n-\n public function main() {\n-    Student s1 = { id: 1, firstName: \"Michelle\", lastName: \"Sadler\",\n-                   intakeYear: 1990, gpa: 3.5 };\n-    Student s2 = { id: 2, firstName: \"Ranjan\", lastName: \"Fonseka\",\n-                   intakeYear: 2001, gpa: 1.9 };\n-    Student s3 = { id: 3, firstName: \"Martin\", lastName: \"Guthrie\",\n-                   intakeYear: 2002, gpa: 3.7 };\n-    Student s4 = { id: 4, firstName: \"George\", lastName: \"Fernando\",\n-                   intakeYear: 2005, gpa: 4.0 };\n+    Student s1 = {\n+        id: 1,\n+        firstName: \"Michelle\",\n+        lastName: \"Sadler\",\n+        intakeYear: 1990,\n+        gpa: 3.5\n+    };\n \n     Student[] studentList = [s1, s2, s3, s4];\n \n     // The `query expression` starts with `table`.\n     // The key specifier `key(id)` specifies the key sequence of the constructed `table`.\n     // The result of the `query expression` is a `table`.\n     ReportTable|error reportTable = table key(id) from var student in studentList\n-        // The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.\n-        // It can refer to variables bound by the from clause.\n-        // When the `where` condition evaluates to false, the current iteration is skipped.\n-        where student.gpa >= 2.0\n-        // The `let` clause binds the variables.\n-        let string degreeName = \"Bachelor of Medicine\",\n-        int graduationYear = calGraduationYear(student.intakeYear)\n-        // The `limit` clause limits the number of output items.\n-        limit 2\n-        // The `select` clause is evaluated for each iteration.\n-        // During the construction of a `table`, each emitted value from the `select` clause is added as a new member.\n-        select {\n-            id: student.id,\n-            name: student.firstName + \" \" + student.lastName,\n-            degree: degreeName,\n-            graduationYear: graduationYear\n-        };\n+                                                  // The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.", "originalCommit": "e9f7ffcef3cf7db3c2823f282a66adef1d769009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5MzE2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26374#discussion_r505993160", "bodyText": "Same as above", "author": "SupunS", "createdAt": "2020-10-16T02:25:17Z", "path": "misc/formatter/modules/formatter-core/src/test/resources/expressions/query/assert/query_expression_4.bal", "diffHunk": "@@ -59,19 +38,21 @@ public function main() {\n     // Defines an `error` to handle a key conflict.\n     error onConflictError = error(\"Key Conflict\", message = \"cannot insert report\");\n \n-    ReportTable|error result = table key(id) from var student in duplicateStdList\n-        select {\n-            id: student.id,\n-            name: student.firstName + \" \" + student.lastName,\n-            degree: \"Bachelor of Medicine\",\n-            graduationYear: calGraduationYear(student.intakeYear)\n-        }\n-        // The `on conflict` clause gets executed when `select` emits a row\n-        // that has the same key as a row that it emitted earlier.\n-        // It gives an `onConflictError` error if there is a key conflict.\n-        on conflict onConflictError;\n-\n-    io:println(result);\n+    stream<Report> reportStream = stream from var student in duplicateStdList\n+                                         select {", "originalCommit": "e9f7ffcef3cf7db3c2823f282a66adef1d769009", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}