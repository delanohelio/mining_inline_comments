{"pr_number": 26825, "pr_title": "Update XML iterator  return type", "pr_createdAt": "2020-11-09T11:23:30Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825", "timeline": [{"oid": "58cd4ac54d16c157583a3c2f7e7a21bbabe36adb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58cd4ac54d16c157583a3c2f7e7a21bbabe36adb", "message": "Update XML iterator to return xml", "committedDate": "2020-11-03T13:35:34Z", "type": "commit"}, {"oid": "01e684d1b641d0989aca464d82650cce5ed9fecb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01e684d1b641d0989aca464d82650cce5ed9fecb", "message": "Update concat logic", "committedDate": "2020-11-09T05:15:57Z", "type": "commit"}, {"oid": "3bc1f833224d5cf832e752c5d0bc33e412253fef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bc1f833224d5cf832e752c5d0bc33e412253fef", "message": "Remove unnecessary conditions", "committedDate": "2020-11-09T14:00:54Z", "type": "commit"}, {"oid": "b1a42792e2a1d0b1e475c985e7e87dc0e05aa34e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1a42792e2a1d0b1e475c985e7e87dc0e05aa34e", "message": "Update tests", "committedDate": "2020-11-09T19:37:33Z", "type": "commit"}, {"oid": "74498196e1a803cef862f474af639e0f17e50557", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74498196e1a803cef862f474af639e0f17e50557", "message": "Update xml literal tests", "committedDate": "2020-11-10T06:50:05Z", "type": "commit"}, {"oid": "fbdedbfd85c3d3615f82c17e5bf5018d31719933", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fbdedbfd85c3d3615f82c17e5bf5018d31719933", "message": "Resolve conflicts", "committedDate": "2020-11-10T07:46:20Z", "type": "commit"}, {"oid": "03d629b0fe733718c7073a08b29ade68ff74927f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03d629b0fe733718c7073a08b29ade68ff74927f", "message": "Refactor code", "committedDate": "2020-11-10T08:47:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODA2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518064", "bodyText": "Extra new line.", "author": "MaryamZi", "createdAt": "2020-11-11T17:24:38Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;\n+        }\n+    }\n+}\n+", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518297", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function testXMLLiteralWithEscapeSequence(){\n          \n          \n            \n            function testXMLLiteralWithEscapeSequence() {", "author": "MaryamZi", "createdAt": "2020-11-11T17:25:02Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODQ3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518479", "bodyText": "Don't we have to assert anything?", "author": "MaryamZi", "createdAt": "2020-11-11T17:25:20Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;\n+        }\n+    }", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyNjgwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r522826806", "bodyText": "since we changed the iterator return type to xml fom xml|string this tests if we get the below error.\n\nincompatible types: 'xml' will not be matched to 'string'", "author": "suleka96", "createdAt": "2020-11-13T09:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwNjAzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527606034", "bodyText": "Sorry, missed that this was a negative test. In the long term though, this will become outdated once we allow the type test with intersections. Let's leave this as is until then.", "author": "MaryamZi", "createdAt": "2020-11-20T10:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521518819", "bodyText": "Instead of using i we should be able to do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        strs[i] = e;\n          \n          \n            \n                        i += 1;\n          \n          \n            \n                        strs.push(e);\n          \n      \n    \n    \n  \n\nright?", "author": "MaryamZi", "createdAt": "2020-11-11T17:25:58Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +72,16 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence(){\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    int i = 0;\n+    string[] strs = [];\n+    foreach string|xml e in x1 {\n+        if e is string {\n+            strs[i] = e;\n+            i += 1;", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxOTIwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521519206", "bodyText": "Shall we fix the indentation here?", "author": "MaryamZi", "createdAt": "2020-11-11T17:26:39Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -40,11 +40,9 @@ function foreachTest() returns [int, string][] {\n \n     int i = 0;\n     foreach var x in bookstore/<book> {\n-        if x is xml {\n             titles[count] = [i, (x/<title>/*).toString()];\n             count +=1;\n             i +=1;", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1Njk0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521556947", "bodyText": "Can't we keep the else logic as is and make this an else if?", "author": "MaryamZi", "createdAt": "2020-11-11T18:29:09Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "diffHunk": "@@ -51,6 +53,14 @@ public static BXml concat(Object... arrayValue) {\n                 backingArray.add(xmlText);\n                 lastItem = xmlText;\n             } else {\n+                if (refValue instanceof BXmlSequence) {\n+                    List<BXml> sequenceChildren = ((BXmlSequence) refValue).getChildrenList();\n+                    for (int j = 0; j < sequenceChildren.size(); j++) {\n+                        backingArray.add(sequenceChildren.get(j));\n+                    }\n+                    lastItem = (BXml) refValue;\n+                    continue;\n+                }", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NzgzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521557835", "bodyText": "Have we added tests for this fix?", "author": "MaryamZi", "createdAt": "2020-11-11T18:30:46Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "diffHunk": "@@ -51,6 +53,14 @@ public static BXml concat(Object... arrayValue) {\n                 backingArray.add(xmlText);\n                 lastItem = xmlText;\n             } else {\n+                if (refValue instanceof BXmlSequence) {", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1ODY3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r521558674", "bodyText": "Can't we just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                List<BXml> sequenceChildren = ((BXmlSequence) refValue).getChildrenList();\n          \n          \n            \n                                for (int j = 0; j < sequenceChildren.size(); j++) {\n          \n          \n            \n                                    backingArray.add(sequenceChildren.get(j));\n          \n          \n            \n                                }\n          \n          \n            \n                                backingArray.addAll(((BXmlSequence) refValue).getChildrenList());", "author": "MaryamZi", "createdAt": "2020-11-11T18:32:19Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Concat.java", "diffHunk": "@@ -51,6 +53,14 @@ public static BXml concat(Object... arrayValue) {\n                 backingArray.add(xmlText);\n                 lastItem = xmlText;\n             } else {\n+                if (refValue instanceof BXmlSequence) {\n+                    List<BXml> sequenceChildren = ((BXmlSequence) refValue).getChildrenList();\n+                    for (int j = 0; j < sequenceChildren.size(); j++) {\n+                        backingArray.add(sequenceChildren.get(j));\n+                    }", "originalCommit": "03d629b0fe733718c7073a08b29ade68ff74927f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aef16057bcb9a0d19bcd9a591b97ef7ded930a48", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aef16057bcb9a0d19bcd9a591b97ef7ded930a48", "message": "Add concat tests and refactor code", "committedDate": "2020-11-13T12:46:50Z", "type": "commit"}, {"oid": "718bcfc702b91acfb59c425787c038f0bd47e66a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/718bcfc702b91acfb59c425787c038f0bd47e66a", "message": "Refactor code", "committedDate": "2020-11-13T13:19:33Z", "type": "commit"}, {"oid": "cda917a970eeda017459f94ff551135d6bdeab1c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cda917a970eeda017459f94ff551135d6bdeab1c", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix_xml\nMerge with upstream", "committedDate": "2020-11-13T19:05:26Z", "type": "commit"}, {"oid": "49faf07613f9ad0942bbcf245f6d7bac20118057", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49faf07613f9ad0942bbcf245f6d7bac20118057", "message": "Update completion test", "committedDate": "2020-11-13T19:35:17Z", "type": "commit"}, {"oid": "aaffd967803fb94d8f4d72fb8f581ce9ed6c5139", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aaffd967803fb94d8f4d72fb8f581ce9ed6c5139", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix_xml\nMerge Upstream", "committedDate": "2020-11-19T05:39:32Z", "type": "commit"}, {"oid": "e51519c241395c4b66fd454e6c7c052c6547e7e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e51519c241395c4b66fd454e6c7c052c6547e7e1", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix_xml\nMerge with upstream", "committedDate": "2020-11-20T10:15:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MzE4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527843186", "bodyText": "Can't we just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return that;\n          \n          \n            \n                                return this;", "author": "MaryamZi", "createdAt": "2020-11-20T17:21:10Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlText.java", "diffHunk": "@@ -113,7 +114,7 @@ public boolean hasNext() {\n             public Object next() {\n                 if (!read) {\n                     this.read = true;\n-                    return data;\n+                    return that;", "originalCommit": "e51519c241395c4b66fd454e6c7c052c6547e7e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNTAyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r545805021", "bodyText": "Not really sure why but when using this the program crashes with a bad sad error for examples like:\nxml bitOfText = xml `bit of text\\u2702\\u2705`;\n\nfunction xmlCharItemIter() returns string {\n    string result = \"\";\n    int i = 0;\n    foreach xml elem in bitOfText {\n        string str = io:sprintf(\"%s\\n\", elem);\n        result += str;\n        i += 1;\n    }\n    return result;\n}\n\n\nclass io.ballerina.runtime.internal.values.XmlText$1 cannot be cast to class io.ballerina.runtime.internal.values.XmlValue (io.ballerina.runtime.internal.values.XmlText$1 and io.ballerina.runtime.internal.values.XmlValue are in unnamed module of loader 'app')", "author": "suleka96", "createdAt": "2020-12-18T12:38:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MzE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0ODA0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547348047", "bodyText": "Ah, missed that we were returning here from a method of the in-line initialization of new IteratorValue().", "author": "MaryamZi", "createdAt": "2020-12-22T15:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MzE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODA0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527848047", "bodyText": "I think there's a deviation here too.\nThe spec says for xml<T> the iteration value type is T.\nSo the following should work, right?\npublic function main() {\n    xml<'xml:Element> el = xml `<foo>foo</foo><bar/>`;\n\n    foreach 'xml:Element item in el {\n        \n    }\n}", "author": "MaryamZi", "createdAt": "2020-11-20T17:26:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1433,7 +1433,7 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                varType = symTable.xmlType;", "originalCommit": "e51519c241395c4b66fd454e6c7c052c6547e7e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MTU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527851563", "bodyText": "Similarly, the lang.xml:iterator() also needs to change.\nThe following doesn't work either.\npublic function main() {\n    xml<'xml:Element> el = xml `<foo>foo</foo><bar/>`;\n\n    record {| 'xml:Element value; |}? nextResult = el.iterator().next();\n}", "author": "MaryamZi", "createdAt": "2020-11-20T17:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MzIwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527853209", "bodyText": "Maybe we can merge this PR first and then fix the xml<T> scenario.", "author": "MaryamZi", "createdAt": "2020-11-20T17:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NDYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527854613", "bodyText": "Shall we also assert here that the original catalog does not change?\nBefore calling concat we can create a clone, and then check == for that clone and catalog after calling clone.", "author": "MaryamZi", "createdAt": "2020-11-20T17:34:40Z", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -62,6 +62,25 @@ function testConcat() returns xml {\n     return 'xml:concat(x, <xml> testFromString(), \"hello from String\");\n }\n \n+function testConcatWithXMLSequence() {\n+    string a = \"string one\";\n+    string b = \"string two\";\n+\n+    xml c = 'xml:concat(catalog, a, b);", "originalCommit": "e51519c241395c4b66fd454e6c7c052c6547e7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1Njc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527856743", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result += x[\"title\"].getTextValue();\n          \n          \n            \n                    result += x[\"title\"].getTextValue();", "author": "MaryamZi", "createdAt": "2020-11-20T17:37:13Z", "path": "tests/ballerina-spec-conformance-tests/src/S05_values_types_variables/tests/iterable_types.bal", "diffHunk": "@@ -110,9 +110,7 @@ function testIterableTypeXML() {\n                         </bookstore>`;\n     string result = \"\";\n     foreach var x in bookstore[\"book\"] {\n-        if x is xml {\n             result += x[\"title\"].getTextValue();", "originalCommit": "e51519c241395c4b66fd454e6c7c052c6547e7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NzEwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r527857101", "bodyText": "Missing a new line.", "author": "MaryamZi", "createdAt": "2020-11-20T17:37:40Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml-literals-negative.bal", "diffHunk": "@@ -72,3 +71,13 @@ function testXmlNsInterpolation() returns xml {\n     xml x = xml `<foo xmlns=\"${ns}\" xmlns:foo=\"${ns}\">hello</foo>`;\n     return x;\n }\n+\n+function testXMLLiteralWithEscapeSequence() {\n+    xml x1 = xml `hello &lt; &gt; &amp;`;\n+    string[] strs = [];\n+    foreach xml e in x1 {\n+        if e is string {\n+            strs.push(e);\n+        }\n+    }\n+}", "originalCommit": "e51519c241395c4b66fd454e6c7c052c6547e7e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "350e8667abc2666510e7196a4cc14411cbdf232d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/350e8667abc2666510e7196a4cc14411cbdf232d", "message": "Update xml foreach return type", "committedDate": "2020-11-26T09:23:02Z", "type": "commit"}, {"oid": "c95b162c13543d00234598751ceec7769ace175b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c95b162c13543d00234598751ceec7769ace175b", "message": "Update compiler foreach to return xml sub types", "committedDate": "2020-12-02T04:51:57Z", "type": "commit"}, {"oid": "474639fd3bbe670782b1d5e22b8fcd8b40d68b6b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/474639fd3bbe670782b1d5e22b8fcd8b40d68b6b", "message": "Update XML iterator return type and enable xml:Text iteration", "committedDate": "2020-12-16T12:39:27Z", "type": "commit"}, {"oid": "06967e7a5f048b16c7cb359b260124cb89051a16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06967e7a5f048b16c7cb359b260124cb89051a16", "message": "Refactor code", "committedDate": "2020-12-17T01:02:47Z", "type": "commit"}, {"oid": "18f3ba67e7c63cad1b7f944398515d777db243af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18f3ba67e7c63cad1b7f944398515d777db243af", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix_xml\nMerge upstream changes", "committedDate": "2020-12-17T01:05:56Z", "type": "commit"}, {"oid": "c985b98cc481405a740a7245e4f9dcefe631fe92", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c985b98cc481405a740a7245e4f9dcefe631fe92", "message": "Add Tests", "committedDate": "2020-12-18T12:30:05Z", "type": "commit"}, {"oid": "3694538b81c4711e0a996154dc82440423996f8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3694538b81c4711e0a996154dc82440423996f8f", "message": "Refactor code", "committedDate": "2020-12-18T12:41:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNzI2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547337265", "bodyText": "Extra new lines.", "author": "MaryamZi", "createdAt": "2020-12-22T15:21:19Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_XML_TYPE = IteratorUtils.createIteratorNextReturnType\n+            (new BUnionType(Arrays.asList(TYPE_ELEMENT, TYPE_COMMENT, TYPE_PROCESSING_INSTRUCTION, TYPE_TEXT)));\n+\n+", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MDc4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547350788", "bodyText": "Shall we rewrite the tests without this import? We try to avoid standard library imports in language tests.", "author": "MaryamZi", "createdAt": "2020-12-22T15:45:01Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration_negative.bal", "diffHunk": "@@ -1,3 +1,5 @@\n+import ballerina/io;", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzM4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547353388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    count +=1;\n          \n          \n            \n                    i +=1;\n          \n          \n            \n                    count += 1;\n          \n          \n            \n                    i += 1;", "author": "MaryamZi", "createdAt": "2020-12-22T15:49:40Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -40,11 +40,9 @@ function foreachTest() returns [int, string][] {\n \n     int i = 0;\n     foreach var x in bookstore/<book> {\n-        if x is xml {\n-            titles[count] = [i, (x/<title>/*).toString()];\n-            count +=1;\n-            i +=1;\n-        }\n+        titles[count] = [i, (x/<title>/*).toString()];\n+        count +=1;\n+        i +=1;", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMDM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547400396", "bodyText": "These tests are bound to break once we fix #26340, right?\nInstead shall we rewrite these tests similar to\npublic function main() {\n    xml el = xml `<foo>foo</foo>`;\n    xml<'xml:Element> seq = <xml<'xml:Element>> el.concat(xml `<bar/>`);\n\n\n    foreach 'xml:Element x in seq {\n        \n    }\n}", "author": "MaryamZi", "createdAt": "2020-12-22T17:18:54Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -142,10 +140,103 @@ function xmlSequenceIter() returns string {\n \n function xmlCharItemIter() returns string {\n     string result = \"\";\n-\n-    foreach xml|string elem in bitOfText {\n+    int i = 0;\n+    foreach xml elem in bitOfText {\n         string str = io:sprintf(\"%s\\n\", elem);\n         result += str;\n+        i += 1;\n     }\n     return result;\n }\n+\n+function xmlTypeParamElementIter() {\n+    xml<'xml:Element> el1 = xml `<foo>foo</foo><bar/>`;", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMDc3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547400775", "bodyText": "I think we can call these tests testXmlElementSequenceIteration, testXmlElementSequenceIteration, etc.", "author": "MaryamZi", "createdAt": "2020-12-22T17:19:41Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -142,10 +140,103 @@ function xmlSequenceIter() returns string {\n \n function xmlCharItemIter() returns string {\n     string result = \"\";\n-\n-    foreach xml|string elem in bitOfText {\n+    int i = 0;\n+    foreach xml elem in bitOfText {\n         string str = io:sprintf(\"%s\\n\", elem);\n         result += str;\n+        i += 1;\n     }\n     return result;\n }\n+\n+function xmlTypeParamElementIter() {", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzI4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547403282", "bodyText": "We can check (!TypeTags.isXMLTypeTag(actualType.tag)) and return early here.", "author": "MaryamZi", "createdAt": "2020-12-22T17:25:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -294,6 +295,29 @@ private void findTypeParam(Location loc, BType expType, BType actualType, Symbol\n         }\n         // Bound type is a structure. Visit recursively to find bound type.\n         switch (expType.tag) {\n+            case TypeTags.XML:\n+                if (TypeTags.isXMLTypeTag(actualType.tag)) {", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547403581", "bodyText": "Do we need to break in these cases? We can directly return, right?", "author": "MaryamZi", "createdAt": "2020-12-22T17:25:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -294,6 +295,29 @@ private void findTypeParam(Location loc, BType expType, BType actualType, Symbol\n         }\n         // Bound type is a structure. Visit recursively to find bound type.\n         switch (expType.tag) {\n+            case TypeTags.XML:\n+                if (TypeTags.isXMLTypeTag(actualType.tag)) {\n+                    switch (actualType.tag) {\n+                        case TypeTags.XML:\n+                            BType constraint = ((BXMLType) actualType).constraint;\n+                            while (constraint.tag == TypeTags.XML) {\n+                                actualType = constraint;\n+                                constraint = ((BXMLType) actualType).constraint;\n+                            }\n+                            findTypeParam(loc, ((BXMLType) expType).constraint, constraint, env,\n+                                    resolvedTypes, result);\n+                            break;", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwMzgzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547403836", "bodyText": "Can't we directly do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            actualType = constraint;\n          \n          \n            \n                                            constraint = ((BXMLType) actualType).constraint;\n          \n          \n            \n                                            constraint = ((BXMLType) constraint).constraint;\n          \n      \n    \n    \n  \n\ninstead?", "author": "MaryamZi", "createdAt": "2020-12-22T17:26:13Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -294,6 +295,29 @@ private void findTypeParam(Location loc, BType expType, BType actualType, Symbol\n         }\n         // Bound type is a structure. Visit recursively to find bound type.\n         switch (expType.tag) {\n+            case TypeTags.XML:\n+                if (TypeTags.isXMLTypeTag(actualType.tag)) {\n+                    switch (actualType.tag) {\n+                        case TypeTags.XML:\n+                            BType constraint = ((BXMLType) actualType).constraint;\n+                            while (constraint.tag == TypeTags.XML) {\n+                                actualType = constraint;\n+                                constraint = ((BXMLType) actualType).constraint;", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQwNzA0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547407042", "bodyText": "Shall we add some tests in LangLibXMLTest for the direct invocation of lang.xml:iterator() too?\n    xml x = xml `<!--first-->`;\n    xml<'xml:Comment> seq = <xml<'xml:Comment>> x.concat(xml `<!--second-->`);\n\n    object {\n        public isolated function next() returns record {| 'xml:Comment value; |}?;\n    } iter = seq.iterator();\n\n    // tests based on `iter.next()`.", "author": "MaryamZi", "createdAt": "2020-12-22T17:32:41Z", "path": "langlib/lang.xml/src/main/ballerina/xml.bal", "diffHunk": "@@ -77,7 +77,7 @@ type XmlType xml;\n # + return - iterator object\n # Each item is represented by an xml singleton.\n public isolated function iterator(xml<ItemType> x) returns object {", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547416552", "bodyText": "How come we don't need to do this for processing instruction and comment sequences?", "author": "MaryamZi", "createdAt": "2020-12-22T17:52:20Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -170,9 +170,15 @@\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n-    public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n-            .createIteratorNextReturnType(\n-                    new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n+\n+    public static final RecordType XML_ITR_NEXT_RETURN_ELEMENT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_ELEMENT);\n+    public static final RecordType XML_ITR_NEXT_RETURN_TEXT_TYPE =\n+            IteratorUtils.createIteratorNextReturnType(TYPE_TEXT);", "originalCommit": "3694538b81c4711e0a996154dc82440423996f8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0MTY4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547541688", "bodyText": "They are not iterable so I didn't not create iteration return types or write type param logic for them.", "author": "suleka96", "createdAt": "2020-12-22T22:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYyNjE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547626161", "bodyText": "They are not iterable so I didn't not create iteration return types or write type param logic for them.\n\nxml:Element also isn't iterable, right? But there's a XML_ITR_NEXT_RETURN_ELEMENT_TYPE?\nThese are the record value types for iterator next right?\nWe can iterate xml, xml<T>, and xml:Text.\nSo I assume we will need record values with all of the following field types\n\nxml:Element|xml:Text|xml:ProcessingInstruction|xml:Comment\nxml:Element\nxml:Text\nxml:ProcessingInstruction\nxml:Comment\nand other combinations of unions of these (e.g., xml:Comment|xml:Element for xml<xml:Comment|xml:Element>).\n\nThus my question re: why we don't need the others. How do we handle the union case btw?", "author": "MaryamZi", "createdAt": "2020-12-23T03:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg4MjE2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r547882168", "bodyText": "xmlxml:Text and xmlxml:ProcessingInstruction are not iterable in the sense it returns null from next\nfor examples like:\nxml d = xml `<!--first-->`;\n        xml<'xml:Element|'xml:Comment> seq4 = <xml<'xml:Element|'xml:Comment>> d.concat(xml `<foo>fu</foo>`);\n\n         int i =0;\n         foreach 'xml:Element|'xml:Comment item in seq4 {\n             concatIntString(i, item.toString());\n             i += 1;\n         }\n\n         record {| 'xml:Element|'xml:Comment value; |}? nextEle = seq4.iterator().next();\n\n         panic error(\"out for loop: \"+ output + \"\\n out record: \"+ nextEle.toString());\n\nthe current implementation returns:\nerror: out for loop: 0:<!--first--> 1:<foo>fu</foo> \n out record: {\"value\":`<!--first-->`}\n\nThis is the expected output right?\nThe BXml type for this is :\n\nxmllang.xml:Element|lang.xml:Comment|lang.xml:ProcessingInstruction|lang.xml:Text\n\nI'm switching from the  BXml type.\nXML_ITR_NEXT_RETURN_ELEMENT_TYPE is to handle examples like:\nxml xdata = xml `<p:person xmlns:p=\"foo\" xmlns:q=\"bar\">\n                <p:name>bob</p:name>\n                <p:address>\n                    <p:city>NY</p:city>\n                    <q:country>US</q:country>\n                </p:address>\n                <q:ID>1131313</q:ID>\n            </p:person>`;\n\nwho's BXml type is lang.xml:Element", "author": "suleka96", "createdAt": "2020-12-23T10:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyMjE1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r548022150", "bodyText": "xmlxml:Text and xmlxml:ProcessingInstruction are not iterable in the sense it returns null from next\n\nIINM\n\nxml<'xml:Text> is the same as 'xml:Text and iteration will always return one value which is the 'xml:Text itself\nIterating xml<'xml:ProcessingInstruction> will return 0 or more 'xml:ProcessingInstructions\n\nI'm not sure I get what you mean by next returning null.\n\nfor examples like:\nxml d = xml `<!--first-->`;\n        xml<'xml:Element|'xml:Comment> seq4 = <xml<'xml:Element|'xml:Comment>> d.concat(xml `<foo>fu</foo>`);\n\n         int i =0;\n         foreach 'xml:Element|'xml:Comment item in seq4 {\n             concatIntString(i, item.toString());\n             i += 1;\n         }\n\n         record {| 'xml:Element|'xml:Comment value; |}? nextEle = seq4.iterator().next();\n\n         panic error(\"out for loop: \"+ output + \"\\n out record: \"+ nextEle.toString());\n\nthe current implementation returns:\nerror: out for loop: 0:<!--first--> 1:<foo>fu</foo> \n out record: {\"value\":`<!--first-->`}\n\nThis is the expected output right?\nThe BXml type for this is :\n\nxmllang.xml:Element|lang.xml:Comment|lang.xml:ProcessingInstruction|lang.xml:Text\n\n\nThe output is correct, but shouldn't the iteration value type here be 'xml:Element|'xml:Comment since we're iterating over xml<'xml:Element|'xml:Comment>?\n\nI'm switching from the BXml type.\nXML_ITR_NEXT_RETURN_ELEMENT_TYPE is to handle examples like:\nxml xdata = xml `<p:person xmlns:p=\"foo\" xmlns:q=\"bar\">\n                <p:name>bob</p:name>\n                <p:address>\n                    <p:city>NY</p:city>\n                    <q:country>US</q:country>\n                </p:address>\n                <q:ID>1131313</q:ID>\n            </p:person>`;\n\nwho's BXml type is lang.xml:Element\n\n[Edited] Doesn't a similar case apply for comments and processing instructions too?", "author": "MaryamZi", "createdAt": "2020-12-23T15:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwMzQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r553103411", "bodyText": "As we discussed xml<xml:Comment> and xml<xml:ProcessingInstruction> is now iterable. Also regarding unions, we are unable to write a xml union sequence with lang capabilities at the moment. However, after discussing with @rdhananjaya,  instead of switching from 'BXml' types it is now switched from the 'xml value type' so a union case won't exist now.", "author": "suleka96", "createdAt": "2021-01-07T04:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNjU1Mg=="}], "type": "inlineReview"}, {"oid": "a9d1f99f31183e352b897bd9ffb8e33aa61015a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a9d1f99f31183e352b897bd9ffb8e33aa61015a7", "message": "Add xml:iterator invocation tests", "committedDate": "2020-12-23T10:17:43Z", "type": "commit"}, {"oid": "90f72a74570915030fb944acbc7bb29c938adf25", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90f72a74570915030fb944acbc7bb29c938adf25", "message": "Enable iterability of xml<xml:Comment> and xml<xml:ProcessingInstruction>", "committedDate": "2021-01-07T04:48:56Z", "type": "commit"}, {"oid": "90f72a74570915030fb944acbc7bb29c938adf25", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90f72a74570915030fb944acbc7bb29c938adf25", "message": "Enable iterability of xml<xml:Comment> and xml<xml:ProcessingInstruction>", "committedDate": "2021-01-07T04:48:56Z", "type": "forcePushed"}, {"oid": "e47d8d294df9bbfd9a4fc102063b26b63266aa02", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e47d8d294df9bbfd9a4fc102063b26b63266aa02", "message": "Refactor xml Next", "committedDate": "2021-01-07T05:09:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODI5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555908298", "bodyText": "With this approach, the type of the value field returned on iterator next becomes the current value type, right? I don't think that is correct. The next value ideally shouldn't change between next invocations of the same iterator.\npublic function main() {\n    'xml:Text x1 = xml `foo`;\n    xml<'xml:Element|'xml:Text> x2 = <xml<'xml:Element|'xml:Text>> x1.concat(xml `<bar/>`);\n\n    var iterator = x2.iterator();\n    record {| 'xml:Element|'xml:Text value; |}? next = iterator.next();\n\n    boolean b1 = <any> next is record {| 'xml:Element|'xml:Text value; |}; // true\n    boolean b2 = next is record {| 'xml:Element value; |}; // false\n    boolean b3 = next is record {| 'xml:Text value; |}; // true - should be false!\n\n    record {| 'xml:Element|'xml:Text value; |}? nextNext = iterator.next();\n\n    boolean b4 = <any> nextNext is record {| 'xml:Element|'xml:Text value; |}; // true\n    boolean b5 = nextNext is record {| 'xml:Element value; |}; // true - should be false!\n    boolean b6 = nextNext is record {| 'xml:Text value; |}; // false\n}", "author": "MaryamZi", "createdAt": "2021-01-12T16:32:02Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/Next.java", "diffHunk": "@@ -49,10 +50,21 @@ public static Object next(BObject m) {\n \n         if (xmlIterator.hasNext()) {\n             Object xmlValue = xmlIterator.next();\n-            return ValueCreator.createRecordValue(ValueCreator.createMapValue(PredefinedTypes.XML_ITR_NEXT_RETURN_TYPE),\n-                                                  xmlValue);\n+            switch (((BXml) xmlValue).getType().getTag()) {\n+                case TypeTags.XML_ELEMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                                    (PredefinedTypes.XML_ITR_NEXT_RETURN_ELEMENT_TYPE), xmlValue);\n+                case TypeTags.XML_TEXT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_TEXT_TYPE), xmlValue);\n+                case TypeTags.XML_COMMENT_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_COMMENT_TYPE), xmlValue);\n+                case TypeTags.XML_PI_TAG:\n+                    return ValueCreator.createRecordValue(ValueCreator.createMapValue\n+                            (PredefinedTypes.XML_ITR_NEXT_RETURN_PI_TYPE), xmlValue);\n+            }", "originalCommit": "e47d8d294df9bbfd9a4fc102063b26b63266aa02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODY1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555908659", "bodyText": "We probably need something like io.ballerina.runtime.api.values.BMap#getIteratorNextReturnType for XML. Can you create an issue for this?", "author": "MaryamZi", "createdAt": "2021-01-12T16:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1ODE4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556458186", "bodyText": "#27849", "author": "suleka96", "createdAt": "2021-01-13T11:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwODI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzOTgxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555939810", "bodyText": "Using XmlComment.this may work instead of introducing the new variable that.", "author": "MaryamZi", "createdAt": "2021-01-12T17:15:57Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/XmlComment.java", "diffHunk": "@@ -45,6 +46,28 @@ public XmlComment(String data, boolean readonly) {\n         this.type = readonly ? PredefinedTypes.TYPE_READONLY_COMMENT : PredefinedTypes.TYPE_COMMENT;\n     }\n \n+    @Override\n+    public IteratorValue getIterator() {\n+        XmlComment that = this;\n+        return new IteratorValue() {\n+            boolean read = false;\n+            @Override\n+            public boolean hasNext() {\n+                return !read;\n+            }\n+\n+            @Override\n+            public Object next() {\n+                if (!read) {\n+                    this.read = true;\n+                    return that;", "originalCommit": "e47d8d294df9bbfd9a4fc102063b26b63266aa02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMwODU3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556308572", "bodyText": "Seems like we'll have to use \"that\" here as well. It gives the same error as when testing with XmlText.\norg.ballerinalang.core.util.exceptions.BLangRuntimeException: error: java.lang.ClassCastException {\"message\":\"class io.ballerina.runtime.internal.values.XmlComment$1 cannot be cast to class io.ballerina.runtime.api.values.BXml (io.ballerina.runtime.internal.values.XmlComment$1 and io.ballerina.runtime.api.values.BXml are in unnamed module of loader 'app')\"}\n        at ballerina.lang.xml.0_8_0:externNext(internal.bal:35)\n           ballerina.lang.xml.0_8_0.XMLIterator:next(internal.bal:31)\n           xml_iteration:testXmlCommentSequenceIteration(xml_iteration.bal:195)\n        at org.ballerinalang.test.BRunUtil.invoke(BRunUtil.java:440)\n        at org.ballerinalang.test.BRunUtil.invokeFunction(BRunUtil.java:1198)\n        at org.ballerinalang.test.BRunUtil.invoke(BRunUtil.java:188)\n        at org.ballerinalang.test.BRunUtil.invoke(BRunUtil.java:1241)\n        at org.ballerinalang.test.types.xml.XMLIterationTest.testXMLTypesForeachOp(XMLIterationTest.java:148)", "author": "suleka96", "createdAt": "2021-01-13T07:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzOTgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r555947061", "bodyText": "Shouldn't the following result in a compilation error?\npublic function main() {\n    'xml:Comment x = xml `<!-- foo -->`;\n    var iterator = x.iterator();\n}\nPlease check for the other non-text types too.\nThis seems to fail on slp8 too, let's create an issue.", "author": "MaryamZi", "createdAt": "2021-01-12T17:26:42Z", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -382,6 +397,53 @@ function testElementChildrenNS() {\n     assert(toNoNs.toString(), \"<to>Irshad</to><to>Irshad</to>\");\n }\n \n+function testXMLIteratorInvocation() {", "originalCommit": "e47d8d294df9bbfd9a4fc102063b26b63266aa02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1MjQ1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556452451", "bodyText": "#27848", "author": "suleka96", "createdAt": "2021-01-13T11:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzA2MQ=="}], "type": "inlineReview"}, {"oid": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9a118602c10fce6b632a92f1562a1f42db2eaee", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix_xml\nMerge with upstream", "committedDate": "2021-01-13T07:23:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1NTgzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556455837", "bodyText": "Do we need to add the type also when type.tag == TypeTags.XML is true?", "author": "MaryamZi", "createdAt": "2021-01-13T11:35:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -492,6 +517,12 @@ private void findTypeParamInUnion(Location loc, BType expType, BUnionType actual\n             if (type.tag == TypeTags.MAP) {\n                 members.add(((BMapType) type).constraint);\n             }\n+            if (TypeTags.isXMLTypeTag(type.tag)) {\n+                if (type.tag == TypeTags.XML) {\n+                    members.add(((BXMLType) type).constraint);\n+                }\n+                members.add(type);", "originalCommit": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjUxMTc3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556511776", "bodyText": "Tracked in issue: #27851", "author": "suleka96", "createdAt": "2021-01-13T13:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1NTgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1Nzk4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556457984", "bodyText": "Is this variable name accurate?", "author": "MaryamZi", "createdAt": "2021-01-13T11:39:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1494,7 +1494,55 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                BType constraint = ((BXMLType) collectionType).constraint;\n+                while (constraint.tag == TypeTags.XML) {\n+                    collectionType = constraint;\n+                    constraint = ((BXMLType) collectionType).constraint;\n+                }\n+                switch (constraint.tag) {\n+                    case TypeTags.XML_ELEMENT:\n+                        varType = symTable.xmlElementType;\n+                        break;\n+                    case TypeTags.XML_COMMENT:\n+                        varType = symTable.xmlCommentType;\n+                        break;\n+                    case TypeTags.XML_TEXT:\n+                        varType = symTable.xmlTextType;\n+                        break;\n+                    case TypeTags.XML_PI:\n+                        varType = symTable.xmlPIType;\n+                        break;\n+                    default:\n+                        Set<BType> collectionTypes = getEffectiveMemberTypes((BUnionType) constraint);\n+                        Set<BType> builtinXMLConstraintTypes = getEffectiveMemberTypes\n+                                ((BUnionType) ((BXMLType) symTable.xmlType).constraint);\n+                        if (collectionTypes.size() == 4 && builtinXMLConstraintTypes.equals(collectionTypes)) {\n+                            varType = symTable.xmlType;\n+                        } else {\n+                            LinkedHashSet<BType> collectionTypesInSymTable = new LinkedHashSet<>();", "originalCommit": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1ODg1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556458854", "bodyText": "Why can't we directly use constraint as the var type here?", "author": "MaryamZi", "createdAt": "2021-01-13T11:41:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1494,7 +1494,55 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n                 varType = inferRecordFieldType(recordType);\n                 break;\n             case TypeTags.XML:\n-                varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n+                BType constraint = ((BXMLType) collectionType).constraint;\n+                while (constraint.tag == TypeTags.XML) {\n+                    collectionType = constraint;\n+                    constraint = ((BXMLType) collectionType).constraint;\n+                }\n+                switch (constraint.tag) {\n+                    case TypeTags.XML_ELEMENT:\n+                        varType = symTable.xmlElementType;\n+                        break;\n+                    case TypeTags.XML_COMMENT:\n+                        varType = symTable.xmlCommentType;\n+                        break;\n+                    case TypeTags.XML_TEXT:\n+                        varType = symTable.xmlTextType;\n+                        break;\n+                    case TypeTags.XML_PI:\n+                        varType = symTable.xmlPIType;\n+                        break;\n+                    default:\n+                        Set<BType> collectionTypes = getEffectiveMemberTypes((BUnionType) constraint);\n+                        Set<BType> builtinXMLConstraintTypes = getEffectiveMemberTypes\n+                                ((BUnionType) ((BXMLType) symTable.xmlType).constraint);\n+                        if (collectionTypes.size() == 4 && builtinXMLConstraintTypes.equals(collectionTypes)) {\n+                            varType = symTable.xmlType;\n+                        } else {\n+                            LinkedHashSet<BType> collectionTypesInSymTable = new LinkedHashSet<>();\n+                            for (BType subType : collectionTypes) {\n+                                switch (subType.tag) {\n+                                    case TypeTags.XML_ELEMENT:\n+                                        collectionTypesInSymTable.add(symTable.xmlElementType);\n+                                        break;\n+                                    case TypeTags.XML_COMMENT:\n+                                        collectionTypesInSymTable.add(symTable.xmlCommentType);\n+                                        break;\n+                                    case TypeTags.XML_TEXT:\n+                                        collectionTypesInSymTable.add(symTable.xmlTextType);\n+                                        break;\n+                                    case TypeTags.XML_PI:\n+                                        collectionTypesInSymTable.add(symTable.xmlPIType);\n+                                        break;\n+                                }\n+\n+                            }\n+                            varType = BUnionType.create(null, collectionTypesInSymTable);", "originalCommit": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2MzQ0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556463445", "bodyText": "We should ideally test iterating the entire sequence. Including () being returned after everything has been iterated.", "author": "MaryamZi", "createdAt": "2021-01-13T11:49:37Z", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -382,6 +397,53 @@ function testElementChildrenNS() {\n     assert(toNoNs.toString(), \"<to>Irshad</to><to>Irshad</to>\");\n }\n \n+function testXMLIteratorInvocation() {\n+    xml a = xml `<!--first-->`;\n+    xml<'xml:Comment> seq1 = <xml<'xml:Comment>> a.concat(xml `<!--second-->`);\n+\n+    object {\n+        public isolated function next() returns record {| 'xml:Comment value; |}?;\n+    } iter1 = seq1.iterator();\n+\n+    assert((iter1.next()).toString(), \"{\\\"value\\\":`<!--first-->`}\");", "originalCommit": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2NTEzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556465137", "bodyText": "Ideally, this error shouldn't be logged. The actual error is the next one, 'xml:Element' is not an iterable collection.", "author": "MaryamZi", "createdAt": "2021-01-13T11:53:00Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/xml/XMLIterationTest.java", "diffHunk": "@@ -54,14 +54,64 @@ public void setup() {\n \n     @Test\n     public void testNegative() {\n-        Assert.assertEquals(negative.getErrorCount(), 2);\n+        Assert.assertEquals(negative.getErrorCount(), 17);\n         int index = 0;\n         BAssertUtil.validateError(negative, index++,\n-                                  \"invalid tuple binding pattern: expected a tuple type, but found '(xml|string)'\",\n-                                  11, 17);\n+                                  \"invalid tuple binding pattern: attempted to infer a tuple type, but found 'xml'\",\n+                                  13, 17);\n         BAssertUtil.validateError(negative, index++, \"incompatible types: expected \" +\n                 \"'function ((xml:Element|xml:Comment|xml:ProcessingInstruction|xml:Text)) returns ()',\" +\n-                \" found 'function ([int,xml,string]) returns ()'\", 16, 19);\n+                \" found 'function ([int,xml,string]) returns ()'\", 18, 19);\n+        BAssertUtil.validateError(negative, index++,\n+                \"incompatible types: expected 'other', found 'xml:Element'\",", "originalCommit": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2NjQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556466495", "bodyText": "Why do we need a module level variable? Why can't we use local variables and pass them as arguments to concatString?", "author": "MaryamZi", "createdAt": "2021-01-13T11:55:30Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration.bal", "diffHunk": "@@ -103,6 +100,7 @@ function chainedIterableOps() returns xml {\n xml theXml = xml `<book>the book</book>`;\n xml bitOfText = xml `bit of text\\u2702\\u2705`;\n xml compositeXml = theXml + bitOfText;\n+string output = \"\";", "originalCommit": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ2NjkwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26825#discussion_r556466907", "bodyText": "Same comment as above re: using local variables instead.", "author": "MaryamZi", "createdAt": "2021-01-13T11:56:17Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/types/xml/xml_iteration_negative.bal", "diffHunk": "@@ -7,6 +7,8 @@ xml xdata = xml `<p:person xmlns:p=\"foo\" xmlns:q=\"bar\">\n                     <q:ID>1131313</q:ID>\n                   </p:person>`;\n \n+string result = \"\";", "originalCommit": "d9a118602c10fce6b632a92f1562a1f42db2eaee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}