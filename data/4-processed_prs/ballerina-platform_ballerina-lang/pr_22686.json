{"pr_number": 22686, "pr_title": " Add nil literal support", "pr_createdAt": "2020-04-16T15:39:23Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686", "timeline": [{"oid": "39997ac1173935294cc4841d2dc3e9e60d1b2339", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39997ac1173935294cc4841d2dc3e9e60d1b2339", "message": "Add nil literal support", "committedDate": "2020-04-15T18:54:02Z", "type": "commit"}, {"oid": "41ba9f0884e16bd0e7d244af996f3b01fb1811c4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41ba9f0884e16bd0e7d244af996f3b01fb1811c4", "message": "Add error recovery", "committedDate": "2020-04-16T14:30:01Z", "type": "commit"}, {"oid": "17d9cb4734d9a0dfcc014f38232027b42759214d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/17d9cb4734d9a0dfcc014f38232027b42759214d", "message": "Add test cases", "committedDate": "2020-04-16T14:30:47Z", "type": "commit"}, {"oid": "a963b8c078d21edc7bdaa040ea97adbc4452ed0d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a963b8c078d21edc7bdaa040ea97adbc4452ed0d", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into nil-literal-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "committedDate": "2020-04-16T14:44:52Z", "type": "commit"}, {"oid": "c6085ec3c98a6b29ee18248799a1f9b7a3a62d6f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6085ec3c98a6b29ee18248799a1f9b7a3a62d6f", "message": "Fix check styles", "committedDate": "2020-04-16T14:54:32Z", "type": "commit"}, {"oid": "8477dec43dd101b17f95f2ad6fee29b093e85042", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8477dec43dd101b17f95f2ad6fee29b093e85042", "message": "Fix small merging issue", "committedDate": "2020-04-16T15:36:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2MTcwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409661708", "bodyText": "Is this approach ok?", "author": "lochana-chathura", "createdAt": "2020-04-16T15:47:11Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5403,4 +5414,28 @@ private STNode parseLocalTypeDefinitionStatement(STNode annots) {\n             typeDescriptor,\n             semicolon);\n     }\n+\n+    /**\n+     * Parse nil literal.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseNilLiteral() {\n+        STToken token = peek();\n+        switch (token.kind) {\n+            case NULL_KEYWORD:\n+                STNode nullKeyword = consume();\n+                STNode emptyNode = STNodeFactory.createEmptyNode();\n+                return STNodeFactory.createNilLiteral(nullKeyword, emptyNode);\n+            case OPEN_PAREN_TOKEN:\n+                startContext(ParserRuleContext.NIL_LITERAL);\n+                STNode openParenthesisToken = parseOpenParenthesis();\n+                STNode closeParenthesisToken = parseCloseParenthesis();\n+                endContext();\n+                return STNodeFactory.createNilLiteral(openParenthesisToken, closeParenthesisToken);\n+            default:\n+                Solution sol = recover(token, ParserRuleContext.NIL_LITERAL);\n+                return sol.recoveredNode;\n+        }", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NTQ1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409745457", "bodyText": "We would not need the switch-case and the recovery, since this is already validated, before coming here.", "author": "SupunS", "createdAt": "2020-04-16T17:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2MTcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0NTg0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409745840", "bodyText": "In the null case, we can simply return the token.. similar to string-literal/int-literal", "author": "SupunS", "createdAt": "2020-04-16T17:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2MTcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwODM5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r410008390", "bodyText": "@SupunS No switch case means, ( ) is considered to be NIL_LITERAL kind and NULL is considered to be NULL_KEYWORD kind, and will have separate pareseNilLiteral( ), pareseNullKeyword( ) methods ?", "author": "lochana-chathura", "createdAt": "2020-04-17T06:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2MTcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0OTAyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r410049028", "bodyText": "yes. For the null keyword, we can do the same way as, string literal", "author": "SupunS", "createdAt": "2020-04-17T07:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2MTcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MjMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409692328", "bodyText": "Couldn't place this under the section where other literals are declared as parserTestutils.java has the following method.\npublic static boolean isTerminalNode(SyntaxKind syntaxKind) {\n        return SyntaxKind.IMPORT_DECLARATION.compareTo(syntaxKind) > 0 || syntaxKind == SyntaxKind.EOF_TOKEN;\n    }", "author": "lochana-chathura", "createdAt": "2020-04-16T16:32:00Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java", "diffHunk": "@@ -184,6 +185,7 @@\n     SERVICE_BODY(3023),\n     ANNOTATION(3024),\n     METADATA(3025),\n+    NIL_LITERAL(3026),", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MDM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409750396", "bodyText": "Don't need to handle () in basic literals.. It was added to deal with literals with a single token. So may be we could only handle null here.\nFor () lets use NIL_LITERAL and add it to the EXPRESSIONS alternatives array.", "author": "SupunS", "createdAt": "2020-04-16T18:05:26Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -814,7 +817,8 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case ACCESS_EXPRESSION:\n                     return seekInAccessExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);\n                 case BASIC_LITERAL:\n-                    hasMatch = isBasicLiteral(nextToken.kind);\n+                    STToken nextNextToken = this.tokenReader.peek(lookahead + 1);\n+                    hasMatch = isBasicLiteral(nextToken.kind, nextNextToken.kind);", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5ODk2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r410098965", "bodyText": "Adding NIL_LITERAL to EXPRESSIONS array cause func definition with extra func name;  public function foo hello ( } to be generated as\npublic function foo  MISSING[(]hello  MISSING[] MISSING[=]( MISSING[] MISSING[)] MISSING[)] MISSING[{]}\nI will have a look on what's happening there", "author": "lochana-chathura", "createdAt": "2020-04-17T09:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MDM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1MjE5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409752192", "bodyText": "Eventhough the endContext() is called here, startContext() is not called at the first switch-case of getNextRule() method for NIL_LITERAL.", "author": "SupunS", "createdAt": "2020-04-16T18:08:36Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1358,10 +1367,14 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                     endContext(); // end parameter-list\n                 }\n                 if (parentCtx == ParserRuleContext.NIL_TYPE_DESCRIPTOR) {\n-                endContext();\n-                // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n-                return getNextRuleForTypeDescriptor();\n-            }\n+                    endContext();\n+                    // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n+                    return getNextRuleForTypeDescriptor();\n+                }\n+                if (parentCtx == ParserRuleContext.NIL_LITERAL) {\n+                    endContext();", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc1Mzk3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409753978", "bodyText": "A context is not started for null keyword.. So ending the context here is not correct.\nWe might not need any context for null keyword at all. It is very similar to string literal, int literal etc. A context is needed when a token can occur in different contexts/places  and if we can't determine whats next rule should be.. Then we make use of the parent context.", "author": "SupunS", "createdAt": "2020-04-16T18:11:36Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1644,6 +1657,9 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                 return ParserRuleContext.EXPRESSION_RHS;\n             case LOCAL_TYPE_DEFINITION_STMT:\n                 return ParserRuleContext.TYPE_KEYWORD;\n+            case NULL_KEYWORD:\n+                endContext(); // end nil-literal", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1Nzg3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409857878", "bodyText": "Use NilLiteralNode as per the new convention", "author": "sameerajayasoma", "createdAt": "2020-04-16T21:25:51Z", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1425,6 +1425,21 @@\n           \"type\": \"Node\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"NilLiteral\",", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1ODA3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409858077", "bodyText": "Should this be openParenToken?", "author": "sameerajayasoma", "createdAt": "2020-04-16T21:26:17Z", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1425,6 +1425,21 @@\n           \"type\": \"Node\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"NilLiteral\",\n+      \"base\": \"Node\",\n+      \"kind\": \"NIL_LITERAL\",\n+      \"attributes\": [\n+        {\n+          \"name\": \"firstToken\",", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg1ODE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r409858177", "bodyText": "Should this be closeParanToken", "author": "sameerajayasoma", "createdAt": "2020-04-16T21:26:31Z", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1425,6 +1425,21 @@\n           \"type\": \"Node\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"NilLiteral\",\n+      \"base\": \"Node\",\n+      \"kind\": \"NIL_LITERAL\",\n+      \"attributes\": [\n+        {\n+          \"name\": \"firstToken\",\n+          \"type\": \"Token\"\n+        },\n+        {\n+          \"name\": \"secondToken\",", "originalCommit": "8477dec43dd101b17f95f2ad6fee29b093e85042", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0be4ad3d38508c40b2620f9f444de5006fb66ed5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0be4ad3d38508c40b2620f9f444de5006fb66ed5", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into nil-literal-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "committedDate": "2020-04-17T05:01:28Z", "type": "commit"}, {"oid": "6e883ac961978bdd0fda3397384720f918e00d54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e883ac961978bdd0fda3397384720f918e00d54", "message": "Treat NIL_LITERAL and NULL_KEYWORD as separate syntax kinds", "committedDate": "2020-04-17T07:47:17Z", "type": "commit"}, {"oid": "6347069719f3ea439355f86f3aa11eb8c46e9e91", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6347069719f3ea439355f86f3aa11eb8c46e9e91", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into nil-literal-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeFactory.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeTransformer.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/NodeVisitor.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java\n\u0001\tcompiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "committedDate": "2020-04-17T08:07:54Z", "type": "commit"}, {"oid": "a43e884d5480c7f47f2bdc17daa7a229373ae01d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a43e884d5480c7f47f2bdc17daa7a229373ae01d", "message": "Regenerate tree after merging", "committedDate": "2020-04-17T08:25:35Z", "type": "forcePushed"}, {"oid": "ae0ba1b8b4d5b170cd41e5474caa786b1623edab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae0ba1b8b4d5b170cd41e5474caa786b1623edab", "message": "Regenerate tree after merging", "committedDate": "2020-04-17T08:31:03Z", "type": "commit"}, {"oid": "ae0ba1b8b4d5b170cd41e5474caa786b1623edab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae0ba1b8b4d5b170cd41e5474caa786b1623edab", "message": "Regenerate tree after merging", "committedDate": "2020-04-17T08:31:03Z", "type": "forcePushed"}, {"oid": "5610264537774ff9c0b13876bb760cb45a027c54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5610264537774ff9c0b13876bb760cb45a027c54", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into nil-literal-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/SyntaxKind.java", "committedDate": "2020-04-17T08:47:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0MjA0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r410242047", "bodyText": "base should be ExpressionNode", "author": "SupunS", "createdAt": "2020-04-17T13:59:43Z", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -1508,6 +1508,21 @@\n                     \"type\": \"Token\"\n                 }\n             ]\n+        },\n+        {\n+            \"name\": \"NilLiteralNode\",\n+            \"base\": \"Node\",", "originalCommit": "5610264537774ff9c0b13876bb760cb45a027c54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0MzA3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22686#discussion_r410243070", "bodyText": "Shall we add some more tests, to validate the usages of nil-literal (()), such as var-decl, defaultable-params, in object/record fields, etc?", "author": "SupunS", "createdAt": "2020-04-17T14:01:16Z", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/NilLiteralTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.expressions;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing nil literal.\n+ */\n+public class NilLiteralTest extends AbstractExpressionsTest {\n+\n+    // Valid source tests\n+\n+    @Test\n+    public void testSimpleNilLiteral() {\n+        test(\"()\", \"basic-literals/nil_literal_assert_01.json\");\n+        test(\"null\", \"basic-literals/nil_literal_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testNilLiteral() {\n+        test(\"() != null + a\", \"basic-literals/nil_literal_assert_03.json\");\n+    }\n+}", "originalCommit": "5610264537774ff9c0b13876bb760cb45a027c54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3765838a82f7fa0f721c2212a431d16f87b22d97", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3765838a82f7fa0f721c2212a431d16f87b22d97", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into nil-literal-support\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "committedDate": "2020-04-19T13:02:05Z", "type": "commit"}, {"oid": "622033af3579d3a2ee94f3858eedb435d730cb33", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/622033af3579d3a2ee94f3858eedb435d730cb33", "message": "Fix issues after merging", "committedDate": "2020-04-19T14:19:20Z", "type": "commit"}, {"oid": "31e382b8451c3ad00afaf85a1022ec27c7d55059", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31e382b8451c3ad00afaf85a1022ec27c7d55059", "message": "Add more test cases", "committedDate": "2020-04-20T04:10:47Z", "type": "commit"}, {"oid": "cc21302ebdedc6d68a09a4a9fafcdae2f1645ca1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc21302ebdedc6d68a09a4a9fafcdae2f1645ca1", "message": "Refactor IsExpressionNode to TypeTestExpressionNode", "committedDate": "2020-04-20T06:49:45Z", "type": "commit"}]}