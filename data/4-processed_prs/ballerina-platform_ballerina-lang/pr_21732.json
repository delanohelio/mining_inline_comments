{"pr_number": 21732, "pr_title": "BBE for Query Expressions and Bounded Streams", "pr_createdAt": "2020-03-12T13:17:16Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzg4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392553883", "bodyText": "I think we should make this category the second one, before experimental features.", "author": "MaryamZi", "createdAt": "2020-03-14T03:52:52Z", "path": "examples/index.json", "diffHunk": "@@ -1082,5 +1082,31 @@\n                 \"url\": \"transactions-distributed\"\n             }\n         ]\n+    },\n+    {\n+        \"title\": \"Streams\",\n+        \"column\": 0,\n+        \"category\": \"Preview features\",", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzk1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392553950", "bodyText": "Shall we group this with the rest of the \"Language concepts\" examples?\nAnd I guess the column should be 2 and we should list this after the \"Concurrency\" examples maybe?", "author": "MaryamZi", "createdAt": "2020-03-14T03:54:42Z", "path": "examples/index.json", "diffHunk": "@@ -1082,5 +1082,31 @@\n                 \"url\": \"transactions-distributed\"\n             }\n         ]\n+    },\n+    {\n+        \"title\": \"Streams\",\n+        \"column\": 0,\n+        \"category\": \"Preview features\",\n+        \"samples\": [\n+            {\n+                \"name\": \"Streams\",\n+                \"url\": \"streams\"\n+            }\n+        ]\n+    },\n+    {\n+        \"title\": \"Query\",\n+        \"column\": 0,\n+        \"category\": \"Language concepts\",", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MzI5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392783292", "bodyText": "For the moment, we'll be putting Query bbes under Preview features as well.", "author": "pcnfernando", "createdAt": "2020-03-16T04:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDAyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554022", "bodyText": "Unnecessary indentation?", "author": "MaryamZi", "createdAt": "2020-03-14T03:55:49Z", "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NzI2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392777263", "bodyText": "Seems the format tool has some issues. Will fix them manually", "author": "pcnfernando", "createdAt": "2020-03-16T04:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDE3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //The block inside the `do` clause is executed for each iteration.\n          \n          \n            \n                    // The block inside the `do` clause is executed for each iteration.\n          \n      \n    \n    \n  \n\nPlease fix for all comments.", "author": "MaryamZi", "createdAt": "2020-03-14T03:58:41Z", "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.\n+        //It can be used to iterate through any iterable value.\n+        from var student in studentList\n+        //The block inside the `do` clause is executed for each iteration.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDIzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Like a query-expression, a query-action can be used with a value iterable with any error type.\n          \n          \n            \n            //The result of the query-action is the termination value of the iterator.\n          \n          \n            \n            //Thus, if the source type is infallibly iterable, the result will be () and can be ignored.\n          \n          \n            \n            // Like a query-expression, a query-action can be used with a value iterable with any error type.\n          \n          \n            \n            // The result of the query-action is the termination value of the iterator.\n          \n          \n            \n            // Thus, if the source type is infallibly iterable, the result will be () and can be ignored.", "author": "MaryamZi", "createdAt": "2020-03-14T03:59:36Z", "path": "examples/query-action/query_action.description", "diffHunk": "@@ -0,0 +1,3 @@\n+//Like a query-expression, a query-action can be used with a value iterable with any error type.\n+//The result of the query-action is the termination value of the iterator.\n+//Thus, if the source type is infallibly iterable, the result will be () and can be ignored.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDIzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554238", "bodyText": "Suggested change", "author": "MaryamZi", "createdAt": "2020-03-14T03:59:49Z", "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-action.bal\n+\n+Iterate record list and map it to another record type:\n+firstName=Alex lastName=George\n+firstName=Ranjan lastName=Fonseka\n+firstName=John lastName=David\n+", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDI1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ ballerina run query-action.bal\n          \n          \n            \n            $ ballerina run query_action.bal", "author": "MaryamZi", "createdAt": "2020-03-14T04:00:02Z", "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-action.bal", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDI4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554286", "bodyText": "Do we need this?", "author": "MaryamZi", "createdAt": "2020-03-14T04:00:26Z", "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554328", "bodyText": "Again, since these examples only demo one example, I think we don't need this.", "author": "MaryamZi", "createdAt": "2020-03-14T04:00:54Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDM4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554383", "bodyText": "Shouldn't these be indented?", "author": "MaryamZi", "createdAt": "2020-03-14T04:01:47Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.\n+    let string degreeName = \"Bachelor of Medicine\", int graduationYear = calGraduationYear(student.intakeYear)", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDQ1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554453", "bodyText": "Also, please check the column count. The maximum we should have in examples is 80.\nPlease see https://github.com/ballerina-platform/ballerina-lang/blob/master/docs/bbe-guidelines/bbe-guidelines.md", "author": "MaryamZi", "createdAt": "2020-03-14T04:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDM4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDUwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n          \n          \n            \n            //It consists of four kinds of clauses: `from`, `let`, `where` and `select`.\n          \n          \n            \n            //The first clause must be a `from` clause and the last clause must be a `select`.\n          \n          \n            \n            //The result of the query expression is a list.\n          \n          \n            \n            // A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n          \n          \n            \n            // It consists of four kinds of clauses: `from`, `let`, `where`, and `select`.\n          \n          \n            \n            // The first clause must be a `from` clause and the last clause must be a `select`.\n          \n          \n            \n            // The result of a query expression is a list.", "author": "MaryamZi", "createdAt": "2020-03-14T04:04:09Z", "path": "examples/query-expression/query_expression.description", "diffHunk": "@@ -0,0 +1,4 @@\n+//A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n+//It consists of four kinds of clauses: `from`, `let`, `where` and `select`.\n+//The first clause must be a `from` clause and the last clause must be a `select`.\n+//The result of the query expression is a list.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDUzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554534", "bodyText": "Also \"iterable with any error type\" seems a bit confusing.\nDo we mean \"any value that is iterable with error\"", "author": "MaryamZi", "createdAt": "2020-03-14T04:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDU0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554540", "bodyText": "Suggested change", "author": "MaryamZi", "createdAt": "2020-03-14T04:05:15Z", "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-expression.bal\n+Iterating a record list and filtering students with score greater than 1:\n+name=Alex degree=Bachelor of Medicine expectedGradYear=2025\n+name=John degree=Bachelor of Medicine expectedGradYear=2027\n+", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554543", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ ballerina run query-expression.bal\n          \n          \n            \n            $ ballerina run query_expression.bal", "author": "MaryamZi", "createdAt": "2020-03-14T04:05:24Z", "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-expression.bal", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Defines an object called OddNumberGenerator. Each object has its own next() method,\n          \n          \n            \n            //which gets invoked when the stream's next() gets called.\n          \n          \n            \n            // Define an object named OddNumberGenerator, with its own `next()` method.\n          \n          \n            \n            // When a stream is based on this object, the stream's `next` operation  \n          \n          \n            \n            // will call this `next()` operation.", "author": "MaryamZi", "createdAt": "2020-03-14T04:09:03Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554755", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int i = 1;\n          \n          \n            \n                int i = 1;", "author": "MaryamZi", "createdAt": "2020-03-14T04:09:09Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDc3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554772", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            nameList[nameList.length()] = fullName;\n          \n          \n            \n                            nameList.push(fullName);", "author": "MaryamZi", "createdAt": "2020-03-14T04:09:39Z", "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.\n+        //It can be used to iterate through any iterable value.\n+        from var student in studentList\n+        //The block inside the `do` clause is executed for each iteration.\n+          do {\n+                FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n+                nameList[nameList.length()] = fullName;", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554800", "bodyText": "Let's remove output if unnecessary and make them comments maybe? That way they'll get rendered side-by-side.", "author": "MaryamZi", "createdAt": "2020-03-14T04:10:21Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554809", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                OddNumberGenerator oddGen = new ();\n          \n          \n            \n                OddNumberGenerator oddGen = new;", "author": "MaryamZi", "createdAt": "2020-03-14T04:10:29Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554814", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                var oddNumberStream = new stream<int,error>(oddGen);\n          \n          \n            \n                var oddNumberStream = new stream<int, error>(oddGen);", "author": "MaryamZi", "createdAt": "2020-03-14T04:10:36Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392554870", "bodyText": "Indentation issue?", "author": "MaryamZi", "createdAt": "2020-03-14T04:11:07Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTIxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392555219", "bodyText": "Can we say something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //The `stream` type represents a sequence that may be constructed lazily\n          \n          \n            \n            //and is able to iterate a sequence of values of type T with error type E.\n          \n          \n            \n            //stream<T> is short for stream<T,never>.\n          \n          \n            \n            //A stream can be iterated over at most once.\n          \n          \n            \n            //A stream has a next() method; a stream's iterator works by calling this method.\n          \n          \n            \n            //The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n          \n          \n            \n            //The stream type does not provide a length method.\n          \n          \n            \n            // The `stream` type represents a sequence that may be constructed lazily\n          \n          \n            \n            // and is used to iterate over the sequence of values of type T with error type E.\n          \n          \n            \n            // `stream<T>` is short for `stream<T, never>`.\n          \n          \n            \n            // A stream can be iterated over at most once.\n          \n          \n            \n            // A stream has a `next()` method; a stream's iterator works by calling this method.\n          \n          \n            \n            // The stream type provides methods similar to lists such as `map`, `foreach`, `filter`, `reduce`, and `iterator`.\n          \n          \n            \n            // The stream type does not provide a length method.", "author": "MaryamZi", "createdAt": "2020-03-14T04:18:07Z", "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.\n+//The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n+//The stream type does not provide a length method.\n+\n+", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //It can be used to iterate through any iterable value.\n          \n          \n            \n                    //It can be used to iterate any iterable value.", "author": "praneesha", "createdAt": "2020-03-14T09:45:53Z", "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.\n+        //It can be used to iterate through any iterable value.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572341", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file, and execute the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-14T09:46:24Z", "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572370", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Iterate record list and map it to another record type:\n          \n          \n            \n            Iterate the record list and map it to another record type:", "author": "praneesha", "createdAt": "2020-03-14T09:46:39Z", "path": "examples/query-action/query_action.out", "diffHunk": "@@ -0,0 +1,9 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-action.bal\n+\n+Iterate record list and map it to another record type:", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n          \n          \n            \n                io:println(\"Iterating a record list and filtering students with a score greater than 1:\");", "author": "praneesha", "createdAt": "2020-03-14T09:46:55Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjM5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572397", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //It can be used to iterate through any iterable value.\n          \n          \n            \n                //It can be used to iterate any iterable value.", "author": "praneesha", "createdAt": "2020-03-14T09:47:08Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572403", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`outputStudentList` is the result of the `query` expression\n          \n          \n            \n                //The `outputStudentList` is the result of the `query` expression.", "author": "praneesha", "createdAt": "2020-03-14T09:47:15Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572405", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n          \n          \n            \n                //The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.", "author": "praneesha", "createdAt": "2020-03-14T09:47:24Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572417", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //When the where condition evaluates to false, the iteration skips following clauses.\n          \n          \n            \n                //When the `where` condition evaluates to false, the iteration skips following the clauses.", "author": "praneesha", "createdAt": "2020-03-14T09:47:38Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572432", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //The `let` clause binds variables.\n          \n          \n            \n                //The `let` clause binds the variables.", "author": "praneesha", "createdAt": "2020-03-14T09:47:55Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572438", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //The `select` clause is evaluated for each iteration;\n          \n          \n            \n                //The `select` clause is evaluated for each iteration.", "author": "praneesha", "createdAt": "2020-03-14T09:48:03Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.\n+    let string degreeName = \"Bachelor of Medicine\", int graduationYear = calGraduationYear(student.intakeYear)\n+    //The `select` clause is evaluated for each iteration;", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //the result of the query expression is a list(`reportList`) whose members are the result of the select clause.\n          \n          \n            \n                //The result of the query expression is a list(`reportList`) whose members are the result of the `select` clause.", "author": "praneesha", "createdAt": "2020-03-14T09:48:17Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //`outputStudentList` is the result of the `query` expression\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to a `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the where condition evaluates to false, the iteration skips following clauses.\n+    where student.score >= 1\n+    //The `let` clause binds variables.\n+    let string degreeName = \"Bachelor of Medicine\", int graduationYear = calGraduationYear(student.intakeYear)\n+    //The `select` clause is evaluated for each iteration;\n+    //the result of the query expression is a list(`reportList`) whose members are the result of the select clause.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572462", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n          \n          \n            \n            //A `query expression` is a list comprehension, which can be used with a value that is iterable with any error type.", "author": "praneesha", "createdAt": "2020-03-14T09:48:31Z", "path": "examples/query-expression/query_expression.description", "diffHunk": "@@ -0,0 +1,4 @@\n+//A `query expression` is a list comprehension which can be used with a value iterable with any error type.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572470", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //It consists of four kinds of clauses: `from`, `let`, `where` and `select`.\n          \n          \n            \n            //It consists of four kinds of clauses: `from`, `let`, `where`, and `select`.", "author": "praneesha", "createdAt": "2020-03-14T09:48:41Z", "path": "examples/query-expression/query_expression.description", "diffHunk": "@@ -0,0 +1,4 @@\n+//A `query expression` is a list comprehension which can be used with a value iterable with any error type.\n+//It consists of four kinds of clauses: `from`, `let`, `where` and `select`.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjQ5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572491", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file, and execute the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-14T09:48:56Z", "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Iterating a record list and filtering students with score greater than 1:\n          \n          \n            \n            Iterating a record list and filtering students with a score greater than 1:", "author": "praneesha", "createdAt": "2020-03-14T09:49:06Z", "path": "examples/query-expression/query_expression.out", "diffHunk": "@@ -0,0 +1,7 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run query-expression.bal\n+Iterating a record list and filtering students with score greater than 1:", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Defines an object called OddNumberGenerator. Each object has its own next() method,\n          \n          \n            \n            //Defines an object called `OddNumberGenerator`. Each object has its own next() method,", "author": "praneesha", "createdAt": "2020-03-14T09:49:20Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //which gets invoked when the stream's next() gets called.\n          \n          \n            \n            //which gets invoked when the stream's `next()` function gets called.", "author": "praneesha", "createdAt": "2020-03-14T09:49:33Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572529", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Construct a stream passing an OddNumberGenerator object\n          \n          \n            \n                //Construct a stream passing an `OddNumberGenerator` object.", "author": "praneesha", "createdAt": "2020-03-14T09:49:49Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjUzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572536", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Iterable types can be converted to a stream\n          \n          \n            \n                //Iterable types can be converted to a stream.", "author": "praneesha", "createdAt": "2020-03-14T09:49:57Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjU0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572542", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`filter` and `map` functions return streams and work lazily\n          \n          \n            \n                //The `filter` and `map` functions return streams and work lazily.", "author": "praneesha", "createdAt": "2020-03-14T09:50:04Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjU2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572564", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`reduce` function reduces the stream to a single value\n          \n          \n            \n                //The `reduce` function reduces the stream to a single value.", "author": "praneesha", "createdAt": "2020-03-14T09:50:16Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjU3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572573", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //A stream can be iterated over at most once. Hence, creating another stream from the record list\n          \n          \n            \n                //A stream can be iterated at most for once. Hence, another stream gets created from the record list.", "author": "praneesha", "createdAt": "2020-03-14T09:50:35Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated over at most once. Hence, creating another stream from the record list", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjYwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572606", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Calls next() operation to retrieve the data from the stream.\n          \n          \n            \n                //Calls the `next()` operation to retrieve the data from the stream.", "author": "praneesha", "createdAt": "2020-03-14T09:51:00Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated over at most once. Hence, creating another stream from the record list\n+       stream<Student> studentStream2 = studentList.toStream();\n+\n+    io:println(\"Calls next method manually and get the next iteration value: \");\n+    //Calls next() operation to retrieve the data from the stream.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjY3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572676", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //`query-action` works similarly to a `foreach` statement.\n          \n          \n            \n                    //The `query-action` works similarly to a `foreach` statement.", "author": "praneesha", "createdAt": "2020-03-14T09:52:12Z", "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,35 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    io:println(\"\\nIterate record list and map it to another record type:\");\n+    FullName[] nameList = [];\n+        //`query-action` works similarly to a `foreach` statement.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjcwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572708", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //`from` clause works similarly to a `foreach` statement.\n          \n          \n            \n                //The `from` clause works similarly to a `foreach` statement.", "author": "praneesha", "createdAt": "2020-03-14T09:52:37Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+    io:println(\"Iterating a record list and filtering students with score greater than 1:\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //`from` clause works similarly to a `foreach` statement.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //Calls next() operation on the iterator to retrieve the next data from the stream.\n          \n          \n            \n                //Calls the `next()` operation on the iterator to retrieve the next data from the stream.", "author": "praneesha", "createdAt": "2020-03-14T09:54:36Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,120 @@\n+import ballerina/io;\n+\n+//Defines an object called OddNumberGenerator. Each object has its own next() method,\n+//which gets invoked when the stream's next() gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    io:println(\"Creating a stream using stream constructor: \");\n+    OddNumberGenerator oddGen = new ();\n+\n+    //Construct a stream passing an OddNumberGenerator object\n+    var oddNumberStream = new stream<int,error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //`filter` and `map` functions return streams and work lazily\n+        stream<Subscription> subscriptionStream = studentStream\n+        . filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    })\n+        . 'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //`reduce` function reduces the stream to a single value\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated over at most once. Hence, creating another stream from the record list\n+       stream<Student> studentStream2 = studentList.toStream();\n+\n+    io:println(\"Calls next method manually and get the next iteration value: \");\n+    //Calls next() operation to retrieve the data from the stream.\n+    record {|Student value;|}|error? student = studentStream2.next();\n+    if (student is StudentValue) {\n+        io:println(student.value);\n+    }\n+\n+    io:println(\"Use foreach method to loop through the rest of the stream: \");\n+\n+    //If there is any error during the iteration of the\n+    // studentList2 stream, the result stream will terminate and return the error.\n+    error? e = studentStream2.forEach(function (Student student) {\n+        io:println(\"Student \", student.firstName, \" has a score of \", student.score);\n+    });\n+\n+    //Check and handle the error during the iteration of the stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    stream<Student> studentStream3 = studentList.toStream();\n+    var iterator = studentStream3.iterator();\n+\n+    //Calls next() operation on the iterator to retrieve the next data from the stream.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjgxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572818", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //stream<T> is short for stream<T,never>.\n          \n          \n            \n            //The stream<T> is short for stream<T,never>.", "author": "praneesha", "createdAt": "2020-03-14T09:54:53Z", "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjgzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572831", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A stream can be iterated over at most once.\n          \n          \n            \n            //A stream can be iterated at most for once.", "author": "praneesha", "createdAt": "2020-03-14T09:55:03Z", "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjgzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572838", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //A stream has a next() method; a stream's iterator works by calling this method.\n          \n          \n            \n            //A stream has a `next()` method; a stream's iterator works by calling this method.", "author": "praneesha", "createdAt": "2020-03-14T09:55:12Z", "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572845", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n          \n          \n            \n            //The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce`, and `iterator`.", "author": "praneesha", "createdAt": "2020-03-14T09:55:22Z", "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.\n+//The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjg1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572850", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //The stream type does not provide a length method.\n          \n          \n            \n            //The stream type does not provide a `length` method.", "author": "praneesha", "createdAt": "2020-03-14T09:55:32Z", "path": "examples/streams/streams.description", "diffHunk": "@@ -0,0 +1,9 @@\n+//The `stream` type represents a sequence that may be constructed lazily\n+//and is able to iterate a sequence of values of type T with error type E.\n+//stream<T> is short for stream<T,never>.\n+//A stream can be iterated over at most once.\n+//A stream has a next() method; a stream's iterator works by calling this method.\n+//The stream type provides methods similar to list such as `map`, `foreach`, `filter`, `reduce` and `iterator`.\n+//The stream type does not provide a length method.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3Mjg2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file, and execute the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-14T09:55:44Z", "path": "examples/streams/streams.out", "diffHunk": "@@ -0,0 +1,14 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjkwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Calls next method manually and get the next iteration value:\n          \n          \n            \n            Call the `next` method manually and get the next iteration value:", "author": "praneesha", "createdAt": "2020-03-14T09:56:03Z", "path": "examples/streams/streams.out", "diffHunk": "@@ -0,0 +1,14 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run streams.bal\n+Creating a stream using stream constructor:\n+Retrieved odd number: 3\n+Filter records and map them to a different type :\n+Calculate the average score of the subscribed students:\n+Average: 0.8999999999999999\n+Calls next method manually and get the next iteration value:", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MjkzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r392572933", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use foreach method to loop through the rest of the stream:\n          \n          \n            \n            Use the `foreach` method to loop through the rest of the stream:", "author": "praneesha", "createdAt": "2020-03-14T09:56:33Z", "path": "examples/streams/streams.out", "diffHunk": "@@ -0,0 +1,14 @@\n+# To run this sample, navigate to the directory that contains the\n+# `.bal` file, and execute the `ballerina run` command.\n+$ ballerina run streams.bal\n+Creating a stream using stream constructor:\n+Retrieved odd number: 3\n+Filter records and map them to a different type :\n+Calculate the average score of the subscribed students:\n+Average: 0.8999999999999999\n+Calls next method manually and get the next iteration value:\n+firstName=Alex lastName=George score=1.5\n+Use foreach method to loop through the rest of the stream:", "originalCommit": "1e93bcb0c321c29f023c1f3bca297720bfec2a73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "00c91fcc4ba764ee2badc1eebdbf6332949377a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00c91fcc4ba764ee2badc1eebdbf6332949377a8", "message": "Initial bbe implementation for query and stream type", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "ef2f4037dcfdeb8c1dddd65cd56507f2e2babf5b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef2f4037dcfdeb8c1dddd65cd56507f2e2babf5b", "message": "Move streams column under Preview features", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "aedbf44250ca0c4359bc38681723c76ebffd96f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aedbf44250ca0c4359bc38681723c76ebffd96f0", "message": "Restructure query examples under query-expr and query-action", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "480b87ec137751dc32640c58602d8e48912cbefe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/480b87ec137751dc32640c58602d8e48912cbefe", "message": "Add stream constructor sample to streams bbe", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "056ce89c34be6ffe6229d65a67265eb26ff8e1db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/056ce89c34be6ffe6229d65a67265eb26ff8e1db", "message": "Categorize streams under preview features", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "a5f584e647d9bdad2a632cf88bbf5958f2a6a265", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a5f584e647d9bdad2a632cf88bbf5958f2a6a265", "message": "Rename bal, description and out files as per standard", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "608297ec32727066d523ca651ef5a5055cf29745", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/608297ec32727066d523ca651ef5a5055cf29745", "message": "Update examples/query-action/query_action.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "f077e4be39f45ef70cfabf6849feb93be9ab655f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f077e4be39f45ef70cfabf6849feb93be9ab655f", "message": "Update examples/query-action/query_action.description\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "2cd6e30c166ae72680c98a7d83c69a037686be81", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2cd6e30c166ae72680c98a7d83c69a037686be81", "message": "Update examples/streams/streams.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "fc8257fc7ad6519b1ea77b4a0eaab460c102b81e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc8257fc7ad6519b1ea77b4a0eaab460c102b81e", "message": "Update examples/streams/streams.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "81f3a202b42337f7ab24c5b828c0099ec1d71b72", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81f3a202b42337f7ab24c5b828c0099ec1d71b72", "message": "Update examples/streams/streams.description\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "2abeab9876736aeae549a54dd277e1022019ca8f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2abeab9876736aeae549a54dd277e1022019ca8f", "message": "Update examples/query-action/query_action.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "4db842b195b7f198d459bddaab99d21e7a650afe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4db842b195b7f198d459bddaab99d21e7a650afe", "message": "Update examples/query-action/query_action.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "d9ec1c31df9e88d57955e764411821cd4e7f439a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9ec1c31df9e88d57955e764411821cd4e7f439a", "message": "Update examples/query-expression/query_expression.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "9e6da41efdd343708eada23b9204ffa7260a89f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e6da41efdd343708eada23b9204ffa7260a89f4", "message": "Update examples/streams/streams.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "a3cb786d84eb7b1630f1986441f100924fc805df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3cb786d84eb7b1630f1986441f100924fc805df", "message": "Fix formatting and categorize bbes under preview features", "committedDate": "2020-03-16T07:15:59Z", "type": "commit"}, {"oid": "a3cb786d84eb7b1630f1986441f100924fc805df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3cb786d84eb7b1630f1986441f100924fc805df", "message": "Fix formatting and categorize bbes under preview features", "committedDate": "2020-03-16T07:15:59Z", "type": "forcePushed"}, {"oid": "69428d110399dcc7fbea51da7ba2227921ebdb56", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69428d110399dcc7fbea51da7ba2227921ebdb56", "message": "Rephrase comments as suggested\n\nCo-Authored-By: praneesha <praneesha@wso2.com>\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T07:43:30Z", "type": "commit"}, {"oid": "788afef6408aa38e43bc88bf7bc2510e36fc1ed0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/788afef6408aa38e43bc88bf7bc2510e36fc1ed0", "message": "Update examples/streams/streams.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T07:44:38Z", "type": "commit"}, {"oid": "fb3a4e881d355239b8c4d8202c451ea73a67436a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb3a4e881d355239b8c4d8202c451ea73a67436a", "message": "Avoid unnecessary souts", "committedDate": "2020-03-16T08:14:13Z", "type": "commit"}, {"oid": "7798b9d0bef2be4646817a5410b0f5abce19fbab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7798b9d0bef2be4646817a5410b0f5abce19fbab", "message": "Add indentation to bbe descriptions", "committedDate": "2020-03-16T08:21:28Z", "type": "commit"}, {"oid": "0d5e57356c6d24f0c93420c30d349f60407d9256", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0d5e57356c6d24f0c93420c30d349f60407d9256", "message": "Apply suggestions from code review\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T08:27:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5OTkyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393199925", "bodyText": "We usually leave a space after \"// \".\nShall we fix everywhere? Maybe in a separate PR?", "author": "MaryamZi", "createdAt": "2020-03-16T17:39:23Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,118 @@\n+import ballerina/io;\n+\n+//Defines an object called `OddNumberGenerator`. Each object has its own next() method,\n+//which gets invoked when the stream's `next()` function gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    \n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    OddNumberGenerator oddGen = new;\n+\n+    //Creating a stream passing an OddNumberGenerator object to the stream constructor\n+    var oddNumberStream = new stream<int, error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream.\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //The `filter` and `map` functions return streams and work lazily.\n+    stream<Subscription> subscriptionStream = studentStream.filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    }).'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //The `reduce` function reduces the stream to a single value.\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated at most for once. Hence, another stream gets created from the record list.", "originalCommit": "0d5e57356c6d24f0c93420c30d349f60407d9256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMDY0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393200642", "bodyText": "We can combine these lines\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    io:println(\"ForEach operation on the stream failed!\");\n          \n          \n            \n                    io:println(e);\n          \n          \n            \n                    io:println(\"ForEach operation on the stream failed: \", e);", "author": "MaryamZi", "createdAt": "2020-03-16T17:40:35Z", "path": "examples/streams/streams.bal", "diffHunk": "@@ -0,0 +1,118 @@\n+import ballerina/io;\n+\n+//Defines an object called `OddNumberGenerator`. Each object has its own next() method,\n+//which gets invoked when the stream's `next()` function gets called.\n+type OddNumberGenerator object {\n+    int i = 1;\n+    \n+    public function next() returns record {|int value;|}|error? {\n+        self.i += 2;\n+        return {value: self.i};\n+    }\n+};\n+\n+type ResultValue record {|\n+    int value;\n+|};\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type StudentValue record {|\n+    Student value;\n+|};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+type Subscription record {|\n+    string firstName;\n+    string lastName;\n+    float score;\n+    string degree;\n+|};\n+\n+public function main() {\n+    OddNumberGenerator oddGen = new;\n+\n+    //Creating a stream passing an OddNumberGenerator object to the stream constructor\n+    var oddNumberStream = new stream<int, error>(oddGen);\n+\n+    record {|int value;|}|error? oddNumber = oddNumberStream.next();\n+\n+    if (oddNumber is ResultValue) {\n+        io:println(\"Retrieved odd number: \", oddNumber.value);\n+    }\n+\n+    io:println(\"Filter records and map them to a different type :\");\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //Iterable types can be converted to a stream.\n+    stream<Student> studentStream = studentList.toStream();\n+\n+    //The `filter` and `map` functions return streams and work lazily.\n+    stream<Subscription> subscriptionStream = studentStream.filter(function (Student student) returns boolean {\n+        return student.score > 1;\n+    }).'map(function (Student student) returns Subscription {\n+        Subscription subscription = {\n+            firstName: student.firstName,\n+            lastName: student.lastName,\n+            score: student.score,\n+            degree: \"Bachelor of Medicine\"\n+        };\n+        return subscription;\n+    });\n+\n+    io:println(\"Calculate the average score of the subscribed students: \");\n+    //The `reduce` function reduces the stream to a single value.\n+    float? avg = subscriptionStream.reduce(function (float accum, Student student) returns float {\n+        return accum + <float>student.score / studentList.length();\n+    }, 0.0);\n+\n+    if (avg is float) {\n+        io:println(\"Average: \", avg);\n+    }\n+\n+    //A stream can be iterated at most for once. Hence, another stream gets created from the record list.\n+       stream<Student> studentStream2 = studentList.toStream();\n+\n+    io:println(\"Calls next method manually and get the next iteration value: \");\n+    //Calls the `next()` operation to retrieve the data from the stream.\n+    record {|Student value;|}|error? student = studentStream2.next();\n+    if (student is StudentValue) {\n+        io:println(student.value);\n+    }\n+\n+    io:println(\"Use foreach method to loop through the rest of the stream: \");\n+\n+    //If there is any error during the iteration of the\n+    // studentList2 stream, the result stream will terminate and return the error.\n+    error? e = studentStream2.forEach(function (Student student) {\n+        io:println(\"Student \", student.firstName, \" has a score of \", student.score);\n+    });\n+\n+    //Check and handle the error during the iteration of the stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);", "originalCommit": "0d5e57356c6d24f0c93420c30d349f60407d9256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMTI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393201297", "bodyText": "Shouldn't these be indented similar to L37?", "author": "MaryamZi", "createdAt": "2020-03-16T17:41:35Z", "path": "examples/query-expression/query_expression.bal", "diffHunk": "@@ -0,0 +1,50 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    int intakeYear;\n+    float score;\n+};\n+\n+type Report record {\n+    string name;\n+    string degree;\n+    int expectedGradYear;\n+};\n+\n+public function main() {\n+\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", intakeYear: 2020, score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", intakeYear: 2020, score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", intakeYear: 2022, score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    //The `from` clause works similarly to a `foreach` statement.\n+    //It can be used to iterate any iterable value.\n+    //The `outputStudentList` is the result of the `query` expression.\n+    Report[] reportList = from var student in studentList\n+    //The `where` clause provides a way to perform conditional execution and works similarly to an `if` condition.\n+    //It can refer to variables bound by the from clause.\n+    //When the `where` condition evaluates to false, the iteration skips following the clauses.\n+    where student.score >= 1\n+    //The `let` clause binds the variables.\n+    let string degreeName = \"Bachelor of Medicine\",\n+    int graduationYear = calGraduationYear(student.intakeYear)\n+    //The `select` clause is evaluated for each iteration.\n+    //The result of the query expression is a list(`reportList`) whose members are the result of the `select` clause.", "originalCommit": "0d5e57356c6d24f0c93420c30d349f60407d9256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMjM4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21732#discussion_r393202380", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                do {\n          \n          \n            \n                    FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n          \n          \n            \n                    nameList[nameList.length()] = fullName;\n          \n          \n            \n                    }\n          \n          \n            \n                do {\n          \n          \n            \n                    FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n          \n          \n            \n                    nameList.push(fullName);\n          \n          \n            \n                }", "author": "MaryamZi", "createdAt": "2020-03-16T17:43:24Z", "path": "examples/query-action/query_action.bal", "diffHunk": "@@ -0,0 +1,36 @@\n+import ballerina/io;\n+\n+type Student record {\n+    string firstName;\n+    string lastName;\n+    float score;\n+};\n+\n+type FullName record {|\n+    string firstName;\n+    string lastName;\n+|};\n+\n+public function main() {\n+    Student s1 = {firstName: \"Alex\", lastName: \"George\", score: 1.5};\n+    Student s2 = {firstName: \"Ranjan\", lastName: \"Fonseka\", score: 0.9};\n+    Student s3 = {firstName: \"John\", lastName: \"David\", score: 1.2};\n+\n+    Student[] studentList = [s1, s2, s3];\n+\n+    FullName[] nameList = [];\n+    //`query-action` works similarly to a `foreach` statement.\n+    //It can be used to iterate through any iterable value.\n+    //The result of the query-action is the termination value of the iterable value.\n+    //It can be either an error or ().\n+    var e = from var student in studentList\n+    // The block inside the `do` clause is executed for each iteration.\n+    do {\n+        FullName fullName = {firstName: student.firstName, lastName: student.lastName};\n+        nameList[nameList.length()] = fullName;\n+        }", "originalCommit": "0d5e57356c6d24f0c93420c30d349f60407d9256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "27e6f4917126a4a8dfeacd879de6ce0bbfe1bb7c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27e6f4917126a4a8dfeacd879de6ce0bbfe1bb7c", "message": "Update examples/query-action/query_action.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T17:46:49Z", "type": "commit"}, {"oid": "5a753116a563f1260c7abe1a3c08d9a24e0a8b2c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a753116a563f1260c7abe1a3c08d9a24e0a8b2c", "message": "Update examples/streams/streams.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-03-16T17:47:12Z", "type": "commit"}, {"oid": "61745ab6f89182b45918567d0fea59ac5f907304", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/61745ab6f89182b45918567d0fea59ac5f907304", "message": "Update query_expression.bal", "committedDate": "2020-03-17T03:54:03Z", "type": "commit"}]}