{"pr_number": 25834, "pr_title": "Fix issue in arrow expression type checking in sort", "pr_createdAt": "2020-09-16T04:26:07Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834", "timeline": [{"oid": "d9f13dbc8caa39e3c22b7489bf8404689190a01c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9f13dbc8caa39e3c22b7489bf8404689190a01c", "message": "Fix issue in arrow expression type checking in sort", "committedDate": "2020-09-16T04:24:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTMyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489155326", "bodyText": "Instead of using toString shall we assert the value itself? We lose type information when we assert using toString.", "author": "MaryamZi", "createdAt": "2020-09-16T04:32:14Z", "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -1041,6 +1041,11 @@ function testSort10() {\n \n     assertValueEquality(sortedArr3.toString(), \"[0,1,10,2,3,6]\");\n     assertValueEquality(sortedArr3, arr);\n+\n+    int[] sortedArr4 = arr.sort(array:DESCENDING, (i) => i.toString());\n+\n+    assertValueEquality(sortedArr4.toString(), \"[6,3,2,10,1,0]\");", "originalCommit": "d9f13dbc8caa39e3c22b7489bf8404689190a01c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489155944", "bodyText": "Can you please explain what we're trying to do with this block? Is there a sample invocation?", "author": "MaryamZi", "createdAt": "2020-09-16T04:35:01Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Sort.java", "diffHunk": "@@ -68,15 +69,15 @@ public static ArrayValue sort(Strand strand, ArrayValue arr, Object direction, O\n         Object[][] sortArr = new Object[arr.size()][2];\n         Object[][] sortArrClone = new Object[arr.size()][2];\n         if (function != null) {\n-            BType elementType = ((BFunctionType) function.getType()).retType;\n-            if (!(elementType.getTag() == TypeTags.UNION_TAG &&\n-                    ((BUnionType) elementType).getMemberTypes().size() > 2)) {\n-                elemType = elementType;\n-            }\n+            elemType = ((BFunctionType) function.getType()).retType;\n             for (int i = 0; i < arr.size(); i++) {\n                 sortArr[i][0] = function.call(new Object[]{strand, arr.get(i), true});\n                 sortArr[i][1] = arr.get(i);\n             }\n+            if (elemType.getTag() == TypeTags.UNION_TAG &&\n+                    ((BUnionType) elemType).getMemberTypes().size() > 2) {\n+                elemType = TypeChecker.getType(sortArr[0][0]);", "originalCommit": "d9f13dbc8caa39e3c22b7489bf8404689190a01c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MDQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489160481", "bodyText": "int[] arr = [1, 4, 2];\nint[] sortedArr = arr.sort(array:ASCENDING, (i) => i);\n\nwhen there is an arrow expression ((BFunctionType) function.getType()).retType is a union type containing all ordered types. This is to cater to getting the type of the array members we need to sort in such a scenario.", "author": "lasinicl", "createdAt": "2020-09-16T04:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMjk1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489502957", "bodyText": "Shall we add a comment explaining why we're doing it? Also it's not just an arrow function right? There can even be a normal function with a compatible union type as the return type?\nA union should have at least 2 members. If it has only 2, don't we have to change elemType?\nCan't sortArr or sortArr[0] be empty here?", "author": "MaryamZi", "createdAt": "2020-09-16T14:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2ODUzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489568530", "bodyText": "Added a comment. That condition checking was only added for arrow functions. When it's an arrow function we definitely know that the function return type is a union with more than 2 member types.  In other cases if return type is a union it can contain maximum of two members. Thus this condition is checked if (elemType.getTag() == TypeTags.UNION_TAG && ((BUnionType) elemType).getMemberTypes().size() > 2) and the type of values in sortArr is taken.\nThis is already handled in \n  \n    \n      ballerina-lang/langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Sort.java\n    \n    \n         Line 92\n      in\n      4fc6993\n    \n    \n    \n    \n\n        \n          \n           if (elemType.getTag() == TypeTags.UNION_TAG) { \n        \n    \n  \n\n\nyes. therefore changed the position of the condition checking for arrow functions", "author": "lasinicl", "createdAt": "2020-09-16T16:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NTk0NA=="}], "type": "inlineReview"}, {"oid": "a0ba157fbcf69420be7185bfac8fe8c8c58657fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0ba157fbcf69420be7185bfac8fe8c8c58657fa", "message": "Change assertion", "committedDate": "2020-09-16T04:57:53Z", "type": "commit"}, {"oid": "ff6aa3ef67b6b074ea3d73a116e1d8ee23241e41", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff6aa3ef67b6b074ea3d73a116e1d8ee23241e41", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25781\n\n\u0001 Conflicts:\n\u0001\tlanglib/lang.array/src/main/java/org/ballerinalang/langlib/array/Sort.java", "committedDate": "2020-09-16T12:43:57Z", "type": "commit"}, {"oid": "40fd3d9df1d71d0c56af65bfb7a11368013443b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40fd3d9df1d71d0c56af65bfb7a11368013443b6", "message": "Fix conflicts and NPE issue", "committedDate": "2020-09-16T13:05:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwNTQ4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489505480", "bodyText": "Do we have tests covering this? Is this only an issue with lambda functions?", "author": "MaryamZi", "createdAt": "2020-09-16T14:58:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5382,12 +5382,15 @@ private void checkArrayLibSortFuncArgs(BLangInvocation iExpr) {\n             returnType = ((BLangSimpleVarRef) keyFunction).type.getReturnType();\n         } else if (keyFunction.getKind() == NodeKind.ARROW_EXPR) {\n             BLangArrowFunction arrowFunction = ((BLangArrowFunction) keyFunction);\n-            pos = arrowFunction.params.get(0).pos;\n-            returnType = arrowFunction.params.get(0).type;\n+            pos = arrowFunction.body.expr.pos;\n+            returnType = arrowFunction.body.expr.type;\n         } else {\n             BLangLambdaFunction keyLambdaFunction = (BLangLambdaFunction) keyFunction;\n             pos = keyLambdaFunction.function.pos;\n             returnType = keyLambdaFunction.function.type.getReturnType();\n+            if (returnType.tag == TypeTags.SEMANTIC_ERROR) {", "originalCommit": "40fd3d9df1d71d0c56af65bfb7a11368013443b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3NzE2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489577165", "bodyText": "Added a test. It's an issue with arrow functions", "author": "lasinicl", "createdAt": "2020-09-16T16:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwNTQ4MA=="}], "type": "inlineReview"}, {"oid": "4fc699331c77169e5668cf013ce06ae69a572d84", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fc699331c77169e5668cf013ce06ae69a572d84", "message": "Fix review suggestions", "committedDate": "2020-09-16T16:14:23Z", "type": "commit"}, {"oid": "d8f642cb111f00ee2ace562e17c1cca220e752f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d8f642cb111f00ee2ace562e17c1cca220e752f0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25781", "committedDate": "2020-09-16T16:29:10Z", "type": "commit"}, {"oid": "b1969198d0fc9ab753082eda4cc9b9c30a24ea6d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1969198d0fc9ab753082eda4cc9b9c30a24ea6d", "message": "Change type checking", "committedDate": "2020-09-16T16:41:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4NjExMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r489986112", "bodyText": "Do we need to check this element by element? This gets overridden right?", "author": "MaryamZi", "createdAt": "2020-09-17T05:51:10Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Sort.java", "diffHunk": "@@ -69,13 +70,17 @@ public static ArrayValue sort(Strand strand, ArrayValue arr, Object direction, O\n         Object[][] sortArr = new Object[arr.size()][2];\n         Object[][] sortArrClone = new Object[arr.size()][2];\n         if (function != null) {\n-            BType elementType = ((BFunctionType) function.getType()).retType;\n-            if (!(elementType.getTag() == TypeTags.UNION_TAG &&\n-                    ((BUnionType) elementType).getMemberTypes().size() > 2)) {\n-                elemType = elementType;\n-            }\n+            elemType = ((BFunctionType) function.getType()).retType;\n             for (int i = 0; i < arr.size(); i++) {\n                 sortArr[i][0] = function.call(new Object[]{strand, arr.get(i), true});\n+                // Get the type of the sortArr elements when there is an arrow expression as the key function\n+                if (elemType.getTag() == TypeTags.UNION_TAG &&\n+                        ((BUnionType) elemType).getMemberTypes().size() > 2) {\n+                    BType sortArrElemType = TypeChecker.getType(sortArr[i][0]);\n+                    if (sortArrElemType.getTag() != TypeTags.NULL_TAG) {\n+                        elemType = sortArrElemType;\n+                    }\n+                }", "originalCommit": "b1969198d0fc9ab753082eda4cc9b9c30a24ea6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "910ae3d6644efb15421c28e85823940759cec7b2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/910ae3d6644efb15421c28e85823940759cec7b2", "message": "Fix review suggestion", "committedDate": "2020-09-17T06:38:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAwODE1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25834#discussion_r490008154", "bodyText": "Shall we move this to within the if block?", "author": "MaryamZi", "createdAt": "2020-09-17T06:47:11Z", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Sort.java", "diffHunk": "@@ -68,14 +69,20 @@ public static ArrayValue sort(Strand strand, ArrayValue arr, Object direction, O\n \n         Object[][] sortArr = new Object[arr.size()][2];\n         Object[][] sortArrClone = new Object[arr.size()][2];\n+        boolean elementTypeIdentified = false;", "originalCommit": "910ae3d6644efb15421c28e85823940759cec7b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e4c5b837abc27d135f61293e9bc74957d34eef50", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4c5b837abc27d135f61293e9bc74957d34eef50", "message": "Fix review suggestion", "committedDate": "2020-09-17T06:48:37Z", "type": "commit"}]}