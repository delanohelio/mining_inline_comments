{"pr_number": 23110, "pr_title": "[Master] Add SASL / PLAIN authentication support for Ballerina Kafka", "pr_createdAt": "2020-05-05T15:53:56Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110", "timeline": [{"oid": "efe5e9ae7cdc8b6bd31bbbf42f20dbb17a5c8a38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/efe5e9ae7cdc8b6bd31bbbf42f20dbb17a5c8a38", "message": "Indent API documentations", "committedDate": "2020-05-05T15:50:38Z", "type": "commit"}, {"oid": "6b510d007053c9d8aa5859a9fef31be103faaaee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b510d007053c9d8aa5859a9fef31be103faaaee", "message": "Reorganize kafka tests", "committedDate": "2020-05-05T15:50:51Z", "type": "commit"}, {"oid": "cc0c02e449e566ea5c1754a7c05ec7d5c9d60eae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc0c02e449e566ea5c1754a7c05ec7d5c9d60eae", "message": "Add SASL/PLAIN authentication to kafka producer", "committedDate": "2020-05-05T15:50:59Z", "type": "commit"}, {"oid": "a34ac2981779dc4318b58e61d08e205ff06a3d5a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a34ac2981779dc4318b58e61d08e205ff06a3d5a", "message": "Add invalid username test for SASL plain", "committedDate": "2020-05-05T15:51:07Z", "type": "commit"}, {"oid": "c85c7805ae17cb08695a0a8de90f284042d3495b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c85c7805ae17cb08695a0a8de90f284042d3495b", "message": "Bump debezium version", "committedDate": "2020-05-05T15:51:14Z", "type": "commit"}, {"oid": "adc068a6babd004cb4f7c52d12244d11cd873b47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/adc068a6babd004cb4f7c52d12244d11cd873b47", "message": "Add SASL PLAIN authentication support for Consumer", "committedDate": "2020-05-05T15:51:21Z", "type": "commit"}, {"oid": "d60c40ca49aaf109d453cbe2d346cb52b835839b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d60c40ca49aaf109d453cbe2d346cb52b835839b", "message": "Add BBEs for Kafka SASL/PLAIN authentication", "committedDate": "2020-05-05T15:51:29Z", "type": "commit"}, {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "message": "Add tests for SASL PLAIN authentication for Kafka consumers", "committedDate": "2020-05-05T15:51:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyNzg0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420227841", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication related details.\n          \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication-related details.", "author": "praneesha", "createdAt": "2020-05-05T16:07:10Z", "path": "examples/kafka-authentication-sasl-plain-consumer/kafka_authentication_sasl_plain_consumer.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+import ballerina/kafka;\n+import ballerina/log;\n+\n+// The `kafka:AuthenticationConfiguration` is used to provide authentication related details.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyODcxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420228715", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Here, is an example of a kafka consumer using SASL/PLAIN authentication.\n          \n          \n            \n            // Here, is an example of a Kafka consumer using SASL/PLAIN authentication.", "author": "praneesha", "createdAt": "2020-05-05T16:08:29Z", "path": "examples/kafka-authentication-sasl-plain-consumer/kafka_authentication_sasl_plain_consumer.description", "diffHunk": "@@ -0,0 +1,3 @@\n+// Here, is an example of a kafka consumer using SASL/PLAIN authentication.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229035", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication related details.\n          \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication-related details.", "author": "praneesha", "createdAt": "2020-05-05T16:08:58Z", "path": "examples/kafka-authentication-sasl-plain-producer/kafka_authentication_sasl_plain_producer.bal", "diffHunk": "@@ -0,0 +1,31 @@\n+import ballerina/io;\n+import ballerina/kafka;\n+\n+// The `kafka:AuthenticationConfiguration` is used to provide authentication related details.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTI2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229268", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Here, is an example of a kafka producer using SASL/PLAIN authentication.\n          \n          \n            \n            // Here, is an example of a Kafka producer using SASL/PLAIN authentication.", "author": "praneesha", "createdAt": "2020-05-05T16:09:18Z", "path": "examples/kafka-authentication-sasl-plain-producer/kafka_authentication_sasl_plain_producer.description", "diffHunk": "@@ -0,0 +1,3 @@\n+// Here, is an example of a kafka producer using SASL/PLAIN authentication.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTY0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229644", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n          \n          \n            \n            # + authenticationMechanism - Type of the authentication mechanism. Currently, SASL_PLAIN and SCRAM are supported. See", "author": "praneesha", "createdAt": "2020-05-05T16:09:52Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTg0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229843", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + securityProtocol - Type of the security protocol to use in broker connection\n          \n          \n            \n            # + securityProtocol - Type of the security protocol to use in the broker connection", "author": "praneesha", "createdAt": "2020-05-05T16:10:12Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTk2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + username - The username to use to authenticate the Kafka producer / consumer\n          \n          \n            \n            # + username - The username to use to authenticate the Kafka producer/consumer", "author": "praneesha", "createdAt": "2020-05-05T16:10:22Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection\n+# + username - The username to use to authenticate the Kafka producer / consumer", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDA2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + password - The password to use to authenticate the Kafka producer / consumer\n          \n          \n            \n            # + password - The password to use to authenticate the Kafka producer/consumer", "author": "praneesha", "createdAt": "2020-05-05T16:10:31Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection\n+# + username - The username to use to authenticate the Kafka producer / consumer\n+# + password - The password to use to authenticate the Kafka producer / consumer", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDI1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230257", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents supported security protocols for kafka clients.\n          \n          \n            \n            # Represents the supported security protocols for Kafka clients.", "author": "praneesha", "createdAt": "2020-05-05T16:10:48Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection\n+# + username - The username to use to authenticate the Kafka producer / consumer\n+# + password - The password to use to authenticate the Kafka producer / consumer\n+public type AuthenticationConfiguration record {|\n+    AuthenticationMechanism authenticationMechanism = AUTH_SASL_PLAIN;\n+    string securityProtocol = PROTOCOL_SASL_PLAINTEXT;\n+    string username;\n+    string password;\n+|};\n+\n+# Represents the supported Kafka SASL authentication mechanisms.\n+public type AuthenticationMechanism AUTH_SASL_PLAIN;\n+\n+# Represents supported security protocols for kafka clients.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authenticationConfiguration - Authentication related configurations for the Kafka consumer\n          \n          \n            \n            # + authenticationConfiguration - Authentication-related configurations for the Kafka consumer", "author": "praneesha", "createdAt": "2020-05-05T16:11:00Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -67,7 +67,8 @@ import ballerina/java;\n #               performance is required\n # + excludeInternalTopics - Whether records from internal topics should be exposed to the consumer\n # + decoupleProcessing - Decouples processing\n-# + secureSocket - Configurations related to SSL/TLS\n+# + secureSocket - Configurations related to SSL/TLS encryption\n+# + authenticationConfiguration - Authentication related configurations for the Kafka consumer", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Closes consumer connection to the external Kafka broker.\n          \n          \n            \n                # Closes the consumer connection of the external Kafka broker.", "author": "praneesha", "createdAt": "2020-05-05T16:11:15Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MjQ5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420252494", "bodyText": "These changes should've been reviewed in the Doc Hackathon. Same applies for all the existing API docs.", "author": "ThisaruGuruge", "createdAt": "2020-05-05T16:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTAzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231033", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else nil\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:11:55Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->close();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the close operation execution\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTE3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Commits current consumed offsets for consumer.\n          \n          \n            \n                # Commits the current consumed offsets for the consumer.", "author": "praneesha", "createdAt": "2020-05-05T16:12:07Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->close();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the close operation execution\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function close(public int duration = -1) returns ConsumerError? {\n         return consumerClose(self, duration);\n     }\n \n-# Commits current consumed offsets for consumer.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->commit();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Commits current consumed offsets for consumer.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTMxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else nil\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:12:20Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->close();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the close operation execution\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function close(public int duration = -1) returns ConsumerError? {\n         return consumerClose(self, duration);\n     }\n \n-# Commits current consumed offsets for consumer.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->commit();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Commits current consumed offsets for consumer.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->commit();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTYwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231608", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Connects consumer to the provided host in the consumer configs.\n          \n          \n            \n                # Connects the consumer to the provided host in the consumer configs.", "author": "praneesha", "createdAt": "2020-05-05T16:12:46Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else nil\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:12:58Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMjk0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420232940", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the currently assigned partitions for the consumer.\n          \n          \n            \n                # Retrieves the currently-assigned partitions for the consumer.", "author": "praneesha", "createdAt": "2020-05-05T16:14:39Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzEwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of assigned partitions for the consumer if executes successfully or else a `kafka:ConsumerError`", "author": "praneesha", "createdAt": "2020-05-05T16:14:54Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n+    # ```\n+    #\n+    # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzMyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233324", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + duration - Timeout duration for the get available topics execution\n          \n          \n            \n                # + duration - Timeout duration for the execution of the `get available topics` operation", "author": "praneesha", "createdAt": "2020-05-05T16:15:13Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n+    # ```\n+    #\n+    # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getAssignment() returns TopicPartition[]|ConsumerError {\n         return consumerGetAssignment(self);\n     }\n \n-# Retrieves the available list of topics for a particular consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n-# ```\n-#\n-# + duration - Timeout duration for the get available topics execution\n-# + return - Array of topics currently available (authorized) for the consumer to subscribe or else\n-#           `kafka:ConsumerError`\n+    # Retrieves the available list of topics for a particular consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the get available topics execution", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzQzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233430", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #           `kafka:ConsumerError`\n          \n          \n            \n                #           a `kafka:ConsumerError`", "author": "praneesha", "createdAt": "2020-05-05T16:15:23Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n+    # ```\n+    #\n+    # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getAssignment() returns TopicPartition[]|ConsumerError {\n         return consumerGetAssignment(self);\n     }\n \n-# Retrieves the available list of topics for a particular consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n-# ```\n-#\n-# + duration - Timeout duration for the get available topics execution\n-# + return - Array of topics currently available (authorized) for the consumer to subscribe or else\n-#           `kafka:ConsumerError`\n+    # Retrieves the available list of topics for a particular consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the get available topics execution\n+    # + return - Array of topics currently available (authorized) for the consumer to subscribe or else\n+    #           `kafka:ConsumerError`", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzYzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233639", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `kafka:ConsumerError`\n          \n          \n            \n                #            a `kafka:ConsumerError`", "author": "praneesha", "createdAt": "2020-05-05T16:15:38Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -353,13 +355,13 @@ public type Consumer client object {\n         return consumerGetEndOffsets(self, partitions, duration);\n     }\n \n-# Retrieves the partitions, which are currently paused.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getPausedPartitions();\n-# ```\n-#\n-# + return - Set of partitions paused from message retrieval if executes successfully or else\n-#            `kafka:ConsumerError`\n+    # Retrieves the partitions, which are currently paused.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getPausedPartitions();\n+    # ```\n+    #\n+    # + return - Set of partitions paused from message retrieval if executes successfully or else\n+    #            `kafka:ConsumerError`", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzcyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the set of topics which are currently subscribed by the consumer.\n          \n          \n            \n                # Retrieves the set of topics, which are currently subscribed by the consumer.", "author": "praneesha", "createdAt": "2020-05-05T16:15:46Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1MzM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420253398", "bodyText": "Why aren't these reviewed in API doc hackathon?", "author": "ThisaruGuruge", "createdAt": "2020-05-05T16:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzgyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233825", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of subscribed topics for the consumer if executes successfully or else a `kafka:ConsumerError`", "author": "praneesha", "createdAt": "2020-05-05T16:15:54Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzk2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the set of partitions in which the topic belongs to.\n          \n          \n            \n                # Retrieves the set of partitions to which the topic belongs.", "author": "praneesha", "createdAt": "2020-05-05T16:16:06Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getSubscription() returns string[]|ConsumerError {\n         return consumerGetSubscription(self);\n     }\n \n-# Retrieves the set of partitions in which the topic belongs to.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - The topic for which the partition information is needed\n-# + duration - Timeout duration for the get topic partitions operation to execute\n-# + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of partitions in which the topic belongs to.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNDE0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420234143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + duration - Timeout duration for the get topic partitions operation to execute\n          \n          \n            \n                # + duration - Timeout duration for the `get topic partitions` operation to execute", "author": "praneesha", "createdAt": "2020-05-05T16:16:23Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getSubscription() returns string[]|ConsumerError {\n         return consumerGetSubscription(self);\n     }\n \n-# Retrieves the set of partitions in which the topic belongs to.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - The topic for which the partition information is needed\n-# + duration - Timeout duration for the get topic partitions operation to execute\n-# + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of partitions in which the topic belongs to.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - The topic for which the partition information is needed\n+    # + duration - Timeout duration for the get topic partitions operation to execute", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNDgxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420234811", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of partitions for the given topic if executes successfully or else a `kafka:ConsumerError`", "author": "praneesha", "createdAt": "2020-05-05T16:17:23Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getSubscription() returns string[]|ConsumerError {\n         return consumerGetSubscription(self);\n     }\n \n-# Retrieves the set of partitions in which the topic belongs to.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - The topic for which the partition information is needed\n-# + duration - Timeout duration for the get topic partitions operation to execute\n-# + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of partitions in which the topic belongs to.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - The topic for which the partition information is needed\n+    # + duration - Timeout duration for the get topic partitions operation to execute\n+    # + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTAwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420235003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Polls the consumer for external broker for records.\n          \n          \n            \n                # Polls the consumer for the records of an external broker.", "author": "praneesha", "createdAt": "2020-05-05T16:17:40Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -406,13 +408,13 @@ public type Consumer client object {\n         return consumerPause(self, partitions);\n     }\n \n-# Polls the consumer for external broker for records.\n-# ```ballerina\n-# kafka:ConsumerRecord[]|kafka:ConsumerError result = consumer->poll(1000);\n-# ```\n-#\n-# + timeoutValue - Polling time in milliseconds\n-# + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`\n+    # Polls the consumer for external broker for records.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTA5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420235099", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of consumer records if executed successfully or else a `kafka:ConsumerError`", "author": "praneesha", "createdAt": "2020-05-05T16:17:49Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -406,13 +408,13 @@ public type Consumer client object {\n         return consumerPause(self, partitions);\n     }\n \n-# Polls the consumer for external broker for records.\n-# ```ballerina\n-# kafka:ConsumerRecord[]|kafka:ConsumerError result = consumer->poll(1000);\n-# ```\n-#\n-# + timeoutValue - Polling time in milliseconds\n-# + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`\n+    # Polls the consumer for external broker for records.\n+    # ```ballerina\n+    # kafka:ConsumerRecord[]|kafka:ConsumerError result = consumer->poll(1000);\n+    # ```\n+    #\n+    # + timeoutValue - Polling time in milliseconds\n+    # + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjYwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236605", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else ()\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:20:04Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjc0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Subscribes the consumer to the topics which matches to the provided pattern.\n          \n          \n            \n                # Subscribes the consumer to the topics, which match the provided pattern.", "author": "praneesha", "createdAt": "2020-05-05T16:20:15Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()\n     public remote function subscribe(string[] topics) returns ConsumerError? {\n         return consumerSubscribe(self, topics);\n     }\n \n-# Subscribes the consumer to the topics which matches to the provided pattern.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n-# ```\n-#\n-# + regex - Pattern which should be matched with the topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the topics which matches to the provided pattern.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjg0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236844", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + regex - Pattern which should be matched with the topics to be subscribed to\n          \n          \n            \n                # + regex - Pattern, which should be matched with the topics to be subscribed to", "author": "praneesha", "createdAt": "2020-05-05T16:20:24Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()\n     public remote function subscribe(string[] topics) returns ConsumerError? {\n         return consumerSubscribe(self, topics);\n     }\n \n-# Subscribes the consumer to the topics which matches to the provided pattern.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n-# ```\n-#\n-# + regex - Pattern which should be matched with the topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the topics which matches to the provided pattern.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n+    # ```\n+    #\n+    # + regex - Pattern which should be matched with the topics to be subscribed to", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjk1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236956", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else ()\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:20:36Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()\n     public remote function subscribe(string[] topics) returns ConsumerError? {\n         return consumerSubscribe(self, topics);\n     }\n \n-# Subscribes the consumer to the topics which matches to the provided pattern.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n-# ```\n-#\n-# + regex - Pattern which should be matched with the topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the topics which matches to the provided pattern.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n+    # ```\n+    #\n+    # + regex - Pattern which should be matched with the topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420237125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else ()\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:20:49Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -486,12 +488,12 @@ public type Consumer client object {\n         return consumerSubscribeWithPartitionRebalance(self, topics, onPartitionsRevoked, onPartitionsAssigned);\n     }\n \n-# Unsubscribes from all the topic subscriptions.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->unsubscribe();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Unsubscribes from all the topic subscriptions.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->unsubscribe();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzM1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420237353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authenticationConfiguration - Authentication related configurations for the Kafka producer\n          \n          \n            \n            # + authenticationConfiguration - Authentication-related configurations for the Kafka producer", "author": "praneesha", "createdAt": "2020-05-05T16:21:08Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -57,7 +57,8 @@ import ballerina/java;\n # + connectionsMaxIdleTimeInMillis - Close the idle connections after this number of milliseconds\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled\n-# + secureSocket - Configurations related to SSL/TLS\n+# + secureSocket - Configurations related to SSL/TLS encryption\n+# + authenticationConfiguration - Authentication related configurations for the Kafka producer", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzUzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420237539", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `kafka:ProducerError` if closing the producer is failed or else ()\n          \n          \n            \n                # + return - A `kafka:ProducerError` if closing the producer failed or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:21:26Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,12 +176,12 @@ public type Producer client object {\n \n     public string connectorId = system:uuid();\n \n-# Closes the producer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->close();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if closing the producer is failed or else ()\n+    # Closes the producer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->close();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if closing the producer is failed or else ()", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzOTkxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420239915", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configures the consumer to read all the messages even the aborted ones.\n          \n          \n            \n            # Configures the consumer to read all the messages including the aborted ones.", "author": "praneesha", "createdAt": "2020-05-05T16:25:00Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/kafka_constants.bal", "diffHunk": "@@ -52,7 +53,9 @@ public const ISOLATION_COMMITTED = \"read_committed\";\n # Configures the consumer to read all the messages even the aborted ones.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDE1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240154", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Security Protocols\n          \n          \n            \n            // Security Protocols.", "author": "praneesha", "createdAt": "2020-05-05T16:25:23Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/kafka_constants.bal", "diffHunk": "@@ -100,3 +103,15 @@ public const COMPRESSION_LZ4 = \"lz4\";\n \n # Kafka ZSTD compression type.\n public const COMPRESSION_ZSTD = \"zstd\";\n+\n+// ********************************************\n+//              Common constants              *\n+// ********************************************\n+// SASL Authentication mechanisms\n+# Kafka SASL_PLAIN authentication mechanism\n+public const AUTH_SASL_PLAIN = \"PLAIN\";\n+\n+\n+// Security Protocols", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1NDU0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420254543", "bodyText": "This isn'n an API documentation comment.", "author": "ThisaruGuruge", "createdAt": "2020-05-05T16:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDM4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240380", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled\n          \n          \n            \n            # + enableIdempotence - Exactly one copy of each message is written to the stream when enabled", "author": "praneesha", "createdAt": "2020-05-05T16:25:41Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -57,7 +57,8 @@ import ballerina/java;\n # + connectionsMaxIdleTimeInMillis - Close the idle connections after this number of milliseconds\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDU1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Defines a records to send data using Avro serialization.\n          \n          \n            \n            # Defines a record to send data using Avro serialization.", "author": "praneesha", "createdAt": "2020-05-05T16:25:58Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -97,6 +98,7 @@ public type ProducerConfiguration record {|\n     boolean enableIdempotence = false;\n \n     SecureSocket secureSocket?;\n+    AuthenticationConfiguration authenticationConfiguration?;\n |};\n \n # Defines a records to send data using Avro serialization.", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDcyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n          \n          \n            \n                # + return - A `kafka:ProducerError` if records couldn't be flushed or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:26:15Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -201,38 +203,38 @@ public type Producer client object {\n         return producerCommitConsumerOffsets(self, offsets, java:fromString(groupID));\n     }\n \n-# Flushes the batch of records already sent to the broker by the producer.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->flushRecords();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n+    # Flushes the batch of records already sent to the broker by the producer.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->flushRecords();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MTAyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420241028", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + key - Key that will be included in the record\n          \n          \n            \n                # + key - Key, which will be included in the record", "author": "praneesha", "createdAt": "2020-05-05T16:26:42Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -201,38 +203,38 @@ public type Producer client object {\n         return producerCommitConsumerOffsets(self, offsets, java:fromString(groupID));\n     }\n \n-# Flushes the batch of records already sent to the broker by the producer.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->flushRecords();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n+    # Flushes the batch of records already sent to the broker by the producer.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->flushRecords();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n     public remote function flushRecords() returns ProducerError? {\n         return producerFlushRecords(self);\n     }\n \n-# Retrieves the topic partition information for the provided topic.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - Topic of which the partition information is given\n-# + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n+    # Retrieves the topic partition information for the provided topic.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - Topic of which the partition information is given\n+    # + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n     public remote function getTopicPartitions(string topic) returns TopicPartition[]|ProducerError {\n         return producerGetTopicPartitions(self, java:fromString(topic));\n     }\n \n-# Produces records to the Kafka server.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n-# ```\n-#\n-# + value - Record contents\n-# + topic - Topic to which the record will be appended\n-# + key - Key that will be included in the record\n-# + partition - Partition to which the record should be sent\n-# + timestamp - Timestamp of the record in milliseconds since epoch\n-# + return -  A `kafka:ProducerError` if send action fails to send data or else ()\n+    # Produces records to the Kafka server.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n+    # ```\n+    #\n+    # + value - Record contents\n+    # + topic - Topic to which the record will be appended\n+    # + key - Key that will be included in the record", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MTE4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420241182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return -  A `kafka:ProducerError` if send action fails to send data or else ()\n          \n          \n            \n                # + return -  A `kafka:ProducerError` if send action fails to send data or else '()'", "author": "praneesha", "createdAt": "2020-05-05T16:26:56Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -201,38 +203,38 @@ public type Producer client object {\n         return producerCommitConsumerOffsets(self, offsets, java:fromString(groupID));\n     }\n \n-# Flushes the batch of records already sent to the broker by the producer.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->flushRecords();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n+    # Flushes the batch of records already sent to the broker by the producer.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->flushRecords();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n     public remote function flushRecords() returns ProducerError? {\n         return producerFlushRecords(self);\n     }\n \n-# Retrieves the topic partition information for the provided topic.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - Topic of which the partition information is given\n-# + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n+    # Retrieves the topic partition information for the provided topic.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - Topic of which the partition information is given\n+    # + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n     public remote function getTopicPartitions(string topic) returns TopicPartition[]|ProducerError {\n         return producerGetTopicPartitions(self, java:fromString(topic));\n     }\n \n-# Produces records to the Kafka server.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n-# ```\n-#\n-# + value - Record contents\n-# + topic - Topic to which the record will be appended\n-# + key - Key that will be included in the record\n-# + partition - Partition to which the record should be sent\n-# + timestamp - Timestamp of the record in milliseconds since epoch\n-# + return -  A `kafka:ProducerError` if send action fails to send data or else ()\n+    # Produces records to the Kafka server.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n+    # ```\n+    #\n+    # + value - Record contents\n+    # + topic - Topic to which the record will be appended\n+    # + key - Key that will be included in the record\n+    # + partition - Partition to which the record should be sent\n+    # + timestamp - Timestamp of the record in milliseconds since epoch\n+    # + return -  A `kafka:ProducerError` if send action fails to send data or else ()", "originalCommit": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8be3192beb89469c75b16d33a5ef0c862af0118", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8be3192beb89469c75b16d33a5ef0c862af0118", "message": "Update Kafka BBEs with API doc links", "committedDate": "2020-05-05T16:28:08Z", "type": "commit"}, {"oid": "43f75dccd97bd5c227f2d9b2e457008fa7e61bb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43f75dccd97bd5c227f2d9b2e457008fa7e61bb4", "message": "Apply suggestions from code review\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-05-05T16:48:10Z", "type": "commit"}, {"oid": "e387c5535f276d9ff8343e0ae2da02d9e2097580", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e387c5535f276d9ff8343e0ae2da02d9e2097580", "message": "Disable intermittent test failures in integratoin test", "committedDate": "2020-05-05T19:44:17Z", "type": "commit"}, {"oid": "02ccd45ad2dddb706fac9676e3cfd4dfd797dbad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02ccd45ad2dddb706fac9676e3cfd4dfd797dbad", "message": "Revert \"Disable intermittent test failures in integratoin test\"\n\nThis reverts commit e387c5535f276d9ff8343e0ae2da02d9e2097580.", "committedDate": "2020-05-06T03:47:22Z", "type": "commit"}, {"oid": "1a4890be11e0c81b6fe44b316e51a5b79c94eaa6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a4890be11e0c81b6fe44b316e51a5b79c94eaa6", "message": "Disable failing intgration tests", "committedDate": "2020-05-06T04:07:02Z", "type": "commit"}, {"oid": "3539f3b8df18038ecf066df1ccc3782e057ec0c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3539f3b8df18038ecf066df1ccc3782e057ec0c9", "message": "Update Kafka BBE URLs and names", "committedDate": "2020-05-06T05:12:23Z", "type": "commit"}, {"oid": "8bc45eea1c4bbce8d508dc378c1c5acd736d84be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8bc45eea1c4bbce8d508dc378c1c5acd736d84be", "message": "Revert Disableing tests commit since it is disabled by another commit\n\nThis reverts commit 1a4890be11e0c81b6fe44b316e51a5b79c94eaa6.", "committedDate": "2020-05-06T05:12:46Z", "type": "commit"}, {"oid": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4fcd2cdcd6525a1ca067856d0b0c7059accf055", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-sasl-support-master", "committedDate": "2020-05-06T06:52:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTEyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r422751124", "bodyText": "Shall we name it mechanism? The word authentication is redundant I guess since this is AuthenticationConfiguration", "author": "daneshk", "createdAt": "2020-05-11T02:45:52Z", "path": "examples/kafka-authentication-sasl-plain-consumer/kafka_authentication_sasl_plain_consumer.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+import ballerina/kafka;\n+import ballerina/log;\n+\n+// The `kafka:AuthenticationConfiguration` is used to provide authentication-related details.\n+kafka:AuthenticationConfiguration authConfig = {\n+    // Provide the authentication mechanism used by the Kafka server.\n+    authenticationMechanism: kafka:AUTH_SASL_PLAIN,", "originalCommit": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc3ODE5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r422778193", "bodyText": "+1", "author": "ThisaruGuruge", "createdAt": "2020-05-11T04:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTEyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1Mzg2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r422753868", "bodyText": "Are we support any other mechanism?\nDo we have the same username, password config for the other authentication mechanisms", "author": "daneshk", "createdAt": "2020-05-11T02:59:23Z", "path": "stdlib/messaging/kafka/src/test/resources/test-src/security/sasl_plain_consumer.bal", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/kafka;\n+\n+kafka:AuthenticationConfiguration authConfigValid = {\n+    authenticationMechanism: kafka:AUTH_SASL_PLAIN,\n+    username: \"ballerina\",\n+    password: \"ballerina-secret\"\n+};\n+\n+kafka:AuthenticationConfiguration authConfigInvalidPassword = {\n+    authenticationMechanism: kafka:AUTH_SASL_PLAIN,", "originalCommit": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc3ODQyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r422778425", "bodyText": "Yes, SASL/SCRAM is going to be supported (Implemented locally, will send the PR once this gets merged). It also uses the username and the password", "author": "ThisaruGuruge", "createdAt": "2020-05-11T04:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1Mzg2OA=="}], "type": "inlineReview"}, {"oid": "bd9345814fbe6be686520eb12c6c92d9243b8618", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd9345814fbe6be686520eb12c6c92d9243b8618", "message": "Change the field name of authentocationMechanism to mechanism", "committedDate": "2020-05-11T07:21:44Z", "type": "commit"}, {"oid": "31b17de52ee6465ca66d1505d7f17d739af0064a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31b17de52ee6465ca66d1505d7f17d739af0064a", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-sasl-support-master", "committedDate": "2020-05-11T07:22:06Z", "type": "commit"}]}