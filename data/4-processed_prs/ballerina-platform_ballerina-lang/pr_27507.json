{"pr_number": 27507, "pr_title": "Include maven resolver task", "pr_createdAt": "2020-12-15T17:02:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcyMDA1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#discussion_r544720054", "bodyText": "Can we remove this section since it is already handled by the next if block?", "author": "IrushiL", "createdAt": "2020-12-17T00:26:01Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/ResolveMavenDependenciesTask.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.JdkVersion;\n+import io.ballerina.projects.PackageManifest;\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.maven.Dependency;\n+import org.ballerinalang.maven.MavenResolver;\n+import org.ballerinalang.maven.Utils;\n+import org.ballerinalang.maven.exceptions.MavenResolverException;\n+\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Resolve maven dependencies.\n+ */\n+public class ResolveMavenDependenciesTask implements Task {\n+    private final transient PrintStream out;\n+\n+    public ResolveMavenDependenciesTask(PrintStream out) {\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        PackageManifest.Platform platform = project.currentPackage().manifest().platform(JdkVersion.JAVA_11.code());\n+\n+        if (platform == null) {\n+            return;\n+        }\n+\n+        List<Map<String, Object>> platformLibraries = platform.dependencies();\n+        //List<Repository> mavenCustomRepos = manifest.getPlatform().getRepositories();\n+        List<Map<String, Object>> mavenDependencies = new ArrayList<>();\n+        if (platformLibraries == null) {\n+            return;\n+        }\n+\n+        String targetRepo = project.sourceRoot().toString() + File.separator + \"target\" + File.separator\n+                + \"platform-libs\";\n+        MavenResolver resolver = new MavenResolver(targetRepo);\n+\n+//        if (mavenCustomRepos != null && mavenCustomRepos.size() > 0) {\n+//            for (Repository repository : mavenCustomRepos) {\n+//                String id = repository.getId();\n+//                String url = repository.getUrl();\n+//                if (id == null && url == null) {\n+//                    throw LauncherUtils\n+//                            .createLauncherException(\"custom maven repository properties are not specified for \" +\n+//                            \"given platform repository.\");\n+//                }\n+//\n+//                String username = repository.getUsername();\n+//                String password = repository.getPassword();\n+//                if (username != null && password != null) {\n+//                    resolver.addRepository(id, url, username, password);\n+//                    continue;\n+//                }\n+//                resolver.addRepository(id, url);\n+//            }\n+//        }\n+\n+        for (Map<String, Object> library : platformLibraries) {\n+            if (library.get(\"path\") == null) {\n+                if (library.get(\"version\") == null) {\n+                    throw createLauncherException(\"path or maven dependency properties are not specified for \" +\n+                            \"given platform library dependency.\");\n+                }", "originalCommit": "166e64357241a310dee538a5478d7f75e19b1c29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "message": "Include maven resolver task", "committedDate": "2020-12-22T05:47:45Z", "type": "commit"}, {"oid": "ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea808763c248bed338ffa39ef77c2e3bcb0c1f04", "message": "Include maven resolver task", "committedDate": "2020-12-22T05:47:45Z", "type": "forcePushed"}, {"oid": "07b325920f7801954fdbf58ccddf62385096b314", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07b325920f7801954fdbf58ccddf62385096b314", "message": "Remove extra version check", "committedDate": "2020-12-22T06:49:15Z", "type": "commit"}, {"oid": "8f66dca50033e862c00adf9598bad149ce1be1af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f66dca50033e862c00adf9598bad149ce1be1af", "message": "Update references", "committedDate": "2020-12-22T09:46:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MDkyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#discussion_r547190924", "bodyText": "Shall we enable this in the RunCommand, TestCommand, and the DocCommand  also?", "author": "IrushiL", "createdAt": "2020-12-22T10:17:14Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/BuildCommand.java", "diffHunk": "@@ -224,7 +225,7 @@ public void execute() {\n         TaskExecutor taskExecutor = new TaskExecutor.TaskBuilder()\n                 .addTask(new CleanTargetDirTask(), isSingleFileBuild)   // clean the target directory(projects only)\n                 .addTask(new CreateTargetDirTask()) // create target directory\n-//                .addTask(new ResolveMavenDependenciesTask()) // resolve maven dependencies in Ballerina.toml\n+                .addTask(new ResolveMavenDependenciesTask(outStream)) // resolve maven dependencies in Ballerina.toml", "originalCommit": "8f66dca50033e862c00adf9598bad149ce1be1af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "23376141a189e7ea12d00f599255b488f4b405fd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23376141a189e7ea12d00f599255b488f4b405fd", "message": "Enable maven resolver", "committedDate": "2020-12-22T13:42:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5Njc0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27507#discussion_r547296744", "bodyText": "These needs to be enabled with maven repository support in toml file. For that new issue has been created\n#27622", "author": "keizer619", "createdAt": "2020-12-22T14:07:01Z", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/task/ResolveMavenDependenciesTask.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.cli.task;\n+\n+import io.ballerina.projects.JvmTarget;\n+import io.ballerina.projects.PackageManifest;\n+import io.ballerina.projects.Project;\n+import org.ballerinalang.maven.Dependency;\n+import org.ballerinalang.maven.MavenResolver;\n+import org.ballerinalang.maven.Utils;\n+import org.ballerinalang.maven.exceptions.MavenResolverException;\n+\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.cli.launcher.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Resolve maven dependencies.\n+ */\n+public class ResolveMavenDependenciesTask implements Task {\n+    private final transient PrintStream out;\n+\n+    public ResolveMavenDependenciesTask(PrintStream out) {\n+        this.out = out;\n+    }\n+\n+    @Override\n+    public void execute(Project project) {\n+        PackageManifest.Platform platform = project.currentPackage().manifest().platform(JvmTarget.JAVA_11.code());\n+\n+        if (platform == null) {\n+            return;\n+        }\n+\n+        List<Map<String, Object>> platformLibraries = platform.dependencies();\n+        //List<Repository> mavenCustomRepos = manifest.getPlatform().getRepositories();\n+        List<Map<String, Object>> mavenDependencies = new ArrayList<>();\n+        if (platformLibraries == null) {\n+            return;\n+        }\n+\n+        String targetRepo = project.sourceRoot().toString() + File.separator + \"target\" + File.separator\n+                + \"platform-libs\";\n+        MavenResolver resolver = new MavenResolver(targetRepo);\n+\n+//        if (mavenCustomRepos != null && mavenCustomRepos.size() > 0) {", "originalCommit": "23376141a189e7ea12d00f599255b488f4b405fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}