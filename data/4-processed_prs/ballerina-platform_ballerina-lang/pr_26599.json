{"pr_number": 26599, "pr_title": "Add module level list binding pattern support", "pr_createdAt": "2020-10-26T09:44:33Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599", "timeline": [{"oid": "dd5e8971a4501d78d543b6b14c373747a4a19f14", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd5e8971a4501d78d543b6b14c373747a4a19f14", "message": "Make initializer optional in ModuleVariableDeclarationNode", "committedDate": "2020-10-16T09:06:15Z", "type": "commit"}, {"oid": "0e6679e7122f6e10ce4a20729e60043e2b5acce8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e6679e7122f6e10ce4a20729e60043e2b5acce8", "message": "Complete binding pattern support for module var declaration\nAdd list, error, mapping binding pattern support for module level var declaration in node transformer", "committedDate": "2020-10-16T15:44:49Z", "type": "commit"}, {"oid": "c20576d37be837f44f5a831215366de5e097631a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c20576d37be837f44f5a831215366de5e097631a", "message": "Update failing test", "committedDate": "2020-10-16T15:45:22Z", "type": "commit"}, {"oid": "efecaf3080692a7a4cfc0d399bb55ca90e0e919d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/efecaf3080692a7a4cfc0d399bb55ca90e0e919d", "message": "Fix checkstyle issue", "committedDate": "2020-10-16T15:48:45Z", "type": "commit"}, {"oid": "d04435863c597a0dcdd9873a40f58dbd10f78a32", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d04435863c597a0dcdd9873a40f58dbd10f78a32", "message": "Test bal file", "committedDate": "2020-10-20T05:22:34Z", "type": "commit"}, {"oid": "91a2b6e3f0d1d0076de03d4a0d337af36c6198b2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91a2b6e3f0d1d0076de03d4a0d337af36c6198b2", "message": "Make expr and equal token optional in formatter", "committedDate": "2020-10-21T10:29:44Z", "type": "commit"}, {"oid": "dc02c8dda31c273b4f918787a09b8b182faaf030", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dc02c8dda31c273b4f918787a09b8b182faaf030", "message": "Fix language server core failure\nFix error in language server core cause of making initializer and equal optional in module var declaration node.", "committedDate": "2020-10-23T05:21:31Z", "type": "commit"}, {"oid": "836b1583e7b2cc339002ea51335f37b76280a0d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/836b1583e7b2cc339002ea51335f37b76280a0d3", "message": "Compiler FE support for module list binding pattern\nAdd Compiler FE support for module list binding pattern, use VariableNode to hold global variables in the package, update test cases", "committedDate": "2020-10-26T07:25:17Z", "type": "commit"}, {"oid": "c68712ad5841243164a60d79f9b0b11e2f323328", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c68712ad5841243164a60d79f9b0b11e2f323328", "message": "Test cases for module var declaration with list binding pattern", "committedDate": "2020-10-26T07:26:00Z", "type": "commit"}, {"oid": "a07bfa7c70af0f2eff4a4094622b6db8740051e4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a07bfa7c70af0f2eff4a4094622b6db8740051e4", "message": "Uncomment a test line", "committedDate": "2020-10-26T08:27:38Z", "type": "commit"}, {"oid": "4e8eda1240fb00b67f4c4eda6cec4da26b0d1e89", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e8eda1240fb00b67f4c4eda6cec4da26b0d1e89", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-10-26T08:54:57Z", "type": "commit"}, {"oid": "bebcb36831277563bee7e3495213f1c1aedd81ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bebcb36831277563bee7e3495213f1c1aedd81ce", "message": "Remove duplicate test", "committedDate": "2020-10-26T09:01:41Z", "type": "commit"}, {"oid": "d2d0bbad765d9dd9a5cc7be542e32398d90b499a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2d0bbad765d9dd9a5cc7be542e32398d90b499a", "message": "Fix issue in TestCompilerPlugin.java", "committedDate": "2020-10-26T10:19:19Z", "type": "commit"}, {"oid": "9968daa5cb0229c102f858efeed574e36d80a220", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9968daa5cb0229c102f858efeed574e36d80a220", "message": "Fix checkstyle issue", "committedDate": "2020-10-26T10:43:04Z", "type": "commit"}, {"oid": "1b19f07e1768126c2bfe20d35e4231a06e390f18", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b19f07e1768126c2bfe20d35e4231a06e390f18", "message": "Fix checkstyle issue in CommandExecutionTest", "committedDate": "2020-10-26T11:12:01Z", "type": "commit"}, {"oid": "e63cca5e869a3fd634bb8ec0da9f84708e27e003", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e63cca5e869a3fd634bb8ec0da9f84708e27e003", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-10-26T12:04:11Z", "type": "commit"}, {"oid": "fb0e8aa9f3f62432885af447ce9e107d4237e14b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb0e8aa9f3f62432885af447ce9e107d4237e14b", "message": "Undo changes to FormattingTreeModifier", "committedDate": "2020-10-26T13:57:17Z", "type": "commit"}, {"oid": "51176b3f32262e8b374e92bbee8c5392c6192c4b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51176b3f32262e8b374e92bbee8c5392c6192c4b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-11-05T11:17:38Z", "type": "commit"}, {"oid": "ee9c369bef67a61ccab2d9b58b83317d706db5da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee9c369bef67a61ccab2d9b58b83317d706db5da", "message": "Resolve conflicts", "committedDate": "2020-11-05T11:22:19Z", "type": "commit"}, {"oid": "ee9c369bef67a61ccab2d9b58b83317d706db5da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee9c369bef67a61ccab2d9b58b83317d706db5da", "message": "Resolve conflicts", "committedDate": "2020-11-05T11:22:19Z", "type": "forcePushed"}, {"oid": "e429b2c0d1466fe1d612459f332d98c767f670ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e429b2c0d1466fe1d612459f332d98c767f670ef", "message": "Undo changes to AbstractObjectTest", "committedDate": "2020-11-05T15:12:11Z", "type": "commit"}, {"oid": "48d2110fdfedb118fe7cfc9e8a48c382bdf6b6de", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48d2110fdfedb118fe7cfc9e8a48c382bdf6b6de", "message": "Use missingNodesHelper to create name for missing simple variable", "committedDate": "2020-11-06T03:52:04Z", "type": "commit"}, {"oid": "53b326cd4da78c06960160f59e811c1c8eb673b3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53b326cd4da78c06960160f59e811c1c8eb673b3", "message": "Update AbstractObjectTest", "committedDate": "2020-11-06T04:17:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyMDIwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r520720205", "bodyText": "I guess this could be a breaking change for standard library modules and extensions. Let's raise this on Slack before merging the PR.", "author": "MaryamZi", "createdAt": "2020-11-10T16:58:51Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/compiler/plugins/AbstractCompilerPlugin.java", "diffHunk": "@@ -67,7 +67,7 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n     }\n \n     @Override\n-    public void process(SimpleVariableNode variableNode, List<AnnotationAttachmentNode> annotations) {\n+    public void process(VariableNode variableNode, List<AnnotationAttachmentNode> annotations) {", "originalCommit": "53b326cd4da78c06960160f59e811c1c8eb673b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3Mjk2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r520772961", "bodyText": "Won't these casts leads to issues? Shouldn't we properly handle the list case also for now and appropriately handle the rest when they are being introduced?", "author": "MaryamZi", "createdAt": "2020-11-10T18:18:49Z", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "diffHunk": "@@ -666,7 +667,8 @@ private static void sortModuleConstructs(BLangPackage bLangPackage) {\n         bLangPackage.getAnnotations().sort(Comparator.comparing(a -> a.getName().getValue()));\n         bLangPackage.getTypeDefinitions()\n                 .sort(Comparator.comparing(a -> a.getName() == null ? \"\" : a.getName().getValue()));\n-        bLangPackage.getGlobalVariables().sort(Comparator.comparing(a -> a.getName().getValue()));\n+        bLangPackage.getGlobalVariables().sort(Comparator.comparing(a ->\n+                ((BLangSimpleVariable) a).getName().getValue()));", "originalCommit": "53b326cd4da78c06960160f59e811c1c8eb673b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1NTQ0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r521855445", "bodyText": "all the variables will desugar into simple variables, hence this should not fail", "author": "rdulmina", "createdAt": "2020-11-12T05:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3Mjk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NzY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r520777693", "bodyText": "This cast could also lead to issues, right?", "author": "MaryamZi", "createdAt": "2020-11-10T18:27:07Z", "path": "tests/ballerina-compiler-plugin-test/src/test/java/io/ballerina/test/compiler/plugins/TestCompilerPlugin.java", "diffHunk": "@@ -77,8 +78,9 @@ public void process(FunctionNode functionNode, List<AnnotationAttachmentNode> an\n     }\n \n     @Override\n-    public void process(SimpleVariableNode variableNode, List<AnnotationAttachmentNode> annotations) {\n-        addEvent(TestEvent.Kind.VARIAVLE_ANN, variableNode.getName().getValue(), annotations.size());\n+    public void process(VariableNode variableNode, List<AnnotationAttachmentNode> annotations) {\n+        addEvent(TestEvent.Kind.VARIAVLE_ANN, ((SimpleVariableNode) variableNode).getName().getValue(),", "originalCommit": "53b326cd4da78c06960160f59e811c1c8eb673b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NTUwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r527495501", "bodyText": "all the variables will desugar into simple variables, hence this should not fail", "author": "rdulmina", "createdAt": "2020-11-20T07:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NzY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNDc1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531404752", "bodyText": "Compiler plugins are invoked before the desugar though.", "author": "MaryamZi", "createdAt": "2020-11-27T06:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NzY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2NDgwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531464808", "bodyText": "Will have a look", "author": "rdulmina", "createdAt": "2020-11-27T09:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NzY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzMjE5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r533132195", "bodyText": "Ignored compiler plugin runner for tuple variable", "author": "rdulmina", "createdAt": "2020-12-01T07:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NzY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MTU3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r520781579", "bodyText": "Was trying to test the test compiler plugin and came across the following issue.\nAdding the following in tests/ and doing a ballerina build results in a bad, sad error.\nconst annotation annot on source var;\n\n@annot\n[int, int] [x, y] = [1, 2];\n[2020-11-10 23:54:22,205] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.CompilerPluginRunner.notifyProcessors(CompilerPluginRunner.java:313)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.CompilerPluginRunner.visit(CompilerPluginRunner.java:240)\n\tat org.wso2.ballerinalang.compiler.tree.BLangTupleVariable.accept(BLangTupleVariable.java:56)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.CompilerPluginRunner.visit(CompilerPluginRunner.java:152)\n\tat org.wso2.ballerinalang.compiler.tree.BLangPackage.accept(BLangPackage.java:163)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.CompilerPluginRunner.runPlugins(CompilerPluginRunner.java:135)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.annotationProcess(CompilerDriver.java:367)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.compile(CompilerDriver.java:303)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.compilePackageSymbol(CompilerDriver.java:260)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.compilePackage(CompilerDriver.java:143)\n\tat org.wso2.ballerinalang.compiler.Compiler.compilePackages(Compiler.java:176)\n\tat org.wso2.ballerinalang.compiler.Compiler.compilePackage(Compiler.java:221)\n\tat org.wso2.ballerinalang.compiler.Compiler.compile(Compiler.java:101)\n\tat org.wso2.ballerinalang.compiler.Compiler.build(Compiler.java:109)\n\tat org.ballerinalang.packerina.task.CompileTask.execute(CompileTask.java:62)\n\tat org.ballerinalang.packerina.TaskExecutor.executeTasks(TaskExecutor.java:38)\n\tat org.ballerinalang.packerina.cmd.BuildCommand.execute(BuildCommand.java:436)\n\tat java.base/java.util.Optional.ifPresent(Optional.java:183)\n\tat org.ballerinalang.tool.Main.main(Main.java:57)", "author": "MaryamZi", "createdAt": "2020-11-10T18:34:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CompilerPluginRunner.java", "diffHunk": "@@ -233,6 +234,12 @@ public void visit(BLangSimpleVariable varNode) {\n         notifyProcessors(attachmentList, (processor, list) -> processor.process(varNode, list));\n     }\n \n+    @Override\n+    public void visit(BLangTupleVariable tupleVariableNode) {\n+        List<BLangAnnotationAttachment> attachmentList = tupleVariableNode.getAnnotationAttachments();\n+        notifyProcessors(attachmentList, (processor, list) -> processor.process(tupleVariableNode, list));", "originalCommit": "53b326cd4da78c06960160f59e811c1c8eb673b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0NzYzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r523947638", "bodyText": "fixed", "author": "rdulmina", "createdAt": "2020-11-16T07:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MTU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MjAxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r520782018", "bodyText": "There'll be scenarios where this cast could fail, right?", "author": "MaryamZi", "createdAt": "2020-11-10T18:34:53Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -343,10 +343,11 @@ private void analyzeModuleInitFunc(BLangFunction funcNode) {\n         this.currDependentSymbol.pop();\n     }\n \n-    private void checkForUninitializedGlobalVars(List<BLangSimpleVariable> globalVars) {\n-        for (BLangSimpleVariable globalVar : globalVars) {\n+    private void checkForUninitializedGlobalVars(List<BLangVariable> globalVars) {\n+        for (BLangVariable globalVar : globalVars) {\n             if (this.uninitializedVars.containsKey(globalVar.symbol)) {\n-                this.dlog.error(globalVar.pos, DiagnosticCode.UNINITIALIZED_VARIABLE, globalVar.name);\n+                this.dlog.error(globalVar.pos, DiagnosticCode.UNINITIALIZED_VARIABLE,\n+                        ((BLangSimpleVariable) globalVar).name);", "originalCommit": "53b326cd4da78c06960160f59e811c1c8eb673b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MjgwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r520782804", "bodyText": "The following compiles, even though it is invalid, and crashes at runtime.\n[int, int] [a, b]; // no error\n\npublic function main() {\n    int x = a; // no error\n}\n[2020-11-11 00:05:47,501] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat $_init.$gen$$0046$0060init$0062(.:1)\n\tat $_init.$moduleInit(.)\n\tat $_init.$lambda$$moduleInit$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:498)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:277)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:245)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "author": "MaryamZi", "createdAt": "2020-11-10T18:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MjAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1NjI5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r521856295", "bodyText": "Yes, will look into that thanx", "author": "rdulmina", "createdAt": "2020-11-12T05:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MjAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0NzcyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r523947723", "bodyText": "fixed", "author": "rdulmina", "createdAt": "2020-11-16T07:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MjAxOA=="}], "type": "inlineReview"}, {"oid": "3536c398d2a7c49886ba339b96f05b2e5438f97c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3536c398d2a7c49886ba339b96f05b2e5438f97c", "message": "Handle uninitialized global tuple variables", "committedDate": "2020-11-13T13:05:04Z", "type": "commit"}, {"oid": "89cff607f7c4ec379a85673875da93d87407584d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89cff607f7c4ec379a85673875da93d87407584d", "message": "Test cases for uninitialized module tuple var decl", "committedDate": "2020-11-13T14:37:19Z", "type": "commit"}, {"oid": "60ae2b97d8164b482aad009059347e489a6d52ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60ae2b97d8164b482aad009059347e489a6d52ec", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-11-16T05:14:50Z", "type": "commit"}, {"oid": "1459a2dc306ebe9497041c6bfc19ff300c495ff9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1459a2dc306ebe9497041c6bfc19ff300c495ff9", "message": "Add annotation support to tuple variable", "committedDate": "2020-11-16T07:47:20Z", "type": "commit"}, {"oid": "610171f290ff434cad9205e91b1d6eda6deffa82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/610171f290ff434cad9205e91b1d6eda6deffa82", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-11-16T08:53:37Z", "type": "commit"}, {"oid": "50cd3d16d273fc36e36c93e571f5d32350bcb0c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50cd3d16d273fc36e36c93e571f5d32350bcb0c9", "message": "resolve conflicts", "committedDate": "2020-11-17T09:22:53Z", "type": "commit"}, {"oid": "16af6175d96e657067994efa0005c17652b120fe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16af6175d96e657067994efa0005c17652b120fe", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into module-tuple-error-possition-issue", "committedDate": "2020-11-18T07:38:23Z", "type": "commit"}, {"oid": "3e2c37303f4d25e4c087faf04d413fc6b85f9103", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e2c37303f4d25e4c087faf04d413fc6b85f9103", "message": "Visit members in tuple var at the symbol enter", "committedDate": "2020-11-18T11:50:09Z", "type": "commit"}, {"oid": "9b1c421c1bc67b429c7923e41b21efba58d1d9eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b1c421c1bc67b429c7923e41b21efba58d1d9eb", "message": "Fix invalid error position for redeclared symbol", "committedDate": "2020-11-18T13:10:43Z", "type": "commit"}, {"oid": "192daced5d4adc013119401507358dd2b866a703", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/192daced5d4adc013119401507358dd2b866a703", "message": "Fix checkstyle", "committedDate": "2020-11-18T14:15:46Z", "type": "commit"}, {"oid": "1a4e65fb56e568d96dbb78e58d07d6e64bfb79b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a4e65fb56e568d96dbb78e58d07d6e64bfb79b5", "message": "Resolve conflicts", "committedDate": "2020-11-20T07:35:44Z", "type": "commit"}, {"oid": "aa6307d0a15d46349ccfd20aedc2ad54dd4e0fe4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa6307d0a15d46349ccfd20aedc2ad54dd4e0fe4", "message": "Remove commented line", "committedDate": "2020-11-20T07:38:00Z", "type": "commit"}, {"oid": "2b5cee7e1b8f78e999527f7b99e885d1f836f0be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b5cee7e1b8f78e999527f7b99e885d1f836f0be", "message": "Remove extra line", "committedDate": "2020-11-20T07:43:08Z", "type": "commit"}, {"oid": "30effb5004f83fac833ae8a13e07bcb8a61b3357", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30effb5004f83fac833ae8a13e07bcb8a61b3357", "message": "Remove depreciated usages", "committedDate": "2020-11-20T08:25:24Z", "type": "commit"}, {"oid": "2e500adac17372cb7301a0684fdabeb457d74510", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e500adac17372cb7301a0684fdabeb457d74510", "message": "Resolve conflicts", "committedDate": "2020-11-20T11:09:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzEwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528143102", "bodyText": "Do we need this comment?", "author": "MaryamZi", "createdAt": "2020-11-21T08:00:08Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -724,13 +725,25 @@ public void visit(BLangPackage pkgNode) {\n                 initFnBody.stmts.add(constInit);\n             }\n         }\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            BLangAssignment assignment = createAssignmentStmt(globalVar);\n-            if (assignment.expr != null) {\n-                initFnBody.stmts.add(assignment);\n+            // This will convert complex variables to simple variable\n+            if (globalVar.getKind() == NodeKind.TUPLE_VARIABLE) {\n+                //Tuple variable will be desugared into block statement node", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MDk5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528470990", "bodyText": "It's better for readability right", "author": "rdulmina", "createdAt": "2020-11-23T04:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MjE1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528472151", "bodyText": "IMO it's kinda obvious when we look at what's done in the next few lines.", "author": "MaryamZi", "createdAt": "2020-11-23T04:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4Njk5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528486999", "bodyText": "Removed", "author": "rdulmina", "createdAt": "2020-11-23T06:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzM0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528143344", "bodyText": "Shall we extract this into a separate method?", "author": "MaryamZi", "createdAt": "2020-11-21T08:00:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -724,13 +725,25 @@ public void visit(BLangPackage pkgNode) {\n                 initFnBody.stmts.add(constInit);\n             }\n         }\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            BLangAssignment assignment = createAssignmentStmt(globalVar);\n-            if (assignment.expr != null) {\n-                initFnBody.stmts.add(assignment);\n+            // This will convert complex variables to simple variable\n+            if (globalVar.getKind() == NodeKind.TUPLE_VARIABLE) {\n+                //Tuple variable will be desugared into block statement node\n+                BLangNode blockStatementNode = rewrite(globalVar, env);\n+                // Add each desugared simple variable to global variables\n+                ((BLangBlockStmt) blockStatementNode).stmts.forEach(bLangStatement -> {\n+                    BLangSimpleVariableDef simpleVarDef1 = (BLangSimpleVariableDef) bLangStatement;\n+                    addToInitFunction(simpleVarDef1.var, initFnBody);\n+                    desugaredGlobalVarList.add(rewrite(simpleVarDef1.var, env));\n+                });\n+            } else {\n+                addToInitFunction((BLangSimpleVariable) globalVar, initFnBody);\n+                desugaredGlobalVarList.add(rewrite(globalVar, env));\n             }", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MTMwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528471302", "bodyText": "Yes, I moved this into a separate method in my next PR (error and mapping bp support). Let's keep it like this for now", "author": "rdulmina", "createdAt": "2020-11-23T04:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzYzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528143634", "bodyText": "Let's rename this too.", "author": "MaryamZi", "createdAt": "2020-11-21T08:00:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -724,13 +725,25 @@ public void visit(BLangPackage pkgNode) {\n                 initFnBody.stmts.add(constInit);\n             }\n         }\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            BLangAssignment assignment = createAssignmentStmt(globalVar);\n-            if (assignment.expr != null) {\n-                initFnBody.stmts.add(assignment);\n+            // This will convert complex variables to simple variable\n+            if (globalVar.getKind() == NodeKind.TUPLE_VARIABLE) {\n+                //Tuple variable will be desugared into block statement node\n+                BLangNode blockStatementNode = rewrite(globalVar, env);\n+                // Add each desugared simple variable to global variables\n+                ((BLangBlockStmt) blockStatementNode).stmts.forEach(bLangStatement -> {\n+                    BLangSimpleVariableDef simpleVarDef1 = (BLangSimpleVariableDef) bLangStatement;", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MjIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528472213", "bodyText": "Okay", "author": "rdulmina", "createdAt": "2020-11-23T04:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0MzYzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NDkzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528144930", "bodyText": "Shall we check if the expr is null and return early instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (globalVar.expr != null) {\n          \n          \n            \n                        BLangAssignment assignment = createAssignmentStmt(globalVar);\n          \n          \n            \n                        initFnBody.stmts.add(assignment);\n          \n          \n            \n                    }\n          \n          \n            \n                    if (globalVar.expr == null) {\n          \n          \n            \n                            return;\n          \n          \n            \n                    }\n          \n          \n            \n                    BLangAssignment assignment = createAssignmentStmt(globalVar);\n          \n          \n            \n                    initFnBody.stmts.add(assignment);", "author": "MaryamZi", "createdAt": "2020-11-21T08:02:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -772,6 +784,14 @@ public void visit(BLangPackage pkgNode) {\n         result = pkgNode;\n     }\n \n+    // Add global variables with default values to init function\n+    private void addToInitFunction(BLangSimpleVariable globalVar, BLangBlockFunctionBody initFnBody) {\n+        if (globalVar.expr != null) {\n+            BLangAssignment assignment = createAssignmentStmt(globalVar);\n+            initFnBody.stmts.add(assignment);\n+        }", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MTkxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528471910", "bodyText": "Okay", "author": "rdulmina", "createdAt": "2020-11-23T04:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NDkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NTI1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528145252", "bodyText": "This method is also self-explanatory right? Do we need the comment?", "author": "MaryamZi", "createdAt": "2020-11-21T08:03:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -772,6 +784,14 @@ public void visit(BLangPackage pkgNode) {\n         result = pkgNode;\n     }\n \n+    // Add global variables with default values to init function", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MjU1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528472556", "bodyText": "Will remove thanx", "author": "rdulmina", "createdAt": "2020-11-23T04:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NTI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NjUwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528146506", "bodyText": "Shall we revisit the comments and remove the ones that are not required?", "author": "MaryamZi", "createdAt": "2020-11-21T08:05:00Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -559,20 +559,25 @@ public BLangNode transform(ModulePartNode modulePart) {\n \n     @Override\n     public BLangNode transform(ModuleVariableDeclarationNode modVarDeclrNode) {\n+\n         TypedBindingPatternNode typedBindingPattern = modVarDeclrNode.typedBindingPattern();\n+\n         BindingPatternNode bindingPatternNode = typedBindingPattern.bindingPattern();\n+        Optional<io.ballerina.compiler.syntax.tree.ExpressionNode> initializer = modVarDeclrNode.initializer();\n+\n+        //Get target variable", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MzAwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528473009", "bodyText": "Sure", "author": "rdulmina", "createdAt": "2020-11-23T05:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NjUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NzAwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528147006", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    initializeBLangVariable(variable, typedBindingPattern.typeDescriptor(), initializer,\n          \n          \n            \n                            isFinal);\n          \n          \n            \n                    initializeBLangVariable(variable, typedBindingPattern.typeDescriptor(), initializer, isFinal);", "author": "MaryamZi", "createdAt": "2020-11-21T08:05:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -593,13 +597,18 @@ public BLangNode transform(ModuleVariableDeclarationNode modVarDeclrNode) {\n             }\n         }\n \n-        BLangSimpleVariable simpleVar = createSimpleVar(variableName, typedBindingPattern.typeDescriptor(),\n-                modVarDeclrNode.initializer().orElse(null), isFinal, false, null,\n-                getAnnotations(modVarDeclrNode.metadata()));\n-        simpleVar.pos = getPositionWithoutMetadata(modVarDeclrNode);\n-        simpleVar.markdownDocumentationAttachment =\n+        // Initialize module variable\n+        initializeBLangVariable(variable, typedBindingPattern.typeDescriptor(), initializer,\n+                isFinal);", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MzY4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528473680", "bodyText": "Okay", "author": "rdulmina", "createdAt": "2020-11-23T05:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0NzAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0ODIzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528148239", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        analyzeNode(bLangTupleVariable.expr, env);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        bLangTupleVariable.memberVariables.forEach(member -> {\n          \n          \n            \n                            analyzeNode(member, env);\n          \n          \n            \n                        });\n          \n          \n            \n                    }\n          \n          \n            \n                        analyzeNode(bLangTupleVariable.expr, env);\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    bLangTupleVariable.memberVariables.forEach(member -> {\n          \n          \n            \n                            analyzeNode(member, env);\n          \n          \n            \n                    });", "author": "MaryamZi", "createdAt": "2020-11-21T08:07:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -1646,15 +1656,19 @@ public void visit(BLangErrorVarRef varRefExpr) {\n     @Override\n     public void visit(BLangTupleVariable bLangTupleVariable) {\n         analyzeNode(bLangTupleVariable.typeNode, env);\n+        if (bLangTupleVariable.expr != null) {\n+            analyzeNode(bLangTupleVariable.expr, env);\n+        } else {\n+            bLangTupleVariable.memberVariables.forEach(member -> {\n+                analyzeNode(member, env);\n+            });\n+        }", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MzY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528473699", "bodyText": "+1", "author": "rdulmina", "createdAt": "2020-11-23T05:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE0ODIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE1MTQyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528151429", "bodyText": "Shall we write these assertions in ballerina itself?\ne.g., https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview5/tests/jballerina-unit-test/src/test/resources/test-src/types/readonly/test_selectively_immutable_type.bal#L990", "author": "MaryamZi", "createdAt": "2020-11-21T08:11:53Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVariableTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.core.model.values.BBoolean;\n+import org.ballerinalang.core.model.values.BByte;\n+import org.ballerinalang.core.model.values.BFloat;\n+import org.ballerinalang.core.model.values.BInteger;\n+import org.ballerinalang.core.model.values.BValue;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.BAssertUtil.validateError;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+/**\n+ * Class to test module level variable declaration for all binding patterns.\n+ *\n+ * @since 2.0\n+ */\n+public class ModuleVariableTest {\n+\n+    private CompileResult compileResult, compileResultNegative;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/statements/vardeclr/module_tuple_var_decl.bal\");\n+        compileResultNegative = BCompileUtil.compile(\"test-src/statements/vardeclr/module_tuple_var_decl_negetive.bal\");\n+    }\n+\n+    @Test\n+    public void testBasicModuleLevelTupleVarDecl() {\n+\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testBasic\");\n+\n+        int index = 0;\n+        assertTrue(((BBoolean) returns[index++]).booleanValue());", "originalCommit": "2e500adac17372cb7301a0684fdabeb457d74510", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4NzI4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r528487288", "bodyText": "Done", "author": "rdulmina", "createdAt": "2020-11-23T06:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE1MTQyOQ=="}], "type": "inlineReview"}, {"oid": "78819ebcefc30f922df0a380692893dd52550571", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78819ebcefc30f922df0a380692893dd52550571", "message": "Resolve conflicts", "committedDate": "2020-11-23T04:28:03Z", "type": "commit"}, {"oid": "d100d39ee8b396739ff605503c6614abb5a5079c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d100d39ee8b396739ff605503c6614abb5a5079c", "message": "Review suggestions", "committedDate": "2020-11-23T06:09:22Z", "type": "commit"}, {"oid": "70bb30e817049f0e49cea414b2f8a3fdd4225d2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70bb30e817049f0e49cea414b2f8a3fdd4225d2d", "message": "Remove unwanted comment", "committedDate": "2020-11-23T06:11:55Z", "type": "commit"}, {"oid": "04f33640646c402085af887e6ad7a3d2490ec536", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04f33640646c402085af887e6ad7a3d2490ec536", "message": "Resolve conflicts", "committedDate": "2020-11-24T06:56:26Z", "type": "commit"}, {"oid": "5e1efd9d98400093e787b0b877cb159e1fb587e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e1efd9d98400093e787b0b877cb159e1fb587e6", "message": "Move flag marking to initializeBLangVariable", "committedDate": "2020-11-24T07:56:33Z", "type": "commit"}, {"oid": "1df6d630fda66ad0c1588d438f6c88eb84658cfd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1df6d630fda66ad0c1588d438f6c88eb84658cfd", "message": "Validate isolated qualifier for complex variables", "committedDate": "2020-11-24T09:57:40Z", "type": "commit"}, {"oid": "e84ccdef99784c39f349a26af2740b745b5c4c7b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e84ccdef99784c39f349a26af2740b745b5c4c7b", "message": "Resolve conflicts", "committedDate": "2020-11-24T10:00:56Z", "type": "commit"}, {"oid": "1ee7b34b4cd488d8ece45d00e174e9a9c993f8be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ee7b34b4cd488d8ece45d00e174e9a9c993f8be", "message": "Update BIRGen", "committedDate": "2020-11-24T10:08:17Z", "type": "commit"}, {"oid": "e45c4dc157d46cf04cd65579b34152d6631595ff", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e45c4dc157d46cf04cd65579b34152d6631595ff", "message": "Add rest binding pattern support", "committedDate": "2020-11-27T06:10:37Z", "type": "commit"}, {"oid": "32560c701223ace13558337a5da2cc17488a887b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32560c701223ace13558337a5da2cc17488a887b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-11-27T06:11:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3NzEwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531377102", "bodyText": "Shall we extract this logic out to a method?", "author": "MaryamZi", "createdAt": "2020-11-27T04:30:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -724,28 +725,38 @@ public void visit(BLangPackage pkgNode) {\n                 initFnBody.stmts.add(constInit);\n             }\n         }\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            long globalVarFlags = globalVar.symbol.flags;\n-            if (globalVar.expr != null || Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {\n-\n+            // This will convert complex variables to simple variable\n+            if (globalVar.getKind() == NodeKind.TUPLE_VARIABLE) {\n+                BLangNode blockStatementNode = rewrite(globalVar, env);\n+                // Add each desugared simple variable to global variables\n+                ((BLangBlockStmt) blockStatementNode).stmts.forEach(bLangStatement -> {\n+                    BLangSimpleVariableDef simpleVarDef = (BLangSimpleVariableDef) bLangStatement;\n+                    addToInitFunction(simpleVarDef.var, initFnBody);\n+                    desugaredGlobalVarList.add(rewrite(simpleVarDef.var, env));\n+                });\n+            } else {\n+                long globalVarFlags = globalVar.symbol.flags;\n+                BLangSimpleVariable simpleGlobalVar = (BLangSimpleVariable) globalVar;\n                 if (Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {\n                     if (Symbols.isFlagOn(globalVarFlags, Flags.REQUIRED)) {\n                         // If it is required configuration get directly\n-                        List<BLangExpression> args = getConfigurableLangLibInvocationParam(globalVar);\n+                        List<BLangExpression> args = getConfigurableLangLibInvocationParam(simpleGlobalVar);\n                         BLangInvocation getValueInvocation = createLangLibInvocationNode(\"getConfigurableValue\",\n-                                args, symTable.anydataType, globalVar.pos);\n-                        globalVar.expr = getValueInvocation;\n+                                args, symTable.anydataType, simpleGlobalVar.pos);\n+                        simpleGlobalVar.expr = getValueInvocation;\n                     } else {\n                         // If it is optional configuration create if else\n-                        globalVar.expr = createIfElseFromConfigurable(globalVar);\n+                        simpleGlobalVar.expr  = createIfElseFromConfigurable(simpleGlobalVar);\n                     }\n                 }\n-\n-                BLangAssignment assignment = createAssignmentStmt(globalVar);\n-                initFnBody.stmts.add(assignment);\n+                addToInitFunction(simpleGlobalVar, initFnBody);\n+                desugaredGlobalVarList.add(rewrite(simpleGlobalVar, env));\n             }\n         });\n+        pkgNode.globalVars = desugaredGlobalVarList;", "originalCommit": "1ee7b34b4cd488d8ece45d00e174e9a9c993f8be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNzgxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531427811", "bodyText": "Okay", "author": "rdulmina", "createdAt": "2020-11-27T07:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3NzEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3NzEzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531377131", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // This will convert complex variables to simple variable\n          \n          \n            \n                        // This will convert complex variables to simple variables.", "author": "MaryamZi", "createdAt": "2020-11-27T04:31:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -724,28 +725,38 @@ public void visit(BLangPackage pkgNode) {\n                 initFnBody.stmts.add(constInit);\n             }\n         }\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            long globalVarFlags = globalVar.symbol.flags;\n-            if (globalVar.expr != null || Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {\n-\n+            // This will convert complex variables to simple variable", "originalCommit": "1ee7b34b4cd488d8ece45d00e174e9a9c993f8be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzMTI3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531431274", "bodyText": "Can we add some tests for global variables with list binding patterns for\n* annotations\n  \n  * annotation on such a global variable\n  * using such a global variable in an annotation value\n\n* global variable reordering/forward referencing - e.g., referring to other global variable(s) defined after the particular variable, in the initial value expression\n\n* initialization in the module `init` function without specifying an initialization expression\n\n* usage with `var`\n\n* taint analysis. e.g., a test that asserts that the following results in an error\n\n[int, int] [a, b] = [1, 2];\n\npublic function main(int j) {\n    a = j;\n}\n\n\nWill add", "author": "rdulmina", "createdAt": "2020-11-27T07:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3NzEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2MzgxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r532563815", "bodyText": "added test cases except no init var decl. Please note", "author": "rdulmina", "createdAt": "2020-11-30T12:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3NzEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5Nzk0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531397945", "bodyText": "I think we can convert the forEach to a simple for loop and use continue at the end of the if block, and remove this else block and move the logic out.\nSomething like\n        for (BLangVariable globalVar : pkgNode.globalVars) {\n            if (globalVar.getKind() == NodeKind.TUPLE_VARIABLE) {\n                // ....   \n                continue;\n            }\n            \n            long globalVarFlags = globalVar.symbol.flags;\n            // ...\n        }", "author": "MaryamZi", "createdAt": "2020-11-27T06:03:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -724,28 +725,38 @@ public void visit(BLangPackage pkgNode) {\n                 initFnBody.stmts.add(constInit);\n             }\n         }\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            long globalVarFlags = globalVar.symbol.flags;\n-            if (globalVar.expr != null || Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {\n-\n+            // This will convert complex variables to simple variable\n+            if (globalVar.getKind() == NodeKind.TUPLE_VARIABLE) {\n+                BLangNode blockStatementNode = rewrite(globalVar, env);\n+                // Add each desugared simple variable to global variables\n+                ((BLangBlockStmt) blockStatementNode).stmts.forEach(bLangStatement -> {\n+                    BLangSimpleVariableDef simpleVarDef = (BLangSimpleVariableDef) bLangStatement;\n+                    addToInitFunction(simpleVarDef.var, initFnBody);\n+                    desugaredGlobalVarList.add(rewrite(simpleVarDef.var, env));\n+                });\n+            } else {", "originalCommit": "1ee7b34b4cd488d8ece45d00e174e9a9c993f8be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzMzc5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531433792", "bodyText": "Noted", "author": "rdulmina", "createdAt": "2020-11-27T07:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5Nzk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5ODEyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531398121", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    simpleGlobalVar.expr  = createIfElseFromConfigurable(simpleGlobalVar);\n          \n          \n            \n                                    simpleGlobalVar.expr = createIfElseFromConfigurable(simpleGlobalVar);", "author": "MaryamZi", "createdAt": "2020-11-27T06:03:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -724,28 +725,38 @@ public void visit(BLangPackage pkgNode) {\n                 initFnBody.stmts.add(constInit);\n             }\n         }\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            long globalVarFlags = globalVar.symbol.flags;\n-            if (globalVar.expr != null || Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {\n-\n+            // This will convert complex variables to simple variable\n+            if (globalVar.getKind() == NodeKind.TUPLE_VARIABLE) {\n+                BLangNode blockStatementNode = rewrite(globalVar, env);\n+                // Add each desugared simple variable to global variables\n+                ((BLangBlockStmt) blockStatementNode).stmts.forEach(bLangStatement -> {\n+                    BLangSimpleVariableDef simpleVarDef = (BLangSimpleVariableDef) bLangStatement;\n+                    addToInitFunction(simpleVarDef.var, initFnBody);\n+                    desugaredGlobalVarList.add(rewrite(simpleVarDef.var, env));\n+                });\n+            } else {\n+                long globalVarFlags = globalVar.symbol.flags;\n+                BLangSimpleVariable simpleGlobalVar = (BLangSimpleVariable) globalVar;\n                 if (Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {\n                     if (Symbols.isFlagOn(globalVarFlags, Flags.REQUIRED)) {\n                         // If it is required configuration get directly\n-                        List<BLangExpression> args = getConfigurableLangLibInvocationParam(globalVar);\n+                        List<BLangExpression> args = getConfigurableLangLibInvocationParam(simpleGlobalVar);\n                         BLangInvocation getValueInvocation = createLangLibInvocationNode(\"getConfigurableValue\",\n-                                args, symTable.anydataType, globalVar.pos);\n-                        globalVar.expr = getValueInvocation;\n+                                args, symTable.anydataType, simpleGlobalVar.pos);\n+                        simpleGlobalVar.expr = getValueInvocation;\n                     } else {\n                         // If it is optional configuration create if else\n-                        globalVar.expr = createIfElseFromConfigurable(globalVar);\n+                        simpleGlobalVar.expr  = createIfElseFromConfigurable(simpleGlobalVar);", "originalCommit": "1ee7b34b4cd488d8ece45d00e174e9a9c993f8be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzgwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531437807", "bodyText": "noted", "author": "rdulmina", "createdAt": "2020-11-27T08:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5ODEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMjE4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531402185", "bodyText": "With this we are changing the order in which different constructs are desugared, right? Hope this wouldn't cause issues in serviceDesugar, annotationDesugar, etc.\nFor example, in the annotation desugar we populate a global map variable. Wonder if it still gets rewritten after this change. Can you try several different scenarios and validate?", "author": "MaryamZi", "createdAt": "2020-11-27T06:19:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -760,7 +780,6 @@ public void visit(BLangPackage pkgNode) {\n         pkgNode.typeDefinitions = rewrite(pkgNode.typeDefinitions, env);\n         pkgNode.xmlnsList = rewrite(pkgNode.xmlnsList, env);\n         pkgNode.constants = rewrite(pkgNode.constants, env);\n-        pkgNode.globalVars = rewrite(pkgNode.globalVars, env);", "originalCommit": "32560c701223ace13558337a5da2cc17488a887b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNjcyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531436723", "bodyText": "We can move global var desugar logic to here if so. Should we move?", "author": "rdulmina", "createdAt": "2020-11-27T08:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMjE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNDgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543114827", "bodyText": "Yeah, I think it's better to maintain the previous order. Or the desugaring here can result in unexpected results in these phases.", "author": "MaryamZi", "createdAt": "2020-12-15T07:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMjE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMjYzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531402631", "bodyText": "We can return early and remove the else block.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        result = blockStmt;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);\n          \n          \n            \n                        result = rewrite(blockStmt, env);\n          \n          \n            \n                    }\n          \n          \n            \n                        result = blockStmt;\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);\n          \n          \n            \n                    result = rewrite(blockStmt, env);", "author": "MaryamZi", "createdAt": "2020-11-27T06:21:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1275,10 +1305,19 @@ public void visit(BLangTupleVariable varNode) {\n \n         // Create the variable definition statements using the root block stmt created\n         createVarDefStmts(varNode, blockStmt, tuple.symbol, null);\n-        createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);\n \n-        // Finally rewrite the populated block statement\n-        result = rewrite(blockStmt, env);\n+        if (((this.env.scope.owner.tag & SymTag.PACKAGE) == SymTag.PACKAGE)) {\n+            // Rest field def stmt virtual variables will be added to init function body, hence change the env\n+            SymbolEnv previousEnv = this.env;\n+            this.env = this.initFunctionEnv;\n+            createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);\n+            this.env = previousEnv;\n+            // If it is a global variable don't rewrite now, will be rewritten later\n+            result = blockStmt;\n+        } else {\n+            createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);\n+            result = rewrite(blockStmt, env);\n+        }", "originalCommit": "32560c701223ace13558337a5da2cc17488a887b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzc1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531437755", "bodyText": "+1", "author": "rdulmina", "createdAt": "2020-11-27T08:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMjYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMzcyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531403723", "bodyText": "Shall we directly call modVarDeclrNode.initializer() in L592 instead? We don't seem to be using this variable elsewhere.", "author": "MaryamZi", "createdAt": "2020-11-27T06:25:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -559,20 +559,24 @@ public BLangNode transform(ModulePartNode modulePart) {\n \n     @Override\n     public BLangNode transform(ModuleVariableDeclarationNode modVarDeclrNode) {\n+\n         TypedBindingPatternNode typedBindingPattern = modVarDeclrNode.typedBindingPattern();\n+\n         BindingPatternNode bindingPatternNode = typedBindingPattern.bindingPattern();\n+        Optional<io.ballerina.compiler.syntax.tree.ExpressionNode> initializer = modVarDeclrNode.initializer();", "originalCommit": "32560c701223ace13558337a5da2cc17488a887b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzODcxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531438717", "bodyText": "+1", "author": "rdulmina", "createdAt": "2020-11-27T08:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNDIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531404227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (varNode.flagSet.contains(Flag.ISOLATED)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return varNode.flagSet.contains(Flag.ISOLATED);", "author": "MaryamZi", "createdAt": "2020-11-27T06:27:22Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -3502,4 +3525,11 @@ private boolean isConfigurable(BLangVariable varNode) {\n         }\n         return false;\n     }\n+\n+    private boolean isIsolated(BLangVariable varNode) {\n+        if (varNode.flagSet.contains(Flag.ISOLATED)) {\n+            return true;\n+        }\n+        return false;", "originalCommit": "32560c701223ace13558337a5da2cc17488a887b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzOTczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531439736", "bodyText": "Thanx", "author": "rdulmina", "createdAt": "2020-11-27T08:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNDIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNDQxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531404410", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              only simple variables are allowed to be isolated\n          \n          \n            \n              only a simple variable can be marked as ''isolated''", "author": "MaryamZi", "createdAt": "2020-11-27T06:28:06Z", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1599,5 +1599,8 @@ error.invalid.usage.of.multiple.restricted.vars.in.lock=\\\n error.invalid.isolated.qualifier.on.module.no.init.var.decl=\\\n   an uninitialized module variable declaration cannot be marked as ''isolated''\n \n+error.only.simple.variables.are.allowed.to.be.isolated=\\\n+  only simple variables are allowed to be isolated", "originalCommit": "32560c701223ace13558337a5da2cc17488a887b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNDQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531404488", "bodyText": "Let's update the error code accordingly.", "author": "MaryamZi", "createdAt": "2020-11-27T06:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNDQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MDY4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r531440687", "bodyText": "Noted", "author": "rdulmina", "createdAt": "2020-11-27T08:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNDQxMA=="}], "type": "inlineReview"}, {"oid": "66e34b451bd55622615b4c852c5595206157982a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66e34b451bd55622615b4c852c5595206157982a", "message": "Use separate method to desugar global variables", "committedDate": "2020-11-27T07:36:30Z", "type": "commit"}, {"oid": "34e6b009708d282e03ff2d69bd48bc9fe9202bda", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34e6b009708d282e03ff2d69bd48bc9fe9202bda", "message": "Add review suggestions", "committedDate": "2020-11-27T09:07:12Z", "type": "commit"}, {"oid": "4e3d3db3dd89d0ce19e05fe93343abc2957c0e76", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e3d3db3dd89d0ce19e05fe93343abc2957c0e76", "message": "Fix issue in tuple variable declared with 'var'\nGiving redeclared symbol error for member variables though they are not redeclared symbols", "committedDate": "2020-11-28T07:35:12Z", "type": "commit"}, {"oid": "6e9f1094afbff4c62ac020d5dd37f96450c68488", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e9f1094afbff4c62ac020d5dd37f96450c68488", "message": "Suggested test cases", "committedDate": "2020-11-30T12:27:31Z", "type": "commit"}, {"oid": "51eda535ae21fcb893077f8a31056a022ad3cfe0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51eda535ae21fcb893077f8a31056a022ad3cfe0", "message": "Fix checkstyle", "committedDate": "2020-11-30T12:36:45Z", "type": "commit"}, {"oid": "66b6f5f73234581db8373ab2e1ead1dcf0622a70", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66b6f5f73234581db8373ab2e1ead1dcf0622a70", "message": "Ignore compiler plugin runner for tuple variable", "committedDate": "2020-12-01T04:58:49Z", "type": "commit"}, {"oid": "6937304ef8f698d4e44f6ebbbff18357aec366e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6937304ef8f698d4e44f6ebbbff18357aec366e2", "message": "Remove unused imports", "committedDate": "2020-12-01T05:02:54Z", "type": "commit"}, {"oid": "2f0014653fed8d7fac446949ef168cf9be8a6877", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f0014653fed8d7fac446949ef168cf9be8a6877", "message": "Fix compilation error", "committedDate": "2020-12-01T06:04:04Z", "type": "commit"}, {"oid": "b942f7d21155767a8e07a8d961d8dfc4698bffa3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b942f7d21155767a8e07a8d961d8dfc4698bffa3", "message": "Resolve conflicts", "committedDate": "2020-12-04T04:03:09Z", "type": "commit"}, {"oid": "d085e9b70eaa12575ed2c5326ececf624c1aaa7e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d085e9b70eaa12575ed2c5326ececf624c1aaa7e", "message": "New symbol for complex variables", "committedDate": "2020-12-09T05:51:56Z", "type": "commit"}, {"oid": "454a6632c5f082bb243be55a51203ece3f0a74e8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/454a6632c5f082bb243be55a51203ece3f0a74e8", "message": "Handle tuple issues in tuple variable forward referencing\nMove checkTypeAndVarCountConsistency method to symbol enter to symbol enter each tuple member with tye resolved type at the symbol enter", "committedDate": "2020-12-09T05:54:06Z", "type": "commit"}, {"oid": "f3d389cb1eb4d05a6bf2166a2bcf22854c298127", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3d389cb1eb4d05a6bf2166a2bcf22854c298127", "message": "Variable forward referencing test case", "committedDate": "2020-12-09T05:55:21Z", "type": "commit"}, {"oid": "fb447e04703ebe8638ebf0df68f4a0ebecb32af7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb447e04703ebe8638ebf0df68f4a0ebecb32af7", "message": "Temporary disable failing tests", "committedDate": "2020-12-09T05:56:05Z", "type": "commit"}, {"oid": "47b4d4f8920f635e2a1358631547ee3a356cbad0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47b4d4f8920f635e2a1358631547ee3a356cbad0", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-12-09T05:59:01Z", "type": "commit"}, {"oid": "3b1aab0ba5e39eaccd49e5e4a5904a672ab2cbfd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b1aab0ba5e39eaccd49e5e4a5904a672ab2cbfd", "message": "Fix checkstyle", "committedDate": "2020-12-09T07:14:46Z", "type": "commit"}, {"oid": "237a92538f2392e6b2159676de24ce73d5a6af43", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/237a92538f2392e6b2159676de24ce73d5a6af43", "message": "Annotation attachment test on tuple variable", "committedDate": "2020-12-09T09:15:13Z", "type": "commit"}, {"oid": "8a32fd6460469edb154c5fc1ff20dafe2e018f2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a32fd6460469edb154c5fc1ff20dafe2e018f2b", "message": "Test case for variable declared inside tuple as annotation val", "committedDate": "2020-12-09T09:33:04Z", "type": "commit"}, {"oid": "7fd1ad0f936efeed1f875345a6aef96ceb66597c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7fd1ad0f936efeed1f875345a6aef96ceb66597c", "message": "Remove deprecated flag from tuple var symbol", "committedDate": "2020-12-09T09:51:11Z", "type": "commit"}, {"oid": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "message": "Temporary disable failing langlib tests", "committedDate": "2020-12-09T10:29:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjYzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543112631", "bodyText": "How is this not an issue for other non-rest binding patterns? Rather than specifically checking here, I think we should try and set this initFunctionEnv before getting here.", "author": "MaryamZi", "createdAt": "2020-12-15T07:39:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1286,9 +1326,18 @@ public void visit(BLangTupleVariable varNode) {\n \n         // Create the variable definition statements using the root block stmt created\n         createVarDefStmts(varNode, blockStmt, tuple.symbol, null);\n-        createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);\n \n-        // Finally rewrite the populated block statement\n+        if (((this.env.scope.owner.tag & SymTag.PACKAGE) == SymTag.PACKAGE)) {", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk4NDYxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543984610", "bodyText": "Reason behind this is desugar creates virtual simple variables for rest binding pattern. which will be added only to init function body at the end, So need to set the env to initFunctionEnv. Other variable def statements and virtual variables will be added as global variables, hence no issue.", "author": "rdulmina", "createdAt": "2020-12-16T05:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMzM5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543113391", "bodyText": "If we are going with this approach, IMO we should bring the (BLangSimpleVariable) parentTupleVariable.restVariable != null check out of createRestFieldVarDefStmts and check that first before changing the env unnecessarily.", "author": "MaryamZi", "createdAt": "2020-12-15T07:40:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1286,9 +1326,18 @@ public void visit(BLangTupleVariable varNode) {\n \n         // Create the variable definition statements using the root block stmt created\n         createVarDefStmts(varNode, blockStmt, tuple.symbol, null);\n-        createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);\n \n-        // Finally rewrite the populated block statement\n+        if (((this.env.scope.owner.tag & SymTag.PACKAGE) == SymTag.PACKAGE)) {\n+            // Rest field def stmt virtual variables will be added to init function body, hence change the env\n+            SymbolEnv previousEnv = this.env;\n+            this.env = this.initFunctionEnv;\n+            createRestFieldVarDefStmts(varNode, blockStmt, tuple.symbol);", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMzg2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543113860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            && (varNode.symbol.owner.tag & SymTag.LET) != SymTag.LET &&\n          \n          \n            \n                            (varNode.symbol.owner.tag & SymTag.PACKAGE) != SymTag.PACKAGE) {\n          \n          \n            \n                            && (varNode.symbol.owner.tag & SymTag.LET) != SymTag.LET\n          \n          \n            \n                            && (varNode.symbol.owner.tag & SymTag.PACKAGE) != SymTag.PACKAGE) {\n          \n      \n    \n    \n  \n\nfor consistency.", "author": "MaryamZi", "createdAt": "2020-12-15T07:41:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -1205,7 +1243,8 @@ public void visit(BLangAnnotationAttachment annAttachmentNode) {\n     @Override\n     public void visit(BLangSimpleVariable varNode) {\n         if (((varNode.symbol.owner.tag & SymTag.INVOKABLE) != SymTag.INVOKABLE)\n-                && (varNode.symbol.owner.tag & SymTag.LET) != SymTag.LET) {\n+                && (varNode.symbol.owner.tag & SymTag.LET) != SymTag.LET &&\n+                (varNode.symbol.owner.tag & SymTag.PACKAGE) != SymTag.PACKAGE) {", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNjcyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543116728", "bodyText": "Instead of introducing a global variable shall we check if it possible to move this desugarGlobalVariables and use the env from there?", "author": "MaryamZi", "createdAt": "2020-12-15T07:46:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -606,6 +608,9 @@ private void createPackageInitFunctions(BLangPackage pkgNode, SymbolEnv env) {\n         createInvokableSymbol(pkgNode.startFunction, env);\n         // Create invokable symbol for stop function\n         createInvokableSymbol(pkgNode.stopFunction, env);\n+\n+        this.initFunctionEnv =\n+                SymbolEnv.createFunctionEnv(pkgNode.initFunction, pkgNode.initFunction.symbol.scope, env);", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMDM2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543130360", "bodyText": "Unnecessary new line?", "author": "MaryamZi", "createdAt": "2020-12-15T08:11:08Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -558,20 +558,23 @@ public BLangNode transform(ModulePartNode modulePart) {\n \n     @Override\n     public BLangNode transform(ModuleVariableDeclarationNode modVarDeclrNode) {\n+", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTk0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543131940", "bodyText": "Don't we have to implement this similar to BLangSimpleVariable?", "author": "MaryamZi", "createdAt": "2020-12-15T08:13:59Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CompilerPluginRunner.java", "diffHunk": "@@ -233,6 +234,11 @@ public void visit(BLangSimpleVariable varNode) {\n         notifyProcessors(attachmentList, (processor, list) -> processor.process(varNode, list));\n     }\n \n+    @Override\n+    public void visit(BLangTupleVariable tupleVariableNode) {\n+        /* ignore */", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxNTUwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r544815500", "bodyText": "As discussed with @rdhananjaya architecture of the compiler plugin runner will be changed, so that we don't add new visit methods. However, I will create an issue to track this", "author": "rdulmina", "createdAt": "2020-12-17T05:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxNjQxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r544816415", "bodyText": "#27541", "author": "rdulmina", "createdAt": "2020-12-17T05:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMjIyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543132224", "bodyText": "Is there an issue for this?", "author": "MaryamZi", "createdAt": "2020-12-15T08:14:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -344,10 +344,21 @@ private void analyzeModuleInitFunc(BLangFunction funcNode) {\n         this.currDependentSymbol.pop();\n     }\n \n-    private void checkForUninitializedGlobalVars(List<BLangSimpleVariable> globalVars) {\n-        for (BLangSimpleVariable globalVar : globalVars) {\n-            if (this.uninitializedVars.containsKey(globalVar.symbol)) {\n-                this.dlog.error(globalVar.pos, DiagnosticErrorCode.UNINITIALIZED_VARIABLE, globalVar.name);\n+    private void checkForUninitializedGlobalVars(List<BLangVariable> globalVars) {\n+        // TODO: remove unwanted cases after disallowing uninitialized tuple variables from parser", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwOTIxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r544809211", "bodyText": "Yes, #27259", "author": "rdulmina", "createdAt": "2020-12-17T04:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMjIyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIzOTQ0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543239445", "bodyText": "Can't we make this work with BVarSymbol instead of introducing a new kind of symbol just for this?", "author": "MaryamZi", "createdAt": "2020-12-15T10:49:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BComplexVarSymbol.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.wso2.ballerinalang.compiler.semantics.model.symbols;\n+\n+import io.ballerina.tools.diagnostics.Location;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.model.symbols.SymbolOrigin;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+\n+\n+/**\n+ * This symbol is used as the symbol of variables other than a simple variable.\n+ * <br/>\n+ * The only need of a symbol for complex variables is to record dependencies in the DataFlowAnalyzer.", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxNzcxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r544817719", "bodyText": "We can, but as discussed with @rdhananjaya it would be better to distinguish these symbols with simple variable symbols. because these symbols are only used in DataFlowAnalyzer.", "author": "rdulmina", "createdAt": "2020-12-17T05:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIzOTQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0ODA5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r544948095", "bodyText": "Used the same BVarSymbol for complex variables as well.", "author": "rdulmina", "createdAt": "2020-12-17T09:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIzOTQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0MzIxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543243214", "bodyText": "Why do we need to make the expr null here?", "author": "MaryamZi", "createdAt": "2020-12-15T10:54:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -860,6 +844,60 @@ private BLangStatementExpression createIfElseFromConfigurable(BLangSimpleVariabl\n         return new ArrayList<>(Arrays.asList(orgLiteral, moduleNameLiteral, versionLiteral, configNameLiteral));\n     }\n \n+    private List<BLangVariable> desugarGlobalVariables(List<BLangVariable> globalVars,\n+                                                       BLangBlockFunctionBody initFnBody) {\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n+\n+        globalVars.forEach(globalVar -> {\n+            // This will convert complex variables to simple variables.\n+            switch (globalVar.getKind()) {\n+                case TUPLE_VARIABLE:\n+                    BLangNode blockStatementNode = rewrite(globalVar, env);\n+                    for (BLangStatement bLangStatement : ((BLangBlockStmt) blockStatementNode).stmts) {\n+                        if (bLangStatement.getKind() == NodeKind.FOREACH) {\n+                            initFnBody.stmts.add(rewrite(bLangStatement, this.initFunctionEnv));\n+                            continue;\n+                        }\n+                        BLangSimpleVariableDef simpleVarDef = (BLangSimpleVariableDef) bLangStatement;\n+                        simpleVarDef.var.annAttachments = globalVar.getAnnotationAttachments();\n+                        rewrite(simpleVarDef, env);\n+                        addToInitFunction(simpleVarDef.var, initFnBody);\n+                        desugaredGlobalVarList.add(simpleVarDef.var);\n+                    }\n+                    break;\n+                default:\n+                    long globalVarFlags = globalVar.symbol.flags;\n+                    BLangSimpleVariable simpleGlobalVar = (BLangSimpleVariable) globalVar;\n+                    if (Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {\n+                        if (Symbols.isFlagOn(globalVarFlags, Flags.REQUIRED)) {\n+                            // If it is required configuration get directly\n+                            List<BLangExpression> args = getConfigurableLangLibInvocationParam(simpleGlobalVar);\n+                            BLangInvocation getValueInvocation = createLangLibInvocationNode(\"getConfigurableValue\",\n+                                    args, symTable.anydataType, simpleGlobalVar.pos);\n+                            simpleGlobalVar.expr = getValueInvocation;\n+                        } else {\n+                            // If it is optional configuration create if else\n+                            simpleGlobalVar.expr = createIfElseFromConfigurable(simpleGlobalVar);\n+                        }\n+                    }\n+                    addToInitFunction(simpleGlobalVar, initFnBody);\n+                    desugaredGlobalVarList.add(simpleGlobalVar);\n+                    break;\n+            }\n+        });\n+\n+        return desugaredGlobalVarList;\n+    }\n+\n+    private void addToInitFunction(BLangSimpleVariable globalVar, BLangBlockFunctionBody initFnBody) {\n+        if (globalVar.expr == null) {\n+            return;\n+        }\n+        BLangAssignment assignment = createAssignmentStmt(globalVar);\n+        initFnBody.stmts.add(assignment);\n+        globalVar.expr = null;", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxODgwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r544818808", "bodyText": "Global variables are initialized inside the init method so remove the expression and add it to global variables. This concept was there before this PR I have just moved it here.", "author": "rdulmina", "createdAt": "2020-12-17T05:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0MzIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MjMxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r543252311", "bodyText": "Can't we just define the symbol here and continue to do the actual checkTypeAndVarCountConsistency logic at semantic analysis? I'm not sure if calling types.checkType from symbol enter (L1754) is the best approach.", "author": "MaryamZi", "createdAt": "2020-12-15T11:08:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1613,10 +1619,153 @@ public void visit(BLangSimpleVariable varNode) {\n \n     @Override\n     public void visit(BLangTupleVariable varNode) {\n-        // assign the type to var type node\n+        if (varNode.isDeclaredWithVar) {\n+            // Will be handled in semantic analyzer.\n+            return;\n+        }\n         if (varNode.type == null) {\n             varNode.type = symResolver.resolveTypeNode(varNode.typeNode, env);\n         }\n+\n+        // To support variable forward referencing we need to symbol enter each tuple member with type at SymbolEnter.\n+        if (!(checkTypeAndVarCountConsistency(varNode, env))) {\n+            varNode.type = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    boolean checkTypeAndVarCountConsistency(BLangTupleVariable varNode, SymbolEnv env) {\n+\n+        Name varName = names.fromString(anonymousModelHelper.getNextTupleVarKey(env.enclPkg.packageID));\n+\n+        BComplexVarSymbol varSymbol = createComplexVarSymbol(varNode.flagSet, varNode.type, varName, env, varNode.pos,", "originalCommit": "93d46f819b3c6ba6a3d7a9ff866c4da58f4ed32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgyMDMyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r544820321", "bodyText": "Actually, my previous approach is that. used type as 'other' for member variables at the symbol enter. But it causes errors in variable forward referencing.", "author": "rdulmina", "createdAt": "2020-12-17T05:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MjMxMQ=="}], "type": "inlineReview"}, {"oid": "aefe89d4afd4f32929a99239f6104a5aae254fd4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aefe89d4afd4f32929a99239f6104a5aae254fd4", "message": "Remove tuple variable from top level nodes\nRemove tuple variable from top level nodes after desugar and add desugared simple variables as top level nodes", "committedDate": "2020-12-16T05:26:55Z", "type": "commit"}, {"oid": "e847a1a2f798829291a051c21b761cfa6921c7f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e847a1a2f798829291a051c21b761cfa6921c7f6", "message": "Review suggestions", "committedDate": "2020-12-17T06:31:02Z", "type": "commit"}, {"oid": "d2865ce9881529919b4357e3c26bf230423b92b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2865ce9881529919b4357e3c26bf230423b92b1", "message": "Merge branch 'module-level-typed-bp-support' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2020-12-17T06:34:47Z", "type": "commit"}, {"oid": "89d825d91090e57989462f956aa9ae85978985f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89d825d91090e57989462f956aa9ae85978985f1", "message": "Remove BComplexVarSymbol", "committedDate": "2020-12-17T10:07:03Z", "type": "commit"}, {"oid": "9a6d8aa4c312e95b499146d352064dec4614d9dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a6d8aa4c312e95b499146d352064dec4614d9dc", "message": "Remove initFunctionEnv global variable", "committedDate": "2020-12-17T13:37:12Z", "type": "commit"}, {"oid": "13ff0ab11dad1016cd6a093c622fc21f50ad400f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13ff0ab11dad1016cd6a093c622fc21f50ad400f", "message": "Fix issue in forward referencing\nFix issue in forward referencing tuple variable declared with var", "committedDate": "2020-12-18T16:41:15Z", "type": "commit"}, {"oid": "6d1a8f1960474000368a1c2103025f0be5cabc39", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d1a8f1960474000368a1c2103025f0be5cabc39", "message": "Fix checkstyle", "committedDate": "2020-12-19T09:23:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEwNDQ1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551104455", "bodyText": "Why do we check i == 0 here? Shall we add a comment too?", "author": "MaryamZi", "createdAt": "2021-01-04T03:39:16Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -862,6 +843,64 @@ private BLangStatementExpression createIfElseFromConfigurable(BLangSimpleVariabl\n         return new ArrayList<>(Arrays.asList(orgLiteral, moduleNameLiteral, versionLiteral, configNameLiteral));\n     }\n \n+    private List<BLangVariable> desugarGlobalVariables(BLangPackage pkgNode, BLangBlockFunctionBody initFnBody) {\n+        List<BLangVariable> globalVars = pkgNode.globalVars;\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n+        SymbolEnv initFunctionEnv =\n+                SymbolEnv.createFunctionEnv(pkgNode.initFunction, pkgNode.initFunction.symbol.scope, env);\n+\n+        globalVars.forEach(globalVar -> {\n+            this.env.enclPkg.topLevelNodes.remove(globalVar);\n+            // This will convert complex variables to simple variables.\n+            switch (globalVar.getKind()) {\n+                case TUPLE_VARIABLE:\n+                    BLangNode blockStatementNode = rewrite(globalVar, initFunctionEnv);\n+                    List<BLangStatement> statements = ((BLangBlockStmt) blockStatementNode).stmts;\n+                    for (int i = 0; i < statements.size(); i++) {\n+                        BLangStatement bLangStatement = statements.get(i);\n+                        if (bLangStatement.getKind() == NodeKind.BLOCK || i == 0) {", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEwNzQ0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551107445", "bodyText": "Shall we replace these also with ordinary for loops? Please check the same for other .forEach introductions in this PR.\nSee https://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop", "author": "MaryamZi", "createdAt": "2021-01-04T03:55:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ServiceDesugar.java", "diffHunk": "@@ -88,19 +89,22 @@ private ServiceDesugar(CompilerContext context) {\n         this.transactionDesugar = TransactionDesugar.getInstance(context);\n     }\n \n-    void rewriteListeners(List<BLangSimpleVariable> variables, SymbolEnv env, BLangFunction startFunction,\n+    void rewriteListeners(List<BLangVariable> variables, SymbolEnv env, BLangFunction startFunction,\n                           BLangFunction stopFunction) {\n-        variables.stream().filter(varNode -> Symbols.isFlagOn(varNode.symbol.flags, Flags.LISTENER))\n-                .forEach(varNode -> rewriteListener(varNode, env, startFunction, stopFunction));\n+        variables.forEach(varNode -> {", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEwOTE5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551109196", "bodyText": "Do we need the default case here?", "author": "MaryamZi", "createdAt": "2021-01-04T04:05:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -344,10 +344,21 @@ private void analyzeModuleInitFunc(BLangFunction funcNode) {\n         this.currDependentSymbol.pop();\n     }\n \n-    private void checkForUninitializedGlobalVars(List<BLangSimpleVariable> globalVars) {\n-        for (BLangSimpleVariable globalVar : globalVars) {\n-            if (this.uninitializedVars.containsKey(globalVar.symbol)) {\n-                this.dlog.error(globalVar.pos, DiagnosticErrorCode.UNINITIALIZED_VARIABLE, globalVar.name);\n+    private void checkForUninitializedGlobalVars(List<BLangVariable> globalVars) {\n+        // TODO: remove unwanted cases after disallowing uninitialized tuple variables from parser\n+        for (BLangVariable globalVar : globalVars) {\n+            switch (globalVar.getKind()) {\n+                case VARIABLE:\n+                    if (this.uninitializedVars.containsKey(globalVar.symbol)) {\n+                        this.dlog.error(globalVar.pos, DiagnosticErrorCode.UNINITIALIZED_VARIABLE,\n+                                ((BLangSimpleVariable) globalVar).name);\n+                    }\n+                    break;\n+                case TUPLE_VARIABLE:\n+                    checkForUninitializedGlobalVars(((BLangTupleVariable) globalVar).memberVariables);\n+                    break;\n+                default:\n+                    break;", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEwOTM4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551109383", "bodyText": "We no longer need the var variable, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    analyzeNode(var, env);\n          \n          \n            \n                    analyzeNode(bLangTupleVariableDef.var, env);", "author": "MaryamZi", "createdAt": "2021-01-04T04:06:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -1656,15 +1667,21 @@ public void visit(BLangErrorVarRef varRefExpr) {\n     @Override\n     public void visit(BLangTupleVariable bLangTupleVariable) {\n         analyzeNode(bLangTupleVariable.typeNode, env);\n+        if (bLangTupleVariable.expr != null) {\n+            this.currDependentSymbol.push(bLangTupleVariable.symbol);\n+            analyzeNode(bLangTupleVariable.expr, env);\n+            this.currDependentSymbol.pop();\n+            return;\n+        }\n+        bLangTupleVariable.memberVariables.forEach(member -> {\n+            analyzeNode(member, env);\n+        });\n     }\n \n     @Override\n     public void visit(BLangTupleVariableDef bLangTupleVariableDef) {\n         BLangVariable var = bLangTupleVariableDef.var;\n-        if (var.expr == null) {\n-            addUninitializedVar(var);\n-            return;\n-        }\n+        analyzeNode(var, env);", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExMDc2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551110765", "bodyText": "Shall we extract out two variables\n           BType type = var.symbol.type;\n           BTypeSymbol tSymbol = type.tsymbol;", "author": "MaryamZi", "createdAt": "2021-01-04T04:15:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -405,9 +407,12 @@ private void defineConstructs(BLangPackage pkgNode, SymbolEnv pkgEnv) {\n         pkgNode.globalVars.forEach(var -> defineNode(var, pkgEnv));\n \n         // Update globalVar for endpoints.\n-        pkgNode.globalVars.stream().filter(var -> var.symbol.type.tsymbol != null && Symbols\n-                .isFlagOn(var.symbol.type.tsymbol.flags, Flags.CLIENT)).map(varNode -> varNode.symbol)\n-                .forEach(varSymbol -> varSymbol.tag = SymTag.ENDPOINT);\n+        pkgNode.globalVars.forEach(var -> {\n+           if (var.getKind() == NodeKind.VARIABLE && var.symbol.type.tsymbol != null &&\n+                   Symbols.isFlagOn(var.symbol.type.tsymbol.flags, Flags.CLIENT)) {\n+               var.symbol.tag = SymTag.ENDPOINT;", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExMDg2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551110860", "bodyText": "Shall we replace the stream?", "author": "MaryamZi", "createdAt": "2021-01-04T04:15:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1618,10 +1623,157 @@ public void visit(BLangSimpleVariable varNode) {\n \n     @Override\n     public void visit(BLangTupleVariable varNode) {\n-        // assign the type to var type node\n+        if (varNode.isDeclaredWithVar) {\n+            // Symbol enter with type other\n+            varNode.memberVariables.forEach(member -> {\n+                member.isDeclaredWithVar = true;\n+                defineNode(member, env);\n+            });\n+            return;\n+        }\n         if (varNode.type == null) {\n             varNode.type = symResolver.resolveTypeNode(varNode.typeNode, env);\n         }\n+        // To support variable forward referencing we need to symbol enter each tuple member with type at SymbolEnter.\n+        if (!(checkTypeAndVarCountConsistency(varNode, env))) {\n+            varNode.type = symTable.semanticError;\n+            return;\n+        }\n+    }\n+\n+    boolean checkTypeAndVarCountConsistency(BLangTupleVariable varNode, SymbolEnv env) {\n+        Name varName = names.fromString(anonymousModelHelper.getNextTupleVarKey(env.enclPkg.packageID));\n+        varNode.symbol = defineVarSymbol(varNode.pos, varNode.flagSet, varNode.type, varName, env, varNode.internal);\n+        \n+        return checkTypeAndVarCountConsistency(varNode, null, env);\n+    }\n+\n+    boolean checkTypeAndVarCountConsistency(BLangTupleVariable varNode, BTupleType tupleTypeNode,\n+                                                    SymbolEnv env) {\n+\n+        if (tupleTypeNode == null) {\n+        /*\n+          This switch block will resolve the tuple type of the tuple variable.\n+          For example consider the following - [int, string]|[boolean, float] [a, b] = foo();\n+          Since the varNode type is a union, the types of 'a' and 'b' will be resolved as follows:\n+          Type of 'a' will be (int | boolean) while the type of 'b' will be (string | float).\n+          Consider anydata (a, b) = foo();\n+          Here, the type of 'a'and type of 'b' will be both anydata.\n+         */\n+            switch (varNode.type.tag) {\n+                case TypeTags.UNION:\n+                    Set<BType> unionType = types.expandAndGetMemberTypesRecursive(varNode.type);\n+                    List<BType> possibleTypes = unionType.stream()\n+                            .filter(type -> {", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExMTYyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551111620", "bodyText": "Shall we use a data provider instead? That way we can get the subsequent tests to run even when one of these fails.", "author": "MaryamZi", "createdAt": "2021-01-04T04:19:58Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVariableTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.BAssertUtil.validateError;\n+import static org.testng.Assert.assertEquals;\n+\n+/**\n+ * Class to test module level variable declaration for all binding patterns.\n+ *\n+ * @since 2.0\n+ */\n+public class ModuleVariableTest {\n+\n+    private CompileResult compileResult, compileResultNegative;\n+\n+    @BeforeClass\n+    public void setup() {\n+        compileResult = BCompileUtil.compile(\"test-src/statements/vardeclr/module_tuple_var_decl.bal\");\n+        compileResultNegative = BCompileUtil.compile(\"test-src/statements/vardeclr/module_tuple_var_decl_negetive.bal\");\n+    }\n+\n+    @Test\n+    public void testBasicModuleLevelTupleVarDecl() {\n+        BRunUtil.invoke(compileResult, \"testBasic\");\n+    }\n+    \n+    @Test\n+    public void testComplexModuleLevelTupleVarDecl() {\n+        BRunUtil.invoke(compileResult, \"testTupleBindingWithRecordsAndObjects\");\n+        BRunUtil.invoke(compileResult, \"testTupleBindingPatternWithRestBindingPattern\");\n+        BRunUtil.invoke(compileResult, \"testDeclaredWithVar\");\n+        BRunUtil.invoke(compileResult, \"testTupleVarWithAnnotations\");\n+        BRunUtil.invoke(compileResult, \"testVariableForwardReferencing\");\n+        BRunUtil.invoke(compileResult, \"testVariableDeclaredInTupleAsAnnotationValue\");", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTExMTgzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r551111833", "bodyText": "Shall we add deprecation tests too? Let's check and add tests for each phase where possible, if not already done.", "author": "MaryamZi", "createdAt": "2021-01-04T04:21:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DocumentationAnalyzer.java", "diffHunk": "@@ -151,6 +152,17 @@ public void visit(BLangSimpleVariable varNode) {\n         validateDeprecatedParametersDocumentation(varNode.markdownDocumentationAttachment, varNode.pos);\n     }\n \n+    @Override\n+    public void visit(BLangTupleVariable tupleVariableNode) {\n+        validateNoParameters(tupleVariableNode);\n+        validateReturnParameter(tupleVariableNode, null, false);\n+        validateReferences(tupleVariableNode);\n+        validateDeprecationDocumentation(tupleVariableNode.markdownDocumentationAttachment, false,\n+                tupleVariableNode.pos);\n+        validateDeprecatedParametersDocumentation(tupleVariableNode.markdownDocumentationAttachment,", "originalCommit": "6d1a8f1960474000368a1c2103025f0be5cabc39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "79c43801ef6dae92353d7b7a82f4608ae0ac585f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79c43801ef6dae92353d7b7a82f4608ae0ac585f", "message": "Replace foreach with for loop", "committedDate": "2021-01-04T05:39:34Z", "type": "commit"}, {"oid": "ca21389f0490e8765315255b17e2d6f1d16c1ae5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca21389f0490e8765315255b17e2d6f1d16c1ae5", "message": "Review suggestions", "committedDate": "2021-01-04T06:50:13Z", "type": "commit"}, {"oid": "6f9141dea06925262bf3862be04edb6c7d74b7cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f9141dea06925262bf3862be04edb6c7d74b7cd", "message": "Add suggested test cases", "committedDate": "2021-01-04T10:33:50Z", "type": "commit"}, {"oid": "158ccd7cf39de7e4ed526e030cf2bbc7bb37b60c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/158ccd7cf39de7e4ed526e030cf2bbc7bb37b60c", "message": "Fix checkstyle", "committedDate": "2021-01-04T10:56:16Z", "type": "commit"}, {"oid": "1724bf6282c61d7ac223317db2201e07fb6fea80", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1724bf6282c61d7ac223317db2201e07fb6fea80", "message": "Resolve conflicts", "committedDate": "2021-01-05T04:26:05Z", "type": "commit"}, {"oid": "43d78db9cc7f326253236d9dd71678ddc0d81e46", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43d78db9cc7f326253236d9dd71678ddc0d81e46", "message": "Merge branch 'module-level-typed-bp-support' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2021-01-06T10:16:49Z", "type": "commit"}, {"oid": "5d0440b32a74bdd82712a70129fcf74dfc7d64e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d0440b32a74bdd82712a70129fcf74dfc7d64e3", "message": "Disallow SymbolEnter for ignore member variables", "committedDate": "2021-01-06T11:59:32Z", "type": "commit"}, {"oid": "d2fce30176fadfbae4d3a450887d17c5e6ca45e5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2fce30176fadfbae4d3a450887d17c5e6ca45e5", "message": "Fix issue in rest binding pattern", "committedDate": "2021-01-06T13:47:11Z", "type": "commit"}, {"oid": "19e603ba1daabc2a973852d60bd6737b8a25204e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/19e603ba1daabc2a973852d60bd6737b8a25204e", "message": "Merge branch 'module-level-typed-bp-support' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2021-01-12T04:06:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NzI0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555487249", "bodyText": "This isn't quite clear to me. Are we trying to say\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    // Rest binding pattern array initialization will be desugared as a block hence add them only\n          \n          \n            \n                                    // to init function body.\n          \n          \n            \n                                    // Rest binding pattern array initialization will be desugared as a block hence add them \n          \n          \n            \n                                    // directly to the init function body.", "author": "MaryamZi", "createdAt": "2021-01-12T03:27:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -860,6 +841,67 @@ private BLangStatementExpression createIfElseFromConfigurable(BLangSimpleVariabl\n         return new ArrayList<>(Arrays.asList(orgLiteral, moduleNameLiteral, versionLiteral, configNameLiteral));\n     }\n \n+    private List<BLangVariable> desugarGlobalVariables(BLangPackage pkgNode, BLangBlockFunctionBody initFnBody) {\n+        List<BLangVariable> globalVars = pkgNode.globalVars;\n+        List<BLangVariable> desugaredGlobalVarList = new ArrayList<>();\n+        SymbolEnv initFunctionEnv =\n+                SymbolEnv.createFunctionEnv(pkgNode.initFunction, pkgNode.initFunction.symbol.scope, env);\n+\n+        globalVars.forEach(globalVar -> {\n+            this.env.enclPkg.topLevelNodes.remove(globalVar);\n+            // This will convert complex variables to simple variables.\n+            switch (globalVar.getKind()) {\n+                case TUPLE_VARIABLE:\n+                    BLangNode blockStatementNode = rewrite(globalVar, initFunctionEnv);\n+                    List<BLangStatement> statements = ((BLangBlockStmt) blockStatementNode).stmts;\n+                    for (int i = 0; i < statements.size(); i++) {\n+                        BLangStatement bLangStatement = statements.get(i);\n+                        // First statement is the virtual array created for the init expression.\n+                        // Rest binding pattern array initialization will be desugared as a block hence add them only\n+                        // to init function body.", "originalCommit": "d2fce30176fadfbae4d3a450887d17c5e6ca45e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNDAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555504026", "bodyText": "Even the following wouldn't work, right?\n# Docs.\n# + a - docs for a\n# + b - docs for b\n[int, float] [a, b] = getTuple();\nIMO, we need to have a way to document the individual variables. Shall we initiate a discussion regarding this?", "author": "MaryamZi", "createdAt": "2021-01-12T04:17:30Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/documentation/markdown_negative.bal", "diffHunk": "@@ -110,3 +110,8 @@ final string testConsts = \"TestConstantDocumentation\";\n public function load(string filePath) {\n \n }\n+\n+# + a - parameter a", "originalCommit": "19e603ba1daabc2a973852d60bd6737b8a25204e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUxNTg3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555515873", "bodyText": "+1", "author": "rdulmina", "createdAt": "2021-01-12T05:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNDAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNDA4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555504088", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [int ,float, string] [a, b, c] = [1, 2.5, \"Mac\"];\n          \n          \n            \n            [int, float, string] [a, b, c] = [1, 2.5, \"Mac\"];", "author": "MaryamZi", "createdAt": "2021-01-12T04:17:42Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/documentation/markdown_negative.bal", "diffHunk": "@@ -110,3 +110,8 @@ final string testConsts = \"TestConstantDocumentation\";\n public function load(string filePath) {\n \n }\n+\n+# + a - parameter a\n+# + return - `float` return parameter is float\n+# # parameter `invalidParameter`\n+[int ,float, string] [a, b, c] = [1, 2.5, \"Mac\"];", "originalCommit": "19e603ba1daabc2a973852d60bd6737b8a25204e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNDMzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555504336", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [int ,float] [a, b] = [1, 2.5];\n          \n          \n            \n            [int, float] [a ,b] = [1, 2.5];\n          \n      \n    \n    \n  \n\nPlease check wherever applicable.", "author": "MaryamZi", "createdAt": "2021-01-12T04:18:45Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl.bal", "diffHunk": "@@ -0,0 +1,155 @@\n+//  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+//  WSO2 Inc. licenses this file to you under the Apache License,\n+//  Version 2.0 (the \"License\"); you may not use this file except\n+//  in compliance with the License.\n+//  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Test module level list binding pattern\n+[int ,float] [a, b] = [1, 2.5];", "originalCommit": "19e603ba1daabc2a973852d60bd6737b8a25204e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNDM4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555504389", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [int, byte] [d,e] = [1,3];\n          \n          \n            \n            [int, byte] [d, e] = [1, 3];", "author": "MaryamZi", "createdAt": "2021-01-12T04:19:00Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl_annotation_negetive.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+//  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+//  WSO2 Inc. licenses this file to you under the Apache License,\n+//  Version 2.0 (the \"License\"); you may not use this file except\n+//  in compliance with the License.\n+//  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// deprecated annotation not allowed\n+# # Deprecated\n+# This tuple is deprecated.\n+@deprecated\n+[int, byte] [d,e] = [1,3];", "originalCommit": "19e603ba1daabc2a973852d60bd6737b8a25204e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUyNjIwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555526207", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [int ,float, string] [a, b, c] = [1, 2.5, \"Mac\"];\n          \n          \n            \n            [int, float, string] [a, b, c] = [1, 2.5, \"Mac\"];", "author": "MaryamZi", "createdAt": "2021-01-12T05:42:40Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl_negetive.bal", "diffHunk": "@@ -0,0 +1,44 @@\n+//  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+//  WSO2 Inc. licenses this file to you under the Apache License,\n+//  Version 2.0 (the \"License\"); you may not use this file except\n+//  in compliance with the License.\n+//  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//Test duplicate module level var declaration inside tuple binding pattern\n+int a = 5;\n+[int ,float, string] [a, b, c] = [1, 2.5, \"Mac\"];", "originalCommit": "336a2042ed281e6019f596f6bc2f9668fb11ccc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUyNjI5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555526292", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [decimal, byte] [l, m] = [n ,o];\n          \n          \n            \n            [decimal, byte] [l, m] = [n, o];", "author": "MaryamZi", "createdAt": "2021-01-12T05:43:04Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module_tuple_var_decl.bal", "diffHunk": "@@ -0,0 +1,153 @@\n+//  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+//  WSO2 Inc. licenses this file to you under the Apache License,\n+//  Version 2.0 (the \"License\"); you may not use this file except\n+//  in compliance with the License.\n+//  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Test module level list binding pattern\n+[int, float] [a, b] = [1, 2.5];\n+[boolean, float, string] [c, d, e] = [true, 2.25, \"Jhone\"];\n+public function testBasic() {\n+    while (d < 3) {\n+        d += 1;\n+    }\n+    assertTrue(c);\n+    assertEquality(3.25, d);\n+    assertEquality(\"Jhone\", e);\n+}\n+\n+// Recursive list binding pattern with objects\n+Foo foo = {name:\"Test\", age:23};\n+Bar bar = {id:34, flag:true};\n+FooObj fooObj = new (\"Fooo\", 3.7, 23);\n+BarObj barObj = new (true, 56);\n+[string, [Foo, [BarObj, FooObj]], [Bar, int]] [a2, [b2, [c2, d2]], [e2, f2]] = [foo.name, [foo, [barObj, fooObj]], [bar, barObj.i]];\n+\n+function testTupleBindingWithRecordsAndObjects() {\n+    assertEquality(\"Test\", a2);\n+    assertEquality(\"Test\", b2.name);\n+    assertEquality(23, b2.age);\n+    assertEquality(34, e2.id);\n+    assertTrue(e2.flag);\n+    assertEquality(\"Fooo\", d2.s);\n+    assertEquality(3.7, d2.f);\n+    assertEquality(23, d2.b);\n+    assertTrue(c2.b);\n+    assertEquality(56, c2.i);\n+    assertEquality(56, f2);\n+}\n+\n+// Test tuple binding pattern with rest binding pattern\n+[int, string...] [Id, ...FullName] = [1002, \"Peter\", \"Parker\"];\n+[int, string...] [Id2, ...FullName2] = [1003, \"Jhone\", \"Anistine\"];\n+function testTupleBindingPatternWithRestBindingPattern() {\n+    assertEquality(1002, Id);\n+    assertEquality(\"Peter\", FullName[0]);\n+    assertEquality(\"Parker\", FullName[1]);\n+    assertEquality(1003, Id2);\n+    assertEquality(\"Jhone\", FullName2[0]);\n+    assertEquality(\"Anistine\", FullName2[1]);\n+}\n+\n+// Tuple variable declared with 'var'\n+[int, string] g = [1, \"\"];\n+var [h, i] = g;\n+function testDeclaredWithVar() {\n+    assertEquality(1, h);\n+    assertEquality(\"\", i);\n+}\n+\n+// Test tuple var declaration with annotations\n+const annotation map<string> annot on source var;\n+\n+@annot {\n+    value: \"annotationValue\"\n+}\n+[int, int] [j, k] = [1, 2];\n+@annot {\n+    value: \"annotationValue\"\n+}\n+var [j1, k1] = g;\n+public function testTupleVarWithAnnotations() {\n+    assertEquality(1, j);\n+    assertEquality(2, k);\n+    assertEquality(1, j1);\n+    assertEquality(\"\", k1);\n+}\n+\n+annotation record {int i;} x on function;\n+@x {\n+    i: h\n+}\n+public function testVariableDeclaredInTupleAsAnnotationValue() {\n+    typedesc<function ()> td = typeof testVariableDeclaredInTupleAsAnnotationValue;\n+    record {int i;}? xVal = td.@x;\n+    assertEquality(<record {int i;}>{i:1}, xVal);\n+}\n+\n+// Test tuple variable reordering/forward referencing\n+[decimal, byte] [l, m] = [n ,o];", "originalCommit": "336a2042ed281e6019f596f6bc2f9668fb11ccc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUyNjU1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555526556", "bodyText": "Have we added tests for the uninitialized local variable scenario fixed here?", "author": "MaryamZi", "createdAt": "2021-01-12T05:43:56Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -1667,15 +1675,20 @@ public void visit(BLangErrorVarRef varRefExpr) {\n     @Override\n     public void visit(BLangTupleVariable bLangTupleVariable) {\n         analyzeNode(bLangTupleVariable.typeNode, env);\n+        if (bLangTupleVariable.expr != null) {", "originalCommit": "336a2042ed281e6019f596f6bc2f9668fb11ccc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f976fa5d3f3a52f755c138bf7f118501ae9142c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f976fa5d3f3a52f755c138bf7f118501ae9142c6", "message": "Add minor reformatting", "committedDate": "2021-01-12T09:54:33Z", "type": "commit"}, {"oid": "4d57058d3aae80057e6a8cb824c68bee93dfdf10", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d57058d3aae80057e6a8cb824c68bee93dfdf10", "message": "Add minor reformatting", "committedDate": "2021-01-12T09:54:33Z", "type": "commit"}, {"oid": "0e9db32f4b955807d911d8b891d17cdd31d76952", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e9db32f4b955807d911d8b891d17cdd31d76952", "message": "Add uninitialized local tuple variable test", "committedDate": "2021-01-12T09:54:33Z", "type": "forcePushed"}, {"oid": "5c011cf72094c3848301cc2f4591edec94fa4296", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c011cf72094c3848301cc2f4591edec94fa4296", "message": "Add uninitialized local tuple variable test", "committedDate": "2021-01-12T10:41:33Z", "type": "commit"}, {"oid": "5c011cf72094c3848301cc2f4591edec94fa4296", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5c011cf72094c3848301cc2f4591edec94fa4296", "message": "Add uninitialized local tuple variable test", "committedDate": "2021-01-12T10:41:33Z", "type": "forcePushed"}, {"oid": "6654c3bf18cf65767b8355bf81d83f6a7daa7d2f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6654c3bf18cf65767b8355bf81d83f6a7daa7d2f", "message": "Merge branch 'module-level-typed-bp-support' of https://github.com/ballerina-platform/ballerina-lang into bug-fix", "committedDate": "2021-01-12T10:44:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY5OTgwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26599#discussion_r555699809", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             // Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             // Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "MaryamZi", "createdAt": "2021-01-12T11:24:02Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/dataflow/analysis/uninitialized_local_tuple_variable.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+ // Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "6654c3bf18cf65767b8355bf81d83f6a7daa7d2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e03207adff0c2b034011d0caf129527073a5201", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e03207adff0c2b034011d0caf129527073a5201", "message": "Update copyright\n\nCo-authored-by: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2021-01-12T11:27:51Z", "type": "commit"}]}