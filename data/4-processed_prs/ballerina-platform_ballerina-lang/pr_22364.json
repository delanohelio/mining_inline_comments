{"pr_number": 22364, "pr_title": "[1.2.2] Fix hasfiller value for BFiniteType created for const literals", "pr_createdAt": "2020-04-01T06:51:54Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODQ4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401548487", "bodyText": "Do we have an issue to track this?", "author": "MaryamZi", "createdAt": "2020-04-01T11:35:21Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array_fill_runtime_test.bal", "diffHunk": "@@ -106,13 +106,28 @@ function testTwoDimensionalSealedArrayFill() {\n     }\n }\n \n+const FOO_ZERO = 0;\n+type FOO_FOUR_THREE  4 | 3;\n+type BarMultiple FOO_ZERO | 1 | FOO_FOUR_THREE;\n+function createMultipleConstLiteralAutoFilledSealedArray() {\n+    BarMultiple a = 1;\n+    BarMultiple[5] sealedArray = [a, a];\n+    sealedArray[3] = a;\n+    assertEqualPanic(1, sealedArray[0]);\n+    assertEqualPanic(1, sealedArray[1]);\n+    // TODO : enable this after fixing - does not get filled", "originalCommit": "bb1490a02551cc272f92c2020674c1d4931eec49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMDQ0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401810444", "bodyText": "create one 22403", "author": "KRVPerera", "createdAt": "2020-04-01T18:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1OTUzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401559536", "bodyText": "Where do we do the check too see if the filler value is part of this type?\ne.g.,\nconst FOO = 1;\ntype Bar FOO | 2;\n\npublic function main() {\n    Bar[2] b = [];\n}\nDoes this result in an error?", "author": "MaryamZi", "createdAt": "2020-04-01T11:57:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2904,14 +2904,35 @@ private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {", "originalCommit": "bb1490a02551cc272f92c2020674c1d4931eec49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxODIxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401718210", "bodyText": "fixed thanks. 41ae360", "author": "KRVPerera", "createdAt": "2020-04-01T15:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1OTUzNg=="}], "type": "inlineReview"}, {"oid": "7d1af4f2e99bddf15bf84616c1a81a4eabcbb7e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d1af4f2e99bddf15bf84616c1a81a4eabcbb7e7", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T17:51:16Z", "type": "forcePushed"}, {"oid": "1bbf9fca29f982086723cf66a2749d9c32b1a088", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bbf9fca29f982086723cf66a2749d9c32b1a088", "message": "Add test cases for union filling\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T17:56:06Z", "type": "commit"}, {"oid": "e0b9db3c67d0ff20085f0cbed83217316c383cf5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0b9db3c67d0ff20085f0cbed83217316c383cf5", "message": "Fix list-expr filler value check for Union\n\nConst Types or singleton values were comparison does not check the type\nbut does a `==` check for BFiniteType.\n\nNow filler value check will specially handle Unions with BFiniteType.\nIts Types will be flattened and collected together and check for is same\ntype on the collected list. Default filler value check still process\nBFiniteType without flattening it.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T17:56:06Z", "type": "commit"}, {"oid": "ec98cb9412edb39d4798a8a8c53907d1c56cd262", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec98cb9412edb39d4798a8a8c53907d1c56cd262", "message": "Fix code formatting suggestions in code review\n\nRemoved recursive finite flattening as bad logic. Refactor variable\nnames for clarity. Revert unwanted code changes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T17:56:06Z", "type": "commit"}, {"oid": "cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T17:56:06Z", "type": "commit"}, {"oid": "cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T17:56:06Z", "type": "forcePushed"}, {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "message": "Fix code style\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-01T18:20:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjcxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401762714", "bodyText": "I think we should rename this to hasFillerValue and isImplicitDefaultValue to isFillerValue.", "author": "MaryamZi", "createdAt": "2020-04-01T16:51:42Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,59 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {", "originalCommit": "41ae36005fc63e09d9c63bcf6f14af7634f495f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTE2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401819162", "bodyText": "We could change the parameter to Set<BLangExpression> instead to avoid ambiguity.", "author": "MaryamZi", "createdAt": "2020-04-01T18:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MDQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401850414", "bodyText": "Shouldn't this be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean valueTypePresent = false;\n          \n          \n            \n                    boolean finiteTypePresent = false;", "author": "MaryamZi", "createdAt": "2020-04-01T19:16:52Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;", "originalCommit": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTk4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401851983", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<BType> getUniqueValues(BFiniteType member) {\n          \n          \n            \n                private Set<BType> getValueTypes(Set<BLangExpression> valueSpace) {", "author": "MaryamZi", "createdAt": "2020-04-01T19:19:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;\n+    }\n+\n+    private Set<BType> getUniqueValues(BFiniteType member) {", "originalCommit": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MDE0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401860142", "bodyText": "Since it's not really unique and we get the types.", "author": "MaryamZi", "createdAt": "2020-04-01T19:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTk2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401859968", "bodyText": "Not sure if this is correct.\nConsider something like\nconst FOO = 1;\n\ntype Bar int|FOO; // We currently allow this\n\npublic function main() {\n    Bar[2] x = [];\n}\nDoes this work with the current logic?", "author": "MaryamZi", "createdAt": "2020-04-01T19:34:16Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;", "originalCommit": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMDk2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r402030969", "bodyText": "No working on this.", "author": "KRVPerera", "createdAt": "2020-04-02T03:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0Njc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r402146761", "bodyText": "Fixed", "author": "KRVPerera", "createdAt": "2020-04-02T08:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MTMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401861317", "bodyText": "Is it correct to return false here?\nI don't think the following will work.\nimport ballerina/lang.'int;\n\npublic function main() {\n    ('int:Unsigned16|'int:Signed32)[2] x = [];\n}", "author": "MaryamZi", "createdAt": "2020-04-01T19:36:53Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;", "originalCommit": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NjU4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r402146588", "bodyText": "Fixed by a88df61", "author": "KRVPerera", "createdAt": "2020-04-02T08:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MTMxNw=="}], "type": "inlineReview"}, {"oid": "fc5dece215314c10c8dd1d50a36e13b30b82f0be", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc5dece215314c10c8dd1d50a36e13b30b82f0be", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-04-02T02:57:17Z", "type": "commit"}, {"oid": "e2d8c6eda4c5bf9299809dc1346674e7f544f16a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2d8c6eda4c5bf9299809dc1346674e7f544f16a", "message": "Add test int literal int - filler value check\n[no ci]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T03:03:57Z", "type": "commit"}, {"oid": "0e204e37f0cb39e534375782185c0cc2d62c7ccb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e204e37f0cb39e534375782185c0cc2d62c7ccb", "message": "Code refactor hasFillerValue area\n[no ci]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T03:17:29Z", "type": "commit"}, {"oid": "4851bef73673493edc99bbdb2d055a9d5ef9d2dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4851bef73673493edc99bbdb2d055a9d5ef9d2dc", "message": "Add int subtype union\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T03:37:09Z", "type": "commit"}, {"oid": "3ed2d038973eeb64c16376c3da227cd3cf092afa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ed2d038973eeb64c16376c3da227cd3cf092afa", "message": "Fix int subtype union filler value check issue\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T03:42:30Z", "type": "commit"}, {"oid": "d66676aaba73007e195149341758209710f41acb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d66676aaba73007e195149341758209710f41acb", "message": "Add mistakenly removed test cases\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T07:06:52Z", "type": "commit"}, {"oid": "a88df61403faefa21fcc66a2ff65ebb348e4f63a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a88df61403faefa21fcc66a2ff65ebb348e4f63a", "message": "Add integer,string,xml subtypes filler value check\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T08:28:21Z", "type": "commit"}, {"oid": "2a223fbf7b069f39067a1de97f9c8eba06212d7c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a223fbf7b069f39067a1de97f9c8eba06212d7c", "message": "Remove xml subtypes and byte string\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T08:56:58Z", "type": "commit"}, {"oid": "53973e25277791c9fa76fff5ce907a7b6ea6e8c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53973e25277791c9fa76fff5ce907a7b6ea6e8c5", "message": "Code style fix\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T09:29:22Z", "type": "commit"}, {"oid": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff1ac4aa180aa3bfb06a84b9311f2d3968398f77", "message": "Enable createSealedArraysOfIntSubtypes test case\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-04-02T10:58:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzA1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r405703053", "bodyText": "@KRVPerera, @rdhananjaya did we clarify/follow up on the concerns we had regarding filler values for XML?", "author": "MaryamZi", "createdAt": "2020-04-08T17:46:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2842,6 +2842,14 @@ public boolean hasFillerValue(BType type) {\n                 BTupleType tupleType = (BTupleType) type;\n                 return tupleType.getTupleTypes().stream().allMatch(eleType -> hasFillerValue(eleType));\n             default:\n+                // filler value is 0\n+                if (TypeTags.isIntegerTypeTag(type.tag)) {\n+                    return true;\n+                }\n+                // TODO : clarify", "originalCommit": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NzQxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r406647418", "bodyText": "We agreed to handle xml type for now. Shall we create a followup issue after clarification?", "author": "KRVPerera", "createdAt": "2020-04-10T07:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyMjg2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r408622860", "bodyText": "ballerina-platform/ballerina-spec#490", "author": "KRVPerera", "createdAt": "2020-04-15T07:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzA1Mw=="}], "type": "inlineReview"}, {"oid": "892dc142e3a2f3308f0ef9cddd3bfb4d982e2c25", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/892dc142e3a2f3308f0ef9cddd3bfb4d982e2c25", "message": "Remove xml subtype commented filler value code", "committedDate": "2020-04-15T06:30:38Z", "type": "commit"}]}