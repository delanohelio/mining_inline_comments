{"pr_number": 21831, "pr_title": "Add updated BBEs", "pr_createdAt": "2020-03-16T13:54:07Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831", "timeline": [{"oid": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4bc9796265f771bfc6c6b61df7f3a8da5d513cf", "message": "Merge pull request #21710 from KavinduZoysa/bbe-deprecation\n\nAdd BBE for deprecation", "committedDate": "2020-03-16T18:19:30Z", "type": "commit"}, {"oid": "ad71a5c52280a8ff3ec09d4bc3c05c7166b4d8dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad71a5c52280a8ff3ec09d4bc3c05c7166b4d8dc", "message": "Fix taint checking BBE", "committedDate": "2020-03-16T18:56:51Z", "type": "commit"}, {"oid": "8d76c0adb2c5163571ac5c0527cdddbd53db154c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d76c0adb2c5163571ac5c0527cdddbd53db154c", "message": "Merge pull request #21837 from pubudu91/fix-bbe\n\nFix taint checking BBE", "committedDate": "2020-03-16T18:58:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1Mjk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393252979", "bodyText": "You can do the following to get an array of string values of the values in the map:\nstring[] fields = m.'map((val) => val.toString()).toArray();", "author": "pubudu91", "createdAt": "2020-03-16T19:08:02Z", "path": "examples/json-csv/json_csv.bal", "diffHunk": "@@ -5,8 +5,8 @@ import ballerina/log;\n // Return the result as a tuple, which contains the headers and fields.\n function getFields(map<json> rec) returns [string[], string[]] {\n     string[] fields = [];\n-    foreach var field in rec {\n-        fields[fields.length()] = field.toString();\n+    foreach var recordField in rec {\n+        fields[fields.length()] = recordField.toString();\n     }", "originalCommit": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "262050cd521e31999645339ed03639dae61549c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/262050cd521e31999645339ed03639dae61549c9", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T19:08:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NTA5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393255099", "bodyText": "We don't generally use a mix of logs and println. See 4 in https://github.com/ballerina-platform/ballerina-lang/blob/master/docs/bbe-guidelines/bbe-guidelines.md#general-best-practices", "author": "pubudu91", "createdAt": "2020-03-16T19:12:24Z", "path": "examples/kafka_message_consumer_group_service/kafka_message_consumer_group_service.bal", "diffHunk": "@@ -25,13 +25,17 @@ service kafkaService on consumer {\n }\n \n function processKafkaRecord(kafka:ConsumerRecord kafkaRecord) {\n-    byte[] serializedMsg = kafkaRecord.value;\n-    string|error msg = strings:fromBytes(serializedMsg);\n-    if (msg is string) {\n-        // Print the retrieved Kafka record.\n-        io:println(\"Topic: \", kafkaRecord.topic, \" Partition: \",\n-            kafkaRecord.partition.toString(), \" Received Message: \", msg);\n+    anydata serializedMsg = kafkaRecord.value;\n+    if (serializedMsg is byte[]) {\n+        string|error msg = strings:fromBytes(serializedMsg);\n+        if (msg is string) {\n+            // Print the retrieved Kafka record.\n+            io:println(\"Topic: \", kafkaRecord.topic, \" Partition: \",\n+                kafkaRecord.partition.toString(), \" Received Message: \", msg);\n+        } else {\n+            log:printError(\"Error occurred while converting message data\", msg);", "originalCommit": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NTQxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393255416", "bodyText": "But maybe we can open an issue and fix it later, as it's not a major issue", "author": "pubudu91", "createdAt": "2020-03-16T19:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NTA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMzI0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393433248", "bodyText": "Created an issue: #21850", "author": "aashikam", "createdAt": "2020-03-17T04:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NTA5OQ=="}], "type": "inlineReview"}, {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d647c30f0ac03894aa75b64f576431a3c5c336e", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T19:20:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzU1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393407555", "bodyText": "Adding @pubudu91 's suggestion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the service using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # suggestion: To run the service, execute the below command by passing the path to the Ballerina home directory using the `--b7a.home` parameter.", "author": "ldclakmal", "createdAt": "2020-03-17T02:15:01Z", "path": "examples/grpc-secured-unary/grpc_secured_unary_service.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'service' module.\n $ ballerina build service\n \n-# Run the service using the following command.\n-$ ballerina run target/bin/service.jar\n+# Run the service using the following command and passing Ballerina home path as system property.", "originalCommit": "2d647c30f0ac03894aa75b64f576431a3c5c336e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzc5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393407796", "bodyText": "Adding @pubudu91 's suggestion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the client using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # To run the client, execute the below command by passing the path to the Ballerina home directory using the --`b7a.home` parameter.", "author": "ldclakmal", "createdAt": "2020-03-17T02:15:55Z", "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'client' module.\n $ ballerina build client\n \n-# Run the client using the following command.\n-$ ballerina run target/bin/client.jar\n+# Run the client using the following command and passing Ballerina home path as system property.", "originalCommit": "2d647c30f0ac03894aa75b64f576431a3c5c336e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwODY4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393408685", "bodyText": "Adding @pubudu91 's suggestion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in-scope.", "author": "ldclakmal", "createdAt": "2020-03-17T02:19:52Z", "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+// A let expression binds variables and then evaluates an expression with those variables in scope.", "originalCommit": "2d647c30f0ac03894aa75b64f576431a3c5c336e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b5ea32e13eec3c87aa1353ca9d79b7b6cf98df3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b5ea32e13eec3c87aa1353ca9d79b7b6cf98df3", "message": "Update examples/grpc-secured-unary/grpc_secured_unary_service_client.out\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-03-17T02:30:33Z", "type": "commit"}, {"oid": "5d8986c10932705814041af0fdf38edb1cbdc9e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d8986c10932705814041af0fdf38edb1cbdc9e2", "message": "Update examples/proto-to-ballerina/proto_to_ballerina.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-17T02:31:52Z", "type": "commit"}, {"oid": "93568c98855416d30b24ddeee84afe9caa606fa4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93568c98855416d30b24ddeee84afe9caa606fa4", "message": "Use error detail instead of reason", "committedDate": "2020-03-17T02:31:53Z", "type": "commit"}, {"oid": "d7edc492de8fabcf9bbcbd8b89062b73b125b481", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7edc492de8fabcf9bbcbd8b89062b73b125b481", "message": "Apply suggestions from code review\r\n\r\nFix grpc related doc changes\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-17T02:38:47Z", "type": "commit"}, {"oid": "64121a52f561b6844093b8441f3c50778c6fc2ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64121a52f561b6844093b8441f3c50778c6fc2ba", "message": "Merge pull request #21847 from chamil321/bbe-up\n\nUse error detail instead of reason", "committedDate": "2020-03-17T02:43:53Z", "type": "commit"}, {"oid": "ae5ec475c7f3243572a6187eee0fdeacc589e7d5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae5ec475c7f3243572a6187eee0fdeacc589e7d5", "message": "Fix proto to ballerina description", "committedDate": "2020-03-17T02:53:08Z", "type": "commit"}, {"oid": "2722dce7ea7cd74155f47e6f64b30f09881624cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2722dce7ea7cd74155f47e6f64b30f09881624cc", "message": "Merge pull request #21848 from daneshk/bbe-1.2.0\n\nFix proto to ballerina description", "committedDate": "2020-03-17T03:01:36Z", "type": "commit"}, {"oid": "343f6fee9d55b0b4b11d9d99694de6fb470142a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/343f6fee9d55b0b4b11d9d99694de6fb470142a7", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-17T03:12:45Z", "type": "commit"}, {"oid": "a6ba7dca9821542b8abcaa561675c272a10df000", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6ba7dca9821542b8abcaa561675c272a10df000", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-17T03:43:50Z", "type": "commit"}, {"oid": "94fddae642d111000dfe10880653f3c0e95729e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94fddae642d111000dfe10880653f3c0e95729e0", "message": "Merge pull request #21826 from rdhananjaya/xml-bbe\n\nXML BBE fix: continuing #21796", "committedDate": "2020-03-17T05:02:35Z", "type": "commit"}, {"oid": "773a24a2c41c4a2b81a634807726121e9da7d698", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/773a24a2c41c4a2b81a634807726121e9da7d698", "message": "Add a BBE that explains the new @strand annotation", "committedDate": "2020-03-17T05:46:09Z", "type": "commit"}, {"oid": "4701b2c444230f890958eaab01db66cc5c036e77", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4701b2c444230f890958eaab01db66cc5c036e77", "message": "Fix testerina_function_mocks.out", "committedDate": "2020-03-17T06:37:35Z", "type": "commit"}, {"oid": "4701b2c444230f890958eaab01db66cc5c036e77", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4701b2c444230f890958eaab01db66cc5c036e77", "message": "Fix testerina_function_mocks.out", "committedDate": "2020-03-17T06:37:35Z", "type": "forcePushed"}, {"oid": "e03b18786785523219ded60f587eb9f915f5c81b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e03b18786785523219ded60f587eb9f915f5c81b", "message": "Update examples/threads-and-strands/threads-and-strands.description", "committedDate": "2020-03-17T09:58:01Z", "type": "commit"}, {"oid": "cdd0de96b1f8c59ea7d38cb8b8c6d513759ffa6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cdd0de96b1f8c59ea7d38cb8b8c6d513759ffa6e", "message": "Merge pull request #21856 from sameerajayasoma/bbe-1.2.0\n\nBBE for the new @strand annotation", "committedDate": "2020-03-17T09:58:28Z", "type": "commit"}, {"oid": "bc423775b5a0dcdf1c2e0b8289eef4e0be9736e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc423775b5a0dcdf1c2e0b8289eef4e0be9736e9", "message": "Merge branch 'stage' into bbe-1.2.0", "committedDate": "2020-03-17T10:07:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2OTI4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393569283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        },\n          \n          \n            \n                        {\n          \n          \n            \n                            \"name\": \"Threads and Strands\",\n          \n          \n            \n                            \"url\": \"threads-and-strands\"\n          \n          \n            \n                        }", "author": "ldclakmal", "createdAt": "2020-03-17T10:10:40Z", "path": "examples/index.json", "diffHunk": "@@ -443,6 +458,16 @@\n             }", "originalCommit": "bc423775b5a0dcdf1c2e0b8289eef4e0be9736e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e252ca8214c0d48d5202da7b51b39b9566a73fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e252ca8214c0d48d5202da7b51b39b9566a73fb", "message": "Update examples/index.json", "committedDate": "2020-03-17T10:10:47Z", "type": "commit"}, {"oid": "0dbf798bbcd1189ee954697821546309ae327dca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dbf798bbcd1189ee954697821546309ae327dca", "message": "Add jdbc samples", "committedDate": "2020-03-10T18:45:12Z", "type": "commit"}, {"oid": "a8adcc774ce1bcc7ff17108b44aa2bd75d666f40", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8adcc774ce1bcc7ff17108b44aa2bd75d666f40", "message": "Add jdbc examples", "committedDate": "2020-03-11T12:36:13Z", "type": "commit"}, {"oid": "5e350e8a31d57dafe6fd17a3bb33038042fe9e0c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e350e8a31d57dafe6fd17a3bb33038042fe9e0c", "message": "Add mysql init sample", "committedDate": "2020-03-11T13:57:12Z", "type": "commit"}, {"oid": "f9cf5d5cee6cc25a294966d03a2cbbdf988875ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9cf5d5cee6cc25a294966d03a2cbbdf988875ea", "message": "Merge branch 'sql-connector' into sql-samples", "committedDate": "2020-03-11T13:57:45Z", "type": "commit"}, {"oid": "194c972db3d5f8ccb622ebff4e09e1ca5a24bbb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/194c972db3d5f8ccb622ebff4e09e1ca5a24bbb0", "message": "Add mysql samples", "committedDate": "2020-03-11T18:19:02Z", "type": "commit"}, {"oid": "534591f2fb3f317f5dac6b61976711c69798d5c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/534591f2fb3f317f5dac6b61976711c69798d5c9", "message": "Merge branch 'upstream-master' into sql-samples", "committedDate": "2020-03-11T18:20:56Z", "type": "commit"}, {"oid": "8987081d49db135f73ae3ddb9865d1477495327f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8987081d49db135f73ae3ddb9865d1477495327f", "message": "Fix formatting issues", "committedDate": "2020-03-11T18:30:44Z", "type": "commit"}, {"oid": "1bd5261ced7a0bd5376d5abc6b6b0c61b1f1c501", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bd5261ced7a0bd5376d5abc6b6b0c61b1f1c501", "message": "Use stream query operations in the typed query sample", "committedDate": "2020-03-12T07:23:34Z", "type": "commit"}, {"oid": "4df2d6ce0da45941261021ed5804ca33ffe2b98e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4df2d6ce0da45941261021ed5804ca33ffe2b98e", "message": "Remove extra spaces in BBE output\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>", "committedDate": "2020-03-12T10:48:05Z", "type": "commit"}, {"oid": "15b9c99a02104eb407a0ef4a31bcfc25b7843908", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15b9c99a02104eb407a0ef4a31bcfc25b7843908", "message": "Add complex data type sample for jdbc and mysql connectors.", "committedDate": "2020-03-12T12:13:53Z", "type": "commit"}, {"oid": "7ed3658a2ced035a2f0ad158e1d233a25d3e39dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ed3658a2ced035a2f0ad158e1d233a25d3e39dc", "message": "Update the BBE order", "committedDate": "2020-03-12T12:17:09Z", "type": "commit"}, {"oid": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/957ae2ec8d127233a668ed2b53efb5423b12da2a", "message": "Add missing space between // and beginning of sentence", "committedDate": "2020-03-12T12:24:01Z", "type": "commit"}, {"oid": "7f1b6f832a80115ef0930913b34974699a695c20", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f1b6f832a80115ef0930913b34974699a695c20", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:12:49Z", "type": "commit"}, {"oid": "c579cd5e5a02dfe479acecc5a0ae7327ce2001d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c579cd5e5a02dfe479acecc5a0ae7327ce2001d6", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:13:28Z", "type": "commit"}, {"oid": "a717a95b3f715b6c723fb631a69e71dd8db7e35c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a717a95b3f715b6c723fb631a69e71dd8db7e35c", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:13:57Z", "type": "commit"}, {"oid": "4dcda57398895c6f40feddb557accc03cad3bf45", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4dcda57398895c6f40feddb557accc03cad3bf45", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:14:24Z", "type": "commit"}, {"oid": "8136929963b4969f936b4cc865bcd23a5d0a8fb8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8136929963b4969f936b4cc865bcd23a5d0a8fb8", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:14:51Z", "type": "commit"}, {"oid": "e2959e56f4d86d70a6a6b9e4afb9d000d73fe68e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2959e56f4d86d70a6a6b9e4afb9d000d73fe68e", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:15:37Z", "type": "commit"}, {"oid": "97e3a7e5031ad1850d5d7efb2297c3d74df0839a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97e3a7e5031ad1850d5d7efb2297c3d74df0839a", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:16:04Z", "type": "commit"}, {"oid": "c308ecd834be923cb9dad621f6a24c6b06432689", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c308ecd834be923cb9dad621f6a24c6b06432689", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:16:28Z", "type": "commit"}, {"oid": "351226166c1494a886e0210cc687792dd357d888", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/351226166c1494a886e0210cc687792dd357d888", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:16:53Z", "type": "commit"}, {"oid": "e366b04a4c0a04d5cb51c04d945974b2ae3f08b4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e366b04a4c0a04d5cb51c04d945974b2ae3f08b4", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:17:16Z", "type": "commit"}, {"oid": "03558a6f4b025e96c1acb0f75f66ba943c73c918", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03558a6f4b025e96c1acb0f75f66ba943c73c918", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:17:47Z", "type": "commit"}, {"oid": "4621f34e90c940dff07be58d9a0e4671dcad2e79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4621f34e90c940dff07be58d9a0e4671dcad2e79", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:18:10Z", "type": "commit"}, {"oid": "13675e16af4f4a7776e7bb979b5f72bf28b98ea0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13675e16af4f4a7776e7bb979b5f72bf28b98ea0", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:18:36Z", "type": "commit"}, {"oid": "5ade9c0f2a5dfa6ee2501d5963539930cc47a394", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ade9c0f2a5dfa6ee2501d5963539930cc47a394", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:19:21Z", "type": "commit"}, {"oid": "486d3031f9f0053f2c069c229f75ef354954777e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/486d3031f9f0053f2c069c229f75ef354954777e", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:20:47Z", "type": "commit"}, {"oid": "b82ae937360ee450143eb4f3351d6fde0065c19a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b82ae937360ee450143eb4f3351d6fde0065c19a", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:21:17Z", "type": "commit"}, {"oid": "308bf4a4042e9fe4d4048a1b27256add6444cc83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/308bf4a4042e9fe4d4048a1b27256add6444cc83", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:21:39Z", "type": "commit"}, {"oid": "0e9cee603fec9c79d9706e4510d912ccda67d649", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e9cee603fec9c79d9706e4510d912ccda67d649", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:21:59Z", "type": "commit"}, {"oid": "39bc01600bc009c772b569bc0b532e1a1434d8d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39bc01600bc009c772b569bc0b532e1a1434d8d9", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:23:17Z", "type": "commit"}, {"oid": "1ca46f8a160bcadda75b5eb1a94f4a09af3a661d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ca46f8a160bcadda75b5eb1a94f4a09af3a661d", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:23:39Z", "type": "commit"}, {"oid": "d1c9bed71baf225794a15e1bd1e77598cd8e896c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1c9bed71baf225794a15e1bd1e77598cd8e896c", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-15T13:23:59Z", "type": "commit"}, {"oid": "2ed924ecb94ff794b60908f972995ba7ca436e3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ed924ecb94ff794b60908f972995ba7ca436e3e", "message": "Apply suggestions from code review\r\n\r\nAdd suggested changes from review.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>\nCo-Authored-By: Pubudu Fernando <pubudu.fernando@gmail.com>", "committedDate": "2020-03-15T13:35:48Z", "type": "commit"}, {"oid": "4b6d6399613ad8b400a0ef83a8c5bc184b63bd1a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b6d6399613ad8b400a0ef83a8c5bc184b63bd1a", "message": "Add var ref field examples", "committedDate": "2020-03-15T17:54:43Z", "type": "commit"}, {"oid": "aeb013d78c2ae7c7ca36dcf4cbceafa063928da5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aeb013d78c2ae7c7ca36dcf4cbceafa063928da5", "message": "Add depreaction and create new title for doc", "committedDate": "2020-03-16T03:34:59Z", "type": "commit"}, {"oid": "3647abbe235d0c0b00a0a5a7a82caf9595391803", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3647abbe235d0c0b00a0a5a7a82caf9595391803", "message": "Change the results", "committedDate": "2020-03-16T03:34:59Z", "type": "commit"}, {"oid": "97ad3629cc48f4e4fb8b382003411cde6450e43b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97ad3629cc48f4e4fb8b382003411cde6450e43b", "message": "Fix the suggested changes", "committedDate": "2020-03-16T03:34:59Z", "type": "commit"}, {"oid": "c40d80d15611af041064252a9c1b6239bab0b7f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c40d80d15611af041064252a9c1b6239bab0b7f6", "message": "Change the name of object", "committedDate": "2020-03-16T03:34:59Z", "type": "commit"}, {"oid": "65b43d271caff3fe1b7fc5a4937744d77abe9314", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65b43d271caff3fe1b7fc5a4937744d77abe9314", "message": "Add new lines", "committedDate": "2020-03-16T03:34:59Z", "type": "commit"}, {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc87c8f461f60732f21f253f0ea9cfb5b38fc686", "message": "Add spread field examples", "committedDate": "2020-03-16T03:52:30Z", "type": "commit"}, {"oid": "89c38832e3032d6b4ebd0bdf8cab3653842cacf8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89c38832e3032d6b4ebd0bdf8cab3653842cacf8", "message": "Update BBE for consistency", "committedDate": "2020-03-16T03:57:45Z", "type": "commit"}, {"oid": "188126e2d903a577a58bea2a38905d05df5fa358", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/188126e2d903a577a58bea2a38905d05df5fa358", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T04:32:47Z", "type": "commit"}, {"oid": "14cfb0eb11e18da430cc375abb72abb86f639a96", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/14cfb0eb11e18da430cc375abb72abb86f639a96", "message": "Fix review comments for JDBC BBEs", "committedDate": "2020-03-16T05:06:04Z", "type": "commit"}, {"oid": "815813efea12ea052ee6f645040172a6ef009757", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/815813efea12ea052ee6f645040172a6ef009757", "message": "Fix kafka BBEs", "committedDate": "2020-03-16T05:23:35Z", "type": "commit"}, {"oid": "fdcd2df345a38b2062f1fcdc1bdb82040f86c9f9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fdcd2df345a38b2062f1fcdc1bdb82040f86c9f9", "message": "Fix review comments for MySQL BBEs", "committedDate": "2020-03-16T05:38:58Z", "type": "commit"}, {"oid": "0299c9a60357896b922edf074b27679fbc0cdb3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0299c9a60357896b922edf074b27679fbc0cdb3d", "message": "Fix messages in BBEs", "committedDate": "2020-03-16T05:47:34Z", "type": "commit"}, {"oid": "037ed74c0d531e74693ecd7c0564f92de2854d5c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/037ed74c0d531e74693ecd7c0564f92de2854d5c", "message": "Update webSocket BBEs", "committedDate": "2020-03-16T05:48:18Z", "type": "commit"}, {"oid": "2a9a6be9b3154677286d6a38330d87069d720218", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a9a6be9b3154677286d6a38330d87069d720218", "message": "Changes in the out file", "committedDate": "2020-03-16T05:52:09Z", "type": "commit"}, {"oid": "bf9e0bcaa56e8ec8fc95e8940064028627693c72", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf9e0bcaa56e8ec8fc95e8940064028627693c72", "message": "Update basic auth service BBE", "committedDate": "2020-03-16T06:04:23Z", "type": "commit"}, {"oid": "b8c24c42de06f61c5f788e4225a248ee9f8be151", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8c24c42de06f61c5f788e4225a248ee9f8be151", "message": "Update new lines at EOF", "committedDate": "2020-03-16T06:05:12Z", "type": "commit"}, {"oid": "f4328f30f88c1df49eaabdcc3134b7f18f9a34ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4328f30f88c1df49eaabdcc3134b7f18f9a34ea", "message": "Update examples/kafka_message_consumer_service/kafka_message_consumer_service.bal\n\nCo-Authored-By: Chamil Elladeniya <chamilmadawa8@gmail.com>", "committedDate": "2020-03-16T06:06:50Z", "type": "commit"}, {"oid": "ca98c3e6da2a0f955c85553c5e0e317cca8210c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca98c3e6da2a0f955c85553c5e0e317cca8210c3", "message": "Fix messages in BBEs", "committedDate": "2020-03-16T06:30:29Z", "type": "commit"}, {"oid": "b1e19c8598061dbf646bf5e0c3eb42a1afd508dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1e19c8598061dbf646bf5e0c3eb42a1afd508dc", "message": "Fix formating in BBEs", "committedDate": "2020-03-16T06:33:58Z", "type": "commit"}, {"oid": "06ce6d1f8f1fcbc56c5285c12347db951247e6c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06ce6d1f8f1fcbc56c5285c12347db951247e6c0", "message": "Change BBE out files to match with the current correct outs", "committedDate": "2020-03-16T06:34:02Z", "type": "commit"}, {"oid": "fc65ffb66df3f355b01d0f605d70b51fe6b88d28", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc65ffb66df3f355b01d0f605d70b51fe6b88d28", "message": "Update JDBC BBES", "committedDate": "2020-03-16T08:28:17Z", "type": "commit"}, {"oid": "f7e2186a72bd312bb914a808480f83f76a41e56d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7e2186a72bd312bb914a808480f83f76a41e56d", "message": "Fix gRPC examples with Ballerina 1.2.0 release", "committedDate": "2020-03-16T08:44:37Z", "type": "commit"}, {"oid": "6153a79f09e98294827bb3334cb0a55de008d252", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6153a79f09e98294827bb3334cb0a55de008d252", "message": "Merge branch 'stage' of https://github.com/ballerina-platform/ballerina-lang into bbe", "committedDate": "2020-03-16T08:52:09Z", "type": "commit"}, {"oid": "df8533386b5cf2ebe3269d54cc1af25bbfab2657", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df8533386b5cf2ebe3269d54cc1af25bbfab2657", "message": "Merge branch 'bbe' of https://github.com/aashikam/ballerina-lang into bbe", "committedDate": "2020-03-16T08:52:36Z", "type": "commit"}, {"oid": "4e3e12482ff37eccf400c6390f164b48f9aa3606", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e3e12482ff37eccf400c6390f164b48f9aa3606", "message": "Fix proto to ballerina description", "committedDate": "2020-03-16T09:08:27Z", "type": "commit"}, {"oid": "d7b7ac5ad94b30f756a452e4d7d4e51db62d6bdc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7b7ac5ad94b30f756a452e4d7d4e51db62d6bdc", "message": "Address review suggestions", "committedDate": "2020-03-16T09:40:41Z", "type": "commit"}, {"oid": "449a1f43d068328d3588c3d48e418d654e9a199e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/449a1f43d068328d3588c3d48e418d654e9a199e", "message": "Add BBEs to broken list", "committedDate": "2020-03-16T09:45:22Z", "type": "commit"}, {"oid": "88d0aec0bef8147fe81cc7060536ba0bf6b92a12", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88d0aec0bef8147fe81cc7060536ba0bf6b92a12", "message": "Remove use of module aliases for lang libs in BBEs", "committedDate": "2020-03-16T09:57:02Z", "type": "commit"}, {"oid": "43e771affba4f63ce641ecfdd2ea60ea263798ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43e771affba4f63ce641ecfdd2ea60ea263798ed", "message": "Merge branch 'stage' of https://github.com/ballerina-platform/ballerina-lang into bbe", "committedDate": "2020-03-16T10:01:13Z", "type": "commit"}, {"oid": "4841f24b727b05a37066475493e35a99daa973b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4841f24b727b05a37066475493e35a99daa973b5", "message": "Merge branch 'stage' of https://github.com/ballerina-platform/ballerina-lang into fix-bbe-master", "committedDate": "2020-03-16T10:41:58Z", "type": "commit"}, {"oid": "889da09b7196d364ff51da41fff3e18e4788a585", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/889da09b7196d364ff51da41fff3e18e4788a585", "message": "Fix JSON to CSV Transform example with Ballerina 1.2.0 release", "committedDate": "2020-03-16T10:48:09Z", "type": "commit"}, {"oid": "cad5bcfc5a970e617af5b9a12df1d8ed8af2646e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cad5bcfc5a970e617af5b9a12df1d8ed8af2646e", "message": "Merge branch 'upstream-stage' into sql-samples", "committedDate": "2020-03-16T11:17:12Z", "type": "commit"}, {"oid": "2296de7943314bd56f24d61bb3db9bd128e956f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2296de7943314bd56f24d61bb3db9bd128e956f0", "message": "Rename file names as directory names.", "committedDate": "2020-03-16T11:48:44Z", "type": "commit"}, {"oid": "5909b775e9980df45cef5f52767667bd6f02e28c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5909b775e9980df45cef5f52767667bd6f02e28c", "message": "Merge branch 'stage' of github.com:ballerina-platform/ballerina-lang into xml-bbe\n\n\u0001 Conflicts:\n\u0001\texamples/xml-attributes/xml_attributes.out", "committedDate": "2020-03-16T12:06:10Z", "type": "commit"}, {"oid": "f97e58598d08e158a88a8d99c067f403bfbe8f6c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f97e58598d08e158a88a8d99c067f403bfbe8f6c", "message": "Fix and align xml functions BBEs", "committedDate": "2020-03-16T12:07:41Z", "type": "commit"}, {"oid": "0a7fbeb2cf970c211707f604b2e7bdc14e3d2322", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a7fbeb2cf970c211707f604b2e7bdc14e3d2322", "message": "Fix compilation error in the Tuple Match BBE", "committedDate": "2020-03-16T12:10:19Z", "type": "commit"}, {"oid": "ec4a4a34a31d3defc752cfee26de10b684b549ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec4a4a34a31d3defc752cfee26de10b684b549ba", "message": "Merge pull request #21783 from aashikam/bbe\n\nFix Kafka BBEs", "committedDate": "2020-03-16T13:33:30Z", "type": "commit"}, {"oid": "48c53cdcd035858d5d2ef59c55c2cd408692ed51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48c53cdcd035858d5d2ef59c55c2cd408692ed51", "message": "Merge pull request #21827 from Maninda/stage3\n\nRename file names as directory names.", "committedDate": "2020-03-16T13:35:57Z", "type": "commit"}, {"oid": "9a1297164894553beaa1bcc2dcbb9077fc173e4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a1297164894553beaa1bcc2dcbb9077fc173e4a", "message": "Merge pull request #21807 from daneshk/stage\n\nFix gRPC examples with Ballerina 1.2.0 release", "committedDate": "2020-03-16T13:36:12Z", "type": "commit"}, {"oid": "416cbfc2bb586754f94a21c9bc9bd9508cef76d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/416cbfc2bb586754f94a21c9bc9bd9508cef76d2", "message": "Merge pull request #21816 from praveennadarajah/stage\n\nFix JSON to CSV Transform example with Ballerina 1.2.0 release", "committedDate": "2020-03-16T13:36:57Z", "type": "commit"}, {"oid": "bcfe641f2ab2912c85651aa678242dc39273a7df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bcfe641f2ab2912c85651aa678242dc39273a7df", "message": "Merge pull request #21775 from ldclakmal/fix-bbe-master\n\nUpdate Access Control BBEs", "committedDate": "2020-03-16T13:37:51Z", "type": "commit"}, {"oid": "e42cd8d0fba88682034806aa34bebea96703e1c4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e42cd8d0fba88682034806aa34bebea96703e1c4", "message": "Merge pull request #21804 from kalaiyarasiganeshalingam/bbe\n\nUpdate JDBC BBES", "committedDate": "2020-03-16T13:41:01Z", "type": "commit"}, {"oid": "103a4082f7b3a387ff84a7b33af37914db97cdb3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/103a4082f7b3a387ff84a7b33af37914db97cdb3", "message": "Merge pull request #21814 from pubudu91/fix-bbe\n\nRemove module alias usage in BBEs", "committedDate": "2020-03-16T13:43:51Z", "type": "commit"}, {"oid": "0eca0af809734ec2cf21694052fcb6ed82a2ce4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0eca0af809734ec2cf21694052fcb6ed82a2ce4a", "message": "Merge pull request #21788 from dulajdilshan/dulaj-BBE-outs\n\nCorrect BBE out files to match with the current outs", "committedDate": "2020-03-16T13:46:34Z", "type": "commit"}, {"oid": "00bdf2869c450b42b68d06fbc3043524f398b6e4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00bdf2869c450b42b68d06fbc3043524f398b6e4", "message": "Merge pull request #21723 from KRVPerera/bbe_fixes\n\nRemove extra spaces in BBE output", "committedDate": "2020-03-16T13:48:47Z", "type": "commit"}, {"oid": "4164e501d58933e5d5a1e5a2c4807c0b92956fc4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4164e501d58933e5d5a1e5a2c4807c0b92956fc4", "message": "Merge pull request #21787 from kalaiyarasiganeshalingam/bbes\n\nUpdate webSocket BBEs", "committedDate": "2020-03-16T13:48:56Z", "type": "commit"}, {"oid": "feffb55d63d90459b1e34e668d79c8bc8e5bf44b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/feffb55d63d90459b1e34e668d79c8bc8e5bf44b", "message": "Merge pull request #21810 from dulajdilshan/BBE-fixes\n\nFix error in the 'Tuple Match' BBE src file", "committedDate": "2020-03-16T13:53:22Z", "type": "commit"}, {"oid": "4a53bd83fcba7629de1495f7b4499d051bb6f179", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a53bd83fcba7629de1495f7b4499d051bb6f179", "message": "Add let expression BBE", "committedDate": "2020-03-16T14:06:32Z", "type": "commit"}, {"oid": "872a834407b2ecea828e2ed5413c7ec199048a51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/872a834407b2ecea828e2ed5413c7ec199048a51", "message": "Merge pull request #21440 from irshadnilam/let-expression-bbe\n\nAdd Let Expression BBE", "committedDate": "2020-03-16T14:08:30Z", "type": "commit"}, {"oid": "ce26dc49282c4d8f59aa324b27b98143e1c581f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce26dc49282c4d8f59aa324b27b98143e1c581f6", "message": "remove --experimental tag from run command", "committedDate": "2020-03-16T14:09:28Z", "type": "commit"}, {"oid": "b0b4e2bedcb54bf27fbdf3a691813329804bfa3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0b4e2bedcb54bf27fbdf3a691813329804bfa3d", "message": "Move BBE out of experimental", "committedDate": "2020-03-16T14:09:28Z", "type": "commit"}, {"oid": "59491d07ee2d7b175beca53eb082262ee31e0c91", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59491d07ee2d7b175beca53eb082262ee31e0c91", "message": "Update examples/locks/locks.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T14:09:28Z", "type": "commit"}, {"oid": "cb2893240607f34e4e29b1db3549282cc17bfce2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb2893240607f34e4e29b1db3549282cc17bfce2", "message": "Apply review suggestions", "committedDate": "2020-03-16T14:19:26Z", "type": "commit"}, {"oid": "54f9663fab21f74186ef2101e817ae4596a8a7a4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54f9663fab21f74186ef2101e817ae4596a8a7a4", "message": "Fix review suggestions", "committedDate": "2020-03-16T14:21:14Z", "type": "commit"}, {"oid": "2ffeff1d6fb2a18c8dbbf5935f32168036505fcd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ffeff1d6fb2a18c8dbbf5935f32168036505fcd", "message": "Merge pull request #21819 from sinthuja/sql-samples\n\nAdd BBE to JDBC and MySQL Connectors", "committedDate": "2020-03-16T14:24:13Z", "type": "commit"}, {"oid": "b08eca5b03ea886235fa2a9e73ceab4f350435d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b08eca5b03ea886235fa2a9e73ceab4f350435d4", "message": "Merge pull request #21745 from dulvinw/patch-7\n\nFix BBE related to Lock statement", "committedDate": "2020-03-16T14:25:42Z", "type": "commit"}, {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0aa86892784d83af43737d62a30b5cfdeae29f3d", "message": "Merge pull request #21776 from MaryamZi/add-examples-120\n\nUpdate examples for mapping constructor changes", "committedDate": "2020-03-16T14:31:39Z", "type": "commit"}, {"oid": "36882070bad4d683204540601371d7efa7ed99e8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36882070bad4d683204540601371d7efa7ed99e8", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T15:48:11Z", "type": "commit"}, {"oid": "91b1b7609ba3044fa708f970f284e04705fe9b5d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91b1b7609ba3044fa708f970f284e04705fe9b5d", "message": "Fix typo", "committedDate": "2020-03-16T15:58:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186035", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES CBC no padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES CBC without padding.", "author": "praneesha", "createdAt": "2020-03-16T17:15:49Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186180", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES GCM no padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES GCM without padding.", "author": "praneesha", "createdAt": "2020-03-16T17:16:03Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr);\n-     io:println(\"AES GCM PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM no padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186349", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES CBC PKCS5 padding.", "author": "praneesha", "createdAt": "2020-03-16T17:16:21Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjY3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES GCM PKCS5 padding.", "author": "praneesha", "createdAt": "2020-03-16T17:16:53Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjkwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES ECB PKCS5 padding.", "author": "praneesha", "createdAt": "2020-03-16T17:17:16Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr);\n-     io:println(\"AES GCM PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM no padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES GCM no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES ECB PKCS5 padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzAwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393187004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES ECB no padding.\n          \n          \n            \n                 // Encrypt and decrypt input value using AES ECB without padding.", "author": "praneesha", "createdAt": "2020-03-16T17:17:26Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr);\n-     io:println(\"AES GCM PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM no padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES GCM no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n      output = check crypto:encryptAesEcb(inputArr, rsaKeyArr);\n      output = check crypto:decryptAesEcb(output, rsaKeyArr);\n-     io:println(\"AES ECB PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES ECB PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES ECB no padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzcyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393187724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using RSA ECB PKCS1 padding.", "author": "praneesha", "createdAt": "2020-03-16T17:18:38Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -142,10 +142,10 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using RSA ECB PKCS1 padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzkzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393187939", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using RSA ECB OAEPwithSHA512andMGF1 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using RSA ECB OAEP with SHA512 and MGF1 padding.", "author": "praneesha", "createdAt": "2020-03-16T17:19:00Z", "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -142,10 +142,10 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n      output = check crypto:encryptRsaEcb(inputArr, rsaPublicKey);\n      output = check crypto:decryptRsaEcb(output, rsaPrivateKey);\n-     io:println(\"RSA ECB PKCS1 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"RSA ECB PKCS1 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using RSA ECB OAEPwithSHA512andMGF1 padding.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDAyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393220025", "bodyText": "This algorithm should be kept as it is.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using RSA ECB OAEPwithSHA512andMGF1 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using RSA ECB OAEPwithSHA512andMGF1 padding.", "author": "ldclakmal", "createdAt": "2020-03-16T18:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4ODUwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393188503", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the service using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # To run the service, execute the below command by passing Ballerina home path as a system property.", "author": "praneesha", "createdAt": "2020-03-16T17:20:03Z", "path": "examples/grpc-secured-unary/grpc_secured_unary_service.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'service' module.\n $ ballerina build service\n \n-# Run the service using the following command.\n-$ ballerina run target/bin/service.jar\n+# Run the service using the following command and passing Ballerina home path as system property.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMjAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393232001", "bodyText": "suggestion: To run the service, execute the below command by passing the path to the Ballerina home directory using the --b7a.home parameter.", "author": "pubudu91", "createdAt": "2020-03-16T18:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4ODUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4ODYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393188613", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This is the client implementation for the secured connection (HTTPS) scenario.\n          \n          \n            \n            // This is the client implementation of the secured connection (HTTPS) scenario.", "author": "praneesha", "createdAt": "2020-03-16T17:20:14Z", "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.bal", "diffHunk": "@@ -1,4 +1,5 @@\n // This is the client implementation for the secured connection (HTTPS) scenario.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4OTE2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393189160", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the client using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # To run the client, execute the below command by passing Ballerina home path as a system property.", "author": "praneesha", "createdAt": "2020-03-16T17:21:06Z", "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'client' module.\n $ ballerina build client\n \n-# Run the client using the following command.\n-$ ballerina run target/bin/client.jar\n+# Run the client using the following command and passing Ballerina home path as system property.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMjQzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393232434", "bodyText": "suggestion: To run the client, execute the below command by passing the path to the Ballerina home directory using the --b7a.home parameter.", "author": "pubudu91", "createdAt": "2020-03-16T18:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4OTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n          \n          \n            \n                // Since the `rowType` is provided as a `BinaryType`, the `resultStream` will", "author": "praneesha", "createdAt": "2020-03-16T17:22:40Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDQxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190417", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n          \n          \n            \n                // Since the `rowType` is provided as an `ArrayType`, the `resultStream` will", "author": "praneesha", "createdAt": "2020-03-16T17:23:20Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream\n+    = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within the record from the `\n+    // resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDY4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n          \n          \n            \n                // Since the `rowType` is provided as a `DateTimeType`, the `resultStream`", "author": "praneesha", "createdAt": "2020-03-16T17:23:46Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream\n+    = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within the record from the `\n+    // resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // have `ArrayType` records.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream =\n+        <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from\n+    // the `resultStream` will be automatically identified based on the\n+    // column name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190783", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Timestamp fields of the database tabl can be mapped to time:Time,\n          \n          \n            \n                // Timestamp fields of the database table can be mapped to time:Time,", "author": "praneesha", "createdAt": "2020-03-16T17:23:56Z", "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream\n+    = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within the record from the `\n+    // resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // have `ArrayType` records.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream =\n+        <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from\n+    // the `resultStream` will be automatically identified based on the\n+    // column name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n+    // will have `DateTimeType` records. The Date, Time, DateTime, and\n+    // Timestamp fields of the database tabl can be mapped to time:Time,", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MTg4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393191882", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // among all database clients since the `connectionPool` property\n          \n          \n            \n                // among all the database clients since the `connectionPool` property", "author": "praneesha", "createdAt": "2020-03-16T17:25:48Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,79 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // This is a simple JDBC Client for an H2 database with the mandatory\n+    // field - JDBC URL. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver JAR.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along by providing the username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\",\n+        \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client by providing additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\",\n+        \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share and use the connections\n+    // to the database efficiently. In the above samples, the global\n+    // connection pool is created and shared\n+    // among all database clients since the `connectionPool` property", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MjEzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393192130", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Initializes JDBC clients with different options.\n          \n          \n            \n            //Initialize JDBC clients with different options.", "author": "praneesha", "createdAt": "2020-03-16T17:26:11Z", "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,79 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // This is a simple JDBC Client for an H2 database with the mandatory\n+    // field - JDBC URL. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver JAR.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along by providing the username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\",\n+        \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client by providing additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\",\n+        \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share and use the connections\n+    // to the database efficiently. In the above samples, the global\n+    // connection pool is created and shared\n+    // among all database clients since the `connectionPool` property\n+    // is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the JDBC client with the specific connection pool.\n+    jdbc:Client jdbcClient4 = check new (\"jdbc:h2:file:./target/sample4\",\n+        \"rootUser\", \"rootPass\", h2Options, connPool);\n+    io:println(\"JDBC client with connection pool created.\");\n+\n+    // Other than the JDBC URL, all other properties are optional.\n+    // Hence, named attributes can be used specifically to assign\n+    // the attributes.\n+    jdbc:Client jdbcClient5 = check new (url = \"jdbc:h2:file:./target/sample5\",\n+        user = \"rootUser\", password = \"rootPass\", options = h2Options,\n+        connectionPool = connPool);\n+\n+    // Initialize JDBC Client only with the URL and connection pool.\n+    jdbc:Client jdbcClient6 = check new (url = \"jdbc:h2:file:./target/sample6\",\n+        connectionPool = connPool);\n+    io:println(\"JDBC client with optional params created.\");\n+\n+    // Close the clients to release the resource\n+    // and destroy the connection pool.\n+    check jdbcClient1.close();\n+    check jdbcClient2.close();\n+    check jdbcClient3.close();\n+    check jdbcClient4.close();\n+    check jdbcClient5.close();\n+    check jdbcClient6.close();\n+}\n+\n+//Initializes JDBC clients with different options.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MjY1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393192651", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // the next() operation is sufficient to retrieve the data.\n          \n          \n            \n                // the `next()` operation is sufficient to retrieve the data.", "author": "praneesha", "createdAt": "2020-03-16T17:27:06Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,134 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Full Customer details: \", result);\n+        io:println(\"Customer first name: \", result[\"FIRSTNAME\"]);\n+        io:println(\"Customer last name: \", result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, the stream\n+    // should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as a record stream.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only a single row,\n+    // the next() operation is sufficient to retrieve the data.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393193056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Executes the select queries in different options.\n          \n          \n            \n                        // Execute the select queries in different options.", "author": "praneesha", "createdAt": "2020-03-16T17:27:49Z", "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,134 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Full Customer details: \", result);\n+        io:println(\"Customer first name: \", result[\"FIRSTNAME\"]);\n+        io:println(\"Customer last name: \", result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, the stream\n+    // should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as a record stream.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only a single row,\n+    // the next() operation is sufficient to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:println(\"Total rows in customer table : \", result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed. \", result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+// Define a record to load the query result schema as shown below in the\n+// 'typedQuery' function. In this example, all columns of the customer table\n+// will be loaded. Therefore, the `Customer` record will be created with all\n+// the columns. The column name of the result and the defined field name of\n+// the record will be matched case insensitively.\n+type Customer record {|\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+|};\n+\n+function typedQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream and the elements\n+    // of the stream can be either a Customer record or an error.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast the generic record type to the Customer stream type.\n+    stream<Customer, sql:Error> customerStream =\n+        <stream<Customer, sql:Error>>resultStream;\n+\n+    // Iterate the customer stream.\n+    error? e = customerStream.forEach(function(Customer customer) {\n+        io:println(customer);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+\n+    // Close the stream.\n+    e = resultStream.close();\n+    io:println(\"------ End Query With Type Description -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result =\n+        check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(\" +\n+        \"customerId INTEGER NOT NULL IDENTITY, firstName  VARCHAR(300),\" +\n+        \"lastName  VARCHAR(300), registrationID INTEGER, creditLimit DOUBLE,\" +\n+        \"country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,\" +\n+        \"lastName,registrationID,creditLimit,country) VALUES ('Peter', \" +\n+        \"'Stuart', 1, 5000.75, 'USA')\");\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName, \" +\n+        \"lastName,registrationID,creditLimit,country) VALUES ('Dan', 'Brown',\" +\n+        \"2, 10000, 'UK')\");\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client.\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/customers\",\n+        \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        sql:Error? err = initializeTable(jdbcClient);\n+        if (err is sql:Error) {\n+            io:println(\"Customer table initialization failed!\", err);\n+        } else {\n+            // Executes the select queries in different options.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzU5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393193592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in its scope.", "author": "praneesha", "createdAt": "2020-03-16T17:28:46Z", "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+// A let expression binds variables and then evaluates an expression with those variables in scope.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1Njc1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393256750", "bodyText": "in scope is correct. Maybe it should be in-scope", "author": "pubudu91", "createdAt": "2020-03-16T19:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NzQ2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393257469", "bodyText": "+1", "author": "praneesha", "createdAt": "2020-03-16T19:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTA2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393195067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n          \n          \n            \n                // Since the `rowType` is provided as a `BinaryType`, the `resultStream` will", "author": "praneesha", "createdAt": "2020-03-16T17:31:10Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,153 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of the MySQL database. This is used in below examples\n+// when initializing the MySQL connector. You need to change these based on\n+// your setup if you are trying locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define the record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTI1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393195257", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n          \n          \n            \n                // Since the `rowType` is provided as a `DateTimeType`, the `resultStream`", "author": "praneesha", "createdAt": "2020-03-16T17:31:29Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,153 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of the MySQL database. This is used in below examples\n+// when initializing the MySQL connector. You need to change these based on\n+// your setup if you are trying locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define the record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream =\n+        <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTQ1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393195457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Executes the complex data type queries.\n          \n          \n            \n                        // Execute the complex data type queries.", "author": "praneesha", "createdAt": "2020-03-16T17:31:51Z", "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,153 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of the MySQL database. This is used in below examples\n+// when initializing the MySQL connector. You need to change these based on\n+// your setup if you are trying locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define the record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream =\n+        <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n+    // will have `DateTimeType` records. The Date, Time, DateTime, and\n+    // Timestamp fields of the database table can be mapped to time:Time,\n+    // string and int types in Ballerina.\n+    resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\",\n+        DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream =\n+        <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+// Initialize the database table with sample data.\n+function initializeTable() returns sql:Error? {\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    sql:ExecuteResult? result = check\n+        mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS MYSQL_BBE\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS \" +\n+        \"MYSQL_BBE.BINARY_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE MYSQL_BBE.BINARY_TYPES\"+\n+        \"(row_id INTEGER NOT NULL, blob_type BLOB(1024), binary_type \"+\n+        \"BINARY (27), PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.BINARY_TYPES \"+\n+        \"(row_id, blob_type, binary_type) VALUES (1, \"+\n+        \"X'77736F322062616C6C6572696E6120626C6F6220746573742E',\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS \" +\n+        \"MYSQL_BBE.DATE_TIME_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE \"+\n+        \"MYSQL_BBE.DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, \"+\n+        \"datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"Insert into \" +\n+        \"MYSQL_BBE.DATE_TIME_TYPES (row_id, date_type, time_type, \"+\n+        \"timestamp_type, datetime_type) values (1,'2017-05-23','14:15:23',\"+\n+        \"'2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+\n+    check mysqlClient.close();\n+}\n+\n+public function main() {\n+    // Initialize the MySQL client.\n+    sql:Error? err = initializeTable();\n+    if (err is sql:Error) {\n+        io:println(\"Sample data initialization failed!\", err);\n+    } else {\n+        mysql:Client|sql:Error mysqlClient = new (user = dbUser,\n+            password = dbPassword, database = \"MYSQL_BBE\");\n+        if (mysqlClient is mysql:Client) {\n+            // Executes the complex data type queries.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NjU5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393196597", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Initializes MySQL clients with different options.\n          \n          \n            \n            //Initialize MySQL clients with different options.", "author": "praneesha", "createdAt": "2020-03-16T17:33:51Z", "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of the MySQL database. This is used in the below\n+// examples when initializing the MySQL connector. You need to change these\n+// based on your setup to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize the MySQL Client without any parameters. In that case,\n+    // all parameters will be using the default values:`localhost` for host,\n+    // `3306` for port, and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing the MySQL client without any \" +\n+            \"params. \", mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client by providing the username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client by providing the username, password,\n+    // and default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser,\n+        password = dbPassword);\n+    io:println(\"MySQL client with user and password created \" +\n+        \"with default host.\");\n+\n+    // Initialize the MySQL client by providing the host, username,\n+    // password, database, and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword,\n+        \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and \" +\n+        \"port created.\");\n+\n+    // Initialize the MySQL client by providing additional\n+    // MySQL database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default and the default mode is\n+        // `sql:SSL_PREFERRED`. SSL will be disabled, if `ssl` is assigned to\n+        // `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`,\n+            // `sql:SSL_REQUIRED`, `sql:SSL_VERIFY_CERT`, and\n+            // `sql:SSL_VERIFY_IDENTITY`. For details on each mode, go to\n+            // the MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize the MySQL client with MySQL database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword,\n+        options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share and use the database connections\n+    // efficiently. In the above samples, the global connection pool is\n+    // created and shared among all the database clients since the\n+    // `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the MySQL client with the specific connection pool.\n+    mysql:Client mysqlClient6 = check new (user = dbUser, password = dbPassword,\n+        options = mysqlOptions, connectionPool = connPool);\n+    io:println(\"MySQL client with connection pool created.\");\n+\n+    // Initialize the MySQL client with all the parameters.\n+    mysql:Client mysqlClient7 = check new (\"localhost\", dbUser, dbPassword,\n+        \"information_schema\", 3306, mysqlOptions, connPool);\n+\n+    // All properties are optional.\n+    // Hence, named attributes can be used specifically to assign\n+    // the attributes.\n+    mysql:Client mysqlClient8 = check new (host = \"localhost\",\n+        user = dbUser, password = dbPassword, database =\n+        \"information_schema\", port = 3306, options = mysqlOptions,\n+        connectionPool = connPool);\n+\n+    // Close the clients to release the resource\n+    // and destroy the connection pool.\n+    check mysqlClient2.close();\n+    check mysqlClient3.close();\n+    check mysqlClient4.close();\n+    check mysqlClient5.close();\n+    check mysqlClient6.close();\n+    check mysqlClient7.close();\n+    check mysqlClient8.close();\n+}\n+\n+//Initializes MySQL clients with different options.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NzA1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393197054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // However, in case if the stream is not fully consumed, stream should be\n          \n          \n            \n                // However, in case if the stream is not fully consumed, the stream should be", "author": "praneesha", "createdAt": "2020-03-16T17:34:33Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,147 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of the MySQL database. This is used in the below\n+// examples when initializing the MySQL connector. You need to change these\n+// based on your setup to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Customer full details: \", result);\n+        io:println(\"Customer first name: \", result[\"FirstName\"]);\n+        io:println(\"Customer last name: \", result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\", e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, stream should be", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NzM4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393197383", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Define a record to load the query result schema as shown in the below 'typedQuery' function.\n          \n          \n            \n            //Define a record to load the query result schema as shown in the 'typedQuery' function.", "author": "praneesha", "createdAt": "2020-03-16T17:35:04Z", "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,147 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of the MySQL database. This is used in the below\n+// examples when initializing the MySQL connector. You need to change these\n+// based on your setup to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Customer full details: \", result);\n+        io:println(\"Customer first name: \", result[\"FirstName\"]);\n+        io:println(\"Customer last name: \", result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\", e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, stream should be\n+    // closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as a record stream.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only a single row, the\n+    // `next()` operation is sufficient to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:println(\"Total rows in customer table : \", result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\", result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in the below 'typedQuery' function.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NzkxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393197916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the following command in Ballerina tools distribution for mock service.\n          \n          \n            \n            # Execute the below command in the Ballerina tools distribution to run the mock service.", "author": "praneesha", "createdAt": "2020-03-16T17:35:54Z", "path": "examples/proto-to-ballerina/proto_to_ballerina.out", "diffHunk": "@@ -1,4 +1,4 @@\n-# Run the following command in Ballerina tools distribution for mock service and stub generation.\n+# Run the following command in Ballerina tools distribution for mock service.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxMjkxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393412911", "bodyText": "This command is not to run the service. It used to generate the mock service", "author": "daneshk", "createdAt": "2020-03-17T02:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NzkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMzE2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393213168", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the service using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # Run the service using the following command and passing the path to the Ballerina home directory using the `--b7a.home` parameter.", "author": "pubudu91", "createdAt": "2020-03-16T18:01:30Z", "path": "examples/grpc-secured-unary/grpc_secured_unary_service.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'service' module.\n $ ballerina build service\n \n-# Run the service using the following command.\n-$ ballerina run target/bin/service.jar\n+# Run the service using the following command and passing Ballerina home path as system property.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMjkzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393212935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the following command in Ballerina tools distribution for client endpoint and stub generation.\n          \n          \n            \n            # Run the following command in the Ballerina tools distribution for client endpoint and stub generation.", "author": "praneesha", "createdAt": "2020-03-16T18:01:13Z", "path": "examples/proto-to-ballerina/proto_to_ballerina.out", "diffHunk": "@@ -1,4 +1,4 @@\n-# Run the following command in Ballerina tools distribution for mock service and stub generation.\n+# Run the following command in Ballerina tools distribution for mock service.\n $ ballerina grpc --input proto_to_ballerina.proto --mode service --output service\n \n # Run the following command in Ballerina tools distribution for client endpoint and stub generation.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMzU0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393213546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // A spread field is used with `address` to include the individual address\n          \n          \n            \n                // A spread field is used with the `address` to include the individual address", "author": "praneesha", "createdAt": "2020-03-16T18:01:57Z", "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field referring to another mapping value.\n+    // When a spread field is specified, all the fields of the relevant\n+    // mapping value are added to the new record value being created.\n+    // A spread field is used with `address` to include the individual address", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMzc2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393213763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // type) results in a mapping value, where the inferred type is a record type based\n          \n          \n            \n                // type) results in a mapping value where the inferred type is a record type based", "author": "praneesha", "createdAt": "2020-03-16T18:02:15Z", "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field referring to another mapping value.\n+    // When a spread field is specified, all the fields of the relevant\n+    // mapping value are added to the new record value being created.\n+    // A spread field is used with `address` to include the individual address\n+    // entries in `address` when creating `anne`.\n+    Student anne = {\n+        name: \"Anne\",\n+        age: 18,\n+        grades: {\n+            maths: 70,\n+            physics: 80,\n+            chemistry: 55\n+        },\n+        ...address\n+    };\n+    io:println(anne);\n+\n+    // Using a mapping constructor expression with `var` (i.e., no contextually-expected\n+    // type) results in a mapping value, where the inferred type is a record type based", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDAyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214023", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # This should log the json output returned by the REST endpoint.\n          \n          \n            \n            # This should log the JSON output returned by the REST endpoint.", "author": "praneesha", "createdAt": "2020-03-16T18:02:36Z", "path": "examples/secured-client-with-oauth2/secured_client_with_oauth2.out", "diffHunk": "@@ -1,4 +1,4 @@\n # To start the service, navigate to the directory that contains the\n # `.bal` file and execute the `ballerina run` command.\n $ ballerina run secured_client_with_oauth2.bal\n-# This should log the json output returned by the REST endpoint.\n\\ No newline at end of file\n+# This should log the json output returned by the REST endpoint.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214161", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Since resource configuration has overridden the required scopes to denote that\n          \n          \n            \n            # Since the resource configuration has overridden the required scopes to denote that", "author": "praneesha", "createdAt": "2020-03-16T18:02:47Z", "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.client.out", "diffHunk": "@@ -1,9 +1,9 @@\n # Since resource configuration has overridden the required scopes to denote that", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDQ4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214489", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # authorization.\n          \n          \n            \n            # during authorization.", "author": "praneesha", "createdAt": "2020-03-16T18:03:10Z", "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.client.out", "diffHunk": "@@ -1,9 +1,9 @@\n # Since resource configuration has overridden the required scopes to denote that\n # `scope2` is required to invoke `sayHello` resource, the invocation will fail\n # authorization.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDY1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Since `bob` has `scope2` the invocation will succeeded.\n          \n          \n            \n            # Since `bob` has `scope2`, the invocation will succeed.", "author": "praneesha", "createdAt": "2020-03-16T18:03:24Z", "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.client.out", "diffHunk": "@@ -1,9 +1,9 @@\n # Since resource configuration has overridden the required scopes to denote that\n # `scope2` is required to invoke `sayHello` resource, the invocation will fail\n # authorization.\n-$ curl -k -u generalUser1:password https://localhost:9090/hello/sayHello\n+$ curl -k -u alice:password1 https://localhost:9090/hello/sayHello\n Authorization failure\n \n-# Since `generalUser2` has `scope2` the invocation will succeeded.\n-$ curl -k -u generalUser2:password https://localhost:9090/hello/sayHello\n+# Since `bob` has `scope2` the invocation will succeeded.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215161", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # using `ballerina run` command.\n          \n          \n            \n            # using the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-16T18:04:03Z", "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.server.out", "diffHunk": "@@ -1,17 +1,17 @@\n-# At the command line, navigate to the directory that contains the\n-# `.bal` file. Ensure that the `sample-users.toml` file is populated correctly\n-# with the user information. If required, user passwords can be encrypted using\n-# the `ballerina encrypt` configuration encryption command.\n+# At the command line, navigate to the directory that contains the `.bal` file.\n+# Ensure that the `sample-users.toml` file is populated correctly with the user\n+# information. If required, user passwords can be encrypted using the\n+# `ballerina encrypt` configuration encryption command.\n $ echo '[\"b7a.users\"]\n-[\"b7a.users.generalUser1\"]\n-password=\"password\"\n+[\"b7a.users.alice\"]\n+password=\"password1\"\n scopes=\"scope1\"\n-[\"b7a.users.generalUser2\"]\n-password=\"password\"\n-scopes=\"scope2\"\n-' > sample-users.toml\n+[\"b7a.users.bob\"]\n+password=\"password2\"\n+scopes=\"scope2,scope3\"' > sample-users.toml\n \n-# Specify the configuration file name using the `--b7a.config.file=<path to configuration file>` property and run the\n-# program using `ballerina run` command.\n+# Specify the configuration file name using the\n+# `--b7a.config.file=<path to configuration file>` property and run the program\n+# using `ballerina run` command.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTQ0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215444", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The `fromString()` method in the ballerina/lang.int module returns the integer value represented by a\n          \n          \n            \n                // The `fromString()` method in the `ballerina/lang.int` module returns the integer value represented by a", "author": "praneesha", "createdAt": "2020-03-16T18:04:22Z", "path": "examples/type-conversion/type_conversion.bal", "diffHunk": "@@ -50,14 +50,14 @@ function createNumericValues() {\n \n     // The `fromString()` method in the ballerina/lang.int module returns the integer value represented by a", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTYzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The `fromString()` method in the ballerina/lang.float module returns the float value represented by a given\n          \n          \n            \n                // The `fromString()` method in the `ballerina/lang.float` module returns the float value represented by a given", "author": "praneesha", "createdAt": "2020-03-16T18:04:35Z", "path": "examples/type-conversion/type_conversion.bal", "diffHunk": "@@ -66,7 +66,7 @@ function createNumericValues() {\n \n     // The `fromString()` method in the ballerina/lang.float module returns the float value represented by a given", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTc5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215792", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The `fromString()` method in the ballerina/lang.decimal module returns the decimal value represented by a given\n          \n          \n            \n                // The `fromString()` method in the `ballerina/lang.decimal` module returns the decimal value represented by a given", "author": "praneesha", "createdAt": "2020-03-16T18:04:48Z", "path": "examples/type-conversion/type_conversion.bal", "diffHunk": "@@ -75,7 +75,7 @@ function createNumericValues() {\n \n     // The `fromString()` method in the ballerina/lang.decimal module returns the decimal value represented by a given", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjA4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216089", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-16T18:05:13Z", "path": "examples/websocket-basic-sample/websocket_basic_sample.out", "diffHunk": "@@ -1,9 +1,6 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and use the `ballerina build` command.\n-$ ballerina build websocket_basic_sample.bal\n-\n-# Run the sample using the `run` command on the jar file generated:\n-$ ballerina run  websocket_basic_sample-executable.jar\n+# `.bal` file and use the `ballerina run` command.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216349", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-16T18:05:33Z", "path": "examples/websocket-chat-application/websocket_chat_application.out", "diffHunk": "@@ -1,9 +1,6 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and use the `ballerina build` command.\n-$ ballerina build websocket_chat_application.bal\n-\n-# Run the sample using the `run` command on the jar file generated:\n-$ ballerina run websocket_chat_application-executable.jar\n+# `.bal` file and use the `ballerina run` command.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjUyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216529", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-16T18:05:45Z", "path": "examples/websocket-client/websocket_client.out", "diffHunk": "@@ -1,7 +1,5 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and execute the `ballerina build` command.\n-$ ballerina build websocket_client.bal\n+# `.bal` file and use the `ballerina run` command.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjY0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216644", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-16T18:05:55Z", "path": "examples/websocket-proxy-server/websocket_proxy_server.out", "diffHunk": "@@ -1,9 +1,6 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and use the `ballerina build` command.\n-$ ballerina build websocket_proxy_server.bal\n-\n-# Run the sample using the `run` command on the jar file generated:\n-$ ballerina run websocket_proxy_server-executable.jar\n+# `.bal` file and use the `ballerina run` command.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjc2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216760", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "author": "praneesha", "createdAt": "2020-03-16T18:06:05Z", "path": "examples/websocket-retry/websocket_retry.out", "diffHunk": "@@ -1,5 +1,5 @@\n-# To start the services, navigate to the directory that contains the\n-# `.bal` files and use the `ballerina run` command.\n+# To start the service, navigate to the directory that contains the\n+# `.bal` file and use the `ballerina run` command.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea5a9af8cde05ca836376663baea470b27297e19", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea5a9af8cde05ca836376663baea470b27297e19", "message": "Refactor the BBE", "committedDate": "2020-03-16T18:06:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDcxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393220719", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the client using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # Run the client using the following command and passing the path to the Ballerina home directory using the `--b7a.home` parameter.", "author": "pubudu91", "createdAt": "2020-03-16T18:10:54Z", "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'client' module.\n $ ballerina build client\n \n-# Run the client using the following command.\n-$ ballerina run target/bin/client.jar\n+# Run the client using the following command and passing Ballerina home path as system property.", "originalCommit": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4d41acf70cde1ac70b7a0aee7bece1136a67350c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d41acf70cde1ac70b7a0aee7bece1136a67350c", "message": "Apply suggestions for security related BBEs\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-16T18:11:44Z", "type": "commit"}]}