{"pr_number": 27516, "pr_title": "Align error-constructor-expr with spec", "pr_createdAt": "2020-12-16T05:47:44Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516", "timeline": [{"oid": "05e9218eea872880375bbab2922d3acdb108227c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/05e9218eea872880375bbab2922d3acdb108227c", "message": "Fix failures due to change", "committedDate": "2020-12-18T13:44:42Z", "type": "forcePushed"}, {"oid": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/83bdc8595e0270ddd19aaf0d48517a430cb0296a", "message": "Fix failure tests", "committedDate": "2021-01-06T03:45:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MDExNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552360117", "bodyText": "Shall we add getters for at least positional args and named args?", "author": "MaryamZi", "createdAt": "2021-01-06T04:17:58Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/ErrorConstructorExpressionNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent error-constructor-expr.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface ErrorConstructorExpressionNode extends ExpressionNode {", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTUyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529528", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MDExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTA3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552361078", "bodyText": "Shall we extract errorConstructorExpr.positionalArgs out to a variable?", "author": "MaryamZi", "createdAt": "2021-01-06T04:22:38Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1343,27 +1339,26 @@ private void createWait(BLangWaitExpr waitExpr) {\n         this.env.enclBB = thenBB;\n     }\n \n-    private void createErrorConstructorInvocation(BLangInvocation invocationExpr) {\n-        // Create a temporary variable to store the error.\n-        BIRVariableDcl tempVarError = new BIRVariableDcl(invocationExpr.type,\n+    @Override\n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {\n+        BIRVariableDcl tempVarError = new BIRVariableDcl(errorConstructorExpr.type,\n                 this.env.nextLocalVarId(names), VarScope.FUNCTION, VarKind.TEMP);\n \n         this.env.enclFunc.localVars.add(tempVarError);\n         BIROperand lhsOp = new BIROperand(tempVarError);\n \n-        // visit message, cause and detail expressions\n         this.env.targetOperand = lhsOp;\n-        invocationExpr.requiredArgs.get(0).accept(this);\n+        errorConstructorExpr.positionalArgs.get(0).accept(this);", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTUxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529514", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjY0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552362648", "bodyText": "rewriteExprs seems to update the list itself, so we can just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    errorConstructorExpr.positionalArgs = rewriteExprs(errorConstructorExpr.positionalArgs);\n          \n          \n            \n                    rewriteExprs(errorConstructorExpr.positionalArgs);\n          \n      \n    \n    \n  \n\nright?", "author": "MaryamZi", "createdAt": "2021-01-06T04:29:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -809,6 +810,15 @@ public void visit(BLangInvocation iExpr) {\n         result = iExpr;\n     }\n \n+    @Override\n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {\n+        errorConstructorExpr.positionalArgs = rewriteExprs(errorConstructorExpr.positionalArgs);", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTQ5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529498", "bodyText": "Yes, fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2Mjc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552362783", "bodyText": "Shouldn't we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (BLangNamedArgsExpression namedArgExpr : errorConstructorExpr.namedArgs) {\n          \n          \n            \n                        namedArgExpr.expr = rewriteExpr(namedArgExpr.expr);\n          \n          \n            \n                    }\n          \n          \n            \n                    rewriteExprs(errorConstructorExpr.namedArgs);\n          \n      \n    \n    \n  \n\ninstead?", "author": "MaryamZi", "createdAt": "2021-01-06T04:29:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -809,6 +810,15 @@ public void visit(BLangInvocation iExpr) {\n         result = iExpr;\n     }\n \n+    @Override\n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {\n+        errorConstructorExpr.positionalArgs = rewriteExprs(errorConstructorExpr.positionalArgs);\n+        for (BLangNamedArgsExpression namedArgExpr : errorConstructorExpr.namedArgs) {\n+            namedArgExpr.expr = rewriteExpr(namedArgExpr.expr);\n+        }", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTQ4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529483", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2Mjc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MzM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552363384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (errorConstructorExpr.namedArgs.size() > 0) {\n          \n          \n            \n                    if (!errorConstructorExpr.namedArgs.isEmpty()) {", "author": "MaryamZi", "createdAt": "2021-01-06T04:32:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2647,6 +2648,13 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n     }\n \n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {\n+        analyzeExprs(errorConstructorExpr.positionalArgs);\n+        if (errorConstructorExpr.namedArgs.size() > 0) {", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTQ2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529465", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MzM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NDk5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552364990", "bodyText": "We need to implement the visits here, right?\ntype MyError error<record { int i; }>;\n\npublic function main() {\n    string message;\n    int x;\n\n    error err = error MyError(message, i = x);\n}\nThis should have resulted in compilation errors for uninitialized variables in the error constructor, but results in a bad, sad error at runtime instead.\n[2021-01-06 10:06:40,818] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat io.ballerina.runtime.api.values.BError.<init>(BError.java:37)\n\tat io.ballerina.runtime.internal.values.ErrorValue.<init>(ErrorValue.java:81)\n\tat test.main(test.bal:7)\n\tat $_init.$lambda$main$(.)\n\tat io.ballerina.runtime.internal.scheduling.SchedulerItem.execute(Scheduler.java:546)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.run(Scheduler.java:283)\n\tat io.ballerina.runtime.internal.scheduling.Scheduler.runSafely(Scheduler.java:251)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "author": "MaryamZi", "createdAt": "2021-01-06T04:39:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -1027,6 +1028,11 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n     }\n \n+    @Override\n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NTA0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552365048", "bodyText": "Please add tests for this too.", "author": "MaryamZi", "createdAt": "2021-01-06T04:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NDk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNTQ1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552805456", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NDk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NTI1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552365253", "bodyText": "Shall we remove only the symbol.getKind() == SymbolKind.ERROR_CONSTRUCTOR part here?", "author": "MaryamZi", "createdAt": "2021-01-06T04:40:27Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsolationAnalyzer.java", "diffHunk": "@@ -1619,10 +1630,6 @@ private void analyzeInvocation(BLangInvocation invocationExpr) {\n         }\n \n         BInvokableSymbol symbol = (BInvokableSymbol) invocationExpr.symbol;\n-        if (symbol == null || symbol.getKind() == SymbolKind.ERROR_CONSTRUCTOR) {", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTQzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529431", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NTI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NjIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552366227", "bodyText": "@rdhananjaya, hope this change is sufficient for taint analysis.", "author": "MaryamZi", "createdAt": "2021-01-06T04:44:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java", "diffHunk": "@@ -1196,12 +1197,28 @@ public void visit(BLangInvocation invocationExpr) {\n     }\n \n     @Override\n-    public void visit(BLangInvocation.BLangActionInvocation actionInvocation) {\n-        this.visit((BLangInvocation) actionInvocation);\n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA5NjM1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r553096354", "bodyText": "Yes this should be enough. If any of the arguments to an error constructor is tainted, then the constructed error is tainted.\nWe have a test case covering this TaintedStatusPropagationTest.testErrorNegative.\n@KavinduZoysa shall we add another test covering an error constructor with a type.", "author": "rdhananjaya", "createdAt": "2021-01-07T04:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NjIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2Nzc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552367764", "bodyText": "I assume we don't need this error because the missing positional arg is handled at parser level? Shall we remove this then?", "author": "MaryamZi", "createdAt": "2021-01-06T04:51:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5002,123 +5068,42 @@ private boolean isFunctionPointer(BSymbol funcSymbol) {\n                 && (funcSymbol.flags & Flags.NATIVE) != Flags.NATIVE;\n     }\n \n-    private void checkErrorConstructorInvocation(BLangInvocation iExpr) {\n-        BErrorType errorType = (BErrorType) iExpr.symbol.type;\n-\n-        // handle var e = errorCtor();\n-        if (this.expType == symTable.noType) {\n-            this.expType = errorType;\n-        }\n-\n-        if (!types.isAssignable(errorType, this.expType)) {\n-            dlog.error(iExpr.pos, DiagnosticErrorCode.INCOMPATIBLE_TYPES, this.expType, errorType);\n-            resultType = symTable.semanticError;\n-        }\n-\n-        if (iExpr.argExprs.isEmpty() && !iExpr.requiredArgs.isEmpty()) {\n-            // This is a special condition that occur due to typechecking from desugar phase.\n-            // This only happen for invocations with in object init functions.\n-            // It's safe to exit from here as this already has being typechecked.\n-            resultType = iExpr.type;\n-            return;\n-        }\n-        if (iExpr.argExprs.isEmpty()) {\n-            dlog.error(iExpr.pos, DiagnosticErrorCode.MISSING_REQUIRED_ARG_ERROR_MESSAGE);", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529396", "bodyText": "Removed", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2Nzc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2OTMzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552369335", "bodyText": "Shall we change namedArgs to something like detailArgs and remove the errorDetail field? Then at desugar remove everything from detailArgs and add the created errorDetail expession as the only arg in the detailArgs list?\nWe do something similar for rest args too.", "author": "MaryamZi", "createdAt": "2021-01-06T04:57:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangErrorConstructorExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ErrorConstructorExpressionNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUserDefinedType;\n+\n+import java.util.List;\n+\n+/**\n+ * Implementation of error-constructor-expr.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangErrorConstructorExpr extends BLangExpression implements ErrorConstructorExpressionNode {\n+    public BLangUserDefinedType errorTypeRef;\n+    public List<BLangExpression> positionalArgs;\n+    public List<BLangNamedArgsExpression> namedArgs;\n+    // This is added to store namedArgs.\n+    public BLangExpression errorDetail;", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTM2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529364", "bodyText": "Then we have to change List<BLangNamedArgsExpression> to List<BLangExpression>", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2OTMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2OTQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552369438", "bodyText": "Doesn't this and error.missing.arg.in.error.constructor reflect the same error?", "author": "MaryamZi", "createdAt": "2021-01-06T04:57:54Z", "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -287,3 +287,4 @@ error.rest.arg.in.error.constructor=rest arg in error constructor\n error.additional.positional.arg.in.error.constructor=additional positional arg in error constructor\n error.missing.arg.in.error.constructor=missing arg in error constructor\n error.missing.arg.within.parenthesis=missing arg within parenthesis\n+error.missing.positional.arg.in.error.constructor=missing positional arg in error constructor", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTM0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529347", "bodyText": "Removed the previous error", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2OTQzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3MDEzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552370136", "bodyText": "Shall we use a data provider instead?", "author": "MaryamZi", "createdAt": "2021-01-06T05:00:59Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/errorconstructorexpr/ErrorConstructorExprTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.expressions.errorconstructorexpr;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test error-constructor-expr.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ErrorConstructorExprTest {\n+\n+    private CompileResult result, negativeResult;\n+\n+    @BeforeClass\n+    public void setUp() {\n+        result = BCompileUtil.compile(\"test-src/expressions/errorconstructorexpr/error-constructor-expr.bal\");\n+        negativeResult = BCompileUtil.compile(\"test-src/expressions/errorconstructorexpr/error-constructor-expr\" +\n+                \"-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr1() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr1\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr2() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr2\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr3() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr3\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr4() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr4\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr5() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr5\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr6() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr6\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr7() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr7\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr8() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr8\");\n+    }\n+\n+    @Test\n+    public void testErrorConstructorExpr9() {\n+        BRunUtil.invoke(result, \"testErrorConstructorExpr9\");\n+    }", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTMwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529309", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3MDEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3MTczOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552371739", "bodyText": "Extra new line.", "author": "MaryamZi", "createdAt": "2021-01-06T05:07:49Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/errorconstructorexpr/error-constructor-expr-negative.bal", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function testMissingParamsNegative() {\n+    error e1 = error(); // missing arg within parenthesis\n+    error e2 = error(2); // expected 'string', found 'int'\n+    error e3 = error(error(\"Message\")); // expected 'string', found 'error'\n+    error e4 = error(\"M1\", \"M2\"); // expected 'error?', found 'string'\n+    error e5 = error(\"M\", error(\"M1\"), \"c = 2000\"); // additional positional arg in error constructor\n+", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTI5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529292", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3MTczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3MTk4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552371989", "bodyText": "Can we add similar tests for error constructors with type refs too?", "author": "MaryamZi", "createdAt": "2021-01-06T05:08:43Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/errorconstructorexpr/error-constructor-expr-negative.bal", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function testMissingParamsNegative() {\n+    error e1 = error(); // missing arg within parenthesis\n+    error e2 = error(2); // expected 'string', found 'int'\n+    error e3 = error(error(\"Message\")); // expected 'string', found 'error'\n+    error e4 = error(\"M1\", \"M2\"); // expected 'error?', found 'string'\n+    error e5 = error(\"M\", error(\"M1\"), \"c = 2000\"); // additional positional arg in error constructor", "originalCommit": "83bdc8595e0270ddd19aaf0d48517a430cb0296a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyOTI2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552529267", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-06T11:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3MTk4OQ=="}], "type": "inlineReview"}, {"oid": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28ebd66ac65084dc2672998ca9d4634ac4cb436e", "message": "Fix review suggestions", "committedDate": "2021-01-06T11:53:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1MjM4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552552389", "bodyText": "Other visit implementations seem to set the scope before calling acceptNode, do we need to do the same here?\n@nadeeshaan", "author": "MaryamZi", "createdAt": "2021-01-06T12:19:58Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/EnvironmentResolver.java", "diffHunk": "@@ -380,6 +382,17 @@ public void visit(BLangInvocation invocationNode) {\n         // eg: string modifiedStr = sampleStr.replace(\"hello\", \"Hello\").<cursor>toLower();\n     }\n \n+    @Override\n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {\n+        for (BLangExpression positionalArg : errorConstructorExpr.positionalArgs) {\n+            this.acceptNode(positionalArg, this.symbolEnv);", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzA2ODMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r553068337", "bodyText": "Doesn't it handle within the expression itself? I wonder whether the logic here is to just route to the expression visitor and handle the scoping there?", "author": "nadeeshaan", "createdAt": "2021-01-07T02:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1MjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1MzE0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552553146", "bodyText": "Shall we add getters instead?\nArg is repeated in the second method btw.", "author": "MaryamZi", "createdAt": "2021-01-06T12:20:58Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/ErrorConstructorExpressionNode.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent error-constructor-expr.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface ErrorConstructorExpressionNode extends ExpressionNode {\n+\n+    void addPositionalArg(ExpressionNode positionalArg);\n+\n+    void addNamedArgArg(NamedArgNode namedArg);", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNTk5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552805990", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1MzE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1MzgzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552553835", "bodyText": "Shall we update the subsequent codes?", "author": "MaryamZi", "createdAt": "2021-01-06T12:21:56Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticErrorCode.java", "diffHunk": "@@ -93,7 +93,6 @@\n     POSITIONAL_ARG_DEFINED_AFTER_NAMED_ARG(\"BCE2061\", \"positional.arg.defined.after.named.arg\"),\n     REST_ARG_DEFINED_AFTER_NAMED_ARG(\"BCE2062\", \"rest.arg.defined.after.named.arg\"),\n     MISSING_REQUIRED_PARAMETER(\"BCE2063\", \"missing.required.parameter\"),\n-    MISSING_REQUIRED_ARG_ERROR_MESSAGE(\"BCE2064\", \"missing.required.parameter.error.message\"),", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNjA2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552806068", "bodyText": "Updated", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1MzgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1NzAwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552557007", "bodyText": "Is the arg correct? Shouldn't we use literal here?", "author": "MaryamZi", "createdAt": "2021-01-06T12:25:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -8123,15 +8097,19 @@ private void createLHSSafeNavigation(List<BLangStatement> stmts, BLangExpression\n                 literal.value = ERROR_REASON_NULL_REFERENCE_ERROR;\n                 literal.type = symTable.stringType;\n \n-                BLangInvocation errorCtorInvocation = (BLangInvocation) TreeBuilder.createInvocationNode();\n-                errorCtorInvocation.pos = expr.pos;\n-                errorCtorInvocation.argExprs.add(literal);\n-                errorCtorInvocation.requiredArgs.add(literal);\n-                errorCtorInvocation.type = symTable.errorType;\n-                errorCtorInvocation.symbol = symTable.errorConstructor;\n+                BLangErrorConstructorExpr errorConstructorExpr =\n+                        (BLangErrorConstructorExpr) TreeBuilder.createErrorConstructorExpressionNode();\n+                BSymbol symbol = symResolver.lookupMainSpaceSymbolInPackage(errorConstructorExpr.pos, env,\n+                        names.fromString(\"\"), names.fromString(\"error\"));\n+                errorConstructorExpr.type = symbol.type;\n+                errorConstructorExpr.pos = expr.pos;\n+                List<BLangExpression> positionalArgs = new ArrayList<>();\n+                positionalArgs.add(createStringLiteral(errorConstructorExpr.pos,\n+                        \"{\" + RuntimeConstants.MAP_LANG_LIB + \"}InvalidKey\"));", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNjEzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552806131", "bodyText": "yes. fixed.", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU1NzAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2MTg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552561867", "bodyText": "Wouldn't it be clearer if we define two new lists here, populate them in the for loop, and then set\n        errorConstructorExpr.positionalArgs = positionalArgs;\n        errorConstructorExpr.namedArgs = namedArgs;\nbefore returning errorConstructorExpr?", "author": "MaryamZi", "createdAt": "2021-01-06T12:31:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1994,8 +1995,24 @@ public BLangNode transform(FunctionCallExpressionNode functionCallNode) {\n \n     @Override\n     public BLangNode transform(ErrorConstructorExpressionNode errorConstructorExprNode) {\n-        return createBLangInvocation(errorConstructorExprNode.errorKeyword(), errorConstructorExprNode.arguments(),\n-                getPosition(errorConstructorExprNode), false);\n+        BLangErrorConstructorExpr errorConstructorExpr =\n+                (BLangErrorConstructorExpr) TreeBuilder.createErrorConstructorExpressionNode();\n+        errorConstructorExpr.pos = getPosition(errorConstructorExprNode);\n+        if (errorConstructorExprNode.typeReference().isPresent()) {\n+            errorConstructorExpr.errorTypeRef =\n+                    (BLangUserDefinedType) createTypeNode(errorConstructorExprNode.typeReference().get());\n+        }\n+\n+        List<BLangExpression> positionalArgs = errorConstructorExpr.positionalArgs;\n+        List<BLangNamedArgsExpression> namedArgs = errorConstructorExpr.namedArgs;", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNjE4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552806183", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2MTg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2MjQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552562497", "bodyText": "Shouldn't this be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (errorConstructorExpr.namedArgs.isEmpty()) {\n          \n          \n            \n                    if (!errorConstructorExpr.namedArgs.isEmpty()) {\n          \n      \n    \n    \n  \n\nPlease check if we can add a test for this too.", "author": "MaryamZi", "createdAt": "2021-01-06T12:32:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -2647,6 +2648,13 @@ public void visit(BLangInvocation invocationExpr) {\n         }\n     }\n \n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {\n+        analyzeExprs(errorConstructorExpr.positionalArgs);\n+        if (errorConstructorExpr.namedArgs.isEmpty()) {", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNjIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552806213", "bodyText": "Added", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2MjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2MzU4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552563584", "bodyText": "Shouldn't we return here? Or it gets overridden in L2746?", "author": "MaryamZi", "createdAt": "2021-01-06T12:33:37Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2674,6 +2674,78 @@ public void visit(BLangInvocation iExpr) {\n         }\n     }\n \n+    public void visit(BLangErrorConstructorExpr errorConstructorExpr) {\n+        String typeName = \"\";\n+        String pkgAlias = \"\";\n+        if (errorConstructorExpr.errorTypeRef == null) {\n+            typeName = \"error\";\n+        } else {\n+            typeName = errorConstructorExpr.errorTypeRef.typeName.value;\n+            pkgAlias = errorConstructorExpr.errorTypeRef.pkgAlias.value;\n+        }\n+\n+        BSymbol symbol = symResolver.lookupMainSpaceSymbolInPackage(errorConstructorExpr.pos, env,\n+                names.fromString(pkgAlias), names.fromString(typeName));\n+        if (symbol == symTable.notFoundSymbol || symbol.tag != SymTag.ERROR) {\n+            dlog.error(errorConstructorExpr.pos, DiagnosticErrorCode.UNDEFINED_ERROR_TYPE_DESCRIPTOR, typeName);\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+        BErrorType errorConstructorType = (BErrorType) symbol.type;\n+        if (this.expType == symTable.noType) {\n+            this.expType = errorConstructorType;\n+        }\n+\n+        if (!types.isAssignable(errorConstructorType, this.expType)) {\n+            dlog.error(errorConstructorExpr.pos, DiagnosticErrorCode.INCOMPATIBLE_TYPES, this.expType,\n+                    errorConstructorType);\n+            resultType = symTable.semanticError;\n+        }\n+\n+        if (errorConstructorExpr.positionalArgs.isEmpty()) {\n+            resultType = symTable.semanticError;\n+            return;\n+        }\n+        checkExpr(errorConstructorExpr.positionalArgs.get(0), this.env, symTable.stringType);\n+        if (errorConstructorExpr.positionalArgs.size() > 1) {\n+            checkExpr(errorConstructorExpr.positionalArgs.get(1), this.env, symTable.errorOrNilType);\n+        }\n+\n+        BType detailType = errorConstructorType.detailType;\n+        if (detailType.tag == TypeTags.MAP) {\n+            BType errorDetailTypeConstraint = ((BMapType) detailType).constraint;\n+            for (BLangNamedArgsExpression namedArgExpr: getProvidedErrorDetails(errorConstructorExpr)) {\n+                // TODO : check the assignability of the type of named-arg to value:Clonable\n+                checkExpr(namedArgExpr, env);\n+                if (!types.isAssignable(namedArgExpr.expr.type, errorDetailTypeConstraint)) {\n+                    dlog.error(namedArgExpr.pos, DiagnosticErrorCode.INVALID_ERROR_DETAIL_ARG_TYPE, namedArgExpr.name,\n+                            errorDetailTypeConstraint, namedArgExpr.expr.type);\n+                    resultType = symTable.semanticError;\n+                }\n+            }\n+\n+            if (resultType == symTable.semanticError) {\n+                return;\n+            }\n+        } else if (detailType.tag == TypeTags.RECORD) {\n+            BRecordType targetErrorDetailRec = (BRecordType) errorConstructorType.detailType;\n+            BRecordType recordType = createErrorDetailRecordType(errorConstructorExpr, targetErrorDetailRec);\n+            if (resultType == symTable.semanticError) {\n+                return;\n+            }\n+\n+            if (!types.isAssignable(recordType, targetErrorDetailRec)) {\n+                reportErrorDetailMissmatchError(errorConstructorExpr, targetErrorDetailRec, recordType);\n+                resultType = symTable.semanticError;\n+                return;\n+            }\n+        } else {\n+            resultType = symTable.semanticError;", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNjIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552806237", "bodyText": "Fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2MzU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2NDY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552564650", "bodyText": "Store the detail mapping created from the named args, right?", "author": "MaryamZi", "createdAt": "2021-01-06T12:34:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangErrorConstructorExpr.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ErrorConstructorExpressionNode;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.NamedArgNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUserDefinedType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of error-constructor-expr.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangErrorConstructorExpr extends BLangExpression implements ErrorConstructorExpressionNode {\n+    public BLangUserDefinedType errorTypeRef;\n+    public List<BLangExpression> positionalArgs = new ArrayList<>();\n+    public List<BLangNamedArgsExpression> namedArgs = new ArrayList<>();\n+    // This is added to store namedArgs and it is used only at desugar.", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNjI3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552806272", "bodyText": "Yes, fixed", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2NDY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2NDc4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552564780", "bodyText": "Extra Arg suffix.", "author": "MaryamZi", "createdAt": "2021-01-06T12:35:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangErrorConstructorExpr.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ErrorConstructorExpressionNode;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.NamedArgNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+import org.wso2.ballerinalang.compiler.tree.types.BLangUserDefinedType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Implementation of error-constructor-expr.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangErrorConstructorExpr extends BLangExpression implements ErrorConstructorExpressionNode {\n+    public BLangUserDefinedType errorTypeRef;\n+    public List<BLangExpression> positionalArgs = new ArrayList<>();\n+    public List<BLangNamedArgsExpression> namedArgs = new ArrayList<>();\n+    // This is added to store namedArgs and it is used only at desugar.\n+    public BLangExpression errorDetail;\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.ERROR_CONSTRUCTOR_EXPRESSION;\n+    }\n+\n+    @Override\n+    public void addPositionalArg(ExpressionNode positionalArg) {\n+        positionalArgs.add((BLangExpression) positionalArg);\n+    }\n+\n+    @Override\n+    public void addNamedArgArg(NamedArgNode namedArg) {", "originalCommit": "28ebd66ac65084dc2672998ca9d4634ac4cb436e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgwNjM0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27516#discussion_r552806345", "bodyText": "Removed", "author": "KavinduZoysa", "createdAt": "2021-01-06T16:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2NDc4MA=="}], "type": "inlineReview"}, {"oid": "adef35d29c930525fe4cfac9aa2da3b7a332aa08", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/adef35d29c930525fe4cfac9aa2da3b7a332aa08", "message": "Add new nodes", "committedDate": "2021-01-06T16:36:07Z", "type": "commit"}, {"oid": "6dad1f510eea6f98c7fc339ad8d91175f27e0802", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6dad1f510eea6f98c7fc339ad8d91175f27e0802", "message": "Add compiler phases", "committedDate": "2021-01-06T16:36:07Z", "type": "commit"}, {"oid": "555778a4b6a9d5a1a6a9e31fa9c915a9fc7ee3e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/555778a4b6a9d5a1a6a9e31fa9c915a9fc7ee3e3", "message": "Add new tests", "committedDate": "2021-01-06T16:36:07Z", "type": "commit"}, {"oid": "de4e1983d760f6818e6d91d96fa4699ee357086f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/de4e1983d760f6818e6d91d96fa4699ee357086f", "message": "Fix failures due to change", "committedDate": "2021-01-06T16:36:07Z", "type": "commit"}, {"oid": "db0868dc0cff8a7006fd7f3c572443cf2969dbb9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db0868dc0cff8a7006fd7f3c572443cf2969dbb9", "message": "Fix check-styles", "committedDate": "2021-01-06T16:36:07Z", "type": "commit"}, {"oid": "1f0ce75bb837222256c18e41c32b1843b6d41732", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f0ce75bb837222256c18e41c32b1843b6d41732", "message": "Rename test class", "committedDate": "2021-01-06T16:36:07Z", "type": "commit"}, {"oid": "a32e845f0b381cf84971d598284b740be4af5fe9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a32e845f0b381cf84971d598284b740be4af5fe9", "message": "Fix langlib test failures", "committedDate": "2021-01-06T16:36:07Z", "type": "commit"}, {"oid": "367e8fd46c726e884d752623776e312cf3e700b0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/367e8fd46c726e884d752623776e312cf3e700b0", "message": "Fix SymbolBIRTest", "committedDate": "2021-01-06T16:51:04Z", "type": "commit"}, {"oid": "5047209f8d9d1a3358ac903ee911f029afec071d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5047209f8d9d1a3358ac903ee911f029afec071d", "message": "Add missing visit() methods for error constructor", "committedDate": "2021-01-06T16:51:04Z", "type": "commit"}, {"oid": "435dd8a0c4909940e47ea407af4f53a33ee7564a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/435dd8a0c4909940e47ea407af4f53a33ee7564a", "message": "Fix failure tests", "committedDate": "2021-01-06T16:51:04Z", "type": "commit"}, {"oid": "b30b92c662478552117b5829803e36b2f9d4487b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b30b92c662478552117b5829803e36b2f9d4487b", "message": "Add visit method to EnvironmentResolver", "committedDate": "2021-01-06T16:51:04Z", "type": "commit"}, {"oid": "4fc081a971b8a1960ddf14024a8a90d8c1f586a9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fc081a971b8a1960ddf14024a8a90d8c1f586a9", "message": "Fix failure tests", "committedDate": "2021-01-06T16:51:04Z", "type": "commit"}, {"oid": "7429a61e634fe9bdf171f08682b0eedfec6b7688", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7429a61e634fe9bdf171f08682b0eedfec6b7688", "message": "fix failing completion issues", "committedDate": "2021-01-06T16:51:04Z", "type": "commit"}, {"oid": "22369db1aeb50f6107b5022204eb5667656c329e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22369db1aeb50f6107b5022204eb5667656c329e", "message": "Fix review suggestions", "committedDate": "2021-01-06T16:51:04Z", "type": "forcePushed"}, {"oid": "33323eb72d9da302b5b3c373065877f07538366e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33323eb72d9da302b5b3c373065877f07538366e", "message": "Fix review suggestions", "committedDate": "2021-01-06T16:58:54Z", "type": "forcePushed"}, {"oid": "ea094ecc68049f927ef71766132f5c0ef75c09ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea094ecc68049f927ef71766132f5c0ef75c09ae", "message": "Fix review suggestions", "committedDate": "2021-01-06T17:14:40Z", "type": "forcePushed"}, {"oid": "313cb1a6116a2360f8fe6f08ec2c7d10a2496ef9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/313cb1a6116a2360f8fe6f08ec2c7d10a2496ef9", "message": "Fix review suggestions", "committedDate": "2021-01-06T17:31:41Z", "type": "commit"}, {"oid": "313cb1a6116a2360f8fe6f08ec2c7d10a2496ef9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/313cb1a6116a2360f8fe6f08ec2c7d10a2496ef9", "message": "Fix review suggestions", "committedDate": "2021-01-06T17:31:41Z", "type": "forcePushed"}]}