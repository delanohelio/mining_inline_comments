{"pr_number": 22189, "pr_title": "Add missing HTTP API docs", "pr_createdAt": "2020-03-25T14:52:38Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189", "timeline": [{"oid": "41ecda60d9c5ffd566b49de530a73373a1ee8d61", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41ecda60d9c5ffd566b49de530a73373a1ee8d61", "message": "Add HTTP missing docs", "committedDate": "2020-03-25T14:49:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNzAyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397927022", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + scopes - Array of scopes\n          \n          \n            \n                # + scopes - Array of scopes or Array of arrays of scopes", "author": "ldclakmal", "createdAt": "2020-03-25T15:04:41Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -23,6 +23,10 @@ public type AuthzFilter object {\n     public AuthzHandler authzHandler;\n     public Scopes? scopes;\n \n+    # Initializes the `AuthzFilter` object.\n+    #\n+    # + authzHandler - `AuthzHandler` instance for handling authorization\n+    # + scopes - Array of scopes", "originalCommit": "41ecda60d9c5ffd566b49de530a73373a1ee8d61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyODAxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397928015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + authProvider - The AuthProvider instance\n          \n          \n            \n                # + authProvider - The `InboundAuthProvider` instance or the `OutboundAuthProvider` instance", "author": "ldclakmal", "createdAt": "2020-03-25T15:05:59Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal", "diffHunk": "@@ -26,6 +26,9 @@ public type BasicAuthHandler object {\n \n     public auth:InboundAuthProvider|auth:OutboundAuthProvider authProvider;\n \n+    # Initializes the `BasicAuthHandler` object.\n+    #\n+    # + authProvider - The AuthProvider instance", "originalCommit": "41ecda60d9c5ffd566b49de530a73373a1ee8d61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTE2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397929161", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + authHandlers - An array of authentication handlers\n          \n          \n            \n                # + authHandlers - An array of inbound authentication handlers", "author": "ldclakmal", "createdAt": "2020-03-25T15:07:31Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authn_filter.bal", "diffHunk": "@@ -21,6 +21,9 @@ public type AuthnFilter object {\n \n     public InboundAuthHandlers authHandlers;\n \n+    # Initializes the `AuthnFilter` object.\n+    #\n+    # + authHandlers - An array of authentication handlers", "originalCommit": "41ecda60d9c5ffd566b49de530a73373a1ee8d61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9be47667e900beebe3e2f810bb3c1a58830e275", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9be47667e900beebe3e2f810bb3c1a58830e275", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-03-25T15:07:34Z", "type": "commit"}, {"oid": "50913e0b5bcf6737ed6ff1c2b416e4fcd3f79272", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50913e0b5bcf6737ed6ff1c2b416e4fcd3f79272", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/basic_auth_handler.bal\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-03-25T15:07:59Z", "type": "commit"}, {"oid": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authn_filter.bal\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-03-25T15:11:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NDc4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397974782", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Filter function implementation which tries to authenticate the response which is defined to achieve object\n          \n          \n            \n                # The `Filter` function implementation, which tries to authenticate the response, which is defined to achieve", "author": "praneesha", "createdAt": "2020-03-25T16:03:56Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authn_filter.bal", "diffHunk": "@@ -44,6 +47,12 @@ public type AuthnFilter object {\n         return isAuthnSuccessful(caller, authenticated);\n     }\n \n+    # Filter function implementation which tries to authenticate the response which is defined to achieve object", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NTI4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397975283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # structural equility.\n          \n          \n            \n                # object-structural equality.", "author": "praneesha", "createdAt": "2020-03-25T16:04:35Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authn_filter.bal", "diffHunk": "@@ -44,6 +47,12 @@ public type AuthnFilter object {\n         return isAuthnSuccessful(caller, authenticated);\n     }\n \n+    # Filter function implementation which tries to authenticate the response which is defined to achieve object\n+    # structural equility.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NTY0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397975647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + scopes - Array of scopes or Array of arrays of scopes\n          \n          \n            \n                # + scopes - Array of scopes or array of arrays of scopes", "author": "praneesha", "createdAt": "2020-03-25T16:05:05Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -23,6 +23,10 @@ public type AuthzFilter object {\n     public AuthzHandler authzHandler;\n     public Scopes? scopes;\n \n+    # Initializes the `AuthzFilter` object.\n+    #\n+    # + authzHandler - `AuthzHandler` instance for handling authorization\n+    # + scopes - Array of scopes or Array of arrays of scopes", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NTc4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397975782", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Filter function implementation which tries to authorize the response which is defined to achieve object\n          \n          \n            \n                # Filter function implementation, which tries to authorize the response, which is defined to achieve", "author": "praneesha", "createdAt": "2020-03-25T16:05:19Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -56,6 +60,12 @@ public type AuthzFilter object {\n         return isAuthzSuccessful(caller, authorized);\n     }\n \n+    # Filter function implementation which tries to authorize the response which is defined to achieve object", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NTk5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397975995", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # structural equility.\n          \n          \n            \n                # object-structural equality.", "author": "praneesha", "createdAt": "2020-03-25T16:05:34Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -56,6 +60,12 @@ public type AuthzFilter object {\n         return isAuthzSuccessful(caller, authorized);\n     }\n \n+    # Filter function implementation which tries to authorize the response which is defined to achieve object\n+    # structural equility.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjEyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397976120", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` as the functionality is not implemented\n          \n          \n            \n                # + return - Set to`true` as the functionality is not implemented", "author": "praneesha", "createdAt": "2020-03-25T16:05:47Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal", "diffHunk": "@@ -56,6 +60,12 @@ public type AuthzFilter object {\n         return isAuthzSuccessful(caller, authorized);\n     }\n \n+    # Filter function implementation which tries to authorize the response which is defined to achieve object\n+    # structural equility.\n+    #\n+    # + response - `Response` instance\n+    # + context - `FilterContext` instance\n+    # + return - `true` as the functionality is not implemented", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjQ1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397976459", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n          \n          \n            \n                # + positiveAuthzCache - `Cache` instance including positive authorizations", "author": "praneesha", "createdAt": "2020-03-25T16:06:14Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -28,6 +28,10 @@ public type AuthzHandler object {\n     public cache:Cache? positiveAuthzCache;\n     public cache:Cache? negativeAuthzCache;\n \n+    # Initializes the `AuthzHandler` object.\n+    #\n+    # + positiveAuthzCache - `Cache` instance, which is cache positive authorizations", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMDMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r398310317", "bodyText": "@praneesha, this comment, gives out the wrong meaning. We need to say something like, 'this is the cache, which keeps positive authorizations'.", "author": "ldclakmal", "createdAt": "2020-03-26T04:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NjQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3Njc2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397976767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + negativeAuthzCache - `Cache` instance, which is cache negative authorizations\n          \n          \n            \n                # + negativeAuthzCache - `Cache` instance including negative authorizations", "author": "praneesha", "createdAt": "2020-03-25T16:06:36Z", "path": "stdlib/http/src/main/ballerina/src/http/auth/authz_handler.bal", "diffHunk": "@@ -28,6 +28,10 @@ public type AuthzHandler object {\n     public cache:Cache? positiveAuthzCache;\n     public cache:Cache? negativeAuthzCache;\n \n+    # Initializes the `AuthzHandler` object.\n+    #\n+    # + positiveAuthzCache - `Cache` instance, which is cache positive authorizations\n+    # + negativeAuthzCache - `Cache` instance, which is cache negative authorizations", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMDM3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r398310379", "bodyText": "@praneesha, this comment, gives out the wrong meaning. We need to say something like, 'this is the cache, which keeps negative authorizations'.", "author": "ldclakmal", "createdAt": "2020-03-26T04:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3Njc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NzE4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397977187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # record is used to determine which type of additional behaviours are added to the endpoint (e.g., caching,\n          \n          \n            \n                # record is used to determine, which type of additional behaviours are added to the endpoint (e.g., caching,", "author": "praneesha", "createdAt": "2020-03-25T16:07:08Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -38,13 +38,12 @@ public type Client client object {\n     public HttpClient httpClient;\n     public CookieStore? cookieStore = ();\n \n-    # Gets invoked to initialize the client. During initialization, the configurations provided through the `config`\n+    # Gets invoked to initialize the `client`. During initialization, the configurations provided through the `config`\n     # record is used to determine which type of additional behaviours are added to the endpoint (e.g., caching,", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NzM5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397977390", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return  - `false` if the cookie will be discarded at the end of the \"session\". Else, returns `true`\n          \n          \n            \n                # + return  - set to `false` if the cookie will be discarded at the end of the \"session\". Else, returns `true`.", "author": "praneesha", "createdAt": "2020-03-25T16:07:25Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -45,20 +45,28 @@ public type Cookie object {\n     public time:Time lastAccessedTime = time:currentTime();\n     public boolean hostOnly = false;\n \n+    # Initializes the `Cookie` object.\n+    #\n+    # + name - Name of the `Cookie`\n+    # + value - Value of the `Cookie`\n     public function __init(string name, string value) {\n         self.name = name;\n         self.value = value;\n     }\n \n-    // Returns false if the cookie will be discarded at the end of the \"session\"; true otherwise.\n+    # Checks the persistance of the cookie.\n+    #\n+    # + return  - `false` if the cookie will be discarded at the end of the \"session\". Else, returns `true`", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NzUzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397977533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Checks the validity of attributes of cookie.\n          \n          \n            \n                # Checks the validity of the attributes of the cookie.", "author": "praneesha", "createdAt": "2020-03-25T16:07:37Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -45,20 +45,28 @@ public type Cookie object {\n     public time:Time lastAccessedTime = time:currentTime();\n     public boolean hostOnly = false;\n \n+    # Initializes the `Cookie` object.\n+    #\n+    # + name - Name of the `Cookie`\n+    # + value - Value of the `Cookie`\n     public function __init(string name, string value) {\n         self.name = name;\n         self.value = value;\n     }\n \n-    // Returns false if the cookie will be discarded at the end of the \"session\"; true otherwise.\n+    # Checks the persistance of the cookie.\n+    #\n+    # + return  - `false` if the cookie will be discarded at the end of the \"session\". Else, returns `true`\n     public function isPersistent() returns boolean {\n         if (self.expires is () && self.maxAge == 0) {\n             return false;\n         }\n         return true;\n     }\n \n-    // Returns true if the attributes of the cookie are in the correct format or else error is returned.\n+    # Checks the validity of attributes of cookie.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3NzkwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397977904", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return  - `true` if the attributes of the cookie are in the correct format, otherwise an `error`\n          \n          \n            \n                # + return  - set to `true` if the attributes of the cookie are in the correct format. Otherwise, returns an `error`.", "author": "praneesha", "createdAt": "2020-03-25T16:08:05Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -45,20 +45,28 @@ public type Cookie object {\n     public time:Time lastAccessedTime = time:currentTime();\n     public boolean hostOnly = false;\n \n+    # Initializes the `Cookie` object.\n+    #\n+    # + name - Name of the `Cookie`\n+    # + value - Value of the `Cookie`\n     public function __init(string name, string value) {\n         self.name = name;\n         self.value = value;\n     }\n \n-    // Returns false if the cookie will be discarded at the end of the \"session\"; true otherwise.\n+    # Checks the persistance of the cookie.\n+    #\n+    # + return  - `false` if the cookie will be discarded at the end of the \"session\". Else, returns `true`\n     public function isPersistent() returns boolean {\n         if (self.expires is () && self.maxAge == 0) {\n             return false;\n         }\n         return true;\n     }\n \n-    // Returns true if the attributes of the cookie are in the correct format or else error is returned.\n+    # Checks the validity of attributes of cookie.\n+    #\n+    # + return  - `true` if the attributes of the cookie are in the correct format, otherwise an `error`", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3ODA4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397978085", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets invoked to initialize the native `client`. During initialization, the configurations provided through the\n          \n          \n            \n                # Gets invoked to initialize the native `client`. During initialization, the configurations are provided through the", "author": "praneesha", "createdAt": "2020-03-25T16:08:19Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -27,6 +27,11 @@ public type HttpClient client object {\n     public ClientConfiguration config = {};\n     public string url;\n \n+    # Gets invoked to initialize the native `client`. During initialization, the configurations provided through the", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3ODIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397978221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `config`. `HttpClient` lies inside every type of clients in the chain holding the native client connector.\n          \n          \n            \n                # `config`. The `HttpClient` lies inside every type of clients in the chain holding the native client connector.", "author": "praneesha", "createdAt": "2020-03-25T16:08:31Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -27,6 +27,11 @@ public type HttpClient client object {\n     public ClientConfiguration config = {};\n     public string url;\n \n+    # Gets invoked to initialize the native `client`. During initialization, the configurations provided through the\n+    # `config`. `HttpClient` lies inside every type of clients in the chain holding the native client connector.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3ODgxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397978813", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + serviceRef - The service that the filer applied\n          \n          \n            \n                # + serviceRef - The service applied applied by the filer", "author": "praneesha", "createdAt": "2020-03-25T16:09:13Z", "path": "stdlib/http/src/main/ballerina/src/http/http_filter.bal", "diffHunk": "@@ -53,20 +53,34 @@ public type FilterContext object {\n     private string resourceName = \"\";\n     public map<any> attributes = {};\n \n+    # Initializes the `FilterContext` object.\n+    #\n+    # + serviceRef - The service that the filer applied", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3ODk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397978991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets the service that the `FilerContext` is applied.\n          \n          \n            \n                # Gets the service to which the `FilerContext` is applied.", "author": "praneesha", "createdAt": "2020-03-25T16:09:29Z", "path": "stdlib/http/src/main/ballerina/src/http/http_filter.bal", "diffHunk": "@@ -53,20 +53,34 @@ public type FilterContext object {\n     private string resourceName = \"\";\n     public map<any> attributes = {};\n \n+    # Initializes the `FilterContext` object.\n+    #\n+    # + serviceRef - The service that the filer applied\n+    # + serviceName - Name of the service\n+    # + resourceName - Name of the resource function\n     public function __init(service serviceRef, string serviceName, string resourceName) {\n         self.serviceRef = serviceRef;\n         self.serviceName = serviceName;\n         self.resourceName = resourceName;\n     }\n \n+    # Gets the service that the `FilerContext` is applied.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3OTYyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397979623", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets the service name that the `FilerContext` is applied.\n          \n          \n            \n                # Gets the service name to which the `FilerContext` is applied.", "author": "praneesha", "createdAt": "2020-03-25T16:10:18Z", "path": "stdlib/http/src/main/ballerina/src/http/http_filter.bal", "diffHunk": "@@ -53,20 +53,34 @@ public type FilterContext object {\n     private string resourceName = \"\";\n     public map<any> attributes = {};\n \n+    # Initializes the `FilterContext` object.\n+    #\n+    # + serviceRef - The service that the filer applied\n+    # + serviceName - Name of the service\n+    # + resourceName - Name of the resource function\n     public function __init(service serviceRef, string serviceName, string resourceName) {\n         self.serviceRef = serviceRef;\n         self.serviceName = serviceName;\n         self.resourceName = resourceName;\n     }\n \n+    # Gets the service that the `FilerContext` is applied.\n+    #\n+    # + return  - `service` of the context\n     public function getService() returns service {\n         return self.serviceRef;\n     }\n \n+    # Gets the service name that the `FilerContext` is applied.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3OTgwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397979804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets the resource function name that the `FilerContext` is applied.\n          \n          \n            \n                # Gets the resource function name to which the `FilerContext` is applied.", "author": "praneesha", "createdAt": "2020-03-25T16:10:29Z", "path": "stdlib/http/src/main/ballerina/src/http/http_filter.bal", "diffHunk": "@@ -53,20 +53,34 @@ public type FilterContext object {\n     private string resourceName = \"\";\n     public map<any> attributes = {};\n \n+    # Initializes the `FilterContext` object.\n+    #\n+    # + serviceRef - The service that the filer applied\n+    # + serviceName - Name of the service\n+    # + resourceName - Name of the resource function\n     public function __init(service serviceRef, string serviceName, string resourceName) {\n         self.serviceRef = serviceRef;\n         self.serviceName = serviceName;\n         self.resourceName = resourceName;\n     }\n \n+    # Gets the service that the `FilerContext` is applied.\n+    #\n+    # + return  - `service` of the context\n     public function getService() returns service {\n         return self.serviceRef;\n     }\n \n+    # Gets the service name that the `FilerContext` is applied.\n+    #\n+    # + return  - name of the `service`\n     public function getServiceName() returns string {\n         return self.serviceName;\n     }\n \n+    # Gets the resource function name that the `FilerContext` is applied.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4MDI1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397980258", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents inferred failover configurations passed into the failover client.\n          \n          \n            \n            # Represents the inferred failover configurations passed into the failover client.", "author": "praneesha", "createdAt": "2020-03-25T16:11:00Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -27,8 +27,7 @@ public type FailoverConfig record {|\n |};\n \n // TODO: This can be made package private\n-// Represents inferred failover configurations passed to Failover connector.\n-# Inferred failover configurations passed into the failover client.\n+# Represents inferred failover configurations passed into the failover client.", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4MDQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r397980481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + failoverClientConfig - The configurations of the client endpoint associated with this `Failover` instance\n          \n          \n            \n                # + failoverClientConfig - The configurations of the client endpoint associated with this `Failover` instance.", "author": "praneesha", "createdAt": "2020-03-25T16:11:15Z", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -52,7 +51,7 @@ public type FailoverClient client object {\n \n     # Failover caller actions which provides failover capabilities to an HTTP client endpoint.\n     #\n-    # + config - The configurations of the client endpoint associated with this `Failover` instance\n+    # + failoverClientConfig - The configurations of the client endpoint associated with this `Failover` instance", "originalCommit": "cc2f5e7eff45ab1bcdbbe075594efc1ce149fdd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1d30ab6e281084f7ce7d55490a7f50ffef444bec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1d30ab6e281084f7ce7d55490a7f50ffef444bec", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authn_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:17:09Z", "type": "commit"}, {"oid": "0345b6e5ae7d5ceb02aa484696dfb09a5682e477", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0345b6e5ae7d5ceb02aa484696dfb09a5682e477", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authn_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:17:21Z", "type": "commit"}, {"oid": "4419e7c08d6491e1499a56cae3c5109dd29857f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4419e7c08d6491e1499a56cae3c5109dd29857f8", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:17:31Z", "type": "commit"}, {"oid": "db8c7234ae86db7795e617d30e6e15bfc13bd31f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db8c7234ae86db7795e617d30e6e15bfc13bd31f", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:17:47Z", "type": "commit"}, {"oid": "bdf6610ee3e324fb2223d466fc950d4046517e24", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdf6610ee3e324fb2223d466fc950d4046517e24", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:17:56Z", "type": "commit"}, {"oid": "b3255e9943b398e0535513d1fbac7e6b8143abbc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3255e9943b398e0535513d1fbac7e6b8143abbc", "message": "Update stdlib/http/src/main/ballerina/src/http/auth/authz_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:18:15Z", "type": "commit"}, {"oid": "8046c44e25dad7299dd059594ba50d5f9c81f6d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8046c44e25dad7299dd059594ba50d5f9c81f6d9", "message": "Update stdlib/http/src/main/ballerina/src/http/client_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:20:42Z", "type": "commit"}, {"oid": "288be146f1342c262aa78b2b5927751ede44b55e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/288be146f1342c262aa78b2b5927751ede44b55e", "message": "Update stdlib/http/src/main/ballerina/src/http/http_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:20:57Z", "type": "commit"}, {"oid": "84bc515e8aff86977ce56ed0b6e2dbbfa44e76fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/84bc515e8aff86977ce56ed0b6e2dbbfa44e76fa", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:21:08Z", "type": "commit"}, {"oid": "7b1bbb5651d189f170dc9e9e7e38a79ef780cf0a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b1bbb5651d189f170dc9e9e7e38a79ef780cf0a", "message": "Update stdlib/http/src/main/ballerina/src/http/http_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:21:51Z", "type": "commit"}, {"oid": "4b5e59ed512047116c6f33b583e4c447dcd28e66", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b5e59ed512047116c6f33b583e4c447dcd28e66", "message": "Update stdlib/http/src/main/ballerina/src/http/http_filter.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:22:03Z", "type": "commit"}, {"oid": "d9cae99a1f67d28400f57fada09b4527ea88db49", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9cae99a1f67d28400f57fada09b4527ea88db49", "message": "Update stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:22:29Z", "type": "commit"}, {"oid": "e59a8647f7808ae5e16c00c84c0072c7197fc1bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e59a8647f7808ae5e16c00c84c0072c7197fc1bc", "message": "Update stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:22:41Z", "type": "commit"}, {"oid": "256420522d9c92ad29358ad7d470f85f7bb18cba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/256420522d9c92ad29358ad7d470f85f7bb18cba", "message": "Update stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:23:01Z", "type": "commit"}, {"oid": "6daf195874443ea1db0e6694fca960662a692cbb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6daf195874443ea1db0e6694fca960662a692cbb", "message": "Update stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:23:25Z", "type": "commit"}, {"oid": "4b8ff6690fd4e66ce39bd77e008f0a43e6557317", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b8ff6690fd4e66ce39bd77e008f0a43e6557317", "message": "Update stdlib/http/src/main/ballerina/src/http/http_client.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:24:01Z", "type": "commit"}, {"oid": "e5c19b2576630d7e547d60caf9e1b41685b42ceb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5c19b2576630d7e547d60caf9e1b41685b42ceb", "message": "Update stdlib/http/src/main/ballerina/src/http/http_client.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T04:25:20Z", "type": "commit"}, {"oid": "bc1574cdf54d7a1a989906afea4c98c9fef41918", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc1574cdf54d7a1a989906afea4c98c9fef41918", "message": "Fix review suggestions", "committedDate": "2020-03-26T04:33:19Z", "type": "commit"}, {"oid": "a0043e181c58130ed5620bce9e59696674710aea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0043e181c58130ed5620bce9e59696674710aea", "message": "Fix test failures", "committedDate": "2020-03-26T09:56:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1MDM2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r398550363", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # record is used to determine, which type of additional behaviours are added to the endpoint (e.g., caching,\n          \n          \n            \n                # record is used to determine which type of additional behaviours are added to the endpoint (e.g., caching,", "author": "praneesha", "createdAt": "2020-03-26T12:57:19Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -38,13 +38,12 @@ public type Client client object {\n     public HttpClient httpClient;\n     public CookieStore? cookieStore = ();\n \n-    # Gets invoked to initialize the client. During initialization, the configurations provided through the `config`\n-    # record is used to determine which type of additional behaviours are added to the endpoint (e.g., caching,\n+    # Gets invoked to initialize the `client`. During initialization, the configurations provided through the `config`\n+    # record is used to determine, which type of additional behaviours are added to the endpoint (e.g., caching,", "originalCommit": "a0043e181c58130ed5620bce9e59696674710aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1MDcyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22189#discussion_r398550721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `config`. The `HttpClient` lies inside every type of clients in the chain holding the native client connector.\n          \n          \n            \n                # `config`. The `HttpClient` lies inside every type of client in the chain holding the native client connector.", "author": "praneesha", "createdAt": "2020-03-26T12:57:53Z", "path": "stdlib/http/src/main/ballerina/src/http/http_client.bal", "diffHunk": "@@ -27,6 +27,11 @@ public type HttpClient client object {\n     public ClientConfiguration config = {};\n     public string url;\n \n+    # Gets invoked to initialize the native `client`. During initialization, the configurations are provided through the\n+    # `config`. The `HttpClient` lies inside every type of clients in the chain holding the native client connector.", "originalCommit": "a0043e181c58130ed5620bce9e59696674710aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ba84bce2f34f5dab8d440369b3a33f184e39298", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ba84bce2f34f5dab8d440369b3a33f184e39298", "message": "Update stdlib/http/src/main/ballerina/src/http/http_client.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T13:10:20Z", "type": "commit"}, {"oid": "856a9c3928e490e61ff0fd9b4cb77c4193919c67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/856a9c3928e490e61ff0fd9b4cb77c4193919c67", "message": "Update stdlib/http/src/main/ballerina/src/http/client_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T13:10:31Z", "type": "commit"}]}