{"pr_number": 20929, "pr_title": "Add expression bodied function support", "pr_createdAt": "2020-02-08T14:52:26Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929", "timeline": [{"oid": "f784a46a0dfd7208b82ddf0cb5100d3ed50e873f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f784a46a0dfd7208b82ddf0cb5100d3ed50e873f", "message": "Refactor ClosureDesugar", "committedDate": "2020-02-10T09:34:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MDA1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377490055", "bodyText": "Change to ExternalFunctionBodyNode", "author": "pubudu91", "createdAt": "2020-02-11T08:19:03Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/ExternFunctionBodyNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.model.tree;\n+\n+/**\n+ * Represents the body of a function whose implementation is native.\n+ *\n+ * @since 1.2.0\n+ */\n+public interface ExternFunctionBodyNode extends FunctionBodyNode {", "originalCommit": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5NzIxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377497219", "bodyText": "Remove the todo", "author": "pubudu91", "createdAt": "2020-02-11T08:38:14Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -283,7 +283,44 @@ public void exitBlockFunctionBody(BallerinaParser.BlockFunctionBodyContext ctx)\n             return;\n         }\n \n-        this.pkgBuilder.endBlockFunctionBody(getWS(ctx));\n+        this.pkgBuilder.endBlockFunctionBody(getCurrentPos(ctx), getWS(ctx));\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void enterExprFunctionBody(BallerinaParser.ExprFunctionBodyContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        this.pkgBuilder.startExprFunctionBody();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void exitExprFunctionBody(BallerinaParser.ExprFunctionBodyContext ctx) {\n+        if (isInErrorState) {\n+            return;\n+        }\n+\n+        // TODO: Check if we need to take pos and ws of expr or the whole body", "originalCommit": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMTE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377501176", "bodyText": "move the extern function related logic to the extern func body from the invoke node.", "author": "pubudu91", "createdAt": "2020-02-11T08:48:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1926,6 +1960,9 @@ void endExternalFunctionBody(int annotCount) {\n         // reversing the collected annotations to preserve the original order\n         Collections.reverse(tempAnnotAttachments);\n         tempAnnotAttachments.forEach(invokableNode::addExternalAnnotationAttachment);\n+\n+        FunctionBodyNode body = this.funcBodyNodeStack.pop();\n+        invokableNode.setBody(body);", "originalCommit": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwMjY0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377502643", "bodyText": "Change this along with the extern body changes", "author": "pubudu91", "createdAt": "2020-02-11T08:51:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -316,14 +319,15 @@ public void visit(BLangFunction funcNode) {\n \n         // Check for native functions\n         if (Symbols.isNative(funcNode.symbol) || funcNode.interfaceFunction) {\n-            if (funcNode.body != null) {\n+            // TODO: double check this. Only applies for interfaces now IINM.\n+            if (funcNode.funcBody != null) {", "originalCommit": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUwNjkyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377506924", "bodyText": "Check and see whether we can reuse the envs created in prev stages", "author": "pubudu91", "createdAt": "2020-02-11T09:01:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java", "diffHunk": "@@ -390,6 +393,29 @@ public void visit(BLangFunction funcNode) {\n         analysisStateStack.pop();\n     }\n \n+    @Override\n+    public void visit(BLangBlockFunctionBody body) {\n+        SymbolEnv bodyEnv = SymbolEnv.createFuncBodyEnv(body, env);\n+        for (BLangStatement stmt : body.stmts) {\n+            if (stopAnalysis) {\n+                break;\n+            } else {\n+                analyzeNode(stmt, bodyEnv);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void visit(BLangExprFunctionBody body) {\n+        SymbolEnv bodyEnv = SymbolEnv.createFuncBodyEnv(body, env);", "originalCommit": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxMTQyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377511429", "bodyText": "Check and remove this", "author": "pubudu91", "createdAt": "2020-02-11T09:11:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/BLangFunctionBody.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.tree;\n+\n+import org.ballerinalang.model.tree.FunctionBodyNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.Scope;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+\n+/**\n+ * Represents a function/method body.\n+ *\n+ * @since 1.2.0\n+ */\n+public abstract class BLangFunctionBody extends BLangNode implements FunctionBodyNode {\n+\n+    public BVarSymbol mapSymbol; // TODO: Do we need closure map for non-block bodied functions?", "originalCommit": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNTg4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r377515883", "bodyText": "Consider other types of bodies as well", "author": "pubudu91", "createdAt": "2020-02-11T09:21:16Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/HttpFiltersDesugar.java", "diffHunk": "@@ -233,7 +234,8 @@ private BLangSimpleVariable addFilterContextCreation(BLangFunction resourceNode,\n                 new BVarSymbol(0, names.fromString(filterContextVarName), resourceNode.symbol.pkgID, filterContextType,\n                                resourceNode.symbol));\n         filterContextVar.typeNode = filterContextUserDefinedType;\n-        resourceNode.body.stmts.add(0, ASTBuilderUtil.createVariableDef(resourceNode.pos, filterContextVar));\n+        ((BLangBlockFunctionBody) resourceNode.funcBody).stmts.add(0, ASTBuilderUtil", "originalCommit": "9da5867a6c7f4fe72f2a07587d74836471f4d6e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a43fc0960166a126d1f46651118705f934c145eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a43fc0960166a126d1f46651118705f934c145eb", "message": "Add expression body support in the grammar", "committedDate": "2020-02-12T04:25:01Z", "type": "commit"}, {"oid": "8ae1368d1771b6d460acda061c5ee3d4aab91a5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ae1368d1771b6d460acda061c5ee3d4aab91a5e", "message": "Add new model for the function body", "committedDate": "2020-02-12T04:25:07Z", "type": "commit"}, {"oid": "ac3785bdc4fecc8aff8d2cca4e702caf92c79b57", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac3785bdc4fecc8aff8d2cca4e702caf92c79b57", "message": "Modify the AST to use newly defined bodies for function bodies", "committedDate": "2020-02-12T04:25:07Z", "type": "commit"}, {"oid": "5946131d1195683ac7805e8d4bbab06aa07a0fec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5946131d1195683ac7805e8d4bbab06aa07a0fec", "message": "Add new body nodes to NodeCloner", "committedDate": "2020-02-12T04:25:07Z", "type": "commit"}, {"oid": "675d045ba3261b6ea0844d2536062b551b4210f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/675d045ba3261b6ea0844d2536062b551b4210f0", "message": "Replace use of .body withe .funcBody in the analyzers", "committedDate": "2020-02-12T04:25:07Z", "type": "commit"}, {"oid": "557390906ff9e2201c117617846c8d36cb7628d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/557390906ff9e2201c117617846c8d36cb7628d1", "message": "Introduce sequence statements and modify block-type models", "committedDate": "2020-02-12T04:25:08Z", "type": "commit"}, {"oid": "4f00cb4f4c80cc0f27cfc86987fa0f97622ef17b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f00cb4f4c80cc0f27cfc86987fa0f97622ef17b", "message": "Replace the usages of block stmt func bodies in Desugar", "committedDate": "2020-02-12T04:25:08Z", "type": "commit"}, {"oid": "ee0236a64ccf31fafcef2ecef32ec30ed40b14ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee0236a64ccf31fafcef2ecef32ec30ed40b14ae", "message": "Add visit logic for function bodies in Desugar and fix service desugar", "committedDate": "2020-02-12T04:25:08Z", "type": "commit"}, {"oid": "a41eecf2b0ed88f8cae415f1f5986c18d3b16e75", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a41eecf2b0ed88f8cae415f1f5986c18d3b16e75", "message": "Add function body visit logic to BIR gen", "committedDate": "2020-02-12T04:25:08Z", "type": "commit"}, {"oid": "345fc8e8569dc5fe0230d203b580c4b0cf777a85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/345fc8e8569dc5fe0230d203b580c4b0cf777a85", "message": "Fix annotation desugar and issue func body model", "committedDate": "2020-02-12T04:25:08Z", "type": "commit"}, {"oid": "66676301d219ce814a307a06fa7fb0b760563742", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66676301d219ce814a307a06fa7fb0b760563742", "message": "Fix closure desugar", "committedDate": "2020-02-12T04:25:08Z", "type": "commit"}, {"oid": "c7a13eaa92284679c9c3859636b6654de7933cd7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c7a13eaa92284679c9c3859636b6654de7933cd7", "message": "Refactor arrow function impl to use expr function body", "committedDate": "2020-02-12T04:25:09Z", "type": "commit"}, {"oid": "f80d8fececf1f3b899e07f62a134ebeca786c323", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f80d8fececf1f3b899e07f62a134ebeca786c323", "message": "Fix lambda func and worker related issues", "committedDate": "2020-02-12T04:25:09Z", "type": "commit"}, {"oid": "2b748cd3ae170ee3157d7d8af0e591fd1d83a963", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b748cd3ae170ee3157d7d8af0e591fd1d83a963", "message": "Fix issue in closures in transactions", "committedDate": "2020-02-12T04:25:09Z", "type": "commit"}, {"oid": "8a6e8388a62e98bf5d501f325c9c2fb26eb850e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a6e8388a62e98bf5d501f325c9c2fb26eb850e6", "message": "Fix failing unit tests", "committedDate": "2020-02-12T04:25:09Z", "type": "commit"}, {"oid": "6698b84c7552b3ee2a2dd46f47dde2d18bc506e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6698b84c7552b3ee2a2dd46f47dde2d18bc506e7", "message": "Fix HTTP filter desugar and InvalidSyntaxParserTest", "committedDate": "2020-02-12T04:25:09Z", "type": "commit"}, {"oid": "5f2c3e57b2665f45561f947296e40167c06e7d8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f2c3e57b2665f45561f947296e40167c06e7d8a", "message": "Add expr bodied function support", "committedDate": "2020-02-12T04:25:09Z", "type": "commit"}, {"oid": "cfa6b6377892be9b2f4a4befbe4c4446cb7f0371", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cfa6b6377892be9b2f4a4befbe4c4446cb7f0371", "message": "Refactor ClosureDesugar", "committedDate": "2020-02-12T04:25:10Z", "type": "commit"}, {"oid": "97d6b1dc34e7916f466b1e746d9b74f357ac2190", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97d6b1dc34e7916f466b1e746d9b74f357ac2190", "message": "Regenerate the parser", "committedDate": "2020-02-12T04:25:10Z", "type": "commit"}, {"oid": "f72553192e2f0c802f0d799438aee5b874be4242", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f72553192e2f0c802f0d799438aee5b874be4242", "message": "Add support for expr bodies in explicit anon functions", "committedDate": "2020-02-12T04:25:10Z", "type": "commit"}, {"oid": "52e8a45e4346000a565866afa47370790f5891d8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52e8a45e4346000a565866afa47370790f5891d8", "message": "Rename BlockNode -> BlockStatementNode", "committedDate": "2020-02-12T04:25:10Z", "type": "commit"}, {"oid": "cea75a7b6693b0a68475590982c570026d407449", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cea75a7b6693b0a68475590982c570026d407449", "message": "Rename SequenceStatementNode -> BlockNode", "committedDate": "2020-02-12T04:25:10Z", "type": "commit"}, {"oid": "f01688c6809da887a7fa8dc3cd26ec31c2a4ea3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f01688c6809da887a7fa8dc3cd26ec31c2a4ea3e", "message": "Rename ExternFunctionBodyNode -> ExternalFunctionBodyNode", "committedDate": "2020-02-12T04:25:11Z", "type": "commit"}, {"oid": "0baf725b898cf54eb3fd4306326e5ce59bd24f1c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0baf725b898cf54eb3fd4306326e5ce59bd24f1c", "message": "Add basic test cases for expr bodied functions", "committedDate": "2020-02-12T04:25:11Z", "type": "commit"}, {"oid": "4d16369261c4761a97ca3b2a087f80d5d59dcab3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d16369261c4761a97ca3b2a087f80d5d59dcab3", "message": "Refactor external func body related logic", "committedDate": "2020-02-12T04:25:11Z", "type": "commit"}, {"oid": "4d16369261c4761a97ca3b2a087f80d5d59dcab3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d16369261c4761a97ca3b2a087f80d5d59dcab3", "message": "Refactor external func body related logic", "committedDate": "2020-02-12T04:25:11Z", "type": "forcePushed"}, {"oid": "89b772195733b9c9b85913fe347c7479769b8fdc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89b772195733b9c9b85913fe347c7479769b8fdc", "message": "Take different function bodies into consideration in HTTP filter desugar", "committedDate": "2020-02-12T09:07:54Z", "type": "commit"}, {"oid": "6d59632eb99ca6a89b835ca6f03c9c235fc33f6a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d59632eb99ca6a89b835ca6f03c9c235fc33f6a", "message": "fix completion and definition tests", "committedDate": "2020-02-13T09:09:58Z", "type": "commit"}, {"oid": "deb02b58f65c1574c43739ee25101f4b4b762625", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/deb02b58f65c1574c43739ee25101f4b4b762625", "message": "Fix taint and semantic  analysis for expr bodies", "committedDate": "2020-02-13T09:34:21Z", "type": "commit"}, {"oid": "984f5fed6749df08a4d89995892158cb1609a095", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/984f5fed6749df08a4d89995892158cb1609a095", "message": "fix failing language server tests", "committedDate": "2020-02-13T09:51:25Z", "type": "commit"}, {"oid": "829f9a73ba3e089d2a8f298ca524f2890184a070", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/829f9a73ba3e089d2a8f298ca524f2890184a070", "message": "Add test cases", "committedDate": "2020-02-13T10:53:39Z", "type": "commit"}, {"oid": "829f9a73ba3e089d2a8f298ca524f2890184a070", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/829f9a73ba3e089d2a8f298ca524f2890184a070", "message": "Add test cases", "committedDate": "2020-02-13T10:53:39Z", "type": "forcePushed"}, {"oid": "1bb91b9fbc203a9d91c39709d9033746f7649a60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bb91b9fbc203a9d91c39709d9033746f7649a60", "message": "remove redundent logic", "committedDate": "2020-02-14T04:54:30Z", "type": "commit"}, {"oid": "cab3960aa71ede812cf0afb35aa91311bcb0ed4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cab3960aa71ede812cf0afb35aa91311bcb0ed4a", "message": "Merge pull request #15 from nadeeshaan/add-expr-body-2-local\n\nFix Language Server Failing Test Cases", "committedDate": "2020-02-14T08:46:42Z", "type": "commit"}, {"oid": "54e47fb0e76153921381d5d8071cb55f340942c2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54e47fb0e76153921381d5d8071cb55f340942c2", "message": "Fix .body usages in lang server", "committedDate": "2020-02-14T09:01:42Z", "type": "commit"}, {"oid": "7b2f4a948b9288ff516a17233db22a6e413cff30", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b2f4a948b9288ff516a17233db22a6e413cff30", "message": "Fix func body usage in ServiceProtoUtils", "committedDate": "2020-02-14T09:52:16Z", "type": "commit"}, {"oid": "04ce3bf9d61c13f468dbe50487f62f2573455c83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04ce3bf9d61c13f468dbe50487f62f2573455c83", "message": "Remove getBody() interface", "committedDate": "2020-02-14T09:56:46Z", "type": "commit"}, {"oid": "f2eae2518555884f53efde71c6f614e7438f1bd2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2eae2518555884f53efde71c6f614e7438f1bd2", "message": "Rename funcBody -> body", "committedDate": "2020-02-14T10:53:06Z", "type": "commit"}, {"oid": "69ba0bcafa5cffcd75e4e006420bd88c03212eb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69ba0bcafa5cffcd75e4e006420bd88c03212eb0", "message": "Add expr body support for formatting", "committedDate": "2020-02-14T13:22:43Z", "type": "commit"}, {"oid": "fbeb15d4ae4e5b148c437a0ecfc3905d4a62205f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fbeb15d4ae4e5b148c437a0ecfc3905d4a62205f", "message": "Add test for expr func body in formatting", "committedDate": "2020-02-14T13:27:55Z", "type": "commit"}, {"oid": "4a06ba8349ff5e300e6cc4968f5d089ba222ef35", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a06ba8349ff5e300e6cc4968f5d089ba222ef35", "message": "Merge pull request #16 from NipunaMarcus/add-expr-body-2-local\n\nAdd expr body support for formatting", "committedDate": "2020-02-14T15:56:30Z", "type": "commit"}, {"oid": "822420cef312d821ace48f3da0006a4f38bb9712", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/822420cef312d821ace48f3da0006a4f38bb9712", "message": "Sync with master and resolve conflicts", "committedDate": "2020-02-14T16:00:48Z", "type": "commit"}, {"oid": "975ef274019b77a83a1721ff6fa093a3cc18d885", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/975ef274019b77a83a1721ff6fa093a3cc18d885", "message": "Regenerate the parser", "committedDate": "2020-02-14T16:03:28Z", "type": "commit"}, {"oid": "ac3ec6a6de4946ae27357c989d4860dcd3a68fa0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac3ec6a6de4946ae27357c989d4860dcd3a68fa0", "message": "Merge branch 'add-expr-body-2' of github.com:pubudu91/ballerina into add-expr-body-2", "committedDate": "2020-02-14T16:03:56Z", "type": "commit"}, {"oid": "821fbf8c79786a10d6cc09e687d27b5fe7cd1d2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/821fbf8c79786a10d6cc09e687d27b5fe7cd1d2d", "message": "Regenerate the parser", "committedDate": "2020-02-14T18:32:05Z", "type": "commit"}, {"oid": "f3354b6c4db04cdc96c73404cc11e47e5470b76b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f3354b6c4db04cdc96c73404cc11e47e5470b76b", "message": "Fix broken 'do' related logic", "committedDate": "2020-02-14T18:33:14Z", "type": "commit"}, {"oid": "ea334d75cd46e25fb34588b09b1af7830c866b88", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea334d75cd46e25fb34588b09b1af7830c866b88", "message": "Fix checkstyle issues", "committedDate": "2020-02-15T14:46:12Z", "type": "commit"}, {"oid": "ea334d75cd46e25fb34588b09b1af7830c866b88", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea334d75cd46e25fb34588b09b1af7830c866b88", "message": "Fix checkstyle issues", "committedDate": "2020-02-15T14:46:12Z", "type": "forcePushed"}, {"oid": "1abdd755eaa362d5022fd583488e2be9188fcd41", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1abdd755eaa362d5022fd583488e2be9188fcd41", "message": "fix failing test case for visible endpoint visitor", "committedDate": "2020-02-16T09:52:27Z", "type": "commit"}, {"oid": "9115bf81d9979f567279795e58ba4b390d69f23d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9115bf81d9979f567279795e58ba4b390d69f23d", "message": "Merge pull request #17 from nadeeshaan/add-expr-body-2-local\n\nFix failing test case for visible endpoint visitor", "committedDate": "2020-02-16T09:57:32Z", "type": "commit"}, {"oid": "d3465be3283e760aa492c7367b21c3dd9678aff8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3465be3283e760aa492c7367b21c3dd9678aff8", "message": "Fix issue in stream constructor expr", "committedDate": "2020-02-16T11:25:54Z", "type": "commit"}, {"oid": "f13766bd9f07eef613867068dc9cb9320493b131", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f13766bd9f07eef613867068dc9cb9320493b131", "message": "Merge branch 'add-expr-body-2' of github.com:pubudu91/ballerina into add-expr-body-2", "committedDate": "2020-02-16T11:26:16Z", "type": "commit"}, {"oid": "993459b1b7678d4d91bc55a8e458bbcce87ceda5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/993459b1b7678d4d91bc55a8e458bbcce87ceda5", "message": "Remove extern annot attachments from BLangInvokableNode", "committedDate": "2020-02-16T17:47:56Z", "type": "commit"}, {"oid": "4009eca4d6fef530efe89b430cef6156c3b4c6ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4009eca4d6fef530efe89b430cef6156c3b4c6ea", "message": "Move closure map symbol to block function body", "committedDate": "2020-02-17T05:19:50Z", "type": "commit"}, {"oid": "4009eca4d6fef530efe89b430cef6156c3b4c6ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4009eca4d6fef530efe89b430cef6156c3b4c6ea", "message": "Move closure map symbol to block function body", "committedDate": "2020-02-17T05:19:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNDUyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380004524", "bodyText": "Can getOrCreateMapSymbol be a better name.", "author": "KRVPerera", "createdAt": "2020-02-17T06:34:46Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -372,23 +404,63 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n      * @return assignment statement created\n      */\n     private BLangAssignment createAssignment(BLangSimpleVariableDef varDefNode) {\n-        // Create a map for the function or block node.\n-        BLangBlockStmt blockStmt = (BLangBlockStmt) env.node;\n-        if (blockStmt.mapSymbol == null) {\n-            // create a map symbol\n-            blockStmt.mapSymbol = createMapSymbol(\"$map$block$\" + blockClosureMapCount, env);\n-        }\n+        BVarSymbol mapSymbol = createMapSymbolIfAbsent(env.node, blockClosureMapCount);\n \n         // Add the variable to the created map.\n-        BLangIndexBasedAccess accessExpr = ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type,\n-                blockStmt.mapSymbol, ASTBuilderUtil.createLiteral(varDefNode.pos, symTable.stringType,\n-                        varDefNode.var.name.value));\n-        accessExpr.type = ((BMapType) blockStmt.mapSymbol.type).constraint;\n+        BLangIndexBasedAccess accessExpr =\n+                ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type, mapSymbol,\n+                                                          ASTBuilderUtil\n+                                                                  .createLiteral(varDefNode.pos, symTable.stringType,\n+                                                                                 varDefNode.var.name.value));\n+        accessExpr.type = ((BMapType) mapSymbol.type).constraint;\n         accessExpr.lhsVar = true;\n         // Written to: 'map[\"x\"] = 8'.\n         return ASTBuilderUtil.createAssignmentStmt(varDefNode.pos, accessExpr, varDefNode.var.expr);\n     }\n \n+    private BVarSymbol createMapSymbolIfAbsent(BLangNode node, int closureMapCount) {\n+        if (node.getKind() == NodeKind.BLOCK_FUNCTION_BODY) {\n+            return createMapSymbolIfAbsent((BLangBlockFunctionBody) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.BLOCK) {\n+            return createMapSymbolIfAbsent((BLangBlockStmt) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.FUNCTION) {\n+            return createMapSymbolIfAbsent((BLangFunction) node, closureMapCount);\n+        }\n+        return null;\n+    }\n+\n+    private BVarSymbol createMapSymbolIfAbsent(BLangBlockFunctionBody body, int closureMapCount) {", "originalCommit": "4009eca4d6fef530efe89b430cef6156c3b4c6ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTYwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380029601", "bodyText": "Sort of gives the idea that the method has multiple responsibilities doesn't it?", "author": "pubudu91", "createdAt": "2020-02-17T08:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNDUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNjg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380006870", "bodyText": "The name suggests that we create a map symbol always but the function may return null as well. Should this null be an assert ?", "author": "KRVPerera", "createdAt": "2020-02-17T06:45:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ClosureDesugar.java", "diffHunk": "@@ -372,23 +404,63 @@ public void visit(BLangSimpleVariableDef varDefNode) {\n      * @return assignment statement created\n      */\n     private BLangAssignment createAssignment(BLangSimpleVariableDef varDefNode) {\n-        // Create a map for the function or block node.\n-        BLangBlockStmt blockStmt = (BLangBlockStmt) env.node;\n-        if (blockStmt.mapSymbol == null) {\n-            // create a map symbol\n-            blockStmt.mapSymbol = createMapSymbol(\"$map$block$\" + blockClosureMapCount, env);\n-        }\n+        BVarSymbol mapSymbol = createMapSymbolIfAbsent(env.node, blockClosureMapCount);\n \n         // Add the variable to the created map.\n-        BLangIndexBasedAccess accessExpr = ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type,\n-                blockStmt.mapSymbol, ASTBuilderUtil.createLiteral(varDefNode.pos, symTable.stringType,\n-                        varDefNode.var.name.value));\n-        accessExpr.type = ((BMapType) blockStmt.mapSymbol.type).constraint;\n+        BLangIndexBasedAccess accessExpr =\n+                ASTBuilderUtil.createIndexBasesAccessExpr(varDefNode.pos, varDefNode.type, mapSymbol,\n+                                                          ASTBuilderUtil\n+                                                                  .createLiteral(varDefNode.pos, symTable.stringType,\n+                                                                                 varDefNode.var.name.value));\n+        accessExpr.type = ((BMapType) mapSymbol.type).constraint;\n         accessExpr.lhsVar = true;\n         // Written to: 'map[\"x\"] = 8'.\n         return ASTBuilderUtil.createAssignmentStmt(varDefNode.pos, accessExpr, varDefNode.var.expr);\n     }\n \n+    private BVarSymbol createMapSymbolIfAbsent(BLangNode node, int closureMapCount) {\n+        if (node.getKind() == NodeKind.BLOCK_FUNCTION_BODY) {\n+            return createMapSymbolIfAbsent((BLangBlockFunctionBody) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.BLOCK) {\n+            return createMapSymbolIfAbsent((BLangBlockStmt) node, closureMapCount);\n+        } else if (node.getKind() == NodeKind.FUNCTION) {\n+            return createMapSymbolIfAbsent((BLangFunction) node, closureMapCount);\n+        }\n+        return null;", "originalCommit": "4009eca4d6fef530efe89b430cef6156c3b4c6ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAyOTE3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380029179", "bodyText": "null return is for the cases where a closure var map symbol is not applicable.", "author": "pubudu91", "createdAt": "2020-02-17T08:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNjg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMzIzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20929#discussion_r380113234", "bodyText": "To further clarify this, for nodes for which closures are not applicable, calling this method doesn't have any effect and we don't do anything with the return value. We use the return value returned by this method only in contexts where the closure map is applicable.", "author": "pubudu91", "createdAt": "2020-02-17T10:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDAwNjg3MA=="}], "type": "inlineReview"}]}