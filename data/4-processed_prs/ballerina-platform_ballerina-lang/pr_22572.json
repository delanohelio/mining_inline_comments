{"pr_number": 22572, "pr_title": "Update stringutils doc APIs to comply with the guidelines", "pr_createdAt": "2020-04-10T09:14:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572", "timeline": [{"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0d3292195244df6e1efbdca90feb89cc7c51aaa", "message": "Update stringutils documentation", "committedDate": "2020-04-10T09:17:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if the two strings are equsl or else `false`\n          \n          \n            \n            # + return - `true` if the two strings are equal or else `false`", "author": "praneesha", "createdAt": "2020-04-10T10:22:50Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTEzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699135", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + stringToMatch - The string to match with the regex\n          \n          \n            \n            # + stringToMatch - The string to match the regex", "author": "praneesha", "createdAt": "2020-04-10T10:23:13Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match with the regex", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTE3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + regex - The regex to match with the string\n          \n          \n            \n            # + regex - The regex to match the string", "author": "praneesha", "createdAt": "2020-04-10T10:23:21Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match with the regex\n+# + regex - The regex to match with the string", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTI1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces the each occurrence of the provided `substring` inside the provided\n          \n          \n            \n            # Replaces each occurrence of the provided `substring` inside the provided", "author": "praneesha", "createdAt": "2020-04-10T10:23:33Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match with the regex\n+# + regex - The regex to match with the string\n+# + return - `true` if the provided string is matched with the regex or else\n+#            `false`\n public function matches(string stringToMatch, string regex) returns boolean {\n     return matchesExternal(java:fromString(stringToMatch), java:fromString(regex));\n }\n \n-# Replaces each substring of the provided string, that matches the provided substring, with the specified replacement\n-# string.\n+# Replaces the each occurrence of the provided `substring` inside the provided", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699401", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces the each occurrence of substrings which matches the provided\n          \n          \n            \n            # Replaces each occurrence of substrings, which match the provided", "author": "praneesha", "createdAt": "2020-04-10T10:24:01Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # regular expression, from the given original string value, with the\n          \n          \n            \n            # regular expression from the given original string value with the", "author": "praneesha", "createdAt": "2020-04-10T10:24:11Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTU2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699560", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                    substrings that matches the provided `regex`\n          \n          \n            \n            #                    substrings that match the provided `regex`", "author": "praneesha", "createdAt": "2020-04-10T10:24:29Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTYwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + replacement - The `replacement` string to replace the subsgrings which\n          \n          \n            \n            # + replacement - The `replacement` string to replace the subsgrings, which", "author": "praneesha", "createdAt": "2020-04-10T10:24:39Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match substrings in the `originalString` to replace\n+# + replacement - The `replacement` string to replace the subsgrings which", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTYzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699630", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 matches the `regex`\n          \n          \n            \n            #                 match the `regex`", "author": "praneesha", "createdAt": "2020-04-10T10:24:45Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match substrings in the `originalString` to replace\n+# + replacement - The `replacement` string to replace the subsgrings which\n+#                 matches the `regex`", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTcwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699706", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces the first substring that matches the given regular expression, with\n          \n          \n            \n            # Replaces the first substring that matches the given regular expression with", "author": "praneesha", "createdAt": "2020-04-10T10:24:58Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                    substrings that matches the provided `regex`\n          \n          \n            \n            #                    substrings that match the provided `regex`", "author": "praneesha", "createdAt": "2020-04-10T10:25:09Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #           replace\n          \n          \n            \n            #           be replaced", "author": "praneesha", "createdAt": "2020-04-10T10:25:46Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match the first substring in the `originalString` to\n+#           replace", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTk3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699975", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + replacement - The `replacement` string to replace the first subsgring which\n          \n          \n            \n            # + replacement - The `replacement` string to replace the first subsgring, which", "author": "praneesha", "createdAt": "2020-04-10T10:25:54Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match the first substring in the `originalString` to\n+#           replace\n+# + replacement - The `replacement` string to replace the first subsgring which", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMDEyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406700120", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An array of strings containing the splitted individual strings\n          \n          \n            \n            # + return - An array of strings containing the individual strings that are split", "author": "praneesha", "createdAt": "2020-04-10T10:26:26Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -120,20 +155,28 @@ public function replaceFirst(string originalString, string regex, string replace\n     }\n }\n \n-# Splits a string using the given delimiter.\n+# Returns an array of strings by splitting a string using the provided\n+# delimiter.\n+# ```ballerina\n+# string[] result = stringutils:split(\"Ballerina is great\", \" \");\n+# ```\n #\n-# + receiver - the original string\n-# + delimiter - delimiter to split by\n-# + return - array of strings containing the split individual strings\n+# + receiver - The string to split\n+# + delimiter - The delimiter to split by\n+# + return - An array of strings containing the splitted individual strings", "originalCommit": "e0d3292195244df6e1efbdca90feb89cc7c51aaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b279f30d8cfcee00aa0d16480d2567ceab04f00", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-10T10:34:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTYxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629610", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides utility functions to manipulate built-in `string` data type. \n          \n          \n            \n            This module provides utility functions to manipulate the built-in `string` data type.", "author": "praneesha", "createdAt": "2020-04-15T07:17:15Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/Module.md", "diffHunk": "@@ -1,51 +1,3 @@\n ## Module overview\n \n This module provides utility functions to manipulate built-in `string` data type. ", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTg0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629846", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            or else `false`\n          \n          \n            \n            #            or else `false` otherwise", "author": "praneesha", "createdAt": "2020-04-15T07:17:46Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNTkxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408715919", "bodyText": "This is redundant. Also applies to the other places as well", "author": "ThisaruGuruge", "createdAt": "2020-04-15T09:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyODUyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408928522", "bodyText": "+1", "author": "praneesha", "createdAt": "2020-04-15T15:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTkxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629913", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Checks if two strings are equal, ignoring the case of the strings.\n          \n          \n            \n            # Checks if two strings are equal ignoring the case of the strings.", "author": "praneesha", "createdAt": "2020-04-15T07:17:54Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTk4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629989", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if the two strings are equal or else `false`\n          \n          \n            \n            # + return - `true` if the two strings are equal or else `false` otherwise", "author": "praneesha", "createdAt": "2020-04-15T07:18:04Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDIzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630230", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Checks whether the given string matches with the provided regex.\n          \n          \n            \n            # Checks whether the given string matches the provided regex.", "author": "praneesha", "createdAt": "2020-04-15T07:18:30Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDM2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630364", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if the provided string is matched with the regex or else\n          \n          \n            \n            # + return - `true` if the provided string matches the regex or else", "author": "praneesha", "createdAt": "2020-04-15T07:18:45Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match the regex\n+# + regex - The regex to match the string\n+# + return - `true` if the provided string is matched with the regex or else", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDQyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            `false`\n          \n          \n            \n            #            `false` otherwise", "author": "praneesha", "createdAt": "2020-04-15T07:18:53Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match the regex\n+# + regex - The regex to match the string\n+# + return - `true` if the provided string is matched with the regex or else\n+#            `false`", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDU5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630598", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 `stringToReplace`\n          \n          \n            \n            #                 the `stringToReplace`", "author": "praneesha", "createdAt": "2020-04-15T07:19:10Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match the regex\n+# + regex - The regex to match the string\n+# + return - `true` if the provided string is matched with the regex or else\n+#            `false`\n public function matches(string stringToMatch, string regex) returns boolean {\n     return matchesExternal(java:fromString(stringToMatch), java:fromString(regex));\n }\n \n-# Replaces each substring of the provided string, that matches the provided substring, with the specified replacement\n-# string.\n+# Replaces each occurrence of the provided `substring` inside the provided\n+# `originalString` with the specified `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replace(\"Ballerina is great\", \" \", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + stringToReplace - string to replace\n-# + replacement - replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the substrings\n+# + stringToReplace - The string to replace within the `originalString`\n+# + replacement - The `replacement` string to replace the occurrences of\n+#                 `stringToReplace`", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDcyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces each occurrence of substrings, which match the provided\n          \n          \n            \n            # Replaces each occurrence of the substrings, which matches the provided", "author": "praneesha", "createdAt": "2020-04-15T07:19:24Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces each occurrence of substrings, which match the provided", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408631061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + regex - The regex to match substrings in the `originalString` to replace\n          \n          \n            \n            # + regex - The regex to match the substrings in the `originalString` to be replaced", "author": "praneesha", "createdAt": "2020-04-15T07:20:09Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces each occurrence of substrings, which match the provided\n+# regular expression from the given original string value with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that match the provided `regex`\n+# + regex - The regex to match substrings in the `originalString` to replace", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTM1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408631359", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + replacement - The `replacement` string to replace the first subsgring, which\n          \n          \n            \n            # + replacement - The `replacement` string to replace the first substring, which", "author": "praneesha", "createdAt": "2020-04-15T07:20:39Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that match the provided `regex`\n+# + regex - The regex to match the first substring in the `originalString` to\n+#           be replaced\n+# + replacement - The `replacement` string to replace the first subsgring, which", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTU5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408631597", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            or else `false`\n          \n          \n            \n            #            or else `false` otherwise", "author": "praneesha", "createdAt": "2020-04-15T07:21:04Z", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -120,20 +155,28 @@ public function replaceFirst(string originalString, string regex, string replace\n     }\n }\n \n-# Splits a string using the given delimiter.\n+# Returns an array of strings by splitting a string using the provided\n+# delimiter.\n+# ```ballerina\n+# string[] result = stringutils:split(\"Ballerina is great\", \" \");\n+# ```\n #\n-# + receiver - the original string\n-# + delimiter - delimiter to split by\n-# + return - array of strings containing the split individual strings\n+# + receiver - The string to split\n+# + delimiter - The delimiter to split by\n+# + return - An array of strings containing the individual strings that are split\n public function split(string receiver, string delimiter) returns string[] {\n     handle res = splitExternal(java:fromString(receiver), java:fromString(delimiter));\n     return getBallerinaStringArray(res);\n }\n \n # Returns a boolean value of a given string.\n+# ```ballerina\n+# boolean result = stringutils:toBoolean(\"true\");\n+# ```\n #\n # + stringValue - string value to convert to a boolean\n-# + return - `true` is the string is `\"true\"` (without considering the case), returns `false` otherwise\n+# + return - `true` if the string is `\"true\"` (without considering the case)\n+#            or else `false`", "originalCommit": "1b279f30d8cfcee00aa0d16480d2567ceab04f00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTIyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408641223", "bodyText": "I think otherwise is redundant here.", "author": "ThisaruGuruge", "createdAt": "2020-04-15T07:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NTY4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408645686", "bodyText": "+1", "author": "praneesha", "createdAt": "2020-04-15T07:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTU5Nw=="}], "type": "inlineReview"}, {"oid": "cde05797143bf284ab78f7932c4b31b3a97978d0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cde05797143bf284ab78f7932c4b31b3a97978d0", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T09:44:38Z", "type": "commit"}, {"oid": "3d0c4af292f7ff675a0a7d18c182068fddf00f7c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d0c4af292f7ff675a0a7d18c182068fddf00f7c", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T09:46:32Z", "type": "commit"}]}