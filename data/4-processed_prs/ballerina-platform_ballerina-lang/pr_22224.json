{"pr_number": 22224, "pr_title": "Add missing socket API docs", "pr_createdAt": "2020-03-26T09:32:32Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224", "timeline": [{"oid": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6501902eaf7f38adccdfcbe11e8637d1662603f8", "message": "Add missing socket API docs\nRef https://github.com/ballerina-platform/ballerina-lang/issues/22213", "committedDate": "2020-03-26T09:23:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzQyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563423", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Initialize the TCP socket client with the given client configuration.\n          \n          \n            \n                # Initializes the TCP socket client with the given client configuration.", "author": "praneesha", "createdAt": "2020-03-26T13:17:42Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -32,6 +32,9 @@ public type Client client object {\n     public string? localAddress = ();\n     public int id = 0;\n \n+    # Initialize the TCP socket client with the given client configuration.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzYwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563606", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + clientConfig - This use to provide the configuration like host, port and timeout\n          \n          \n            \n                # + clientConfig - This is used to provide the configurations like host, port, and timeout", "author": "praneesha", "createdAt": "2020-03-26T13:17:59Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -32,6 +32,9 @@ public type Client client object {\n     public string? localAddress = ();\n     public int id = 0;\n \n+    # Initialize the TCP socket client with the given client configuration.\n+    #\n+    # + clientConfig - This use to provide the configuration like host, port and timeout", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzcyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563728", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Initialize the TCP socket listener with a port and optional listener configuration.\n          \n          \n            \n                # Initializes the TCP socket listener with a port and an optional listener configuration.", "author": "praneesha", "createdAt": "2020-03-26T13:18:12Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2Mzg1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398563859", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + port - The port number to which this listener is attached and listen\n          \n          \n            \n                # + port - The port number to which this listener is attached and will listen", "author": "praneesha", "createdAt": "2020-03-26T13:18:24Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDMyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398564323", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n          \n          \n            \n                # + return - Returns an error if an error occurs while starting the server or returns nil otherwise.", "author": "praneesha", "createdAt": "2020-03-26T13:19:02Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDczOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398564738", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n          \n          \n            \n                # Stops the registered service. Behaviours of this and the `__immediateStop()` function are similar.", "author": "praneesha", "createdAt": "2020-03-26T13:19:37Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NDkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398564928", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n          \n          \n            \n                # + return - Returns an error if an error occurs while stopping the server or returns nil otherwise.", "author": "praneesha", "createdAt": "2020-03-26T13:19:55Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398565300", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n          \n          \n            \n                # Stops the registered service. Behaviours of this and the `__gracefulStop()` function are similar.", "author": "praneesha", "createdAt": "2020-03-26T13:20:25Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTQ3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398565474", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n          \n          \n            \n                # + return - Returns an error if an error occurs while stopping the server or returns nil otherwise", "author": "praneesha", "createdAt": "2020-03-26T13:20:41Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTg2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398565861", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets called every time a service attaches itself to this listener - also happens at module init time.\n          \n          \n            \n                # Gets called every time a service attaches itself to this listener. Also, happens at the initialization of  the module.", "author": "praneesha", "createdAt": "2020-03-26T13:21:17Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjA0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n          \n          \n            \n                # + return - Returns an error if an error occurs while attaching the service or returns nil otherwise", "author": "praneesha", "createdAt": "2020-03-26T13:21:32Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjIxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets called every time a service detach itself to this listener\n          \n          \n            \n                # Gets called every time a service detaches itself from this listener", "author": "praneesha", "createdAt": "2020-03-26T13:21:47Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjM5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566397", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise\n          \n          \n            \n                # + return - Returns an error if an error occurs while detaching the service or returns nil otherwise", "author": "praneesha", "createdAt": "2020-03-26T13:22:04Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener\n+    #\n+    # + s - The type of the service to be detached\n+    # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjU3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398566579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n          \n          \n            \n                // Socket listener operations are strictly bound to the attached service. In fact, a listener doesn't support", "author": "praneesha", "createdAt": "2020-03-26T13:22:21Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener\n+    #\n+    # + s - The type of the service to be detached\n+    # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise\n     public function __detach(service s) returns error? {\n-        // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n-        // for multiple services. So not removing already attached service during the detach.\n+    // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NzI0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22224#discussion_r398567243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // for multiple services. So not removing already attached service during the detach.\n          \n          \n            \n                // multiple services. Therefore, an already attached service is not removed during the detachment.", "author": "praneesha", "createdAt": "2020-03-26T13:23:21Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -14,41 +14,63 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/lang.'object as lang;\n import ballerina/java;\n+import ballerina/lang.'object as lang;\n \n # Represents service endpoint where socket server service registered and start.\n #\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Initialize the TCP socket listener with a port and optional listener configuration.\n+    #\n+    # + port - The port number to which this listener is attached and listen\n+    # + config - This optional listener configuration is used to provide properties like bind interface and read timeout\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __immediateStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+    # Stops the registered service. Both behaviour of this and __gracefulStop() function is similar.\n+    #\n+    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise\n     public function __immediateStop() returns error? {\n         return externStop(self, false);\n     }\n \n+    # Gets called every time a service attaches itself to this listener - also happens at module init time.\n+    #\n+    # + s - The type of the service to be registered\n+    # + name - Name of the service\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s);\n     }\n \n+    # Gets called every time a service detach itself to this listener\n+    #\n+    # + s - The type of the service to be detached\n+    # + return - Returns an error if encounters an error while detaching the service, returns nil otherwise\n     public function __detach(service s) returns error? {\n-        // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n-        // for multiple services. So not removing already attached service during the detach.\n+    // Socket listener operations are strictly bound to the attached service. In fact, listener doesn't support\n+    // for multiple services. So not removing already attached service during the detach.", "originalCommit": "6501902eaf7f38adccdfcbe11e8637d1662603f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04676ba95b447a6b482268a534783fce1ed54039", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04676ba95b447a6b482268a534783fce1ed54039", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-03-26T13:27:19Z", "type": "commit"}, {"oid": "050b5a43b637508f9336c139660af07543e09bdd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/050b5a43b637508f9336c139660af07543e09bdd", "message": "Remove `` due to balo creation issue\n\nBalo creation failed due to the `invalid reference in documentation '__immediateStop()' for type 'function'`", "committedDate": "2020-03-27T04:14:17Z", "type": "commit"}]}