{"pr_number": 21796, "pr_title": "Fix and disable failing BBE tests", "pr_createdAt": "2020-03-16T07:52:13Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796", "timeline": [{"oid": "74327f0cc959946ddcc8f378eedb9fbea4f197ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74327f0cc959946ddcc8f378eedb9fbea4f197ba", "message": "Fix and disable failing BBE tests", "committedDate": "2020-03-16T07:50:12Z", "type": "commit"}, {"oid": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7fad7f6da21e406beb2e8fa741b02381b6404cf", "message": "Add missing newline", "committedDate": "2020-03-16T07:53:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1Mjc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392852798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Accessing a non-existing child will return empty xml sequence.\n          \n          \n            \n                // Accessing a non-existing child will return am empty `xml` sequence.\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Accessing a non-existing child will return empty xml sequence.\n          \n          \n            \n                // Accessing a non-existing child will return an empty XML sequence.", "author": "pubudu91", "createdAt": "2020-03-16T08:31:27Z", "path": "examples/xml-access/xml_access.bal", "diffHunk": "@@ -14,25 +14,30 @@ public function main() {\n                 <!--Price: $10-->\n                 </book>`;\n     \n-    // You can access child XML items using the field-based or index-based access expressions.\n-    io:println(bookXML.author.fname);\n-    io:println(bookXML[\"author\"][\"fname\"]);\n+    // You can access child XML items using xml step expressions.\n+    io:println(bookXML/<author>/<fname>);\n \n-    // Accessing a non-existing child will return `nil`.\n-    io:println(bookXML.ISBN.code);\n-    io:println(bookXML[\"ISBN\"][\"code\"]);\n-\n-    // The result of the above field-based or index-based access is another XML. \n-    // Any XML function can be invoked on top of the resulting XML.\n-    io:println(bookXML.author.fname.getTextValue());\n-    io:println(bookXML[\"author\"][\"fname\"].getTextValue());\n+    // Accessing a non-existing child will return empty xml sequence.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNzQ3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r393037474", "bodyText": "Will apply to #21826", "author": "rdhananjaya", "createdAt": "2020-03-16T13:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1Mjc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MzE3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392853179", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // You can match descendent elements using following steping access syntax.\n          \n          \n            \n                // You can match descendant elements using the following stepping access syntax.", "author": "pubudu91", "createdAt": "2020-03-16T08:32:17Z", "path": "examples/xml-access/xml_access.bal", "diffHunk": "@@ -14,25 +14,30 @@ public function main() {\n                 <!--Price: $10-->\n                 </book>`;\n     \n-    // You can access child XML items using the field-based or index-based access expressions.\n-    io:println(bookXML.author.fname);\n-    io:println(bookXML[\"author\"][\"fname\"]);\n+    // You can access child XML items using xml step expressions.\n+    io:println(bookXML/<author>/<fname>);\n \n-    // Accessing a non-existing child will return `nil`.\n-    io:println(bookXML.ISBN.code);\n-    io:println(bookXML[\"ISBN\"][\"code\"]);\n-\n-    // The result of the above field-based or index-based access is another XML. \n-    // Any XML function can be invoked on top of the resulting XML.\n-    io:println(bookXML.author.fname.getTextValue());\n-    io:println(bookXML[\"author\"][\"fname\"].getTextValue());\n+    // Accessing a non-existing child will return empty xml sequence.\n+    io:println(bookXML/<ISBN>/<code>);\n \n     // You can also retrieve attributes of the resulting child XML.\n-    io:println(bookXML.author.fname@[\"title\"]);\n-    io:println(bookXML[\"author\"][\"fname\"]@[\"title\"]);\n+    io:println(bookXML/<author>/<fname>.title);\n+\n+    // You can match descendent elements using following steping access syntax.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NDIzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392854231", "bodyText": "// Use the following syntax to select all the child elements\nor\n// Use the following syntax to select all the children", "author": "pubudu91", "createdAt": "2020-03-16T08:34:36Z", "path": "examples/xml-access/xml_access.bal", "diffHunk": "@@ -14,25 +14,30 @@ public function main() {\n                 <!--Price: $10-->\n                 </book>`;\n     \n-    // You can access child XML items using the field-based or index-based access expressions.\n-    io:println(bookXML.author.fname);\n-    io:println(bookXML[\"author\"][\"fname\"]);\n+    // You can access child XML items using xml step expressions.\n+    io:println(bookXML/<author>/<fname>);\n \n-    // Accessing a non-existing child will return `nil`.\n-    io:println(bookXML.ISBN.code);\n-    io:println(bookXML[\"ISBN\"][\"code\"]);\n-\n-    // The result of the above field-based or index-based access is another XML. \n-    // Any XML function can be invoked on top of the resulting XML.\n-    io:println(bookXML.author.fname.getTextValue());\n-    io:println(bookXML[\"author\"][\"fname\"].getTextValue());\n+    // Accessing a non-existing child will return empty xml sequence.\n+    io:println(bookXML/<ISBN>/<code>);\n \n     // You can also retrieve attributes of the resulting child XML.\n-    io:println(bookXML.author.fname@[\"title\"]);\n-    io:println(bookXML[\"author\"][\"fname\"]@[\"title\"]);\n+    io:println(bookXML/<author>/<fname>.title);\n+\n+    // You can match descendent elements using following steping access syntax.\n+    io:println(bookXML/**/<fname>);\n+\n+    // Select all children using bellow syntax.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MjMzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392862337", "bodyText": "children will include non elements (pi, comment, text)", "author": "rdhananjaya", "createdAt": "2020-03-16T08:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NDIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NDY5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392854691", "bodyText": "What's the difference between the above selection and the below one?", "author": "pubudu91", "createdAt": "2020-03-16T08:35:33Z", "path": "examples/xml-access/xml_access.bal", "diffHunk": "@@ -14,25 +14,30 @@ public function main() {\n                 <!--Price: $10-->\n                 </book>`;\n     \n-    // You can access child XML items using the field-based or index-based access expressions.\n-    io:println(bookXML.author.fname);\n-    io:println(bookXML[\"author\"][\"fname\"]);\n+    // You can access child XML items using xml step expressions.\n+    io:println(bookXML/<author>/<fname>);\n \n-    // Accessing a non-existing child will return `nil`.\n-    io:println(bookXML.ISBN.code);\n-    io:println(bookXML[\"ISBN\"][\"code\"]);\n-\n-    // The result of the above field-based or index-based access is another XML. \n-    // Any XML function can be invoked on top of the resulting XML.\n-    io:println(bookXML.author.fname.getTextValue());\n-    io:println(bookXML[\"author\"][\"fname\"].getTextValue());\n+    // Accessing a non-existing child will return empty xml sequence.\n+    io:println(bookXML/<ISBN>/<code>);\n \n     // You can also retrieve attributes of the resulting child XML.\n-    io:println(bookXML.author.fname@[\"title\"]);\n-    io:println(bookXML[\"author\"][\"fname\"]@[\"title\"]);\n+    io:println(bookXML/<author>/<fname>.title);\n+\n+    // You can match descendent elements using following steping access syntax.\n+    io:println(bookXML/**/<fname>);\n+\n+    // Select all children using bellow syntax.\n+    io:println(bookXML/*);\n+\n+    // And select all children elements using bellow syntax.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NTE2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392855160", "bodyText": "`// Select all the children belonging to a specific namespace.", "author": "pubudu91", "createdAt": "2020-03-16T08:36:18Z", "path": "examples/xml-access/xml_access.bal", "diffHunk": "@@ -14,25 +14,30 @@ public function main() {\n                 <!--Price: $10-->\n                 </book>`;\n     \n-    // You can access child XML items using the field-based or index-based access expressions.\n-    io:println(bookXML.author.fname);\n-    io:println(bookXML[\"author\"][\"fname\"]);\n+    // You can access child XML items using xml step expressions.\n+    io:println(bookXML/<author>/<fname>);\n \n-    // Accessing a non-existing child will return `nil`.\n-    io:println(bookXML.ISBN.code);\n-    io:println(bookXML[\"ISBN\"][\"code\"]);\n-\n-    // The result of the above field-based or index-based access is another XML. \n-    // Any XML function can be invoked on top of the resulting XML.\n-    io:println(bookXML.author.fname.getTextValue());\n-    io:println(bookXML[\"author\"][\"fname\"].getTextValue());\n+    // Accessing a non-existing child will return empty xml sequence.\n+    io:println(bookXML/<ISBN>/<code>);\n \n     // You can also retrieve attributes of the resulting child XML.\n-    io:println(bookXML.author.fname@[\"title\"]);\n-    io:println(bookXML[\"author\"][\"fname\"]@[\"title\"]);\n+    io:println(bookXML/<author>/<fname>.title);\n+\n+    // You can match descendent elements using following steping access syntax.\n+    io:println(bookXML/**/<fname>);\n+\n+    // Select all children using bellow syntax.\n+    io:println(bookXML/*);\n+\n+    // And select all children elements using bellow syntax.\n+    io:println(bookXML/<*>);\n+\n+    // Select all children belong to specific namespace.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392856349", "bodyText": "// XML sequences can be filtered using XML filter expressions.", "author": "pubudu91", "createdAt": "2020-03-16T08:38:34Z", "path": "examples/xml-access/xml_access.bal", "diffHunk": "@@ -14,25 +14,30 @@ public function main() {\n                 <!--Price: $10-->\n                 </book>`;\n     \n-    // You can access child XML items using the field-based or index-based access expressions.\n-    io:println(bookXML.author.fname);\n-    io:println(bookXML[\"author\"][\"fname\"]);\n+    // You can access child XML items using xml step expressions.\n+    io:println(bookXML/<author>/<fname>);\n \n-    // Accessing a non-existing child will return `nil`.\n-    io:println(bookXML.ISBN.code);\n-    io:println(bookXML[\"ISBN\"][\"code\"]);\n-\n-    // The result of the above field-based or index-based access is another XML. \n-    // Any XML function can be invoked on top of the resulting XML.\n-    io:println(bookXML.author.fname.getTextValue());\n-    io:println(bookXML[\"author\"][\"fname\"].getTextValue());\n+    // Accessing a non-existing child will return empty xml sequence.\n+    io:println(bookXML/<ISBN>/<code>);\n \n     // You can also retrieve attributes of the resulting child XML.\n-    io:println(bookXML.author.fname@[\"title\"]);\n-    io:println(bookXML[\"author\"][\"fname\"]@[\"title\"]);\n+    io:println(bookXML/<author>/<fname>.title);\n+\n+    // You can match descendent elements using following steping access syntax.\n+    io:println(bookXML/**/<fname>);\n+\n+    // Select all children using bellow syntax.\n+    io:println(bookXML/*);\n+\n+    // And select all children elements using bellow syntax.\n+    io:println(bookXML/<*>);\n+\n+    // Select all children belong to specific namespace.\n+    xmlns \"http://ballerina.com/a\" as bar;\n+    io:println(bookXML/<bar:*>/*);\n \n-    // You can access the elements by their namespace-qualified (fully-qualified) name.\n-    io:println(bookXML[\"{http://ballerina.com/a}year\"].getTextValue());\n-    xmlns \"http://ballerina.com/a\" as foo;\n-    io:println(bookXML[foo:year].getTextValue());\n+    xml seq = bookXML/*;\n+    // You can filter a xml sequence using xml filter expressions.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODU4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392858588", "bodyText": "xml -> XML. Use xml if referring to the XML type in Ballerina. If referring to XML in general, use XML (all caps, not highlighted as code)", "author": "pubudu91", "createdAt": "2020-03-16T08:43:08Z", "path": "examples/xml-access/xml_access.description", "diffHunk": "@@ -1,2 +1,2 @@\n // XML elements can contain child XML items. Ballerina allows you to access these\n-// child elements conveniently using field-access and index-access expressions.\n+// child elements conveniently using xml step expressions and xml filter expressions.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTA5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392859094", "bodyText": "Do we need to use an alias here?", "author": "pubudu91", "createdAt": "2020-03-16T08:44:04Z", "path": "examples/xml-attributes/xml_attributes.bal", "diffHunk": "@@ -1,41 +1,33 @@\n import ballerina/io;\n+import ballerina/lang.'xml as xmllib;", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MDE1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392860153", "bodyText": "We don't have any documentation except the spec which explains what lax typing is right? If that's the case, we might either have to explain briefly what lax typing is or just explain what's going on here, without referring to lax typing.", "author": "pubudu91", "createdAt": "2020-03-16T08:46:08Z", "path": "examples/xml-attributes/xml_attributes.bal", "diffHunk": "@@ -1,41 +1,33 @@\n import ballerina/io;\n+import ballerina/lang.'xml as xmllib;\n \n xmlns \"http://ballerina.com/aa\" as ns0;\n \n public function main() {\n     // Creates an XML element, which has attributes that are bound to a namespace as well as ones that are not.\n-    xml x1 = xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n+    xmllib:Element x1 = <xmllib:Element> xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n     io:println(x1);\n \n-    // A single attribute that is bound to a namespace can be accessed using its qualified name. \n-    io:println(x1@[ns0:status]);\n+    // A single attribute that is bound to a namespace can be accessed using its qualified name.\n+    io:println(x1.ns0:status);\n \n-    // An attribute can also be accessed using the string representation of the qualified name. \n-    string? s = x1@[\"{http://ballerina.com/aa}status\"];\n-    io:println(s);\n-\n-    // An attribute that is not bound to a namespace can be accessed using the string representation of the name.\n-    io:println(x1@[\"count\"]);\n-\n-    // Accesses an attribute using a dynamic name.\n-    string attributeName = \"count\";\n-    io:println(x1@[attributeName]);\n+    // Attribute access expressions are lax typed.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MDY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392860693", "bodyText": "// Accessing a non-existent attribute will return an error.", "author": "pubudu91", "createdAt": "2020-03-16T08:47:13Z", "path": "examples/xml-attributes/xml_attributes.bal", "diffHunk": "@@ -1,41 +1,33 @@\n import ballerina/io;\n+import ballerina/lang.'xml as xmllib;\n \n xmlns \"http://ballerina.com/aa\" as ns0;\n \n public function main() {\n     // Creates an XML element, which has attributes that are bound to a namespace as well as ones that are not.\n-    xml x1 = xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n+    xmllib:Element x1 = <xmllib:Element> xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n     io:println(x1);\n \n-    // A single attribute that is bound to a namespace can be accessed using its qualified name. \n-    io:println(x1@[ns0:status]);\n+    // A single attribute that is bound to a namespace can be accessed using its qualified name.\n+    io:println(x1.ns0:status);\n \n-    // An attribute can also be accessed using the string representation of the qualified name. \n-    string? s = x1@[\"{http://ballerina.com/aa}status\"];\n-    io:println(s);\n-\n-    // An attribute that is not bound to a namespace can be accessed using the string representation of the name.\n-    io:println(x1@[\"count\"]);\n-\n-    // Accesses an attribute using a dynamic name.\n-    string attributeName = \"count\";\n-    io:println(x1@[attributeName]);\n+    // Attribute access expressions are lax typed.\n+    string|error count = x1.count;\n+    io:println(count);\n \n-    // Updates an attribute.\n-    x1@[ns0:status] = \"Not Available\";\n-    io:println(x1@[ns0:status]);\n+    // Returns an error when accessing non existing attribute.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MDg3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392860870", "bodyText": "xml -> XML", "author": "pubudu91", "createdAt": "2020-03-16T08:47:35Z", "path": "examples/xml-attributes/xml_attributes.bal", "diffHunk": "@@ -1,41 +1,33 @@\n import ballerina/io;\n+import ballerina/lang.'xml as xmllib;\n \n xmlns \"http://ballerina.com/aa\" as ns0;\n \n public function main() {\n     // Creates an XML element, which has attributes that are bound to a namespace as well as ones that are not.\n-    xml x1 = xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n+    xmllib:Element x1 = <xmllib:Element> xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n     io:println(x1);\n \n-    // A single attribute that is bound to a namespace can be accessed using its qualified name. \n-    io:println(x1@[ns0:status]);\n+    // A single attribute that is bound to a namespace can be accessed using its qualified name.\n+    io:println(x1.ns0:status);\n \n-    // An attribute can also be accessed using the string representation of the qualified name. \n-    string? s = x1@[\"{http://ballerina.com/aa}status\"];\n-    io:println(s);\n-\n-    // An attribute that is not bound to a namespace can be accessed using the string representation of the name.\n-    io:println(x1@[\"count\"]);\n-\n-    // Accesses an attribute using a dynamic name.\n-    string attributeName = \"count\";\n-    io:println(x1@[attributeName]);\n+    // Attribute access expressions are lax typed.\n+    string|error count = x1.count;\n+    io:println(count);\n \n-    // Updates an attribute.\n-    x1@[ns0:status] = \"Not Available\";\n-    io:println(x1@[ns0:status]);\n+    // Returns an error when accessing non existing attribute.\n+    string|error count2 = x1.count2;\n+    io:println(count2 is error);\n \n-    // It is possible to get all the attributes at once. However, this cannot be assigned to any variable.\n-    io:println(x1@);\n-\n-    // The`x1@` syntax can be used to get all the attributes of a singleton XML element as a map.\n-    map<string>? attributeMap = x1@;\n+    // It is possible to get all the attributes of a xml element.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MTY5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392861692", "bodyText": "a xml -> an XML", "author": "pubudu91", "createdAt": "2020-03-16T08:49:11Z", "path": "examples/xml-attributes/xml_attributes.bal", "diffHunk": "@@ -1,41 +1,33 @@\n import ballerina/io;\n+import ballerina/lang.'xml as xmllib;\n \n xmlns \"http://ballerina.com/aa\" as ns0;\n \n public function main() {\n     // Creates an XML element, which has attributes that are bound to a namespace as well as ones that are not.\n-    xml x1 = xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n+    xmllib:Element x1 = <xmllib:Element> xml `<ns0:book ns0:status=\"available\" count=\"5\"/>`;\n     io:println(x1);\n \n-    // A single attribute that is bound to a namespace can be accessed using its qualified name. \n-    io:println(x1@[ns0:status]);\n+    // A single attribute that is bound to a namespace can be accessed using its qualified name.\n+    io:println(x1.ns0:status);\n \n-    // An attribute can also be accessed using the string representation of the qualified name. \n-    string? s = x1@[\"{http://ballerina.com/aa}status\"];\n-    io:println(s);\n-\n-    // An attribute that is not bound to a namespace can be accessed using the string representation of the name.\n-    io:println(x1@[\"count\"]);\n-\n-    // Accesses an attribute using a dynamic name.\n-    string attributeName = \"count\";\n-    io:println(x1@[attributeName]);\n+    // Attribute access expressions are lax typed.\n+    string|error count = x1.count;\n+    io:println(count);\n \n-    // Updates an attribute.\n-    x1@[ns0:status] = \"Not Available\";\n-    io:println(x1@[ns0:status]);\n+    // Returns an error when accessing non existing attribute.\n+    string|error count2 = x1.count2;\n+    io:println(count2 is error);\n \n-    // It is possible to get all the attributes at once. However, this cannot be assigned to any variable.\n-    io:println(x1@);\n-\n-    // The`x1@` syntax can be used to get all the attributes of a singleton XML element as a map.\n-    map<string>? attributeMap = x1@;\n+    // It is possible to get all the attributes of a xml element.\n+    map<string> attributeMap = x1.getAttributes();\n     io:println(attributeMap);\n-    io:println(attributeMap[\"count\"]);\n \n-    // However, if we apply the `@` operator to a XML sequence, it will return NIL because only XML elements have attributes.\n-    xml x2 = xml `<Person name=\"James\"/>`;\n-    xml x3 = x1 + x2;\n-    map<string>? attributeMapOfSeq = x3@;\n-    io:println(attributeMapOfSeq);\n+    // An attribute can also be accessed using the string representation of the qualified name from the attribute map.\n+    string? s = attributeMap[\"{http://ballerina.com/aa}status\"];\n+    io:println(s);\n+\n+    // Updates an attribute by updating the attribute map of a xml element.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Mjc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r392862743", "bodyText": "The above needs to be slightly rephrased. Again, if we don't have an example for lax typing, users may be confused as to what lax typing is. @MaryamZi thoughts?", "author": "pubudu91", "createdAt": "2020-03-16T08:51:19Z", "path": "examples/xml-attributes/xml_attributes.description", "diffHunk": "@@ -1,4 +1,7 @@\n // XML elements may have any number of attributes and any number\n // of namespace declarations that apply for that element. \n // In Ballerina, both of these types are treated the same. \n-// Attributes are accessed from an XML sequence using the `@` postfix operator.\n+// XML attribute access in ballerina is lax typed similar\n+// to `json`, we can use field access expression (`.`) and\n+// optional field access expressions (``?.`) to access teh\n+// field of a xml value.", "originalCommit": "a7fad7f6da21e406beb2e8fa741b02381b6404cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3NTE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r393075157", "bodyText": "For JSON we describe this lax-ness in the description of the JSON access BBE. See https://ballerina.io/v1-1/learn/by-example/json-access.html\nShall we do something similar?\nIssues I see with a separate BBE are\n\nwhich section do we put it in?\nwhat examples do we include? Both JSON and XML I assume, but we can't remove it from the JSON and XML sections either. That then duplicates content.\n\nWhat do y'all think?", "author": "MaryamZi", "createdAt": "2020-03-16T14:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Mjc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3NTY4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21796#discussion_r393075688", "bodyText": "There's a typo btw. teh -> the", "author": "MaryamZi", "createdAt": "2020-03-16T14:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Mjc0Mw=="}], "type": "inlineReview"}]}