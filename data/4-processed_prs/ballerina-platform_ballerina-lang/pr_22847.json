{"pr_number": 22847, "pr_title": "Refactor JWT module internals [1.2.x]", "pr_createdAt": "2020-04-23T06:47:06Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22847", "timeline": [{"oid": "bccc977d010bf5a5b4d10422cb2197fa49f2c7f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bccc977d010bf5a5b4d10422cb2197fa49f2c7f6", "message": "Refactor jwt validator", "committedDate": "2020-04-23T06:44:37Z", "type": "commit"}, {"oid": "b6b007dd7e3e25e7d4186583c195d2dca47dbac2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6b007dd7e3e25e7d4186583c195d2dca47dbac2", "message": "Fix JWT abbreviation usages", "committedDate": "2020-04-23T06:44:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1OTcwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22847#discussion_r413759704", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {\n          \n          \n            \n                if (jwtComponents.length() != 2) {", "author": "daneshk", "createdAt": "2020-04-23T12:07:56Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -61,76 +61,74 @@ public type InboundJwtCacheEntry record {|\n # jwt:JwtPayload|jwt:error result = jwt:validateJwt(jwt, validatorConfig);\n # ```\n #\n-# + jwtToken - JWT that needs to be validated\n+# + jwt - JWT that needs to be validated\n # + config - JWT validator config record\n # + return - JWT payload or else a `jwt:Error` if token validation fails\n-public function validateJwt(string jwtToken, JwtValidatorConfig config) returns @tainted (JwtPayload|Error) {\n-    [JwtHeader, JwtPayload] [header, payload] = check decodeJwt(jwtToken);\n-    return validateJwtRecords(jwtToken, header, payload, config) ?: payload;\n-}\n-\n-function getJwtComponents(string jwtToken) returns string[]|Error {\n-    string[] jwtComponents = stringutils:split(jwtToken, \"\\\\.\");\n-    if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {\n-        return prepareError(\"Invalid JWT token.\");\n-    }\n-    return jwtComponents;\n+public function validateJwt(string jwt, JwtValidatorConfig config) returns @tainted (JwtPayload|Error) {\n+    [JwtHeader, JwtPayload] [header, payload] = check decodeJwt(jwt);\n+    return validateJwtRecords(jwt, header, payload, config) ?: payload;\n }\n \n # Decodes the given JWT string.\n # ```ballerina\n-# [jwt:JwtHeader, jwt:JwtPayload]|jwt:Error [header, payload] = jwt:decodeJwt(jwtToken);\n+# [jwt:JwtHeader, jwt:JwtPayload]|jwt:Error [header, payload] = jwt:decodeJwt(jwt);\n # ```\n #\n-# + jwtToken - JWT that needs to be decoded\n+# + jwt - JWT that needs to be decoded\n # + return - The JWT header and payload tuple or else a `jwt:Error` if token decoding fails\n-public function decodeJwt(string jwtToken) returns @tainted ([JwtHeader, JwtPayload]|Error) {\n-    string[] encodedJwtComponents = check getJwtComponents(jwtToken);\n-    [map<json>, map<json>] [headerJson, payloadJson] = check getDecodedJwtComponents(encodedJwtComponents);\n-    JwtHeader jwtHeader = parseHeader(headerJson);\n-    JwtPayload jwtPayload = check parsePayload(payloadJson);\n+public function decodeJwt(string jwt) returns @tainted ([JwtHeader, JwtPayload]|Error) {\n+    string[] encodedJwtComponents = check getJwtComponents(jwt);\n+    JwtHeader jwtHeader = check getJwtHeader(encodedJwtComponents[0]);\n+    JwtPayload jwtPayload = check getJwtPayload(encodedJwtComponents[1]);\n     return [jwtHeader, jwtPayload];\n }\n \n-function getDecodedJwtComponents(string[] encodedJwtComponents) returns @tainted ([map<json>, map<json>]|Error) {\n-    string jwtHeader;\n-    string jwtPayload;\n+function getJwtComponents(string jwt) returns string[]|Error {\n+    string[] jwtComponents = stringutils:split(jwt, \"\\\\.\");\n+    if (jwtComponents.length() < 2 || jwtComponents.length() > 3) {", "originalCommit": "b6b007dd7e3e25e7d4186583c195d2dca47dbac2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0e5eaf67d6c643251341003afcec801ec53b0069", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e5eaf67d6c643251341003afcec801ec53b0069", "message": "Apply suggestions from code review", "committedDate": "2020-04-24T03:58:04Z", "type": "commit"}, {"oid": "0e5eaf67d6c643251341003afcec801ec53b0069", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e5eaf67d6c643251341003afcec801ec53b0069", "message": "Apply suggestions from code review", "committedDate": "2020-04-24T03:58:04Z", "type": "forcePushed"}]}