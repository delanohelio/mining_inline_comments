{"pr_number": 21211, "pr_title": "Disable Semantic-Highlighting which causes an extra compilation", "pr_createdAt": "2020-02-24T06:29:14Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21211", "timeline": [{"oid": "2687a5080b996d067c85e6bac49458db1ecbff16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2687a5080b996d067c85e6bac49458db1ecbff16", "message": "Disable Semantic-Highlighting which causes an extra compilation\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-02-24T08:57:05Z", "type": "forcePushed"}, {"oid": "6ff1a313c44c12e466aa0351dec8709d6012e524", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ff1a313c44c12e466aa0351dec8709d6012e524", "message": "Disable Semantic-Highlighting which causes an extra compilation\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-02-25T06:04:31Z", "type": "forcePushed"}, {"oid": "9faa177ffaa800132ac8242b945cd97e34b168b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9faa177ffaa800132ac8242b945cd97e34b168b1", "message": "Disable Semantic-Highlighting which causes an extra compilation\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-02-25T12:18:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyODUyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21211#discussion_r383928525", "bodyText": "Let's deviate from the singleton and instead try to pass the capabilities to the services? This is because, if we use singleton in this usecase, we cannot avoid the Existential issue where the Singleton state is mutating with the initialize method", "author": "nadeeshaan", "createdAt": "2020-02-25T14:54:00Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaLanguageServer.java", "diffHunk": "@@ -131,36 +132,34 @@ public ExtendedLanguageClient getClient() {\n         res.getCapabilities().setImplementationProvider(false);\n //        res.getCapabilities().setCodeLensProvider(new CodeLensOptions());\n \n-        TextDocumentClientCapabilities textDocCapabilities = params.getCapabilities().getTextDocument();\n-        ((BallerinaTextDocumentService) this.textService).setClientCapabilities(textDocCapabilities);\n-\n-        HashMap experimentalClientCapabilities = null;\n+        HashMap expCapabilities = null;\n         if (params.getCapabilities().getExperimental() != null) {\n-            experimentalClientCapabilities =\n-                    new Gson().fromJson(params.getCapabilities().getExperimental().toString(), HashMap.class);\n+            expCapabilities = new Gson().fromJson(params.getCapabilities().getExperimental().toString(), HashMap.class);\n         }\n \n-        BallerinaWorkspaceService workspaceService = (BallerinaWorkspaceService) this.workspaceService;\n-        workspaceService.setExperimentalClientCapabilities(experimentalClientCapabilities);\n-\n         // Set AST provider and examples provider capabilities\n         HashMap<String, Object> experimentalServerCapabilities = new HashMap<>();\n         experimentalServerCapabilities.put(AST_PROVIDER.getValue(), true);\n         experimentalServerCapabilities.put(EXAMPLES_PROVIDER.getValue(), true);\n         experimentalServerCapabilities.put(API_EDITOR_PROVIDER.getValue(), true);\n-        if (experimentalClientCapabilities != null &&\n-                experimentalClientCapabilities.get(INTROSPECTION.getValue()) != null) {\n+        if (expCapabilities != null && expCapabilities.get(INTROSPECTION.getValue()) != null) {\n             int port = ballerinaTraceListener.startListener();\n             experimentalServerCapabilities.put(INTROSPECTION.getValue(), new ProviderOptions(port));\n         }\n-        if (experimentalClientCapabilities != null &&\n-                experimentalClientCapabilities.get(SEMANTIC_SYNTAX_HIGHLIGHTER.getValue()) != null) {\n+        if (expCapabilities != null &&\n+                expCapabilities.get(SEMANTIC_SYNTAX_HIGHLIGHTER.getValue()) != null) {\n             experimentalServerCapabilities.put(SEMANTIC_SYNTAX_HIGHLIGHTER.getValue(), true);\n             String[][] scopes = getScopes();\n             experimentalServerCapabilities.put(SEMANTIC_SCOPES.getValue(), scopes);\n         }\n         res.getCapabilities().setExperimental(experimentalServerCapabilities);\n \n+\n+        TextDocumentClientCapabilities txtCapabilities = params.getCapabilities().getTextDocument();\n+        WorkspaceClientCapabilities wsCapabilities = params.getCapabilities().getWorkspace();\n+        LSClientCapabilitiesHolder capabilities = LSClientCapabilitiesHolder.getInstance();", "originalCommit": "9faa177ffaa800132ac8242b945cd97e34b168b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a78f261ce7f938a0a6a7a36812d1b98a4a80a2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a78f261ce7f938a0a6a7a36812d1b98a4a80a2b", "message": "Disable Semantic-Highlighting which causes an extra compilation\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-02-26T05:55:01Z", "type": "commit"}, {"oid": "6a78f261ce7f938a0a6a7a36812d1b98a4a80a2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a78f261ce7f938a0a6a7a36812d1b98a4a80a2b", "message": "Disable Semantic-Highlighting which causes an extra compilation\n\nSigned-off-by: Rasika <info.rasika@gmail.com>", "committedDate": "2020-02-26T05:55:01Z", "type": "forcePushed"}]}