{"pr_number": 21375, "pr_title": "Add toArray() method to map lang library", "pr_createdAt": "2020-02-29T17:08:20Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4NTYyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386785629", "bodyText": "Can we add a test for this method?", "author": "pramodya1994", "createdAt": "2020-03-03T03:50:40Z", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/ToArray.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.langlib.map.util.MapLibUtils;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.util.Collection;\n+\n+import static org.ballerinalang.jvm.MapUtils.createOpNotSupportedError;\n+\n+/**\n+ * Function for returning the values of the map as an array. T[] vals = m.toArray();\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\",\n+        functionName = \"toArray\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP)},\n+        returnType = {@ReturnType(type = TypeKind.ARRAY, elementType = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class ToArray {\n+\n+    public static ArrayValue toArray(Strand strand, MapValue<?, ?> m) {", "originalCommit": "390692d7e0387b1b4cde798145829afbb77355f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzM4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386827389", "bodyText": "Added with 11bc310", "author": "pubudu91", "createdAt": "2020-03-03T06:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4NTYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NTEwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386875109", "bodyText": "Shall we also add a test for records where the record fields are all of a single simple basic type?\ntype Bar record {|\n    byte a;\n    byte b;\n    byte...;\n|};\nThis array can also be updated right? Shall we add a test or two to cover updating a value at an index and maybe adding new elements at the end?", "author": "MaryamZi", "createdAt": "2020-03-03T08:56:09Z", "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -73,3 +73,140 @@ function testReduce() returns float {\n     }, 0.0);\n     return avg;\n }\n+\n+function testBasicToArray() {\n+    map<int> ints = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5};\n+    int[] intArr = ints.toArray();\n+\n+    map<float> floats = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    float[] floatArr = floats.toArray();\n+\n+    map<decimal> decimals = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    decimal[] decimalArr = decimals.toArray();\n+\n+    map<string> strings = {\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"};\n+    string[] stringArr = strings.toArray();\n+\n+    map<boolean> booleans = {\"a\": true, \"b\": false, \"c\": true};\n+    boolean[] booleanArr = booleans.toArray();\n+\n+    map<map<int>> maps = {\"a\": {\"one\": 1, \"two\": 2}, \"b\": {\"three\": 3, \"four\": 4}};\n+    map<int>[] mapArr = maps.toArray();\n+\n+    assert(<int[]>[1, 2, 3, 4, 5], intArr);\n+    assert(<float[]>[1.1, 2.2, 3.3, 4.4, 5.5], floatArr);\n+    assert(<decimal[]>[1.1, 2.2, 3.3, 4.4, 5.5], decimalArr);\n+    assert(<string[]>[\"A\", \"B\", \"C\"], stringArr);\n+    assert(<boolean[]>[true, false, true], booleanArr);\n+    assert(<map<int>[]>[{\"one\": 1, \"two\": 2}, {\"three\": 3, \"four\": 4}], mapArr);\n+}\n+\n+function testLargeMapToArray() {\n+    var fn = function () returns int[] {\n+        int[] arr = [];\n+        foreach var i in 0...999 {\n+            arr[i] = i + 1;\n+        }\n+        return arr;\n+    };\n+\n+    assert(fn(), getLargeMap().toArray());\n+}\n+\n+function getLargeMap() returns map<int> {\n+    map<int> m = {};\n+    foreach var i in 1...1000 {\n+        m[i.toString()] = i;\n+    }\n+    return m;\n+}\n+\n+type Person object {\n+    string name;\n+\n+    function __init(string n) {\n+        self.name = n;\n+    }\n+\n+    function getName() returns string => self.name;\n+};\n+\n+function testMapOfUnionToArray() {\n+    map<int|string|Person> m = {\"i\": 10, \"s\": \"foo\", \"p\": new Person(\"Pubudu\")};\n+    (int|string|Person)[] arr = m.toArray();\n+\n+    assert(10, <anydata>arr[0]);\n+    assert(\"foo\", <anydata>arr[1]);\n+    assertSameRef(m[\"p\"], arr[2]);\n+}\n+\n+type Foo record {|", "originalCommit": "11bc310f720fce8bda15f8421f4f6ba019c33b2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NTQyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386875420", "bodyText": "Shall we return here after checking == instead?", "author": "MaryamZi", "createdAt": "2020-03-03T08:56:42Z", "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -73,3 +73,140 @@ function testReduce() returns float {\n     }, 0.0);\n     return avg;\n }\n+\n+function testBasicToArray() {\n+    map<int> ints = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5};\n+    int[] intArr = ints.toArray();\n+\n+    map<float> floats = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    float[] floatArr = floats.toArray();\n+\n+    map<decimal> decimals = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    decimal[] decimalArr = decimals.toArray();\n+\n+    map<string> strings = {\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"};\n+    string[] stringArr = strings.toArray();\n+\n+    map<boolean> booleans = {\"a\": true, \"b\": false, \"c\": true};\n+    boolean[] booleanArr = booleans.toArray();\n+\n+    map<map<int>> maps = {\"a\": {\"one\": 1, \"two\": 2}, \"b\": {\"three\": 3, \"four\": 4}};\n+    map<int>[] mapArr = maps.toArray();\n+\n+    assert(<int[]>[1, 2, 3, 4, 5], intArr);\n+    assert(<float[]>[1.1, 2.2, 3.3, 4.4, 5.5], floatArr);\n+    assert(<decimal[]>[1.1, 2.2, 3.3, 4.4, 5.5], decimalArr);\n+    assert(<string[]>[\"A\", \"B\", \"C\"], stringArr);\n+    assert(<boolean[]>[true, false, true], booleanArr);\n+    assert(<map<int>[]>[{\"one\": 1, \"two\": 2}, {\"three\": 3, \"four\": 4}], mapArr);\n+}\n+\n+function testLargeMapToArray() {\n+    var fn = function () returns int[] {\n+        int[] arr = [];\n+        foreach var i in 0...999 {\n+            arr[i] = i + 1;\n+        }\n+        return arr;\n+    };\n+\n+    assert(fn(), getLargeMap().toArray());\n+}\n+\n+function getLargeMap() returns map<int> {\n+    map<int> m = {};\n+    foreach var i in 1...1000 {\n+        m[i.toString()] = i;\n+    }\n+    return m;\n+}\n+\n+type Person object {\n+    string name;\n+\n+    function __init(string n) {\n+        self.name = n;\n+    }\n+\n+    function getName() returns string => self.name;\n+};\n+\n+function testMapOfUnionToArray() {\n+    map<int|string|Person> m = {\"i\": 10, \"s\": \"foo\", \"p\": new Person(\"Pubudu\")};\n+    (int|string|Person)[] arr = m.toArray();\n+\n+    assert(10, <anydata>arr[0]);\n+    assert(\"foo\", <anydata>arr[1]);\n+    assertSameRef(m[\"p\"], arr[2]);\n+}\n+\n+type Foo record {|\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+|};\n+\n+function testRecordToArray() {\n+    Foo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true], arr);\n+}\n+\n+type OpenFoo record {\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+};\n+\n+function testOpenRecordToArray() {\n+    OpenFoo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true,\n+        \"location\": \"Sri Lanka\",\n+        \"postalCode\": 12500\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true, \"Sri Lanka\", 12500], arr);\n+}\n+\n+\n+// Util functions\n+\n+function assert(anydata expected, anydata actual) {\n+    if (expected != actual) {", "originalCommit": "11bc310f720fce8bda15f8421f4f6ba019c33b2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NjIzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386876235", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    error e = error(reason);\n          \n          \n            \n                    panic e;\n          \n          \n            \n                    panic error(reason);\n          \n      \n    \n    \n  \n\nJust to be consistent with our usage of reasons, shall we use a simple string as the reason (e.g., \"AssertionError\") and then add this current reason as the message field of the detail?", "author": "MaryamZi", "createdAt": "2020-03-03T08:58:17Z", "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -73,3 +73,140 @@ function testReduce() returns float {\n     }, 0.0);\n     return avg;\n }\n+\n+function testBasicToArray() {\n+    map<int> ints = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5};\n+    int[] intArr = ints.toArray();\n+\n+    map<float> floats = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    float[] floatArr = floats.toArray();\n+\n+    map<decimal> decimals = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    decimal[] decimalArr = decimals.toArray();\n+\n+    map<string> strings = {\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"};\n+    string[] stringArr = strings.toArray();\n+\n+    map<boolean> booleans = {\"a\": true, \"b\": false, \"c\": true};\n+    boolean[] booleanArr = booleans.toArray();\n+\n+    map<map<int>> maps = {\"a\": {\"one\": 1, \"two\": 2}, \"b\": {\"three\": 3, \"four\": 4}};\n+    map<int>[] mapArr = maps.toArray();\n+\n+    assert(<int[]>[1, 2, 3, 4, 5], intArr);\n+    assert(<float[]>[1.1, 2.2, 3.3, 4.4, 5.5], floatArr);\n+    assert(<decimal[]>[1.1, 2.2, 3.3, 4.4, 5.5], decimalArr);\n+    assert(<string[]>[\"A\", \"B\", \"C\"], stringArr);\n+    assert(<boolean[]>[true, false, true], booleanArr);\n+    assert(<map<int>[]>[{\"one\": 1, \"two\": 2}, {\"three\": 3, \"four\": 4}], mapArr);\n+}\n+\n+function testLargeMapToArray() {\n+    var fn = function () returns int[] {\n+        int[] arr = [];\n+        foreach var i in 0...999 {\n+            arr[i] = i + 1;\n+        }\n+        return arr;\n+    };\n+\n+    assert(fn(), getLargeMap().toArray());\n+}\n+\n+function getLargeMap() returns map<int> {\n+    map<int> m = {};\n+    foreach var i in 1...1000 {\n+        m[i.toString()] = i;\n+    }\n+    return m;\n+}\n+\n+type Person object {\n+    string name;\n+\n+    function __init(string n) {\n+        self.name = n;\n+    }\n+\n+    function getName() returns string => self.name;\n+};\n+\n+function testMapOfUnionToArray() {\n+    map<int|string|Person> m = {\"i\": 10, \"s\": \"foo\", \"p\": new Person(\"Pubudu\")};\n+    (int|string|Person)[] arr = m.toArray();\n+\n+    assert(10, <anydata>arr[0]);\n+    assert(\"foo\", <anydata>arr[1]);\n+    assertSameRef(m[\"p\"], arr[2]);\n+}\n+\n+type Foo record {|\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+|};\n+\n+function testRecordToArray() {\n+    Foo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true], arr);\n+}\n+\n+type OpenFoo record {\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+};\n+\n+function testOpenRecordToArray() {\n+    OpenFoo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true,\n+        \"location\": \"Sri Lanka\",\n+        \"postalCode\": 12500\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true, \"Sri Lanka\", 12500], arr);\n+}\n+\n+\n+// Util functions\n+\n+function assert(anydata expected, anydata actual) {\n+    if (expected != actual) {\n+        typedesc<anydata> expT = typeof expected;\n+        typedesc<anydata> actT = typeof actual;\n+        string reason = \"expected [\" + expected.toString() + \"] of type [\" + expT.toString()\n+                            + \"], but found [\" + actual.toString() + \"] of type [\" + actT.toString() + \"]\";\n+        error e = error(reason);\n+        panic e;", "originalCommit": "11bc310f720fce8bda15f8421f4f6ba019c33b2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e378cb52e8b53025c581c16b515dd718fa275c88", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e378cb52e8b53025c581c16b515dd718fa275c88", "message": "Add toArray() method to map lang lib", "committedDate": "2020-03-05T05:40:41Z", "type": "commit"}, {"oid": "8c3b69b73918e28a56adc66d546bd6017322b6a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c3b69b73918e28a56adc66d546bd6017322b6a1", "message": "Add test cases for map.toArray() method", "committedDate": "2020-03-05T05:40:47Z", "type": "commit"}, {"oid": "7177b437681e9d4da1bb8cbeacdb44a42b447f2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7177b437681e9d4da1bb8cbeacdb44a42b447f2d", "message": "Add test case for record with same typed fields", "committedDate": "2020-03-05T05:40:48Z", "type": "commit"}, {"oid": "73e361333b1ece9c0d46c49958e751d8622e9205", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73e361333b1ece9c0d46c49958e751d8622e9205", "message": "Add test cases for modifying resultant of toArray()", "committedDate": "2020-03-05T05:40:48Z", "type": "commit"}, {"oid": "aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "message": "Fix language server test cases", "committedDate": "2020-03-05T05:40:48Z", "type": "commit"}, {"oid": "aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "message": "Fix language server test cases", "committedDate": "2020-03-05T05:40:48Z", "type": "forcePushed"}]}