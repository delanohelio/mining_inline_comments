{"pr_number": 23115, "pr_title": "Enable lang testcases depend on table type & related bug fixes", "pr_createdAt": "2020-05-05T17:47:01Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115", "timeline": [{"oid": "fff08a0524f9d36c0cfd03539294e7aee8e35c14", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fff08a0524f9d36c0cfd03539294e7aee8e35c14", "message": "Enable table related testcases and bug fixes", "committedDate": "2020-05-04T16:22:48Z", "type": "commit"}, {"oid": "23776eb691d4c78953a3f5972a143f0af5e5ec9a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23776eb691d4c78953a3f5972a143f0af5e5ec9a", "message": "Add filler values for table and related test cases", "committedDate": "2020-05-05T12:18:07Z", "type": "commit"}, {"oid": "d0a0e0b116bec1aa98d763380c3e68fb556d0990", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d0a0e0b116bec1aa98d763380c3e68fb556d0990", "message": "Fix table type dependent test cases", "committedDate": "2020-05-05T15:21:56Z", "type": "commit"}, {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2", "message": "Disable AnydataTest in bstring test module", "committedDate": "2020-05-06T08:48:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0Mzc5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420643793", "bodyText": "is it possible to have noType for the constraint?", "author": "gimantha", "createdAt": "2020-05-06T09:03:02Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1134,6 +1134,14 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n             case TypeTags.XML:\n                 varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n                 break;\n+            case TypeTags.TABLE:\n+                BTableType tableType = (BTableType) collectionType;\n+                if (tableType.constraint.tag == TypeTags.NONE) {", "originalCommit": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MDA0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420660046", "bodyText": "Fixed.", "author": "mohanvive", "createdAt": "2020-05-06T09:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0Mzc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDA5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420644093", "bodyText": "is it possible to have noType for the constraint?", "author": "gimantha", "createdAt": "2020-05-06T09:03:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1226,6 +1234,14 @@ public void setFromClauseTypedBindingPatternType(BLangFromClause fromClause) {\n             case TypeTags.XML:\n                 varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n                 break;\n+            case TypeTags.TABLE:\n+                BTableType tableType = (BTableType) collectionType;\n+                if (tableType.constraint.tag == TypeTags.NONE) {", "originalCommit": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MDA3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420660076", "bodyText": "Fixed.", "author": "mohanvive", "createdAt": "2020-05-06T09:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDgyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420644825", "bodyText": "I will enable this.. I have the fix", "author": "gimantha", "createdAt": "2020-05-06T09:04:50Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachTableTypedBindingPatternsTests.java", "diffHunk": "@@ -31,43 +31,42 @@\n  * @since 0.985.0\n  */\n \n-//TODO Table remove - Fix\n public class ForeachTableTypedBindingPatternsTests {\n \n     private CompileResult program;\n \n-    @BeforeClass (enabled = false)\n+    @BeforeClass\n     public void setup() {\n         program = BCompileUtil.compile(\"test-src/statements/foreach/foreach-table-typed-binding-patterns.bal\");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testTableWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testTableWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(),\n                 \"0:id=1 name=Mary salary=300.5 1:id=2 name=John salary=200.5 2:id=3 name=Jim salary=330.5 \");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testTableWithType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testTableWithType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(),\n                 \"0:id=1 name=Mary salary=300.5 1:id=2 name=John salary=200.5 2:id=3 name=Jim salary=330.5 \");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testRecordInTableWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testRecordInTableWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(), \"0:1:Mary:300.5 1:2:John:200.5 2:3:Jim:330.5 \");\n     }\n \n-    @Test (enabled = false)\n-    public void testEmptyTableIteration() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testEmptyTableIteration\");\n-        Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"\");\n-    }\n+//    @Test", "originalCommit": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NDM0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420654341", "bodyText": "OK.", "author": "mohanvive", "createdAt": "2020-05-06T09:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0ODY4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420648684", "bodyText": "we cant have string here. key type can be any anydata type for tables.", "author": "gimantha", "createdAt": "2020-05-06T09:11:58Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTableType.java", "diffHunk": "@@ -56,12 +57,12 @@ public BType getKeyType() {\n \n     @Override\n     public <V> V getZeroValue() {\n-        return null;\n+        return (V) new TableValueImpl<String, V>(new BTableType(constraint));", "originalCommit": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MDE3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420660179", "bodyText": "Fixed.", "author": "mohanvive", "createdAt": "2020-05-06T09:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0ODY4NA=="}], "type": "inlineReview"}, {"oid": "1135ad503d892b539347ab45a0add9ec82293b6f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1135ad503d892b539347ab45a0add9ec82293b6f", "message": "Fixes to accommodate review comments", "committedDate": "2020-05-06T09:29:37Z", "type": "commit"}]}