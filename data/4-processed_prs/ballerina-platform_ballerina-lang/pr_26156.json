{"pr_number": 26156, "pr_title": "Add BaloProject", "pr_createdAt": "2020-09-29T14:14:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156", "timeline": [{"oid": "8a7bfd5466c7905f134ff3bd9f450b79a0d33ed4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a7bfd5466c7905f134ff3bd9f450b79a0d33ed4", "message": "Add BaloProject\n\nImplement BaloProject for new Project API to load BaloProject\nfrom a balo file.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/25740", "committedDate": "2020-09-29T14:12:35Z", "type": "commit"}, {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0af3876ebb68f36ded311fa99c165a104e2a3a25", "message": "Fix checkstyles", "committedDate": "2020-09-29T15:03:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNDk0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497434947", "bodyText": "We can use a constant for \".balo\". There is already one in ProjectDirConstants. We can copy it to ProjectConstants and use it.", "author": "azinneera", "createdAt": "2020-09-30T11:26:20Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {", "originalCommit": "0af3876ebb68f36ded311fa99c165a104e2a3a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTk2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r498619966", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-10-02T05:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNDk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNjQ1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497436456", "bodyText": "This method is already there in ProjectFiles class. Shall we make use of that one without duplicating it here?", "author": "azinneera", "createdAt": "2020-09-30T11:29:15Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {\n+            throw new RuntimeException(\"Not a balo: \" + baloPath);\n+        }\n+        return absBaloPath;\n+    }\n+\n+    private static BallerinaToml loadBallerinaToml(Path packageJsonPath) {\n+        BallerinaToml ballerinaToml = new BallerinaToml();\n+\n+        if (!Files.exists(packageJsonPath)) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        // Load `package.json`\n+        PackageJson packageJson;\n+        try {\n+            packageJson = gson.fromJson(Files.newBufferedReader(packageJsonPath), PackageJson.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        validatePackageJson(packageJson);\n+        // Create Package\n+        Package tomlPackage = new Package();\n+        tomlPackage.setOrg(packageJson.getOrganization());\n+        tomlPackage.setName(packageJson.getName());\n+        tomlPackage.setVersion(packageJson.getVersion());\n+        tomlPackage.setLicense(packageJson.getLicenses());\n+        tomlPackage.setAuthors(packageJson.getAuthors());\n+        tomlPackage.setRepository(packageJson.getSourceRepository());\n+        tomlPackage.setKeywords(packageJson.getKeywords());\n+\n+        ballerinaToml.setPkg(tomlPackage);\n+        return ballerinaToml;\n+    }\n+\n+    private static void validatePackageJson(PackageJson packageJson) {\n+        if (packageJson.getOrganization() == null || \"\".equals(packageJson.getOrganization())) {\n+            throw new RuntimeException(\"'organization' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getName() == null || \"\".equals(packageJson.getName())) {\n+            throw new RuntimeException(\"'name' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getVersion() == null || \"\".equals(packageJson.getVersion())) {\n+            throw new RuntimeException(\"'version' does not exists in 'package.json'\");\n+        }\n+    }\n+\n+    private static ModuleData loadModule(Path modulePath) {\n+        // check module path exists\n+        if (!Files.exists(modulePath)) {\n+            throw new RuntimeException(\"module does not exists:\" + modulePath);\n+        }\n+\n+        String moduleName = String.valueOf(modulePath.getFileName());\n+        if (moduleName.contains(\".\")) { // not default module\n+            moduleName = moduleName.split(\"\\\\.\")[1];\n+            moduleName = moduleName.replace(\"/\", \"\");\n+        }\n+\n+        // validate moduleName\n+        if (!ProjectUtils.validateModuleName(moduleName)) {\n+            throw new RuntimeException(\"Invalid module name : '\" + moduleName + \"' :\\n\" +\n+                    \"Module name can only contain alphanumerics, underscores and periods \" +\n+                    \"and the maximum length is 256 characters\");\n+        }\n+        List<DocumentData> srcDocs = loadDocuments(modulePath);\n+        List<DocumentData> testSrcDocs = Collections.emptyList();\n+\n+        // TODO Read Module.md file. Do we need to? Balo creator may need to package Module.md\n+        return ModuleData.from(modulePath, srcDocs, testSrcDocs);\n+    }\n+\n+    private static List<DocumentData> loadDocuments(Path dirPath) {", "originalCommit": "0af3876ebb68f36ded311fa99c165a104e2a3a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1Njg2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r498456868", "bodyText": "Then we have to make that method public. Shall we move these common methods to a util class?", "author": "pramodya1994", "createdAt": "2020-10-01T19:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNjQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTk4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r498619982", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-10-02T05:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNjQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzODE0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497438148", "bodyText": "The 2nd argument passed to create an instance of DocumentData should be the content.", "author": "azinneera", "createdAt": "2020-09-30T11:32:30Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {\n+            throw new RuntimeException(\"Not a balo: \" + baloPath);\n+        }\n+        return absBaloPath;\n+    }\n+\n+    private static BallerinaToml loadBallerinaToml(Path packageJsonPath) {\n+        BallerinaToml ballerinaToml = new BallerinaToml();\n+\n+        if (!Files.exists(packageJsonPath)) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        // Load `package.json`\n+        PackageJson packageJson;\n+        try {\n+            packageJson = gson.fromJson(Files.newBufferedReader(packageJsonPath), PackageJson.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        validatePackageJson(packageJson);\n+        // Create Package\n+        Package tomlPackage = new Package();\n+        tomlPackage.setOrg(packageJson.getOrganization());\n+        tomlPackage.setName(packageJson.getName());\n+        tomlPackage.setVersion(packageJson.getVersion());\n+        tomlPackage.setLicense(packageJson.getLicenses());\n+        tomlPackage.setAuthors(packageJson.getAuthors());\n+        tomlPackage.setRepository(packageJson.getSourceRepository());\n+        tomlPackage.setKeywords(packageJson.getKeywords());\n+\n+        ballerinaToml.setPkg(tomlPackage);\n+        return ballerinaToml;\n+    }\n+\n+    private static void validatePackageJson(PackageJson packageJson) {\n+        if (packageJson.getOrganization() == null || \"\".equals(packageJson.getOrganization())) {\n+            throw new RuntimeException(\"'organization' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getName() == null || \"\".equals(packageJson.getName())) {\n+            throw new RuntimeException(\"'name' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getVersion() == null || \"\".equals(packageJson.getVersion())) {\n+            throw new RuntimeException(\"'version' does not exists in 'package.json'\");\n+        }\n+    }\n+\n+    private static ModuleData loadModule(Path modulePath) {\n+        // check module path exists\n+        if (!Files.exists(modulePath)) {\n+            throw new RuntimeException(\"module does not exists:\" + modulePath);\n+        }\n+\n+        String moduleName = String.valueOf(modulePath.getFileName());\n+        if (moduleName.contains(\".\")) { // not default module\n+            moduleName = moduleName.split(\"\\\\.\")[1];\n+            moduleName = moduleName.replace(\"/\", \"\");\n+        }\n+\n+        // validate moduleName\n+        if (!ProjectUtils.validateModuleName(moduleName)) {\n+            throw new RuntimeException(\"Invalid module name : '\" + moduleName + \"' :\\n\" +\n+                    \"Module name can only contain alphanumerics, underscores and periods \" +\n+                    \"and the maximum length is 256 characters\");\n+        }\n+        List<DocumentData> srcDocs = loadDocuments(modulePath);\n+        List<DocumentData> testSrcDocs = Collections.emptyList();\n+\n+        // TODO Read Module.md file. Do we need to? Balo creator may need to package Module.md\n+        return ModuleData.from(modulePath, srcDocs, testSrcDocs);\n+    }\n+\n+    private static List<DocumentData> loadDocuments(Path dirPath) {\n+        try (Stream<Path> pathStream = Files.walk(dirPath, 1)) {\n+            return pathStream\n+                    .filter(matcher::matches)\n+                    .map(BaloFiles::loadDocument)\n+                    .collect(Collectors.toList());\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static DocumentData loadDocument(Path documentFilePath) {\n+        Path fileNamePath = documentFilePath.getFileName();\n+        // IMO, fileNamePath cannot be null in this case.\n+        String name = fileNamePath != null ? fileNamePath.toString() : \"\";\n+        return DocumentData.from(name, String.valueOf(documentFilePath));", "originalCommit": "0af3876ebb68f36ded311fa99c165a104e2a3a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NTc1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497445759", "bodyText": "Can we reuse the existing method in ProjectFiles here too?", "author": "azinneera", "createdAt": "2020-09-30T11:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzODE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxOTk5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r498619990", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-10-02T05:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzODE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTQ4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497441483", "bodyText": "Should we use File.separator instead of \"/\"?", "author": "azinneera", "createdAt": "2020-09-30T11:39:13Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {\n+            throw new RuntimeException(\"Not a balo: \" + baloPath);\n+        }\n+        return absBaloPath;\n+    }\n+\n+    private static BallerinaToml loadBallerinaToml(Path packageJsonPath) {\n+        BallerinaToml ballerinaToml = new BallerinaToml();\n+\n+        if (!Files.exists(packageJsonPath)) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        // Load `package.json`\n+        PackageJson packageJson;\n+        try {\n+            packageJson = gson.fromJson(Files.newBufferedReader(packageJsonPath), PackageJson.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        validatePackageJson(packageJson);\n+        // Create Package\n+        Package tomlPackage = new Package();\n+        tomlPackage.setOrg(packageJson.getOrganization());\n+        tomlPackage.setName(packageJson.getName());\n+        tomlPackage.setVersion(packageJson.getVersion());\n+        tomlPackage.setLicense(packageJson.getLicenses());\n+        tomlPackage.setAuthors(packageJson.getAuthors());\n+        tomlPackage.setRepository(packageJson.getSourceRepository());\n+        tomlPackage.setKeywords(packageJson.getKeywords());\n+\n+        ballerinaToml.setPkg(tomlPackage);\n+        return ballerinaToml;\n+    }\n+\n+    private static void validatePackageJson(PackageJson packageJson) {\n+        if (packageJson.getOrganization() == null || \"\".equals(packageJson.getOrganization())) {\n+            throw new RuntimeException(\"'organization' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getName() == null || \"\".equals(packageJson.getName())) {\n+            throw new RuntimeException(\"'name' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getVersion() == null || \"\".equals(packageJson.getVersion())) {\n+            throw new RuntimeException(\"'version' does not exists in 'package.json'\");\n+        }\n+    }\n+\n+    private static ModuleData loadModule(Path modulePath) {\n+        // check module path exists\n+        if (!Files.exists(modulePath)) {\n+            throw new RuntimeException(\"module does not exists:\" + modulePath);\n+        }\n+\n+        String moduleName = String.valueOf(modulePath.getFileName());\n+        if (moduleName.contains(\".\")) { // not default module\n+            moduleName = moduleName.split(\"\\\\.\")[1];\n+            moduleName = moduleName.replace(\"/\", \"\");\n+        }\n+\n+        // validate moduleName\n+        if (!ProjectUtils.validateModuleName(moduleName)) {\n+            throw new RuntimeException(\"Invalid module name : '\" + moduleName + \"' :\\n\" +\n+                    \"Module name can only contain alphanumerics, underscores and periods \" +\n+                    \"and the maximum length is 256 characters\");\n+        }\n+        List<DocumentData> srcDocs = loadDocuments(modulePath);\n+        List<DocumentData> testSrcDocs = Collections.emptyList();\n+\n+        // TODO Read Module.md file. Do we need to? Balo creator may need to package Module.md\n+        return ModuleData.from(modulePath, srcDocs, testSrcDocs);\n+    }\n+\n+    private static List<DocumentData> loadDocuments(Path dirPath) {\n+        try (Stream<Path> pathStream = Files.walk(dirPath, 1)) {\n+            return pathStream\n+                    .filter(matcher::matches)\n+                    .map(BaloFiles::loadDocument)\n+                    .collect(Collectors.toList());\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static DocumentData loadDocument(Path documentFilePath) {\n+        Path fileNamePath = documentFilePath.getFileName();\n+        // IMO, fileNamePath cannot be null in this case.\n+        String name = fileNamePath != null ? fileNamePath.toString() : \"\";\n+        return DocumentData.from(name, String.valueOf(documentFilePath));\n+    }\n+\n+    private static List<ModuleData> loadOtherModules(Path modulesDirPath, Path defaultModulePath) {\n+        if (!Files.isDirectory(modulesDirPath)) {\n+            throw new RuntimeException(\"'modules' directory does not exists:\" + modulesDirPath);\n+        }\n+\n+        try (Stream<Path> pathStream = Files.walk(modulesDirPath, 1)) {\n+            return pathStream\n+                    .filter(path -> !path.equals(modulesDirPath))\n+                    .filter(path -> !String.valueOf(path).equals(\"/\" + defaultModulePath + \"/\"))", "originalCommit": "0af3876ebb68f36ded311fa99c165a104e2a3a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyMDAwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r498620000", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-10-02T05:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NDA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497444056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "azinneera", "createdAt": "2020-09-30T11:44:00Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/model/PackageJson.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.model;\n+\n+import java.util.List;\n+\n+/**\n+ * {@code PackageJson} Model for Package JSON file.\n+ *\n+ * @since 2.0.0\n+ */\n+public class PackageJson {\n+    // Information extracted from Ballerina.toml\n+    private String organization;\n+    private String name;\n+    private String version;\n+    private List<String> licenses; //?\n+    private List<String> authors; //?\n+    private String source_repository; //?\n+    private List<String> keywords; //?\n+    private List<String> exported; //?\n+\n+    // Distribution details\n+    private String ballerina_version;\n+    private String platform;\n+    private String implementation_vendor;\n+    private String spec;                     // 2020R1\n+\n+    // Dependencies\n+    private List<Dependency> dependencies; //?\n+    private List<PlatformLibrary> platformLibraries; //?\n+\n+    // Templating support\n+    private boolean template; //?\n+    private String template_version; //?\n+\n+    public PackageJson(String organization, String name, String version) {\n+        this.organization = organization;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    public String getOrganization() {\n+        return organization;\n+    }\n+\n+    public void setOrganization(String organization) {\n+        this.organization = organization;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+\n+    public List<String> getLicenses() {\n+        return licenses;\n+    }\n+\n+    public void setLicenses(List<String> licenses) {\n+        this.licenses = licenses;\n+    }\n+\n+    public List<String> getAuthors() {\n+        return authors;\n+    }\n+\n+    public void setAuthors(List<String> authors) {\n+        this.authors = authors;\n+    }\n+\n+    public String getSourceRepository() {\n+        return source_repository;\n+    }\n+\n+    public void setSourceRepository(String source_repository) {\n+        this.source_repository = source_repository;\n+    }\n+\n+    public List<String> getKeywords() {\n+        return keywords;\n+    }\n+\n+    public void setKeywords(List<String> keywords) {\n+        this.keywords = keywords;\n+    }\n+\n+    public List<String> getExported() {\n+        return exported;\n+    }\n+\n+    public void setExported(List<String> exported) {\n+        this.exported = exported;\n+    }\n+\n+    public String getBallerinaVersion() {\n+        return ballerina_version;\n+    }\n+\n+    public void setBallerinaVersion(String ballerina_version) {\n+        this.ballerina_version = ballerina_version;\n+    }\n+\n+    public String getPlatform() {\n+        return platform;\n+    }\n+\n+    public void setPlatform(String platform) {\n+        this.platform = platform;\n+    }\n+\n+    public String getImplementationVendor() {\n+        return implementation_vendor;\n+    }\n+\n+    public void setImplementationVendor(String implementation_vendor) {\n+        this.implementation_vendor = implementation_vendor;\n+    }\n+\n+    public String getSpec() {\n+        return spec;\n+    }\n+\n+    public void setSpec(String spec) {\n+        this.spec = spec;\n+    }\n+\n+    public List<Dependency> getDependencies() {\n+        return dependencies;\n+    }\n+\n+    public void setDependencies(List<Dependency> dependencies) {\n+        this.dependencies = dependencies;\n+    }\n+\n+    public List<PlatformLibrary> getPlatformLibraries() {\n+        return platformLibraries;\n+    }\n+\n+    public void setPlatformLibraries(List<PlatformLibrary> platformLibraries) {\n+        this.platformLibraries = platformLibraries;\n+    }\n+\n+    public boolean isTemplate() {\n+        return template;\n+    }\n+\n+    public void setTemplate(boolean template) {\n+        this.template = template;\n+    }\n+\n+    public String getTemplateVersion() {\n+        return template_version;\n+    }\n+\n+    public void setTemplateVersion(String template_version) {\n+        this.template_version = template_version;\n+    }\n+}", "originalCommit": "0af3876ebb68f36ded311fa99c165a104e2a3a25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyMDAxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r498620019", "bodyText": "Added", "author": "pramodya1994", "createdAt": "2020-10-02T05:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NDA1Ng=="}], "type": "inlineReview"}, {"oid": "29a0e9bef84f179ce789709f90919edbfd96eb0f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29a0e9bef84f179ce789709f90919edbfd96eb0f", "message": "Resolve PR comments", "committedDate": "2020-10-02T05:46:33Z", "type": "forcePushed"}, {"oid": "33630cc34b5990ed2d20a0009ea92e0d636af85c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33630cc34b5990ed2d20a0009ea92e0d636af85c", "message": "Resolve PR comments", "committedDate": "2020-10-02T06:18:36Z", "type": "forcePushed"}, {"oid": "9bca50d72709ac37c199bd5e8a5c197e247ba2da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9bca50d72709ac37c199bd5e8a5c197e247ba2da", "message": "Resolve PR comments", "committedDate": "2020-10-02T09:52:37Z", "type": "forcePushed"}, {"oid": "59710dbf0cc91507ce54ac4886e700963556bec1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59710dbf0cc91507ce54ac4886e700963556bec1", "message": "Resolve PR comments", "committedDate": "2020-10-03T10:24:59Z", "type": "commit"}, {"oid": "59710dbf0cc91507ce54ac4886e700963556bec1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59710dbf0cc91507ce54ac4886e700963556bec1", "message": "Resolve PR comments", "committedDate": "2020-10-03T10:24:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NzY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r499187699", "bodyText": "Ideally we should do lazy loading without reading the ZIP. In a cached state what we want are the modules so we should so we should load only that. Shall we create an issue for that and merge this", "author": "hevayo", "createdAt": "2020-10-03T22:41:48Z", "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloProject.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import io.ballerina.projects.PackageConfig;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.PackageLoader;\n+import io.ballerina.projects.env.BuildEnvContext;\n+import io.ballerina.projects.environment.EnvironmentContext;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+/**\n+ * {@code BaloProject} represents Ballerina project instance created from a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloProject extends Project {\n+\n+    /**\n+     * Loads a BaloProject from the provided balo path.\n+     *\n+     * @param baloPath Balo path\n+     * @return balo project\n+     */\n+    public static BaloProject loadProject(Path baloPath) {\n+        Path absBaloPath = Optional.of(baloPath.toAbsolutePath()).get();", "originalCommit": "59710dbf0cc91507ce54ac4886e700963556bec1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIyNTExOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r499225118", "bodyText": "Added a issue #26196", "author": "pramodya1994", "createdAt": "2020-10-04T09:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NzY5OQ=="}], "type": "inlineReview"}, {"oid": "44d51a5eabce5e0c8189e8b3b9e3a8c6fb929e20", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44d51a5eabce5e0c8189e8b3b9e3a8c6fb929e20", "message": "Fix review comments", "committedDate": "2020-10-05T07:49:16Z", "type": "commit"}, {"oid": "9a84b262d7ce0c1d769d2724271c65d95801fb89", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a84b262d7ce0c1d769d2724271c65d95801fb89", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into balo-project-prj_api_module_refactor", "committedDate": "2020-10-05T12:06:59Z", "type": "commit"}, {"oid": "aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "message": "Refactor `createPackageConfig` for balo project", "committedDate": "2020-10-05T17:29:07Z", "type": "commit"}, {"oid": "aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "message": "Refactor `createPackageConfig` for balo project", "committedDate": "2020-10-05T17:29:07Z", "type": "forcePushed"}, {"oid": "bfc4a2a5a080b2e734034ad9c458df8e4fcd0c17", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bfc4a2a5a080b2e734034ad9c458df8e4fcd0c17", "message": "Merge branch 'prj_api_module_refactor' into balo-project-prj_api_module_refactor", "committedDate": "2020-10-05T18:03:30Z", "type": "commit"}]}