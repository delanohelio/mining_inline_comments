{"pr_number": 20971, "pr_title": "Fix formatting issues in BBE", "pr_createdAt": "2020-02-11T05:36:27Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971", "timeline": [{"oid": "38128e97c303671cc87d1f536047d9ef4d8a8e03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38128e97c303671cc87d1f536047d9ef4d8a8e03", "message": "Fix formatting issues in examples", "committedDate": "2020-02-07T10:34:02Z", "type": "commit"}, {"oid": "8e43a76b8c52fc0997f0c3b5e0235a5f5c934cac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e43a76b8c52fc0997f0c3b5e0235a5f5c934cac", "message": "Fix formatting issues in examples", "committedDate": "2020-02-09T11:29:02Z", "type": "commit"}, {"oid": "986d91cfe7f3809c95f058b86f75e28cf6549b20", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/986d91cfe7f3809c95f058b86f75e28cf6549b20", "message": "Fix few line wrapping issues", "committedDate": "2020-02-11T05:21:34Z", "type": "commit"}, {"oid": "519915cc64ea6ebc6127b7c0edf6310065d50c1b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/519915cc64ea6ebc6127b7c0edf6310065d50c1b", "message": "Resolve conflicts", "committedDate": "2020-02-11T05:24:12Z", "type": "commit"}, {"oid": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "message": "Fix few formatting issues", "committedDate": "2020-02-11T05:35:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTA3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        res.setPayload(<@untainted><string>payload.detail()?.message);\n          \n          \n            \n                        res.setPayload(<@untainted string>payload.detail()?.message);", "author": "MaryamZi", "createdAt": "2020-02-11T05:53:07Z", "path": "examples/base-path-and-path/base_path_and_path.bal", "diffHunk": "@@ -20,10 +20,10 @@ service echo on new http:Listener(9090) {\n         http:Response res = new;\n         if (payload is json) {\n             // Since the JSON is known to be valid, `untaint` the data denoting that the data is trusted and set the JSON to the response.\n-            res.setJsonPayload(<@untainted> payload);\n+            res.setJsonPayload(<@untainted>payload);\n         } else {\n             res.statusCode = 500;\n-            res.setPayload(<@untainted> <string>payload.detail()?.message);\n+            res.setPayload(<@untainted><string>payload.detail()?.message);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTI3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455270", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log:printError(\"Failed to respond\", err = result);\n          \n          \n            \n                        log:printError(\"Failed to respond\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T05:54:14Z", "path": "examples/basic-https-listener-client/basic_https_listener.bal", "diffHunk": "@@ -28,7 +28,7 @@ service helloWorld on helloWorldEP {\n         // Send the response back to the `caller`.\n         var result = caller->respond(\"Hello World!\");\n         if (result is error) {\n-           log:printError(\"Failed to respond\", err = result);\n+            log:printError(\"Failed to respond\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTM1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log:printError(\"Failed to respond to the caller\", err = result);\n          \n          \n            \n                        log:printError(\"Failed to respond to the caller\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T05:54:44Z", "path": "examples/config-api/config_api.bal", "diffHunk": "@@ -50,7 +50,7 @@ service helloWorld on helloWorldEP {\n     resource function sayHello(http:Caller caller, http:Request req) {\n         var result = caller->respond(\"Hello World!\");\n         if (result is error) {\n-           log:printError(\"Failed to respond to the caller\", err = result);\n+            log:printError(\"Failed to respond to the caller\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTY3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                                    log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T05:56:36Z", "path": "examples/content-based-routing/content_based_routing.bal", "diffHunk": "@@ -41,35 +41,35 @@ service contentBasedRouting on new http:Listener(9090) {\n                 if (clientResponse is http:Response) {\n                     var result = outboundEP->respond(clientResponse);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTY4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455684", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                                    log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T05:56:46Z", "path": "examples/content-based-routing/content_based_routing.bal", "diffHunk": "@@ -41,35 +41,35 @@ service contentBasedRouting on new http:Listener(9090) {\n                 if (clientResponse is http:Response) {\n                     var result = outboundEP->respond(clientResponse);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 } else {\n                     http:Response res = new;\n                     res.statusCode = 500;\n                     res.setPayload(<string>clientResponse.detail()?.message);\n                     var result = outboundEP->respond(res);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTcwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455704", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            res.setPayload(<@untainted><string>nameString.detail()?.message);\n          \n          \n            \n                            res.setPayload(<@untainted string>nameString.detail()?.message);", "author": "MaryamZi", "createdAt": "2020-02-11T05:56:55Z", "path": "examples/content-based-routing/content_based_routing.bal", "diffHunk": "@@ -41,35 +41,35 @@ service contentBasedRouting on new http:Listener(9090) {\n                 if (clientResponse is http:Response) {\n                     var result = outboundEP->respond(clientResponse);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 } else {\n                     http:Response res = new;\n                     res.statusCode = 500;\n                     res.setPayload(<string>clientResponse.detail()?.message);\n                     var result = outboundEP->respond(res);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 }\n             } else {\n                 http:Response res = new;\n                 res.statusCode = 500;\n-                res.setPayload(<@untainted> <string>nameString.detail()?.message);\n+                res.setPayload(<@untainted><string>nameString.detail()?.message);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTcyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455729", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                                log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T05:57:02Z", "path": "examples/content-based-routing/content_based_routing.bal", "diffHunk": "@@ -41,35 +41,35 @@ service contentBasedRouting on new http:Listener(9090) {\n                 if (clientResponse is http:Response) {\n                     var result = outboundEP->respond(clientResponse);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 } else {\n                     http:Response res = new;\n                     res.statusCode = 500;\n                     res.setPayload(<string>clientResponse.detail()?.message);\n                     var result = outboundEP->respond(res);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 }\n             } else {\n                 http:Response res = new;\n                 res.statusCode = 500;\n-                res.setPayload(<@untainted> <string>nameString.detail()?.message);\n+                res.setPayload(<@untainted><string>nameString.detail()?.message);\n \n                 var result = outboundEP->respond(res);\n                 if (result is error) {\n-                   log:printError(\"Error sending response\", err = result);\n+                    log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTc1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455752", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        res.setPayload(<@untainted><string>jsonMsg.detail()?.message);\n          \n          \n            \n                        res.setPayload(<@untainted string>jsonMsg.detail()?.message);", "author": "MaryamZi", "createdAt": "2020-02-11T05:57:14Z", "path": "examples/content-based-routing/content_based_routing.bal", "diffHunk": "@@ -41,35 +41,35 @@ service contentBasedRouting on new http:Listener(9090) {\n                 if (clientResponse is http:Response) {\n                     var result = outboundEP->respond(clientResponse);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 } else {\n                     http:Response res = new;\n                     res.statusCode = 500;\n                     res.setPayload(<string>clientResponse.detail()?.message);\n                     var result = outboundEP->respond(res);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 }\n             } else {\n                 http:Response res = new;\n                 res.statusCode = 500;\n-                res.setPayload(<@untainted> <string>nameString.detail()?.message);\n+                res.setPayload(<@untainted><string>nameString.detail()?.message);\n \n                 var result = outboundEP->respond(res);\n                 if (result is error) {\n-                   log:printError(\"Error sending response\", err = result);\n+                    log:printError(\"Error sending response\", err = result);\n                 }\n             }\n         } else {\n             http:Response res = new;\n             res.statusCode = 500;\n-            res.setPayload(<@untainted> <string>jsonMsg.detail()?.message);\n+            res.setPayload(<@untainted><string>jsonMsg.detail()?.message);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NTc5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377455794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                            log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T05:57:24Z", "path": "examples/content-based-routing/content_based_routing.bal", "diffHunk": "@@ -41,35 +41,35 @@ service contentBasedRouting on new http:Listener(9090) {\n                 if (clientResponse is http:Response) {\n                     var result = outboundEP->respond(clientResponse);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 } else {\n                     http:Response res = new;\n                     res.statusCode = 500;\n                     res.setPayload(<string>clientResponse.detail()?.message);\n                     var result = outboundEP->respond(res);\n                     if (result is error) {\n-                       log:printError(\"Error sending response\", err = result);\n+                        log:printError(\"Error sending response\", err = result);\n                     }\n                 }\n             } else {\n                 http:Response res = new;\n                 res.statusCode = 500;\n-                res.setPayload(<@untainted> <string>nameString.detail()?.message);\n+                res.setPayload(<@untainted><string>nameString.detail()?.message);\n \n                 var result = outboundEP->respond(res);\n                 if (result is error) {\n-                   log:printError(\"Error sending response\", err = result);\n+                    log:printError(\"Error sending response\", err = result);\n                 }\n             }\n         } else {\n             http:Response res = new;\n             res.statusCode = 500;\n-            res.setPayload(<@untainted> <string>jsonMsg.detail()?.message);\n+            res.setPayload(<@untainted><string>jsonMsg.detail()?.message);\n \n             var result = outboundEP->respond(res);\n             if (result is error) {\n-               log:printError(\"Error sending response\", err = result);\n+                log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NzQ2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377457460", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        res.setPayload(<@untainted><string>bChannel.detail()?.message);\n          \n          \n            \n                        res.setPayload(<@untainted string>bChannel.detail()?.message);", "author": "MaryamZi", "createdAt": "2020-02-11T06:06:44Z", "path": "examples/different-payload-types/different_payload_types.bal", "diffHunk": "@@ -69,7 +69,7 @@ service actionService on new http:Listener(9090) {\n         } else {\n             http:Response res = new;\n             res.statusCode = 500;\n-            res.setPayload(<@untainted> <string> bChannel.detail()?.message);\n+            res.setPayload(<@untainted><string>bChannel.detail()?.message);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NzQ4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377457482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                res.setPayload(<@untainted><string>err.detail()?.message);\n          \n          \n            \n                res.setPayload(<@untainted string>err.detail()?.message);", "author": "MaryamZi", "createdAt": "2020-02-11T06:06:54Z", "path": "examples/different-payload-types/different_payload_types.bal", "diffHunk": "@@ -222,7 +222,7 @@ function handleResponse(http:Response|error response) {\n function sendErrorMsg(http:Caller caller, error err) {\n     http:Response res = new;\n     res.statusCode = 500;\n-    res.setPayload(<@untainted> <string> err.detail()?.message);\n+    res.setPayload(<@untainted><string>err.detail()?.message);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1Nzg5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377457892", "bodyText": "I think we don't need the space here.\nIf it's a typed binding pattern and we add a space it will be\n error error(reason, info = info, fatal = fatal) = getSampleError();", "author": "MaryamZi", "createdAt": "2020-02-11T06:09:00Z", "path": "examples/error-destructure-binding-pattern/error_destructure_binding_pattern.bal", "diffHunk": "@@ -17,21 +17,21 @@ public function main() {\n     // and assign the values to the relevant variable references.\n     // The value of the reason string in the `SampleError` will be assigned to the variable `reason`.\n     // The values in the detail mapping will be assigned to the relevant variables.\n-    error(reason, info = info, fatal = fatal) = getSampleError();\n+    error (reason, info = info, fatal = fatal) = getSampleError();", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1Nzk0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377457944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var InvalidIdError (id = id) => {\n          \n          \n            \n                    var InvalidIdError(id = id) => {", "author": "MaryamZi", "createdAt": "2020-02-11T06:09:27Z", "path": "examples/error-match-statement/error_match_statement.bal", "diffHunk": "@@ -33,20 +33,31 @@ public function main() {\n \n function basicMatch(any|error v) {\n     match v {\n-        var [tVar1, tVar2] => { io:println(\"Matched a value with a tuple shape\"); }\n-        var { message, fatal } =>\n-                            { io:println(\"Matched a value with a record shape\"); }\n-        // If the variable 'v' contains an `error` values of shape that matches `InvalidIdError`\n-        // it will be matched to `InvalidIdError` indirect error match pattern.\n-        var InvalidIdError(id = id) => { io:println(\"Matched `InvalidError` id=\", id); }\n+        var [tVar1, tVar2] => {\n+            io:println(\"Matched a value with a tuple shape\");\n+        }\n+        var {message, fatal} => {\n+            io:println(\"Matched a value with a record shape\");\n+        }\n+        // If the variable 'v' contains an `error` values of shape that matches\n+        // `InvalidIdError` it will be matched to `InvalidIdError` indirect\n+        // error match pattern.\n+        var InvalidIdError (id = id) => {", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1Nzk3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377457978", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var error (reason, message = message) => {\n          \n          \n            \n                    var error(reason, message = message) => {", "author": "MaryamZi", "createdAt": "2020-02-11T06:09:36Z", "path": "examples/error-match-statement/error_match_statement.bal", "diffHunk": "@@ -33,20 +33,31 @@ public function main() {\n \n function basicMatch(any|error v) {\n     match v {\n-        var [tVar1, tVar2] => { io:println(\"Matched a value with a tuple shape\"); }\n-        var { message, fatal } =>\n-                            { io:println(\"Matched a value with a record shape\"); }\n-        // If the variable 'v' contains an `error` values of shape that matches `InvalidIdError`\n-        // it will be matched to `InvalidIdError` indirect error match pattern.\n-        var InvalidIdError(id = id) => { io:println(\"Matched `InvalidError` id=\", id); }\n+        var [tVar1, tVar2] => {\n+            io:println(\"Matched a value with a tuple shape\");\n+        }\n+        var {message, fatal} => {\n+            io:println(\"Matched a value with a record shape\");\n+        }\n+        // If the variable 'v' contains an `error` values of shape that matches\n+        // `InvalidIdError` it will be matched to `InvalidIdError` indirect\n+        // error match pattern.\n+        var InvalidIdError (id = id) => {\n+            io:println(\"Matched `InvalidError` id=\", id);\n+        }\n         // If the variable `v` contains an `error` value, it will be matched\n         // to this pattern and the reason string and the detail record will be\n         // destructed within the pattern block.\n-        var error(reason, message = message) => { io:println(\"Matched an error value : \",\n-                  io:sprintf(\"reason: %s, message: %s\", reason, message)); }\n-\n-        // If a rest binding pattern is used, the error details that are not matched will be recorded in a map.\n-        var error(reason, message = message, ...rest) => { io:println(\"Matched an error value : \",\n-                  io:sprintf(\"reason: %s, rest detail: %s\", reason, rest)); }\n+        var error (reason, message = message) => {", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1ODA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377458043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var error (reason, message = message, ...rest) => {\n          \n          \n            \n                    var error(reason, message = message, ...rest) => {", "author": "MaryamZi", "createdAt": "2020-02-11T06:09:43Z", "path": "examples/error-match-statement/error_match_statement.bal", "diffHunk": "@@ -33,20 +33,31 @@ public function main() {\n \n function basicMatch(any|error v) {\n     match v {\n-        var [tVar1, tVar2] => { io:println(\"Matched a value with a tuple shape\"); }\n-        var { message, fatal } =>\n-                            { io:println(\"Matched a value with a record shape\"); }\n-        // If the variable 'v' contains an `error` values of shape that matches `InvalidIdError`\n-        // it will be matched to `InvalidIdError` indirect error match pattern.\n-        var InvalidIdError(id = id) => { io:println(\"Matched `InvalidError` id=\", id); }\n+        var [tVar1, tVar2] => {\n+            io:println(\"Matched a value with a tuple shape\");\n+        }\n+        var {message, fatal} => {\n+            io:println(\"Matched a value with a record shape\");\n+        }\n+        // If the variable 'v' contains an `error` values of shape that matches\n+        // `InvalidIdError` it will be matched to `InvalidIdError` indirect\n+        // error match pattern.\n+        var InvalidIdError (id = id) => {\n+            io:println(\"Matched `InvalidError` id=\", id);\n+        }\n         // If the variable `v` contains an `error` value, it will be matched\n         // to this pattern and the reason string and the detail record will be\n         // destructed within the pattern block.\n-        var error(reason, message = message) => { io:println(\"Matched an error value : \",\n-                  io:sprintf(\"reason: %s, message: %s\", reason, message)); }\n-\n-        // If a rest binding pattern is used, the error details that are not matched will be recorded in a map.\n-        var error(reason, message = message, ...rest) => { io:println(\"Matched an error value : \",\n-                  io:sprintf(\"reason: %s, rest detail: %s\", reason, rest)); }\n+        var error (reason, message = message) => {\n+            io:println(\"Matched an error value : \",\n+            io:sprintf(\"reason: %s, message: %s\", reason, message));\n+        }\n+\n+        // If a rest binding pattern is used, the error details that are not\n+        // matched will be recorded in a map.\n+        var error (reason, message = message, ...rest) => {", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1ODI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377458281", "bodyText": "We need indentation right?", "author": "MaryamZi", "createdAt": "2020-02-11T06:10:56Z", "path": "examples/functions-with-rest-parameter/functions_with_rest_parameter.bal", "diffHunk": "@@ -5,8 +5,8 @@ import ballerina/io;\n // parameter. The rest parameter can take any number of values and is\n // equivalent to a list of the same type.\n function printDetails(string name,\n-                      int age = 18,\n-                      string... modules) {\n+int age = 18,", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377462061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                            log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T06:30:22Z", "path": "examples/header-based-routing/header_based_routing.bal", "diffHunk": "@@ -25,21 +25,21 @@ service headerBasedRouting on new http:Listener(9090) {\n     }\n \n     resource function hbrResource(http:Caller caller, http:Request req) {\n-        http:Client weatherEP = new(\"http://samples.openweathermap.org\",\n+        http:Client weatherEP = new (\"http://samples.openweathermap.org\",\n                                     weatherEPConfig);\n-        http:Client locationEP = new(\"http://www.mocky.io\");\n+        http:Client locationEP = new (\"http://www.mocky.io\");\n         // Create a new outbound request to handle client call.\n         http:Request newRequest = new;\n         // Check whether `x-type` header exists in the request.\n         if (!req.hasHeader(\"x-type\")) {\n             http:Response errorResponse = new;\n             errorResponse.statusCode = 500;\n-            json errMsg = { \"error\": \"'x-type' header is not found\" };\n+            json errMsg = {\"error\": \"'x-type' header is not found\"};\n             errorResponse.setPayload(errMsg);\n \n             var result = caller->respond(errorResponse);\n \n-            if (result is error){\n+            if (result is error) {\n                 log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjA5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377462096", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                            log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T06:30:33Z", "path": "examples/header-based-routing/header_based_routing.bal", "diffHunk": "@@ -69,17 +69,17 @@ service headerBasedRouting on new http:Listener(9090) {\n \n             var result = caller->respond(response);\n \n-            if (result is error){\n+            if (result is error) {\n                 log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjMzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377462330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                        log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T06:31:32Z", "path": "examples/http-compression/http_compression.bal", "diffHunk": "@@ -16,10 +16,10 @@ service autoCompress on listenerEndpoint {\n         path: \"/\"\n     }\n     resource function invokeEndpoint(http:Caller caller, http:Request req) {\n-        var result = caller->respond({ \"Type\": \"Auto compression\" });\n+        var result = caller->respond({\"Type\": \"Auto compression\"});\n \n         if (result is error) {\n-           log:printError(\"Error sending response\", err = result);\n+            log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377462384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                        log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T06:31:46Z", "path": "examples/http-compression/http_compression.bal", "diffHunk": "@@ -33,24 +33,24 @@ service autoCompress on listenerEndpoint {\n @http:ServiceConfig {\n     compression: {\n         enable: http:COMPRESSION_ALWAYS,\n-        contentTypes:[\"text/plain\"]\n+        contentTypes: [\"text/plain\"]\n     }\n }\n service alwaysCompress on listenerEndpoint {\n     // Since compression is only constrained to \"text/plain\" MIME type,\n     // `getJson` resource does not compress the response entity body.\n     resource function getJson(http:Caller caller, http:Request req) {\n-        json msg = { \"Type\": \"Always but constrained by content-type\" };\n+        json msg = {\"Type\": \"Always but constrained by content-type\"};\n         var result = caller->respond(msg);\n         if (result is error) {\n-           log:printError(\"Error sending response\", err = result);\n+            log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjQxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377462412", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log:printError(\"Error sending response\", err = result);\n          \n          \n            \n                        log:printError(\"Error sending response\", result);", "author": "MaryamZi", "createdAt": "2020-02-11T06:31:56Z", "path": "examples/http-compression/http_compression.bal", "diffHunk": "@@ -33,24 +33,24 @@ service autoCompress on listenerEndpoint {\n @http:ServiceConfig {\n     compression: {\n         enable: http:COMPRESSION_ALWAYS,\n-        contentTypes:[\"text/plain\"]\n+        contentTypes: [\"text/plain\"]\n     }\n }\n service alwaysCompress on listenerEndpoint {\n     // Since compression is only constrained to \"text/plain\" MIME type,\n     // `getJson` resource does not compress the response entity body.\n     resource function getJson(http:Caller caller, http:Request req) {\n-        json msg = { \"Type\": \"Always but constrained by content-type\" };\n+        json msg = {\"Type\": \"Always but constrained by content-type\"};\n         var result = caller->respond(msg);\n         if (result is error) {\n-           log:printError(\"Error sending response\", err = result);\n+            log:printError(\"Error sending response\", err = result);\n         }\n     }\n     // The response entity body is always compressed since MIME type has matched.\n     resource function getString(http:Caller caller, http:Request req) {\n         var result = caller->respond(\"Type : This is a string\");\n         if (result is error) {\n-           log:printError(\"Error sending response\", err = result);\n+            log:printError(\"Error sending response\", err = result);", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377462505", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    string english = <@untained><string>student.Marks[\"English\"];\n          \n          \n            \n                    string english = <@untained string>student.Marks[\"English\"];", "author": "MaryamZi", "createdAt": "2020-02-11T06:32:23Z", "path": "examples/http-data-binding/http_data_binding.bal", "diffHunk": "@@ -60,15 +60,15 @@ service hello on new http:Listener(9090) {\n     resource function bindStruct(http:Caller caller, http:Request req,\n                                  Student student) {\n         //Accesses the fields of the `Student` record.\n-        string name = <@untainted> student.Name;\n-        int grade = <@untainted> student.Grade;\n-        string english = <@untained> <string> student.Marks[\"English\"];\n+        string name = <@untainted>student.Name;\n+        int grade = <@untainted>student.Grade;\n+        string english = <@untained><string>student.Marks[\"English\"];", "originalCommit": "e30adccadfdfe87e6062bdd6594a43d7858bc6b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35a21cb191c1bc36cf99d97a94b577aa60a6bbe2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35a21cb191c1bc36cf99d97a94b577aa60a6bbe2", "message": "Update examples/base-path-and-path/base_path_and_path.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:44:11Z", "type": "commit"}, {"oid": "b281c5791b558fdac4c9833f90550a0818944637", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b281c5791b558fdac4c9833f90550a0818944637", "message": "Update examples/content-based-routing/content_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:45:08Z", "type": "commit"}, {"oid": "bc7e4a8c93f9f6f48e17426e24bb6789dbfa07a2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc7e4a8c93f9f6f48e17426e24bb6789dbfa07a2", "message": "Update examples/different-payload-types/different_payload_types.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:45:43Z", "type": "commit"}, {"oid": "20fa28d0c95d4491b18f52c0ca5edd0cf72d83b3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/20fa28d0c95d4491b18f52c0ca5edd0cf72d83b3", "message": "Update examples/http-data-binding/http_data_binding.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:46:10Z", "type": "commit"}, {"oid": "142d55f49af7136e9a8efb2eb53d2d3fa34305ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/142d55f49af7136e9a8efb2eb53d2d3fa34305ac", "message": "Update examples/content-based-routing/content_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:47:12Z", "type": "commit"}, {"oid": "c1603f2a6c0f57eb4f9a5f48dd80d292950f6a3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1603f2a6c0f57eb4f9a5f48dd80d292950f6a3a", "message": "Update examples/different-payload-types/different_payload_types.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:47:34Z", "type": "commit"}, {"oid": "e683fe818ad7da25f4fd3a7b834ea7496ccd21f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e683fe818ad7da25f4fd3a7b834ea7496ccd21f1", "message": "Update examples/basic-https-listener-client/basic_https_listener.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:51:17Z", "type": "commit"}, {"oid": "3eb48cb1e0f046c8f46a149db3a14e8845f8c478", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3eb48cb1e0f046c8f46a149db3a14e8845f8c478", "message": "Update examples/config-api/config_api.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:52:27Z", "type": "commit"}, {"oid": "da95ffb1a91eac17c4a024e6466092c864d593a3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da95ffb1a91eac17c4a024e6466092c864d593a3", "message": "Update examples/content-based-routing/content_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:52:38Z", "type": "commit"}, {"oid": "1e26a807e288415f723568f186ca88c319aeebe7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e26a807e288415f723568f186ca88c319aeebe7", "message": "Update examples/header-based-routing/header_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:52:49Z", "type": "commit"}, {"oid": "d8c8e1ae581bb2a3aee155e8a3444a956f4d17e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d8c8e1ae581bb2a3aee155e8a3444a956f4d17e3", "message": "Update examples/content-based-routing/content_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:53:06Z", "type": "commit"}, {"oid": "0aa3c38d6c03c4582d70f244f0ad19bcceae7e5d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0aa3c38d6c03c4582d70f244f0ad19bcceae7e5d", "message": "Update examples/http-compression/http_compression.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:53:16Z", "type": "commit"}, {"oid": "608607ee3170452bbd157c38551761ea6d28147e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/608607ee3170452bbd157c38551761ea6d28147e", "message": "Update examples/http-compression/http_compression.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:53:28Z", "type": "commit"}, {"oid": "7b1b5d6ecd6f0979266d9f7c0e86a82095dd1818", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b1b5d6ecd6f0979266d9f7c0e86a82095dd1818", "message": "Update examples/http-compression/http_compression.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:53:36Z", "type": "commit"}, {"oid": "ad3790509a98be177f2b32eae0716d323bd21f66", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad3790509a98be177f2b32eae0716d323bd21f66", "message": "Update examples/content-based-routing/content_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:53:54Z", "type": "commit"}, {"oid": "469304bde083731360a8369fe718673607e75687", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/469304bde083731360a8369fe718673607e75687", "message": "Update examples/content-based-routing/content_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:54:10Z", "type": "commit"}, {"oid": "db1b09be376bc4fc7ff449577cb40d69da43fbc9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db1b09be376bc4fc7ff449577cb40d69da43fbc9", "message": "Update examples/header-based-routing/header_based_routing.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T06:54:41Z", "type": "commit"}, {"oid": "f389e2f528b3b7582874424918e1cbf54998d0c1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f389e2f528b3b7582874424918e1cbf54998d0c1", "message": "Fix review suggestions", "committedDate": "2020-02-11T07:57:21Z", "type": "commit"}, {"oid": "2579fcb7c41b6547ff51a272bde03dbfc297995d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2579fcb7c41b6547ff51a272bde03dbfc297995d", "message": "Update examples/error-match-statement/error_match_statement.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T07:58:25Z", "type": "commit"}, {"oid": "cbcb22a363a6670d653d6eaf7bc27b8c2992a7f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cbcb22a363a6670d653d6eaf7bc27b8c2992a7f6", "message": "Update examples/error-match-statement/error_match_statement.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T10:02:47Z", "type": "commit"}, {"oid": "39c7639fe19bb7f1c5497052610c16d6663aab1b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39c7639fe19bb7f1c5497052610c16d6663aab1b", "message": "Update examples/error-match-statement/error_match_statement.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-11T10:03:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNzQzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377537439", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error (reasonTwo, ...params) = getSampleError();\n          \n          \n            \n                error(reasonTwo, ...params) = getSampleError();", "author": "anupama-pathirage", "createdAt": "2020-02-11T10:04:23Z", "path": "examples/error-destructure-binding-pattern/error_destructure_binding_pattern.bal", "diffHunk": "@@ -17,21 +17,21 @@ public function main() {\n     // and assign the values to the relevant variable references.\n     // The value of the reason string in the `SampleError` will be assigned to the variable `reason`.\n     // The values in the detail mapping will be assigned to the relevant variables.\n-    error(reason, info = info, fatal = fatal) = getSampleError();\n+    error (reason, info = info, fatal = fatal) = getSampleError();\n     io:println(\"Reason String: \" + reason);\n     io:println(\"Info: \", info);\n     io:println(\"Fatal: \", fatal);\n \n     string reasonTwo;\n     map<anydata|error> params;\n     // The detail mapping can be destructured into an existing `map<anydata|error>`-typed variable by using a rest parameter.\n-    error(reasonTwo, ...params) = getSampleError();\n+    error (reasonTwo, ...params) = getSampleError();", "originalCommit": "39c7639fe19bb7f1c5497052610c16d6663aab1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNzU3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377537574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error (_, detailMsg = detailMsg) = getRecordConstrainedError();\n          \n          \n            \n                error(_, detailMsg = detailMsg) = getRecordConstrainedError();", "author": "anupama-pathirage", "createdAt": "2020-02-11T10:04:39Z", "path": "examples/error-destructure-binding-pattern/error_destructure_binding_pattern.bal", "diffHunk": "@@ -17,21 +17,21 @@ public function main() {\n     // and assign the values to the relevant variable references.\n     // The value of the reason string in the `SampleError` will be assigned to the variable `reason`.\n     // The values in the detail mapping will be assigned to the relevant variables.\n-    error(reason, info = info, fatal = fatal) = getSampleError();\n+    error (reason, info = info, fatal = fatal) = getSampleError();\n     io:println(\"Reason String: \" + reason);\n     io:println(\"Info: \", info);\n     io:println(\"Fatal: \", fatal);\n \n     string reasonTwo;\n     map<anydata|error> params;\n     // The detail mapping can be destructured into an existing `map<anydata|error>`-typed variable by using a rest parameter.\n-    error(reasonTwo, ...params) = getSampleError();\n+    error (reasonTwo, ...params) = getSampleError();\n     io:println(\"Reason String: \", reasonTwo);\n     io:println(\"Detail Map: \", params);\n     \n     // The underscore '_' sign can be used to ignore either the reason string or the detail mapping.\n     string? detailMsg;\n-    error(_, detailMsg = detailMsg) = getRecordConstrainedError();\n+    error (_, detailMsg = detailMsg) = getRecordConstrainedError();", "originalCommit": "39c7639fe19bb7f1c5497052610c16d6663aab1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6710fe24cb9dade3cf636a0c3fe9bef71dc07e51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6710fe24cb9dade3cf636a0c3fe9bef71dc07e51", "message": "Update examples/error-destructure-binding-pattern/error_destructure_binding_pattern.bal", "committedDate": "2020-02-11T10:05:00Z", "type": "commit"}, {"oid": "0045dadabb7d6cb38cf90ab6ce01730f32277ed5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0045dadabb7d6cb38cf90ab6ce01730f32277ed5", "message": "Update examples/error-destructure-binding-pattern/error_destructure_binding_pattern.bal", "committedDate": "2020-02-11T10:05:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzODM2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377538363", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error (reason, info = info, fatal = fatal) = getSampleError();\n          \n          \n            \n                error(reason, info = info, fatal = fatal) = getSampleError();", "author": "anupama-pathirage", "createdAt": "2020-02-11T10:06:14Z", "path": "examples/error-destructure-binding-pattern/error_destructure_binding_pattern.bal", "diffHunk": "@@ -17,7 +17,7 @@ public function main() {\n     // and assign the values to the relevant variable references.\n     // The value of the reason string in the `SampleError` will be assigned to the variable `reason`.\n     // The values in the detail mapping will be assigned to the relevant variables.\n-    error(reason, info = info, fatal = fatal) = getSampleError();\n+    error (reason, info = info, fatal = fatal) = getSampleError();", "originalCommit": "0045dadabb7d6cb38cf90ab6ce01730f32277ed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "message": "Update examples/error-destructure-binding-pattern/error_destructure_binding_pattern.bal", "committedDate": "2020-02-11T10:06:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NTQ3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377795470", "bodyText": "Shall we remove the spaces here too?", "author": "MaryamZi", "createdAt": "2020-02-11T17:47:12Z", "path": "examples/error-typed-binding-pattern/error_typed_binding_pattern.bal", "diffHunk": "@@ -13,24 +13,24 @@ public function main() {\n     // This error-type binding pattern will destructure an `error` of the type `SampleError`, and create two variables as follows:\n     // The value of the reason string in the`SampleError` will be set to a new `string` variable `reason`.\n     // The values in the detail mapping will be set to new variables `info` and `fatal`.\n-    var error(reason, info = info, fatal = fatal) = getSampleError();\n+    var error (reason, info = info, fatal = fatal) = getSampleError();\n     io:println(\"Reason String: \" + reason);\n     io:println(\"Info: \", info);\n     io:println(\"Fatal: \", fatal);\n \n     // The detail mapping can also be destructured using a rest parameter.\n     // `params` will be of the type `map<anydata|error>`, and will have the\n     // `info` and `fatal` fields.\n-    var error(reasonTwo, ...params) = getSampleError();\n+    var error (reasonTwo, ...params) = getSampleError();", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5OTU2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377799567", "bodyText": "Shouldn't these be indented?", "author": "MaryamZi", "createdAt": "2020-02-11T17:54:52Z", "path": "examples/http-failover/http_failover.bal", "diffHunk": "@@ -3,18 +3,18 @@ import ballerina/log;\n import ballerina/runtime;\n \n // Create an endpoint with port 8080 for the mock backend services.\n-listener http:Listener backendEP = new(8080);\n+listener http:Listener backendEP = new (8080);\n \n // Define the failover client endpoint to call the backend services.\n-http:FailoverClient foBackendEP = new({\n+http:FailoverClient foBackendEP = new ({\n     timeoutInMillis: 5000,\n     failoverCodes: [501, 502, 503],\n     intervalInMillis: 5000,\n     // Define a set of HTTP Clients that are targeted for failover.\n     targets: [\n-        { url: \"http://nonexistentEP/mock1\" },\n-        { url: \"http://localhost:8080/echo\" },\n-        { url: \"http://localhost:8080/mock\" }\n+    {url: \"http://nonexistentEP/mock1\"},", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwNTk1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377805955", "bodyText": "Shall we have some indentation here too?", "author": "MaryamZi", "createdAt": "2020-02-11T18:06:44Z", "path": "examples/kafka_message_consumer_service/kafka_message_consumer_service.bal", "diffHunk": "@@ -33,11 +33,11 @@ service kafkaService on consumer {\n \n function processKafkaRecord(kafka:ConsumerRecord kafkaRecord) {\n     byte[] serializedMsg = kafkaRecord.value;\n-    string | error msg = strings:fromBytes(serializedMsg);\n+    string|error msg = strings:fromBytes(serializedMsg);\n     if (msg is string) {\n         // Print the retrieved Kafka record.\n         io:println(\"Topic: \", kafkaRecord.topic, \" Partition: \",\n-                kafkaRecord.partition.toString(), \" Received Message: \", msg);\n+        kafkaRecord.partition.toString(), \" Received Message: \", msg);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwODI2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377808267", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:11:31Z", "path": "examples/secured-client-with-basic-auth/secured_client_with_basic_auth.bal", "diffHunk": "@@ -6,16 +6,16 @@ import ballerina/log;\n // Basic Authentication is enabled by creating an\n // `auth:OutboundBasicAuthProvider` with the `username` and `password`\n // passed as a record.\n-auth:OutboundBasicAuthProvider outboundBasicAuthProvider = new({\n+auth:OutboundBasicAuthProvider outboundBasicAuthProvider = new ({\n     username: \"tom\",\n     password: \"1234\"\n });\n \n // Creates a Basic Auth handler with the created Basic Auth provider.\n http:BasicAuthHandler outboundBasicAuthHandler =\n-                                            new(outboundBasicAuthProvider);\n+new (outboundBasicAuthProvider);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwODM1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377808352", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:11:39Z", "path": "examples/secured-client-with-basic-auth/secured_client_with_basic_auth.bal", "diffHunk": "@@ -33,7 +33,7 @@ public function main() {\n     if (response is http:Response) {\n         var result = response.getTextPayload();\n         log:printInfo((result is error) ? \"Failed to retrieve payload.\"\n-                                        : result);\n+        : result);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwODY4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377808685", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:12:17Z", "path": "examples/secured-client-with-jwt-auth/secured_client_with_jwt_auth.bal", "diffHunk": "@@ -44,7 +44,7 @@ public function main() {\n     if (response is http:Response) {\n         var result = response.getTextPayload();\n         log:printInfo((result is error) ? \"Failed to retrieve payload.\"\n-                                        : result);\n+        : result);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwOTE3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377809172", "bodyText": "We don't need the space right?", "author": "MaryamZi", "createdAt": "2020-02-11T18:13:21Z", "path": "examples/strings/strings.bal", "diffHunk": "@@ -35,7 +35,7 @@ public function main() {\n     io:println(\"Concat: \", s4);\n \n     // Join strings with a separator.\n-    string s5 = \",\".'join(hello, ballerina);\n+    string s5 = \",\". 'join(hello, ballerina);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0MTQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r378041414", "bodyText": "Thanks. Created the issue #21002 to track this.", "author": "anupama-pathirage", "createdAt": "2020-02-12T05:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwOTE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwOTk5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377809998", "bodyText": "Here we need the space right?", "author": "MaryamZi", "createdAt": "2020-02-11T18:15:01Z", "path": "examples/tuple-destructure-binding-pattern/tuple_destructure_binding_pattern.bal", "diffHunk": "@@ -4,21 +4,21 @@ public function main() {\n \n     // Tuple variables can be destructured with new values when used as a tuple variable\n     // reference based binding pattern.\n-    [string, [int, boolean]] [a1, [a2, a3]] = [\"Hello\", [123, true]];\n+    [string, [int, boolean]][a1, [a2, a3]] = [\"Hello\", [123, true]];", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0NzM1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r378047355", "bodyText": "Yes. Thanks, Created the issue #21003", "author": "anupama-pathirage", "createdAt": "2020-02-12T05:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwOTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMDE2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377810164", "bodyText": "Space required?", "author": "MaryamZi", "createdAt": "2020-02-11T18:15:20Z", "path": "examples/tuple-typed-binding-pattern/tuple_typed_binding_pattern.bal", "diffHunk": "@@ -8,28 +8,28 @@ public function main() {\n \n     // The same variable definition can be written using a tuple-binding pattern\n     // with separate variables.\n-    [boolean, float] [a1, a2] = [true, 0.4];\n+    [boolean, float][a1, a2] = [true, 0.4];", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMDM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377810395", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:15:48Z", "path": "examples/udp-socket-client/udp_socket_client.bal", "diffHunk": "@@ -14,7 +14,7 @@ public function main() {\n     // Send data to remote host.\n     // Second parameter is the address of the remote host.\n     var sendResult =\n-        socketClient->sendTo(c1, { host: \"localhost\", port: 48826 });\n+    socketClient->sendTo(c1, {host: \"localhost\", port: 48826});", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMDQ2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377810460", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:15:56Z", "path": "examples/udp-socket-client/udp_socket_client.bal", "diffHunk": "@@ -30,13 +30,13 @@ public function main() {\n     if (result is [byte[], int, socket:Address]) {\n         var [content, length, address] = result;\n         var byteChannel =\n-            io:createReadableChannel(content);\n+        io:createReadableChannel(content);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMDUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377810508", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:16:02Z", "path": "examples/udp-socket-client/udp_socket_client.bal", "diffHunk": "@@ -30,13 +30,13 @@ public function main() {\n     if (result is [byte[], int, socket:Address]) {\n         var [content, length, address] = result;\n         var byteChannel =\n-            io:createReadableChannel(content);\n+        io:createReadableChannel(content);\n         if (byteChannel is io:ReadableByteChannel) {\n             io:ReadableCharacterChannel characterChannel =\n-                new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n+            new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMDk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377810976", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:16:55Z", "path": "examples/websub-internal-hub-sample/publisher.bal", "diffHunk": "@@ -36,7 +36,7 @@ public function main() {\n     // Publishes directly to the internal Ballerina hub.\n     io:println(\"Publishing update to internal Hub\");\n     var publishResponse = webSubHub.publishUpdate(\"http://websubpubtopic.com\",\n-        { \"action\": \"publish\", \"mode\": \"internal-hub\" });\n+    {\"action\": \"publish\", \"mode\": \"internal-hub\"});", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTQ2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377811465", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:17:46Z", "path": "examples/xa-transactions/xa_transactions.bal", "diffHunk": "@@ -22,7 +22,7 @@ jdbc:Client testDB2 = new ({\n public function main() {\n     // Create the table named CUSTOMER in the first database.\n     var ret = testDB1->update(\"CREATE TABLE CUSTOMER (ID INTEGER \" +\n-                              \"AUTO_INCREMENT, NAME VARCHAR(30))\");\n+    \"AUTO_INCREMENT, NAME VARCHAR(30))\");", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTUxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377811513", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:17:53Z", "path": "examples/xa-transactions/xa_transactions.bal", "diffHunk": "@@ -33,7 +33,7 @@ public function main() {\n         // This is the first remote function to participate in the transaction. It inserts\n         // the customer name to the first DB and gets the generated key.\n         ret = testDB1->update(\"INSERT INTO CUSTOMER(NAME) \" +\n-                               \"VALUES ('Anne')\");\n+        \"VALUES ('Anne')\");", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTYwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377811600", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:18:04Z", "path": "examples/xa-transactions/xa_transactions.bal", "diffHunk": "@@ -42,13 +42,13 @@ public function main() {\n             io:println(\"Generated key: \", key);\n         } else {\n             io:println(\"Insert to student table failed: \",\n-                        <string>ret.detail()?.message);\n+            <string>ret.detail()?.message);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r377811650", "bodyText": "Indentation?", "author": "MaryamZi", "createdAt": "2020-02-11T18:18:08Z", "path": "examples/xa-transactions/xa_transactions.bal", "diffHunk": "@@ -42,13 +42,13 @@ public function main() {\n             io:println(\"Generated key: \", key);\n         } else {\n             io:println(\"Insert to student table failed: \",\n-                        <string>ret.detail()?.message);\n+            <string>ret.detail()?.message);\n         }\n \n         // This is the second remote function to participate in the transaction. It inserts the\n         // salary info to the second DB along with the key generated in the first DB.\n         ret = testDB2->update(\"INSERT INTO SALARY (ID, VALUE) VALUES (?, ?)\",\n-                                    key, 2500);\n+        key, 2500);", "originalCommit": "9ff377e4cbd3f485245b09dd3d2a4dd3844a57a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92752a1447830eba124558a7c6bfe29e84944d85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92752a1447830eba124558a7c6bfe29e84944d85", "message": "Fix review suggestions", "committedDate": "2020-02-12T05:41:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1MDgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r378050827", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [string, [int, boolean]][a1, [a2, a3]] = [\"Hello\", [123, true]];\n          \n          \n            \n                [string, [int, boolean]] [a1, [a2, a3]] = [\"Hello\", [123, true]];", "author": "MaryamZi", "createdAt": "2020-02-12T05:47:25Z", "path": "examples/tuple-destructure-binding-pattern/tuple_destructure_binding_pattern.bal", "diffHunk": "@@ -4,7 +4,7 @@ public function main() {\n \n     // Tuple variables can be destructured with new values when used as a tuple variable\n     // reference based binding pattern.\n-    [string, [int, boolean]] [a1, [a2, a3]] = [\"Hello\", [123, true]];\n+    [string, [int, boolean]][a1, [a2, a3]] = [\"Hello\", [123, true]];", "originalCommit": "92752a1447830eba124558a7c6bfe29e84944d85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA1MDg5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20971#discussion_r378050896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [string|int|float, [string|float, int]][g1, [g2, g3]] =\n          \n          \n            \n                [string|int|float, [string|float, int]] [g1, [g2, g3]] =", "author": "MaryamZi", "createdAt": "2020-02-12T05:47:42Z", "path": "examples/tuple-typed-binding-pattern/tuple_typed_binding_pattern.bal", "diffHunk": "@@ -29,7 +29,7 @@ public function main() {\n                     d1, \" \", d2, \" \", d3, \" \", d4, \" \", d5, \" \", d6);\n \n     // Tuple variable definitions can also take union types.\n-    [string|int|float, [string|float, int]] [g1, [g2, g3]] =\n+    [string|int|float, [string|float, int]][g1, [g2, g3]] =", "originalCommit": "92752a1447830eba124558a7c6bfe29e84944d85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b57226b17e7a95ad6f3275a4208dcd47050755b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b57226b17e7a95ad6f3275a4208dcd47050755b", "message": "Update examples/tuple-destructure-binding-pattern/tuple_destructure_binding_pattern.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-12T10:59:25Z", "type": "commit"}, {"oid": "3b7032f88c5fe447ba280485ae18752b8ccbbc3c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b7032f88c5fe447ba280485ae18752b8ccbbc3c", "message": "Update examples/tuple-typed-binding-pattern/tuple_typed_binding_pattern.bal\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-12T11:01:14Z", "type": "commit"}, {"oid": "f30b2d10f2c5daf7ea7096977e54bccbb1ae3caa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f30b2d10f2c5daf7ea7096977e54bccbb1ae3caa", "message": "Fix few more issues", "committedDate": "2020-02-12T11:06:32Z", "type": "commit"}, {"oid": "826398ad1c25d4d4540364a469510207f7b8dc9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/826398ad1c25d4d4540364a469510207f7b8dc9d", "message": "Resolve conflicts", "committedDate": "2020-02-12T11:12:11Z", "type": "commit"}]}