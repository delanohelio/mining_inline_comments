{"pr_number": 20698, "pr_title": "Fix Kafka module styling issues and bring similar java methods to single classes", "pr_createdAt": "2020-01-22T10:10:49Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698", "timeline": [{"oid": "b13d813bf1c4892aa47f2ec5d182c5891541707b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b13d813bf1c4892aa47f2ec5d182c5891541707b", "message": "Revisit Kafka module code and fix styling issues and inter-op classes", "committedDate": "2020-01-21T13:41:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNzcwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r369927700", "bodyText": "Indentation is different from one to another. Shall we unify it to proper standard?", "author": "wggihan", "createdAt": "2020-01-23T04:33:56Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -263,7 +262,7 @@ public type Consumer client object {\n     # + duration - Timeout duration for the get beginning offsets execution.\n     # + return - Starting offsets for the given partitions if executes successfully, returns `kafka:ConsumerError` if the operation fails.\n     public remote function getBeginningOffsets(TopicPartition[] partitions, public int duration = -1)\n-                               returns PartitionOffset[]|ConsumerError {\n+                                                returns PartitionOffset[]|ConsumerError {", "originalCommit": "b13d813bf1c4892aa47f2ec5d182c5891541707b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNzgzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r369927837", "bodyText": "Need another space in front of this?", "author": "wggihan", "createdAt": "2020-01-23T04:35:06Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -448,7 +445,7 @@ function producerSendStringFloat(Producer producer, handle value, handle topic,\n } external;\n \n function producerSendStringByteArray(Producer producer, handle value, handle topic, byte[] key, int? partition = (),\n-                                int? timestamp = ()) returns ProducerError? =\n+                                    int? timestamp = ()) returns ProducerError? =", "originalCommit": "b13d813bf1c4892aa47f2ec5d182c5891541707b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMzk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r369933991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "wggihan", "createdAt": "2020-01-23T05:10:42Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/BrokerConnection.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "b13d813bf1c4892aa47f2ec5d182c5891541707b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzOTUzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r369939532", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "wggihan", "createdAt": "2020-01-23T05:36:41Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/ConsumerInformationHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "b13d813bf1c4892aa47f2ec5d182c5891541707b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MDQ3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r369940479", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "wggihan", "createdAt": "2020-01-23T05:42:18Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetOffsets.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "b13d813bf1c4892aa47f2ec5d182c5891541707b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MjI3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r369942279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "wggihan", "createdAt": "2020-01-23T05:52:07Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/ProducerActions.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "b13d813bf1c4892aa47f2ec5d182c5891541707b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "88937d47630fbd4be129c878643a9a9c6061284f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88937d47630fbd4be129c878643a9a9c6061284f", "message": "Fix observability issues and update license headers", "committedDate": "2020-01-24T06:22:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzOTU4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r370539584", "bodyText": "Shall we move this as a class variable?", "author": "wggihan", "createdAt": "2020-01-24T09:29:01Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java", "diffHunk": "@@ -117,14 +119,27 @@ public static void reportPublish(ObjectValue producerObject, String topic, Objec\n             return;\n         }\n         int size = 0;\n-        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n-            ObjectOutputStream oos = new ObjectOutputStream(bos);\n-            oos.writeObject(value);\n-            oos.flush();\n-            byte[] data = bos.toByteArray();\n-            size = data.length;\n-        } catch (IOException e) {\n-\n+        if (value instanceof String) {\n+            try {\n+                byte[] bytes = ((String) value).getBytes(\"UTF-8\");\n+                size = bytes.length;\n+            } catch (UnsupportedEncodingException e) {\n+                LoggerFactory.getLogger(KafkaMetricsUtil.class).error(e.getMessage());", "originalCommit": "88937d47630fbd4be129c878643a9a9c6061284f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "11e69a2dc803305285200e178f973fb0f3e789af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11e69a2dc803305285200e178f973fb0f3e789af", "message": "Implement code review suggestions", "committedDate": "2020-01-24T09:40:26Z", "type": "commit"}, {"oid": "23419183600f848678a7fe9bc721e79f0762f583", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23419183600f848678a7fe9bc721e79f0762f583", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-default-serializers", "committedDate": "2020-01-24T09:41:19Z", "type": "commit"}, {"oid": "b62097a23b7315b2c49bc33c06bec1a2efffb844", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b62097a23b7315b2c49bc33c06bec1a2efffb844", "message": "Fix Kafka build failures", "committedDate": "2020-01-24T10:00:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI0NjgxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20698#discussion_r372246818", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        size = 8;\n          \n          \n            \n                        size = Double.BYTES;", "author": "wggihan", "createdAt": "2020-01-29T08:33:02Z", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java", "diffHunk": "@@ -108,23 +110,32 @@ public static void reportConsumerClose(ObjectValue consumerObject) {\n     /**\n      * Reports a message being published by a Kafka producer.\n      *\n-     * @param producerObject  producer object.\n-     * @param topic Subject the message is published to.\n-     * @param value  Message object.\n+     * @param producerObject producer object.\n+     * @param topic          Subject the message is published to.\n+     * @param value          Message object.\n      */\n     public static void reportPublish(ObjectValue producerObject, String topic, Object value) {\n         if (!ObserveUtils.isMetricsEnabled()) {\n             return;\n         }\n         int size = 0;\n-        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n-            ObjectOutputStream oos = new ObjectOutputStream(bos);\n-            oos.writeObject(value);\n-            oos.flush();\n-            byte[] data = bos.toByteArray();\n-            size = data.length;\n-        } catch (IOException e) {\n-\n+        if (value instanceof String) {\n+            byte[] bytes = ((String) value).getBytes(StandardCharsets.UTF_8);\n+            size = bytes.length;\n+        } else if (value instanceof Long || value instanceof Double) {\n+            size = 8;", "originalCommit": "b62097a23b7315b2c49bc33c06bec1a2efffb844", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f60a699e70546ee36d75744b535ced916444fabc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f60a699e70546ee36d75744b535ced916444fabc", "message": "Use pre-defined constant instead of variable\n\nCo-Authored-By: Gihan Anuruddha <wggihan@users.noreply.github.com>", "committedDate": "2020-01-29T08:45:46Z", "type": "commit"}]}