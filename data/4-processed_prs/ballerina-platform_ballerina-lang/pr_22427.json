{"pr_number": 22427, "pr_title": "Add continue and break statement support", "pr_createdAt": "2020-04-02T10:28:18Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427", "timeline": [{"oid": "32617af9f27fbd19e35737c0f807a2d5384766e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/32617af9f27fbd19e35737c0f807a2d5384766e0", "message": "Continue statement support for internal tree", "committedDate": "2020-03-31T11:27:11Z", "type": "commit"}, {"oid": "e680e965442b5b7f8b71e1b2f14c326ba818f60b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e680e965442b5b7f8b71e1b2f14c326ba818f60b", "message": "create ContinueStatement.java file", "committedDate": "2020-04-01T05:38:06Z", "type": "commit"}, {"oid": "5a918c8f0052dafc34b7f6aee93494d9bca0bbd0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a918c8f0052dafc34b7f6aee93494d9bca0bbd0", "message": "resolve merge conflicts", "committedDate": "2020-04-01T07:05:56Z", "type": "commit"}, {"oid": "2246fadf31759fd0c9c818b2b7c6fb04b120027f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2246fadf31759fd0c9c818b2b7c6fb04b120027f", "message": "Createfacade for continue statement", "committedDate": "2020-04-01T07:59:58Z", "type": "commit"}, {"oid": "d690306fcf25d94542277db900e5141f9e56982d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d690306fcf25d94542277db900e5141f9e56982d", "message": "Break statement support to the parser", "committedDate": "2020-04-01T08:34:05Z", "type": "commit"}, {"oid": "b421fa2cc281deb7577fd39c36bab9dc33e95fa8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b421fa2cc281deb7577fd39c36bab9dc33e95fa8", "message": "recovery logic for continue and break statements", "committedDate": "2020-04-02T08:49:50Z", "type": "commit"}, {"oid": "c479b41ed72e21be01ef2434574f4f587a078bc2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c479b41ed72e21be01ef2434574f4f587a078bc2", "message": "Test cases for continue and break statements", "committedDate": "2020-04-02T10:07:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNjY4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402226684", "bodyText": "Add a new line", "author": "SupunS", "createdAt": "2020-04-02T10:58:27Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseContinueKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse Break statement.\n+     * <code>break-stmt := break ; </code>\n+     *\n+     * @return Break statement\n+     */\n+    private STNode parseBreakStatement() {\n+        startContext(ParserRuleContext.BREAK_STATEMENT);\n+        STNode breakKeyword = parseBreakKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createBreakStatement(breakKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseBreakKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.BREAK_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.BREAK_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+}", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTgxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402275815", "bodyText": "done", "author": "rdulmina", "createdAt": "2020-04-02T12:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNjY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzMzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402227335", "bodyText": "Not properly formatted", "author": "SupunS", "createdAt": "2020-04-02T10:59:39Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.BreakStatement;\n+\n+public class STBreakStatement extends STStatement{\n+    public final STNode breakKeyword;\n+    public final STNode semicolonToken;\n+\n+\n+    STBreakStatement(STNode breakKeyword,\n+                        STNode semicolonToken) {", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTkxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402275917", "bodyText": "corrected", "author": "rdulmina", "createdAt": "2020-04-02T12:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzQ1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402227459", "bodyText": "extra newline.\nPlease fix in other files as well", "author": "SupunS", "createdAt": "2020-04-02T10:59:51Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STBreakStatement.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.internal.parser.tree;\n+\n+import io.ballerinalang.compiler.syntax.tree.Node;\n+import io.ballerinalang.compiler.syntax.tree.NonTerminalNode;\n+import io.ballerinalang.compiler.syntax.tree.BreakStatement;\n+\n+public class STBreakStatement extends STStatement{\n+    public final STNode breakKeyword;\n+    public final STNode semicolonToken;\n+\n+\n+    STBreakStatement(STNode breakKeyword,\n+                        STNode semicolonToken) {\n+        super(SyntaxKind.BREAK_STATEMENT);\n+        this.breakKeyword = breakKeyword;\n+        this.semicolonToken = semicolonToken;\n+\n+\n+        this.bucketCount = 2;\n+        this.childBuckets = new STNode[this.bucketCount];\n+        this.addChildNode(breakKeyword, 0);\n+        this.addChildNode(semicolonToken, 1);\n+\n+    }\n+\n+    @Override\n+    public Node createFacade(int position, NonTerminalNode parent) {\n+", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402275974", "bodyText": "done", "author": "rdulmina", "createdAt": "2020-04-02T12:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzk2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402227968", "bodyText": "add a newline at EOF", "author": "SupunS", "createdAt": "2020-04-02T11:00:50Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/STNodeFactory.java", "diffHunk": "@@ -335,5 +346,7 @@ public static STNode createVersionPart(STNode leadingDot, STNode versionNumber)\n \n     public static STNode createImportPrefix(STNode asKeyword, STNode prefix) {\n         return new STImportPrefix(asKeyword, prefix);\n+\n     }\n-}\n+\n+}", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjAxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402276010", "bodyText": "done", "author": "rdulmina", "createdAt": "2020-04-02T12:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNzk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODUxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402228510", "bodyText": "seems this is not in the correct order. Also next number should be 211", "author": "SupunS", "createdAt": "2020-04-02T11:01:55Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -50,8 +50,11 @@\n     WHILE_KEYWORD(207, \"while\"),\n     CHECK_KEYWORD(208, \"check\"),\n     CHECKPANIC_KEYWORD(209, \"checkpanic\"),\n+    CONTINUE_KEYWORD(212,\"continue\"),\n+    BREAK_KEYWORD(213,\"break\"),", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDMxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402234313", "bodyText": "I'll fix that", "author": "rdulmina", "createdAt": "2020-04-02T11:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODUxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjA2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402276061", "bodyText": "done", "author": "rdulmina", "createdAt": "2020-04-02T12:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402228650", "bodyText": "next number should be 1208", "author": "SupunS", "createdAt": "2020-04-02T11:02:13Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/tree/SyntaxKind.java", "diffHunk": "@@ -110,6 +113,10 @@\n     WHILE_STATEMENT(1205),\n     CALL_STATEMENT(1206),\n     PANIC_STATEMENT(1207),\n+    CONTINUE_STATEMENT(1209),\n+    BREAK_STATEMENT(1210),", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNDE0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402234146", "bodyText": "return statement has used 1208 supun should I use it anyway?", "author": "rdulmina", "createdAt": "2020-04-02T11:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NDc5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402244792", "bodyText": "Use the next immediate available number.", "author": "SupunS", "createdAt": "2020-04-02T11:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyODY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMDgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402230829", "bodyText": "Use 'sentence-case' for comments", "author": "SupunS", "createdAt": "2020-04-02T11:06:33Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjE1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402276150", "bodyText": "done", "author": "rdulmina", "createdAt": "2020-04-02T12:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMDgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMTA0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402231044", "bodyText": "Incorrect doc comment", "author": "SupunS", "createdAt": "2020-04-02T11:06:55Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3486,4 +3495,62 @@ private STNode parseCheckingKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n-}\n+\n+    /**\n+     * Parse Continue statement.\n+     * <code>continue-stmt := continue ; </code>\n+     *\n+     * @return Continue statement\n+     */\n+    private STNode parseContinueStatement() {\n+        startContext(ParserRuleContext.CONTINUE_STATEMENT);\n+        STNode continueKeyword = parseContinueKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createContinueStatement(continueKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.\n+     *\n+     * @return Continue-keyword node\n+     */\n+    private STNode parseContinueKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.CONTINUE_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.CONTINUE_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse Break statement.\n+     * <code>break-stmt := break ; </code>\n+     *\n+     * @return Break statement\n+     */\n+    private STNode parseBreakStatement() {\n+        startContext(ParserRuleContext.BREAK_STATEMENT);\n+        STNode breakKeyword = parseBreakKeyword();\n+        STNode semicolon = parseSemicolon();\n+        endContext();\n+        return STNodeFactory.createBreakStatement(breakKeyword, semicolon);\n+    }\n+\n+    /**\n+     * Parse Continue-keyword.", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7ca3da8f59b2bc0c85eb23735777c18f3e6b94b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ca3da8f59b2bc0c85eb23735777c18f3e6b94b1", "message": "Reformated the changed files\n\nused statement case for comments\nadded new line for EOF\nreorded the codelines\nformated indentation issues", "committedDate": "2020-04-02T11:39:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0Nzc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402247761", "bodyText": "Shouldn't this be createToken(1);?", "author": "SupunS", "createdAt": "2020-04-02T11:40:52Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/BreakStatement.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class BreakStatement extends Statement{\n+    private Token breakToken;\n+    private Token semicolonToken;\n+\n+    public BreakStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token breakToken() {\n+        if (breakToken != null) {\n+            return breakToken;\n+        }\n+\n+        breakToken = createToken(0);\n+        return breakToken;\n+    }\n+\n+    public Token semicolonToken() {\n+        if (semicolonToken != null) {\n+            return semicolonToken;\n+        }\n+\n+        semicolonToken = createToken(2);", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NzgwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402247805", "bodyText": "Shouldn't this be createToken(1);?", "author": "SupunS", "createdAt": "2020-04-02T11:41:00Z", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/ContinueStatement.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.syntax.tree;\n+\n+import io.ballerinalang.compiler.internal.parser.tree.STNode;\n+\n+public class ContinueStatement extends Statement{\n+    private Token continueToken;\n+    private Token semicolonToken;\n+\n+    public ContinueStatement(STNode node, int position, NonTerminalNode parent) {\n+        super(node, position, parent);\n+    }\n+\n+    public Token continueToken() {\n+        if (continueToken != null) {\n+            return continueToken;\n+        }\n+\n+        continueToken = createToken(0);\n+        return continueToken;\n+    }\n+\n+    public Token semicolonToken() {\n+        if (semicolonToken != null) {\n+            return semicolonToken;\n+        }\n+\n+        semicolonToken = createToken(2);", "originalCommit": "c479b41ed72e21be01ef2434574f4f587a078bc2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9b6e946c8213a3608dfba669dd36e2e688e86cab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b6e946c8213a3608dfba669dd36e2e688e86cab", "message": "changed createToken(2) to createToken(1)", "committedDate": "2020-04-02T11:51:48Z", "type": "commit"}, {"oid": "794165a478793cba605f566e3adb298d6e306ea3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/794165a478793cba605f566e3adb298d6e306ea3", "message": "Merge branch 'incremental-parser' into incremental-parser", "committedDate": "2020-04-02T12:30:20Z", "type": "commit"}, {"oid": "032a93bf7cabe43f8573aadbf103efe11023d433", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/032a93bf7cabe43f8573aadbf103efe11023d433", "message": "fix '{' is not preceded with whitespace", "committedDate": "2020-04-02T17:53:58Z", "type": "commit"}, {"oid": "775dcc18509653ebba499f30f677514b88ab84e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/775dcc18509653ebba499f30f677514b88ab84e1", "message": "fix '{' is not preceded with whitespace", "committedDate": "2020-04-02T17:54:38Z", "type": "commit"}, {"oid": "18c4c6aea349da4edcfcc1937c4df3d303e42e4a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18c4c6aea349da4edcfcc1937c4df3d303e42e4a", "message": "remove additional new lines", "committedDate": "2020-04-02T18:36:46Z", "type": "commit"}, {"oid": "d0eb06c5ed4907d9103026851f32d5aef912dde4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d0eb06c5ed4907d9103026851f32d5aef912dde4", "message": "added missing json files", "committedDate": "2020-04-02T19:22:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzE2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557163", "bodyText": "Can you dd a new line here?", "author": "sameerajayasoma", "createdAt": "2020-04-02T19:24:36Z", "path": "compiler/ballerina-parser/src/test/resources/statements/break-stmt/break_stmt_assert_1.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"kind\": \"BREAK_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"BREAK_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\"\n+    }\n+  ]\n+}", "originalCommit": "d0eb06c5ed4907d9103026851f32d5aef912dde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzIxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557217", "bodyText": "Can you dd a new line here?", "author": "sameerajayasoma", "createdAt": "2020-04-02T19:24:42Z", "path": "compiler/ballerina-parser/src/test/resources/statements/break-stmt/break_stmt_assert_2.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"kind\": \"BREAK_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"BREAK_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\",\n+      \"isMissing\": true\n+    }\n+  ]\n+}", "originalCommit": "d0eb06c5ed4907d9103026851f32d5aef912dde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzI2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557261", "bodyText": "Can you dd a new line here?", "author": "sameerajayasoma", "createdAt": "2020-04-02T19:24:47Z", "path": "compiler/ballerina-parser/src/test/resources/statements/continue-stmt/continue_stmt_assert_1.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"kind\": \"CONTINUE_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"CONTINUE_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\"\n+    }\n+  ]\n+}", "originalCommit": "d0eb06c5ed4907d9103026851f32d5aef912dde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzMxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402557315", "bodyText": "Can you dd a new line here?", "author": "sameerajayasoma", "createdAt": "2020-04-02T19:24:52Z", "path": "compiler/ballerina-parser/src/test/resources/statements/continue-stmt/continue_stmt_assert_2.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"kind\": \"CONTINUE_STATEMENT\",\n+  \"children\": [\n+    {\n+      \"kind\": \"CONTINUE_KEYWORD\"\n+    },\n+    {\n+      \"kind\": \"SEMICOLON_TOKEN\",\n+      \"isMissing\": true\n+    }\n+  ]\n+}", "originalCommit": "d0eb06c5ed4907d9103026851f32d5aef912dde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2NTU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22427#discussion_r402565559", "bodyText": "Done @sameerajayasoma", "author": "rdulmina", "createdAt": "2020-04-02T19:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NzMxNQ=="}], "type": "inlineReview"}, {"oid": "3f98bd18e2aa86d91d527713ffcd3382bb09e382", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3f98bd18e2aa86d91d527713ffcd3382bb09e382", "message": "New line to EOF", "committedDate": "2020-04-02T19:38:42Z", "type": "commit"}, {"oid": "1085877735a62fec67c75de8923470202edcfac1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1085877735a62fec67c75de8923470202edcfac1", "message": "Merge branch 'incremental-parser' of https://github.com/ballerina-platform/ballerina-lang into incremental-parser", "committedDate": "2020-04-03T11:08:15Z", "type": "commit"}, {"oid": "7f988462cea1abb6b5a74d751bc2dbed6ceacc6a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f988462cea1abb6b5a74d751bc2dbed6ceacc6a", "message": "Changed the code to match with latest changes in the upstream", "committedDate": "2020-04-03T11:31:23Z", "type": "commit"}]}