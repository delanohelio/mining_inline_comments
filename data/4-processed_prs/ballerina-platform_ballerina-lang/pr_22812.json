{"pr_number": 22812, "pr_title": "Fix issues in API Docs", "pr_createdAt": "2020-04-21T09:20:01Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MjYxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412962612", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param moduleDocList modules list which docs ti be generated\n          \n          \n            \n                 * @param moduleDocList modules list which docs to be generated", "author": "praveennadarajah", "createdAt": "2020-04-22T13:03:21Z", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "diffHunk": "@@ -426,6 +406,50 @@ public static void setPrintStream(PrintStream out) {\n         BallerinaDocGenerator.out = out;\n     }\n \n+    /**\n+     * Generate docs generator model.\n+     *\n+     * @param moduleDocList modules list which docs ti be generated", "originalCommit": "d31496a96536bb41b5b273a8b4099462e2ca509d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NDI1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412964259", "bodyText": "It should be \"moduleDocList modules list whose docs to be generated\" right?", "author": "praveennadarajah", "createdAt": "2020-04-22T13:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2MjYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2Nzg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412967881", "bodyText": "I think we can remove this unnecessary line.", "author": "praveennadarajah", "createdAt": "2020-04-22T13:10:40Z", "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/docs/BallerinaDocGenerator.java", "diffHunk": "@@ -426,6 +406,50 @@ public static void setPrintStream(PrintStream out) {\n         BallerinaDocGenerator.out = out;\n     }\n \n+    /**\n+     * Generate docs generator model.\n+     *\n+     * @param moduleDocList modules list which docs ti be generated\n+     * @param resources     module level doc resources\n+     * @return docs generator model of the project\n+     */\n+    public static Project getDocsGenModel(List<ModuleDoc> moduleDocList, Map<String, List<Path>> resources) {\n+        Project project = new Project();\n+        project.isSingleFile =\n+                moduleDocList.size() == 1 && moduleDocList.get(0).bLangPackage.packageID.name.value.equals(\".\");\n+        if (project.isSingleFile) {\n+            project.sourceFileName = moduleDocList.get(0).bLangPackage.packageID.sourceFileName.value;\n+        }\n+        project.name = \"\";\n+        project.description = \"\";\n+\n+        List<Module> moduleDocs = new ArrayList<>();\n+        for (ModuleDoc moduleDoc : moduleDocList) {\n+            // Generate module models\n+            Module module = new Module();\n+            module.id = moduleDoc.bLangPackage.packageID.name.toString();\n+            module.orgName = moduleDoc.bLangPackage.packageID.orgName.toString();\n+            String moduleVersion = moduleDoc.bLangPackage.packageID.version.toString();\n+            // get version from system property if not found in bLangPackage\n+            module.version = moduleVersion.equals(\"\") ?\n+                    System.getProperty(BallerinaDocConstants.VERSION) :\n+                    moduleVersion;\n+            module.summary = moduleDoc.summary;\n+            module.description = moduleDoc.description;\n+\n+            // populate module constructs\n+            sortModuleConstructs(moduleDoc.bLangPackage);\n+            Generator.generateModuleConstructs(module, moduleDoc.bLangPackage);\n+\n+            // collect module's doc resources\n+            resources.put(module.id, moduleDoc.resources);\n+", "originalCommit": "d31496a96536bb41b5b273a8b4099462e2ca509d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyMzAxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r413523010", "bodyText": "There is no unnecessary line here.", "author": "pramodya1994", "createdAt": "2020-04-23T05:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2Nzg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NDUxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412984515", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (\"CountryCode\".equals(typeName)) {\n          \n          \n            \n                        if (typeName.equals(\"CountryCode\")) {", "author": "praveennadarajah", "createdAt": "2020-04-22T13:31:24Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DeprecatedAnnotationTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.documentation;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.Constant;\n+import org.ballerinalang.docgen.generator.model.Construct;\n+import org.ballerinalang.docgen.generator.model.Error;\n+import org.ballerinalang.docgen.generator.model.FiniteType;\n+import org.ballerinalang.docgen.generator.model.Function;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.generator.model.UnionType;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test cases to check @deprecated annotation is showing in the docs.\n+ */\n+public class DeprecatedAnnotationTest {\n+\n+    private Module testModule;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot =\n+                \"test-src\" + File.separator + \"documentation\" + File.separator + \"deprecated_annotation_project\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"test_module\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocs(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+    }\n+\n+    @Test(description = \"Test @deprecated annotation for module-level union type definitions\")\n+    public void testDeprecatedUnionTypeDef() {\n+        List<UnionType> unionTypes = testModule.unionTypes;\n+        UnionType depUnionType = null;\n+        UnionType nonDepUnionType = null;\n+\n+        for (UnionType type : unionTypes) {\n+            String typeName = type.name;\n+            if (\"CountryCode\".equals(typeName)) {", "originalCommit": "d31496a96536bb41b5b273a8b4099462e2ca509d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NTA4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412985087", "bodyText": "This way looks more readable and clean. Isn't it?\nShall we follow the above way in all the places?", "author": "praveennadarajah", "createdAt": "2020-04-22T13:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NDUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyMTAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r413521035", "bodyText": "In the repo, we have used it in this way. That's why I used the same convention.", "author": "pramodya1994", "createdAt": "2020-04-23T05:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NDUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NTU2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r412985562", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (\"NewCountryCode\".equals(typeName)) {\n          \n          \n            \n                        } else if (typeName.equals(\"NewCountryCode\")) {", "author": "praveennadarajah", "createdAt": "2020-04-22T13:32:44Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/DeprecatedAnnotationTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.test.documentation;\n+\n+import org.ballerinalang.docgen.docs.BallerinaDocGenerator;\n+import org.ballerinalang.docgen.generator.model.Constant;\n+import org.ballerinalang.docgen.generator.model.Construct;\n+import org.ballerinalang.docgen.generator.model.Error;\n+import org.ballerinalang.docgen.generator.model.FiniteType;\n+import org.ballerinalang.docgen.generator.model.Function;\n+import org.ballerinalang.docgen.generator.model.Module;\n+import org.ballerinalang.docgen.generator.model.Object;\n+import org.ballerinalang.docgen.generator.model.Project;\n+import org.ballerinalang.docgen.generator.model.Record;\n+import org.ballerinalang.docgen.generator.model.UnionType;\n+import org.ballerinalang.docgen.model.ModuleDoc;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Test cases to check @deprecated annotation is showing in the docs.\n+ */\n+public class DeprecatedAnnotationTest {\n+\n+    private Module testModule;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String sourceRoot =\n+                \"test-src\" + File.separator + \"documentation\" + File.separator + \"deprecated_annotation_project\";\n+        CompileResult result = BCompileUtil.compile(sourceRoot, \"test_module\");\n+\n+        List<BLangPackage> modules = new LinkedList<>();\n+        modules.add((BLangPackage) result.getAST());\n+        Map<String, ModuleDoc> docsMap = BallerinaDocGenerator.generateModuleDocs(\n+                Paths.get(\"src/test/resources\", sourceRoot).toAbsolutePath().toString(), modules);\n+        List<ModuleDoc> moduleDocList = new ArrayList<>(docsMap.values());\n+        moduleDocList.sort(Comparator.comparing(pkg -> pkg.bLangPackage.packageID.toString()));\n+        Map<String, List<Path>> resources = new HashMap<>();\n+\n+        Project project = BallerinaDocGenerator.getDocsGenModel(moduleDocList, resources);\n+        testModule = project.modules.get(0);\n+    }\n+\n+    @Test(description = \"Test @deprecated annotation for module-level union type definitions\")\n+    public void testDeprecatedUnionTypeDef() {\n+        List<UnionType> unionTypes = testModule.unionTypes;\n+        UnionType depUnionType = null;\n+        UnionType nonDepUnionType = null;\n+\n+        for (UnionType type : unionTypes) {\n+            String typeName = type.name;\n+            if (\"CountryCode\".equals(typeName)) {\n+                depUnionType = type;\n+            } else if (\"NewCountryCode\".equals(typeName)) {", "originalCommit": "d31496a96536bb41b5b273a8b4099462e2ca509d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyMTE0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22812#discussion_r413521149", "bodyText": "In the repo, we have used it in this way. That's why I used the same convention.", "author": "pramodya1994", "createdAt": "2020-04-23T05:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk4NTU2Mg=="}], "type": "inlineReview"}, {"oid": "7c18226f4e54d8ecd420215662494aa869368a54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c18226f4e54d8ecd420215662494aa869368a54", "message": "Fixes #20024 #22402 #21725 #22307\n\nThis include following PRs", "committedDate": "2020-04-23T05:38:58Z", "type": "commit"}, {"oid": "7c18226f4e54d8ecd420215662494aa869368a54", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c18226f4e54d8ecd420215662494aa869368a54", "message": "Fixes #20024 #22402 #21725 #22307\n\nThis include following PRs", "committedDate": "2020-04-23T05:38:58Z", "type": "forcePushed"}]}