{"pr_number": 21680, "pr_title": "Add gateway proxy generation support to gRPC", "pr_createdAt": "2020-03-11T15:25:52Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680", "timeline": [{"oid": "8d5bf362fc5df9ea5e8fafd2a2e49f1ff4122c95", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d5bf362fc5df9ea5e8fafd2a2e49f1ff4122c95", "message": "Merge pull request #1 from ballerina-platform/master\n\nPull changes", "committedDate": "2020-02-24T05:34:53Z", "type": "commit"}, {"oid": "6977442ae32342eb6f482075da2ed07f0b26656a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6977442ae32342eb6f482075da2ed07f0b26656a", "message": "Add gateway proxy generation to gRPC - Fix Merge Conflicts", "committedDate": "2020-03-11T14:20:57Z", "type": "commit"}, {"oid": "02817279f71f2b402a1ad2f5bb76f39f7bce7b67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02817279f71f2b402a1ad2f5bb76f39f7bce7b67", "message": "Add gateway proxy generation to gRPC - Fixed Merge Conflicts with github repo", "committedDate": "2020-03-11T16:34:52Z", "type": "commit"}, {"oid": "ba7396a37780a1a67e63b96c277e10627073132d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba7396a37780a1a67e63b96c277e10627073132d", "message": "Add gateway proxy generation to gRPC - Fixed some errors introduced by syntax changes", "committedDate": "2020-03-11T19:36:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391456326", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright (c) 2015, Google Inc.\n          \n          \n            \n            // Copyright (c) 2020, Google Inc.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:11:39Z", "path": "misc/protobuf-ballerina/src/main/resources/google/api/annotations.proto", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015, Google Inc.", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2MTI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391461281", "bodyText": "Do we really need to use these proto files provided by Google with their license?. I think we can use our own proto files with WSO2 license.\nOn the other hand, if you have a real requirement of using these files, AFAIK you can use this with their license since it is also Apache 2.0. But it is better to provide the link that you copied from as a comment.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgwMDYyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392800625", "bodyText": "These are some external files used. I included the source link as a comment.", "author": "daksithj", "createdAt": "2020-03-16T06:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNzg0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r394117847", "bodyText": "@daneshk, any idea of the licensing?", "author": "BuddhiWathsala", "createdAt": "2020-03-18T05:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NjMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1Njk2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391456964", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright 2018 Google LLC\n          \n          \n            \n            // Copyright 2020 Google LLC", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:13:02Z", "path": "misc/protobuf-ballerina/src/main/resources/google/api/http.proto", "diffHunk": "@@ -0,0 +1,318 @@\n+// Copyright 2018 Google LLC", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391464240", "bodyText": "Do we need the specific version here?", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:29:20Z", "path": "stdlib/grpc/build.gradle", "diffHunk": "@@ -49,6 +49,7 @@ dependencies {\n     interopImports project(':ballerina-io')\n \n     implementation 'org.apache.commons:commons-lang3'\n+    implementation 'com.google.api.grpc:proto-google-common-protos:1.17.0'", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjgxNTY4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392815685", "bodyText": "The documentation for the external resource suggested including the dependency in such a manner in gradle.", "author": "daksithj", "createdAt": "2020-03-16T06:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwMTU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396901559", "bodyText": "Shall we add this dependency with the version to here[1] and refer it here without the version. So we are maintaining the version in one place\n\nhttps://github.com/ballerina-platform/ballerina-lang/blob/master/gradle/javaLibsProject.gradle.", "author": "daneshk", "createdAt": "2020-03-24T04:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625013", "bodyText": "Removed the version and added with version to [1] described above", "author": "daksithj", "createdAt": "2020-03-25T06:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2NDI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2Nzk5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391467999", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setMessageList(List<Message> messageList) {\n          \n          \n            \n                public void setMessageMap(List<Message> messageList) {", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:37:31Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -86,7 +83,11 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n     }\n \n     public void setMessageList(List<Message> messageList) {", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4NjE1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392786157", "bodyText": "I refactored the function name", "author": "daksithj", "createdAt": "2020-03-16T05:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2Nzk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODQ4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391468489", "bodyText": "Rename messageInList  -> message to improve the readability.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:38:35Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -86,7 +83,11 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n     }\n \n     public void setMessageList(List<Message> messageList) {\n-        this.messageList = messageList;\n+        Map<String, Message> messageMap = new HashMap<>();\n+        for (Message messageInList : messageList) {", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4NjM3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392786379", "bodyText": "I renamed the variable name", "author": "daksithj", "createdAt": "2020-03-16T05:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ2ODQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MTU5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391471591", "bodyText": "Do we really need an allocated variable since this httpPath used just once?", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:44:53Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "diffHunk": "@@ -93,9 +143,100 @@ public Method build() {\n             String methodName = methodDescriptor.getName();\n             String inputType = methodDescriptor.getInputType();\n             inputType = inputType != null ? getMappingBalType(inputType) : null;\n+            boolean primitiveInput = inputType != null && checkPrimitiveType(inputType);\n             String outputType = methodDescriptor.getOutputType();\n             outputType = outputType != null ? getMappingBalType(outputType) : null;\n-            return new Method(methodName, methodId, inputType, outputType, methodType);\n+            HttpRule httpExtension = methodDescriptor.getOptions().getExtension(AnnotationsProto.http);\n+            String httpMethod = httpExtension.getPatternCase().name();\n+            String httpPath = resolveHttpPath(httpExtension);\n+            String httpBody = httpExtension.getBody();\n+            List<Param> paramSet = getParamList(inputType, messageMap, httpExtension);\n+            return new Method(methodName, methodId, inputType, primitiveInput, outputType, methodType, httpMethod,\n+                    httpPath, httpBody, paramSet);\n+        }\n+\n+        private String resolveHttpPath(HttpRule httpExtension) {\n+            int number = httpExtension.getPatternCase().getNumber();\n+            // the following http methods are mapped thee numbers\n+            // 0:no extension / 2:get /3:put /4:post /5:delete /6:patch\n+            switch (number) {\n+                case 2:\n+                    return httpExtension.getGet();\n+                case 3:\n+                    return httpExtension.getPut();\n+                case 4:\n+                    return httpExtension.getPost();\n+                case 5:\n+                    return httpExtension.getDelete();\n+                case 6:\n+                    return httpExtension.getPatch();\n+                default:\n+                    return \"\";\n+            }\n+        }\n+\n+        private List<Param> getParamList(String inputType, Map<String, Message> messageMap, HttpRule httpExtension) {\n+            String httpMethod = httpExtension.getPatternCase().name();\n+            if (httpMethod.equals(HTTP_PATTERN_NOT_SET) || inputType == null) {\n+               return new ArrayList<>();\n+            }\n+            String httpPath = resolveHttpPath(httpExtension);", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4Njc0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392786745", "bodyText": "I removed the variable and directly applied the function at the one place it was used", "author": "daksithj", "createdAt": "2020-03-16T05:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MTU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MjI1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391472257", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:46:12Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Param.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MTQ1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392781456", "bodyText": "I made the change", "author": "daksithj", "createdAt": "2020-03-16T04:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MjI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3NjgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391476829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }{{/not_equal}}\n          \n          \n            \n                }{{/not_equal}}", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:55:45Z", "path": "stdlib/grpc/src/main/resources/templates/skeleton/proxy_unary.mustache", "diffHunk": "@@ -0,0 +1,47 @@\n+    {{#not_equal httpMethod \"PATTERN_NOT_SET\"}}@http:ResourceConfig {\n+    methods: [\"{{httpMethod}}\"],\n+    path: \"{{httpPath}}\"{{#not_equal httpBody \"\"}},\n+    body: \"requestBody\"{{/not_equal}}\n+    }\n+    resource function {{methodName}}(http:Caller caller, http:Request req{{#paramSet}}{{#equals paramSource \"path\"}}, {{fieldType}} {{fieldName}}{{/equals}}{{/paramSet}}{{#not_equal httpBody \"\"}}, json requestBody{{/not_equal}}) {\n+        {{#isNotNull inputType}}{{#if primitiveInput}}{{inputType}} new{{inputType}};{{else}}{{inputType}} new{{inputType}} = {};{{/if}}\n+        {{#equals httpBody \"*\"}}{{inputType}} | error bodyExtracted{{inputType}} = {{inputType}}.constructFrom(requestBody);\n+        if bodyExtracted{{inputType}} is error {\n+            sendResponse(caller, bodyExtracted{{inputType}});\n+            return;\n+        } else {\n+        {{#if primitiveInput}}new{{inputType}}{{else}}new{{inputType}}{{/if}} = bodyExtracted{{inputType}};\n+        }\n+        {{#paramSet}}{{#equals paramSource \"path\"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        {{/equals}}{{/paramSet}}{{/equals}}{{#not_equal httpBody \"*\"}}{{#paramSet}}{{#equals paramSource \"message\"}}{{fieldType}} {{fieldName}} = {};\n+        {{/equals}}{{/paramSet}}any | error paramReader;\n+        string[]? queryParamSetReader;\n+        {{#paramSet}}{{#equals paramSource \"path\"}}{{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        {{/equals}}{{#equals paramSource \"query\"}}{{#if repeatedParam}}queryParamSetReader = req.getQueryParamValues(\"{{queryAccessName}}{{fieldName}}\");\n+        if queryParamSetReader is string[] {\n+            paramReader = arrayCaster(queryParamSetReader, \"{{fieldType}}\");\n+            if paramReader is {{fieldType}}[] {\n+                {{parentName}}.{{fieldName}} = paramReader;\n+            } else {\n+                sendResponse(caller, paramReader);\n+                return;\n+            }\n+        }{{else}}paramReader = castFunction(req.getQueryParamValue(\"{{queryAccessName}}{{fieldName}}\"), \"{{fieldType}}\");\n+        if paramReader is {{fieldType}} {\n+            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = paramReader;\n+        } else {\n+            sendResponse(caller, paramReader);\n+            return;\n+        }{{/if}}\n+        {{/equals}}{{#equals paramSource \"body\"}}{{fieldType}} | error {{fieldName}} = {{fieldType}}.constructFrom(requestBody);\n+        if {{fieldName}} is {{fieldType}} {\n+            {{#if ../primitiveInput}}new{{../inputType}}{{else}}{{parentName}}.{{fieldName}}{{/if}} = {{fieldName}};\n+        } else {\n+            sendResponse(caller, {{fieldName}});\n+            return;\n+        }\n+        {{/equals}}{{#equals paramSource \"message\"}}{{parentName}}.{{fieldName}} = {{fieldName}};\n+        {{/equals}}{{/paramSet}}{{/not_equal}}var response = {{service}}BlockingEp ->{{methodName}}(new{{inputType}});{{/isNotNull}}{{#isNull inputType}}var response = {{service}}BlockingEp ->{{methodName}}();{{/isNull}}\n+        sendResponse(caller, response);\n+        return;\n+    }{{/not_equal}}", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MTczNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392781734", "bodyText": "I added the blank line at the end", "author": "daksithj", "createdAt": "2020-03-16T04:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3NjgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3ODYxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391478614", "bodyText": "Remove comments.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T08:59:16Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/grpc/tool/StubGeneratorTestCase.java", "diffHunk": "@@ -344,6 +351,105 @@ public void testOneofFieldRecordGeneration() throws IllegalAccessException, Clas\n                 \"Expected imports not found in compile results.\");\n     }\n \n+    @Test(description = \"Test gateway proxy with only path and query parameters\")\n+    public void testHelloWorldGateway() throws IllegalAccessException, ClassNotFoundException,\n+            InstantiationException {\n+        CompileResult compileResult = getProxyCompileResult(\"helloWorldGateway.proto\",\n+                \"helloWorldGateway\");\n+        assertEquals(compileResult.getDiagnostics().length, 0);\n+        assertEquals(((BLangPackage) compileResult.getAST()).getCompilationUnits().size(), 4,\n+                \"Expected compilation units not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).typeDefinitions.size(), 8,\n+                \"Expected type definitions not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).functions.size(), 21,\n+                \"Expected functions not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).globalVars.size(), 4,\n+                \"Expected global variables not found in compile results.\");\n+        assertEquals(((BLangPackage) compileResult.getAST()).imports.size(), 5,\n+                \"Expected imports not found in compile results.\");\n+        validateAttachedResources(compileResult, 2);\n+//        Stream<Path> walk = Files.walk(Paths.get(\"src\", \"test\", \"resources\", \"grpc\", \"src\", \"proxyservices\"));\n+//        walk.forEach(file -> {\n+//            BalFileGenerationUtils.delete(file.toFile());\n+//        });", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MTg5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392781895", "bodyText": "I removed the comments", "author": "daksithj", "createdAt": "2020-03-16T04:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3ODYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTAwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:00:04Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MjAzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392782037", "bodyText": "I made the change to the file and the other test cases I added as well", "author": "daksithj", "createdAt": "2020-03-16T04:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTMxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479316", "bodyText": "Please check the indentations and formatting.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:00:41Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGateway.proto", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(HelloRequest) returns (HelloResponse) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/{number}/\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(ByeRequest) returns (ByeResponse) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v1/\" \n+          \t\t};\n+\t\t}", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4NTUxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392785518", "bodyText": "I changed the formatting in the integration test proto files. Please let me know if the formatting is fine or requires further changes", "author": "daksithj", "createdAt": "2020-03-16T05:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTQ2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:00:57Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithBody.proto", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTU2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479569", "bodyText": "Please check the indentations and formatting.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:01:09Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithBody.proto", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(HelloRequest) returns (HelloResponse) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/{number}/\"\n+\t\t\t  body: \"text\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(ByeRequest) returns (ByeResponse) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v1/\" \n+\t\t\t  body: \"*\"\n+          \t\t};\n+\t\t}", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTc4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479782", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:01:35Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithPrimitiveInput.proto", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTg2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479864", "bodyText": "Please check the indentations and formatting.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:01:46Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithPrimitiveInput.proto", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/protobuf/wrappers.proto\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(google.protobuf.StringValue) returns (google.protobuf.StringValue) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/\"\n+\t\t\t  body: \"value\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(google.protobuf.Int64Value) returns (google.protobuf.StringValue) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v1/{value}/\" \n+          \t\t};\n+\t\t}", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3OTk2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391479968", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:02:01Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithRepeatedField.proto", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NDM4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391484385", "bodyText": "Please check the indentations and formatting.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:10:45Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithRepeatedField.proto", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+syntax = \"proto3\";\n+import \"google/api/annotations.proto\";\n+service helloWorldGateway {\n+\t\trpc hello(HelloRequest) returns (HelloResponse) {\n+\t\toption (google.api.http) = \n+        \t\t{ post: \"/v1/\"\n+          \t\t}; \n+\t\t}\n+\t\trpc bye(ByeRequest) returns (ByeResponse) {\n+\t\toption (google.api.http) = \n+\t\t\t{ get: \"/v2/\"\n+\t\t\t  body: \"request\" \n+          \t\t};\n+\t\t}", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NDg2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r391484864", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "author": "BuddhiWathsala", "createdAt": "2020-03-12T09:11:30Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/tool/helloWorldGatewayWithoutPath.proto", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "ba7396a37780a1a67e63b96c277e10627073132d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc4MDI2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r392780262", "bodyText": "i made the relevant change", "author": "daksithj", "createdAt": "2020-03-16T04:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4NDg2NA=="}], "type": "inlineReview"}, {"oid": "cd1b80f0aa2ad57846a5d115e1995ce73ab0e223", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd1b80f0aa2ad57846a5d115e1995ce73ab0e223", "message": "Pull from the master branch to update", "committedDate": "2020-03-16T04:29:43Z", "type": "commit"}, {"oid": "b99d1426aa440d1c99b92c8eb93d48bdcbc893e0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b99d1426aa440d1c99b92c8eb93d48bdcbc893e0", "message": "Made some changes according to the review on the Pull request", "committedDate": "2020-03-16T07:04:45Z", "type": "commit"}, {"oid": "5dc5e9f70b0f2e91b335eeffe098c9ab7197e0c4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5dc5e9f70b0f2e91b335eeffe098c9ab7197e0c4", "message": "Add gateway proxy generation to gRPC - Made some further changes based on the review", "committedDate": "2020-03-16T07:09:48Z", "type": "commit"}, {"oid": "9cafcb6f96b561268fbfe3fad0dd34a630daae55", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9cafcb6f96b561268fbfe3fad0dd34a630daae55", "message": "Add gateway proxy generation to gRPC - Updated the VSCode file changes", "committedDate": "2020-03-16T07:13:08Z", "type": "commit"}, {"oid": "3cf171f7c6c55ffbac3066de8383d17df7ab99a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cf171f7c6c55ffbac3066de8383d17df7ab99a1", "message": "Add gateway proxy generation to gRPC - Changed the formatting in the testing suite", "committedDate": "2020-03-16T08:53:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMDU4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r393430580", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /**PROTOBUF\n          \n          \n            \n            /**", "author": "daneshk", "createdAt": "2020-03-17T03:50:01Z", "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/BalGenerationConstants.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n import java.io.File;\n \n-/**\n+/**PROTOBUF", "originalCommit": "3cf171f7c6c55ffbac3066de8383d17df7ab99a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca", "message": "Add gateway proxy generation to gRPC - Changed a javadoc comment", "committedDate": "2020-03-17T05:31:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NzcxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396897713", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    createTempDirectory(protobufHome);", "author": "daneshk", "createdAt": "2020-03-24T04:34:45Z", "path": "misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java", "diffHunk": "@@ -218,6 +219,9 @@ private File createTempDirectory() {\n         createTempDirectory(protobufHome);\n         File compilerHome = new File(protobufHome, TEMP_COMPILER_DIRECTORY);\n         createTempDirectory(compilerHome);\n+        File apiHome = new File(googleHome, TEMP_API_DIRECTORY);\n+        createTempDirectory(protobufHome);", "originalCommit": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5ODAzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396898034", "bodyText": "In line no: 219, we are creating the protobuf directory", "author": "daneshk", "createdAt": "2020-03-24T04:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NzcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTEwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625103", "bodyText": "Removed the line", "author": "daksithj", "createdAt": "2020-03-25T06:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NzcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMTEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396911125", "bodyText": "Instead of passing another parameter to this method. Shall we add a new setter method in Method.Builder class like setMethodDescriptor.", "author": "daneshk", "createdAt": "2020-03-24T05:34:47Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/Method.java", "diffHunk": "@@ -32,20 +49,31 @@\n     private String methodName;\n     private String methodId;\n     private String inputType;\n+    private boolean primitiveInput;\n     private String outputType;\n     private MethodDescriptor.MethodType methodType;\n+    private String httpMethod;\n+    private String httpPath;\n+    private String httpBody;\n+    private List<Param> paramSet;\n \n-    private Method(String methodName, String methodId, String inputType, String outputType, MethodDescriptor\n-            .MethodType methodType) {\n+    private Method(String methodName, String methodId, String inputType, boolean primitiveInput, String outputType,\n+                   MethodDescriptor.MethodType methodType, String httpMethod, String httpPath, String httpBody,\n+                   List<Param> paramSet) {\n         this.methodName = methodName;\n         this.methodType = methodType;\n         this.methodId = methodId;\n         this.inputType = inputType;\n+        this.primitiveInput = primitiveInput;\n         this.outputType = outputType;\n+        this.httpMethod = httpMethod;\n+        this.httpPath = httpPath;\n+        this.httpBody = httpBody;\n+        this.paramSet = paramSet;\n     }\n \n-    public static Method.Builder newBuilder(String methodId) {\n-        return new Method.Builder(methodId);\n+    public static Method.Builder newBuilder(String methodId, Map<String, Message> messageMap) {\n+        return new Method.Builder(methodId, messageMap);", "originalCommit": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625215", "bodyText": "Added a setter method, and removed the additional parameter", "author": "daksithj", "createdAt": "2020-03-25T06:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMTEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMzMzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396913332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                stubFileObject.setEnumList(enumList);\n          \n          \n            \n                                stubFileObject.setDescriptors(descriptors);\n          \n          \n            \n                                if (!stubRootDescriptor.isEmpty()) {\n          \n          \n            \n                                    stubFileObject.setRootDescriptor(stubRootDescriptor);\n          \n          \n            \n                                }\n          \n      \n    \n    \n  \n\nThis is already handled in line number 247", "author": "daneshk", "createdAt": "2020-03-24T05:43:21Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/BallerinaFileBuilder.java", "diffHunk": "@@ -222,12 +230,20 @@ private void computeSourceContent(byte[] descriptor, String mode) throws CodeBui\n                     writeOutputFile(new ClientFile(serviceDescriptor.getName(), isUnaryContains),\n                             DEFAULT_SAMPLE_DIR,\n                             SAMPLE_CLIENT_TEMPLATE_NAME, clientFilePath);\n-\n+                } else if (GRPC_PROXY.equals(mode)) {\n+                    stubFileObject.setEnumList(enumList);\n+                    stubFileObject.setDescriptors(descriptors);\n+                    if (!stubRootDescriptor.isEmpty()) {\n+                        stubFileObject.setRootDescriptor(stubRootDescriptor);\n+                    }", "originalCommit": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxODE1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r396918158", "bodyText": "Shall we keep the method name as setMessageList here?\nSince we are setting a message list, I feel the previous name more suits.", "author": "daneshk", "createdAt": "2020-03-24T06:01:33Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/builder/components/AbstractStub.java", "diffHunk": "@@ -85,8 +82,12 @@ public void setDescriptors(Set<Descriptor> descriptors) {\n         return descriptors;\n     }\n \n-    public void setMessageList(List<Message> messageList) {\n-        this.messageList = messageList;\n+    public void setMessageMap(List<Message> messageList) {", "originalCommit": "f35bbc2b481eafe7ad57d0446cdc2f65dfa143ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNTQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21680#discussion_r397625411", "bodyText": "Kept it as setMessageMap, but passed a map instead of a list as the parameter", "author": "daksithj", "createdAt": "2020-03-25T06:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxODE1OA=="}], "type": "inlineReview"}, {"oid": "eac8977dc505b7b3b621f4a0c4319e5daad8b93b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eac8977dc505b7b3b621f4a0c4319e5daad8b93b", "message": "Add gateway proxy generation to gRPC - resolved merge conflict", "committedDate": "2020-03-25T04:57:47Z", "type": "commit"}, {"oid": "91ed2b58f2b931b0ccb450f635eb0e37d6b40631", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91ed2b58f2b931b0ccb450f635eb0e37d6b40631", "message": "Add gateway proxy generation to gRPC - made some changes according to review", "committedDate": "2020-03-25T06:04:25Z", "type": "commit"}, {"oid": "2216a3a9728ada44e78bd8cb565c29d42bc88b82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2216a3a9728ada44e78bd8cb565c29d42bc88b82", "message": "Add gateway proxy generation to gRPC - made some changes according to review", "committedDate": "2020-03-25T07:01:13Z", "type": "commit"}]}