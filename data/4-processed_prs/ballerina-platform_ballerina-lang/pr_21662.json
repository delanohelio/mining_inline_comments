{"pr_number": 21662, "pr_title": "Add Avro support for Ballerina Kafka", "pr_createdAt": "2020-03-11T11:02:49Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662", "timeline": [{"oid": "651b52050dbfed0372f57b03178440b8a0fad859", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/651b52050dbfed0372f57b03178440b8a0fad859", "message": "Make optional fields optional instead of union-typing them", "committedDate": "2020-03-05T14:01:27Z", "type": "commit"}, {"oid": "0fdfd76aa6010f439ae1e077eedbf787a4c881cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fdfd76aa6010f439ae1e077eedbf787a4c881cf", "message": "Bump kafka module version to 2", "committedDate": "2020-03-05T14:01:46Z", "type": "commit"}, {"oid": "82aa748330037311526986a9b982b377b2099a5d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/82aa748330037311526986a9b982b377b2099a5d", "message": "Rename ConsumerConfig to ConsumerConfiguration and producerConfig to ProducerConfiguration", "committedDate": "2020-03-05T15:46:24Z", "type": "commit"}, {"oid": "0e9f3f4b4cffe83e300cb0f521fb848552a06ce8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e9f3f4b4cffe83e300cb0f521fb848552a06ce8", "message": "Update examples and integration tests to reflect record name changes", "committedDate": "2020-03-05T15:51:16Z", "type": "commit"}, {"oid": "cac7bfe4f80791332c224f1b97ca966d5e58d2d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cac7bfe4f80791332c224f1b97ca966d5e58d2d2", "message": "Move constant definitions to new file", "committedDate": "2020-03-05T16:17:35Z", "type": "commit"}, {"oid": "815d7953399641d0c36502e14b954c89079fe6c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/815d7953399641d0c36502e14b954c89079fe6c6", "message": "Change data type from any to anydata", "committedDate": "2020-03-10T04:31:35Z", "type": "commit"}, {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "message": "Add avro support for Kafka value serialization / deserialization", "committedDate": "2020-03-11T10:43:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDg3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390950876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n          \n          \n            \n                # + return - An `error` if encounters an error while starting the server, returns nil otherwise.", "author": "daneshk", "createdAt": "2020-03-11T12:57:47Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.", "originalCommit": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTM2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390951368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n          \n          \n            \n                # + return - An `error` if encounters an error while attaching the service, returns nil otherwise.", "author": "daneshk", "createdAt": "2020-03-11T12:58:44Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return start(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __gracefulStop() returns error? {\n-        return ();\n+        return stop(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __immediateStop() returns error? {\n         return stop(self);\n     }\n \n+    # Gets called every time a service attaches itself to this listener.\n+    #\n+    # + s - The type of the service to be registered.\n+    # + name - Name of the service.\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.", "originalCommit": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTU4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390951589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - error if occurred during detaching of a service or `nil`\n          \n          \n            \n                # + return - An `error` if an error occurred during detaching a service or `nil`", "author": "daneshk", "createdAt": "2020-03-11T12:59:07Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return start(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __gracefulStop() returns error? {\n-        return ();\n+        return stop(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __immediateStop() returns error? {\n         return stop(self);\n     }\n \n+    # Gets called every time a service attaches itself to this listener.\n+    #\n+    # + s - The type of the service to be registered.\n+    # + name - Name of the service.\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n     public function __attach(service s, string? name = ()) returns error? {\n         return register(self, s, name);\n     }\n \n+    # Detaches a consumer service from the listener.\n+    #\n+    # + s - The service to be detached\n+    # + return - error if occurred during detaching of a service or `nil`", "originalCommit": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzA3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390953072", "bodyText": "Is bootstrapServers field required now?", "author": "daneshk", "createdAt": "2020-03-11T13:01:57Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -56,86 +58,63 @@ import ballerinax/java;\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer.\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled.\n # + secureSocket - Configurations related to SSL/TLS.\n-public type ProducerConfig record {|\n-    string? bootstrapServers = ();\n-    Producer_Acks acks = ACKS_SINGLE;\n-    string? compressionType = ();\n-    string? clientId = ();\n-    string? metricsRecordingLevel = ();\n-    string? metricReporterClasses = ();\n-    string? partitionerClass = ();\n-    string? interceptorClasses = ();\n-    string? transactionalId = ();\n+public type ProducerConfiguration record {|\n+    string bootstrapServers;", "originalCommit": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2MTk0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r391061941", "bodyText": "Yes. Without that, user cannot create a producer.", "author": "ThisaruGuruge", "createdAt": "2020-03-11T15:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzA3Mg=="}], "type": "inlineReview"}, {"oid": "5752eeafdda7ca5e52a96f3b04fc8a9d12dbb4e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5752eeafdda7ca5e52a96f3b04fc8a9d12dbb4e1", "message": "Apply suggestions from code review\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-03-11T15:37:38Z", "type": "commit"}]}