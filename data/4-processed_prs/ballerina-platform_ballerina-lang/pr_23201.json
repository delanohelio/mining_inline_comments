{"pr_number": 23201, "pr_title": "Adds Java interop array utils into the java.arrays module of stdlib", "pr_createdAt": "2020-05-13T08:25:43Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201", "timeline": [{"oid": "7a02f3931200a03af40335f60d2b649dcde282a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a02f3931200a03af40335f60d2b649dcde282a5", "message": "Add array util functions", "committedDate": "2020-05-13T08:23:25Z", "type": "commit"}, {"oid": "750792ece08c29b9b5a945b722b6f417b421c445", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/750792ece08c29b9b5a945b722b6f417b421c445", "message": "Add JObject and Bindings annotation", "committedDate": "2020-05-13T08:23:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyNjM5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201#discussion_r424326390", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Ballerina array `any[]|error` for the provided handle\n          \n          \n            \n            # + return - Ballerina `any[]|error` array for the provided handle", "author": "praneesha", "createdAt": "2020-05-13T10:11:49Z", "path": "stdlib/java.arrays/src/main/ballerina/src/java.arrays/java_array_utils.bal", "diffHunk": "@@ -73,3 +73,222 @@ public function set(public handle array, public int index, public handle element\n public function getLength(public handle array) returns int = @java:Method {\n     class: \"java.lang.reflect.Array\"\n } external;\n+\n+# Returns a Ballerina array for a handle that holds a Java array.\n+# ```ballerina\n+# int[] array = <int[]> check jarrays:fromHandle(arrayHandle, \"int\");\n+# ```\n+#\n+# + array - The `handle`, which refers to the Java array\n+# + jType - The `string` parameter provided to specify the Java array element type\n+# + bType - The optional `string` parameter provided to specify the Ballerina array element type\n+# + return - Ballerina array `any[]|error` for the provided handle", "originalCommit": "750792ece08c29b9b5a945b722b6f417b421c445", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyNzQyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201#discussion_r424327420", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + array - Ballerina array which is to be converted to a handle reference\n          \n          \n            \n            # + array - Ballerina array, which is to be converted to a handle reference", "author": "praneesha", "createdAt": "2020-05-13T10:13:48Z", "path": "stdlib/java.arrays/src/main/ballerina/src/java.arrays/java_array_utils.bal", "diffHunk": "@@ -73,3 +73,222 @@ public function set(public handle array, public int index, public handle element\n public function getLength(public handle array) returns int = @java:Method {\n     class: \"java.lang.reflect.Array\"\n } external;\n+\n+# Returns a Ballerina array for a handle that holds a Java array.\n+# ```ballerina\n+# int[] array = <int[]> check jarrays:fromHandle(arrayHandle, \"int\");\n+# ```\n+#\n+# + array - The `handle`, which refers to the Java array\n+# + jType - The `string` parameter provided to specify the Java array element type\n+# + bType - The optional `string` parameter provided to specify the Ballerina array element type\n+# + return - Ballerina array `any[]|error` for the provided handle\n+public function fromHandle(handle array, string jType, string bType = \"default\") returns any[]|error {\n+    int count = getLength(array);\n+    any[] returnArray = [];\n+    if (!java:isNull(array)) {\n+        if (jType == \"string\") {\n+            string[] returnStringArray = [];\n+            foreach int i in 0 ... count-1 {\n+                string? element = java:toString(<handle>get(array, i));\n+                if (element is string) {\n+                    returnStringArray[i] = element;\n+                }\n+            }\n+            return returnStringArray;\n+        } else if (jType == \"handle\") {\n+            handle[] returnHandleArray = [];\n+            foreach int i in 0 ... count-1 {\n+                returnHandleArray[i] = get(array, i);\n+            }\n+            return returnHandleArray;\n+        } else if (jType == \"boolean\") {\n+            boolean[] returnBooleanArray = [];\n+            foreach int i in 0 ... count-1 {\n+                boolean element = getBBooleanFromJBoolean(get(array, i));\n+                returnBooleanArray[i] = element;\n+            }\n+            return returnBooleanArray;\n+        } else if (jType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJFloat(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"double\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJDouble(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"int\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJInt(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"int\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJInt(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"byte\" && (bType == \"default\" || bType == \"byte\")) {\n+            byte[] returnByteArray = [];\n+            foreach int i in 0 ... count-1 {\n+                byte element = getBByteFromJByte(get(array, i));\n+                returnByteArray[i] = element;\n+            }\n+            return returnByteArray;\n+        } else if (jType == \"byte\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJByte(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"byte\" && bType == \"int\") {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJByte(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"short\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJShort(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"short\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJShort(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"long\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJLong(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"long\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJLong(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"char\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJChar(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"char\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJChar(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else {\n+            return error(\"{ballerina/java.arrays} Handle to array conversion cannot be applied on the provided types\");\n+        }\n+    }\n+    return returnArray;\n+}\n+\n+# Returns a handle value representation for a Ballerina array.\n+# ```ballerina\n+# handle handleValue = check java.arrays:toHandle(array, \"char\");\n+# ```\n+#\n+# + array - Ballerina array which is to be converted to a handle reference", "originalCommit": "750792ece08c29b9b5a945b722b6f417b421c445", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "11f763a8bd59500ec25bf5ad81051667985fa9d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11f763a8bd59500ec25bf5ad81051667985fa9d4", "message": "Fix doc comment\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-05-13T10:17:03Z", "type": "commit"}, {"oid": "3013de017cee6498a9ba8877c025f98995319378", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3013de017cee6498a9ba8877c025f98995319378", "message": "Fix doc comment\n\nCo-authored-by: praneesha <praneesha@wso2.com>", "committedDate": "2020-05-13T10:17:23Z", "type": "commit"}]}