{"pr_number": 25720, "pr_title": "Add standard library release pipeline", "pr_createdAt": "2020-09-10T13:03:46Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MzQ1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486743458", "bodyText": "Shouldn't we return/panic if it's an error?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                return;\n          \n          \n            \n                }", "author": "chamil321", "createdAt": "2020-09-11T02:54:11Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }", "originalCommit": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486745520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();\n          \n          \n            \n                    string errInfo = \"Module: \" + moduleName + \" Status Code: \" + statusCode.toString();", "author": "chamil321", "createdAt": "2020-09-11T03:01:48Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n+        string errMessage = \"Error response received from the module: \";\n+        string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();", "originalCommit": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NjA5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486746092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                request.addHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);\n          \n          \n            \n                request.setHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);", "author": "chamil321", "createdAt": "2020-09-11T03:04:14Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n+        string errMessage = \"Error response received from the module: \";\n+        string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();\n+        log:printInfo(errInfo);\n+        log:printInfo(response.getJsonPayload().toString());\n+        // TODO: Shall we panic here?\n+        // panic error(errMessage + moduleName + \" workflow. Code: \" + statusCode.toString());\n+    }\n+}\n+\n+function createRequest(string accessTokenHeaderValue) returns http:Request {\n+    http:Request request = new;\n+    request.addHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);", "originalCommit": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NjE2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486746164", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                request.addHeader(AUTH_HEADER_KEY, accessTokenHeaderValue);\n          \n          \n            \n                request.setHeader(AUTH_HEADER_KEY, accessTokenHeaderValue);", "author": "chamil321", "createdAt": "2020-09-11T03:04:36Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n+        string errMessage = \"Error response received from the module: \";\n+        string errInfo = \"Modlue: \" + moduleName + \" Status Code: \" + statusCode.toString();\n+        log:printInfo(errInfo);\n+        log:printInfo(response.getJsonPayload().toString());\n+        // TODO: Shall we panic here?\n+        // panic error(errMessage + moduleName + \" workflow. Code: \" + statusCode.toString());\n+    }\n+}\n+\n+function createRequest(string accessTokenHeaderValue) returns http:Request {\n+    http:Request request = new;\n+    request.addHeader(ACCEPT_HEADER_KEY, ACCEPT_HEADER_VALUE);\n+    request.addHeader(AUTH_HEADER_KEY, accessTokenHeaderValue);", "originalCommit": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODc5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486748796", "bodyText": "Shall we move this request creation into another function and call it whenever we want the request? I see that the request is being used at #L55 and #L80.\nAlso, we can use separate requests for each call rather than reusing the same request if you do so.", "author": "chamil321", "createdAt": "2020-09-11T03:15:10Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);", "originalCommit": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTM4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486749387", "bodyText": "Shall we move these two variables to the global scope? So we can avoid them being passed as function params", "author": "chamil321", "createdAt": "2020-09-11T03:17:39Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);", "originalCommit": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MTczMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r486751732", "bodyText": "Check this logic\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {\n          \n          \n            \n                if (statusCode != 200 && statusCode != 201 && statusCode != 202 && statusCode != 204) {", "author": "chamil321", "createdAt": "2020-09-11T03:27:18Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,125 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+public function main() {\n+    http:Client httpClient = new (API_PATH);\n+    string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+    string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+    http:Request request = createRequest(accessTokenHeaderValue);\n+\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        log:printError(\"Error occurred whie reading the file\", result);\n+    }\n+    json jsonFile = <json>result;\n+    json[] modules = <json[]>jsonFile.modules;\n+    int level = -1;\n+    foreach json module in modules {\n+        int nextLevel = <int>module.level;\n+        if (nextLevel > level && nextLevel != 0) {\n+            runtime:sleep(WAIT_TIME_TO_BUILD);\n+            level = nextLevel;\n+        }\n+        processModule(<map<json>>module, httpClient, request);\n+    }\n+}\n+\n+function processModule(map<json> module, http:Client httpClient, http:Request request) {\n+    boolean ballerinaRelease = <boolean>module[BALLERINA_RELEASE];\n+    boolean githubRelease = <boolean>module[GITHUB_RELEASE];\n+    if (githubRelease) {\n+        releaseToGithub(module, httpClient, request);\n+    } else if (ballerinaRelease) {\n+        releaseToBallerina(module, httpClient, request);\n+    }\n+}\n+\n+function releaseToGithub(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    string branch = module.branch.toString();\n+    string notes = module.notes.toString();\n+\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Github. Version: \" + 'version);\n+\n+    // TODO: Adding draft and prerelease options. These aren't necessary for now.\n+    json payload = {\n+        tag_name: \"v\" + 'version,\n+        target_commitish: branch,\n+        name: 'version,\n+        notes: notes\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/releases\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function releaseToBallerina(map<json> module, http:Client httpClient, http:Request request) {\n+    string moduleName = module.name.toString();\n+    string 'version = module.'version.toString();\n+    log:printInfo(\"Releasing \" + moduleName + \" to the Ballerina Central Version: \" + 'version);\n+\n+    // TODO: Add branch as a payload parameter, then checkout the needed branch at the destination.\n+    json payload = {\n+        event_type: EVENT_TYPE,\n+        client_payload: {\n+            'version: 'version\n+        }\n+    };\n+    request.setJsonPayload(payload);\n+\n+    string modulePath = \"/\" + ORG_NAME + \"/\" + moduleName + \"/dispatches\";\n+    var result = httpClient->post(modulePath, request);\n+\n+    if (result is error) {\n+        log:printError(\"Error occurred while retrieving the reponse for module: \" + moduleName, result);\n+        panic result;\n+    }\n+    http:Response response = <http:Response>result;\n+    validateResponse(response, moduleName);\n+}\n+\n+function validateResponse(http:Response response, string moduleName) {\n+    int statusCode = response.statusCode;\n+    if (statusCode != 200 || statusCode != 201 || statusCode != 202 || statusCode != 204) {", "originalCommit": "c281766b448cee8c447b5cf2f5486cf7a55d4ec1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU0NjA1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25720#discussion_r487546051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logAndPanicError(\"Error occurred whie reading the file\", result);\n          \n          \n            \n                    logAndPanicError(\"Error occurred while reading the config file\", result);", "author": "chamil321", "createdAt": "2020-09-13T15:57:18Z", "path": "stdlib/release/src/release/trigger_workflows.bal", "diffHunk": "@@ -0,0 +1,188 @@\n+import ballerina/config;\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/runtime;\n+\n+http:Client httpClient = new (API_PATH);\n+string accessToken = config:getAsString(ACCESS_TOKEN_ENV);\n+string accessTokenHeaderValue = \"Bearer \" + accessToken;\n+\n+public function main() {\n+    json[] modulesJson = getModuleJsonArray();\n+    Module[] modules = getModuleArray(modulesJson);\n+    handleRelease(modules);\n+}\n+\n+function getModuleJsonArray() returns json[] {\n+    var result = readFileAndGetJson(CONFIG_FILE_PATH);\n+    if (result is error) {\n+        logAndPanicError(\"Error occurred whie reading the file\", result);", "originalCommit": "55a323aceb1f60da19ae1f10d335071b71b7c1a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bf20881cab26a16d452930a41765790c363d7fbf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf20881cab26a16d452930a41765790c363d7fbf", "message": "Add stdlib release pipeline", "committedDate": "2020-09-18T10:21:04Z", "type": "commit"}]}