{"pr_number": 22818, "pr_title": "Support module-var-decl inside module init", "pr_createdAt": "2020-04-21T14:36:22Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818", "timeline": [{"oid": "114baf5353b335ffe3b73a96aea73ca8b3ae7078", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/114baf5353b335ffe3b73a96aea73ca8b3ae7078", "message": "Fix failure unit tests", "committedDate": "2020-04-23T17:41:30Z", "type": "forcePushed"}, {"oid": "c124d2aca1839631a99ff5ad2c04d9de38622442", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c124d2aca1839631a99ff5ad2c04d9de38622442", "message": "Add negative tests", "committedDate": "2020-04-24T07:12:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNDY1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415424656", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (node.getKind() == NodeKind.FUNCTION &&\n          \n          \n            \n                            Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return node.getKind() == NodeKind.FUNCTION &&\n          \n          \n            \n                            Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value);", "author": "MaryamZi", "createdAt": "2020-04-26T23:17:54Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519481", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNDY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzEzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415427137", "bodyText": "Shall we replace this with a simple for-each loop?", "author": "MaryamZi", "createdAt": "2020-04-26T23:31:09Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519448", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415427215", "bodyText": "Shouldn't this be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void checkForUninitializedGlobalVar(List<BLangSimpleVariable> globalVars) {\n          \n          \n            \n                private void checkForUninitializedGlobalVars(List<BLangSimpleVariable> globalVars) {", "author": "MaryamZi", "createdAt": "2020-04-26T23:31:29Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {\n+        this.currDependentSymbol.push(funcNode.symbol);\n+        SymbolEnv funcEnv = SymbolEnv.createFunctionEnv(funcNode, funcNode.symbol.scope, env);\n+        analyzeNode(funcNode.body, funcEnv);\n+        this.currDependentSymbol.pop();\n+    }\n+\n+    private void checkForUninitializedGlobalVar(List<BLangSimpleVariable> globalVars) {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519441", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyNzIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyOTgxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415429814", "bodyText": "Shall we rename the existing UNINITIALIZED_VARIABLE (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java#L269) error to something like USAGE_OF_UNINITIALIZED_VARIABLE and call this UNINITIALIZED_VARIABLE instead?", "author": "MaryamZi", "createdAt": "2020-04-26T23:45:12Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -267,6 +267,7 @@\n     INVALID_PATTERN_CLAUSES_IN_MATCH_STMT(\"invalid.pattern.clauses.in.match.stmt\"),\n     STATIC_MATCH_ONLY_SUPPORTS_ANYDATA(\"static.value.match.only.supports.anydata\"),\n     UNINITIALIZED_VARIABLE(\"uninitialized.variable\"),\n+    UNINITIALIZED_MODULE_VARIABLE(\"uninitialized.module.variable\"),", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519429", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQyOTgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTE3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415431175", "bodyText": "Shouldn't this be done irrespective of whether a user-specified module init exists?\nThe following two scenarios would produce two different sets of errors atm?\nCase I\nint i;\n\nfunction __init() {\n\n}\n\npublic function main() {\n   int j = i;\n}\nCase II\nint i;\n\npublic function main() {\n   int j = i;\n}", "author": "MaryamZi", "createdAt": "2020-04-26T23:52:10Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519402", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTg3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415441877", "bodyText": "Incorrect version.", "author": "MaryamZi", "createdAt": "2020-04-27T00:45:16Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTM5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519394", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTk3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415441972", "bodyText": "Missing a new line.", "author": "MaryamZi", "createdAt": "2020-04-27T00:45:38Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+int i;\n+string s;\n+int a;\n+int b;\n+error er;\n+\n+const ERROR_REASON = \"Error Reason\";\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function __init() {\n+    i = 10;\n+    s = \"Test string\";\n+    int x = 2;\n+    a = x + 10;\n+    b = 31 + foo();\n+    er = error(ERROR_REASON, message = \"error message\");\n+}\n+\n+function foo() returns int {\n+    return 1;\n+}\n+\n+function testModuleVarDeclaration() {\n+    if (i == 10 && s == \"Test string\" && a == 12 && b == 32) {\n+        return;\n+    }\n+\n+    string? msg = er.detail()?.message;\n+    if (msg is string && <string> msg == \"error message\") {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON, message = \"expected 'true', found 'false'\");\n+}", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTM4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519382", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MTk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjI2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415442267", "bodyText": "Missing the licence header.\nWe also usually use _ for bal file names.\nPlease fix in the other bal file too.", "author": "MaryamZi", "createdAt": "2020-04-27T00:46:51Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/vardeclr/module-var-declare.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+int i;", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTM1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519353", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415442339", "bodyText": "Do we need a new class anyway? Can't we have these in GlobalVarNegativeTest?", "author": "MaryamZi", "createdAt": "2020-04-27T00:47:18Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/vardeclr/ModuleVarDeclareNegative.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.statements.vardeclr;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Class to test module variable declaration negative.\n+ *\n+ * @since 1.2.2\n+ */\n+public class ModuleVarDeclareNegative {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MzAwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r422663005", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-10T15:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0MjMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NTUzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415445533", "bodyText": "Why do we do a separate analysis for the module init?\nAnyway, we're missing annotation validations from visit(BLangFunction funcNode).\nFor example,\nannotation map<int> Foo on function;\n\nint i; // uninitialized variable 'i'\n\n@Foo {\n    i // NO error, expected `variable 'i' is not initialized`\n}\nfunction __init() {\n}\n\n@Foo {\n    i // variable 'i' is not initialized\n}\npublic function main() {\n   int j = i; // variable 'i' is not initialized\n}", "author": "MaryamZi", "createdAt": "2020-04-27T01:01:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        sortedListOfNodes.forEach(topLevelNode -> {\n+            if (isModuleInitFunction((BLangNode) topLevelNode)) {\n+                analyzeModuleInitFunc((BLangFunction) topLevelNode);\n+                checkForUninitializedGlobalVar(pkgNode.globalVars);\n+            } else {\n+                analyzeNode((BLangNode) topLevelNode, env);\n+            }\n+        });\n         pkgNode.getTestablePkgs().forEach(testablePackage -> visit((BLangPackage) testablePackage));\n         this.globalVariableRefAnalyzer.analyzeAndReOrder(pkgNode, this.globalNodeDependsOn);\n         this.globalVariableRefAnalyzer.populateFunctionDependencies(this.functionToDependency);\n         checkUnusedImports(pkgNode.imports);\n         pkgNode.completedPhases.add(CompilerPhase.DATAFLOW_ANALYZE);\n     }\n \n+    private boolean isModuleInitFunction(BLangNode node) {\n+        if (node.getKind() == NodeKind.FUNCTION &&\n+                Names.USER_DEFINED_INIT_SUFFIX.value.equals(((BLangFunction) node).name.value)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private void analyzeModuleInitFunc(BLangFunction funcNode) {", "originalCommit": "c124d2aca1839631a99ff5ad2c04d9de38622442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTMyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r415519327", "bodyText": "In current implementation Analyse function call the analyzeBranch method and it does not modify uninitializedVars. Because module-level variables cannot be initialized in function (same as __init() in the object).  But in this scenario, if we see some variable is initialized we need to update that map. Annotations are validated.", "author": "KavinduZoysa", "createdAt": "2020-04-27T05:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ0NTUzMw=="}], "type": "inlineReview"}, {"oid": "54dee5e12c75c7c9fb9e1d5340500d34709106a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54dee5e12c75c7c9fb9e1d5340500d34709106a1", "message": "Fix the suggestions", "committedDate": "2020-04-27T05:45:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyMTUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r416321520", "bodyText": "we need to analyze the init function before any other function.\nConsider blow\nimport ballerina/io;\n\npublic function main() {\n    io:println(\"hello\");\n    io:println(s);\n}\n\nfunction __init() {\n    s = \"hello\";\n}\nstring s;", "author": "rdhananjaya", "createdAt": "2020-04-28T04:41:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -265,14 +265,45 @@ public void visit(BLangPackage pkgNode) {\n                 sortedListOfNodes.add(topLevelNode);\n             }\n         });\n-        sortedListOfNodes.forEach(topLevelNode -> analyzeNode((BLangNode) topLevelNode, env));\n+\n+        for (TopLevelNode topLevelNode : sortedListOfNodes) {", "originalCommit": "54dee5e12c75c7c9fb9e1d5340500d34709106a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NzQ2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424377463", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-05-13T11:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMyMTUyMA=="}], "type": "inlineReview"}, {"oid": "571e2a8fee1eb20f2395cdc51953d1a2b0e18856", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/571e2a8fee1eb20f2395cdc51953d1a2b0e18856", "message": "Support module var decl inside module init", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "7aa790d77eb0f6bf114a58d357d0de0ee25ed80b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7aa790d77eb0f6bf114a58d357d0de0ee25ed80b", "message": "Add unit tests", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "71c2fcbd7817c51763923c24384f615603f4ff13", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71c2fcbd7817c51763923c24384f615603f4ff13", "message": "Fix failure unit tests", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "7801346c874c5144396a1340f807b8da2cf4c0f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7801346c874c5144396a1340f807b8da2cf4c0f1", "message": "Add negative tests", "committedDate": "2020-05-10T13:04:37Z", "type": "commit"}, {"oid": "d1c26b2aa80cebca38fee819857c761302dda278", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1c26b2aa80cebca38fee819857c761302dda278", "message": "Fix the suggestions", "committedDate": "2020-05-10T13:06:46Z", "type": "commit"}, {"oid": "e01c0bd5cd72799d5bec2ef8f1a261cfb323cc67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e01c0bd5cd72799d5bec2ef8f1a261cfb323cc67", "message": "Add more tests", "committedDate": "2020-05-10T13:06:46Z", "type": "commit"}, {"oid": "e4a164a98981a04e53c09aca5a4b62d71f738582", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4a164a98981a04e53c09aca5a4b62d71f738582", "message": "Fix the conflicts", "committedDate": "2020-05-10T13:08:06Z", "type": "commit"}, {"oid": "e4a164a98981a04e53c09aca5a4b62d71f738582", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4a164a98981a04e53c09aca5a4b62d71f738582", "message": "Fix the conflicts", "committedDate": "2020-05-10T13:08:06Z", "type": "forcePushed"}, {"oid": "8b16758f02f48605ee0e07f408209655eee92ef4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8b16758f02f48605ee0e07f408209655eee92ef4", "message": "Fix checkstyle", "committedDate": "2020-05-10T14:44:50Z", "type": "commit"}, {"oid": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "message": "Fix failure tests", "committedDate": "2020-05-10T18:03:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzNzIxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424437216", "bodyText": "This test-case is failing intermittently. Shall I disable it for now?", "author": "hasithaa", "createdAt": "2020-05-13T13:28:41Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/globalvar/GlobalVarNegativeTest.java", "diffHunk": "@@ -33,12 +33,38 @@\n     public void testGlobalVarNegatives() {\n         CompileResult resultNegative = BCompileUtil.compile(\n                 \"test-src/statements/variabledef/global_variable_negative.bal\");\n-        Assert.assertEquals(resultNegative.getErrorCount(), 6);\n+        Assert.assertEquals(resultNegative.getErrorCount(), 4);\n         BAssertUtil.validateError(resultNegative, 0, \"invalid token 'int'\", 27, 8);\n         BAssertUtil.validateError(resultNegative, 1, \"invalid token 'int'\", 29, 8);\n-        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 32);\n-        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 27);\n-        BAssertUtil.validateError(resultNegative, 4, \"mismatched input ';'. expecting '='\", 35, 46);\n-        BAssertUtil.validateError(resultNegative, 5, \"mismatched input ';'. expecting '='\", 37, 59);\n+        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 46);\n+        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 59);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef/global_variable_init_negative\" +\n+                \".bal\");\n+\n+        Assert.assertEquals(result.getErrorCount(), 8);\n+        int i = 0;\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'i'\", 17, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 's'\", 18, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'a'\", 19, 1);\n+        BAssertUtil.validateError(result, i++, \"uninitialized variable 'b'\", 20, 1);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 25, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'i' is not initialized\", 31, 5);\n+        BAssertUtil.validateError(result, i++, \"variable 'a' is not initialized\", 39, 13);\n+        BAssertUtil.validateError(result, i, \"variable 's' is not initialized\", 40, 18);\n+    }\n+\n+    @Test\n+    void testGlobalVariableInitWithInvocationNegative() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/statements/variabledef\" +", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDM1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424440352", "bodyText": "created #23211 to track this.", "author": "hasithaa", "createdAt": "2020-05-13T13:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzNzIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTc0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424605749", "bodyText": "Invalid changes. Will be fixed in the consolidated PR with d687c13.", "author": "MaryamZi", "createdAt": "2020-05-13T17:22:36Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaLexer.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Generated from BallerinaLexer.g4 by ANTLR 4.5.3\n+// Generated from /home/kavindu/WSO2-GIT/ballerina-lang/compiler/ballerina-lang/src/main/resources/grammar/BallerinaLexer.g4 by ANTLR 4.5.3", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0NzE5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424647198", "bodyText": "Can't we avoid iterating through all the nodes twice + checking for existence by doing something like\n        for (TopLevelNode node : pkgNode.topLevelNodes) {\n            if (isModuleInitFunction((BLangNode) node)) {\n                sortedListOfNodes.add(0, node);\n                continue;\n            }\n\n            sortedListOfNodes.add(node);\n        }", "author": "MaryamZi", "createdAt": "2020-05-13T18:31:03Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -268,19 +268,64 @@ public void visit(BLangPackage pkgNode) {\n \n         // Rearrange the top level nodes so that global variables come on top\n         List<TopLevelNode> sortedListOfNodes = new ArrayList<>(pkgNode.globalVars);\n-        pkgNode.topLevelNodes.forEach(topLevelNode -> {\n-            if (!sortedListOfNodes.contains(topLevelNode)) {\n-                sortedListOfNodes.add(topLevelNode);\n+        addModuleInitToSortedNodeList(pkgNode, sortedListOfNodes);\n+        addNodesToSortedNodeList(pkgNode, sortedListOfNodes);", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NzA0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424657040", "bodyText": "We can check the inverse and return early\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (env.isModuleInit) {\n          \n          \n            \n                        boolean isFirstUninitializedField = true;\n          \n          \n            \n                        StringBuilder uninitializedFields = new StringBuilder();\n          \n          \n            \n                        for (BSymbol symbol : this.uninitializedVars.keySet()) {\n          \n          \n            \n                            if (isFirstUninitializedField) {\n          \n          \n            \n                                uninitializedFields = new StringBuilder(symbol.getName().value);\n          \n          \n            \n                                isFirstUninitializedField = false;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                uninitializedFields.append(\", \").append(symbol.getName().value);\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        if (uninitializedFields.length() != 0) {\n          \n          \n            \n                            this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n          \n          \n            \n                                    uninitializedFields.toString());\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    if (!env.isModuleInit) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    boolean isFirstUninitializedField = true;\n          \n          \n            \n                    StringBuilder uninitializedFields = new StringBuilder();\n          \n          \n            \n                    for (BSymbol symbol : this.uninitializedVars.keySet()) {\n          \n          \n            \n                        if (isFirstUninitializedField) {\n          \n          \n            \n                            uninitializedFields = new StringBuilder(symbol.getName().value);\n          \n          \n            \n                            isFirstUninitializedField = false;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            uninitializedFields.append(\", \").append(symbol.getName().value);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (uninitializedFields.length() != 0) {\n          \n          \n            \n                        this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n          \n          \n            \n                                        uninitializedFields.toString());\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    return true;", "author": "MaryamZi", "createdAt": "2020-05-13T18:47:58Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -877,6 +926,27 @@ private boolean isFieldsInitializedForSelfInvocation(List<BLangExpression> argEx\n         return true;\n     }\n \n+    private boolean isGlobalVarsInitialized(DiagnosticPos pos) {\n+        if (env.isModuleInit) {\n+            boolean isFirstUninitializedField = true;\n+            StringBuilder uninitializedFields = new StringBuilder();\n+            for (BSymbol symbol : this.uninitializedVars.keySet()) {\n+                if (isFirstUninitializedField) {\n+                    uninitializedFields = new StringBuilder(symbol.getName().value);\n+                    isFirstUninitializedField = false;\n+                } else {\n+                    uninitializedFields.append(\", \").append(symbol.getName().value);\n+                }\n+            }\n+            if (uninitializedFields.length() != 0) {\n+                this.dlog.error(pos, DiagnosticCode.CONTAINS_UNINITIALIZED_VARIABLES,\n+                        uninitializedFields.toString());\n+                return false;\n+            }\n+        }\n+        return true;", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MjA3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424662079", "bodyText": "With this change, even module level final variables can be initialized in the __init() method right? Does that work? Can we add tests for the same?", "author": "MaryamZi", "createdAt": "2020-05-13T18:56:20Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/variabledef/global_variable_init_in_reverse_order.bal", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public function testReverseOrderInitialization() {\n+    if (s == \"hello\" && a == 5) {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON, message = \"expected 'true', found 'false'\");\n+}\n+\n+function __init() {\n+    s = \"hello\";\n+    int x = 2;\n+    a = x + 3;\n+}\n+\n+string s;", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MDU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22818#discussion_r424670582", "bodyText": "Why are we adding this to the SymbolEnv? IMO this doesn't belong here.\nLooking at the usage, can't we just use a boolean in the DataflowAnalyzer which we set and unset in analyzeModuleInitFunc? Like we generally do in CodeAnalyzer? \n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java\n    \n    \n         Line 252\n      in\n      6fc33a0\n    \n    \n    \n    \n\n        \n          \n           private boolean isJSONContext;", "author": "MaryamZi", "createdAt": "2020-05-13T19:11:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolEnv.java", "diffHunk": "@@ -75,6 +75,8 @@\n \n     public int relativeEnvCount;\n \n+    public boolean isModuleInit;", "originalCommit": "6fc33a04d14a5d9d6fd49bd2507e5097fad2dfe5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}