{"pr_number": 22528, "pr_title": "Refactor the socket module API doc", "pr_createdAt": "2020-04-09T03:11:08Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528", "timeline": [{"oid": "b5b408cbb65a9b5672ba50459298b10a356801f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5b408cbb65a9b5672ba50459298b10a356801f1", "message": "Refactor the API doc", "committedDate": "2020-04-08T17:58:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTI3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941271", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `client endpoint` is used to connect to and interact with a socket server. The client can only send the data to the server and client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n          \n          \n            \n            The `client endpoint` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.", "author": "praneesha", "createdAt": "2020-04-09T03:52:51Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,35 @@\n-## Module overview\n-\n This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n \n-## Samples\n+### Client endpoints\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n-```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n+There are two types of client endpoints. They are`TCP Client endpoints` and `UDP Client endpoints`.\n \n-listener socket:Listener server = new(61598);\n+#### TCP Client endpoints\n+The `client endpoint` is used to connect to and interact with a socket server. The client can only send the data to the server and client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941438", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n          \n          \n            \n            The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.", "author": "praneesha", "createdAt": "2020-04-09T03:53:30Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,35 @@\n-## Module overview\n-\n This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n \n-## Samples\n+### Client endpoints\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n-```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n+There are two types of client endpoints. They are`TCP Client endpoints` and `UDP Client endpoints`.\n \n-listener socket:Listener server = new(61598);\n+#### TCP Client endpoints\n+The `client endpoint` is used to connect to and interact with a socket server. The client can only send the data to the server and client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n+A Client endpoint can be defined by providing host and port as follows:\n \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+```ballerina\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `UDP client endpoint` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTU1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + content - The content that wish to send to the client socket\n          \n          \n            \n                # + content - The content, which will be sent to the client socket", "author": "praneesha", "createdAt": "2020-04-09T03:54:00Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -48,9 +39,10 @@ public type Client client object {\n     }\n \n     # Writes given data to the client socket.\n+    # ```ballerina int|Error writeResult = socketClient:write(payloadByte); ```\n     #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTYzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941637", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The number of bytes got written or an `Error` if encounters an error while writing\n          \n          \n            \n                # + return - The number of bytes that got written or an `Error` if encounters an error while writing\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T03:54:17Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -48,9 +39,10 @@ public type Client client object {\n     }\n \n     # Writes given data to the client socket.\n+    # ```ballerina int|Error writeResult = socketClient:write(payloadByte); ```\n     #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTY3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405941678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + length - Represents the number of bytes which should be read\n          \n          \n            \n                # + length - Represents the number of bytes, which should be read", "author": "praneesha", "createdAt": "2020-04-09T03:54:29Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MjU0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n          \n          \n            \n                # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T03:58:23Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MjY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942660", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `Error` if encounters an error while closing the connection or `nil`\n          \n          \n            \n                # + return - An `Error` if encounters an error while closing the connection or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T03:58:39Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MjcxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942710", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n          \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T03:58:47Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n     # Shutdowns the further read from socket.\n+    # ```ballerina Error? result = socketClient->shutdownRead(); ```\n     #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+    # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0Mjc3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942771", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`\n          \n          \n            \n                # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T03:58:56Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n     # Shutdowns the further read from socket.\n+    # ```ballerina Error? result = socketClient->shutdownRead(); ```\n     #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+    # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n     # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+    # ```ballerina Error? result = socketClient->shutdownWrite(); ```\n+    # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0Mjg3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405942875", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,\n          \n          \n            \n            # + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,", "author": "praneesha", "createdAt": "2020-04-09T03:59:26Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -60,41 +52,46 @@ public type Client client object {\n     # In the case of the connection being closed by the client, then return either -1 or the data\n     # that is currently available in the buffer.\n     # Number of bytes returned will be < 0 if the client closes the connection.\n+    # ```ballerina [byte[], int]|ReadTimedOutError result = socketClient->read(); ```\n     #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - Content as a byte array and the number of bytes read or an `Error` if encounters an error while reading\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - An `Error` if encounters an error while closing the connection or `nil`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n     # Shutdowns the further read from socket.\n+    # ```ballerina Error? result = socketClient->shutdownRead(); ```\n     #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+    # + return - An `Error` if encounters an error while shutdown the read from socket or `nil`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n     # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+    # ```ballerina Error? result = socketClient->shutdownWrite(); ```\n+    # + return - An `Error` if encounters an error while shutdown the write from socket or `nil`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for socket client endpoint.\n #\n-# + host - Target service URL\n-# + port - Port number of the remote service\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n-# + callbackService - The callback service for the client. Resources in this service gets called on receipt of messages from the server.\n+# + host - The target service URL\n+# + port - The port number of the remote service\n+# + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzAxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943017", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + interface - The interface for the server with to bind\n          \n          \n            \n            # + interface - The interface for the server to be bound", "author": "praneesha", "createdAt": "2020-04-09T04:00:05Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -54,8 +53,9 @@ public type Listener object {\n \n # Represents the socket server configuration.\n #\n-# + interface - the interface that server with to bind\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n+# + interface - The interface for the server with to bind", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzAzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943038", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,\n          \n          \n            \n            # + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,", "author": "praneesha", "createdAt": "2020-04-09T04:00:12Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -54,8 +53,9 @@ public type Listener object {\n \n # Represents the socket server configuration.\n #\n-# + interface - the interface that server with to bind\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n+# + interface - The interface for the server with to bind\n+# + readTimeoutInMillis - The socket read timeout value to be used in milliseconds. If this is not set,", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzExMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943110", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cause - The cause of the error; If this error occurred due to another error\n          \n          \n            \n            # + cause - The cause of the error if this error occurred due to another error", "author": "praneesha", "createdAt": "2020-04-09T04:00:29Z", "path": "stdlib/socket/src/main/ballerina/src/socket/socket_error.bal", "diffHunk": "@@ -16,8 +16,8 @@\n \n # Record type to hold the details of an error.\n #\n-# + message - Specific error message of the error.\n-# + cause - Any other error, which causes this error.\n+# + message - The specific error message for the error.\n+# + cause - The cause of the error; If this error occurred due to another error", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzE3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943178", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + content - The content that wish to send to the client socket\n          \n          \n            \n                # + content - The content to be sent to the client socket", "author": "praneesha", "createdAt": "2020-04-09T04:00:52Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The number of bytes got written or an `Error` if encounters an error while writing\n          \n          \n            \n                # + return - The number of bytes got written or an `Error` if encounters an error while writing\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T04:01:02Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzI1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943255", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + length - Represents the number of bytes which should be read\n          \n          \n            \n                # + length - Represents the number of bytes, which should be read", "author": "praneesha", "createdAt": "2020-04-09T04:01:12Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The content as a byte array, the number of bytes read and the address of the sender\n          \n          \n            \n                # + return - The content as a byte array, the number of bytes read, the address of the sender,", "author": "praneesha", "createdAt": "2020-04-09T04:01:34Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - The content as a byte array, the number of bytes read and the address of the sender", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzM1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943357", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            or an `Error` if encounters an error while reading\n          \n          \n            \n                #            or an `Error` if encounters an error while reading\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T04:01:42Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - The content as a byte array, the number of bytes read and the address of the sender\n+    #            or an `Error` if encounters an error while reading", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - an `Error` if encounters an error while closing the connection or `nil`\n          \n          \n            \n                # + return - an `Error` if encounters an error while closing the connection or `nil`\n          \n      \n    \n    \n  \n\nPlease refer the guideline for the return statement.", "author": "praneesha", "createdAt": "2020-04-09T04:01:52Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -46,28 +40,31 @@ public type UdpClient client object {\n     }\n \n     # Send given data to the specified remote client.\n+    # ```ballerina int|Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826}); ```\n     #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+    # + content - The content that wish to send to the client socket\n+    # + address - The address of the remote client socket\n+    # + return - The number of bytes got written or an `Error` if encounters an error while writing\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n     # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n     # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n     # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+    # ```ballerina [byte[], int, Address]|ReadTimedOutError result = socketClient->receiveFrom(); ```\n     #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+    # + length - Represents the number of bytes which should be read\n+    # + return - The content as a byte array, the number of bytes read and the address of the sender\n+    #            or an `Error` if encounters an error while reading\n     public remote function receiveFrom(int length = -100) returns [byte[], int, Address]|ReadTimedOutError {\n         return externReceiveFrom(self, length);\n     }\n \n     # Closes the client socket connection.\n+    # ```ballerina Error? closeResult = socketClient->close(); ```\n     #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+    # + return - an `Error` if encounters an error while closing the connection or `nil`", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MzQ2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r405943463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configurations for UDP client.\n          \n          \n            \n            # Configurations for the UDP client.", "author": "praneesha", "createdAt": "2020-04-09T04:02:01Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -82,9 +79,10 @@ public type Address record {|\n     int port;\n |};\n \n-# Configuration for UDP client.\n+# Configurations for UDP client.", "originalCommit": "b5b408cbb65a9b5672ba50459298b10a356801f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e59c82401c32e0bb210325cdd4dfee85669c3374", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e59c82401c32e0bb210325cdd4dfee85669c3374", "message": "Fix review comments\n\nFix the suggested changes\n\nFix the suggested changes", "committedDate": "2020-04-10T08:37:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDExNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406814117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n          \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n          \n      \n    \n    \n  \n\nNeed to add the below sentence and link to any existing BBEs.\nFor information on the operations, which you can perform with this module, see the below Functions.", "author": "praneesha", "createdAt": "2020-04-10T15:40:10Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.", "originalCommit": "40306bf77de9a2c65d1c213033155fe8fbb45717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTIyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406831221", "bodyText": "I think, I already added. Do you mention https://github.com/ballerina-platform/ballerina-lang/pull/22528/files#diff-9b7e561f4f3218cb1989b22fbbd2a70eR29?", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-04-10T16:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTE5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406839194", "bodyText": "Reviewed.", "author": "praneesha", "createdAt": "2020-04-10T16:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNDI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406814297", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be closed the connection or else `nil`\n          \n          \n            \n            # + return - A `socket:Error` if client can't be closed the connection or else `nil`\n          \n      \n    \n    \n  \n\nPlease replace all occurrences of \"nil\" with \"()\".", "author": "praneesha", "createdAt": "2020-04-10T15:40:35Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `nil`", "originalCommit": "40306bf77de9a2c65d1c213033155fe8fbb45717", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzkzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406817934", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + config - Configurations related to consumer endpoint\n          \n          \n            \n                # + config - Configurations related to the consumer endpoint", "author": "praneesha", "createdAt": "2020-04-10T15:48:59Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -18,34 +18,55 @@ import ballerina/lang.'object as lang;\n import ballerina/java;\n \n # Represents service endpoint where socket server service registered and start.\n-#\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to consumer endpoint", "originalCommit": "40306bf77de9a2c65d1c213033155fe8fbb45717", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTA3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406839071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * [Basic TCP Socket](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)\n          \n          \n            \n             * [Basic TCP Socket Example](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)", "author": "praneesha", "createdAt": "2020-04-10T16:39:22Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `socket:Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n+\n+A `socket:Listener` endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n+listener socket:Listener server = new(61598);\n+```\n \n-public function main() {\n-    socket:UdpClient socketClient = new;\n-    string msg = \"Hello from UDP client\";\n-    byte[] c1 = msg.toBytes();\n-    var sendResult =\n-        socketClient->sendTo(c1, { host: \"localhost\", port: 48826 });\n-    if (sendResult is int) {\n-        io:println(\"Number of bytes written: \", sendResult);\n-    } else {\n-        panic sendResult;\n-    }\n-    var result = socketClient->receiveFrom();\n-    if (result is [byte[], int, socket:Address]) {\n-        var [content, length, address] = result;\n-        io:ReadableByteChannel byteChannel \n-                = checkpanic io:createReadableChannel(content);\n-        io:ReadableCharacterChannel characterChannel \n-                = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-        var str = characterChannel.read(60);\n-        if (str is string) {\n-            io:println(\"Received: \", <@untainted> str);\n-        } else {\n-            io:println(str.detail()[\"message\"]);\n-        }\n-    } else {\n-        io:println(\"An error occurred while receiving the data \", result);\n-    }\n-    var closeResult = socketClient->close();\n-    if (closeResult is error) {\n-        io:println(\"An error occurred while closing the connection \", \n-                    closeResult);\n-    }\n-}\n-```\n\\ No newline at end of file\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the following.\n+ * [Basic TCP Socket](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)", "originalCommit": "4d1710aed573392b2aabbb4e303c4428b1bd5516", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r406839114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * [Basic UDP Client Socket](https://ballerina.io/learn/by-example/udp-socket-client.html).\n          \n          \n            \n             * [Basic UDP Client Socket Example](https://ballerina.io/learn/by-example/udp-socket-client.html).", "author": "praneesha", "createdAt": "2020-04-10T16:39:30Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `socket:Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n+\n+A `socket:Listener` endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n+listener socket:Listener server = new(61598);\n+```\n \n-public function main() {\n-    socket:UdpClient socketClient = new;\n-    string msg = \"Hello from UDP client\";\n-    byte[] c1 = msg.toBytes();\n-    var sendResult =\n-        socketClient->sendTo(c1, { host: \"localhost\", port: 48826 });\n-    if (sendResult is int) {\n-        io:println(\"Number of bytes written: \", sendResult);\n-    } else {\n-        panic sendResult;\n-    }\n-    var result = socketClient->receiveFrom();\n-    if (result is [byte[], int, socket:Address]) {\n-        var [content, length, address] = result;\n-        io:ReadableByteChannel byteChannel \n-                = checkpanic io:createReadableChannel(content);\n-        io:ReadableCharacterChannel characterChannel \n-                = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-        var str = characterChannel.read(60);\n-        if (str is string) {\n-            io:println(\"Received: \", <@untainted> str);\n-        } else {\n-            io:println(str.detail()[\"message\"]);\n-        }\n-    } else {\n-        io:println(\"An error occurred while receiving the data \", result);\n-    }\n-    var closeResult = socketClient->close();\n-    if (closeResult is error) {\n-        io:println(\"An error occurred while closing the connection \", \n-                    closeResult);\n-    }\n-}\n-```\n\\ No newline at end of file\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the following.\n+ * [Basic TCP Socket](https://ballerina.io/learn/by-example/tcp-socket-listener-client.html)\n+ * [Basic UDP Client Socket](https://ballerina.io/learn/by-example/udp-socket-client.html).", "originalCommit": "4d1710aed573392b2aabbb4e303c4428b1bd5516", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyNzkwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407027905", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n          \n          \n            \n            This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.", "author": "chamil321", "createdAt": "2020-04-11T07:00:56Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407028428", "bodyText": "Shall we concatenate this sentence to above to get rid of this endpoint part?", "author": "chamil321", "createdAt": "2020-04-11T07:07:02Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODY0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407028642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A `socket:Listener` endpoint can be defined as follows:\n          \n          \n            \n            A `socket:Listener` can be defined as follows:", "author": "chamil321", "createdAt": "2020-04-11T07:09:15Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;\n ```\n-### UDP Client endpoints\n-UDP client endpoint is used to interact with the remote UDP host.\n \n+### Listener endpoints\n+The `socket:Listener` is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n+The `onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n+\n+A `socket:Listener` endpoint can be defined as follows:", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDE2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030162", "bodyText": "Add code snippets, Check following LC methods as well", "author": "chamil321", "createdAt": "2020-04-11T07:26:20Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -18,34 +18,55 @@ import ballerina/lang.'object as lang;\n import ballerina/java;\n \n # Represents service endpoint where socket server service registered and start.\n-#\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the consumer endpoint\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+    # Starts the `socket:Listener`.\n+    #", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030657", "bodyText": "This API change cannot be pushed with a patch release. Either we have to undo this change from the PR or push these changes to a minor release", "author": "chamil321", "createdAt": "2020-04-11T07:32:50Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -18,19 +18,10 @@ import ballerina/java;\n \n # Represents socket client and related remote functions.\n #\n-# + remotePort - the remote port number to which this socket is connected\n-# + localPort - the local port number to which this socket is bound\n-# + remoteAddress - the remote IP address string in textual presentation to which the socket is connected\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + id - a unique identifier to identify each client\n+# + config - The configurations for the socket client endpoint\n public type Client client object {\n \n     private ClientConfig? config = ();\n-    public int remotePort = 0;\n-    public int localPort = 0;\n-    public string? remoteAddress = ();\n-    public string? localAddress = ();\n-    public int id = 0;", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDc5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `socket:UdpClient` is used to interact with the remote UDP host. \n          \n          \n            \n            The `socket:UdpClient` is used to interact with the remote UDP host", "author": "praneesha", "createdAt": "2020-04-11T07:34:27Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. ", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDgyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030820", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This endpoint can be defined as follows:\n          \n          \n            \n            and it can be defined as follows:", "author": "praneesha", "createdAt": "2020-04-11T07:34:45Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:\n \n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host. \n \n+This endpoint can be defined as follows:", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDkwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Client endpoint can be defined by providing host and port as follows:\n          \n          \n            \n            A Client endpoint can be defined by providing the host and port as follows:", "author": "praneesha", "createdAt": "2020-04-11T07:35:52Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,31 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `socket:Client`, `socket:UdpClient` and `socket:Listener`.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-## Samples\n+A Client endpoint can be defined by providing host and port as follows:", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDk0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents socket client and related remote functions.\n          \n          \n            \n            # Represents the socket client and related remote functions.", "author": "praneesha", "createdAt": "2020-04-11T07:36:42Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -18,19 +18,10 @@ import ballerina/java;\n \n # Represents socket client and related remote functions.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + config - The configurations for the socket client endpoint\n          \n          \n            \n            # + config - The configurations for the socket client \n          \n      \n    \n    \n  \n\nRemoving as per @chamil321's comment above.", "author": "praneesha", "createdAt": "2020-04-11T07:37:12Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -18,19 +18,10 @@ import ballerina/java;\n \n # Represents socket client and related remote functions.\n #\n-# + remotePort - the remote port number to which this socket is connected\n-# + localPort - the local port number to which this socket is bound\n-# + remoteAddress - the remote IP address string in textual presentation to which the socket is connected\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + id - a unique identifier to identify each client\n+# + config - The configurations for the socket client endpoint", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDk5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407030998", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Writes given data to the client socket.\n          \n          \n            \n            # Writes the given data to the client socket.", "author": "praneesha", "createdAt": "2020-04-11T07:37:24Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031052", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n          \n          \n            \n            # + return - Content as a byte array, the number of bytes read, or else a `socket:ReadTimedOutError` if the data", "author": "praneesha", "createdAt": "2020-04-11T07:38:00Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031086", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be closed the connection or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if the client can't close the connection or else `()`", "author": "praneesha", "createdAt": "2020-04-11T07:38:30Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTEzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031136", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Shutdowns the further read from socket.\n          \n          \n            \n            # Shuts down any further reading from the socket.", "author": "praneesha", "createdAt": "2020-04-11T07:38:55Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031213", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`", "author": "praneesha", "createdAt": "2020-04-11T07:39:39Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTI0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Shutdowns the further write from socket.\n          \n          \n            \n            # Shuts down any further writing from the socket.", "author": "praneesha", "createdAt": "2020-04-11T07:40:00Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shutdowns the further write from socket.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTI3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if client can't be shutdown the write from socket or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`", "author": "praneesha", "createdAt": "2020-04-11T07:40:28Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +38,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient->write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array, the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be closed the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shutdowns the further read from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the read from socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shutdowns the further write from socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if client can't be shutdown the write from socket or else `()`", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTMyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents service endpoint where socket server service registered and start.\n          \n          \n            \n            # Represents the service endpoint on which the socket server service is registered and started.", "author": "praneesha", "createdAt": "2020-04-11T07:41:13Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -18,34 +18,55 @@ import ballerina/lang.'object as lang;\n import ballerina/java;\n \n # Represents service endpoint where socket server service registered and start.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031402", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents UDP socket client and related remote functions.\n          \n          \n            \n            # Represents the UDP socket client and related remote functions.", "author": "praneesha", "createdAt": "2020-04-11T07:42:13Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -18,21 +18,15 @@ import ballerina/java;\n \n # Represents UDP socket client and related remote functions.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Initialize the UDP client based on provided configuration.\n          \n          \n            \n                # Initializes the UDP client based on the provided configurations.", "author": "praneesha", "createdAt": "2020-04-11T07:42:30Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -18,21 +18,15 @@ import ballerina/java;\n \n # Represents UDP socket client and related remote functions.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n public type UdpClient client object {\n \n     private Address? localAddress = ();\n-    public int localPort = 0;\n-    public string? interface = ();\n-    public int id = 0;\n \n     # Initialize the UDP client based on provided configuration.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031441", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + localAddress - Locally binding interface and port\n          \n          \n            \n                # + localAddress - Local binding of the interface and port", "author": "praneesha", "createdAt": "2020-04-11T07:42:41Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -18,21 +18,15 @@ import ballerina/java;\n \n # Represents UDP socket client and related remote functions.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n public type UdpClient client object {\n \n     private Address? localAddress = ();\n-    public int localPort = 0;\n-    public string? interface = ();\n-    public int id = 0;\n \n     # Initialize the UDP client based on provided configuration.\n     #\n     # + localAddress - Locally binding interface and port", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTQ3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031473", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Send given data to the specified remote client.\n          \n          \n            \n            # Sends the given data to the specified remote client.", "author": "praneesha", "createdAt": "2020-04-11T07:42:57Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +39,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Send given data to the specified remote client.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTUyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031526", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n          \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer or wait until data is received.", "author": "praneesha", "createdAt": "2020-04-11T07:43:31Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +39,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Send given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer or wait until data receive.", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTU4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407031580", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `socket:Error` if can't be closed the connection or else `()`\n          \n          \n            \n            # + return - A `socket:Error` if it can't close the connection or else `()`", "author": "praneesha", "createdAt": "2020-04-11T07:44:02Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +39,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Send given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n+# If the request length is lesser than the data in the buffer, then the rest will be discarded.\n+# ```ballerina\n+# [byte[], int, Address]|socket:ReadTimedOutError result = socketClient->receiveFrom();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - The content as a byte array, the number of bytes read, the address of the sender,\n+#            or else a `socket:Error` if the data can't be read from the client\n     public remote function receiveFrom(int length = -100) returns [byte[], int, Address]|ReadTimedOutError {\n         return externReceiveFrom(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if can't be closed the connection or else `()`", "originalCommit": "a743aef03e706feab31f7b4fca5761857c863e35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODUyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098528", "bodyText": "\"provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request\"\n^ The above doesn't sound right. Need to be rephrased properly.\nAlso, the \"endpoint\" terminology was dropped some time back. Again, needs to be rephrased in a better way", "author": "pubudu91", "createdAt": "2020-04-11T18:57:49Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.", "originalCommit": "a052f59524c13d21762eeb3a92fb615053a3aa66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODYxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098610", "bodyText": "Drop the use of the term endpoint.", "author": "pubudu91", "createdAt": "2020-04-11T18:58:41Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints", "originalCommit": "a052f59524c13d21762eeb3a92fb615053a3aa66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODY2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098667", "bodyText": "Applies to other places as well, where clients and listeners are referred to as endpoints", "author": "pubudu91", "createdAt": "2020-04-11T18:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5ODk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407098951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n          \n          \n            \n            The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's call-back service can retrieve the data from the server and do multiple requests/responses between the client and the server.", "author": "pubudu91", "createdAt": "2020-04-11T19:02:09Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.", "originalCommit": "a052f59524c13d21762eeb3a92fb615053a3aa66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MTE0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407971146", "bodyText": "We need to mention the callback service as well here. template of the callback service.", "author": "daneshk", "createdAt": "2020-04-14T08:50:47Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+A Client endpoint can be defined by providing the host and port as follows:\n \n-## Samples\n-\n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});", "originalCommit": "a052f59524c13d21762eeb3a92fb615053a3aa66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MTk1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407971954", "bodyText": "And how the client can be used. following lines\n    string msg = \"Hello Ballerina\\n\";\n    byte[] c1 = msg.toBytes();\n    var writeResult = socketClient->write(c1);", "author": "daneshk", "createdAt": "2020-04-14T08:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MTE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Mjg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407972845", "bodyText": "We need to add code snippets and describe the usage of this client", "author": "daneshk", "createdAt": "2020-04-14T08:53:33Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,28 @@\n-## Module overview\n+This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates three types of endpoints called `socket:Client`, `socket:UdpClient`, and `socket:Listener`.\n+#### TCP Client endpoints\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's `callbackService` can retrieve the data from the server and do multiple requests/responses between the client and the server.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+A Client endpoint can be defined by providing the host and port as follows:\n \n-## Samples\n-\n-### TCP Listener endpoints\n-The sample given below shows how a listener is used to listen to the incoming socket request. The `onConnect(socket:Caller)` resource function gets invoked when a new client is connected. The new client is represented using the `socket:Caller`.\n-`onReadReady(socket:Caller)` resource gets invoked once the remote client sends some data.\n- \n ```ballerina\n-import ballerina/log;\n-import ballerina/socket;\n-\n-listener socket:Listener server = new(61598);\n-\n-service echoServer on server {\n-    resource function onConnect(socket:Caller caller) {\n-        log:printInfo(\"Join: \" + caller.remotePort.toString());\n-    }\n-\n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var writeResult = caller->write(content);\n-                if (writeResult is int) {\n-                    log:printInfo(\"Number of bytes written: \" \n-                                    + writeResult.toString());\n-                } else {\n-                    log:printError(\"Unable to written the content\", writeResult);\n-                }\n-            } else {\n-                log:printInfo(\"Client close: \" + caller.remotePort.toString());\n-            }\n-        } else {\n-            log:printError(\"Unable to read the content\", result);\n-        }\n-    }\n-\n-    resource function onError(socket:Caller caller, error er) {\n-        log:printError(\"An error occurred\", er);\n-    }\n-}\n+socket:Client socketClient = new ({host: \"localhost\", port: 61598});\n ```\n \n-### TCP Client endpoints\n-The client endpoint is used to connect to and interact with a socket server. The client can only send the data to the\n- server. The client's `callbackService` needs to retrieve the data from the server and do multiple requests/responses between the client and the server.\n-\n+#### UDP Client endpoints\n+The `socket:UdpClient` is used to interact with the remote UDP host and it can be defined as follows:\n ```ballerina\n-import ballerina/io;\n-import ballerina/socket;\n-\n-public function main() {\n-    socket:Client socketClient = new({ host: \"localhost\", \n-                                       port: 61598, \n-                                       callbackService: ClientService });\n-    string msg = \"Hello Ballerina\\n\";\n-    byte[] c1 = msg.toBytes();\n-    var writeResult = socketClient->write(c1);\n-    if (writeResult is int) {\n-        io:println(\"Number of bytes written: \" , writeResult);\n-    } else {\n-        io:println(\"Unable to written the content\", \n-                        writeResult.detail()[\"message\"]);\n-    }\n-}\n-\n-service ClientService = service {\n-\n-    resource function onConnect(socket:Caller caller) {\n-        io:println(\"connect: \", caller.remotePort);\n-    }\n-    \n-    resource function onReadReady(socket:Caller caller) {\n-        var result = caller->read();\n-        if (result is [byte[], int]) {\n-            var [content, length] = result;\n-            if (length > 0) {\n-                var str = getString(content);\n-                if (str is string) {\n-                    io:println(<@untainted> str);\n-                } else {\n-                    io:println(str.reason());\n-                }\n-                var closeResult = caller->close();\n-                if (closeResult is error) {\n-                    io:println(closeResult.detail()[\"message\"]);\n-                } else {\n-                    io:println(\"Client connection closed successfully.\");\n-                }\n-            } else {\n-                io:println(\"Client close: \", caller.remotePort);\n-            }\n-        } else {\n-            io:println(result);\n-        }\n-    }\n-    \n-    resource function onError(socket:Caller caller, error er) {\n-        io:println(er.reason());\n-    }\n-};\n-\n-function getString(byte[] content) returns @tainted string | error {\n-    io:ReadableByteChannel byteChannel = check io:createReadableChannel(content);\n-    io:ReadableCharacterChannel \n-         characterChannel = new io:ReadableCharacterChannel(byteChannel, \"UTF-8\");\n-    return characterChannel.read(50);\n-}\n+socket:UdpClient socketClient = new;", "originalCommit": "a052f59524c13d21762eeb3a92fb615053a3aa66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NTkyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407975921", "bodyText": "like https://github.com/daneshk/ballerina/blob/nats-docs-updates/stdlib/messaging/nats/src/main/ballerina/src/nats/Module.md", "author": "daneshk", "createdAt": "2020-04-14T08:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Mjg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NzAwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r407977007", "bodyText": "It doesn't need to be complete code. only specify the important codes", "author": "daneshk", "createdAt": "2020-04-14T08:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Mjg0NQ=="}], "type": "inlineReview"}, {"oid": "02bd6a411a92e056617f8d0b3381b2ca15e7a336", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02bd6a411a92e056617f8d0b3381b2ca15e7a336", "message": "Apply the suggested changes\n\nChange the log to io", "committedDate": "2020-04-14T13:18:37Z", "type": "commit"}, {"oid": "49395181ec11bbd1a613224790a72aaef4a45628", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/49395181ec11bbd1a613224790a72aaef4a45628", "message": "Revert \"Apply the suggested changes\"\n\nThis reverts commit 02bd6a411a92e056617f8d0b3381b2ca15e7a336.", "committedDate": "2020-04-14T13:23:27Z", "type": "commit"}, {"oid": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e0fa518a8b05edcd3662f3e47d7ae780d07a59c", "message": "Fix the reviewed changes\n\nFix the missed comment\n\nFix the missed comment\n\nFix the missed comment", "committedDate": "2020-04-14T15:35:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MjEzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408582130", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + id - An unique identifier to identify each client\n          \n          \n            \n            # + id - A unique identifier to identify each client\n          \n      \n    \n    \n  \n\nhttps://www.quora.com/Which-is-the-correct-grammar-usage-a-unique-or-an-unique", "author": "chamil321", "createdAt": "2020-04-15T05:02:19Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -16,23 +16,23 @@\n \n import ballerina/java;\n \n-# Represents UDP socket client and related remote functions.\n+# Initializes the UDP client based on the provided configurations.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localPort - The local port number to which this socket is bound\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n+# + interface - The network interface to bind to\n+# + id - An unique identifier to identify each client", "originalCommit": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MjYzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408582631", "bodyText": "socket server or socket listener the proper term here?", "author": "chamil321", "createdAt": "2020-04-15T05:04:17Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket server on which the socket server service is registered and started.", "originalCommit": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MjczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408582737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configurations for the socket client endpoint.\n          \n          \n            \n            # Configurations for the socket client.", "author": "chamil321", "createdAt": "2020-04-15T05:04:43Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array and the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't close the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shuts down any further reading from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shuts down any further writing from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for the socket client endpoint.", "originalCommit": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzQ3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408583472", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols.\n          \n          \n            \n            This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols. The module facilitates a TCP `Client` and a TCP `Listener`.", "author": "chamil321", "createdAt": "2020-04-15T05:07:29Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,56 @@\n-## Module overview\n+This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols.", "originalCommit": "5e0fa518a8b05edcd3662f3e47d7ae780d07a59c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDEzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408590132", "bodyText": "Connection-oriented and connectionless protocols indicate TCP and UDP. So, I think, Don't need to update this.", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-04-15T05:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzQ3Mg=="}], "type": "inlineReview"}, {"oid": "69ee0973d87bd8338ec524930b2e0994a549eba6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69ee0973d87bd8338ec524930b2e0994a549eba6", "message": "Apply the suggested changes", "committedDate": "2020-04-15T05:28:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NTk2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408875966", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Client can be defined by providing the host, port and callbackService as follows:\n          \n          \n            \n            A Client can be defined by providing the host, port, and callbackService as follows.", "author": "praneesha", "createdAt": "2020-04-15T14:15:33Z", "path": "stdlib/socket/src/main/ballerina/src/socket/Module.md", "diffHunk": "@@ -1,154 +1,56 @@\n-## Module overview\n+This module provides an implementation for sending/receiving messages to/from another application process (local or remote) for both connection-oriented and connectionless protocols.\n \n-This module provides an implementation for connecting to a remote socket server or acts as a server for an incoming socket request. The module facilitates two types of endpoints called `Client` and `Listener`.\n+#### TCP Client\n \n-## Samples\n+The `socket:Client` is used to connect to a socket server and interact with it. The client can only send the data to the server and the client's call-back service can retrieve the data from the server and do multiple requests/responses between the client and the server.\n+\n+A Client can be defined by providing the host, port and callbackService as follows:", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NzA0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408877048", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n          \n          \n            \n            # Reads data from the client socket. If the data has the specified length, then it waits until that number of bytes", "author": "praneesha", "createdAt": "2020-04-15T14:17:03Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NzE1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408877151", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer.\n          \n          \n            \n            # are received from the client. Else, it returns the data available in the OS buffer.", "author": "praneesha", "createdAt": "2020-04-15T14:17:12Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NzkzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408877935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + callbackService - The callback service for the client. Resources in this service gets called on receipt\n          \n          \n            \n            # + callbackService - The callback service for the client. Resources in this service gets called on the receipt", "author": "praneesha", "createdAt": "2020-04-15T14:18:11Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array and the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't close the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shuts down any further reading from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shuts down any further writing from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for the socket client.\n #\n-# + host - Target service URL\n-# + port - Port number of the remote service\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n-# + callbackService - The callback service for the client. Resources in this service gets called on receipt of messages from the server.\n+# + host - The target service URL\n+# + port - The port number of the remote service\n+# + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,\n+#                         the default value of 300000 milliseconds (5 minutes) will be used.\n+# + callbackService - The callback service for the client. Resources in this service gets called on receipt", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODAxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                     of messages from the server.\n          \n          \n            \n            #                     of the messages from the server.", "author": "praneesha", "createdAt": "2020-04-15T14:18:18Z", "path": "stdlib/socket/src/main/ballerina/src/socket/client_socket.bal", "diffHunk": "@@ -47,54 +51,72 @@ public type Client client object {\n         return ();\n     }\n \n-    # Writes given data to the client socket.\n-    #\n-    # + content - - the content that wish to send to the client socket\n-    # + return - - number of bytes got written or an error if encounters an error while writing\n+# Writes the given data to the client socket.\n+# ```ballerina\n+# int|socket:Error writeResult = socketClient:write(payloadByte);\n+# ```\n+#\n+# + content - The content, which will be sent to the client socket\n+# + return - The number of bytes that got written or else a `socket:Error` if the given data can't be written\n     public remote function write(byte[] content) returns int|Error {\n         return externWrite(self, content);\n     }\n \n-    # Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer.\n-    # In the case of the connection being closed by the client, then return either -1 or the data\n-    # that is currently available in the buffer.\n-    # Number of bytes returned will be < 0 if the client closes the connection.\n-    #\n-    # + length - - Positive integer. Represents the number of bytes which should be read\n-    # + return - - Content as a byte array and the number of bytes read or an error if encounters an error while reading\n+# Reads data from the client socket. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer.\n+# In the case of the connection being closed by the client, then return either -1 or the data\n+# that is currently available in the buffer.\n+# Number of bytes returned will be < 0 if the client closes the connection.\n+# ```ballerina\n+# [byte[], int]|socket:ReadTimedOutError result = socketClient->read();\n+# ```\n+#\n+# + length - Represents the number of bytes, which should be read\n+# + return - Content as a byte array and the number of bytes read or else a `socket:ReadTimedOutError` if the data\n+#            can't be read from the client\n     public remote function read(public int length = -100) returns @tainted [byte[], int]|ReadTimedOutError {\n         return externRead(self, length);\n     }\n \n-    # Closes the client socket connection.\n-    #\n-    # + return - - an error if encounters an error while closing the connection or returns nil otherwise\n+# Closes the client socket connection.\n+# ```ballerina\n+# socket:Error? closeResult = socketClient->close();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't close the connection or else `()`\n     public remote function close() returns Error? {\n         return closeClient(self);\n     }\n \n-    # Shutdowns the further read from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the read from socket or returns nil otherwise\n+# Shuts down any further reading from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownRead();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't be shut down to stop reading from the socket or else `()`\n     public remote function shutdownRead() returns Error? {\n         return externShutdownRead(self);\n     }\n \n-    # Shutdowns the further write from socket.\n-    #\n-    # + return - an error if encounters an error while shutdown the write from socket or returns nil otherwise\n+# Shuts down any further writing from the socket.\n+# ```ballerina\n+# socket:Error? result = socketClient->shutdownWrite();\n+# ```\n+#\n+# + return - A `socket:Error` if the client can't shut down to stop the writing to the socket or else `()`\n     public remote function shutdownWrite() returns Error? {\n         return externShutdownWrite(self);\n     }\n };\n \n-# Configuration for socket client endpoint.\n+# Configurations for the socket client.\n #\n-# + host - Target service URL\n-# + port - Port number of the remote service\n-# + readTimeoutInMillis - Socket read timeout value to be used in milliseconds. Default is 300000 milliseconds (5 minutes)\n-# + callbackService - The callback service for the client. Resources in this service gets called on receipt of messages from the server.\n+# + host - The target service URL\n+# + port - The port number of the remote service\n+# + readTimeoutInMillis - The socket reading timeout value to be used in milliseconds. If this is not set,\n+#                         the default value of 300000 milliseconds (5 minutes) will be used.\n+# + callbackService - The callback service for the client. Resources in this service gets called on receipt\n+#                     of messages from the server.", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODI3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878274", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - () or else a `socket:Error` upon failure to start the listener\n          \n          \n            \n            # + return - `()` or else a `socket:Error` upon failure to start the listener", "author": "praneesha", "createdAt": "2020-04-15T14:18:35Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878402", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Gracefully stops the `socket:Listener`.\n          \n          \n            \n            # Stops the `socket:Listener` gracefully.", "author": "praneesha", "createdAt": "2020-04-15T14:18:47Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODUyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878529", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - () or else a `socket:Error` upon failure to stop the listener\n          \n          \n            \n            # + return - `()` or else a `socket:Error` upon failure to stop the listener", "author": "praneesha", "createdAt": "2020-04-15T14:18:57Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__gracefulStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODYzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878639", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Forcefully stops the `socket:Listener`.\n          \n          \n            \n            # Stops the `socket:Listener` forcefully.", "author": "praneesha", "createdAt": "2020-04-15T14:19:06Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__gracefulStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+# Forcefully stops the `socket:Listener`.", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3ODc1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408878751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - () or else a `socket:Error` upon failure to stop the listener\n          \n          \n            \n            # + return - `()` or else a `socket:Error` upon failure to stop the listener", "author": "praneesha", "createdAt": "2020-04-15T14:19:15Z", "path": "stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal", "diffHunk": "@@ -17,35 +17,71 @@\n import ballerina/lang.'object as lang;\n import ballerina/java;\n \n-# Represents service endpoint where socket server service registered and start.\n-#\n+# Represents the socket listener on which the socket listener service is registered and started.\n public type Listener object {\n \n     *lang:Listener;\n \n+    # Creates a new socket Listener.\n+    #\n+    # + port - The port number of the remote service\n+    # + config - Configurations related to the `socket:Listener`\n     public function __init(int port, ListenerConfig? config = ()) {\n         var result = initServer(self, port, config ?: {});\n         if (result is error) {\n             panic result;\n         }\n     }\n \n+# Starts the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__start();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to start the listener\n     public function __start() returns error? {\n         return startService(self);\n     }\n \n+# Gracefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__gracefulStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener\n     public function __gracefulStop() returns error? {\n         return externStop(self, true);\n     }\n \n+# Forcefully stops the `socket:Listener`.\n+# ```ballerina\n+# socket:error? result = socketListener.__immediateStop();\n+# ```\n+#\n+# + return - () or else a `socket:Error` upon failure to stop the listener", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDA2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408880068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + interface - The network interface to bind to\n          \n          \n            \n            # + interface - The network interface to bind", "author": "praneesha", "createdAt": "2020-04-15T14:20:49Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -16,23 +16,23 @@\n \n import ballerina/java;\n \n-# Represents UDP socket client and related remote functions.\n+# Initializes the UDP client based on the provided configurations.\n #\n-# + localPort - the local port number to which this socket is bound\n-# + localAddress - the local IP address string in textual presentation to which the socket is bound\n-# + interface - network interface to bind to\n-# + id - a unique identifier to identify each client\n+# + localPort - The local port number to which this socket is bound\n+# + localAddress - The local IP address string in textual presentation to which the socket is bound\n+# + interface - The network interface to bind to", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDM4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408880389", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n          \n          \n            \n            # Reads data from the remote client. If the data has the specified length, then it waits until that number of bytes", "author": "praneesha", "createdAt": "2020-04-15T14:21:15Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +45,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Sends the given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MDUyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22528#discussion_r408880527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # are received from the client. Else, return the data available in the OS buffer or wait until data is received.\n          \n          \n            \n            # are received from the client. Else, it returns the data available in the OS buffer or waits until the data is received.", "author": "praneesha", "createdAt": "2020-04-15T14:21:27Z", "path": "stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal", "diffHunk": "@@ -45,29 +45,38 @@ public type UdpClient client object {\n         }\n     }\n \n-    # Send given data to the specified remote client.\n-    #\n-    # + content - the content that wish to send to the client socket\n-    # + address - the address of the remote client socket\n-    # + return - number of bytes got written or an error if encounters an error while writing\n+# Sends the given data to the specified remote client.\n+# ```ballerina\n+# int|socket:Error result = socketClient->sendTo(c1, {host: \"localhost\", port: 48826});\n+# ```\n+#\n+# + content - The content to be sent to the client socket\n+# + address - The address of the remote client socket\n+# + return - The number of bytes got written or else a `socket:Error` if the given data can't be sent\n     public remote function sendTo(byte[] content, Address address) returns int|Error {\n         return udpClientSendTo(self, content, address);\n     }\n \n-    # Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n-    # are received from the client. Else, return the data available in the OS buffer or wait until data receive.\n-    # If the request length is lesser than the data in the buffer, then the rest will be discarded.\n-    #\n-    # + length - Positive integer. Represents the number of bytes which should be read\n-    # + return - Content as a byte array, the number of bytes read and the address of the sender\n-    # or an error if encounters an error while reading\n+# Reads data from the remote client. If the data has the specified length, then wait until that number of bytes\n+# are received from the client. Else, return the data available in the OS buffer or wait until data is received.", "originalCommit": "69ee0973d87bd8338ec524930b2e0994a549eba6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea3788ebde4f76c550ce6dae928324eb160e8dea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea3788ebde4f76c550ce6dae928324eb160e8dea", "message": "Update stdlib/socket/src/main/ballerina/src/socket/client_socket.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:33:39Z", "type": "commit"}, {"oid": "e8472b68bc3f3f54d20968c4df1ce11d3bd886e8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8472b68bc3f3f54d20968c4df1ce11d3bd886e8", "message": "Update stdlib/socket/src/main/ballerina/src/socket/Module.md\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:34:38Z", "type": "commit"}, {"oid": "919dc2e0e6559b2ad7b3db1b8fb5d418d63fbe5c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/919dc2e0e6559b2ad7b3db1b8fb5d418d63fbe5c", "message": "Update stdlib/socket/src/main/ballerina/src/socket/client_socket.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:35:04Z", "type": "commit"}, {"oid": "1cb75ff90d0ced9e8f874672c6eb63bccbca9581", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1cb75ff90d0ced9e8f874672c6eb63bccbca9581", "message": "Update stdlib/socket/src/main/ballerina/src/socket/client_socket.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:35:16Z", "type": "commit"}, {"oid": "908afb88efdac2484bbe503cc420c385bacf0133", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/908afb88efdac2484bbe503cc420c385bacf0133", "message": "Update stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:35:43Z", "type": "commit"}, {"oid": "85a661fb46ab5ea79225b7f877ad3c883d04c7f9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/85a661fb46ab5ea79225b7f877ad3c883d04c7f9", "message": "Update stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:35:57Z", "type": "commit"}, {"oid": "f7596135a01795298929abbbb28319fa24d15a35", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7596135a01795298929abbbb28319fa24d15a35", "message": "Update stdlib/socket/src/main/ballerina/src/socket/udp_client_socket.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:36:11Z", "type": "commit"}, {"oid": "f0821b20c94e58efc7b66308b2dcac97dfec5330", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0821b20c94e58efc7b66308b2dcac97dfec5330", "message": "Update stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:36:21Z", "type": "commit"}, {"oid": "6f0f845307b0bdce6cf2884f6fc226f80d64d06a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f0f845307b0bdce6cf2884f6fc226f80d64d06a", "message": "Update stdlib/socket/src/main/ballerina/src/socket/client_socket.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:36:36Z", "type": "commit"}, {"oid": "7a0573f98705fae75eebde5bce39a7e8ae96b9f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a0573f98705fae75eebde5bce39a7e8ae96b9f6", "message": "Update stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:36:49Z", "type": "commit"}, {"oid": "882a30b85efa76e28878263b781d9717c99bc8aa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/882a30b85efa76e28878263b781d9717c99bc8aa", "message": "Update stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:37:36Z", "type": "commit"}, {"oid": "5b7f1c4fd9ea0f78baf36d56312203665851f741", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b7f1c4fd9ea0f78baf36d56312203665851f741", "message": "Update stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:37:50Z", "type": "commit"}, {"oid": "22a683bc5563965790b28053aabe116453488faa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22a683bc5563965790b28053aabe116453488faa", "message": "Update stdlib/socket/src/main/ballerina/src/socket/listener_endpoint.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:38:05Z", "type": "commit"}]}